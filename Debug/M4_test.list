
M4_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a684  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000218d4  0800a818  0800a818  0001a818  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802c0ec  0802c0ec  000401e0  2**0
                  CONTENTS
  4 .ARM          00000008  0802c0ec  0802c0ec  0003c0ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802c0f4  0802c0f4  000401e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802c0f4  0802c0f4  0003c0f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802c0f8  0802c0f8  0003c0f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0802c0fc  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000401e0  2**0
                  CONTENTS
 10 .bss          00002504  200001e0  200001e0  000401e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200026e4  200026e4  000401e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000401e0  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00040210  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001377c  00000000  00000000  00040253  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000043ea  00000000  00000000  000539cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000011e0  00000000  00000000  00057dc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000758c  00000000  00000000  00058fa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b2b2  00000000  00000000  0006052c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d01a0  00000000  00000000  0007b7de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_rnglists 00000c3a  00000000  00000000  0014b97e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004fc4  00000000  00000000  0014c5b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000044  00000000  00000000  0015157c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a7fc 	.word	0x0800a7fc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800a7fc 	.word	0x0800a7fc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b970 	b.w	8000ea0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	460d      	mov	r5, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	460f      	mov	r7, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4694      	mov	ip, r2
 8000bec:	d965      	bls.n	8000cba <__udivmoddi4+0xe2>
 8000bee:	fab2 f382 	clz	r3, r2
 8000bf2:	b143      	cbz	r3, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf8:	f1c3 0220 	rsb	r2, r3, #32
 8000bfc:	409f      	lsls	r7, r3
 8000bfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000c02:	4317      	orrs	r7, r2
 8000c04:	409c      	lsls	r4, r3
 8000c06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c0a:	fa1f f58c 	uxth.w	r5, ip
 8000c0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c12:	0c22      	lsrs	r2, r4, #16
 8000c14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c1c:	fb01 f005 	mul.w	r0, r1, r5
 8000c20:	4290      	cmp	r0, r2
 8000c22:	d90a      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c24:	eb1c 0202 	adds.w	r2, ip, r2
 8000c28:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c2c:	f080 811c 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c30:	4290      	cmp	r0, r2
 8000c32:	f240 8119 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c36:	3902      	subs	r1, #2
 8000c38:	4462      	add	r2, ip
 8000c3a:	1a12      	subs	r2, r2, r0
 8000c3c:	b2a4      	uxth	r4, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c4a:	fb00 f505 	mul.w	r5, r0, r5
 8000c4e:	42a5      	cmp	r5, r4
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x90>
 8000c52:	eb1c 0404 	adds.w	r4, ip, r4
 8000c56:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c5a:	f080 8107 	bcs.w	8000e6c <__udivmoddi4+0x294>
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	f240 8104 	bls.w	8000e6c <__udivmoddi4+0x294>
 8000c64:	4464      	add	r4, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11e      	cbz	r6, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40dc      	lsrs	r4, r3
 8000c74:	2300      	movs	r3, #0
 8000c76:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0xbc>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80ed 	beq.w	8000e62 <__udivmoddi4+0x28a>
 8000c88:	2100      	movs	r1, #0
 8000c8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	fab3 f183 	clz	r1, r3
 8000c98:	2900      	cmp	r1, #0
 8000c9a:	d149      	bne.n	8000d30 <__udivmoddi4+0x158>
 8000c9c:	42ab      	cmp	r3, r5
 8000c9e:	d302      	bcc.n	8000ca6 <__udivmoddi4+0xce>
 8000ca0:	4282      	cmp	r2, r0
 8000ca2:	f200 80f8 	bhi.w	8000e96 <__udivmoddi4+0x2be>
 8000ca6:	1a84      	subs	r4, r0, r2
 8000ca8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cac:	2001      	movs	r0, #1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	2e00      	cmp	r6, #0
 8000cb2:	d0e2      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb8:	e7df      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cba:	b902      	cbnz	r2, 8000cbe <__udivmoddi4+0xe6>
 8000cbc:	deff      	udf	#255	; 0xff
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8090 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cc8:	1a8a      	subs	r2, r1, r2
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cdc:	0c22      	lsrs	r2, r4, #16
 8000cde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ce2:	fb0e f005 	mul.w	r0, lr, r5
 8000ce6:	4290      	cmp	r0, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cea:	eb1c 0202 	adds.w	r2, ip, r2
 8000cee:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4290      	cmp	r0, r2
 8000cf6:	f200 80cb 	bhi.w	8000e90 <__udivmoddi4+0x2b8>
 8000cfa:	4645      	mov	r5, r8
 8000cfc:	1a12      	subs	r2, r2, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d04:	fb07 2210 	mls	r2, r7, r0, r2
 8000d08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x14e>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x14c>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80bb 	bhi.w	8000e9a <__udivmoddi4+0x2c2>
 8000d24:	4610      	mov	r0, r2
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d2e:	e79f      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d30:	f1c1 0720 	rsb	r7, r1, #32
 8000d34:	408b      	lsls	r3, r1
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d42:	fa20 f307 	lsr.w	r3, r0, r7
 8000d46:	40fd      	lsrs	r5, r7
 8000d48:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4c:	4323      	orrs	r3, r4
 8000d4e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d52:	fa1f fe8c 	uxth.w	lr, ip
 8000d56:	fb09 5518 	mls	r5, r9, r8, r5
 8000d5a:	0c1c      	lsrs	r4, r3, #16
 8000d5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d60:	fb08 f50e 	mul.w	r5, r8, lr
 8000d64:	42a5      	cmp	r5, r4
 8000d66:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2b4>
 8000d7c:	42a5      	cmp	r5, r4
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2b4>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4464      	add	r4, ip
 8000d88:	1b64      	subs	r4, r4, r5
 8000d8a:	b29d      	uxth	r5, r3
 8000d8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d90:	fb09 4413 	mls	r4, r9, r3, r4
 8000d94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2ac>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2ac>
 8000dae:	3b02      	subs	r3, #2
 8000db0:	4464      	add	r4, ip
 8000db2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000db6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dba:	eba4 040e 	sub.w	r4, r4, lr
 8000dbe:	42ac      	cmp	r4, r5
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46ae      	mov	lr, r5
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x29c>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x298>
 8000dc8:	b156      	cbz	r6, 8000de0 <__udivmoddi4+0x208>
 8000dca:	ebb0 0208 	subs.w	r2, r0, r8
 8000dce:	eb64 040e 	sbc.w	r4, r4, lr
 8000dd2:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd6:	40ca      	lsrs	r2, r1
 8000dd8:	40cc      	lsrs	r4, r1
 8000dda:	4317      	orrs	r7, r2
 8000ddc:	e9c6 7400 	strd	r7, r4, [r6]
 8000de0:	4618      	mov	r0, r3
 8000de2:	2100      	movs	r1, #0
 8000de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de8:	f1c3 0120 	rsb	r1, r3, #32
 8000dec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df0:	fa20 f201 	lsr.w	r2, r0, r1
 8000df4:	fa25 f101 	lsr.w	r1, r5, r1
 8000df8:	409d      	lsls	r5, r3
 8000dfa:	432a      	orrs	r2, r5
 8000dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e08:	fb07 1510 	mls	r5, r7, r0, r1
 8000e0c:	0c11      	lsrs	r1, r2, #16
 8000e0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e12:	fb00 f50e 	mul.w	r5, r0, lr
 8000e16:	428d      	cmp	r5, r1
 8000e18:	fa04 f403 	lsl.w	r4, r4, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x258>
 8000e1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e28:	428d      	cmp	r5, r1
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1b49      	subs	r1, r1, r5
 8000e32:	b292      	uxth	r2, r2
 8000e34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e38:	fb07 1115 	mls	r1, r7, r5, r1
 8000e3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e40:	fb05 f10e 	mul.w	r1, r5, lr
 8000e44:	4291      	cmp	r1, r2
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x282>
 8000e48:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000e52:	4291      	cmp	r1, r2
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000e56:	3d02      	subs	r5, #2
 8000e58:	4462      	add	r2, ip
 8000e5a:	1a52      	subs	r2, r2, r1
 8000e5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0xfc>
 8000e62:	4631      	mov	r1, r6
 8000e64:	4630      	mov	r0, r6
 8000e66:	e708      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000e68:	4639      	mov	r1, r7
 8000e6a:	e6e6      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	e6fb      	b.n	8000c68 <__udivmoddi4+0x90>
 8000e70:	4548      	cmp	r0, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e80:	4645      	mov	r5, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x282>
 8000e84:	462b      	mov	r3, r5
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x258>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e90:	3d02      	subs	r5, #2
 8000e92:	4462      	add	r2, ip
 8000e94:	e732      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e96:	4608      	mov	r0, r1
 8000e98:	e70a      	b.n	8000cb0 <__udivmoddi4+0xd8>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e742      	b.n	8000d26 <__udivmoddi4+0x14e>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <MakeBmpHeader>:
*********************************************************************************************************
*	Func name: MakeBmpHeader
*********************************************************************************************************
*/
static void MakeBmpHeader(__packed BMP_T *_pBmp, uint16_t _Width, uint16_t _Height)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	460b      	mov	r3, r1
 8000eae:	807b      	strh	r3, [r7, #2]
 8000eb0:	4613      	mov	r3, r2
 8000eb2:	803b      	strh	r3, [r7, #0]
	/* 14×Ö½Ú Î»Í¼ÎÄ¼þÍ· */
	_pBmp->bfType = 0x4D42;	/* 2×Ö½Ú Î»Í¼Àà±ð£¬ ÔÚWindowsÖÐ£¬´Ë×Ö¶ÎµÄÖµ×ÜÎª'BM'*/
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	f644 5242 	movw	r2, #19778	; 0x4d42
 8000eba:	801a      	strh	r2, [r3, #0]
	_pBmp->bfSize = (_Height * _Width * 3) + 54;	/* bmpÎÄ¼þ´óÐ¡ 4×Ö½Ú */
 8000ebc:	883b      	ldrh	r3, [r7, #0]
 8000ebe:	887a      	ldrh	r2, [r7, #2]
 8000ec0:	fb03 f202 	mul.w	r2, r3, r2
 8000ec4:	4613      	mov	r3, r2
 8000ec6:	005b      	lsls	r3, r3, #1
 8000ec8:	4413      	add	r3, r2
 8000eca:	3336      	adds	r3, #54	; 0x36
 8000ecc:	461a      	mov	r2, r3
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	605a      	str	r2, [r3, #4]
	_pBmp->bfReserved1 = 0;	/* ±£Áô£¬Ã¿×Ö½ÚÒÔ"00"ÌîÐ´ 2×Ö½Ú */
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	811a      	strh	r2, [r3, #8]
	_pBmp->bfReserved2 = 0; /* Í¬ÉÏ 2×Ö½Ú */
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2200      	movs	r2, #0
 8000edc:	815a      	strh	r2, [r3, #10]
	_pBmp->bfOffBits = 54;	/* ¼ÇÂ¼Í¼ÏñÊý¾ÝÇøµÄÆðÊ¼Î»ÖÃ(Í¼ÏóÊý¾ÝÏà¶ÔÓÚÎÄ¼þÍ·×Ö½ÚµÄÆ«ÒÆÁ¿)¡£ 4×Ö½Ú */
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	2236      	movs	r2, #54	; 0x36
 8000ee2:	60da      	str	r2, [r3, #12]

	/* 40×Ö½Ú Î»Í¼ÐÅÏ¢Í· */
	_pBmp->biSize = 40;		/* 4×Ö½Ú ±¾½á¹¹µÄ´óÐ¡£¬ÔÚWindowsÖÐ£¬×ÜÎª28h£¬40×Ö½Ú */
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2228      	movs	r2, #40	; 0x28
 8000ee8:	611a      	str	r2, [r3, #16]
	_pBmp->biWidth = _Width;/* 4×Ö½Ú BMPÍ¼ÏñµÄ¿í¶È£¬µ¥Î»ÏñËØ */
 8000eea:	887a      	ldrh	r2, [r7, #2]
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	615a      	str	r2, [r3, #20]
	_pBmp->biHeight = _Height;		/* 4×Ö½Ú BMPÍ¼ÏñµÄ¸ß¶È£¬µ¥Î»ÏñËØ */
 8000ef0:	883a      	ldrh	r2, [r7, #0]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	619a      	str	r2, [r3, #24]
	_pBmp->biPlanes = 1;			/* 2×Ö½Ú Ä¿±êÉè±¸µÄ¼¶±ð(É«²ÊÆ½ÃæÊý)£¬¹Ì¶¨Îª1 */
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	2201      	movs	r2, #1
 8000efa:	839a      	strh	r2, [r3, #28]
	_pBmp->biBitCount = 24;			/* 2×Ö½Ú BMPÍ¼ÏñµÄÉ«Éî£¬¼´Ò»¸öÏñËØÓÃ¶àÉÙÎ»±íÊ¾¡£³£¼ûµÄÓÐ 1 4 8 16 24 32 */
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2218      	movs	r2, #24
 8000f00:	83da      	strh	r2, [r3, #30]
	_pBmp->biCompression = 0;		/* 4×Ö½Ú Ñ¹ËõÀàÐÍ£¬0(²»Ñ¹Ëõ), 1(BI_RLE8), 2(BI_RLE4) */
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	2200      	movs	r2, #0
 8000f06:	621a      	str	r2, [r3, #32]
	_pBmp->biSizeImage = (_Height * _Width * 3);	/* 4×Ö½Ú ±íÊ¾Î»Í¼Êý¾ÝÇøÓòµÄ´óÐ¡ÒÔ×Ö½ÚÎªµ¥Î» */
 8000f08:	883b      	ldrh	r3, [r7, #0]
 8000f0a:	887a      	ldrh	r2, [r7, #2]
 8000f0c:	fb03 f202 	mul.w	r2, r3, r2
 8000f10:	4613      	mov	r3, r2
 8000f12:	005b      	lsls	r3, r3, #1
 8000f14:	4413      	add	r3, r2
 8000f16:	461a      	mov	r2, r3
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	625a      	str	r2, [r3, #36]	; 0x24
	_pBmp->biXPelsPerMeter = 0;	/* 4×Ö½Ú ÓÃÏóËØ/Ã×±íÊ¾µÄË®Æ½·Ö±æÂÊ */
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2200      	movs	r2, #0
 8000f20:	629a      	str	r2, [r3, #40]	; 0x28
	_pBmp->biYPelsPerMeter = 0;	/* 4×Ö½Ú ÓÃÏóËØ/Ã×±íÊ¾µÄ´¹Ö±·Ö±æÂÊ */
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2200      	movs	r2, #0
 8000f26:	62da      	str	r2, [r3, #44]	; 0x2c
	_pBmp->biClrUsed = 0;		/* 4×Ö½Ú Êµ¼ÊÊ¹ÓÃÉ«²ÊÊýÄ¿£¬0ÔòÓÉÎ»Êý¶¨ */
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	631a      	str	r2, [r3, #48]	; 0x30
	_pBmp->biClrImportant = 0;	/* 4×Ö½Ú Í¼ÏñÖÐÖØÒªµÄÉ«²ÊÊýÄ¿¡£0±íÊ¾µ÷É«°åÄÚËùÓÐµÄÑÕÉ«¶¼ÊÇÖØÒªµÄ  */
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2200      	movs	r2, #0
 8000f32:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000f34:	bf00      	nop
 8000f36:	370c      	adds	r7, #12
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr

08000f40 <SaveScreenToBmp>:
*********************************************************************************************************
*	Funa name: SaveScreenToBmp
*********************************************************************************************************
*/
void SaveScreenToBmp(uint16_t _index)
{
 8000f40:	b590      	push	{r4, r7, lr}
 8000f42:	f6ad 6d24 	subw	sp, sp, #3620	; 0xe24
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	4602      	mov	r2, r0
 8000f4a:	f507 6362 	add.w	r3, r7, #3616	; 0xe20
 8000f4e:	f6a3 631a 	subw	r3, r3, #3610	; 0xe1a
 8000f52:	801a      	strh	r2, [r3, #0]
	FRESULT result;
	FATFS fs;
	FIL file;
	uint32_t bw;
	char path[32];
	uint8_t ucVolume = FS_SD;
 8000f54:	2300      	movs	r3, #0
 8000f56:	f887 3e1f 	strb.w	r3, [r7, #3615]	; 0xe1f

	bsp_LedOn(1);
 8000f5a:	2001      	movs	r0, #1
 8000f5c:	f003 fb58 	bl	8004610 <bsp_LedOn>

	MakeBmpHeader(&tBmpHead, LCD_GetWidth(), LCD_GetHeight());	/* ¹¹½¨BMPÎÄ¼þÍ· */
 8000f60:	f004 fb3c 	bl	80055dc <LCD_GetWidth>
 8000f64:	4603      	mov	r3, r0
 8000f66:	461c      	mov	r4, r3
 8000f68:	f004 fb2c 	bl	80055c4 <LCD_GetHeight>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	461a      	mov	r2, r3
 8000f70:	f607 53e4 	addw	r3, r7, #3556	; 0xde4
 8000f74:	4621      	mov	r1, r4
 8000f76:	4618      	mov	r0, r3
 8000f78:	f7ff ff94 	bl	8000ea4 <MakeBmpHeader>
}
 8000f7c:	bf00      	nop
 8000f7e:	f607 6724 	addw	r7, r7, #3620	; 0xe24
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd90      	pop	{r4, r7, pc}
	...

08000f88 <HardInfo>:
*********************************************************************************************************
*	Func name: HardInfo
*********************************************************************************************************
*/
void HardInfo(void)
{
 8000f88:	b5b0      	push	{r4, r5, r7, lr}
 8000f8a:	b0b4      	sub	sp, #208	; 0xd0
 8000f8c:	af02      	add	r7, sp, #8
	uint8_t ucTouch;		/* ´¥ÃþÊÂ¼þ */
	uint8_t fRefresh;		/* Ë¢ÆÁÇëÇó±êÖ¾,1±íÊ¾ÐèÒªË¢ÐÂ */
	FONT_T tFont, tFontBtn;	/* ¶¨ÒåÒ»¸ö×ÖÌå½á¹¹Ìå±äÁ¿£¬ÓÃÓÚÉèÖÃ×ÖÌå²ÎÊý */
	char buf[128];
	uint16_t x, y;
	uint16_t usLineCap = 18;
 8000f8e:	2312      	movs	r3, #18
 8000f90:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4

	int16_t tpX, tpY;
	BUTTON_T tBtn;

	LCD_ClrScr(CL_BLUE);  	/* ÇåÆÁ£¬±³¾°À¶É« */
 8000f94:	201f      	movs	r0, #31
 8000f96:	f003 ffdb 	bl	8004f50 <LCD_ClrScr>

	{
		tFont.FontCode = FC_ST_16;	/* ×ÖÌå´úÂë 16µãÕó */
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
		tFont.FrontColor = CL_WHITE;	/* ×ÖÌåÑÕÉ« */
 8000fa0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fa4:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
		tFont.BackColor = CL_BLUE;	/* ÎÄ×Ö±³¾°ÑÕÉ« */
 8000fa8:	231f      	movs	r3, #31
 8000faa:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
		tFont.Space = 0;				/* ÎÄ×Ö¼ä¾à£¬µ¥Î» = ÏñËØ */
 8000fae:	2300      	movs	r3, #0
 8000fb0:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae

		/* °´Å¥×ÖÌå */
		tFontBtn.FontCode = FC_ST_16;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
		tFontBtn.BackColor = CL_MASK;	/* Í¸Ã÷É« */
 8000fba:	f649 1399 	movw	r3, #39321	; 0x9999
 8000fbe:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
		tFontBtn.FrontColor = CL_BLACK;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
		tFontBtn.Space = 0;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
	}
	x = 5;
 8000fce:	2305      	movs	r3, #5
 8000fd0:	f8a7 30c2 	strh.w	r3, [r7, #194]	; 0xc2
	y = 3;
 8000fd4:	2303      	movs	r3, #3
 8000fd6:	f8a7 30c0 	strh.w	r3, [r7, #192]	; 0xc0
	LCD_DispStr(x, y, "STM32-V5", &tFont);			/* ÔÚ(8,3)×ø±ê´¦ÏÔÊ¾Ò»´®ºº×Ö */
 8000fda:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8000fde:	f8b7 10c0 	ldrh.w	r1, [r7, #192]	; 0xc0
 8000fe2:	f8b7 00c2 	ldrh.w	r0, [r7, #194]	; 0xc2
 8000fe6:	4ac5      	ldr	r2, [pc, #788]	; (80012fc <HardInfo+0x374>)
 8000fe8:	f004 f800 	bl	8004fec <LCD_DispStr>
	y += usLineCap;
 8000fec:	f8b7 20c0 	ldrh.w	r2, [r7, #192]	; 0xc0
 8000ff0:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 8000ff4:	4413      	add	r3, r2
 8000ff6:	f8a7 30c0 	strh.w	r3, [r7, #192]	; 0xc0

	{
		uint32_t CPU_Sn0, CPU_Sn1, CPU_Sn2;

		CPU_Sn0 = *(__IO uint32_t*)(0x1FFF7A10);
 8000ffa:	4bc1      	ldr	r3, [pc, #772]	; (8001300 <HardInfo+0x378>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
		CPU_Sn1 = *(__IO uint32_t*)(0x1FFF7A10 + 4);
 8001002:	4bc0      	ldr	r3, [pc, #768]	; (8001304 <HardInfo+0x37c>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
		CPU_Sn2 = *(__IO uint32_t*)(0x1FFF7A10 + 8);
 800100a:	4bbf      	ldr	r3, [pc, #764]	; (8001308 <HardInfo+0x380>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

		LCD_DispStr(x, y, "CPU : STM32F407IGT6, LQFP176", &tFont);
 8001012:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001016:	f8b7 10c0 	ldrh.w	r1, [r7, #192]	; 0xc0
 800101a:	f8b7 00c2 	ldrh.w	r0, [r7, #194]	; 0xc2
 800101e:	4abb      	ldr	r2, [pc, #748]	; (800130c <HardInfo+0x384>)
 8001020:	f003 ffe4 	bl	8004fec <LCD_DispStr>
		y += usLineCap;
 8001024:	f8b7 20c0 	ldrh.w	r2, [r7, #192]	; 0xc0
 8001028:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 800102c:	4413      	add	r3, r2
 800102e:	f8a7 30c0 	strh.w	r3, [r7, #192]	; 0xc0

		sprintf(buf, " UID = %08X %08X %08X", CPU_Sn2, CPU_Sn1, CPU_Sn0);
 8001032:	f107 0020 	add.w	r0, r7, #32
 8001036:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800103a:	9300      	str	r3, [sp, #0]
 800103c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001040:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001044:	49b2      	ldr	r1, [pc, #712]	; (8001310 <HardInfo+0x388>)
 8001046:	f007 fa7d 	bl	8008544 <siprintf>
		LCD_DispStr(x, y, buf, &tFont);
 800104a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800104e:	f107 0220 	add.w	r2, r7, #32
 8001052:	f8b7 10c0 	ldrh.w	r1, [r7, #192]	; 0xc0
 8001056:	f8b7 00c2 	ldrh.w	r0, [r7, #194]	; 0xc2
 800105a:	f003 ffc7 	bl	8004fec <LCD_DispStr>
		y += usLineCap;
 800105e:	f8b7 20c0 	ldrh.w	r2, [r7, #192]	; 0xc0
 8001062:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 8001066:	4413      	add	r3, r2
 8001068:	f8a7 30c0 	strh.w	r3, [r7, #192]	; 0xc0
	}
	{
		strcpy(buf, "TFT Driver : ");
 800106c:	f107 0320 	add.w	r3, r7, #32
 8001070:	4aa8      	ldr	r2, [pc, #672]	; (8001314 <HardInfo+0x38c>)
 8001072:	461c      	mov	r4, r3
 8001074:	4613      	mov	r3, r2
 8001076:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001078:	c407      	stmia	r4!, {r0, r1, r2}
 800107a:	8023      	strh	r3, [r4, #0]
		LCD_GetChipDescribe(&buf[strlen(buf)]);
 800107c:	f107 0320 	add.w	r3, r7, #32
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff f8f5 	bl	8000270 <strlen>
 8001086:	4602      	mov	r2, r0
 8001088:	f107 0320 	add.w	r3, r7, #32
 800108c:	4413      	add	r3, r2
 800108e:	4618      	mov	r0, r3
 8001090:	f004 faf2 	bl	8005678 <LCD_GetChipDescribe>
		sprintf(&buf[strlen(buf)], "   %d x %d", LCD_GetWidth(), LCD_GetHeight());
 8001094:	f107 0320 	add.w	r3, r7, #32
 8001098:	4618      	mov	r0, r3
 800109a:	f7ff f8e9 	bl	8000270 <strlen>
 800109e:	4602      	mov	r2, r0
 80010a0:	f107 0320 	add.w	r3, r7, #32
 80010a4:	189c      	adds	r4, r3, r2
 80010a6:	f004 fa99 	bl	80055dc <LCD_GetWidth>
 80010aa:	4603      	mov	r3, r0
 80010ac:	461d      	mov	r5, r3
 80010ae:	f004 fa89 	bl	80055c4 <LCD_GetHeight>
 80010b2:	4603      	mov	r3, r0
 80010b4:	462a      	mov	r2, r5
 80010b6:	4998      	ldr	r1, [pc, #608]	; (8001318 <HardInfo+0x390>)
 80010b8:	4620      	mov	r0, r4
 80010ba:	f007 fa43 	bl	8008544 <siprintf>
		LCD_DispStr(x, y, buf, &tFont);
 80010be:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80010c2:	f107 0220 	add.w	r2, r7, #32
 80010c6:	f8b7 10c0 	ldrh.w	r1, [r7, #192]	; 0xc0
 80010ca:	f8b7 00c2 	ldrh.w	r0, [r7, #194]	; 0xc2
 80010ce:	f003 ff8d 	bl	8004fec <LCD_DispStr>
		y += usLineCap;
 80010d2:	f8b7 20c0 	ldrh.w	r2, [r7, #192]	; 0xc0
 80010d6:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 80010da:	4413      	add	r3, r2
 80010dc:	f8a7 30c0 	strh.w	r3, [r7, #192]	; 0xc0
	}
	/* SRAM */
#if 1
	{
		if (bsp_TestExtSRAM() == 0)
 80010e0:	f002 fcce 	bl	8003a80 <bsp_TestExtSRAM>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d10f      	bne.n	800110a <HardInfo+0x182>
		{
			sprintf(buf, "SRAM Model : IS61WV102416BLL-10TL, Test OK");
 80010ea:	f107 0320 	add.w	r3, r7, #32
 80010ee:	498b      	ldr	r1, [pc, #556]	; (800131c <HardInfo+0x394>)
 80010f0:	4618      	mov	r0, r3
 80010f2:	f007 fa27 	bl	8008544 <siprintf>
			LCD_DispStr(x, y, buf, &tFont);
 80010f6:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80010fa:	f107 0220 	add.w	r2, r7, #32
 80010fe:	f8b7 10c0 	ldrh.w	r1, [r7, #192]	; 0xc0
 8001102:	f8b7 00c2 	ldrh.w	r0, [r7, #194]	; 0xc2
 8001106:	f003 ff71 	bl	8004fec <LCD_DispStr>

			//tFont.FrontColor = CL_RED;
			//LCD_DispStr(x, y, buf, &tFont);
			//tFont.FrontColor = CL_WHITE;
		}
		y += usLineCap;
 800110a:	f8b7 20c0 	ldrh.w	r2, [r7, #192]	; 0xc0
 800110e:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 8001112:	4413      	add	r3, r2
 8001114:	f8a7 30c0 	strh.w	r3, [r7, #192]	; 0xc0
	}
#endif
	/* I2c */
	{
		if (i2c_CheckDevice(EE_DEV_ADDR) == 0)
 8001118:	20a0      	movs	r0, #160	; 0xa0
 800111a:	f002 feab 	bl	8003e74 <i2c_CheckDevice>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d111      	bne.n	8001148 <HardInfo+0x1c0>
		{
			sprintf(buf, "AT24C128 Ok (0x%02X)", EE_DEV_ADDR);
 8001124:	f107 0320 	add.w	r3, r7, #32
 8001128:	22a0      	movs	r2, #160	; 0xa0
 800112a:	497d      	ldr	r1, [pc, #500]	; (8001320 <HardInfo+0x398>)
 800112c:	4618      	mov	r0, r3
 800112e:	f007 fa09 	bl	8008544 <siprintf>
			LCD_DispStr(x, y, buf, &tFont);
 8001132:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001136:	f107 0220 	add.w	r2, r7, #32
 800113a:	f8b7 10c0 	ldrh.w	r1, [r7, #192]	; 0xc0
 800113e:	f8b7 00c2 	ldrh.w	r0, [r7, #194]	; 0xc2
 8001142:	f003 ff53 	bl	8004fec <LCD_DispStr>
 8001146:	e018      	b.n	800117a <HardInfo+0x1f2>
		}
		else
		{
			sprintf(buf, "AT24C128 Err (0x%02X)", EE_DEV_ADDR);
 8001148:	f107 0320 	add.w	r3, r7, #32
 800114c:	22a0      	movs	r2, #160	; 0xa0
 800114e:	4975      	ldr	r1, [pc, #468]	; (8001324 <HardInfo+0x39c>)
 8001150:	4618      	mov	r0, r3
 8001152:	f007 f9f7 	bl	8008544 <siprintf>

			tFont.FrontColor = CL_RED;
 8001156:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800115a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
			LCD_DispStr(x, y, buf, &tFont);
 800115e:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001162:	f107 0220 	add.w	r2, r7, #32
 8001166:	f8b7 10c0 	ldrh.w	r1, [r7, #192]	; 0xc0
 800116a:	f8b7 00c2 	ldrh.w	r0, [r7, #194]	; 0xc2
 800116e:	f003 ff3d 	bl	8004fec <LCD_DispStr>
			tFont.FrontColor = CL_WHITE;
 8001172:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001176:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
		}
		y += usLineCap;
 800117a:	f8b7 20c0 	ldrh.w	r2, [r7, #192]	; 0xc0
 800117e:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 8001182:	4413      	add	r3, r2
 8001184:	f8a7 30c0 	strh.w	r3, [r7, #192]	; 0xc0
	}

	fRefresh = 1;
 8001188:	2301      	movs	r3, #1
 800118a:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
	while(1)
	{
		bsp_Idle();
 800118e:	f005 fcc9 	bl	8006b24 <bsp_Idle>

		if (fRefresh)
 8001192:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8001196:	2b00      	cmp	r3, #0
 8001198:	d01b      	beq.n	80011d2 <HardInfo+0x24a>
		{
			fRefresh = 0;
 800119a:	2300      	movs	r3, #0
 800119c:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
			{
				tBtn.Font = &tFontBtn;
 80011a0:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80011a4:	613b      	str	r3, [r7, #16]
				tBtn.Left = BUTTON_RET_X;
 80011a6:	4b60      	ldr	r3, [pc, #384]	; (8001328 <HardInfo+0x3a0>)
 80011a8:	881b      	ldrh	r3, [r3, #0]
 80011aa:	3b40      	subs	r3, #64	; 0x40
 80011ac:	b29b      	uxth	r3, r3
 80011ae:	80fb      	strh	r3, [r7, #6]
				tBtn.Top = BUTTON_RET_Y;
 80011b0:	4b5e      	ldr	r3, [pc, #376]	; (800132c <HardInfo+0x3a4>)
 80011b2:	881b      	ldrh	r3, [r3, #0]
 80011b4:	3b24      	subs	r3, #36	; 0x24
 80011b6:	b29b      	uxth	r3, r3
 80011b8:	813b      	strh	r3, [r7, #8]
				tBtn.Height = BUTTON_RET_H;
 80011ba:	2320      	movs	r3, #32
 80011bc:	817b      	strh	r3, [r7, #10]
				tBtn.Width = BUTTON_RET_W;
 80011be:	233c      	movs	r3, #60	; 0x3c
 80011c0:	81bb      	strh	r3, [r7, #12]
				tBtn.Focus = 0;	/* Ê§È¥½¹µã */
 80011c2:	2300      	movs	r3, #0
 80011c4:	763b      	strb	r3, [r7, #24]
				tBtn.pCaption = "BACK";
 80011c6:	4b5a      	ldr	r3, [pc, #360]	; (8001330 <HardInfo+0x3a8>)
 80011c8:	617b      	str	r3, [r7, #20]
				LCD_DrawButton(&tBtn);
 80011ca:	1d3b      	adds	r3, r7, #4
 80011cc:	4618      	mov	r0, r3
 80011ce:	f004 fad3 	bl	8005778 <LCD_DrawButton>
			}
		}
		ucTouch = TOUCH_GetKey(&tpX, &tpY);
 80011d2:	f107 021c 	add.w	r2, r7, #28
 80011d6:	f107 031e 	add.w	r3, r7, #30
 80011da:	4611      	mov	r1, r2
 80011dc:	4618      	mov	r0, r3
 80011de:	f004 fd33 	bl	8005c48 <TOUCH_GetKey>
 80011e2:	4603      	mov	r3, r0
 80011e4:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
		if (ucTouch != TOUCH_NONE)
 80011e8:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	f000 80a2 	beq.w	8001336 <HardInfo+0x3ae>
		{
			switch (ucTouch)
 80011f2:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d002      	beq.n	8001200 <HardInfo+0x278>
 80011fa:	2b03      	cmp	r3, #3
 80011fc:	d032      	beq.n	8001264 <HardInfo+0x2dc>
 80011fe:	e09a      	b.n	8001336 <HardInfo+0x3ae>
			{
				case TOUCH_DOWN:
					if (TOUCH_InRect(tpX, tpY, BUTTON_RET_X, BUTTON_RET_Y, BUTTON_RET_H, BUTTON_RET_W))
 8001200:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001204:	b298      	uxth	r0, r3
 8001206:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800120a:	b299      	uxth	r1, r3
 800120c:	4b46      	ldr	r3, [pc, #280]	; (8001328 <HardInfo+0x3a0>)
 800120e:	881b      	ldrh	r3, [r3, #0]
 8001210:	3b40      	subs	r3, #64	; 0x40
 8001212:	b29a      	uxth	r2, r3
 8001214:	4b45      	ldr	r3, [pc, #276]	; (800132c <HardInfo+0x3a4>)
 8001216:	881b      	ldrh	r3, [r3, #0]
 8001218:	3b24      	subs	r3, #36	; 0x24
 800121a:	b29b      	uxth	r3, r3
 800121c:	243c      	movs	r4, #60	; 0x3c
 800121e:	9401      	str	r4, [sp, #4]
 8001220:	2420      	movs	r4, #32
 8001222:	9400      	str	r4, [sp, #0]
 8001224:	f004 fd58 	bl	8005cd8 <TOUCH_InRect>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	f000 8082 	beq.w	8001334 <HardInfo+0x3ac>
					{
						tBtn.Font = &tFontBtn;
 8001230:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001234:	613b      	str	r3, [r7, #16]
						tBtn.Left = BUTTON_RET_X;
 8001236:	4b3c      	ldr	r3, [pc, #240]	; (8001328 <HardInfo+0x3a0>)
 8001238:	881b      	ldrh	r3, [r3, #0]
 800123a:	3b40      	subs	r3, #64	; 0x40
 800123c:	b29b      	uxth	r3, r3
 800123e:	80fb      	strh	r3, [r7, #6]
						tBtn.Top = BUTTON_RET_Y;
 8001240:	4b3a      	ldr	r3, [pc, #232]	; (800132c <HardInfo+0x3a4>)
 8001242:	881b      	ldrh	r3, [r3, #0]
 8001244:	3b24      	subs	r3, #36	; 0x24
 8001246:	b29b      	uxth	r3, r3
 8001248:	813b      	strh	r3, [r7, #8]
						tBtn.Height = BUTTON_RET_H;
 800124a:	2320      	movs	r3, #32
 800124c:	817b      	strh	r3, [r7, #10]
						tBtn.Width = BUTTON_RET_W;
 800124e:	233c      	movs	r3, #60	; 0x3c
 8001250:	81bb      	strh	r3, [r7, #12]
						tBtn.Focus = 1;	/* ½¹µã */
 8001252:	2301      	movs	r3, #1
 8001254:	763b      	strb	r3, [r7, #24]
						tBtn.pCaption = "BACK";
 8001256:	4b36      	ldr	r3, [pc, #216]	; (8001330 <HardInfo+0x3a8>)
 8001258:	617b      	str	r3, [r7, #20]
						LCD_DrawButton(&tBtn);
 800125a:	1d3b      	adds	r3, r7, #4
 800125c:	4618      	mov	r0, r3
 800125e:	f004 fa8b 	bl	8005778 <LCD_DrawButton>
					}
				break;
 8001262:	e067      	b.n	8001334 <HardInfo+0x3ac>
				case TOUCH_RELEASE:
					if (TOUCH_InRect(tpX, tpY, BUTTON_RET_X, BUTTON_RET_Y, BUTTON_RET_H, BUTTON_RET_W))
 8001264:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001268:	b298      	uxth	r0, r3
 800126a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800126e:	b299      	uxth	r1, r3
 8001270:	4b2d      	ldr	r3, [pc, #180]	; (8001328 <HardInfo+0x3a0>)
 8001272:	881b      	ldrh	r3, [r3, #0]
 8001274:	3b40      	subs	r3, #64	; 0x40
 8001276:	b29a      	uxth	r2, r3
 8001278:	4b2c      	ldr	r3, [pc, #176]	; (800132c <HardInfo+0x3a4>)
 800127a:	881b      	ldrh	r3, [r3, #0]
 800127c:	3b24      	subs	r3, #36	; 0x24
 800127e:	b29b      	uxth	r3, r3
 8001280:	243c      	movs	r4, #60	; 0x3c
 8001282:	9401      	str	r4, [sp, #4]
 8001284:	2420      	movs	r4, #32
 8001286:	9400      	str	r4, [sp, #0]
 8001288:	f004 fd26 	bl	8005cd8 <TOUCH_InRect>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d019      	beq.n	80012c6 <HardInfo+0x33e>
					{
						tBtn.Font = &tFontBtn;
 8001292:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001296:	613b      	str	r3, [r7, #16]
						tBtn.Left = BUTTON_RET_X;
 8001298:	4b23      	ldr	r3, [pc, #140]	; (8001328 <HardInfo+0x3a0>)
 800129a:	881b      	ldrh	r3, [r3, #0]
 800129c:	3b40      	subs	r3, #64	; 0x40
 800129e:	b29b      	uxth	r3, r3
 80012a0:	80fb      	strh	r3, [r7, #6]
						tBtn.Top = BUTTON_RET_Y;
 80012a2:	4b22      	ldr	r3, [pc, #136]	; (800132c <HardInfo+0x3a4>)
 80012a4:	881b      	ldrh	r3, [r3, #0]
 80012a6:	3b24      	subs	r3, #36	; 0x24
 80012a8:	b29b      	uxth	r3, r3
 80012aa:	813b      	strh	r3, [r7, #8]
						tBtn.Height = BUTTON_RET_H;
 80012ac:	2320      	movs	r3, #32
 80012ae:	817b      	strh	r3, [r7, #10]
						tBtn.Width = BUTTON_RET_W;
 80012b0:	233c      	movs	r3, #60	; 0x3c
 80012b2:	81bb      	strh	r3, [r7, #12]
						tBtn.Focus = 1;	/* ½¹µã */
 80012b4:	2301      	movs	r3, #1
 80012b6:	763b      	strb	r3, [r7, #24]
						tBtn.pCaption = "BACK";
 80012b8:	4b1d      	ldr	r3, [pc, #116]	; (8001330 <HardInfo+0x3a8>)
 80012ba:	617b      	str	r3, [r7, #20]
						LCD_DrawButton(&tBtn);
 80012bc:	1d3b      	adds	r3, r7, #4
 80012be:	4618      	mov	r0, r3
 80012c0:	f004 fa5a 	bl	8005778 <LCD_DrawButton>
						return;
 80012c4:	e048      	b.n	8001358 <HardInfo+0x3d0>
					}
					else
					{
						tBtn.Font = &tFontBtn;
 80012c6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80012ca:	613b      	str	r3, [r7, #16]
						tBtn.Left = BUTTON_RET_X;
 80012cc:	4b16      	ldr	r3, [pc, #88]	; (8001328 <HardInfo+0x3a0>)
 80012ce:	881b      	ldrh	r3, [r3, #0]
 80012d0:	3b40      	subs	r3, #64	; 0x40
 80012d2:	b29b      	uxth	r3, r3
 80012d4:	80fb      	strh	r3, [r7, #6]
						tBtn.Top = BUTTON_RET_Y;
 80012d6:	4b15      	ldr	r3, [pc, #84]	; (800132c <HardInfo+0x3a4>)
 80012d8:	881b      	ldrh	r3, [r3, #0]
 80012da:	3b24      	subs	r3, #36	; 0x24
 80012dc:	b29b      	uxth	r3, r3
 80012de:	813b      	strh	r3, [r7, #8]
						tBtn.Height = BUTTON_RET_H;
 80012e0:	2320      	movs	r3, #32
 80012e2:	817b      	strh	r3, [r7, #10]
						tBtn.Width = BUTTON_RET_W;
 80012e4:	233c      	movs	r3, #60	; 0x3c
 80012e6:	81bb      	strh	r3, [r7, #12]
						tBtn.Focus = 0;	/* ½¹µã */
 80012e8:	2300      	movs	r3, #0
 80012ea:	763b      	strb	r3, [r7, #24]
						tBtn.pCaption = "BACK";
 80012ec:	4b10      	ldr	r3, [pc, #64]	; (8001330 <HardInfo+0x3a8>)
 80012ee:	617b      	str	r3, [r7, #20]
						LCD_DrawButton(&tBtn);
 80012f0:	1d3b      	adds	r3, r7, #4
 80012f2:	4618      	mov	r0, r3
 80012f4:	f004 fa40 	bl	8005778 <LCD_DrawButton>
 80012f8:	e01d      	b.n	8001336 <HardInfo+0x3ae>
 80012fa:	bf00      	nop
 80012fc:	0800a818 	.word	0x0800a818
 8001300:	1fff7a10 	.word	0x1fff7a10
 8001304:	1fff7a14 	.word	0x1fff7a14
 8001308:	1fff7a18 	.word	0x1fff7a18
 800130c:	0800a824 	.word	0x0800a824
 8001310:	0800a844 	.word	0x0800a844
 8001314:	0800a85c 	.word	0x0800a85c
 8001318:	0800a86c 	.word	0x0800a86c
 800131c:	0800a878 	.word	0x0800a878
 8001320:	0800a8a4 	.word	0x0800a8a4
 8001324:	0800a8bc 	.word	0x0800a8bc
 8001328:	2000000c 	.word	0x2000000c
 800132c:	2000000a 	.word	0x2000000a
 8001330:	0800a8d4 	.word	0x0800a8d4
				break;
 8001334:	bf00      	nop
					}
			}
		}
		ucKeyCode = bsp_GetKey();
 8001336:	f003 f8b5 	bl	80044a4 <bsp_GetKey>
 800133a:	4603      	mov	r3, r0
 800133c:	f887 30b2 	strb.w	r3, [r7, #178]	; 0xb2
		if (ucKeyCode != KEY_NONE)
 8001340:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
 8001344:	2b00      	cmp	r3, #0
 8001346:	f43f af22 	beq.w	800118e <HardInfo+0x206>
		{
			switch (ucKeyCode)
 800134a:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
 800134e:	2b16      	cmp	r3, #22
 8001350:	d001      	beq.n	8001356 <HardInfo+0x3ce>
			{
				case  JOY_DOWN_OK:		/* Ò¡¸ËOK¼ü */
					return;		/* ·µ»Ø */

				default:
					break;
 8001352:	bf00      	nop
		bsp_Idle();
 8001354:	e71b      	b.n	800118e <HardInfo+0x206>
					return;		/* ·µ»Ø */
 8001356:	bf00      	nop
			}
		}
	}
}
 8001358:	37c8      	adds	r7, #200	; 0xc8
 800135a:	46bd      	mov	sp, r7
 800135c:	bdb0      	pop	{r4, r5, r7, pc}
 800135e:	bf00      	nop

08001360 <main>:

IWDG_HandleTypeDef hiwdg;
HAL_StatusTypeDef status;

int main(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
	uint16_t ucStatus;

	HAL_Init();
 8001366:	f005 fbf7 	bl	8006b58 <HAL_Init>

	SystemClock_Config();
 800136a:	f000 f831 	bl	80013d0 <SystemClock_Config>
	//SystemInit_clk();
	//IWDG_Init();

	bsp_Init();
 800136e:	f005 fbc1 	bl	8006af4 <bsp_Init>

	LoadParam();
 8001372:	f000 fa85 	bl	8001880 <LoadParam>

	LCD_InitHard();
 8001376:	f003 fce9 	bl	8004d4c <LCD_InitHard>

	TOUCH_InitHard();
 800137a:	f004 fc13 	bl	8005ba4 <TOUCH_InitHard>

	LCD_ClrScr(CL_YELLOW);
 800137e:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8001382:	f003 fde5 	bl	8004f50 <LCD_ClrScr>
	LCD_SetBackLight(g_tParam.ucBackLight);
 8001386:	4b11      	ldr	r3, [pc, #68]	; (80013cc <main+0x6c>)
 8001388:	791b      	ldrb	r3, [r3, #4]
 800138a:	4618      	mov	r0, r3
 800138c:	f003 fdf4 	bl	8004f78 <LCD_SetBackLight>

	ucStatus = MS_MAIN_MENU;
 8001390:	2300      	movs	r3, #0
 8001392:	80fb      	strh	r3, [r7, #6]
		sprintf(msg,"%f\n",usAdcX);
		UART1_Transmit_String(msg);
		bsp_DelayMS(500);
#endif
#if 1
		switch (ucStatus)
 8001394:	88fb      	ldrh	r3, [r7, #6]
 8001396:	2b13      	cmp	r3, #19
 8001398:	d006      	beq.n	80013a8 <main+0x48>
 800139a:	2b13      	cmp	r3, #19
 800139c:	dc13      	bgt.n	80013c6 <main+0x66>
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d007      	beq.n	80013b2 <main+0x52>
 80013a2:	2b01      	cmp	r3, #1
 80013a4:	d00a      	beq.n	80013bc <main+0x5c>
				HardInfo();
				ucStatus = MS_MAIN_MENU;
			break;

			default:
			break;
 80013a6:	e00e      	b.n	80013c6 <main+0x66>
			 	TOUCH_Calibration();		/* Ð£×¼´¥Ãþ, ¸Ã½çÃæÊµÏÖÔÚbsp_touch.c */
 80013a8:	f004 fedc 	bl	8006164 <TOUCH_Calibration>
			 	ucStatus = MS_MAIN_MENU; 	/* Ð£×¼Íê±Ïºó£¬·µ»Øµ½Ö÷½çÃæ */
 80013ac:	2300      	movs	r3, #0
 80013ae:	80fb      	strh	r3, [r7, #6]
			break;
 80013b0:	e00a      	b.n	80013c8 <main+0x68>
				ucStatus = MainMenu();
 80013b2:	f000 f87d 	bl	80014b0 <MainMenu>
 80013b6:	4603      	mov	r3, r0
 80013b8:	80fb      	strh	r3, [r7, #6]
			break;
 80013ba:	e005      	b.n	80013c8 <main+0x68>
				HardInfo();
 80013bc:	f7ff fde4 	bl	8000f88 <HardInfo>
				ucStatus = MS_MAIN_MENU;
 80013c0:	2300      	movs	r3, #0
 80013c2:	80fb      	strh	r3, [r7, #6]
			break;
 80013c4:	e000      	b.n	80013c8 <main+0x68>
			break;
 80013c6:	bf00      	nop
		switch (ucStatus)
 80013c8:	e7e4      	b.n	8001394 <main+0x34>
 80013ca:	bf00      	nop
 80013cc:	20000200 	.word	0x20000200

080013d0 <SystemClock_Config>:
	hiwdg.Init.Reload = 4095;  // 최대값 (약 26초 타임아웃)
	HAL_IWDG_Init(&hiwdg);
}

void SystemClock_Config(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b094      	sub	sp, #80	; 0x50
 80013d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013d6:	f107 0320 	add.w	r3, r7, #32
 80013da:	2230      	movs	r2, #48	; 0x30
 80013dc:	2100      	movs	r1, #0
 80013de:	4618      	mov	r0, r3
 80013e0:	f007 f9a8 	bl	8008734 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013e4:	f107 030c 	add.w	r3, r7, #12
 80013e8:	2200      	movs	r2, #0
 80013ea:	601a      	str	r2, [r3, #0]
 80013ec:	605a      	str	r2, [r3, #4]
 80013ee:	609a      	str	r2, [r3, #8]
 80013f0:	60da      	str	r2, [r3, #12]
 80013f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013f4:	2300      	movs	r3, #0
 80013f6:	60bb      	str	r3, [r7, #8]
 80013f8:	4b28      	ldr	r3, [pc, #160]	; (800149c <SystemClock_Config+0xcc>)
 80013fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fc:	4a27      	ldr	r2, [pc, #156]	; (800149c <SystemClock_Config+0xcc>)
 80013fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001402:	6413      	str	r3, [r2, #64]	; 0x40
 8001404:	4b25      	ldr	r3, [pc, #148]	; (800149c <SystemClock_Config+0xcc>)
 8001406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001408:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800140c:	60bb      	str	r3, [r7, #8]
 800140e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001410:	2300      	movs	r3, #0
 8001412:	607b      	str	r3, [r7, #4]
 8001414:	4b22      	ldr	r3, [pc, #136]	; (80014a0 <SystemClock_Config+0xd0>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a21      	ldr	r2, [pc, #132]	; (80014a0 <SystemClock_Config+0xd0>)
 800141a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800141e:	6013      	str	r3, [r2, #0]
 8001420:	4b1f      	ldr	r3, [pc, #124]	; (80014a0 <SystemClock_Config+0xd0>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001428:	607b      	str	r3, [r7, #4]
 800142a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800142c:	2301      	movs	r3, #1
 800142e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001430:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001434:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001436:	2302      	movs	r3, #2
 8001438:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800143a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800143e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001440:	2319      	movs	r3, #25
 8001442:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001444:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001448:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800144a:	2302      	movs	r3, #2
 800144c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;                                  // 4
 800144e:	2307      	movs	r3, #7
 8001450:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001452:	f107 0320 	add.w	r3, r7, #32
 8001456:	4618      	mov	r0, r3
 8001458:	f005 fef4 	bl	8007244 <HAL_RCC_OscConfig>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001462:	f000 f81f 	bl	80014a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001466:	230f      	movs	r3, #15
 8001468:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800146a:	2302      	movs	r3, #2
 800146c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800146e:	2300      	movs	r3, #0
 8001470:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001472:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001476:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001478:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800147c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800147e:	f107 030c 	add.w	r3, r7, #12
 8001482:	2105      	movs	r1, #5
 8001484:	4618      	mov	r0, r3
 8001486:	f006 f955 	bl	8007734 <HAL_RCC_ClockConfig>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001490:	f000 f808 	bl	80014a4 <Error_Handler>
  }
}
 8001494:	bf00      	nop
 8001496:	3750      	adds	r7, #80	; 0x50
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	40023800 	.word	0x40023800
 80014a0:	40007000 	.word	0x40007000

080014a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014a8:	b672      	cpsid	i
}
 80014aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014ac:	e7fe      	b.n	80014ac <Error_Handler+0x8>
	...

080014b0 <MainMenu>:
*********************************************************************************************************
*	Func name: MainMenu
*********************************************************************************************************
*/
uint8_t MainMenu(void)
{
 80014b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014b2:	b08b      	sub	sp, #44	; 0x2c
 80014b4:	af02      	add	r7, sp, #8
	FONT_T tIconFont;		

	int16_t tpX, tpY;
	uint16_t i;

	DispBackground();
 80014b6:	f000 f989 	bl	80017cc <DispBackground>

	{
		tFont.FontCode = FC_ST_16;	/* ×ÖÌå´úÂë 16µãÕó */
 80014ba:	2300      	movs	r3, #0
 80014bc:	823b      	strh	r3, [r7, #16]
		tFont.FrontColor = MAIN_TEXT_COLOR;	/* ×ÖÌåÑÕÉ« */
 80014be:	4ba2      	ldr	r3, [pc, #648]	; (8001748 <MainMenu+0x298>)
 80014c0:	881b      	ldrh	r3, [r3, #0]
 80014c2:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 80014c6:	d106      	bne.n	80014d6 <MainMenu+0x26>
 80014c8:	4ba0      	ldr	r3, [pc, #640]	; (800174c <MainMenu+0x29c>)
 80014ca:	881b      	ldrh	r3, [r3, #0]
 80014cc:	4aa0      	ldr	r2, [pc, #640]	; (8001750 <MainMenu+0x2a0>)
 80014ce:	00db      	lsls	r3, r3, #3
 80014d0:	4413      	add	r3, r2
 80014d2:	88db      	ldrh	r3, [r3, #6]
 80014d4:	e005      	b.n	80014e2 <MainMenu+0x32>
 80014d6:	4b9d      	ldr	r3, [pc, #628]	; (800174c <MainMenu+0x29c>)
 80014d8:	881b      	ldrh	r3, [r3, #0]
 80014da:	4a9e      	ldr	r2, [pc, #632]	; (8001754 <MainMenu+0x2a4>)
 80014dc:	00db      	lsls	r3, r3, #3
 80014de:	4413      	add	r3, r2
 80014e0:	88db      	ldrh	r3, [r3, #6]
 80014e2:	827b      	strh	r3, [r7, #18]
		tFont.BackColor = CL_MASK;	/* ÎÄ×Ö±³¾°ÑÕÉ« */
 80014e4:	f649 1399 	movw	r3, #39321	; 0x9999
 80014e8:	82bb      	strh	r3, [r7, #20]
		tFont.Space = 0;				/* ÎÄ×Ö¼ä¾à£¬µ¥Î» = ÏñËØ */
 80014ea:	2300      	movs	r3, #0
 80014ec:	82fb      	strh	r3, [r7, #22]

		tIconFont.FontCode = FC_ST_12;		/* ×ÖÌå´úÂë 16µãÕó */
 80014ee:	2301      	movs	r3, #1
 80014f0:	813b      	strh	r3, [r7, #8]
		tIconFont.FrontColor = MAIN_TEXT_COLOR;	/* ×ÖÌåÑÕÉ« */
 80014f2:	4b95      	ldr	r3, [pc, #596]	; (8001748 <MainMenu+0x298>)
 80014f4:	881b      	ldrh	r3, [r3, #0]
 80014f6:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 80014fa:	d106      	bne.n	800150a <MainMenu+0x5a>
 80014fc:	4b93      	ldr	r3, [pc, #588]	; (800174c <MainMenu+0x29c>)
 80014fe:	881b      	ldrh	r3, [r3, #0]
 8001500:	4a93      	ldr	r2, [pc, #588]	; (8001750 <MainMenu+0x2a0>)
 8001502:	00db      	lsls	r3, r3, #3
 8001504:	4413      	add	r3, r2
 8001506:	88db      	ldrh	r3, [r3, #6]
 8001508:	e005      	b.n	8001516 <MainMenu+0x66>
 800150a:	4b90      	ldr	r3, [pc, #576]	; (800174c <MainMenu+0x29c>)
 800150c:	881b      	ldrh	r3, [r3, #0]
 800150e:	4a91      	ldr	r2, [pc, #580]	; (8001754 <MainMenu+0x2a4>)
 8001510:	00db      	lsls	r3, r3, #3
 8001512:	4413      	add	r3, r2
 8001514:	88db      	ldrh	r3, [r3, #6]
 8001516:	817b      	strh	r3, [r7, #10]
		tIconFont.BackColor = CL_MASK;		/* ÎÄ×Ö±³¾°ÑÕÉ« */
 8001518:	f649 1399 	movw	r3, #39321	; 0x9999
 800151c:	81bb      	strh	r3, [r7, #12]
		tIconFont.Space = 1;				/* ÎÄ×Ö¼ä¾à£¬µ¥Î» = ÏñËØ */
 800151e:	2301      	movs	r3, #1
 8001520:	81fb      	strh	r3, [r7, #14]
	}
	LCD_DispStr(5, 3, VER_INFO, &tFont);			/* ÔÚ(8,3)×ø±ê´¦ÏÔÊ¾Ò»´®ºº×Ö */
 8001522:	f107 0310 	add.w	r3, r7, #16
 8001526:	4a8c      	ldr	r2, [pc, #560]	; (8001758 <MainMenu+0x2a8>)
 8001528:	2103      	movs	r1, #3
 800152a:	2005      	movs	r0, #5
 800152c:	f003 fd5e 	bl	8004fec <LCD_DispStr>
	LCD_DispStr(5, g_LcdHeight - 13, KEY_INFO, &tIconFont);			/* ÔÚ(8,3)×ø±ê´¦ÏÔÊ¾Ò»´®ºº×Ö */
 8001530:	4b8a      	ldr	r3, [pc, #552]	; (800175c <MainMenu+0x2ac>)
 8001532:	881b      	ldrh	r3, [r3, #0]
 8001534:	3b0d      	subs	r3, #13
 8001536:	b299      	uxth	r1, r3
 8001538:	f107 0308 	add.w	r3, r7, #8
 800153c:	4a88      	ldr	r2, [pc, #544]	; (8001760 <MainMenu+0x2b0>)
 800153e:	2005      	movs	r0, #5
 8001540:	f003 fd54 	bl	8004fec <LCD_DispStr>

	fRefresh = 1;
 8001544:	2301      	movs	r3, #1
 8001546:	77fb      	strb	r3, [r7, #31]

	while(1)
	{
		bsp_Idle();
 8001548:	f005 faec 	bl	8006b24 <bsp_Idle>
		if (fRefresh)
 800154c:	7ffb      	ldrb	r3, [r7, #31]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d014      	beq.n	800157c <MainMenu+0xcc>
		{
			fRefresh = 0;
 8001552:	2300      	movs	r3, #0
 8001554:	77fb      	strb	r3, [r7, #31]
			{
				for (i = 0; i < ICONS_COUNT; i++)
 8001556:	2300      	movs	r3, #0
 8001558:	83bb      	strh	r3, [r7, #28]
 800155a:	e00c      	b.n	8001576 <MainMenu+0xc6>
				{
					LCD_DrawIcon32(&s_tMainIcons[i], &tIconFont, 0);
 800155c:	8bbb      	ldrh	r3, [r7, #28]
 800155e:	015b      	lsls	r3, r3, #5
 8001560:	4a80      	ldr	r2, [pc, #512]	; (8001764 <MainMenu+0x2b4>)
 8001562:	4413      	add	r3, r2
 8001564:	f107 0108 	add.w	r1, r7, #8
 8001568:	2200      	movs	r2, #0
 800156a:	4618      	mov	r0, r3
 800156c:	f003 fe7c 	bl	8005268 <LCD_DrawIcon32>
				for (i = 0; i < ICONS_COUNT; i++)
 8001570:	8bbb      	ldrh	r3, [r7, #28]
 8001572:	3301      	adds	r3, #1
 8001574:	83bb      	strh	r3, [r7, #28]
 8001576:	8bbb      	ldrh	r3, [r7, #28]
 8001578:	2b11      	cmp	r3, #17
 800157a:	d9ef      	bls.n	800155c <MainMenu+0xac>
				}
			}
		}
#if 1
		ucTouch = TOUCH_GetKey(&tpX, &tpY);
 800157c:	1d3a      	adds	r2, r7, #4
 800157e:	1dbb      	adds	r3, r7, #6
 8001580:	4611      	mov	r1, r2
 8001582:	4618      	mov	r0, r3
 8001584:	f004 fb60 	bl	8005c48 <TOUCH_GetKey>
 8001588:	4603      	mov	r3, r0
 800158a:	76fb      	strb	r3, [r7, #27]
		if(ucTouch != TOUCH_NONE)
 800158c:	7efb      	ldrb	r3, [r7, #27]
 800158e:	2b00      	cmp	r3, #0
 8001590:	f000 8092 	beq.w	80016b8 <MainMenu+0x208>
		{
			switch (ucTouch)
 8001594:	7efb      	ldrb	r3, [r7, #27]
 8001596:	2b03      	cmp	r3, #3
 8001598:	d043      	beq.n	8001622 <MainMenu+0x172>
 800159a:	2b03      	cmp	r3, #3
 800159c:	f300 8089 	bgt.w	80016b2 <MainMenu+0x202>
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d003      	beq.n	80015ac <MainMenu+0xfc>
 80015a4:	2b02      	cmp	r3, #2
 80015a6:	f000 8086 	beq.w	80016b6 <MainMenu+0x206>
							LCD_DrawIcon32(&s_tMainIcons[i], &tIconFont, 0);
						}
					}
					break;
				default:
					break;
 80015aa:	e082      	b.n	80016b2 <MainMenu+0x202>
					for (i = 0; i < ICONS_COUNT; i++)
 80015ac:	2300      	movs	r3, #0
 80015ae:	83bb      	strh	r3, [r7, #28]
 80015b0:	e033      	b.n	800161a <MainMenu+0x16a>
						if (TOUCH_InRect(tpX, tpY, s_tMainIcons[i].Left, s_tMainIcons[i].Top,
 80015b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015b6:	b298      	uxth	r0, r3
 80015b8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80015bc:	b299      	uxth	r1, r3
 80015be:	8bbb      	ldrh	r3, [r7, #28]
 80015c0:	4a68      	ldr	r2, [pc, #416]	; (8001764 <MainMenu+0x2b4>)
 80015c2:	015b      	lsls	r3, r3, #5
 80015c4:	4413      	add	r3, r2
 80015c6:	3302      	adds	r3, #2
 80015c8:	881c      	ldrh	r4, [r3, #0]
 80015ca:	8bbb      	ldrh	r3, [r7, #28]
 80015cc:	4a65      	ldr	r2, [pc, #404]	; (8001764 <MainMenu+0x2b4>)
 80015ce:	015b      	lsls	r3, r3, #5
 80015d0:	4413      	add	r3, r2
 80015d2:	3304      	adds	r3, #4
 80015d4:	881d      	ldrh	r5, [r3, #0]
 80015d6:	8bbb      	ldrh	r3, [r7, #28]
							s_tMainIcons[i].Height, s_tMainIcons[i].Width))
 80015d8:	4a62      	ldr	r2, [pc, #392]	; (8001764 <MainMenu+0x2b4>)
 80015da:	015b      	lsls	r3, r3, #5
 80015dc:	4413      	add	r3, r2
 80015de:	3306      	adds	r3, #6
 80015e0:	881b      	ldrh	r3, [r3, #0]
						if (TOUCH_InRect(tpX, tpY, s_tMainIcons[i].Left, s_tMainIcons[i].Top,
 80015e2:	8bba      	ldrh	r2, [r7, #28]
							s_tMainIcons[i].Height, s_tMainIcons[i].Width))
 80015e4:	4e5f      	ldr	r6, [pc, #380]	; (8001764 <MainMenu+0x2b4>)
 80015e6:	0152      	lsls	r2, r2, #5
 80015e8:	4432      	add	r2, r6
 80015ea:	3208      	adds	r2, #8
 80015ec:	8812      	ldrh	r2, [r2, #0]
						if (TOUCH_InRect(tpX, tpY, s_tMainIcons[i].Left, s_tMainIcons[i].Top,
 80015ee:	9201      	str	r2, [sp, #4]
 80015f0:	9300      	str	r3, [sp, #0]
 80015f2:	462b      	mov	r3, r5
 80015f4:	4622      	mov	r2, r4
 80015f6:	f004 fb6f 	bl	8005cd8 <TOUCH_InRect>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d009      	beq.n	8001614 <MainMenu+0x164>
							LCD_DrawIcon32(&s_tMainIcons[i], &tIconFont, 1);
 8001600:	8bbb      	ldrh	r3, [r7, #28]
 8001602:	015b      	lsls	r3, r3, #5
 8001604:	4a57      	ldr	r2, [pc, #348]	; (8001764 <MainMenu+0x2b4>)
 8001606:	4413      	add	r3, r2
 8001608:	f107 0108 	add.w	r1, r7, #8
 800160c:	2201      	movs	r2, #1
 800160e:	4618      	mov	r0, r3
 8001610:	f003 fe2a 	bl	8005268 <LCD_DrawIcon32>
					for (i = 0; i < ICONS_COUNT; i++)
 8001614:	8bbb      	ldrh	r3, [r7, #28]
 8001616:	3301      	adds	r3, #1
 8001618:	83bb      	strh	r3, [r7, #28]
 800161a:	8bbb      	ldrh	r3, [r7, #28]
 800161c:	2b11      	cmp	r3, #17
 800161e:	d9c8      	bls.n	80015b2 <MainMenu+0x102>
				break;
 8001620:	e04a      	b.n	80016b8 <MainMenu+0x208>
					for (i = 0; i < ICONS_COUNT; i++)
 8001622:	2300      	movs	r3, #0
 8001624:	83bb      	strh	r3, [r7, #28]
 8001626:	e02d      	b.n	8001684 <MainMenu+0x1d4>
						if (TOUCH_InRect(tpX, tpY, s_tMainIcons[i].Left, s_tMainIcons[i].Top,
 8001628:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800162c:	b298      	uxth	r0, r3
 800162e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001632:	b299      	uxth	r1, r3
 8001634:	8bbb      	ldrh	r3, [r7, #28]
 8001636:	4a4b      	ldr	r2, [pc, #300]	; (8001764 <MainMenu+0x2b4>)
 8001638:	015b      	lsls	r3, r3, #5
 800163a:	4413      	add	r3, r2
 800163c:	3302      	adds	r3, #2
 800163e:	881c      	ldrh	r4, [r3, #0]
 8001640:	8bbb      	ldrh	r3, [r7, #28]
 8001642:	4a48      	ldr	r2, [pc, #288]	; (8001764 <MainMenu+0x2b4>)
 8001644:	015b      	lsls	r3, r3, #5
 8001646:	4413      	add	r3, r2
 8001648:	3304      	adds	r3, #4
 800164a:	881d      	ldrh	r5, [r3, #0]
 800164c:	8bbb      	ldrh	r3, [r7, #28]
							s_tMainIcons[i].Height, s_tMainIcons[i].Width))
 800164e:	4a45      	ldr	r2, [pc, #276]	; (8001764 <MainMenu+0x2b4>)
 8001650:	015b      	lsls	r3, r3, #5
 8001652:	4413      	add	r3, r2
 8001654:	3306      	adds	r3, #6
 8001656:	881b      	ldrh	r3, [r3, #0]
						if (TOUCH_InRect(tpX, tpY, s_tMainIcons[i].Left, s_tMainIcons[i].Top,
 8001658:	8bba      	ldrh	r2, [r7, #28]
							s_tMainIcons[i].Height, s_tMainIcons[i].Width))
 800165a:	4e42      	ldr	r6, [pc, #264]	; (8001764 <MainMenu+0x2b4>)
 800165c:	0152      	lsls	r2, r2, #5
 800165e:	4432      	add	r2, r6
 8001660:	3208      	adds	r2, #8
 8001662:	8812      	ldrh	r2, [r2, #0]
						if (TOUCH_InRect(tpX, tpY, s_tMainIcons[i].Left, s_tMainIcons[i].Top,
 8001664:	9201      	str	r2, [sp, #4]
 8001666:	9300      	str	r3, [sp, #0]
 8001668:	462b      	mov	r3, r5
 800166a:	4622      	mov	r2, r4
 800166c:	f004 fb34 	bl	8005cd8 <TOUCH_InRect>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d003      	beq.n	800167e <MainMenu+0x1ce>
							return s_RetStatus[i];
 8001676:	8bbb      	ldrh	r3, [r7, #28]
 8001678:	4a3b      	ldr	r2, [pc, #236]	; (8001768 <MainMenu+0x2b8>)
 800167a:	5cd3      	ldrb	r3, [r2, r3]
 800167c:	e098      	b.n	80017b0 <MainMenu+0x300>
					for (i = 0; i < ICONS_COUNT; i++)
 800167e:	8bbb      	ldrh	r3, [r7, #28]
 8001680:	3301      	adds	r3, #1
 8001682:	83bb      	strh	r3, [r7, #28]
 8001684:	8bbb      	ldrh	r3, [r7, #28]
 8001686:	2b11      	cmp	r3, #17
 8001688:	d9ce      	bls.n	8001628 <MainMenu+0x178>
						for (i = 0; i < ICONS_COUNT; i++)
 800168a:	2300      	movs	r3, #0
 800168c:	83bb      	strh	r3, [r7, #28]
 800168e:	e00c      	b.n	80016aa <MainMenu+0x1fa>
							LCD_DrawIcon32(&s_tMainIcons[i], &tIconFont, 0);
 8001690:	8bbb      	ldrh	r3, [r7, #28]
 8001692:	015b      	lsls	r3, r3, #5
 8001694:	4a33      	ldr	r2, [pc, #204]	; (8001764 <MainMenu+0x2b4>)
 8001696:	4413      	add	r3, r2
 8001698:	f107 0108 	add.w	r1, r7, #8
 800169c:	2200      	movs	r2, #0
 800169e:	4618      	mov	r0, r3
 80016a0:	f003 fde2 	bl	8005268 <LCD_DrawIcon32>
						for (i = 0; i < ICONS_COUNT; i++)
 80016a4:	8bbb      	ldrh	r3, [r7, #28]
 80016a6:	3301      	adds	r3, #1
 80016a8:	83bb      	strh	r3, [r7, #28]
 80016aa:	8bbb      	ldrh	r3, [r7, #28]
 80016ac:	2b11      	cmp	r3, #17
 80016ae:	d9ef      	bls.n	8001690 <MainMenu+0x1e0>
					break;
 80016b0:	e002      	b.n	80016b8 <MainMenu+0x208>
					break;
 80016b2:	bf00      	nop
 80016b4:	e000      	b.n	80016b8 <MainMenu+0x208>
					break;
 80016b6:	bf00      	nop
			}
		}
#endif
		bsp_KeyScan();  // 키 상태 스캔
 80016b8:	f002 feb6 	bl	8004428 <bsp_KeyScan>
		ucKeyCode = bsp_GetKey();	/* ¶ÁÈ¡¼üÖµ, ÎÞ¼ü°´ÏÂÊ±·µ»Ø KEY_NONE = 0 */
 80016bc:	f002 fef2 	bl	80044a4 <bsp_GetKey>
 80016c0:	4603      	mov	r3, r0
 80016c2:	76bb      	strb	r3, [r7, #26]

		if (ucKeyCode != KEY_NONE)
 80016c4:	7ebb      	ldrb	r3, [r7, #26]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	f43f af3e 	beq.w	8001548 <MainMenu+0x98>
		{
			switch (ucKeyCode)
 80016cc:	7ebb      	ldrb	r3, [r7, #26]
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d003      	beq.n	80016da <MainMenu+0x22a>
 80016d2:	2b07      	cmp	r3, #7
 80016d4:	d16a      	bne.n	80017ac <MainMenu+0x2fc>
			{
				case  KEY_DOWN_K3:	/* K3¼ü */
					//bsp_LedOn(1);
					return MS_CALIBRATION;	/* ½øÈë´¥Ãþ½çÃæ */
 80016d6:	2313      	movs	r3, #19
 80016d8:	e06a      	b.n	80017b0 <MainMenu+0x300>
					//break;
				case  KEY_DOWN_K1:	/* K1¼ü */
					if (++s_ColorIndex >= STYLE_COUNT)
 80016da:	4b1c      	ldr	r3, [pc, #112]	; (800174c <MainMenu+0x29c>)
 80016dc:	881b      	ldrh	r3, [r3, #0]
 80016de:	3301      	adds	r3, #1
 80016e0:	b29a      	uxth	r2, r3
 80016e2:	4b1a      	ldr	r3, [pc, #104]	; (800174c <MainMenu+0x29c>)
 80016e4:	801a      	strh	r2, [r3, #0]
 80016e6:	4b19      	ldr	r3, [pc, #100]	; (800174c <MainMenu+0x29c>)
 80016e8:	881b      	ldrh	r3, [r3, #0]
 80016ea:	2b06      	cmp	r3, #6
 80016ec:	d902      	bls.n	80016f4 <MainMenu+0x244>
					{
						s_ColorIndex = 0;
 80016ee:	4b17      	ldr	r3, [pc, #92]	; (800174c <MainMenu+0x29c>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	801a      	strh	r2, [r3, #0]
					}
					{
						DispBackground();
 80016f4:	f000 f86a 	bl	80017cc <DispBackground>
						{
							tFont.FontCode = FC_ST_16;	/* ×ÖÌå´úÂë 16µãÕó */
 80016f8:	2300      	movs	r3, #0
 80016fa:	823b      	strh	r3, [r7, #16]
							tFont.FrontColor = MAIN_TEXT_COLOR;	/* ×ÖÌåÑÕÉ« */
 80016fc:	4b12      	ldr	r3, [pc, #72]	; (8001748 <MainMenu+0x298>)
 80016fe:	881b      	ldrh	r3, [r3, #0]
 8001700:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8001704:	d106      	bne.n	8001714 <MainMenu+0x264>
 8001706:	4b11      	ldr	r3, [pc, #68]	; (800174c <MainMenu+0x29c>)
 8001708:	881b      	ldrh	r3, [r3, #0]
 800170a:	4a11      	ldr	r2, [pc, #68]	; (8001750 <MainMenu+0x2a0>)
 800170c:	00db      	lsls	r3, r3, #3
 800170e:	4413      	add	r3, r2
 8001710:	88db      	ldrh	r3, [r3, #6]
 8001712:	e005      	b.n	8001720 <MainMenu+0x270>
 8001714:	4b0d      	ldr	r3, [pc, #52]	; (800174c <MainMenu+0x29c>)
 8001716:	881b      	ldrh	r3, [r3, #0]
 8001718:	4a0e      	ldr	r2, [pc, #56]	; (8001754 <MainMenu+0x2a4>)
 800171a:	00db      	lsls	r3, r3, #3
 800171c:	4413      	add	r3, r2
 800171e:	88db      	ldrh	r3, [r3, #6]
 8001720:	827b      	strh	r3, [r7, #18]
							tFont.BackColor = CL_MASK;	/* ÎÄ×Ö±³¾°ÑÕÉ« */
 8001722:	f649 1399 	movw	r3, #39321	; 0x9999
 8001726:	82bb      	strh	r3, [r7, #20]
							tFont.Space = 0;				/* ÎÄ×Ö¼ä¾à£¬µ¥Î» = ÏñËØ */
 8001728:	2300      	movs	r3, #0
 800172a:	82fb      	strh	r3, [r7, #22]

							tIconFont.FontCode = FC_ST_12;		/* ×ÖÌå´úÂë 16µãÕó */
 800172c:	2301      	movs	r3, #1
 800172e:	813b      	strh	r3, [r7, #8]
							tIconFont.FrontColor = MAIN_TEXT_COLOR;	/* ×ÖÌåÑÕÉ« */
 8001730:	4b05      	ldr	r3, [pc, #20]	; (8001748 <MainMenu+0x298>)
 8001732:	881b      	ldrh	r3, [r3, #0]
 8001734:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8001738:	d118      	bne.n	800176c <MainMenu+0x2bc>
 800173a:	4b04      	ldr	r3, [pc, #16]	; (800174c <MainMenu+0x29c>)
 800173c:	881b      	ldrh	r3, [r3, #0]
 800173e:	4a04      	ldr	r2, [pc, #16]	; (8001750 <MainMenu+0x2a0>)
 8001740:	00db      	lsls	r3, r3, #3
 8001742:	4413      	add	r3, r2
 8001744:	88db      	ldrh	r3, [r3, #6]
 8001746:	e017      	b.n	8001778 <MainMenu+0x2c8>
 8001748:	2000000c 	.word	0x2000000c
 800174c:	200001fc 	.word	0x200001fc
 8001750:	0802bcf4 	.word	0x0802bcf4
 8001754:	0802bd2c 	.word	0x0802bd2c
 8001758:	0800a8dc 	.word	0x0800a8dc
 800175c:	2000000a 	.word	0x2000000a
 8001760:	0800a8ec 	.word	0x0800a8ec
 8001764:	0802baa0 	.word	0x0802baa0
 8001768:	0802bce0 	.word	0x0802bce0
 800176c:	4b12      	ldr	r3, [pc, #72]	; (80017b8 <MainMenu+0x308>)
 800176e:	881b      	ldrh	r3, [r3, #0]
 8001770:	4a12      	ldr	r2, [pc, #72]	; (80017bc <MainMenu+0x30c>)
 8001772:	00db      	lsls	r3, r3, #3
 8001774:	4413      	add	r3, r2
 8001776:	88db      	ldrh	r3, [r3, #6]
 8001778:	817b      	strh	r3, [r7, #10]
							tIconFont.BackColor = CL_MASK;		/* ÎÄ×Ö±³¾°ÑÕÉ« */
 800177a:	f649 1399 	movw	r3, #39321	; 0x9999
 800177e:	81bb      	strh	r3, [r7, #12]
							tIconFont.Space = 1;				/* ÎÄ×Ö¼ä¾à£¬µ¥Î» = ÏñËØ */
 8001780:	2301      	movs	r3, #1
 8001782:	81fb      	strh	r3, [r7, #14]
						}
						LCD_DispStr(5, 3, VER_INFO, &tFont);			/* ÔÚ(8,3)×ø±ê´¦ÏÔÊ¾Ò»´®ºº×Ö */
 8001784:	f107 0310 	add.w	r3, r7, #16
 8001788:	4a0d      	ldr	r2, [pc, #52]	; (80017c0 <MainMenu+0x310>)
 800178a:	2103      	movs	r1, #3
 800178c:	2005      	movs	r0, #5
 800178e:	f003 fc2d 	bl	8004fec <LCD_DispStr>
						LCD_DispStr(5, g_LcdHeight - 13, KEY_INFO, &tIconFont);			/* ÔÚ(8,3)×ø±ê´¦ÏÔÊ¾Ò»´®ºº×Ö */
 8001792:	4b0c      	ldr	r3, [pc, #48]	; (80017c4 <MainMenu+0x314>)
 8001794:	881b      	ldrh	r3, [r3, #0]
 8001796:	3b0d      	subs	r3, #13
 8001798:	b299      	uxth	r1, r3
 800179a:	f107 0308 	add.w	r3, r7, #8
 800179e:	4a0a      	ldr	r2, [pc, #40]	; (80017c8 <MainMenu+0x318>)
 80017a0:	2005      	movs	r0, #5
 80017a2:	f003 fc23 	bl	8004fec <LCD_DispStr>
					}
					fRefresh = 1;
 80017a6:	2301      	movs	r3, #1
 80017a8:	77fb      	strb	r3, [r7, #31]
					break;
 80017aa:	e000      	b.n	80017ae <MainMenu+0x2fe>
				default:
					break;
 80017ac:	bf00      	nop
		bsp_Idle();
 80017ae:	e6cb      	b.n	8001548 <MainMenu+0x98>
			}
		}
	}
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	3724      	adds	r7, #36	; 0x24
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017b8:	200001fc 	.word	0x200001fc
 80017bc:	0802bd2c 	.word	0x0802bd2c
 80017c0:	0800a8dc 	.word	0x0800a8dc
 80017c4:	2000000a 	.word	0x2000000a
 80017c8:	0800a8ec 	.word	0x0800a8ec

080017cc <DispBackground>:
*********************************************************************************************************
*	Func name: DispBackground
*********************************************************************************************************
*/
static void DispBackground(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af02      	add	r7, sp, #8
	if (g_LcdWidth == 480)	/* 480 x 272 */
 80017d2:	4b26      	ldr	r3, [pc, #152]	; (800186c <DispBackground+0xa0>)
 80017d4:	881b      	ldrh	r3, [r3, #0]
 80017d6:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 80017da:	d122      	bne.n	8001822 <DispBackground+0x56>
	{
		if (s_UI480[s_ColorIndex].pBmp == 0)
 80017dc:	4b24      	ldr	r3, [pc, #144]	; (8001870 <DispBackground+0xa4>)
 80017de:	881b      	ldrh	r3, [r3, #0]
 80017e0:	461a      	mov	r2, r3
 80017e2:	4b24      	ldr	r3, [pc, #144]	; (8001874 <DispBackground+0xa8>)
 80017e4:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d109      	bne.n	8001800 <DispBackground+0x34>
		{
			LCD_ClrScr(s_UI480[s_ColorIndex].BackColor);  	/* ÇåÆÁ, Ìî³äµ¥É« */
 80017ec:	4b20      	ldr	r3, [pc, #128]	; (8001870 <DispBackground+0xa4>)
 80017ee:	881b      	ldrh	r3, [r3, #0]
 80017f0:	4a20      	ldr	r2, [pc, #128]	; (8001874 <DispBackground+0xa8>)
 80017f2:	00db      	lsls	r3, r3, #3
 80017f4:	4413      	add	r3, r2
 80017f6:	889b      	ldrh	r3, [r3, #4]
 80017f8:	4618      	mov	r0, r3
 80017fa:	f003 fba9 	bl	8004f50 <LCD_ClrScr>
		else
		{
			LCD_DrawBMP(0, 0, g_LcdHeight, g_LcdWidth, s_UI800[s_ColorIndex].pBmp);
		}
	}	
}
 80017fe:	e032      	b.n	8001866 <DispBackground+0x9a>
			LCD_DrawBMP(0, 0, g_LcdHeight, g_LcdWidth, s_UI480[s_ColorIndex].pBmp);
 8001800:	4b1d      	ldr	r3, [pc, #116]	; (8001878 <DispBackground+0xac>)
 8001802:	881a      	ldrh	r2, [r3, #0]
 8001804:	4b19      	ldr	r3, [pc, #100]	; (800186c <DispBackground+0xa0>)
 8001806:	8819      	ldrh	r1, [r3, #0]
 8001808:	4b19      	ldr	r3, [pc, #100]	; (8001870 <DispBackground+0xa4>)
 800180a:	881b      	ldrh	r3, [r3, #0]
 800180c:	4618      	mov	r0, r3
 800180e:	4b19      	ldr	r3, [pc, #100]	; (8001874 <DispBackground+0xa8>)
 8001810:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
 8001814:	9300      	str	r3, [sp, #0]
 8001816:	460b      	mov	r3, r1
 8001818:	2100      	movs	r1, #0
 800181a:	2000      	movs	r0, #0
 800181c:	f003 fbc4 	bl	8004fa8 <LCD_DrawBMP>
}
 8001820:	e021      	b.n	8001866 <DispBackground+0x9a>
		if (s_UI800[s_ColorIndex].pBmp == 0)
 8001822:	4b13      	ldr	r3, [pc, #76]	; (8001870 <DispBackground+0xa4>)
 8001824:	881b      	ldrh	r3, [r3, #0]
 8001826:	461a      	mov	r2, r3
 8001828:	4b14      	ldr	r3, [pc, #80]	; (800187c <DispBackground+0xb0>)
 800182a:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d109      	bne.n	8001846 <DispBackground+0x7a>
			LCD_ClrScr(s_UI800[s_ColorIndex].BackColor);  	/* ÇåÆÁ, Ìî³äµ¥É« */
 8001832:	4b0f      	ldr	r3, [pc, #60]	; (8001870 <DispBackground+0xa4>)
 8001834:	881b      	ldrh	r3, [r3, #0]
 8001836:	4a11      	ldr	r2, [pc, #68]	; (800187c <DispBackground+0xb0>)
 8001838:	00db      	lsls	r3, r3, #3
 800183a:	4413      	add	r3, r2
 800183c:	889b      	ldrh	r3, [r3, #4]
 800183e:	4618      	mov	r0, r3
 8001840:	f003 fb86 	bl	8004f50 <LCD_ClrScr>
}
 8001844:	e00f      	b.n	8001866 <DispBackground+0x9a>
			LCD_DrawBMP(0, 0, g_LcdHeight, g_LcdWidth, s_UI800[s_ColorIndex].pBmp);
 8001846:	4b0c      	ldr	r3, [pc, #48]	; (8001878 <DispBackground+0xac>)
 8001848:	881a      	ldrh	r2, [r3, #0]
 800184a:	4b08      	ldr	r3, [pc, #32]	; (800186c <DispBackground+0xa0>)
 800184c:	8819      	ldrh	r1, [r3, #0]
 800184e:	4b08      	ldr	r3, [pc, #32]	; (8001870 <DispBackground+0xa4>)
 8001850:	881b      	ldrh	r3, [r3, #0]
 8001852:	4618      	mov	r0, r3
 8001854:	4b09      	ldr	r3, [pc, #36]	; (800187c <DispBackground+0xb0>)
 8001856:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
 800185a:	9300      	str	r3, [sp, #0]
 800185c:	460b      	mov	r3, r1
 800185e:	2100      	movs	r1, #0
 8001860:	2000      	movs	r0, #0
 8001862:	f003 fba1 	bl	8004fa8 <LCD_DrawBMP>
}
 8001866:	bf00      	nop
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	2000000c 	.word	0x2000000c
 8001870:	200001fc 	.word	0x200001fc
 8001874:	0802bcf4 	.word	0x0802bcf4
 8001878:	2000000a 	.word	0x2000000a
 800187c:	0802bd2c 	.word	0x0802bd2c

08001880 <LoadParam>:
#include "param.h"

PARAM_T g_tParam;

void LoadParam(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
	bsp_ReadCpuFlash(PARAM_ADDR, (uint8_t *)&g_tParam, sizeof(PARAM_T));
#endif

#ifdef PARAM_SAVE_TO_EEPROM
	/* ¶ÁÈ¡EEPROMÖÐµÄ²ÎÊý */
	ee_ReadBytes((uint8_t *)&g_tParam, PARAM_ADDR, sizeof(PARAM_T));
 8001884:	2238      	movs	r2, #56	; 0x38
 8001886:	2100      	movs	r1, #0
 8001888:	4841      	ldr	r0, [pc, #260]	; (8001990 <LoadParam+0x110>)
 800188a:	f001 ff57 	bl	800373c <ee_ReadBytes>
#endif

	/* Ìî³äÈ±Ê¡²ÎÊý */
	if (g_tParam.ParamVer != PARAM_VER)
 800188e:	4b40      	ldr	r3, [pc, #256]	; (8001990 <LoadParam+0x110>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 8001896:	d078      	beq.n	800198a <LoadParam+0x10a>
	{
		g_tParam.ParamVer = PARAM_VER;
 8001898:	4b3d      	ldr	r3, [pc, #244]	; (8001990 <LoadParam+0x110>)
 800189a:	f44f 7281 	mov.w	r2, #258	; 0x102
 800189e:	601a      	str	r2, [r3, #0]

		g_tParam.ucBackLight = 200;
 80018a0:	4b3b      	ldr	r3, [pc, #236]	; (8001990 <LoadParam+0x110>)
 80018a2:	22c8      	movs	r2, #200	; 0xc8
 80018a4:	711a      	strb	r2, [r3, #4]

		/* uip  ±¾»úIPµØÖ· */
		g_tParam.uip_ip[0] = 192;
 80018a6:	4b3a      	ldr	r3, [pc, #232]	; (8001990 <LoadParam+0x110>)
 80018a8:	22c0      	movs	r2, #192	; 0xc0
 80018aa:	761a      	strb	r2, [r3, #24]
		g_tParam.uip_ip[1] = 168;
 80018ac:	4b38      	ldr	r3, [pc, #224]	; (8001990 <LoadParam+0x110>)
 80018ae:	22a8      	movs	r2, #168	; 0xa8
 80018b0:	765a      	strb	r2, [r3, #25]
		g_tParam.uip_ip[2] = 1;
 80018b2:	4b37      	ldr	r3, [pc, #220]	; (8001990 <LoadParam+0x110>)
 80018b4:	2201      	movs	r2, #1
 80018b6:	769a      	strb	r2, [r3, #26]
		g_tParam.uip_ip[3] = 11;
 80018b8:	4b35      	ldr	r3, [pc, #212]	; (8001990 <LoadParam+0x110>)
 80018ba:	220b      	movs	r2, #11
 80018bc:	76da      	strb	r2, [r3, #27]

		/* uip  ×ÓÍøÑÚÂë */
		g_tParam.uip_net_mask[0] = 255;
 80018be:	4b34      	ldr	r3, [pc, #208]	; (8001990 <LoadParam+0x110>)
 80018c0:	22ff      	movs	r2, #255	; 0xff
 80018c2:	771a      	strb	r2, [r3, #28]
		g_tParam.uip_net_mask[1] = 255;
 80018c4:	4b32      	ldr	r3, [pc, #200]	; (8001990 <LoadParam+0x110>)
 80018c6:	22ff      	movs	r2, #255	; 0xff
 80018c8:	775a      	strb	r2, [r3, #29]
		g_tParam.uip_net_mask[2] = 255;
 80018ca:	4b31      	ldr	r3, [pc, #196]	; (8001990 <LoadParam+0x110>)
 80018cc:	22ff      	movs	r2, #255	; 0xff
 80018ce:	779a      	strb	r2, [r3, #30]
		g_tParam.uip_net_mask[3] = 0;
 80018d0:	4b2f      	ldr	r3, [pc, #188]	; (8001990 <LoadParam+0x110>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	77da      	strb	r2, [r3, #31]

		/* uip  Ä¬ÈÏÍø¹Ø */
		g_tParam.uip_net_gate[0] = 192;
 80018d6:	4b2e      	ldr	r3, [pc, #184]	; (8001990 <LoadParam+0x110>)
 80018d8:	22c0      	movs	r2, #192	; 0xc0
 80018da:	f883 2020 	strb.w	r2, [r3, #32]
		g_tParam.uip_net_gate[1] = 168;
 80018de:	4b2c      	ldr	r3, [pc, #176]	; (8001990 <LoadParam+0x110>)
 80018e0:	22a8      	movs	r2, #168	; 0xa8
 80018e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		g_tParam.uip_net_gate[2] = 1;
 80018e6:	4b2a      	ldr	r3, [pc, #168]	; (8001990 <LoadParam+0x110>)
 80018e8:	2201      	movs	r2, #1
 80018ea:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		g_tParam.uip_net_gate[3] = 1;
 80018ee:	4b28      	ldr	r3, [pc, #160]	; (8001990 <LoadParam+0x110>)
 80018f0:	2201      	movs	r2, #1
 80018f2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

		/* lwip  ±¾»úIPµØÖ· */
		g_tParam.lwip_ip[0] = 192;
 80018f6:	4b26      	ldr	r3, [pc, #152]	; (8001990 <LoadParam+0x110>)
 80018f8:	22c0      	movs	r2, #192	; 0xc0
 80018fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		g_tParam.lwip_ip[1] = 168;
 80018fe:	4b24      	ldr	r3, [pc, #144]	; (8001990 <LoadParam+0x110>)
 8001900:	22a8      	movs	r2, #168	; 0xa8
 8001902:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		g_tParam.lwip_ip[2] = 1;
 8001906:	4b22      	ldr	r3, [pc, #136]	; (8001990 <LoadParam+0x110>)
 8001908:	2201      	movs	r2, #1
 800190a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		g_tParam.lwip_ip[3] = 12;
 800190e:	4b20      	ldr	r3, [pc, #128]	; (8001990 <LoadParam+0x110>)
 8001910:	220c      	movs	r2, #12
 8001912:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

		/* lwip  ×ÓÍøÑÚÂë */
		g_tParam.lwip_net_mask[0] = 255;
 8001916:	4b1e      	ldr	r3, [pc, #120]	; (8001990 <LoadParam+0x110>)
 8001918:	22ff      	movs	r2, #255	; 0xff
 800191a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		g_tParam.lwip_net_mask[1] = 255;
 800191e:	4b1c      	ldr	r3, [pc, #112]	; (8001990 <LoadParam+0x110>)
 8001920:	22ff      	movs	r2, #255	; 0xff
 8001922:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		g_tParam.lwip_net_mask[2] = 255;
 8001926:	4b1a      	ldr	r3, [pc, #104]	; (8001990 <LoadParam+0x110>)
 8001928:	22ff      	movs	r2, #255	; 0xff
 800192a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		g_tParam.lwip_net_mask[3] = 0;
 800192e:	4b18      	ldr	r3, [pc, #96]	; (8001990 <LoadParam+0x110>)
 8001930:	2200      	movs	r2, #0
 8001932:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

		/* lwip  Ä¬ÈÏÍø¹Ø */
		g_tParam.lwip_net_gate[0] = 192;
 8001936:	4b16      	ldr	r3, [pc, #88]	; (8001990 <LoadParam+0x110>)
 8001938:	22c0      	movs	r2, #192	; 0xc0
 800193a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		g_tParam.lwip_net_gate[1] = 168;
 800193e:	4b14      	ldr	r3, [pc, #80]	; (8001990 <LoadParam+0x110>)
 8001940:	22a8      	movs	r2, #168	; 0xa8
 8001942:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		g_tParam.lwip_net_gate[2] = 1;
 8001946:	4b12      	ldr	r3, [pc, #72]	; (8001990 <LoadParam+0x110>)
 8001948:	2201      	movs	r2, #1
 800194a:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
		g_tParam.lwip_net_gate[3] = 1;
 800194e:	4b10      	ldr	r3, [pc, #64]	; (8001990 <LoadParam+0x110>)
 8001950:	2201      	movs	r2, #1
 8001952:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

		g_tParam.ucRadioMode     = 0;				/* 1 = AM »ò 0 = FM */
 8001956:	4b0e      	ldr	r3, [pc, #56]	; (8001990 <LoadParam+0x110>)
 8001958:	2200      	movs	r2, #0
 800195a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		g_tParam.ucRadioListType = 0;				/* µçÌ¨ÁÐ±íÀàÐÍ¡£0ÎäººµØÇø»ò1È«¹ú */
 800195e:	4b0c      	ldr	r3, [pc, #48]	; (8001990 <LoadParam+0x110>)
 8001960:	2200      	movs	r2, #0
 8001962:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
		g_tParam.ucIndexFM       = 0;				/* µ±Ç°FMµçÌ¨Ë÷Òý */
 8001966:	4b0a      	ldr	r3, [pc, #40]	; (8001990 <LoadParam+0x110>)
 8001968:	2200      	movs	r2, #0
 800196a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
		g_tParam.ucIndexAM       = 0;				/* µ±Ç°µçÌ¨Ë÷Òý */
 800196e:	4b08      	ldr	r3, [pc, #32]	; (8001990 <LoadParam+0x110>)
 8001970:	2200      	movs	r2, #0
 8001972:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
		g_tParam.ucRadioVolume   = 36;				/* ÒôÁ¿ */
 8001976:	4b06      	ldr	r3, [pc, #24]	; (8001990 <LoadParam+0x110>)
 8001978:	2224      	movs	r2, #36	; 0x24
 800197a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		g_tParam.ucSpkOutEn      = 1;				/* ÑïÉùÆ÷Êä³öÊ¹ÄÜ */
 800197e:	4b04      	ldr	r3, [pc, #16]	; (8001990 <LoadParam+0x110>)
 8001980:	2201      	movs	r2, #1
 8001982:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

		SaveParam();							/* ½«ÐÂ²ÎÊýÐ´ÈëFlash */
 8001986:	f000 f805 	bl	8001994 <SaveParam>
	}
}
 800198a:	bf00      	nop
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	20000200 	.word	0x20000200

08001994 <SaveParam>:

void SaveParam(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
#ifdef PARAM_SAVE_TO_FLASH
	bsp_WriteCpuFlash(PARAM_ADDR, (unsigned char *)&g_tParam, sizeof(PARAM_T));
#endif

#ifdef PARAM_SAVE_TO_EEPROM
	ee_WriteBytes((uint8_t *)&g_tParam, PARAM_ADDR, sizeof(PARAM_T));
 8001998:	2238      	movs	r2, #56	; 0x38
 800199a:	2100      	movs	r1, #0
 800199c:	4802      	ldr	r0, [pc, #8]	; (80019a8 <SaveParam+0x14>)
 800199e:	f001 ff2c 	bl	80037fa <ee_WriteBytes>
#endif
}
 80019a2:	bf00      	nop
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	20000200 	.word	0x20000200

080019ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019b2:	2300      	movs	r3, #0
 80019b4:	607b      	str	r3, [r7, #4]
 80019b6:	4b10      	ldr	r3, [pc, #64]	; (80019f8 <HAL_MspInit+0x4c>)
 80019b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ba:	4a0f      	ldr	r2, [pc, #60]	; (80019f8 <HAL_MspInit+0x4c>)
 80019bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019c0:	6453      	str	r3, [r2, #68]	; 0x44
 80019c2:	4b0d      	ldr	r3, [pc, #52]	; (80019f8 <HAL_MspInit+0x4c>)
 80019c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019ca:	607b      	str	r3, [r7, #4]
 80019cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019ce:	2300      	movs	r3, #0
 80019d0:	603b      	str	r3, [r7, #0]
 80019d2:	4b09      	ldr	r3, [pc, #36]	; (80019f8 <HAL_MspInit+0x4c>)
 80019d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d6:	4a08      	ldr	r2, [pc, #32]	; (80019f8 <HAL_MspInit+0x4c>)
 80019d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019dc:	6413      	str	r3, [r2, #64]	; 0x40
 80019de:	4b06      	ldr	r3, [pc, #24]	; (80019f8 <HAL_MspInit+0x4c>)
 80019e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019e6:	603b      	str	r3, [r7, #0]
 80019e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019ea:	bf00      	nop
 80019ec:	370c      	adds	r7, #12
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop
 80019f8:	40023800 	.word	0x40023800

080019fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d101      	bne.n	8001a0e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e07b      	b.n	8001b06 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d108      	bne.n	8001a28 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001a1e:	d009      	beq.n	8001a34 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2200      	movs	r2, #0
 8001a24:	61da      	str	r2, [r3, #28]
 8001a26:	e005      	b.n	8001a34 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2200      	movs	r2, #0
 8001a32:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2200      	movs	r2, #0
 8001a38:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d106      	bne.n	8001a54 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f000 f85d 	bl	8001b0e <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2202      	movs	r2, #2
 8001a58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001a6a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001a7c:	431a      	orrs	r2, r3
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	68db      	ldr	r3, [r3, #12]
 8001a82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a86:	431a      	orrs	r2, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	691b      	ldr	r3, [r3, #16]
 8001a8c:	f003 0302 	and.w	r3, r3, #2
 8001a90:	431a      	orrs	r2, r3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	695b      	ldr	r3, [r3, #20]
 8001a96:	f003 0301 	and.w	r3, r3, #1
 8001a9a:	431a      	orrs	r2, r3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	699b      	ldr	r3, [r3, #24]
 8001aa0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001aa4:	431a      	orrs	r2, r3
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	69db      	ldr	r3, [r3, #28]
 8001aaa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001aae:	431a      	orrs	r2, r3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6a1b      	ldr	r3, [r3, #32]
 8001ab4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ab8:	ea42 0103 	orr.w	r1, r2, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ac0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	430a      	orrs	r2, r1
 8001aca:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	699b      	ldr	r3, [r3, #24]
 8001ad0:	0c1b      	lsrs	r3, r3, #16
 8001ad2:	f003 0104 	and.w	r1, r3, #4
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ada:	f003 0210 	and.w	r2, r3, #16
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	430a      	orrs	r2, r1
 8001ae4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	69da      	ldr	r2, [r3, #28]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001af4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2200      	movs	r2, #0
 8001afa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2201      	movs	r2, #1
 8001b00:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001b04:	2300      	movs	r3, #0
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3708      	adds	r7, #8
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}

08001b0e <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8001b0e:	b480      	push	{r7}
 8001b10:	b083      	sub	sp, #12
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8001b16:	bf00      	nop
 8001b18:	370c      	adds	r7, #12
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr

08001b22 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001b22:	b580      	push	{r7, lr}
 8001b24:	b08c      	sub	sp, #48	; 0x30
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	60f8      	str	r0, [r7, #12]
 8001b2a:	60b9      	str	r1, [r7, #8]
 8001b2c:	607a      	str	r2, [r7, #4]
 8001b2e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001b30:	2301      	movs	r3, #1
 8001b32:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001b34:	2300      	movs	r3, #0
 8001b36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d101      	bne.n	8001b48 <HAL_SPI_TransmitReceive+0x26>
 8001b44:	2302      	movs	r3, #2
 8001b46:	e18a      	b.n	8001e5e <HAL_SPI_TransmitReceive+0x33c>
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001b50:	f005 f868 	bl	8006c24 <HAL_GetTick>
 8001b54:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001b5c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8001b66:	887b      	ldrh	r3, [r7, #2]
 8001b68:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001b6a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d00f      	beq.n	8001b92 <HAL_SPI_TransmitReceive+0x70>
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001b78:	d107      	bne.n	8001b8a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d103      	bne.n	8001b8a <HAL_SPI_TransmitReceive+0x68>
 8001b82:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001b86:	2b04      	cmp	r3, #4
 8001b88:	d003      	beq.n	8001b92 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8001b8a:	2302      	movs	r3, #2
 8001b8c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001b90:	e15b      	b.n	8001e4a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d005      	beq.n	8001ba4 <HAL_SPI_TransmitReceive+0x82>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d002      	beq.n	8001ba4 <HAL_SPI_TransmitReceive+0x82>
 8001b9e:	887b      	ldrh	r3, [r7, #2]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d103      	bne.n	8001bac <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001baa:	e14e      	b.n	8001e4a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	2b04      	cmp	r3, #4
 8001bb6:	d003      	beq.n	8001bc0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	2205      	movs	r2, #5
 8001bbc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	687a      	ldr	r2, [r7, #4]
 8001bca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	887a      	ldrh	r2, [r7, #2]
 8001bd0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	887a      	ldrh	r2, [r7, #2]
 8001bd6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	68ba      	ldr	r2, [r7, #8]
 8001bdc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	887a      	ldrh	r2, [r7, #2]
 8001be2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	887a      	ldrh	r2, [r7, #2]
 8001be8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	2200      	movs	r2, #0
 8001bee:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c00:	2b40      	cmp	r3, #64	; 0x40
 8001c02:	d007      	beq.n	8001c14 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c12:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001c1c:	d178      	bne.n	8001d10 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d002      	beq.n	8001c2c <HAL_SPI_TransmitReceive+0x10a>
 8001c26:	8b7b      	ldrh	r3, [r7, #26]
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	d166      	bne.n	8001cfa <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c30:	881a      	ldrh	r2, [r3, #0]
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3c:	1c9a      	adds	r2, r3, #2
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c46:	b29b      	uxth	r3, r3
 8001c48:	3b01      	subs	r3, #1
 8001c4a:	b29a      	uxth	r2, r3
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001c50:	e053      	b.n	8001cfa <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	f003 0302 	and.w	r3, r3, #2
 8001c5c:	2b02      	cmp	r3, #2
 8001c5e:	d11b      	bne.n	8001c98 <HAL_SPI_TransmitReceive+0x176>
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c64:	b29b      	uxth	r3, r3
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d016      	beq.n	8001c98 <HAL_SPI_TransmitReceive+0x176>
 8001c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d113      	bne.n	8001c98 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c74:	881a      	ldrh	r2, [r3, #0]
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c80:	1c9a      	adds	r2, r3, #2
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c8a:	b29b      	uxth	r3, r3
 8001c8c:	3b01      	subs	r3, #1
 8001c8e:	b29a      	uxth	r2, r3
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001c94:	2300      	movs	r3, #0
 8001c96:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	f003 0301 	and.w	r3, r3, #1
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d119      	bne.n	8001cda <HAL_SPI_TransmitReceive+0x1b8>
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001caa:	b29b      	uxth	r3, r3
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d014      	beq.n	8001cda <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	68da      	ldr	r2, [r3, #12]
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cba:	b292      	uxth	r2, r2
 8001cbc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cc2:	1c9a      	adds	r2, r3, #2
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ccc:	b29b      	uxth	r3, r3
 8001cce:	3b01      	subs	r3, #1
 8001cd0:	b29a      	uxth	r2, r3
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001cda:	f004 ffa3 	bl	8006c24 <HAL_GetTick>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce2:	1ad3      	subs	r3, r2, r3
 8001ce4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	d807      	bhi.n	8001cfa <HAL_SPI_TransmitReceive+0x1d8>
 8001cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cf0:	d003      	beq.n	8001cfa <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001cf8:	e0a7      	b.n	8001e4a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001cfe:	b29b      	uxth	r3, r3
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d1a6      	bne.n	8001c52 <HAL_SPI_TransmitReceive+0x130>
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d08:	b29b      	uxth	r3, r3
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d1a1      	bne.n	8001c52 <HAL_SPI_TransmitReceive+0x130>
 8001d0e:	e07c      	b.n	8001e0a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d002      	beq.n	8001d1e <HAL_SPI_TransmitReceive+0x1fc>
 8001d18:	8b7b      	ldrh	r3, [r7, #26]
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d16b      	bne.n	8001df6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	330c      	adds	r3, #12
 8001d28:	7812      	ldrb	r2, [r2, #0]
 8001d2a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d30:	1c5a      	adds	r2, r3, #1
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d3a:	b29b      	uxth	r3, r3
 8001d3c:	3b01      	subs	r3, #1
 8001d3e:	b29a      	uxth	r2, r3
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001d44:	e057      	b.n	8001df6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	f003 0302 	and.w	r3, r3, #2
 8001d50:	2b02      	cmp	r3, #2
 8001d52:	d11c      	bne.n	8001d8e <HAL_SPI_TransmitReceive+0x26c>
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d58:	b29b      	uxth	r3, r3
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d017      	beq.n	8001d8e <HAL_SPI_TransmitReceive+0x26c>
 8001d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d114      	bne.n	8001d8e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	330c      	adds	r3, #12
 8001d6e:	7812      	ldrb	r2, [r2, #0]
 8001d70:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d76:	1c5a      	adds	r2, r3, #1
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d80:	b29b      	uxth	r3, r3
 8001d82:	3b01      	subs	r3, #1
 8001d84:	b29a      	uxth	r2, r3
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	f003 0301 	and.w	r3, r3, #1
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d119      	bne.n	8001dd0 <HAL_SPI_TransmitReceive+0x2ae>
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001da0:	b29b      	uxth	r3, r3
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d014      	beq.n	8001dd0 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	68da      	ldr	r2, [r3, #12]
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001db0:	b2d2      	uxtb	r2, r2
 8001db2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001db8:	1c5a      	adds	r2, r3, #1
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001dc2:	b29b      	uxth	r3, r3
 8001dc4:	3b01      	subs	r3, #1
 8001dc6:	b29a      	uxth	r2, r3
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001dd0:	f004 ff28 	bl	8006c24 <HAL_GetTick>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d803      	bhi.n	8001de8 <HAL_SPI_TransmitReceive+0x2c6>
 8001de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001de2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001de6:	d102      	bne.n	8001dee <HAL_SPI_TransmitReceive+0x2cc>
 8001de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d103      	bne.n	8001df6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8001dee:	2303      	movs	r3, #3
 8001df0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001df4:	e029      	b.n	8001e4a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001dfa:	b29b      	uxth	r3, r3
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d1a2      	bne.n	8001d46 <HAL_SPI_TransmitReceive+0x224>
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e04:	b29b      	uxth	r3, r3
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d19d      	bne.n	8001d46 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001e0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e0c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001e0e:	68f8      	ldr	r0, [r7, #12]
 8001e10:	f000 f8b2 	bl	8001f78 <SPI_EndRxTxTransaction>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d006      	beq.n	8001e28 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	2220      	movs	r2, #32
 8001e24:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8001e26:	e010      	b.n	8001e4a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d10b      	bne.n	8001e48 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001e30:	2300      	movs	r3, #0
 8001e32:	617b      	str	r3, [r7, #20]
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	68db      	ldr	r3, [r3, #12]
 8001e3a:	617b      	str	r3, [r7, #20]
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	617b      	str	r3, [r7, #20]
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	e000      	b.n	8001e4a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8001e48:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	2200      	movs	r2, #0
 8001e56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001e5a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3730      	adds	r7, #48	; 0x30
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
	...

08001e68 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b088      	sub	sp, #32
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	60f8      	str	r0, [r7, #12]
 8001e70:	60b9      	str	r1, [r7, #8]
 8001e72:	603b      	str	r3, [r7, #0]
 8001e74:	4613      	mov	r3, r2
 8001e76:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001e78:	f004 fed4 	bl	8006c24 <HAL_GetTick>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e80:	1a9b      	subs	r3, r3, r2
 8001e82:	683a      	ldr	r2, [r7, #0]
 8001e84:	4413      	add	r3, r2
 8001e86:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001e88:	f004 fecc 	bl	8006c24 <HAL_GetTick>
 8001e8c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001e8e:	4b39      	ldr	r3, [pc, #228]	; (8001f74 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	015b      	lsls	r3, r3, #5
 8001e94:	0d1b      	lsrs	r3, r3, #20
 8001e96:	69fa      	ldr	r2, [r7, #28]
 8001e98:	fb02 f303 	mul.w	r3, r2, r3
 8001e9c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001e9e:	e054      	b.n	8001f4a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ea6:	d050      	beq.n	8001f4a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001ea8:	f004 febc 	bl	8006c24 <HAL_GetTick>
 8001eac:	4602      	mov	r2, r0
 8001eae:	69bb      	ldr	r3, [r7, #24]
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	69fa      	ldr	r2, [r7, #28]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d902      	bls.n	8001ebe <SPI_WaitFlagStateUntilTimeout+0x56>
 8001eb8:	69fb      	ldr	r3, [r7, #28]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d13d      	bne.n	8001f3a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	685a      	ldr	r2, [r3, #4]
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001ecc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001ed6:	d111      	bne.n	8001efc <SPI_WaitFlagStateUntilTimeout+0x94>
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ee0:	d004      	beq.n	8001eec <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001eea:	d107      	bne.n	8001efc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001efa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f04:	d10f      	bne.n	8001f26 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f14:	601a      	str	r2, [r3, #0]
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f24:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	2201      	movs	r2, #1
 8001f2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	2200      	movs	r2, #0
 8001f32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8001f36:	2303      	movs	r3, #3
 8001f38:	e017      	b.n	8001f6a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d101      	bne.n	8001f44 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8001f40:	2300      	movs	r3, #0
 8001f42:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	3b01      	subs	r3, #1
 8001f48:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	689a      	ldr	r2, [r3, #8]
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	4013      	ands	r3, r2
 8001f54:	68ba      	ldr	r2, [r7, #8]
 8001f56:	429a      	cmp	r2, r3
 8001f58:	bf0c      	ite	eq
 8001f5a:	2301      	moveq	r3, #1
 8001f5c:	2300      	movne	r3, #0
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	461a      	mov	r2, r3
 8001f62:	79fb      	ldrb	r3, [r7, #7]
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d19b      	bne.n	8001ea0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8001f68:	2300      	movs	r3, #0
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3720      	adds	r7, #32
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	20000000 	.word	0x20000000

08001f78 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b088      	sub	sp, #32
 8001f7c:	af02      	add	r7, sp, #8
 8001f7e:	60f8      	str	r0, [r7, #12]
 8001f80:	60b9      	str	r1, [r7, #8]
 8001f82:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8001f84:	4b1b      	ldr	r3, [pc, #108]	; (8001ff4 <SPI_EndRxTxTransaction+0x7c>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a1b      	ldr	r2, [pc, #108]	; (8001ff8 <SPI_EndRxTxTransaction+0x80>)
 8001f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f8e:	0d5b      	lsrs	r3, r3, #21
 8001f90:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f94:	fb02 f303 	mul.w	r3, r2, r3
 8001f98:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001fa2:	d112      	bne.n	8001fca <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	9300      	str	r3, [sp, #0]
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	2200      	movs	r2, #0
 8001fac:	2180      	movs	r1, #128	; 0x80
 8001fae:	68f8      	ldr	r0, [r7, #12]
 8001fb0:	f7ff ff5a 	bl	8001e68 <SPI_WaitFlagStateUntilTimeout>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d016      	beq.n	8001fe8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fbe:	f043 0220 	orr.w	r2, r3, #32
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e00f      	b.n	8001fea <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d00a      	beq.n	8001fe6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	3b01      	subs	r3, #1
 8001fd4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fe0:	2b80      	cmp	r3, #128	; 0x80
 8001fe2:	d0f2      	beq.n	8001fca <SPI_EndRxTxTransaction+0x52>
 8001fe4:	e000      	b.n	8001fe8 <SPI_EndRxTxTransaction+0x70>
        break;
 8001fe6:	bf00      	nop
  }

  return HAL_OK;
 8001fe8:	2300      	movs	r3, #0
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3718      	adds	r7, #24
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	20000000 	.word	0x20000000
 8001ff8:	165e9f81 	.word	0x165e9f81

08001ffc <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b084      	sub	sp, #16
 8002000:	af00      	add	r7, sp, #0
 8002002:	60f8      	str	r0, [r7, #12]
 8002004:	60b9      	str	r1, [r7, #8]
 8002006:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d101      	bne.n	8002012 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e038      	b.n	8002084 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8002018:	b2db      	uxtb	r3, r3
 800201a:	2b00      	cmp	r3, #0
 800201c:	d106      	bne.n	800202c <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2200      	movs	r2, #0
 8002022:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8002026:	68f8      	ldr	r0, [r7, #12]
 8002028:	f000 f830 	bl	800208c <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	3308      	adds	r3, #8
 8002034:	4619      	mov	r1, r3
 8002036:	4610      	mov	r0, r2
 8002038:	f000 fc2a 	bl	8002890 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	6818      	ldr	r0, [r3, #0]
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	461a      	mov	r2, r3
 8002046:	68b9      	ldr	r1, [r7, #8]
 8002048:	f000 fc8c 	bl	8002964 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	6858      	ldr	r0, [r3, #4]
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	689a      	ldr	r2, [r3, #8]
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002058:	6879      	ldr	r1, [r7, #4]
 800205a:	f000 fcb9 	bl	80029d0 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	68fa      	ldr	r2, [r7, #12]
 8002064:	6892      	ldr	r2, [r2, #8]
 8002066:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	68fa      	ldr	r2, [r7, #12]
 8002070:	6892      	ldr	r2, [r2, #8]
 8002072:	f041 0101 	orr.w	r1, r1, #1
 8002076:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2201      	movs	r2, #1
 800207e:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 8002082:	2300      	movs	r3, #0
}
 8002084:	4618      	mov	r0, r3
 8002086:	3710      	adds	r7, #16
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}

0800208c <HAL_SRAM_MspInit>:
  * @param  hsram pointer to a SRAM_HandleTypeDef structure that contains
  *                the configuration information for SRAM module.
  * @retval None
  */
__weak void HAL_SRAM_MspInit(SRAM_HandleTypeDef *hsram)
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  UNUSED(hsram);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SRAM_MspInit could be implemented in the user file
   */
}
 8002094:	bf00      	nop
 8002096:	370c      	adds	r7, #12
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr

080020a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d101      	bne.n	80020b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e03f      	b.n	8002132 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d106      	bne.n	80020cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2200      	movs	r2, #0
 80020c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f000 f837 	bl	800213a <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2224      	movs	r2, #36	; 0x24
 80020d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	68da      	ldr	r2, [r3, #12]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80020e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f000 f933 	bl	8002350 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	691a      	ldr	r2, [r3, #16]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80020f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	695a      	ldr	r2, [r3, #20]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002108:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	68da      	ldr	r2, [r3, #12]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002118:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2200      	movs	r2, #0
 800211e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2220      	movs	r2, #32
 8002124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2220      	movs	r2, #32
 800212c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002130:	2300      	movs	r3, #0
}
 8002132:	4618      	mov	r0, r3
 8002134:	3708      	adds	r7, #8
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}

0800213a <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800213a:	b480      	push	{r7}
 800213c:	b083      	sub	sp, #12
 800213e:	af00      	add	r7, sp, #0
 8002140:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 8002142:	bf00      	nop
 8002144:	370c      	adds	r7, #12
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr

0800214e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800214e:	b580      	push	{r7, lr}
 8002150:	b08a      	sub	sp, #40	; 0x28
 8002152:	af02      	add	r7, sp, #8
 8002154:	60f8      	str	r0, [r7, #12]
 8002156:	60b9      	str	r1, [r7, #8]
 8002158:	603b      	str	r3, [r7, #0]
 800215a:	4613      	mov	r3, r2
 800215c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800215e:	2300      	movs	r3, #0
 8002160:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002168:	b2db      	uxtb	r3, r3
 800216a:	2b20      	cmp	r3, #32
 800216c:	d17c      	bne.n	8002268 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d002      	beq.n	800217a <HAL_UART_Transmit+0x2c>
 8002174:	88fb      	ldrh	r3, [r7, #6]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d101      	bne.n	800217e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e075      	b.n	800226a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002184:	2b01      	cmp	r3, #1
 8002186:	d101      	bne.n	800218c <HAL_UART_Transmit+0x3e>
 8002188:	2302      	movs	r3, #2
 800218a:	e06e      	b.n	800226a <HAL_UART_Transmit+0x11c>
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	2201      	movs	r2, #1
 8002190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2200      	movs	r2, #0
 8002198:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	2221      	movs	r2, #33	; 0x21
 800219e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80021a2:	f004 fd3f 	bl	8006c24 <HAL_GetTick>
 80021a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	88fa      	ldrh	r2, [r7, #6]
 80021ac:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	88fa      	ldrh	r2, [r7, #6]
 80021b2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021bc:	d108      	bne.n	80021d0 <HAL_UART_Transmit+0x82>
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	691b      	ldr	r3, [r3, #16]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d104      	bne.n	80021d0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80021c6:	2300      	movs	r3, #0
 80021c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	61bb      	str	r3, [r7, #24]
 80021ce:	e003      	b.n	80021d8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80021d4:	2300      	movs	r3, #0
 80021d6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2200      	movs	r2, #0
 80021dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80021e0:	e02a      	b.n	8002238 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	9300      	str	r3, [sp, #0]
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	2200      	movs	r2, #0
 80021ea:	2180      	movs	r1, #128	; 0x80
 80021ec:	68f8      	ldr	r0, [r7, #12]
 80021ee:	f000 f840 	bl	8002272 <UART_WaitOnFlagUntilTimeout>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d001      	beq.n	80021fc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80021f8:	2303      	movs	r3, #3
 80021fa:	e036      	b.n	800226a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d10b      	bne.n	800221a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002202:	69bb      	ldr	r3, [r7, #24]
 8002204:	881b      	ldrh	r3, [r3, #0]
 8002206:	461a      	mov	r2, r3
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002210:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002212:	69bb      	ldr	r3, [r7, #24]
 8002214:	3302      	adds	r3, #2
 8002216:	61bb      	str	r3, [r7, #24]
 8002218:	e007      	b.n	800222a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	781a      	ldrb	r2, [r3, #0]
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	3301      	adds	r3, #1
 8002228:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800222e:	b29b      	uxth	r3, r3
 8002230:	3b01      	subs	r3, #1
 8002232:	b29a      	uxth	r2, r3
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800223c:	b29b      	uxth	r3, r3
 800223e:	2b00      	cmp	r3, #0
 8002240:	d1cf      	bne.n	80021e2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	9300      	str	r3, [sp, #0]
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	2200      	movs	r2, #0
 800224a:	2140      	movs	r1, #64	; 0x40
 800224c:	68f8      	ldr	r0, [r7, #12]
 800224e:	f000 f810 	bl	8002272 <UART_WaitOnFlagUntilTimeout>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d001      	beq.n	800225c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002258:	2303      	movs	r3, #3
 800225a:	e006      	b.n	800226a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	2220      	movs	r2, #32
 8002260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002264:	2300      	movs	r3, #0
 8002266:	e000      	b.n	800226a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002268:	2302      	movs	r3, #2
  }
}
 800226a:	4618      	mov	r0, r3
 800226c:	3720      	adds	r7, #32
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}

08002272 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002272:	b580      	push	{r7, lr}
 8002274:	b090      	sub	sp, #64	; 0x40
 8002276:	af00      	add	r7, sp, #0
 8002278:	60f8      	str	r0, [r7, #12]
 800227a:	60b9      	str	r1, [r7, #8]
 800227c:	603b      	str	r3, [r7, #0]
 800227e:	4613      	mov	r3, r2
 8002280:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002282:	e050      	b.n	8002326 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002284:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002286:	f1b3 3fff 	cmp.w	r3, #4294967295
 800228a:	d04c      	beq.n	8002326 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800228c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800228e:	2b00      	cmp	r3, #0
 8002290:	d007      	beq.n	80022a2 <UART_WaitOnFlagUntilTimeout+0x30>
 8002292:	f004 fcc7 	bl	8006c24 <HAL_GetTick>
 8002296:	4602      	mov	r2, r0
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	1ad3      	subs	r3, r2, r3
 800229c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800229e:	429a      	cmp	r2, r3
 80022a0:	d241      	bcs.n	8002326 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	330c      	adds	r3, #12
 80022a8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ac:	e853 3f00 	ldrex	r3, [r3]
 80022b0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80022b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80022b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	330c      	adds	r3, #12
 80022c0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80022c2:	637a      	str	r2, [r7, #52]	; 0x34
 80022c4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022c6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80022c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80022ca:	e841 2300 	strex	r3, r2, [r1]
 80022ce:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80022d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d1e5      	bne.n	80022a2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	3314      	adds	r3, #20
 80022dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	e853 3f00 	ldrex	r3, [r3]
 80022e4:	613b      	str	r3, [r7, #16]
   return(result);
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	f023 0301 	bic.w	r3, r3, #1
 80022ec:	63bb      	str	r3, [r7, #56]	; 0x38
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	3314      	adds	r3, #20
 80022f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80022f6:	623a      	str	r2, [r7, #32]
 80022f8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022fa:	69f9      	ldr	r1, [r7, #28]
 80022fc:	6a3a      	ldr	r2, [r7, #32]
 80022fe:	e841 2300 	strex	r3, r2, [r1]
 8002302:	61bb      	str	r3, [r7, #24]
   return(result);
 8002304:	69bb      	ldr	r3, [r7, #24]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d1e5      	bne.n	80022d6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2220      	movs	r2, #32
 800230e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2220      	movs	r2, #32
 8002316:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2200      	movs	r2, #0
 800231e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	e00f      	b.n	8002346 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	4013      	ands	r3, r2
 8002330:	68ba      	ldr	r2, [r7, #8]
 8002332:	429a      	cmp	r2, r3
 8002334:	bf0c      	ite	eq
 8002336:	2301      	moveq	r3, #1
 8002338:	2300      	movne	r3, #0
 800233a:	b2db      	uxtb	r3, r3
 800233c:	461a      	mov	r2, r3
 800233e:	79fb      	ldrb	r3, [r7, #7]
 8002340:	429a      	cmp	r2, r3
 8002342:	d09f      	beq.n	8002284 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002344:	2300      	movs	r3, #0
}
 8002346:	4618      	mov	r0, r3
 8002348:	3740      	adds	r7, #64	; 0x40
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
	...

08002350 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002350:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002354:	b0c0      	sub	sp, #256	; 0x100
 8002356:	af00      	add	r7, sp, #0
 8002358:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800235c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	691b      	ldr	r3, [r3, #16]
 8002364:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800236c:	68d9      	ldr	r1, [r3, #12]
 800236e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	ea40 0301 	orr.w	r3, r0, r1
 8002378:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800237a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800237e:	689a      	ldr	r2, [r3, #8]
 8002380:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002384:	691b      	ldr	r3, [r3, #16]
 8002386:	431a      	orrs	r2, r3
 8002388:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800238c:	695b      	ldr	r3, [r3, #20]
 800238e:	431a      	orrs	r2, r3
 8002390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002394:	69db      	ldr	r3, [r3, #28]
 8002396:	4313      	orrs	r3, r2
 8002398:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800239c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80023a8:	f021 010c 	bic.w	r1, r1, #12
 80023ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80023b6:	430b      	orrs	r3, r1
 80023b8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80023ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	695b      	ldr	r3, [r3, #20]
 80023c2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80023c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023ca:	6999      	ldr	r1, [r3, #24]
 80023cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	ea40 0301 	orr.w	r3, r0, r1
 80023d6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80023d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	4b8f      	ldr	r3, [pc, #572]	; (800261c <UART_SetConfig+0x2cc>)
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d005      	beq.n	80023f0 <UART_SetConfig+0xa0>
 80023e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	4b8d      	ldr	r3, [pc, #564]	; (8002620 <UART_SetConfig+0x2d0>)
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d104      	bne.n	80023fa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80023f0:	f005 fb6c 	bl	8007acc <HAL_RCC_GetPCLK2Freq>
 80023f4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80023f8:	e003      	b.n	8002402 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80023fa:	f005 fb53 	bl	8007aa4 <HAL_RCC_GetPCLK1Freq>
 80023fe:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002402:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002406:	69db      	ldr	r3, [r3, #28]
 8002408:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800240c:	f040 810c 	bne.w	8002628 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002410:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002414:	2200      	movs	r2, #0
 8002416:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800241a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800241e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002422:	4622      	mov	r2, r4
 8002424:	462b      	mov	r3, r5
 8002426:	1891      	adds	r1, r2, r2
 8002428:	65b9      	str	r1, [r7, #88]	; 0x58
 800242a:	415b      	adcs	r3, r3
 800242c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800242e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002432:	4621      	mov	r1, r4
 8002434:	eb12 0801 	adds.w	r8, r2, r1
 8002438:	4629      	mov	r1, r5
 800243a:	eb43 0901 	adc.w	r9, r3, r1
 800243e:	f04f 0200 	mov.w	r2, #0
 8002442:	f04f 0300 	mov.w	r3, #0
 8002446:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800244a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800244e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002452:	4690      	mov	r8, r2
 8002454:	4699      	mov	r9, r3
 8002456:	4623      	mov	r3, r4
 8002458:	eb18 0303 	adds.w	r3, r8, r3
 800245c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002460:	462b      	mov	r3, r5
 8002462:	eb49 0303 	adc.w	r3, r9, r3
 8002466:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800246a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	2200      	movs	r2, #0
 8002472:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002476:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800247a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800247e:	460b      	mov	r3, r1
 8002480:	18db      	adds	r3, r3, r3
 8002482:	653b      	str	r3, [r7, #80]	; 0x50
 8002484:	4613      	mov	r3, r2
 8002486:	eb42 0303 	adc.w	r3, r2, r3
 800248a:	657b      	str	r3, [r7, #84]	; 0x54
 800248c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002490:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002494:	f7fe fb88 	bl	8000ba8 <__aeabi_uldivmod>
 8002498:	4602      	mov	r2, r0
 800249a:	460b      	mov	r3, r1
 800249c:	4b61      	ldr	r3, [pc, #388]	; (8002624 <UART_SetConfig+0x2d4>)
 800249e:	fba3 2302 	umull	r2, r3, r3, r2
 80024a2:	095b      	lsrs	r3, r3, #5
 80024a4:	011c      	lsls	r4, r3, #4
 80024a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80024aa:	2200      	movs	r2, #0
 80024ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80024b0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80024b4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80024b8:	4642      	mov	r2, r8
 80024ba:	464b      	mov	r3, r9
 80024bc:	1891      	adds	r1, r2, r2
 80024be:	64b9      	str	r1, [r7, #72]	; 0x48
 80024c0:	415b      	adcs	r3, r3
 80024c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80024c4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80024c8:	4641      	mov	r1, r8
 80024ca:	eb12 0a01 	adds.w	sl, r2, r1
 80024ce:	4649      	mov	r1, r9
 80024d0:	eb43 0b01 	adc.w	fp, r3, r1
 80024d4:	f04f 0200 	mov.w	r2, #0
 80024d8:	f04f 0300 	mov.w	r3, #0
 80024dc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80024e0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80024e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80024e8:	4692      	mov	sl, r2
 80024ea:	469b      	mov	fp, r3
 80024ec:	4643      	mov	r3, r8
 80024ee:	eb1a 0303 	adds.w	r3, sl, r3
 80024f2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80024f6:	464b      	mov	r3, r9
 80024f8:	eb4b 0303 	adc.w	r3, fp, r3
 80024fc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002500:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	2200      	movs	r2, #0
 8002508:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800250c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002510:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002514:	460b      	mov	r3, r1
 8002516:	18db      	adds	r3, r3, r3
 8002518:	643b      	str	r3, [r7, #64]	; 0x40
 800251a:	4613      	mov	r3, r2
 800251c:	eb42 0303 	adc.w	r3, r2, r3
 8002520:	647b      	str	r3, [r7, #68]	; 0x44
 8002522:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002526:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800252a:	f7fe fb3d 	bl	8000ba8 <__aeabi_uldivmod>
 800252e:	4602      	mov	r2, r0
 8002530:	460b      	mov	r3, r1
 8002532:	4611      	mov	r1, r2
 8002534:	4b3b      	ldr	r3, [pc, #236]	; (8002624 <UART_SetConfig+0x2d4>)
 8002536:	fba3 2301 	umull	r2, r3, r3, r1
 800253a:	095b      	lsrs	r3, r3, #5
 800253c:	2264      	movs	r2, #100	; 0x64
 800253e:	fb02 f303 	mul.w	r3, r2, r3
 8002542:	1acb      	subs	r3, r1, r3
 8002544:	00db      	lsls	r3, r3, #3
 8002546:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800254a:	4b36      	ldr	r3, [pc, #216]	; (8002624 <UART_SetConfig+0x2d4>)
 800254c:	fba3 2302 	umull	r2, r3, r3, r2
 8002550:	095b      	lsrs	r3, r3, #5
 8002552:	005b      	lsls	r3, r3, #1
 8002554:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002558:	441c      	add	r4, r3
 800255a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800255e:	2200      	movs	r2, #0
 8002560:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002564:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002568:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800256c:	4642      	mov	r2, r8
 800256e:	464b      	mov	r3, r9
 8002570:	1891      	adds	r1, r2, r2
 8002572:	63b9      	str	r1, [r7, #56]	; 0x38
 8002574:	415b      	adcs	r3, r3
 8002576:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002578:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800257c:	4641      	mov	r1, r8
 800257e:	1851      	adds	r1, r2, r1
 8002580:	6339      	str	r1, [r7, #48]	; 0x30
 8002582:	4649      	mov	r1, r9
 8002584:	414b      	adcs	r3, r1
 8002586:	637b      	str	r3, [r7, #52]	; 0x34
 8002588:	f04f 0200 	mov.w	r2, #0
 800258c:	f04f 0300 	mov.w	r3, #0
 8002590:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002594:	4659      	mov	r1, fp
 8002596:	00cb      	lsls	r3, r1, #3
 8002598:	4651      	mov	r1, sl
 800259a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800259e:	4651      	mov	r1, sl
 80025a0:	00ca      	lsls	r2, r1, #3
 80025a2:	4610      	mov	r0, r2
 80025a4:	4619      	mov	r1, r3
 80025a6:	4603      	mov	r3, r0
 80025a8:	4642      	mov	r2, r8
 80025aa:	189b      	adds	r3, r3, r2
 80025ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80025b0:	464b      	mov	r3, r9
 80025b2:	460a      	mov	r2, r1
 80025b4:	eb42 0303 	adc.w	r3, r2, r3
 80025b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80025bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	2200      	movs	r2, #0
 80025c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80025c8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80025cc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80025d0:	460b      	mov	r3, r1
 80025d2:	18db      	adds	r3, r3, r3
 80025d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80025d6:	4613      	mov	r3, r2
 80025d8:	eb42 0303 	adc.w	r3, r2, r3
 80025dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80025e2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80025e6:	f7fe fadf 	bl	8000ba8 <__aeabi_uldivmod>
 80025ea:	4602      	mov	r2, r0
 80025ec:	460b      	mov	r3, r1
 80025ee:	4b0d      	ldr	r3, [pc, #52]	; (8002624 <UART_SetConfig+0x2d4>)
 80025f0:	fba3 1302 	umull	r1, r3, r3, r2
 80025f4:	095b      	lsrs	r3, r3, #5
 80025f6:	2164      	movs	r1, #100	; 0x64
 80025f8:	fb01 f303 	mul.w	r3, r1, r3
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	00db      	lsls	r3, r3, #3
 8002600:	3332      	adds	r3, #50	; 0x32
 8002602:	4a08      	ldr	r2, [pc, #32]	; (8002624 <UART_SetConfig+0x2d4>)
 8002604:	fba2 2303 	umull	r2, r3, r2, r3
 8002608:	095b      	lsrs	r3, r3, #5
 800260a:	f003 0207 	and.w	r2, r3, #7
 800260e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4422      	add	r2, r4
 8002616:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002618:	e106      	b.n	8002828 <UART_SetConfig+0x4d8>
 800261a:	bf00      	nop
 800261c:	40011000 	.word	0x40011000
 8002620:	40011400 	.word	0x40011400
 8002624:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002628:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800262c:	2200      	movs	r2, #0
 800262e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002632:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002636:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800263a:	4642      	mov	r2, r8
 800263c:	464b      	mov	r3, r9
 800263e:	1891      	adds	r1, r2, r2
 8002640:	6239      	str	r1, [r7, #32]
 8002642:	415b      	adcs	r3, r3
 8002644:	627b      	str	r3, [r7, #36]	; 0x24
 8002646:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800264a:	4641      	mov	r1, r8
 800264c:	1854      	adds	r4, r2, r1
 800264e:	4649      	mov	r1, r9
 8002650:	eb43 0501 	adc.w	r5, r3, r1
 8002654:	f04f 0200 	mov.w	r2, #0
 8002658:	f04f 0300 	mov.w	r3, #0
 800265c:	00eb      	lsls	r3, r5, #3
 800265e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002662:	00e2      	lsls	r2, r4, #3
 8002664:	4614      	mov	r4, r2
 8002666:	461d      	mov	r5, r3
 8002668:	4643      	mov	r3, r8
 800266a:	18e3      	adds	r3, r4, r3
 800266c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002670:	464b      	mov	r3, r9
 8002672:	eb45 0303 	adc.w	r3, r5, r3
 8002676:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800267a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	2200      	movs	r2, #0
 8002682:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002686:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800268a:	f04f 0200 	mov.w	r2, #0
 800268e:	f04f 0300 	mov.w	r3, #0
 8002692:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002696:	4629      	mov	r1, r5
 8002698:	008b      	lsls	r3, r1, #2
 800269a:	4621      	mov	r1, r4
 800269c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80026a0:	4621      	mov	r1, r4
 80026a2:	008a      	lsls	r2, r1, #2
 80026a4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80026a8:	f7fe fa7e 	bl	8000ba8 <__aeabi_uldivmod>
 80026ac:	4602      	mov	r2, r0
 80026ae:	460b      	mov	r3, r1
 80026b0:	4b60      	ldr	r3, [pc, #384]	; (8002834 <UART_SetConfig+0x4e4>)
 80026b2:	fba3 2302 	umull	r2, r3, r3, r2
 80026b6:	095b      	lsrs	r3, r3, #5
 80026b8:	011c      	lsls	r4, r3, #4
 80026ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80026be:	2200      	movs	r2, #0
 80026c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80026c4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80026c8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80026cc:	4642      	mov	r2, r8
 80026ce:	464b      	mov	r3, r9
 80026d0:	1891      	adds	r1, r2, r2
 80026d2:	61b9      	str	r1, [r7, #24]
 80026d4:	415b      	adcs	r3, r3
 80026d6:	61fb      	str	r3, [r7, #28]
 80026d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80026dc:	4641      	mov	r1, r8
 80026de:	1851      	adds	r1, r2, r1
 80026e0:	6139      	str	r1, [r7, #16]
 80026e2:	4649      	mov	r1, r9
 80026e4:	414b      	adcs	r3, r1
 80026e6:	617b      	str	r3, [r7, #20]
 80026e8:	f04f 0200 	mov.w	r2, #0
 80026ec:	f04f 0300 	mov.w	r3, #0
 80026f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80026f4:	4659      	mov	r1, fp
 80026f6:	00cb      	lsls	r3, r1, #3
 80026f8:	4651      	mov	r1, sl
 80026fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80026fe:	4651      	mov	r1, sl
 8002700:	00ca      	lsls	r2, r1, #3
 8002702:	4610      	mov	r0, r2
 8002704:	4619      	mov	r1, r3
 8002706:	4603      	mov	r3, r0
 8002708:	4642      	mov	r2, r8
 800270a:	189b      	adds	r3, r3, r2
 800270c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002710:	464b      	mov	r3, r9
 8002712:	460a      	mov	r2, r1
 8002714:	eb42 0303 	adc.w	r3, r2, r3
 8002718:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800271c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	2200      	movs	r2, #0
 8002724:	67bb      	str	r3, [r7, #120]	; 0x78
 8002726:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002728:	f04f 0200 	mov.w	r2, #0
 800272c:	f04f 0300 	mov.w	r3, #0
 8002730:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002734:	4649      	mov	r1, r9
 8002736:	008b      	lsls	r3, r1, #2
 8002738:	4641      	mov	r1, r8
 800273a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800273e:	4641      	mov	r1, r8
 8002740:	008a      	lsls	r2, r1, #2
 8002742:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002746:	f7fe fa2f 	bl	8000ba8 <__aeabi_uldivmod>
 800274a:	4602      	mov	r2, r0
 800274c:	460b      	mov	r3, r1
 800274e:	4611      	mov	r1, r2
 8002750:	4b38      	ldr	r3, [pc, #224]	; (8002834 <UART_SetConfig+0x4e4>)
 8002752:	fba3 2301 	umull	r2, r3, r3, r1
 8002756:	095b      	lsrs	r3, r3, #5
 8002758:	2264      	movs	r2, #100	; 0x64
 800275a:	fb02 f303 	mul.w	r3, r2, r3
 800275e:	1acb      	subs	r3, r1, r3
 8002760:	011b      	lsls	r3, r3, #4
 8002762:	3332      	adds	r3, #50	; 0x32
 8002764:	4a33      	ldr	r2, [pc, #204]	; (8002834 <UART_SetConfig+0x4e4>)
 8002766:	fba2 2303 	umull	r2, r3, r2, r3
 800276a:	095b      	lsrs	r3, r3, #5
 800276c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002770:	441c      	add	r4, r3
 8002772:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002776:	2200      	movs	r2, #0
 8002778:	673b      	str	r3, [r7, #112]	; 0x70
 800277a:	677a      	str	r2, [r7, #116]	; 0x74
 800277c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002780:	4642      	mov	r2, r8
 8002782:	464b      	mov	r3, r9
 8002784:	1891      	adds	r1, r2, r2
 8002786:	60b9      	str	r1, [r7, #8]
 8002788:	415b      	adcs	r3, r3
 800278a:	60fb      	str	r3, [r7, #12]
 800278c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002790:	4641      	mov	r1, r8
 8002792:	1851      	adds	r1, r2, r1
 8002794:	6039      	str	r1, [r7, #0]
 8002796:	4649      	mov	r1, r9
 8002798:	414b      	adcs	r3, r1
 800279a:	607b      	str	r3, [r7, #4]
 800279c:	f04f 0200 	mov.w	r2, #0
 80027a0:	f04f 0300 	mov.w	r3, #0
 80027a4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80027a8:	4659      	mov	r1, fp
 80027aa:	00cb      	lsls	r3, r1, #3
 80027ac:	4651      	mov	r1, sl
 80027ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80027b2:	4651      	mov	r1, sl
 80027b4:	00ca      	lsls	r2, r1, #3
 80027b6:	4610      	mov	r0, r2
 80027b8:	4619      	mov	r1, r3
 80027ba:	4603      	mov	r3, r0
 80027bc:	4642      	mov	r2, r8
 80027be:	189b      	adds	r3, r3, r2
 80027c0:	66bb      	str	r3, [r7, #104]	; 0x68
 80027c2:	464b      	mov	r3, r9
 80027c4:	460a      	mov	r2, r1
 80027c6:	eb42 0303 	adc.w	r3, r2, r3
 80027ca:	66fb      	str	r3, [r7, #108]	; 0x6c
 80027cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	2200      	movs	r2, #0
 80027d4:	663b      	str	r3, [r7, #96]	; 0x60
 80027d6:	667a      	str	r2, [r7, #100]	; 0x64
 80027d8:	f04f 0200 	mov.w	r2, #0
 80027dc:	f04f 0300 	mov.w	r3, #0
 80027e0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80027e4:	4649      	mov	r1, r9
 80027e6:	008b      	lsls	r3, r1, #2
 80027e8:	4641      	mov	r1, r8
 80027ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80027ee:	4641      	mov	r1, r8
 80027f0:	008a      	lsls	r2, r1, #2
 80027f2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80027f6:	f7fe f9d7 	bl	8000ba8 <__aeabi_uldivmod>
 80027fa:	4602      	mov	r2, r0
 80027fc:	460b      	mov	r3, r1
 80027fe:	4b0d      	ldr	r3, [pc, #52]	; (8002834 <UART_SetConfig+0x4e4>)
 8002800:	fba3 1302 	umull	r1, r3, r3, r2
 8002804:	095b      	lsrs	r3, r3, #5
 8002806:	2164      	movs	r1, #100	; 0x64
 8002808:	fb01 f303 	mul.w	r3, r1, r3
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	011b      	lsls	r3, r3, #4
 8002810:	3332      	adds	r3, #50	; 0x32
 8002812:	4a08      	ldr	r2, [pc, #32]	; (8002834 <UART_SetConfig+0x4e4>)
 8002814:	fba2 2303 	umull	r2, r3, r2, r3
 8002818:	095b      	lsrs	r3, r3, #5
 800281a:	f003 020f 	and.w	r2, r3, #15
 800281e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4422      	add	r2, r4
 8002826:	609a      	str	r2, [r3, #8]
}
 8002828:	bf00      	nop
 800282a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800282e:	46bd      	mov	sp, r7
 8002830:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002834:	51eb851f 	.word	0x51eb851f

08002838 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002838:	b480      	push	{r7}
 800283a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800283c:	e7fe      	b.n	800283c <NMI_Handler+0x4>

0800283e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800283e:	b480      	push	{r7}
 8002840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002842:	e7fe      	b.n	8002842 <HardFault_Handler+0x4>

08002844 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002844:	b480      	push	{r7}
 8002846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002848:	e7fe      	b.n	8002848 <MemManage_Handler+0x4>

0800284a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800284a:	b480      	push	{r7}
 800284c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800284e:	e7fe      	b.n	800284e <BusFault_Handler+0x4>

08002850 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002850:	b480      	push	{r7}
 8002852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002854:	e7fe      	b.n	8002854 <UsageFault_Handler+0x4>

08002856 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002856:	b480      	push	{r7}
 8002858:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800285a:	bf00      	nop
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr

08002864 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002864:	b480      	push	{r7}
 8002866:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002868:	bf00      	nop
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr

08002872 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002872:	b480      	push	{r7}
 8002874:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002876:	bf00      	nop
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr

08002880 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002884:	f004 f9ba 	bl	8006bfc <HAL_IncTick>
  SysTick_ISR();
 8002888:	f003 f8ea 	bl	8005a60 <SysTick_ISR>
  //SysTick_ISR_Handler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800288c:	bf00      	nop
 800288e:	bd80      	pop	{r7, pc}

08002890 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8002890:	b480      	push	{r7}
 8002892:	b087      	sub	sp, #28
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028a4:	683a      	ldr	r2, [r7, #0]
 80028a6:	6812      	ldr	r2, [r2, #0]
 80028a8:	f023 0101 	bic.w	r1, r3, #1
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	2b08      	cmp	r3, #8
 80028b8:	d102      	bne.n	80028c0 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80028ba:	2340      	movs	r3, #64	; 0x40
 80028bc:	617b      	str	r3, [r7, #20]
 80028be:	e001      	b.n	80028c4 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 80028c0:	2300      	movs	r3, #0
 80028c2:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 80028d0:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 80028d6:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 80028dc:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 80028e2:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 80028e8:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 80028ee:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 80028f4:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 80028fa:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 8002900:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 8002906:	4313      	orrs	r3, r2
 8002908:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	699b      	ldr	r3, [r3, #24]
 800290e:	693a      	ldr	r2, [r7, #16]
 8002910:	4313      	orrs	r3, r2
 8002912:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002918:	693a      	ldr	r2, [r7, #16]
 800291a:	4313      	orrs	r3, r2
 800291c:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 800291e:	4b10      	ldr	r3, [pc, #64]	; (8002960 <FSMC_NORSRAM_Init+0xd0>)
 8002920:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002928:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8002930:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	43db      	mvns	r3, r3
 8002940:	ea02 0103 	and.w	r1, r2, r3
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	4319      	orrs	r1, r3
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 8002952:	2300      	movs	r3, #0
}
 8002954:	4618      	mov	r0, r3
 8002956:	371c      	adds	r7, #28
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr
 8002960:	0008fb7f 	.word	0x0008fb7f

08002964 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8002964:	b480      	push	{r7}
 8002966:	b085      	sub	sp, #20
 8002968:	af00      	add	r7, sp, #0
 800296a:	60f8      	str	r0, [r7, #12]
 800296c:	60b9      	str	r1, [r7, #8]
 800296e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	1c5a      	adds	r2, r3, #1
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800297a:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	011b      	lsls	r3, r3, #4
 8002988:	431a      	orrs	r2, r3
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	021b      	lsls	r3, r3, #8
 8002990:	431a      	orrs	r2, r3
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	68db      	ldr	r3, [r3, #12]
 8002996:	041b      	lsls	r3, r3, #16
 8002998:	431a      	orrs	r2, r3
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	691b      	ldr	r3, [r3, #16]
 800299e:	3b01      	subs	r3, #1
 80029a0:	051b      	lsls	r3, r3, #20
 80029a2:	431a      	orrs	r2, r3
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	695b      	ldr	r3, [r3, #20]
 80029a8:	3b02      	subs	r3, #2
 80029aa:	061b      	lsls	r3, r3, #24
 80029ac:	431a      	orrs	r2, r3
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	699b      	ldr	r3, [r3, #24]
 80029b2:	4313      	orrs	r3, r2
 80029b4:	687a      	ldr	r2, [r7, #4]
 80029b6:	3201      	adds	r2, #1
 80029b8:	4319      	orrs	r1, r3
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif
  return HAL_OK;
 80029c0:	2300      	movs	r3, #0
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3714      	adds	r7, #20
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr
	...

080029d0 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b085      	sub	sp, #20
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	60f8      	str	r0, [r7, #12]
 80029d8:	60b9      	str	r1, [r7, #8]
 80029da:	607a      	str	r2, [r7, #4]
 80029dc:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80029e4:	d11d      	bne.n	8002a22 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80029ee:	4b13      	ldr	r3, [pc, #76]	; (8002a3c <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 80029f0:	4013      	ands	r3, r2
 80029f2:	68ba      	ldr	r2, [r7, #8]
 80029f4:	6811      	ldr	r1, [r2, #0]
 80029f6:	68ba      	ldr	r2, [r7, #8]
 80029f8:	6852      	ldr	r2, [r2, #4]
 80029fa:	0112      	lsls	r2, r2, #4
 80029fc:	4311      	orrs	r1, r2
 80029fe:	68ba      	ldr	r2, [r7, #8]
 8002a00:	6892      	ldr	r2, [r2, #8]
 8002a02:	0212      	lsls	r2, r2, #8
 8002a04:	4311      	orrs	r1, r2
 8002a06:	68ba      	ldr	r2, [r7, #8]
 8002a08:	6992      	ldr	r2, [r2, #24]
 8002a0a:	4311      	orrs	r1, r2
 8002a0c:	68ba      	ldr	r2, [r7, #8]
 8002a0e:	68d2      	ldr	r2, [r2, #12]
 8002a10:	0412      	lsls	r2, r2, #16
 8002a12:	430a      	orrs	r2, r1
 8002a14:	ea43 0102 	orr.w	r1, r3, r2
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8002a20:	e005      	b.n	8002a2e <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8002a2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8002a2e:	2300      	movs	r3, #0
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3714      	adds	r7, #20
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr
 8002a3c:	cff00000 	.word	0xcff00000

08002a40 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002a40:	b480      	push	{r7}
 8002a42:	af00      	add	r7, sp, #0
  return 1;
 8002a44:	2301      	movs	r3, #1
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr

08002a50 <_kill>:

int _kill(int pid, int sig)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002a5a:	f005 febd 	bl	80087d8 <__errno>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	2216      	movs	r2, #22
 8002a62:	601a      	str	r2, [r3, #0]
  return -1;
 8002a64:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3708      	adds	r7, #8
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}

08002a70 <_exit>:

void _exit (int status)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b082      	sub	sp, #8
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002a78:	f04f 31ff 	mov.w	r1, #4294967295
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	f7ff ffe7 	bl	8002a50 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002a82:	e7fe      	b.n	8002a82 <_exit+0x12>

08002a84 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b086      	sub	sp, #24
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	60f8      	str	r0, [r7, #12]
 8002a8c:	60b9      	str	r1, [r7, #8]
 8002a8e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a90:	2300      	movs	r3, #0
 8002a92:	617b      	str	r3, [r7, #20]
 8002a94:	e00a      	b.n	8002aac <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002a96:	f3af 8000 	nop.w
 8002a9a:	4601      	mov	r1, r0
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	1c5a      	adds	r2, r3, #1
 8002aa0:	60ba      	str	r2, [r7, #8]
 8002aa2:	b2ca      	uxtb	r2, r1
 8002aa4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	3301      	adds	r3, #1
 8002aaa:	617b      	str	r3, [r7, #20]
 8002aac:	697a      	ldr	r2, [r7, #20]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	dbf0      	blt.n	8002a96 <_read+0x12>
  }

  return len;
 8002ab4:	687b      	ldr	r3, [r7, #4]
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3718      	adds	r7, #24
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}

08002abe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002abe:	b580      	push	{r7, lr}
 8002ac0:	b086      	sub	sp, #24
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	60f8      	str	r0, [r7, #12]
 8002ac6:	60b9      	str	r1, [r7, #8]
 8002ac8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002aca:	2300      	movs	r3, #0
 8002acc:	617b      	str	r3, [r7, #20]
 8002ace:	e009      	b.n	8002ae4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	1c5a      	adds	r2, r3, #1
 8002ad4:	60ba      	str	r2, [r7, #8]
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	3301      	adds	r3, #1
 8002ae2:	617b      	str	r3, [r7, #20]
 8002ae4:	697a      	ldr	r2, [r7, #20]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	dbf1      	blt.n	8002ad0 <_write+0x12>
  }
  return len;
 8002aec:	687b      	ldr	r3, [r7, #4]
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3718      	adds	r7, #24
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}

08002af6 <_close>:

int _close(int file)
{
 8002af6:	b480      	push	{r7}
 8002af8:	b083      	sub	sp, #12
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002afe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	370c      	adds	r7, #12
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr

08002b0e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b0e:	b480      	push	{r7}
 8002b10:	b083      	sub	sp, #12
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	6078      	str	r0, [r7, #4]
 8002b16:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b1e:	605a      	str	r2, [r3, #4]
  return 0;
 8002b20:	2300      	movs	r3, #0
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	370c      	adds	r7, #12
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr

08002b2e <_isatty>:

int _isatty(int file)
{
 8002b2e:	b480      	push	{r7}
 8002b30:	b083      	sub	sp, #12
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002b36:	2301      	movs	r3, #1
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	370c      	adds	r7, #12
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr

08002b44 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b085      	sub	sp, #20
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	60f8      	str	r0, [r7, #12]
 8002b4c:	60b9      	str	r1, [r7, #8]
 8002b4e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002b50:	2300      	movs	r3, #0
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3714      	adds	r7, #20
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr
	...

08002b60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b086      	sub	sp, #24
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b68:	4a14      	ldr	r2, [pc, #80]	; (8002bbc <_sbrk+0x5c>)
 8002b6a:	4b15      	ldr	r3, [pc, #84]	; (8002bc0 <_sbrk+0x60>)
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b74:	4b13      	ldr	r3, [pc, #76]	; (8002bc4 <_sbrk+0x64>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d102      	bne.n	8002b82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b7c:	4b11      	ldr	r3, [pc, #68]	; (8002bc4 <_sbrk+0x64>)
 8002b7e:	4a12      	ldr	r2, [pc, #72]	; (8002bc8 <_sbrk+0x68>)
 8002b80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b82:	4b10      	ldr	r3, [pc, #64]	; (8002bc4 <_sbrk+0x64>)
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4413      	add	r3, r2
 8002b8a:	693a      	ldr	r2, [r7, #16]
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d207      	bcs.n	8002ba0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b90:	f005 fe22 	bl	80087d8 <__errno>
 8002b94:	4603      	mov	r3, r0
 8002b96:	220c      	movs	r2, #12
 8002b98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b9a:	f04f 33ff 	mov.w	r3, #4294967295
 8002b9e:	e009      	b.n	8002bb4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ba0:	4b08      	ldr	r3, [pc, #32]	; (8002bc4 <_sbrk+0x64>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ba6:	4b07      	ldr	r3, [pc, #28]	; (8002bc4 <_sbrk+0x64>)
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	4413      	add	r3, r2
 8002bae:	4a05      	ldr	r2, [pc, #20]	; (8002bc4 <_sbrk+0x64>)
 8002bb0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3718      	adds	r7, #24
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	20020000 	.word	0x20020000
 8002bc0:	00000400 	.word	0x00000400
 8002bc4:	20000238 	.word	0x20000238
 8002bc8:	200026e8 	.word	0x200026e8

08002bcc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002bd0:	4b06      	ldr	r3, [pc, #24]	; (8002bec <SystemInit+0x20>)
 8002bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bd6:	4a05      	ldr	r2, [pc, #20]	; (8002bec <SystemInit+0x20>)
 8002bd8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002bdc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002be0:	bf00      	nop
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr
 8002bea:	bf00      	nop
 8002bec:	e000ed00 	.word	0xe000ed00

08002bf0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002bf0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c28 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002bf4:	480d      	ldr	r0, [pc, #52]	; (8002c2c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002bf6:	490e      	ldr	r1, [pc, #56]	; (8002c30 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002bf8:	4a0e      	ldr	r2, [pc, #56]	; (8002c34 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002bfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002bfc:	e002      	b.n	8002c04 <LoopCopyDataInit>

08002bfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002bfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c02:	3304      	adds	r3, #4

08002c04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c08:	d3f9      	bcc.n	8002bfe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c0a:	4a0b      	ldr	r2, [pc, #44]	; (8002c38 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002c0c:	4c0b      	ldr	r4, [pc, #44]	; (8002c3c <LoopFillZerobss+0x26>)
  movs r3, #0
 8002c0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c10:	e001      	b.n	8002c16 <LoopFillZerobss>

08002c12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c14:	3204      	adds	r2, #4

08002c16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c18:	d3fb      	bcc.n	8002c12 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002c1a:	f7ff ffd7 	bl	8002bcc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c1e:	f005 fde1 	bl	80087e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c22:	f7fe fb9d 	bl	8001360 <main>
  bx  lr    
 8002c26:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002c28:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002c2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c30:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002c34:	0802c0fc 	.word	0x0802c0fc
  ldr r2, =_sbss
 8002c38:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002c3c:	200026e4 	.word	0x200026e4

08002c40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c40:	e7fe      	b.n	8002c40 <ADC_IRQHandler>

08002c42 <RA8875_ReadID>:
*********************************************************************************************************
*	Func name: RA8875_ReadID
*********************************************************************************************************
*/
uint16_t RA8875_ReadID(void)
{
 8002c42:	b580      	push	{r7, lr}
 8002c44:	af00      	add	r7, sp, #0
	return RA8875_ReadReg(0x00);
 8002c46:	2000      	movs	r0, #0
 8002c48:	f000 f804 	bl	8002c54 <RA8875_ReadReg>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	b29b      	uxth	r3, r3
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	bd80      	pop	{r7, pc}

08002c54 <RA8875_ReadReg>:
*********************************************************************************************************
*	Func name: RA8875_WriteReg
*********************************************************************************************************
*/
static uint8_t RA8875_ReadReg(uint8_t _ucRegAddr)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b082      	sub	sp, #8
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	71fb      	strb	r3, [r7, #7]
	RA8875_WriteCmd(_ucRegAddr);
 8002c5e:	79fb      	ldrb	r3, [r7, #7]
 8002c60:	4618      	mov	r0, r3
 8002c62:	f001 fe29 	bl	80048b8 <RA8875_WriteCmd>
	return RA8875_ReadData();
 8002c66:	f001 fe39 	bl	80048dc <RA8875_ReadData>
 8002c6a:	4603      	mov	r3, r0
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3708      	adds	r7, #8
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}

08002c74 <RA8875_WriteReg>:
*********************************************************************************************************
*	Func name: RA8875_WriteReg
*********************************************************************************************************
*/
static void RA8875_WriteReg(uint8_t _ucRegAddr, uint8_t _ucRegValue)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b082      	sub	sp, #8
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	460a      	mov	r2, r1
 8002c7e:	71fb      	strb	r3, [r7, #7]
 8002c80:	4613      	mov	r3, r2
 8002c82:	71bb      	strb	r3, [r7, #6]
	s_ucRA8875Busy = 1;
 8002c84:	4b08      	ldr	r3, [pc, #32]	; (8002ca8 <RA8875_WriteReg+0x34>)
 8002c86:	2201      	movs	r2, #1
 8002c88:	701a      	strb	r2, [r3, #0]

	RA8875_WriteCmd(_ucRegAddr);
 8002c8a:	79fb      	ldrb	r3, [r7, #7]
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f001 fe13 	bl	80048b8 <RA8875_WriteCmd>
	RA8875_WriteData(_ucRegValue);
 8002c92:	79bb      	ldrb	r3, [r7, #6]
 8002c94:	4618      	mov	r0, r3
 8002c96:	f001 fe30 	bl	80048fa <RA8875_WriteData>

	s_ucRA8875Busy = 0;
 8002c9a:	4b03      	ldr	r3, [pc, #12]	; (8002ca8 <RA8875_WriteReg+0x34>)
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	701a      	strb	r2, [r3, #0]
}
 8002ca0:	bf00      	nop
 8002ca2:	3708      	adds	r7, #8
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	20000240 	.word	0x20000240

08002cac <RA8875_InitHard>:
*********************************************************************************************************
*	Func name: RA8875_InitHard
*********************************************************************************************************
*/
void RA8875_InitHard(void)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b082      	sub	sp, #8
 8002cb0:	af00      	add	r7, sp, #0
#endif

	/* ¶ÁÈ¡ RA8875 Ð¾Æ¬¶îGPIXÒý½ÅµÄµçÆ½×´Ì¬£»1±íÊ¾4.3´çÆÁ£»0±íÊ¾7´çÆÁ
	¡¾±¸×¢¡¿ÕâÊÇ°²¸»À³µç×ÓÎªÁË±ãÓÚÍ³Ò»²âÊÔÀý³Ì£¬ÔÚLCDÄ£¿éÉÏ×öµÄÓ²¼þ±êÊ¶¡£ÔÚ×ö²úÆ·Ê±£¬²»±Ø×Ô¶¯Ê¶±ð¡£
	*/
	ucGPIX = RA8875_ReadReg(0xC7);
 8002cb2:	20c7      	movs	r0, #199	; 0xc7
 8002cb4:	f7ff ffce 	bl	8002c54 <RA8875_ReadReg>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	71fb      	strb	r3, [r7, #7]

	if (ucGPIX == 1)	/* 	GPIX = 1 ±íÊ¾ 4.3 ´çÆÁ 480x272 */
 8002cbc:	79fb      	ldrb	r3, [r7, #7]
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d156      	bne.n	8002d70 <RA8875_InitHard+0xc4>
	{
		/* ³õÊ¼»¯PLL.  ¾§ÕñÆµÂÊÎª25M */
		RA8875_WriteCmd(0x88);
 8002cc2:	2088      	movs	r0, #136	; 0x88
 8002cc4:	f001 fdf8 	bl	80048b8 <RA8875_WriteCmd>
		RA8875_Delaly1us();		/* ÑÓ³Ù1us */
 8002cc8:	f001 fe38 	bl	800493c <RA8875_Delaly1us>
		RA8875_WriteData(10);	/* PLLDIVM [7] = 0 ;  PLLDIVN [4:0] = 10 */
 8002ccc:	200a      	movs	r0, #10
 8002cce:	f001 fe14 	bl	80048fa <RA8875_WriteData>

	    RA8875_Delaly1ms();
 8002cd2:	f001 fe46 	bl	8004962 <RA8875_Delaly1ms>

		RA8875_WriteCmd(0x89);
 8002cd6:	2089      	movs	r0, #137	; 0x89
 8002cd8:	f001 fdee 	bl	80048b8 <RA8875_WriteCmd>
		RA8875_Delaly1us();		/* ÑÓ³Ù1us */
 8002cdc:	f001 fe2e 	bl	800493c <RA8875_Delaly1us>
		RA8875_WriteData(2);		/* PLLDIVK[2:0] = 2, ³ýÒÔ4 */
 8002ce0:	2002      	movs	r0, #2
 8002ce2:	f001 fe0a 	bl	80048fa <RA8875_WriteData>
		          = 25M * (10 + 1) / ((0 + 1) * (2 ^ 2))
				  = 68.75MHz
		*/

		/* REG[88h]»òREG[89h]±»Éè¶¨ºó£¬Îª±£Ö¤PLL Êä³öÎÈ¶¨£¬ÐëµÈ´ýÒ»¶Î¡¸ËøÆµÊ±¼ä¡¹(< 100us)¡£*/
	    RA8875_Delaly1ms();
 8002ce6:	f001 fe3c 	bl	8004962 <RA8875_Delaly1ms>
				1xb : 16-Î»MCU ½Ó¿Ú¡£ ¡¾Ñ¡Õâ¸ö¡¿
		*/
		#ifdef IF_SPI_EN
			RA8875_WriteReg(0x10, (1 <<3 ) | (0 << 1));	/* SPI½Ó¿ÚÊ±£¬ÅäÖÃ8Î»£¬65KÉ« */
		#else
			RA8875_WriteReg(0x10, (1 <<3 ) | (1 << 1));	/* ÅäÖÃ16Î»MCU²¢¿Ú£¬65KÉ« */
 8002cea:	210a      	movs	r1, #10
 8002cec:	2010      	movs	r0, #16
 8002cee:	f7ff ffc1 	bl	8002c74 <RA8875_WriteReg>
				00b: PCLK ÆµÂÊÖÜÆÚ= ÏµÍ³ÆµÂÊÖÜÆÚ¡£
				01b: PCLK ÆµÂÊÖÜÆÚ= 2 ±¶µÄÏµÍ³ÆµÂÊÖÜÆÚ¡£
				10b: PCLK ÆµÂÊÖÜÆÚ= 4 ±¶µÄÏµÍ³ÆµÂÊÖÜÆÚ¡£
				11b: PCLK ÆµÂÊÖÜÆÚ= 8 ±¶µÄÏµÍ³ÆµÂÊÖÜÆÚ¡£
		*/
	    RA8875_WriteReg(0x04, 0x82);    /* ÉèÖÃPCLK·´Ïà */
 8002cf2:	2182      	movs	r1, #130	; 0x82
 8002cf4:	2004      	movs	r0, #4
 8002cf6:	f7ff ffbd 	bl	8002c74 <RA8875_WriteReg>
	    RA8875_Delaly1ms();
 8002cfa:	f001 fe32 	bl	8004962 <RA8875_Delaly1ms>

	    //Horizontal set
	    //HDWR//Horizontal Display Width Setting Bit[6:0]
	 	//Horizontal display width(pixels) = (HDWR + 1)*8
	    RA8875_WriteReg(0x14, 0x3B);
 8002cfe:	213b      	movs	r1, #59	; 0x3b
 8002d00:	2014      	movs	r0, #20
 8002d02:	f7ff ffb7 	bl	8002c74 <RA8875_WriteReg>
	    RA8875_WriteReg(0x15, 0x00);
 8002d06:	2100      	movs	r1, #0
 8002d08:	2015      	movs	r0, #21
 8002d0a:	f7ff ffb3 	bl	8002c74 <RA8875_WriteReg>

	    //HNDR//Horizontal Non-Display Period Bit[4:0]
	    //Horizontal Non-Display Period (pixels) = (HNDR + 1)*8
		RA8875_WriteReg(0x16, 0x01);
 8002d0e:	2101      	movs	r1, #1
 8002d10:	2016      	movs	r0, #22
 8002d12:	f7ff ffaf 	bl	8002c74 <RA8875_WriteReg>

	    //HSTR//HSYNC Start Position[4:0]
	    //HSYNC Start Position(PCLK) = (HSTR + 1)*8
		RA8875_WriteReg(0x17, 0x00);
 8002d16:	2100      	movs	r1, #0
 8002d18:	2017      	movs	r0, #23
 8002d1a:	f7ff ffab 	bl	8002c74 <RA8875_WriteReg>

	    //HPWR//HSYNC Polarity ,The period width of HSYNC.
	    //HSYNC Width [4:0]   HSYNC Pulse width(PCLK) = (HPWR + 1)*8
		RA8875_WriteReg(0x18, 0x05);
 8002d1e:	2105      	movs	r1, #5
 8002d20:	2018      	movs	r0, #24
 8002d22:	f7ff ffa7 	bl	8002c74 <RA8875_WriteReg>

	    //Vertical set
	    //VDHR0 //Vertical Display Height Bit [7:0]
	    //Vertical pixels = VDHR + 1
		RA8875_WriteReg(0x19, 0x0F);
 8002d26:	210f      	movs	r1, #15
 8002d28:	2019      	movs	r0, #25
 8002d2a:	f7ff ffa3 	bl	8002c74 <RA8875_WriteReg>

	    //VDHR1 //Vertical Display Height Bit [8]
	    //Vertical pixels = VDHR + 1
		RA8875_WriteReg(0x1A, 0x01);
 8002d2e:	2101      	movs	r1, #1
 8002d30:	201a      	movs	r0, #26
 8002d32:	f7ff ff9f 	bl	8002c74 <RA8875_WriteReg>

	    //VNDR0 //Vertical Non-Display Period Bit [7:0]
	    //Vertical Non-Display area = (VNDR + 1)
		RA8875_WriteReg(0x1B, 0x02);
 8002d36:	2102      	movs	r1, #2
 8002d38:	201b      	movs	r0, #27
 8002d3a:	f7ff ff9b 	bl	8002c74 <RA8875_WriteReg>

	    //VNDR1 //Vertical Non-Display Period Bit [8]
	    //Vertical Non-Display area = (VNDR + 1)
		RA8875_WriteReg(0x1C, 0x00);
 8002d3e:	2100      	movs	r1, #0
 8002d40:	201c      	movs	r0, #28
 8002d42:	f7ff ff97 	bl	8002c74 <RA8875_WriteReg>

	    //VSTR0 //VSYNC Start Position[7:0]
	    //VSYNC Start Position(PCLK) = (VSTR + 1)
		RA8875_WriteReg(0x1D, 0x07);
 8002d46:	2107      	movs	r1, #7
 8002d48:	201d      	movs	r0, #29
 8002d4a:	f7ff ff93 	bl	8002c74 <RA8875_WriteReg>

	    //VSTR1 //VSYNC Start Position[8]
	    //VSYNC Start Position(PCLK) = (VSTR + 1)
		RA8875_WriteReg(0x1E, 0x00);
 8002d4e:	2100      	movs	r1, #0
 8002d50:	201e      	movs	r0, #30
 8002d52:	f7ff ff8f 	bl	8002c74 <RA8875_WriteReg>

	    //VPWR //VSYNC Polarity ,VSYNC Pulse Width[6:0]
	    //VSYNC Pulse Width(PCLK) = (VPWR + 1)
	    RA8875_WriteReg(0x1F, 0x09);
 8002d56:	2109      	movs	r1, #9
 8002d58:	201f      	movs	r0, #31
 8002d5a:	f7ff ff8b 	bl	8002c74 <RA8875_WriteReg>


	    g_LcdHeight = LCD_43_HEIGHT;
 8002d5e:	4b3d      	ldr	r3, [pc, #244]	; (8002e54 <RA8875_InitHard+0x1a8>)
 8002d60:	f44f 7288 	mov.w	r2, #272	; 0x110
 8002d64:	801a      	strh	r2, [r3, #0]
		g_LcdWidth = LCD_43_WIDTH;
 8002d66:	4b3c      	ldr	r3, [pc, #240]	; (8002e58 <RA8875_InitHard+0x1ac>)
 8002d68:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002d6c:	801a      	strh	r2, [r3, #0]
 8002d6e:	e055      	b.n	8002e1c <RA8875_InitHard+0x170>
	}
	else	/* GPIX = 0 ±íÊ¾7´çÆÁ(800x480) */
	{
	    g_LcdHeight = LCD_70_HEIGHT;
 8002d70:	4b38      	ldr	r3, [pc, #224]	; (8002e54 <RA8875_InitHard+0x1a8>)
 8002d72:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002d76:	801a      	strh	r2, [r3, #0]
		g_LcdWidth = LCD_70_WIDTH;
 8002d78:	4b37      	ldr	r3, [pc, #220]	; (8002e58 <RA8875_InitHard+0x1ac>)
 8002d7a:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002d7e:	801a      	strh	r2, [r3, #0]

		/* ³õÊ¼»¯PLL.  ¾§ÕñÆµÂÊÎª25M */
		RA8875_WriteCmd(0x88);
 8002d80:	2088      	movs	r0, #136	; 0x88
 8002d82:	f001 fd99 	bl	80048b8 <RA8875_WriteCmd>
		RA8875_Delaly1us();		/* ÑÓ³Ù1us */
 8002d86:	f001 fdd9 	bl	800493c <RA8875_Delaly1us>
		RA8875_WriteData(12);	/* PLLDIVM [7] = 0 ;  PLLDIVN [4:0] = 10 */
 8002d8a:	200c      	movs	r0, #12
 8002d8c:	f001 fdb5 	bl	80048fa <RA8875_WriteData>

	    RA8875_Delaly1ms();
 8002d90:	f001 fde7 	bl	8004962 <RA8875_Delaly1ms>

		RA8875_WriteCmd(0x89);
 8002d94:	2089      	movs	r0, #137	; 0x89
 8002d96:	f001 fd8f 	bl	80048b8 <RA8875_WriteCmd>
		RA8875_Delaly1us();		/* ÑÓ³Ù1us */
 8002d9a:	f001 fdcf 	bl	800493c <RA8875_Delaly1us>
		RA8875_WriteData(2);	/* PLLDIVK[2:0] = 2, ³ýÒÔ4 */
 8002d9e:	2002      	movs	r0, #2
 8002da0:	f001 fdab 	bl	80048fa <RA8875_WriteData>
		          = 25M * (12 + 1) / ((0 + 1) * (2 ^ 2))
				  = 81.25MHz
		*/

		/* REG[88h]»òREG[89h]±»Éè¶¨ºó£¬Îª±£Ö¤PLL Êä³öÎÈ¶¨£¬ÐëµÈ´ýÒ»¶Î¡¸ËøÆµÊ±¼ä¡¹(< 100us)¡£*/
	    RA8875_Delaly1ms();
 8002da4:	f001 fddd 	bl	8004962 <RA8875_Delaly1ms>
				1xb : 16-Î»MCU ½Ó¿Ú¡£ ¡¾Ñ¡Õâ¸ö¡¿
		*/
		#ifdef IF_SPI_EN
			RA8875_WriteReg(0x10, (1 <<3 ) | (0 << 1));	/* SPI½Ó¿ÚÊ±£¬ÅäÖÃ8Î»£¬65KÉ« */
		#else
			RA8875_WriteReg(0x10, (1 <<3 ) | (1 << 1));	/* ÅäÖÃ16Î»MCU²¢¿Ú£¬65KÉ« */
 8002da8:	210a      	movs	r1, #10
 8002daa:	2010      	movs	r0, #16
 8002dac:	f7ff ff62 	bl	8002c74 <RA8875_WriteReg>
				00b: PCLK ÆµÂÊÖÜÆÚ= ÏµÍ³ÆµÂÊÖÜÆÚ¡£
				01b: PCLK ÆµÂÊÖÜÆÚ= 2 ±¶µÄÏµÍ³ÆµÂÊÖÜÆÚ¡£
				10b: PCLK ÆµÂÊÖÜÆÚ= 4 ±¶µÄÏµÍ³ÆµÂÊÖÜÆÚ¡£
				11b: PCLK ÆµÂÊÖÜÆÚ= 8 ±¶µÄÏµÍ³ÆµÂÊÖÜÆÚ¡£
		*/
	    RA8875_WriteReg(0x04, 0x81);
 8002db0:	2181      	movs	r1, #129	; 0x81
 8002db2:	2004      	movs	r0, #4
 8002db4:	f7ff ff5e 	bl	8002c74 <RA8875_WriteReg>
	    RA8875_Delaly1ms();
 8002db8:	f001 fdd3 	bl	8004962 <RA8875_Delaly1ms>

	#if 1
		/* OTD9960 & OTA7001 ÉèÖÃ */
		RA8875_WriteReg(0x14, 0x63);
 8002dbc:	2163      	movs	r1, #99	; 0x63
 8002dbe:	2014      	movs	r0, #20
 8002dc0:	f7ff ff58 	bl	8002c74 <RA8875_WriteReg>
		RA8875_WriteReg(0x15, 0x00);
 8002dc4:	2100      	movs	r1, #0
 8002dc6:	2015      	movs	r0, #21
 8002dc8:	f7ff ff54 	bl	8002c74 <RA8875_WriteReg>
		RA8875_WriteReg(0x16, 0x03);
 8002dcc:	2103      	movs	r1, #3
 8002dce:	2016      	movs	r0, #22
 8002dd0:	f7ff ff50 	bl	8002c74 <RA8875_WriteReg>
		RA8875_WriteReg(0x17, 0x03);
 8002dd4:	2103      	movs	r1, #3
 8002dd6:	2017      	movs	r0, #23
 8002dd8:	f7ff ff4c 	bl	8002c74 <RA8875_WriteReg>
		RA8875_WriteReg(0x18, 0x0B);
 8002ddc:	210b      	movs	r1, #11
 8002dde:	2018      	movs	r0, #24
 8002de0:	f7ff ff48 	bl	8002c74 <RA8875_WriteReg>
		RA8875_WriteReg(0x19, 0xDF);
 8002de4:	21df      	movs	r1, #223	; 0xdf
 8002de6:	2019      	movs	r0, #25
 8002de8:	f7ff ff44 	bl	8002c74 <RA8875_WriteReg>
		RA8875_WriteReg(0x1A, 0x01);
 8002dec:	2101      	movs	r1, #1
 8002dee:	201a      	movs	r0, #26
 8002df0:	f7ff ff40 	bl	8002c74 <RA8875_WriteReg>
		RA8875_WriteReg(0x1B, 0x1F);
 8002df4:	211f      	movs	r1, #31
 8002df6:	201b      	movs	r0, #27
 8002df8:	f7ff ff3c 	bl	8002c74 <RA8875_WriteReg>
		RA8875_WriteReg(0x1C, 0x00);
 8002dfc:	2100      	movs	r1, #0
 8002dfe:	201c      	movs	r0, #28
 8002e00:	f7ff ff38 	bl	8002c74 <RA8875_WriteReg>
		RA8875_WriteReg(0x1D, 0x16);
 8002e04:	2116      	movs	r1, #22
 8002e06:	201d      	movs	r0, #29
 8002e08:	f7ff ff34 	bl	8002c74 <RA8875_WriteReg>
		RA8875_WriteReg(0x1E, 0x00);
 8002e0c:	2100      	movs	r1, #0
 8002e0e:	201e      	movs	r0, #30
 8002e10:	f7ff ff30 	bl	8002c74 <RA8875_WriteReg>
		RA8875_WriteReg(0x1F, 0x01);
 8002e14:	2101      	movs	r1, #1
 8002e16:	201f      	movs	r0, #31
 8002e18:	f7ff ff2c 	bl	8002c74 <RA8875_WriteReg>
	    RA8875_WriteReg(0x1F, 0x01);
	#endif
	}

	/* ÉèÖÃTFTÃæ°åµÄ DISP  Òý½ÅÎª¸ß£¬Ê¹ÄÜÃæ°å. °²¸»À³TFTÄ£¿éµÄDISPÒý½ÅÁ¬½Óµ½RA8875Ð¾Æ¬µÄGP0X½Å */
	RA8875_WriteReg(0xC7, 0x01);	/* DISP = 1 */
 8002e1c:	2101      	movs	r1, #1
 8002e1e:	20c7      	movs	r0, #199	; 0xc7
 8002e20:	f7ff ff28 	bl	8002c74 <RA8875_WriteReg>

	/* LCD ÏÔÊ¾/¹Ø±ÕÑ¶ºÅ (LCD Display on) */
	RA8875_WriteReg(0x01, 0x80);
 8002e24:	2180      	movs	r1, #128	; 0x80
 8002e26:	2001      	movs	r0, #1
 8002e28:	f7ff ff24 	bl	8002c74 <RA8875_WriteReg>

		Bit 0 ÄÚ´æ¶ÁÈ¡¹â±ê×Ô¶¯Ôö¼Ó¹¦ÄÜÉè¶¨
			0 : µ±ÄÚ´æ¶ÁÈ¡Ê±¹â±êÎ»ÖÃ×Ô¶¯¼ÓÒ»¡£
			1 : µ±ÄÚ´æ¶ÁÈ¡Ê±¹â±êÎ»ÖÃ²»»á×Ô¶¯¼ÓÒ»¡£
	*/
	RA8875_WriteReg(0x40, 0x00);	/* Ñ¡Ôñ»æÍ¼Ä£Ê½ */
 8002e2c:	2100      	movs	r1, #0
 8002e2e:	2040      	movs	r0, #64	; 0x40
 8002e30:	f7ff ff20 	bl	8002c74 <RA8875_WriteReg>


	/* 	REG[41h] Memory Write Control Register1 (MWCR1)
		Ð´ÈëÄ¿µÄÎ»ÖÃ£¬Ñ¡ÔñÍ¼²ã1
	*/
	RA8875_WriteReg(0x41, 0x00);	/* Ñ¡Ôñ»æÍ¼Ä£Ê½, Ä¿µÄÎªCGRAM */
 8002e34:	2100      	movs	r1, #0
 8002e36:	2041      	movs	r0, #65	; 0x41
 8002e38:	f7ff ff1c 	bl	8002c74 <RA8875_WriteReg>

	RA8875_SetDispWin(0, 0, g_LcdHeight, g_LcdWidth);
 8002e3c:	4b05      	ldr	r3, [pc, #20]	; (8002e54 <RA8875_InitHard+0x1a8>)
 8002e3e:	881a      	ldrh	r2, [r3, #0]
 8002e40:	4b05      	ldr	r3, [pc, #20]	; (8002e58 <RA8875_InitHard+0x1ac>)
 8002e42:	881b      	ldrh	r3, [r3, #0]
 8002e44:	2100      	movs	r1, #0
 8002e46:	2000      	movs	r0, #0
 8002e48:	f000 f808 	bl	8002e5c <RA8875_SetDispWin>

#ifdef IF_SPI_EN
	RA8875_HighSpeedSPI();		/* ÅäÖÃÍê±Ïºó£¬ÇÐ»»SPIµ½¸ßËÙÄ£Ê½ */
#endif
}
 8002e4c:	bf00      	nop
 8002e4e:	3708      	adds	r7, #8
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	2000000a 	.word	0x2000000a
 8002e58:	2000000c 	.word	0x2000000c

08002e5c <RA8875_SetDispWin>:
*********************************************************************************************************
*	Func name: RA8875_SetDispWin
*********************************************************************************************************
*/
void RA8875_SetDispWin(uint16_t _usX, uint16_t _usY, uint16_t _usHeight, uint16_t _usWidth)
{
 8002e5c:	b590      	push	{r4, r7, lr}
 8002e5e:	b085      	sub	sp, #20
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	4604      	mov	r4, r0
 8002e64:	4608      	mov	r0, r1
 8002e66:	4611      	mov	r1, r2
 8002e68:	461a      	mov	r2, r3
 8002e6a:	4623      	mov	r3, r4
 8002e6c:	80fb      	strh	r3, [r7, #6]
 8002e6e:	4603      	mov	r3, r0
 8002e70:	80bb      	strh	r3, [r7, #4]
 8002e72:	460b      	mov	r3, r1
 8002e74:	807b      	strh	r3, [r7, #2]
 8002e76:	4613      	mov	r3, r2
 8002e78:	803b      	strh	r3, [r7, #0]
		×óÉÏ½ÇÊÇ×ø±êÁãµã, É¨Ãè·½Ïò£¬ÏÈ´Ó×óµ½ÓÒ£¬ÔÙ´ÓÉÏµ½ÏÂ¡£

		Èç¹ûÐèÒª×öÊúÆÁ·½Ê½£¬ÄãÐèÒª½øÐÐÎïÀí×ø±êºÍÂß¼­×ø±êµÄ×ª»»
	*/

	RA8875_WriteReg(0x30, _usX);
 8002e7a:	88fb      	ldrh	r3, [r7, #6]
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	4619      	mov	r1, r3
 8002e80:	2030      	movs	r0, #48	; 0x30
 8002e82:	f7ff fef7 	bl	8002c74 <RA8875_WriteReg>
    RA8875_WriteReg(0x31, _usX >> 8);
 8002e86:	88fb      	ldrh	r3, [r7, #6]
 8002e88:	0a1b      	lsrs	r3, r3, #8
 8002e8a:	b29b      	uxth	r3, r3
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	4619      	mov	r1, r3
 8002e90:	2031      	movs	r0, #49	; 0x31
 8002e92:	f7ff feef 	bl	8002c74 <RA8875_WriteReg>

	RA8875_WriteReg(0x32, _usY);
 8002e96:	88bb      	ldrh	r3, [r7, #4]
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	4619      	mov	r1, r3
 8002e9c:	2032      	movs	r0, #50	; 0x32
 8002e9e:	f7ff fee9 	bl	8002c74 <RA8875_WriteReg>
    RA8875_WriteReg(0x33, _usY >> 8);
 8002ea2:	88bb      	ldrh	r3, [r7, #4]
 8002ea4:	0a1b      	lsrs	r3, r3, #8
 8002ea6:	b29b      	uxth	r3, r3
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	4619      	mov	r1, r3
 8002eac:	2033      	movs	r0, #51	; 0x33
 8002eae:	f7ff fee1 	bl	8002c74 <RA8875_WriteReg>

	usTemp = _usWidth + _usX - 1;
 8002eb2:	883a      	ldrh	r2, [r7, #0]
 8002eb4:	88fb      	ldrh	r3, [r7, #6]
 8002eb6:	4413      	add	r3, r2
 8002eb8:	b29b      	uxth	r3, r3
 8002eba:	3b01      	subs	r3, #1
 8002ebc:	81fb      	strh	r3, [r7, #14]
	RA8875_WriteReg(0x34, usTemp);
 8002ebe:	89fb      	ldrh	r3, [r7, #14]
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	4619      	mov	r1, r3
 8002ec4:	2034      	movs	r0, #52	; 0x34
 8002ec6:	f7ff fed5 	bl	8002c74 <RA8875_WriteReg>
    RA8875_WriteReg(0x35, usTemp >> 8);
 8002eca:	89fb      	ldrh	r3, [r7, #14]
 8002ecc:	0a1b      	lsrs	r3, r3, #8
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	2035      	movs	r0, #53	; 0x35
 8002ed6:	f7ff fecd 	bl	8002c74 <RA8875_WriteReg>

	usTemp = _usHeight + _usY - 1;
 8002eda:	887a      	ldrh	r2, [r7, #2]
 8002edc:	88bb      	ldrh	r3, [r7, #4]
 8002ede:	4413      	add	r3, r2
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	3b01      	subs	r3, #1
 8002ee4:	81fb      	strh	r3, [r7, #14]
	RA8875_WriteReg(0x36, usTemp);
 8002ee6:	89fb      	ldrh	r3, [r7, #14]
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	4619      	mov	r1, r3
 8002eec:	2036      	movs	r0, #54	; 0x36
 8002eee:	f7ff fec1 	bl	8002c74 <RA8875_WriteReg>
    RA8875_WriteReg(0x37, usTemp >> 8);
 8002ef2:	89fb      	ldrh	r3, [r7, #14]
 8002ef4:	0a1b      	lsrs	r3, r3, #8
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	4619      	mov	r1, r3
 8002efc:	2037      	movs	r0, #55	; 0x37
 8002efe:	f7ff feb9 	bl	8002c74 <RA8875_WriteReg>

	RA8875_SetCursor(_usX, _usY);
 8002f02:	88ba      	ldrh	r2, [r7, #4]
 8002f04:	88fb      	ldrh	r3, [r7, #6]
 8002f06:	4611      	mov	r1, r2
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f000 f819 	bl	8002f40 <RA8875_SetCursor>

	/* ±£´æµ±Ç°´°¿ÚÐÅÏ¢£¬Ìá¸ßÒÔºóµ¥É«Ìî³ä²Ù×÷µÄÐ§ÂÊ.
	ÁíÍâÒ»ÖÖ×ö·¨ÊÇÍ¨¹ý¶ÁÈ¡0x30-0x37¼Ä´æÆ÷»ñµÃµ±Ç°´°¿Ú£¬²»¹ýÐ§ÂÊ½ÏµÍ */
	s_WinX = _usX;
 8002f0e:	4a08      	ldr	r2, [pc, #32]	; (8002f30 <RA8875_SetDispWin+0xd4>)
 8002f10:	88fb      	ldrh	r3, [r7, #6]
 8002f12:	8013      	strh	r3, [r2, #0]
	s_WinY = _usY;
 8002f14:	4a07      	ldr	r2, [pc, #28]	; (8002f34 <RA8875_SetDispWin+0xd8>)
 8002f16:	88bb      	ldrh	r3, [r7, #4]
 8002f18:	8013      	strh	r3, [r2, #0]
	s_WinHeight = _usHeight;
 8002f1a:	4a07      	ldr	r2, [pc, #28]	; (8002f38 <RA8875_SetDispWin+0xdc>)
 8002f1c:	887b      	ldrh	r3, [r7, #2]
 8002f1e:	8013      	strh	r3, [r2, #0]
	s_WinWidth = _usWidth;
 8002f20:	4a06      	ldr	r2, [pc, #24]	; (8002f3c <RA8875_SetDispWin+0xe0>)
 8002f22:	883b      	ldrh	r3, [r7, #0]
 8002f24:	8013      	strh	r3, [r2, #0]
}
 8002f26:	bf00      	nop
 8002f28:	3714      	adds	r7, #20
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd90      	pop	{r4, r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	20000242 	.word	0x20000242
 8002f34:	20000244 	.word	0x20000244
 8002f38:	20000004 	.word	0x20000004
 8002f3c:	20000006 	.word	0x20000006

08002f40 <RA8875_SetCursor>:
*********************************************************************************************************
*	Funa name: RA8875_SetCursor
*********************************************************************************************************
*/
static void RA8875_SetCursor(uint16_t _usX, uint16_t _usY)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b082      	sub	sp, #8
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	4603      	mov	r3, r0
 8002f48:	460a      	mov	r2, r1
 8002f4a:	80fb      	strh	r3, [r7, #6]
 8002f4c:	4613      	mov	r3, r2
 8002f4e:	80bb      	strh	r3, [r7, #4]
	/* ÉèÖÃÄÚ´æÐ´¹â±êµÄ×ø±ê ¡¾×¢Òâ0x80-83 ÊÇ¹â±êÍ¼ÐÎµÄ×ø±ê¡¿ */
	RA8875_WriteReg(0x46, _usX);
 8002f50:	88fb      	ldrh	r3, [r7, #6]
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	4619      	mov	r1, r3
 8002f56:	2046      	movs	r0, #70	; 0x46
 8002f58:	f7ff fe8c 	bl	8002c74 <RA8875_WriteReg>
	RA8875_WriteReg(0x47, _usX >> 8);
 8002f5c:	88fb      	ldrh	r3, [r7, #6]
 8002f5e:	0a1b      	lsrs	r3, r3, #8
 8002f60:	b29b      	uxth	r3, r3
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	4619      	mov	r1, r3
 8002f66:	2047      	movs	r0, #71	; 0x47
 8002f68:	f7ff fe84 	bl	8002c74 <RA8875_WriteReg>
	RA8875_WriteReg(0x48, _usY);
 8002f6c:	88bb      	ldrh	r3, [r7, #4]
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	4619      	mov	r1, r3
 8002f72:	2048      	movs	r0, #72	; 0x48
 8002f74:	f7ff fe7e 	bl	8002c74 <RA8875_WriteReg>
	RA8875_WriteReg(0x49, _usY >> 8);
 8002f78:	88bb      	ldrh	r3, [r7, #4]
 8002f7a:	0a1b      	lsrs	r3, r3, #8
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	4619      	mov	r1, r3
 8002f82:	2049      	movs	r0, #73	; 0x49
 8002f84:	f7ff fe76 	bl	8002c74 <RA8875_WriteReg>
}
 8002f88:	bf00      	nop
 8002f8a:	3708      	adds	r7, #8
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}

08002f90 <RA8875_ClrScr>:
*********************************************************************************************************
*	Func name: RA8875_ClrScr
*********************************************************************************************************
*/
void RA8875_ClrScr(uint16_t _usColor)
{
 8002f90:	b590      	push	{r4, r7, lr}
 8002f92:	b085      	sub	sp, #20
 8002f94:	af02      	add	r7, sp, #8
 8002f96:	4603      	mov	r3, r0
 8002f98:	80fb      	strh	r3, [r7, #6]
	BTE_SetTarBlock(s_WinX, s_WinY, s_WinHeight, s_WinWidth, 0);	/* ÉèÖÃBTEÎ»ÖÃºÍ¿í¶È¸ß¶ÈÒÔ¼°Ä¿±êÍ¼²ã£¨0»ò1£© */
 8002f9a:	4b0d      	ldr	r3, [pc, #52]	; (8002fd0 <RA8875_ClrScr+0x40>)
 8002f9c:	8818      	ldrh	r0, [r3, #0]
 8002f9e:	4b0d      	ldr	r3, [pc, #52]	; (8002fd4 <RA8875_ClrScr+0x44>)
 8002fa0:	8819      	ldrh	r1, [r3, #0]
 8002fa2:	4b0d      	ldr	r3, [pc, #52]	; (8002fd8 <RA8875_ClrScr+0x48>)
 8002fa4:	881a      	ldrh	r2, [r3, #0]
 8002fa6:	4b0d      	ldr	r3, [pc, #52]	; (8002fdc <RA8875_ClrScr+0x4c>)
 8002fa8:	881b      	ldrh	r3, [r3, #0]
 8002faa:	2400      	movs	r4, #0
 8002fac:	9400      	str	r4, [sp, #0]
 8002fae:	f000 f857 	bl	8003060 <BTE_SetTarBlock>
	BTE_SetOperateCode(0x0C);		/* Éè¶¨BTE ²Ù×÷ÂëºÍ¹âÕ¤ÔËËãÂë  REG[51h] Bit[3:0] = 0Ch */
 8002fb2:	200c      	movs	r0, #12
 8002fb4:	f000 f8ae 	bl	8003114 <BTE_SetOperateCode>
	RA8875_SetFrontColor(_usColor);	/* ÉèÖÃBTEÇ°¾°É« */
 8002fb8:	88fb      	ldrh	r3, [r7, #6]
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f000 f8b8 	bl	8003130 <RA8875_SetFrontColor>
	BTE_Start();					/* ¿ªÆôBTE ¹¦ÄÜ */
 8002fc0:	f000 f93a 	bl	8003238 <BTE_Start>
	BTE_Wait();
 8002fc4:	f000 f948 	bl	8003258 <BTE_Wait>
}
 8002fc8:	bf00      	nop
 8002fca:	370c      	adds	r7, #12
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd90      	pop	{r4, r7, pc}
 8002fd0:	20000242 	.word	0x20000242
 8002fd4:	20000244 	.word	0x20000244
 8002fd8:	20000004 	.word	0x20000004
 8002fdc:	20000006 	.word	0x20000006

08002fe0 <RA8875_PutPixel>:
*********************************************************************************************************
*	Func name: RA8875_PutPixel
*********************************************************************************************************
*/
void RA8875_PutPixel(uint16_t _usX, uint16_t _usY, uint16_t _usColor)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b082      	sub	sp, #8
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	80fb      	strh	r3, [r7, #6]
 8002fea:	460b      	mov	r3, r1
 8002fec:	80bb      	strh	r3, [r7, #4]
 8002fee:	4613      	mov	r3, r2
 8002ff0:	807b      	strh	r3, [r7, #2]
	s_ucRA8875Busy = 1;
 8002ff2:	4b1a      	ldr	r3, [pc, #104]	; (800305c <RA8875_PutPixel+0x7c>)
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	701a      	strb	r2, [r3, #0]

	RA8875_WriteCmd(0x46); RA8875_WriteData(_usX);
 8002ff8:	2046      	movs	r0, #70	; 0x46
 8002ffa:	f001 fc5d 	bl	80048b8 <RA8875_WriteCmd>
 8002ffe:	88fb      	ldrh	r3, [r7, #6]
 8003000:	b2db      	uxtb	r3, r3
 8003002:	4618      	mov	r0, r3
 8003004:	f001 fc79 	bl	80048fa <RA8875_WriteData>
	RA8875_WriteCmd(0x47); RA8875_WriteData(_usX >> 8);
 8003008:	2047      	movs	r0, #71	; 0x47
 800300a:	f001 fc55 	bl	80048b8 <RA8875_WriteCmd>
 800300e:	88fb      	ldrh	r3, [r7, #6]
 8003010:	0a1b      	lsrs	r3, r3, #8
 8003012:	b29b      	uxth	r3, r3
 8003014:	b2db      	uxtb	r3, r3
 8003016:	4618      	mov	r0, r3
 8003018:	f001 fc6f 	bl	80048fa <RA8875_WriteData>
	RA8875_WriteCmd(0x48); RA8875_WriteData(_usY);
 800301c:	2048      	movs	r0, #72	; 0x48
 800301e:	f001 fc4b 	bl	80048b8 <RA8875_WriteCmd>
 8003022:	88bb      	ldrh	r3, [r7, #4]
 8003024:	b2db      	uxtb	r3, r3
 8003026:	4618      	mov	r0, r3
 8003028:	f001 fc67 	bl	80048fa <RA8875_WriteData>
	RA8875_WriteCmd(0x49); RA8875_WriteData(_usY >> 8);
 800302c:	2049      	movs	r0, #73	; 0x49
 800302e:	f001 fc43 	bl	80048b8 <RA8875_WriteCmd>
 8003032:	88bb      	ldrh	r3, [r7, #4]
 8003034:	0a1b      	lsrs	r3, r3, #8
 8003036:	b29b      	uxth	r3, r3
 8003038:	b2db      	uxtb	r3, r3
 800303a:	4618      	mov	r0, r3
 800303c:	f001 fc5d 	bl	80048fa <RA8875_WriteData>

	RA8875_WriteCmd(0x02); 		/* ÓÃÓÚÉè¶¨RA8875 ½øÈëÄÚ´æ(DDRAM»òCGRAM)¶ÁÈ¡/Ð´ÈëÄ£Ê½ */
 8003040:	2002      	movs	r0, #2
 8003042:	f001 fc39 	bl	80048b8 <RA8875_WriteCmd>
	RA8875_WriteData16(_usColor);
 8003046:	887b      	ldrh	r3, [r7, #2]
 8003048:	4618      	mov	r0, r3
 800304a:	f000 f8e5 	bl	8003218 <RA8875_WriteData16>

	s_ucRA8875Busy = 0;
 800304e:	4b03      	ldr	r3, [pc, #12]	; (800305c <RA8875_PutPixel+0x7c>)
 8003050:	2200      	movs	r2, #0
 8003052:	701a      	strb	r2, [r3, #0]
}
 8003054:	bf00      	nop
 8003056:	3708      	adds	r7, #8
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}
 800305c:	20000240 	.word	0x20000240

08003060 <BTE_SetTarBlock>:
*********************************************************************************************************
*	Func name: BTE_SetTarBlock
*********************************************************************************************************
*/
static void BTE_SetTarBlock(uint16_t _usX, uint16_t _usY, uint16_t _usHeight, uint16_t _usWidth, uint8_t _ucLayer)
{
 8003060:	b590      	push	{r4, r7, lr}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 8003066:	4604      	mov	r4, r0
 8003068:	4608      	mov	r0, r1
 800306a:	4611      	mov	r1, r2
 800306c:	461a      	mov	r2, r3
 800306e:	4623      	mov	r3, r4
 8003070:	80fb      	strh	r3, [r7, #6]
 8003072:	4603      	mov	r3, r0
 8003074:	80bb      	strh	r3, [r7, #4]
 8003076:	460b      	mov	r3, r1
 8003078:	807b      	strh	r3, [r7, #2]
 800307a:	4613      	mov	r3, r2
 800307c:	803b      	strh	r3, [r7, #0]
	/* ÉèÖÃÆðµã×ø±ê */
	RA8875_WriteReg(0x58, _usX);
 800307e:	88fb      	ldrh	r3, [r7, #6]
 8003080:	b2db      	uxtb	r3, r3
 8003082:	4619      	mov	r1, r3
 8003084:	2058      	movs	r0, #88	; 0x58
 8003086:	f7ff fdf5 	bl	8002c74 <RA8875_WriteReg>
	RA8875_WriteReg(0x59, _usX >> 8);
 800308a:	88fb      	ldrh	r3, [r7, #6]
 800308c:	0a1b      	lsrs	r3, r3, #8
 800308e:	b29b      	uxth	r3, r3
 8003090:	b2db      	uxtb	r3, r3
 8003092:	4619      	mov	r1, r3
 8003094:	2059      	movs	r0, #89	; 0x59
 8003096:	f7ff fded 	bl	8002c74 <RA8875_WriteReg>

	RA8875_WriteReg(0x5A, _usY);
 800309a:	88bb      	ldrh	r3, [r7, #4]
 800309c:	b2db      	uxtb	r3, r3
 800309e:	4619      	mov	r1, r3
 80030a0:	205a      	movs	r0, #90	; 0x5a
 80030a2:	f7ff fde7 	bl	8002c74 <RA8875_WriteReg>
	if (_ucLayer == 0)	/* Í¼²ã2 */
 80030a6:	7e3b      	ldrb	r3, [r7, #24]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d108      	bne.n	80030be <BTE_SetTarBlock+0x5e>
	{
		RA8875_WriteReg(0x5B, _usY >> 8);
 80030ac:	88bb      	ldrh	r3, [r7, #4]
 80030ae:	0a1b      	lsrs	r3, r3, #8
 80030b0:	b29b      	uxth	r3, r3
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	4619      	mov	r1, r3
 80030b6:	205b      	movs	r0, #91	; 0x5b
 80030b8:	f7ff fddc 	bl	8002c74 <RA8875_WriteReg>
 80030bc:	e00a      	b.n	80030d4 <BTE_SetTarBlock+0x74>
	}
	else
	{
		RA8875_WriteReg(0x5B, (1 << 7) | (_usY >> 8));	/* Bit7 ±íÊ¾Í¼²ã£¬ 0 Í¼²ã1£» 1 Í¼²ã2*/
 80030be:	88bb      	ldrh	r3, [r7, #4]
 80030c0:	0a1b      	lsrs	r3, r3, #8
 80030c2:	b29b      	uxth	r3, r3
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	4619      	mov	r1, r3
 80030ce:	205b      	movs	r0, #91	; 0x5b
 80030d0:	f7ff fdd0 	bl	8002c74 <RA8875_WriteReg>
	}

	/* ÉèÖÃÇø¿é¿í¶È */
	RA8875_WriteReg(0x5C, _usWidth);
 80030d4:	883b      	ldrh	r3, [r7, #0]
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	4619      	mov	r1, r3
 80030da:	205c      	movs	r0, #92	; 0x5c
 80030dc:	f7ff fdca 	bl	8002c74 <RA8875_WriteReg>
	RA8875_WriteReg(0x5D, _usWidth >> 8);
 80030e0:	883b      	ldrh	r3, [r7, #0]
 80030e2:	0a1b      	lsrs	r3, r3, #8
 80030e4:	b29b      	uxth	r3, r3
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	4619      	mov	r1, r3
 80030ea:	205d      	movs	r0, #93	; 0x5d
 80030ec:	f7ff fdc2 	bl	8002c74 <RA8875_WriteReg>

	/* ÉèÖÃÇø¿é¸ß¶È */
	RA8875_WriteReg(0x5E, _usHeight);
 80030f0:	887b      	ldrh	r3, [r7, #2]
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	4619      	mov	r1, r3
 80030f6:	205e      	movs	r0, #94	; 0x5e
 80030f8:	f7ff fdbc 	bl	8002c74 <RA8875_WriteReg>
	RA8875_WriteReg(0x5F, _usHeight >> 8);
 80030fc:	887b      	ldrh	r3, [r7, #2]
 80030fe:	0a1b      	lsrs	r3, r3, #8
 8003100:	b29b      	uxth	r3, r3
 8003102:	b2db      	uxtb	r3, r3
 8003104:	4619      	mov	r1, r3
 8003106:	205f      	movs	r0, #95	; 0x5f
 8003108:	f7ff fdb4 	bl	8002c74 <RA8875_WriteReg>
}
 800310c:	bf00      	nop
 800310e:	370c      	adds	r7, #12
 8003110:	46bd      	mov	sp, r7
 8003112:	bd90      	pop	{r4, r7, pc}

08003114 <BTE_SetOperateCode>:
*********************************************************************************************************
*	Func name: BTE_SetOperateCode
*********************************************************************************************************
*/
static void BTE_SetOperateCode(uint8_t _ucOperate)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b082      	sub	sp, #8
 8003118:	af00      	add	r7, sp, #0
 800311a:	4603      	mov	r3, r0
 800311c:	71fb      	strb	r3, [r7, #7]
	RA8875_WriteReg(0x51, _ucOperate);
 800311e:	79fb      	ldrb	r3, [r7, #7]
 8003120:	4619      	mov	r1, r3
 8003122:	2051      	movs	r0, #81	; 0x51
 8003124:	f7ff fda6 	bl	8002c74 <RA8875_WriteReg>
}
 8003128:	bf00      	nop
 800312a:	3708      	adds	r7, #8
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}

08003130 <RA8875_SetFrontColor>:
*********************************************************************************************************
* Func name: RA8875_SetFrontColor
*********************************************************************************************************
*/
void RA8875_SetFrontColor(uint16_t _usColor)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b082      	sub	sp, #8
 8003134:	af00      	add	r7, sp, #0
 8003136:	4603      	mov	r3, r0
 8003138:	80fb      	strh	r3, [r7, #6]
	RA8875_WriteReg(0x63, (_usColor & 0xF800) >> 11);	/* R5  */
 800313a:	88fb      	ldrh	r3, [r7, #6]
 800313c:	0adb      	lsrs	r3, r3, #11
 800313e:	b29b      	uxth	r3, r3
 8003140:	b2db      	uxtb	r3, r3
 8003142:	4619      	mov	r1, r3
 8003144:	2063      	movs	r0, #99	; 0x63
 8003146:	f7ff fd95 	bl	8002c74 <RA8875_WriteReg>
	RA8875_WriteReg(0x64, (_usColor & 0x07E0) >> 5);	/* G6 */
 800314a:	88fb      	ldrh	r3, [r7, #6]
 800314c:	115b      	asrs	r3, r3, #5
 800314e:	b2db      	uxtb	r3, r3
 8003150:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003154:	b2db      	uxtb	r3, r3
 8003156:	4619      	mov	r1, r3
 8003158:	2064      	movs	r0, #100	; 0x64
 800315a:	f7ff fd8b 	bl	8002c74 <RA8875_WriteReg>
	RA8875_WriteReg(0x65, (_usColor & 0x001F));			/* B5 */
 800315e:	88fb      	ldrh	r3, [r7, #6]
 8003160:	b2db      	uxtb	r3, r3
 8003162:	f003 031f 	and.w	r3, r3, #31
 8003166:	b2db      	uxtb	r3, r3
 8003168:	4619      	mov	r1, r3
 800316a:	2065      	movs	r0, #101	; 0x65
 800316c:	f7ff fd82 	bl	8002c74 <RA8875_WriteReg>
}
 8003170:	bf00      	nop
 8003172:	3708      	adds	r7, #8
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}

08003178 <RA8875_DrawBMP>:
*********************************************************************************************************
*	Func name: RA8875_DrawBMP
*********************************************************************************************************
*/
void RA8875_DrawBMP(uint16_t _usX, uint16_t _usY, uint16_t _usHeight, uint16_t _usWidth, uint16_t *_ptr)
{
 8003178:	b590      	push	{r4, r7, lr}
 800317a:	b085      	sub	sp, #20
 800317c:	af00      	add	r7, sp, #0
 800317e:	4604      	mov	r4, r0
 8003180:	4608      	mov	r0, r1
 8003182:	4611      	mov	r1, r2
 8003184:	461a      	mov	r2, r3
 8003186:	4623      	mov	r3, r4
 8003188:	80fb      	strh	r3, [r7, #6]
 800318a:	4603      	mov	r3, r0
 800318c:	80bb      	strh	r3, [r7, #4]
 800318e:	460b      	mov	r3, r1
 8003190:	807b      	strh	r3, [r7, #2]
 8003192:	4613      	mov	r3, r2
 8003194:	803b      	strh	r3, [r7, #0]
	uint32_t index = 0;
 8003196:	2300      	movs	r3, #0
 8003198:	60fb      	str	r3, [r7, #12]
	const uint16_t *p;

	RA8875_SetDispWin(_usX, _usY, _usHeight, _usWidth);
 800319a:	883b      	ldrh	r3, [r7, #0]
 800319c:	887a      	ldrh	r2, [r7, #2]
 800319e:	88b9      	ldrh	r1, [r7, #4]
 80031a0:	88f8      	ldrh	r0, [r7, #6]
 80031a2:	f7ff fe5b 	bl	8002e5c <RA8875_SetDispWin>

	s_ucRA8875Busy = 1;
 80031a6:	4b13      	ldr	r3, [pc, #76]	; (80031f4 <RA8875_DrawBMP+0x7c>)
 80031a8:	2201      	movs	r2, #1
 80031aa:	701a      	strb	r2, [r3, #0]

	RA8875_WriteCmd(0x02); 		
 80031ac:	2002      	movs	r0, #2
 80031ae:	f001 fb83 	bl	80048b8 <RA8875_WriteCmd>

	p = _ptr;
 80031b2:	6a3b      	ldr	r3, [r7, #32]
 80031b4:	60bb      	str	r3, [r7, #8]
	for (index = 0; index < _usHeight * _usWidth; index++)
 80031b6:	2300      	movs	r3, #0
 80031b8:	60fb      	str	r3, [r7, #12]
 80031ba:	e009      	b.n	80031d0 <RA8875_DrawBMP+0x58>
	{
		RA8875_WriteData16(*p++);
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	1c9a      	adds	r2, r3, #2
 80031c0:	60ba      	str	r2, [r7, #8]
 80031c2:	881b      	ldrh	r3, [r3, #0]
 80031c4:	4618      	mov	r0, r3
 80031c6:	f000 f827 	bl	8003218 <RA8875_WriteData16>
	for (index = 0; index < _usHeight * _usWidth; index++)
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	3301      	adds	r3, #1
 80031ce:	60fb      	str	r3, [r7, #12]
 80031d0:	887b      	ldrh	r3, [r7, #2]
 80031d2:	883a      	ldrh	r2, [r7, #0]
 80031d4:	fb02 f303 	mul.w	r3, r2, r3
 80031d8:	461a      	mov	r2, r3
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	4293      	cmp	r3, r2
 80031de:	d3ed      	bcc.n	80031bc <RA8875_DrawBMP+0x44>
	}
	s_ucRA8875Busy = 0;
 80031e0:	4b04      	ldr	r3, [pc, #16]	; (80031f4 <RA8875_DrawBMP+0x7c>)
 80031e2:	2200      	movs	r2, #0
 80031e4:	701a      	strb	r2, [r3, #0]

	RA8875_QuitWinMode();
 80031e6:	f000 f807 	bl	80031f8 <RA8875_QuitWinMode>
}
 80031ea:	bf00      	nop
 80031ec:	3714      	adds	r7, #20
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd90      	pop	{r4, r7, pc}
 80031f2:	bf00      	nop
 80031f4:	20000240 	.word	0x20000240

080031f8 <RA8875_QuitWinMode>:
*********************************************************************************************************
*	Funa name: RA8875_QuitWinMode
*********************************************************************************************************
*/
void RA8875_QuitWinMode(void)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	af00      	add	r7, sp, #0
	RA8875_SetDispWin(0, 0, g_LcdHeight, g_LcdWidth);
 80031fc:	4b04      	ldr	r3, [pc, #16]	; (8003210 <RA8875_QuitWinMode+0x18>)
 80031fe:	881a      	ldrh	r2, [r3, #0]
 8003200:	4b04      	ldr	r3, [pc, #16]	; (8003214 <RA8875_QuitWinMode+0x1c>)
 8003202:	881b      	ldrh	r3, [r3, #0]
 8003204:	2100      	movs	r1, #0
 8003206:	2000      	movs	r0, #0
 8003208:	f7ff fe28 	bl	8002e5c <RA8875_SetDispWin>
}
 800320c:	bf00      	nop
 800320e:	bd80      	pop	{r7, pc}
 8003210:	2000000a 	.word	0x2000000a
 8003214:	2000000c 	.word	0x2000000c

08003218 <RA8875_WriteData16>:
*********************************************************************************************************
*	Func name: RA8875_WriteData16
*********************************************************************************************************
*/
void RA8875_WriteData16(uint16_t _usRGB)
{
 8003218:	b480      	push	{r7}
 800321a:	b083      	sub	sp, #12
 800321c:	af00      	add	r7, sp, #0
 800321e:	4603      	mov	r3, r0
 8003220:	80fb      	strh	r3, [r7, #6]
	SPI_ShiftByte(_usRGB);
	RA8875_CS_1();
#endif

#ifdef RA_HARD_8080_16
	RA8875_RAM = _usRGB;
 8003222:	f04f 42d8 	mov.w	r2, #1811939328	; 0x6c000000
 8003226:	88fb      	ldrh	r3, [r7, #6]
 8003228:	8013      	strh	r3, [r2, #0]
#endif	
}
 800322a:	bf00      	nop
 800322c:	370c      	adds	r7, #12
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr
	...

08003238 <BTE_Start>:
*********************************************************************************************************
*	Func name: BTE_Start
*********************************************************************************************************
*/
static void BTE_Start(void)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	af00      	add	r7, sp, #0
	s_ucRA8875Busy = 1;
 800323c:	4b05      	ldr	r3, [pc, #20]	; (8003254 <BTE_Start+0x1c>)
 800323e:	2201      	movs	r2, #1
 8003240:	701a      	strb	r2, [r3, #0]
	/* RA8875_WriteReg(0x50, 0x80);  ²»ÄÜÊ¹ÓÃÕâ¸öº¯Êý£¬ÒòÎªÄÚ²¿ÒÑ¾­²Ù×÷ÁË s_ucRA8875Busy ±êÖ¾ */
	RA8875_WriteCmd(0x50);	/* ÉèÖÃ¼Ä´æÆ÷µØÖ· */
 8003242:	2050      	movs	r0, #80	; 0x50
 8003244:	f001 fb38 	bl	80048b8 <RA8875_WriteCmd>
	RA8875_WriteData(0x80);	/* Ð´Èë¼Ä´æÆ÷Öµ */
 8003248:	2080      	movs	r0, #128	; 0x80
 800324a:	f001 fb56 	bl	80048fa <RA8875_WriteData>
}
 800324e:	bf00      	nop
 8003250:	bd80      	pop	{r7, pc}
 8003252:	bf00      	nop
 8003254:	20000240 	.word	0x20000240

08003258 <BTE_Wait>:
*********************************************************************************************************
*	Func name: BTE_Wait
*********************************************************************************************************
*/
static void BTE_Wait(void)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	af00      	add	r7, sp, #0
	while ((RA8875_ReadStatus() & 0x40) == 0x40);
 800325c:	bf00      	nop
 800325e:	f001 fb5d 	bl	800491c <RA8875_ReadStatus>
 8003262:	4603      	mov	r3, r0
 8003264:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003268:	2b40      	cmp	r3, #64	; 0x40
 800326a:	d0f8      	beq.n	800325e <BTE_Wait+0x6>
	s_ucRA8875Busy = 0;
 800326c:	4b02      	ldr	r3, [pc, #8]	; (8003278 <BTE_Wait+0x20>)
 800326e:	2200      	movs	r2, #0
 8003270:	701a      	strb	r2, [r3, #0]
}
 8003272:	bf00      	nop
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop
 8003278:	20000240 	.word	0x20000240

0800327c <RA8875_SetBackLight>:
*	ÐÎ    ²Î:  _bright ÁÁ¶È£¬0ÊÇÃð£¬255ÊÇ×îÁÁ
*	·µ »Ø Öµ: ÎÞ
*********************************************************************************************************
*/
void RA8875_SetBackLight(uint8_t _bright)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b082      	sub	sp, #8
 8003280:	af00      	add	r7, sp, #0
 8003282:	4603      	mov	r3, r0
 8003284:	71fb      	strb	r3, [r7, #7]
	if (_bright == 0)
 8003286:	79fb      	ldrb	r3, [r7, #7]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d104      	bne.n	8003296 <RA8875_SetBackLight+0x1a>
	{
		/* ¹Ø±ÕPWM, PWM1Òý½ÅÈ±Ê¡Êä³öLOW  */
		RA8875_WriteReg(0x8A, 0 << 6);
 800328c:	2100      	movs	r1, #0
 800328e:	208a      	movs	r0, #138	; 0x8a
 8003290:	f7ff fcf0 	bl	8002c74 <RA8875_WriteReg>
		RA8875_WriteReg(0x8A, (1 << 7) | 12);

		/* REG[8Bh] PWM1 Duty Cycle Register (P1DCR) */
		RA8875_WriteReg(0x8B, _bright);
	}
}
 8003294:	e010      	b.n	80032b8 <RA8875_SetBackLight+0x3c>
	else if (_bright == BRIGHT_MAX)	/* ×î´óÁÁ¶È */
 8003296:	79fb      	ldrb	r3, [r7, #7]
 8003298:	2bff      	cmp	r3, #255	; 0xff
 800329a:	d104      	bne.n	80032a6 <RA8875_SetBackLight+0x2a>
		RA8875_WriteReg(0x8A, 1 << 6);
 800329c:	2140      	movs	r1, #64	; 0x40
 800329e:	208a      	movs	r0, #138	; 0x8a
 80032a0:	f7ff fce8 	bl	8002c74 <RA8875_WriteReg>
}
 80032a4:	e008      	b.n	80032b8 <RA8875_SetBackLight+0x3c>
		RA8875_WriteReg(0x8A, (1 << 7) | 12);
 80032a6:	218c      	movs	r1, #140	; 0x8c
 80032a8:	208a      	movs	r0, #138	; 0x8a
 80032aa:	f7ff fce3 	bl	8002c74 <RA8875_WriteReg>
		RA8875_WriteReg(0x8B, _bright);
 80032ae:	79fb      	ldrb	r3, [r7, #7]
 80032b0:	4619      	mov	r1, r3
 80032b2:	208b      	movs	r0, #139	; 0x8b
 80032b4:	f7ff fcde 	bl	8002c74 <RA8875_WriteReg>
}
 80032b8:	bf00      	nop
 80032ba:	3708      	adds	r7, #8
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}

080032c0 <RA8875_GetPixel>:
*********************************************************************************************************
*	Func name: RA8875_GetPixel
*********************************************************************************************************
*/
uint16_t RA8875_GetPixel(uint16_t _usX, uint16_t _usY)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b084      	sub	sp, #16
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	4603      	mov	r3, r0
 80032c8:	460a      	mov	r2, r1
 80032ca:	80fb      	strh	r3, [r7, #6]
 80032cc:	4613      	mov	r3, r2
 80032ce:	80bb      	strh	r3, [r7, #4]
	uint16_t usRGB;

	RA8875_WriteReg(0x40, (1 << 0));
 80032d0:	2101      	movs	r1, #1
 80032d2:	2040      	movs	r0, #64	; 0x40
 80032d4:	f7ff fcce 	bl	8002c74 <RA8875_WriteReg>

	RA8875_SetReadCursor(_usX, _usY);	/* ÉèÖÃ¶ÁÈ¡¹â±êÎ»ÖÃ */
 80032d8:	88ba      	ldrh	r2, [r7, #4]
 80032da:	88fb      	ldrh	r3, [r7, #6]
 80032dc:	4611      	mov	r1, r2
 80032de:	4618      	mov	r0, r3
 80032e0:	f000 f81c 	bl	800331c <RA8875_SetReadCursor>

	s_ucRA8875Busy = 1;
 80032e4:	4b0c      	ldr	r3, [pc, #48]	; (8003318 <RA8875_GetPixel+0x58>)
 80032e6:	2201      	movs	r2, #1
 80032e8:	701a      	strb	r2, [r3, #0]

	RA8875_WriteCmd(0x02);
 80032ea:	2002      	movs	r0, #2
 80032ec:	f001 fae4 	bl	80048b8 <RA8875_WriteCmd>
	usRGB = RA8875_ReadData16();	/* µÚ1´Î¶ÁÈ¡Êý¾Ý¶ªÆú */
 80032f0:	f000 f83c 	bl	800336c <RA8875_ReadData16>
 80032f4:	4603      	mov	r3, r0
 80032f6:	81fb      	strh	r3, [r7, #14]
	usRGB = RA8875_ReadData16();
 80032f8:	f000 f838 	bl	800336c <RA8875_ReadData16>
 80032fc:	4603      	mov	r3, r0
 80032fe:	81fb      	strh	r3, [r7, #14]
	usRGB = RA8875_ReadData16();
 8003300:	f000 f834 	bl	800336c <RA8875_ReadData16>
 8003304:	4603      	mov	r3, r0
 8003306:	81fb      	strh	r3, [r7, #14]

	s_ucRA8875Busy = 0;
 8003308:	4b03      	ldr	r3, [pc, #12]	; (8003318 <RA8875_GetPixel+0x58>)
 800330a:	2200      	movs	r2, #0
 800330c:	701a      	strb	r2, [r3, #0]

	return usRGB;
 800330e:	89fb      	ldrh	r3, [r7, #14]
}
 8003310:	4618      	mov	r0, r3
 8003312:	3710      	adds	r7, #16
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}
 8003318:	20000240 	.word	0x20000240

0800331c <RA8875_SetReadCursor>:
*********************************************************************************************************
*	Func name: RA8875_SetCursor
*********************************************************************************************************
*/
static void RA8875_SetReadCursor(uint16_t _usX, uint16_t _usY)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b082      	sub	sp, #8
 8003320:	af00      	add	r7, sp, #0
 8003322:	4603      	mov	r3, r0
 8003324:	460a      	mov	r2, r1
 8003326:	80fb      	strh	r3, [r7, #6]
 8003328:	4613      	mov	r3, r2
 800332a:	80bb      	strh	r3, [r7, #4]
	RA8875_WriteReg(0x4A, _usX);
 800332c:	88fb      	ldrh	r3, [r7, #6]
 800332e:	b2db      	uxtb	r3, r3
 8003330:	4619      	mov	r1, r3
 8003332:	204a      	movs	r0, #74	; 0x4a
 8003334:	f7ff fc9e 	bl	8002c74 <RA8875_WriteReg>
	RA8875_WriteReg(0x4B, _usX >> 8);
 8003338:	88fb      	ldrh	r3, [r7, #6]
 800333a:	0a1b      	lsrs	r3, r3, #8
 800333c:	b29b      	uxth	r3, r3
 800333e:	b2db      	uxtb	r3, r3
 8003340:	4619      	mov	r1, r3
 8003342:	204b      	movs	r0, #75	; 0x4b
 8003344:	f7ff fc96 	bl	8002c74 <RA8875_WriteReg>
	RA8875_WriteReg(0x4C, _usY);
 8003348:	88bb      	ldrh	r3, [r7, #4]
 800334a:	b2db      	uxtb	r3, r3
 800334c:	4619      	mov	r1, r3
 800334e:	204c      	movs	r0, #76	; 0x4c
 8003350:	f7ff fc90 	bl	8002c74 <RA8875_WriteReg>
	RA8875_WriteReg(0x4D, _usY >> 8);
 8003354:	88bb      	ldrh	r3, [r7, #4]
 8003356:	0a1b      	lsrs	r3, r3, #8
 8003358:	b29b      	uxth	r3, r3
 800335a:	b2db      	uxtb	r3, r3
 800335c:	4619      	mov	r1, r3
 800335e:	204d      	movs	r0, #77	; 0x4d
 8003360:	f7ff fc88 	bl	8002c74 <RA8875_WriteReg>
}
 8003364:	bf00      	nop
 8003366:	3708      	adds	r7, #8
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}

0800336c <RA8875_ReadData16>:
*********************************************************************************************************
*	Func name: RA8875_ReadData16
*********************************************************************************************************
*/
uint16_t RA8875_ReadData16(void)
{
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
#endif

#ifdef RA_HARD_8080_16			/* 8080Ó²¼þ×ÜÏß */
	uint16_t value;

	value = RA8875_RAM;		/* ¶ÁÈ¡¼Ä´æÆ÷Öµ */
 8003372:	f04f 43d8 	mov.w	r3, #1811939328	; 0x6c000000
 8003376:	881b      	ldrh	r3, [r3, #0]
 8003378:	80fb      	strh	r3, [r7, #6]

	return value;
 800337a:	88fb      	ldrh	r3, [r7, #6]
#endif
}
 800337c:	4618      	mov	r0, r3
 800337e:	370c      	adds	r7, #12
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr

08003388 <RA8875_TouchInit>:
*********************************************************************************************************
*	Func name: RA8875_TouchInit
*********************************************************************************************************
*/
void RA8875_TouchInit(void)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	af00      	add	r7, sp, #0
	// 터치 인터럽트 활성화 (0xF0 레지스터의 비트 2 설정)
	RA8875_WriteReg(0xF0, (1 << 2));
 800338c:	2104      	movs	r1, #4
 800338e:	20f0      	movs	r0, #240	; 0xf0
 8003390:	f7ff fc70 	bl	8002c74 <RA8875_WriteReg>

	// TPCR1 설정: 자동 모드, 내부 참조 전압, 디바운스 활성화
	RA8875_WriteReg(0x71, (0 << 6) | (0 << 5) | (1 << 2));
 8003394:	2104      	movs	r1, #4
 8003396:	2071      	movs	r0, #113	; 0x71
 8003398:	f7ff fc6c 	bl	8002c74 <RA8875_WriteReg>

	// TPCR0 설정: 터치 활성화, ADC 샘플링 = 4096, X축 데이터 획득 모드
	RA8875_WriteReg(0x70, (1 << 7) | (3 << 4) | (0 << 3) | (2 << 0));
 800339c:	21b2      	movs	r1, #178	; 0xb2
 800339e:	2070      	movs	r0, #112	; 0x70
 80033a0:	f7ff fc68 	bl	8002c74 <RA8875_WriteReg>

}
 80033a4:	bf00      	nop
 80033a6:	bd80      	pop	{r7, pc}

080033a8 <RA8875_DrawRect>:
*********************************************************************************************************
* Func name: RA8875_DrawRect
*********************************************************************************************************
*/
void RA8875_DrawRect(uint16_t _usX, uint16_t _usY, uint16_t _usHeight, uint16_t _usWidth, uint16_t _usColor)
{
 80033a8:	b590      	push	{r4, r7, lr}
 80033aa:	b083      	sub	sp, #12
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	4604      	mov	r4, r0
 80033b0:	4608      	mov	r0, r1
 80033b2:	4611      	mov	r1, r2
 80033b4:	461a      	mov	r2, r3
 80033b6:	4623      	mov	r3, r4
 80033b8:	80fb      	strh	r3, [r7, #6]
 80033ba:	4603      	mov	r3, r0
 80033bc:	80bb      	strh	r3, [r7, #4]
 80033be:	460b      	mov	r3, r1
 80033c0:	807b      	strh	r3, [r7, #2]
 80033c2:	4613      	mov	r3, r2
 80033c4:	803b      	strh	r3, [r7, #0]
	RA8875_WriteReg(0x91, _usX);
 80033c6:	88fb      	ldrh	r3, [r7, #6]
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	4619      	mov	r1, r3
 80033cc:	2091      	movs	r0, #145	; 0x91
 80033ce:	f7ff fc51 	bl	8002c74 <RA8875_WriteReg>
	RA8875_WriteReg(0x92, _usX >> 8);
 80033d2:	88fb      	ldrh	r3, [r7, #6]
 80033d4:	0a1b      	lsrs	r3, r3, #8
 80033d6:	b29b      	uxth	r3, r3
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	4619      	mov	r1, r3
 80033dc:	2092      	movs	r0, #146	; 0x92
 80033de:	f7ff fc49 	bl	8002c74 <RA8875_WriteReg>
	RA8875_WriteReg(0x93, _usY);
 80033e2:	88bb      	ldrh	r3, [r7, #4]
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	4619      	mov	r1, r3
 80033e8:	2093      	movs	r0, #147	; 0x93
 80033ea:	f7ff fc43 	bl	8002c74 <RA8875_WriteReg>
	RA8875_WriteReg(0x94, _usY >> 8);
 80033ee:	88bb      	ldrh	r3, [r7, #4]
 80033f0:	0a1b      	lsrs	r3, r3, #8
 80033f2:	b29b      	uxth	r3, r3
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	4619      	mov	r1, r3
 80033f8:	2094      	movs	r0, #148	; 0x94
 80033fa:	f7ff fc3b 	bl	8002c74 <RA8875_WriteReg>

	/* ÉèÖÃÖÕµã×ø±ê */
	RA8875_WriteReg(0x95, _usX + _usWidth - 1);
 80033fe:	88fb      	ldrh	r3, [r7, #6]
 8003400:	b2da      	uxtb	r2, r3
 8003402:	883b      	ldrh	r3, [r7, #0]
 8003404:	b2db      	uxtb	r3, r3
 8003406:	4413      	add	r3, r2
 8003408:	b2db      	uxtb	r3, r3
 800340a:	3b01      	subs	r3, #1
 800340c:	b2db      	uxtb	r3, r3
 800340e:	4619      	mov	r1, r3
 8003410:	2095      	movs	r0, #149	; 0x95
 8003412:	f7ff fc2f 	bl	8002c74 <RA8875_WriteReg>
	RA8875_WriteReg(0x96, (_usX + _usWidth - 1) >> 8);
 8003416:	88fa      	ldrh	r2, [r7, #6]
 8003418:	883b      	ldrh	r3, [r7, #0]
 800341a:	4413      	add	r3, r2
 800341c:	3b01      	subs	r3, #1
 800341e:	121b      	asrs	r3, r3, #8
 8003420:	b2db      	uxtb	r3, r3
 8003422:	4619      	mov	r1, r3
 8003424:	2096      	movs	r0, #150	; 0x96
 8003426:	f7ff fc25 	bl	8002c74 <RA8875_WriteReg>
	RA8875_WriteReg(0x97, _usY + _usHeight - 1);
 800342a:	88bb      	ldrh	r3, [r7, #4]
 800342c:	b2da      	uxtb	r2, r3
 800342e:	887b      	ldrh	r3, [r7, #2]
 8003430:	b2db      	uxtb	r3, r3
 8003432:	4413      	add	r3, r2
 8003434:	b2db      	uxtb	r3, r3
 8003436:	3b01      	subs	r3, #1
 8003438:	b2db      	uxtb	r3, r3
 800343a:	4619      	mov	r1, r3
 800343c:	2097      	movs	r0, #151	; 0x97
 800343e:	f7ff fc19 	bl	8002c74 <RA8875_WriteReg>
	RA8875_WriteReg(0x98, (_usY + _usHeight - 1) >> 8);
 8003442:	88ba      	ldrh	r2, [r7, #4]
 8003444:	887b      	ldrh	r3, [r7, #2]
 8003446:	4413      	add	r3, r2
 8003448:	3b01      	subs	r3, #1
 800344a:	121b      	asrs	r3, r3, #8
 800344c:	b2db      	uxtb	r3, r3
 800344e:	4619      	mov	r1, r3
 8003450:	2098      	movs	r0, #152	; 0x98
 8003452:	f7ff fc0f 	bl	8002c74 <RA8875_WriteReg>

	RA8875_SetFrontColor(_usColor);	/* ÉèÖÃÑÕÉ« */
 8003456:	8b3b      	ldrh	r3, [r7, #24]
 8003458:	4618      	mov	r0, r3
 800345a:	f7ff fe69 	bl	8003130 <RA8875_SetFrontColor>

	s_ucRA8875Busy = 1;
 800345e:	4b09      	ldr	r3, [pc, #36]	; (8003484 <RA8875_DrawRect+0xdc>)
 8003460:	2201      	movs	r2, #1
 8003462:	701a      	strb	r2, [r3, #0]
	//	RA8875_WriteReg(0x90, (1 << 7) | (0 << 5) | (1 << 4) | (0 << 0));	/* ¿ªÊ¼»­¾ØÐÎ  */
	RA8875_WriteCmd(0x90);
 8003464:	2090      	movs	r0, #144	; 0x90
 8003466:	f001 fa27 	bl	80048b8 <RA8875_WriteCmd>
	RA8875_WriteData((1 << 7) | (0 << 5) | (1 << 4) | (0 << 0));
 800346a:	2090      	movs	r0, #144	; 0x90
 800346c:	f001 fa45 	bl	80048fa <RA8875_WriteData>
	//	while (RA8875_ReadReg(0x90) & (1 << 7));							/* µÈ´ý½áÊø */
	RA8875_WaitBusy();
 8003470:	f000 f80a 	bl	8003488 <RA8875_WaitBusy>
	s_ucRA8875Busy = 0;
 8003474:	4b03      	ldr	r3, [pc, #12]	; (8003484 <RA8875_DrawRect+0xdc>)
 8003476:	2200      	movs	r2, #0
 8003478:	701a      	strb	r2, [r3, #0]
}
 800347a:	bf00      	nop
 800347c:	370c      	adds	r7, #12
 800347e:	46bd      	mov	sp, r7
 8003480:	bd90      	pop	{r4, r7, pc}
 8003482:	bf00      	nop
 8003484:	20000240 	.word	0x20000240

08003488 <RA8875_WaitBusy>:
*********************************************************************************************************
* Func name: RA8875_WaitBusy
*********************************************************************************************************
*/
void RA8875_WaitBusy(void)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	af00      	add	r7, sp, #0
	while ((RA8875_ReadStatus() & 0x80) == 0x80);
 800348c:	bf00      	nop
 800348e:	f001 fa45 	bl	800491c <RA8875_ReadStatus>
 8003492:	4603      	mov	r3, r0
 8003494:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003498:	2b80      	cmp	r3, #128	; 0x80
 800349a:	d0f8      	beq.n	800348e <RA8875_WaitBusy+0x6>
}
 800349c:	bf00      	nop
 800349e:	bf00      	nop
 80034a0:	bd80      	pop	{r7, pc}
	...

080034a4 <RA8875_DrawCircle>:
*********************************************************************************************************
*	Func name: RA8875_DrawCircle
*********************************************************************************************************
*/
void RA8875_DrawCircle(uint16_t _usX, uint16_t _usY, uint16_t _usRadius, uint16_t _usColor)
{
 80034a4:	b590      	push	{r4, r7, lr}
 80034a6:	b083      	sub	sp, #12
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	4604      	mov	r4, r0
 80034ac:	4608      	mov	r0, r1
 80034ae:	4611      	mov	r1, r2
 80034b0:	461a      	mov	r2, r3
 80034b2:	4623      	mov	r3, r4
 80034b4:	80fb      	strh	r3, [r7, #6]
 80034b6:	4603      	mov	r3, r0
 80034b8:	80bb      	strh	r3, [r7, #4]
 80034ba:	460b      	mov	r3, r1
 80034bc:	807b      	strh	r3, [r7, #2]
 80034be:	4613      	mov	r3, r2
 80034c0:	803b      	strh	r3, [r7, #0]
	if (_usRadius > 255)
 80034c2:	887b      	ldrh	r3, [r7, #2]
 80034c4:	2bff      	cmp	r3, #255	; 0xff
 80034c6:	d834      	bhi.n	8003532 <RA8875_DrawCircle+0x8e>
	{
		return;
	}
	RA8875_WriteReg(0x99, _usX);
 80034c8:	88fb      	ldrh	r3, [r7, #6]
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	4619      	mov	r1, r3
 80034ce:	2099      	movs	r0, #153	; 0x99
 80034d0:	f7ff fbd0 	bl	8002c74 <RA8875_WriteReg>
	RA8875_WriteReg(0x9A, _usX >> 8);
 80034d4:	88fb      	ldrh	r3, [r7, #6]
 80034d6:	0a1b      	lsrs	r3, r3, #8
 80034d8:	b29b      	uxth	r3, r3
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	4619      	mov	r1, r3
 80034de:	209a      	movs	r0, #154	; 0x9a
 80034e0:	f7ff fbc8 	bl	8002c74 <RA8875_WriteReg>
	RA8875_WriteReg(0x9B, _usY);
 80034e4:	88bb      	ldrh	r3, [r7, #4]
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	4619      	mov	r1, r3
 80034ea:	209b      	movs	r0, #155	; 0x9b
 80034ec:	f7ff fbc2 	bl	8002c74 <RA8875_WriteReg>
	RA8875_WriteReg(0x9C, _usY >> 8);
 80034f0:	88bb      	ldrh	r3, [r7, #4]
 80034f2:	0a1b      	lsrs	r3, r3, #8
 80034f4:	b29b      	uxth	r3, r3
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	4619      	mov	r1, r3
 80034fa:	209c      	movs	r0, #156	; 0x9c
 80034fc:	f7ff fbba 	bl	8002c74 <RA8875_WriteReg>

	RA8875_WriteReg(0x9D, _usRadius);	/* ÉèÖÃÔ²µÄ°ë¾¶ */
 8003500:	887b      	ldrh	r3, [r7, #2]
 8003502:	b2db      	uxtb	r3, r3
 8003504:	4619      	mov	r1, r3
 8003506:	209d      	movs	r0, #157	; 0x9d
 8003508:	f7ff fbb4 	bl	8002c74 <RA8875_WriteReg>

	RA8875_SetFrontColor(_usColor);	/* ÉèÖÃÑÕÉ« */
 800350c:	883b      	ldrh	r3, [r7, #0]
 800350e:	4618      	mov	r0, r3
 8003510:	f7ff fe0e 	bl	8003130 <RA8875_SetFrontColor>

	s_ucRA8875Busy = 1;
 8003514:	4b09      	ldr	r3, [pc, #36]	; (800353c <RA8875_DrawCircle+0x98>)
 8003516:	2201      	movs	r2, #1
 8003518:	701a      	strb	r2, [r3, #0]
	//	RA8875_WriteReg(0x90, (1 << 6) | (0 << 5));				/* ¿ªÊ¼»­Ô², ²»Ìî³ä  */
	RA8875_WriteCmd(0x90);
 800351a:	2090      	movs	r0, #144	; 0x90
 800351c:	f001 f9cc 	bl	80048b8 <RA8875_WriteCmd>
	RA8875_WriteData( (1 << 6) | (0 << 5));
 8003520:	2040      	movs	r0, #64	; 0x40
 8003522:	f001 f9ea 	bl	80048fa <RA8875_WriteData>
	//	while (RA8875_ReadReg(0x90) & (1 << 6));				/* µÈ´ý½áÊø */
	RA8875_WaitBusy();
 8003526:	f7ff ffaf 	bl	8003488 <RA8875_WaitBusy>
	s_ucRA8875Busy = 0;
 800352a:	4b04      	ldr	r3, [pc, #16]	; (800353c <RA8875_DrawCircle+0x98>)
 800352c:	2200      	movs	r2, #0
 800352e:	701a      	strb	r2, [r3, #0]
 8003530:	e000      	b.n	8003534 <RA8875_DrawCircle+0x90>
		return;
 8003532:	bf00      	nop
}
 8003534:	370c      	adds	r7, #12
 8003536:	46bd      	mov	sp, r7
 8003538:	bd90      	pop	{r4, r7, pc}
 800353a:	bf00      	nop
 800353c:	20000240 	.word	0x20000240

08003540 <RA8875_IsBusy>:
*********************************************************************************************************
*  Func name: RA8875_IsBusy
*********************************************************************************************************
*/
uint8_t RA8875_IsBusy(void)
{
 8003540:	b480      	push	{r7}
 8003542:	af00      	add	r7, sp, #0
	if (s_ucRA8875Busy == 0)
 8003544:	4b06      	ldr	r3, [pc, #24]	; (8003560 <RA8875_IsBusy+0x20>)
 8003546:	781b      	ldrb	r3, [r3, #0]
 8003548:	b2db      	uxtb	r3, r3
 800354a:	2b00      	cmp	r3, #0
 800354c:	d101      	bne.n	8003552 <RA8875_IsBusy+0x12>
	{
		return 0;
 800354e:	2300      	movs	r3, #0
 8003550:	e000      	b.n	8003554 <RA8875_IsBusy+0x14>
	}
	return 1;
 8003552:	2301      	movs	r3, #1
}
 8003554:	4618      	mov	r0, r3
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr
 800355e:	bf00      	nop
 8003560:	20000240 	.word	0x20000240

08003564 <RA8875_TouchReadX>:
*********************************************************************************************************
* Func name: RA8875_TouchReadX
*********************************************************************************************************
*/
uint16_t RA8875_TouchReadX(void)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b082      	sub	sp, #8
 8003568:	af00      	add	r7, sp, #0
	uint16_t usAdc;
	uint8_t ucRegValue;
	uint8_t ucReg74;

	ucRegValue = RA8875_ReadReg(0xF1);
 800356a:	20f1      	movs	r0, #241	; 0xf1
 800356c:	f7ff fb72 	bl	8002c54 <RA8875_ReadReg>
 8003570:	4603      	mov	r3, r0
 8003572:	71fb      	strb	r3, [r7, #7]
	if (ucRegValue & (1 << 2))
 8003574:	79fb      	ldrb	r3, [r7, #7]
 8003576:	f003 0304 	and.w	r3, r3, #4
 800357a:	2b00      	cmp	r3, #0
 800357c:	d02c      	beq.n	80035d8 <RA8875_TouchReadX+0x74>
	{
		ucReg74 = RA8875_ReadReg(0x74);
 800357e:	2074      	movs	r0, #116	; 0x74
 8003580:	f7ff fb68 	bl	8002c54 <RA8875_ReadReg>
 8003584:	4603      	mov	r3, r0
 8003586:	71bb      	strb	r3, [r7, #6]
		usAdc = RA8875_ReadReg(0x72);
 8003588:	2072      	movs	r0, #114	; 0x72
 800358a:	f7ff fb63 	bl	8002c54 <RA8875_ReadReg>
 800358e:	4603      	mov	r3, r0
 8003590:	80bb      	strh	r3, [r7, #4]
		usAdc <<= 2;
 8003592:	88bb      	ldrh	r3, [r7, #4]
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	80bb      	strh	r3, [r7, #4]
		usAdc += (ucReg74 & 0x03);
 8003598:	79bb      	ldrb	r3, [r7, #6]
 800359a:	b29b      	uxth	r3, r3
 800359c:	f003 0303 	and.w	r3, r3, #3
 80035a0:	b29a      	uxth	r2, r3
 80035a2:	88bb      	ldrh	r3, [r7, #4]
 80035a4:	4413      	add	r3, r2
 80035a6:	80bb      	strh	r3, [r7, #4]

		s_usTouchX = usAdc;
 80035a8:	4a15      	ldr	r2, [pc, #84]	; (8003600 <RA8875_TouchReadX+0x9c>)
 80035aa:	88bb      	ldrh	r3, [r7, #4]
 80035ac:	8013      	strh	r3, [r2, #0]

		usAdc = RA8875_ReadReg(0x73);	/* Bit9-2 */
 80035ae:	2073      	movs	r0, #115	; 0x73
 80035b0:	f7ff fb50 	bl	8002c54 <RA8875_ReadReg>
 80035b4:	4603      	mov	r3, r0
 80035b6:	80bb      	strh	r3, [r7, #4]
		usAdc <<= 2;
 80035b8:	88bb      	ldrh	r3, [r7, #4]
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	80bb      	strh	r3, [r7, #4]
		usAdc += ((ucReg74 & 0x0C) >> 2);
 80035be:	79bb      	ldrb	r3, [r7, #6]
 80035c0:	109b      	asrs	r3, r3, #2
 80035c2:	b29b      	uxth	r3, r3
 80035c4:	f003 0303 	and.w	r3, r3, #3
 80035c8:	b29a      	uxth	r2, r3
 80035ca:	88bb      	ldrh	r3, [r7, #4]
 80035cc:	4413      	add	r3, r2
 80035ce:	80bb      	strh	r3, [r7, #4]

		s_usTouchY = usAdc;
 80035d0:	4a0c      	ldr	r2, [pc, #48]	; (8003604 <RA8875_TouchReadX+0xa0>)
 80035d2:	88bb      	ldrh	r3, [r7, #4]
 80035d4:	8013      	strh	r3, [r2, #0]
 80035d6:	e005      	b.n	80035e4 <RA8875_TouchReadX+0x80>
	}
	else
	{
		s_usTouchX = 0;
 80035d8:	4b09      	ldr	r3, [pc, #36]	; (8003600 <RA8875_TouchReadX+0x9c>)
 80035da:	2200      	movs	r2, #0
 80035dc:	801a      	strh	r2, [r3, #0]
		s_usTouchY = 0;
 80035de:	4b09      	ldr	r3, [pc, #36]	; (8003604 <RA8875_TouchReadX+0xa0>)
 80035e0:	2200      	movs	r2, #0
 80035e2:	801a      	strh	r2, [r3, #0]
	}

	RA8875_WriteCmd(0xF1);
 80035e4:	20f1      	movs	r0, #241	; 0xf1
 80035e6:	f001 f967 	bl	80048b8 <RA8875_WriteCmd>
	RA8875_WriteData(1 << 2);
 80035ea:	2004      	movs	r0, #4
 80035ec:	f001 f985 	bl	80048fa <RA8875_WriteData>

	return s_usTouchX;
 80035f0:	4b03      	ldr	r3, [pc, #12]	; (8003600 <RA8875_TouchReadX+0x9c>)
 80035f2:	881b      	ldrh	r3, [r3, #0]
 80035f4:	b29b      	uxth	r3, r3
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3708      	adds	r7, #8
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop
 8003600:	2000023c 	.word	0x2000023c
 8003604:	2000023e 	.word	0x2000023e

08003608 <RA8875_TouchReadY>:
*********************************************************************************************************
* Func name: RA8875_TouchReadY
*********************************************************************************************************
*/
uint16_t RA8875_TouchReadY(void)
{
 8003608:	b480      	push	{r7}
 800360a:	af00      	add	r7, sp, #0
	return s_usTouchY;
 800360c:	4b03      	ldr	r3, [pc, #12]	; (800361c <RA8875_TouchReadY+0x14>)
 800360e:	881b      	ldrh	r3, [r3, #0]
 8003610:	b29b      	uxth	r3, r3
}
 8003612:	4618      	mov	r0, r3
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr
 800361c:	2000023e 	.word	0x2000023e

08003620 <RA8875_FillRect>:
*********************************************************************************************************
* Func name: RA8875_FillRect
*********************************************************************************************************
*/
void RA8875_FillRect(uint16_t _usX, uint16_t _usY, uint16_t _usHeight, uint16_t _usWidth, uint16_t _usColor)
{
 8003620:	b590      	push	{r4, r7, lr}
 8003622:	b083      	sub	sp, #12
 8003624:	af00      	add	r7, sp, #0
 8003626:	4604      	mov	r4, r0
 8003628:	4608      	mov	r0, r1
 800362a:	4611      	mov	r1, r2
 800362c:	461a      	mov	r2, r3
 800362e:	4623      	mov	r3, r4
 8003630:	80fb      	strh	r3, [r7, #6]
 8003632:	4603      	mov	r3, r0
 8003634:	80bb      	strh	r3, [r7, #4]
 8003636:	460b      	mov	r3, r1
 8003638:	807b      	strh	r3, [r7, #2]
 800363a:	4613      	mov	r3, r2
 800363c:	803b      	strh	r3, [r7, #0]
	RA8875_WriteReg(0x91, _usX);
 800363e:	88fb      	ldrh	r3, [r7, #6]
 8003640:	b2db      	uxtb	r3, r3
 8003642:	4619      	mov	r1, r3
 8003644:	2091      	movs	r0, #145	; 0x91
 8003646:	f7ff fb15 	bl	8002c74 <RA8875_WriteReg>
	RA8875_WriteReg(0x92, _usX >> 8);
 800364a:	88fb      	ldrh	r3, [r7, #6]
 800364c:	0a1b      	lsrs	r3, r3, #8
 800364e:	b29b      	uxth	r3, r3
 8003650:	b2db      	uxtb	r3, r3
 8003652:	4619      	mov	r1, r3
 8003654:	2092      	movs	r0, #146	; 0x92
 8003656:	f7ff fb0d 	bl	8002c74 <RA8875_WriteReg>
	RA8875_WriteReg(0x93, _usY);
 800365a:	88bb      	ldrh	r3, [r7, #4]
 800365c:	b2db      	uxtb	r3, r3
 800365e:	4619      	mov	r1, r3
 8003660:	2093      	movs	r0, #147	; 0x93
 8003662:	f7ff fb07 	bl	8002c74 <RA8875_WriteReg>
	RA8875_WriteReg(0x94, _usY >> 8);
 8003666:	88bb      	ldrh	r3, [r7, #4]
 8003668:	0a1b      	lsrs	r3, r3, #8
 800366a:	b29b      	uxth	r3, r3
 800366c:	b2db      	uxtb	r3, r3
 800366e:	4619      	mov	r1, r3
 8003670:	2094      	movs	r0, #148	; 0x94
 8003672:	f7ff faff 	bl	8002c74 <RA8875_WriteReg>

	RA8875_WriteReg(0x95, _usX + _usWidth - 1);
 8003676:	88fb      	ldrh	r3, [r7, #6]
 8003678:	b2da      	uxtb	r2, r3
 800367a:	883b      	ldrh	r3, [r7, #0]
 800367c:	b2db      	uxtb	r3, r3
 800367e:	4413      	add	r3, r2
 8003680:	b2db      	uxtb	r3, r3
 8003682:	3b01      	subs	r3, #1
 8003684:	b2db      	uxtb	r3, r3
 8003686:	4619      	mov	r1, r3
 8003688:	2095      	movs	r0, #149	; 0x95
 800368a:	f7ff faf3 	bl	8002c74 <RA8875_WriteReg>
	RA8875_WriteReg(0x96, (_usX + _usWidth - 1) >> 8);
 800368e:	88fa      	ldrh	r2, [r7, #6]
 8003690:	883b      	ldrh	r3, [r7, #0]
 8003692:	4413      	add	r3, r2
 8003694:	3b01      	subs	r3, #1
 8003696:	121b      	asrs	r3, r3, #8
 8003698:	b2db      	uxtb	r3, r3
 800369a:	4619      	mov	r1, r3
 800369c:	2096      	movs	r0, #150	; 0x96
 800369e:	f7ff fae9 	bl	8002c74 <RA8875_WriteReg>
	RA8875_WriteReg(0x97, _usY + _usHeight - 1);
 80036a2:	88bb      	ldrh	r3, [r7, #4]
 80036a4:	b2da      	uxtb	r2, r3
 80036a6:	887b      	ldrh	r3, [r7, #2]
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	4413      	add	r3, r2
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	3b01      	subs	r3, #1
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	4619      	mov	r1, r3
 80036b4:	2097      	movs	r0, #151	; 0x97
 80036b6:	f7ff fadd 	bl	8002c74 <RA8875_WriteReg>
	RA8875_WriteReg(0x98, (_usY + _usHeight - 1) >> 8);
 80036ba:	88ba      	ldrh	r2, [r7, #4]
 80036bc:	887b      	ldrh	r3, [r7, #2]
 80036be:	4413      	add	r3, r2
 80036c0:	3b01      	subs	r3, #1
 80036c2:	121b      	asrs	r3, r3, #8
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	4619      	mov	r1, r3
 80036c8:	2098      	movs	r0, #152	; 0x98
 80036ca:	f7ff fad3 	bl	8002c74 <RA8875_WriteReg>

	RA8875_SetFrontColor(_usColor);	/* ÉèÖÃÑÕÉ« */
 80036ce:	8b3b      	ldrh	r3, [r7, #24]
 80036d0:	4618      	mov	r0, r3
 80036d2:	f7ff fd2d 	bl	8003130 <RA8875_SetFrontColor>

	s_ucRA8875Busy = 1;
 80036d6:	4b09      	ldr	r3, [pc, #36]	; (80036fc <RA8875_FillRect+0xdc>)
 80036d8:	2201      	movs	r2, #1
 80036da:	701a      	strb	r2, [r3, #0]
	//	RA8875_WriteReg(0x90, (1 << 7) | (1 << 5) | (1 << 4) | (0 << 0));	/* ¿ªÊ¼Ìî³ä¾ØÐÎ  */
	RA8875_WriteCmd(0x90);
 80036dc:	2090      	movs	r0, #144	; 0x90
 80036de:	f001 f8eb 	bl	80048b8 <RA8875_WriteCmd>
	RA8875_WriteData((1 << 7) | (1 << 5) | (1 << 4) | (0 << 0));
 80036e2:	20b0      	movs	r0, #176	; 0xb0
 80036e4:	f001 f909 	bl	80048fa <RA8875_WriteData>
	//	while (RA8875_ReadReg(0x90) & (1 << 7));							/* µÈ´ý½áÊø */
	RA8875_WaitBusy();
 80036e8:	f7ff fece 	bl	8003488 <RA8875_WaitBusy>
	s_ucRA8875Busy = 0;
 80036ec:	4b03      	ldr	r3, [pc, #12]	; (80036fc <RA8875_FillRect+0xdc>)
 80036ee:	2200      	movs	r2, #0
 80036f0:	701a      	strb	r2, [r3, #0]
}
 80036f2:	bf00      	nop
 80036f4:	370c      	adds	r7, #12
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd90      	pop	{r4, r7, pc}
 80036fa:	bf00      	nop
 80036fc:	20000240 	.word	0x20000240

08003700 <SPFD5420_ReadID>:
*********************************************************************************************************
*	Func name: SPFD5420_ReadID
*********************************************************************************************************
*/
uint16_t SPFD5420_ReadID(void)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	af00      	add	r7, sp, #0
	return SPFD5420_ReadReg(0x0000);
 8003704:	2000      	movs	r0, #0
 8003706:	f000 f803 	bl	8003710 <SPFD5420_ReadReg>
 800370a:	4603      	mov	r3, r0
}
 800370c:	4618      	mov	r0, r3
 800370e:	bd80      	pop	{r7, pc}

08003710 <SPFD5420_ReadReg>:
*			SPFD5420_RegValue : ¼Ä´æÆ÷Öµ
*	·µ »Ø Öµ: ÎÞ
*********************************************************************************************************
*/
static uint16_t SPFD5420_ReadReg(__IO uint16_t _usAddr)
{
 8003710:	b480      	push	{r7}
 8003712:	b083      	sub	sp, #12
 8003714:	af00      	add	r7, sp, #0
 8003716:	4603      	mov	r3, r0
 8003718:	80fb      	strh	r3, [r7, #6]
	/* Write 16-bit Index (then Read Reg) */
	SPFD5420_REG = _usAddr;
 800371a:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 800371e:	88fa      	ldrh	r2, [r7, #6]
 8003720:	b292      	uxth	r2, r2
 8003722:	801a      	strh	r2, [r3, #0]
	/* Read 16-bit Reg */
	return (SPFD5420_RAM);
 8003724:	4b04      	ldr	r3, [pc, #16]	; (8003738 <SPFD5420_ReadReg+0x28>)
 8003726:	881b      	ldrh	r3, [r3, #0]
 8003728:	b29b      	uxth	r3, r3
}
 800372a:	4618      	mov	r0, r3
 800372c:	370c      	adds	r7, #12
 800372e:	46bd      	mov	sp, r7
 8003730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003734:	4770      	bx	lr
 8003736:	bf00      	nop
 8003738:	60080000 	.word	0x60080000

0800373c <ee_ReadBytes>:
*********************************************************************************************************
*	Func name: ee_ReadBytes
*********************************************************************************************************
*/
uint8_t ee_ReadBytes(uint8_t *_pReadBuf, uint16_t _usAddress, uint16_t _usSize)
{
 800373c:	b590      	push	{r4, r7, lr}
 800373e:	b085      	sub	sp, #20
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
 8003744:	460b      	mov	r3, r1
 8003746:	807b      	strh	r3, [r7, #2]
 8003748:	4613      	mov	r3, r2
 800374a:	803b      	strh	r3, [r7, #0]
	uint16_t i;

	i2c_Start();
 800374c:	f000 fa5a 	bl	8003c04 <i2c_Start>

	i2c_SendByte(EE_DEV_ADDR | I2C_WR);	/* ´Ë´¦ÊÇÐ´Ö¸Áî */
 8003750:	20a0      	movs	r0, #160	; 0xa0
 8003752:	f000 fa77 	bl	8003c44 <i2c_SendByte>

	if (i2c_WaitAck() != 0)
 8003756:	f000 fae5 	bl	8003d24 <i2c_WaitAck>
 800375a:	4603      	mov	r3, r0
 800375c:	2b00      	cmp	r3, #0
 800375e:	d13e      	bne.n	80037de <ee_ReadBytes+0xa2>
			goto cmd_fail;	/* EEPROMÆ÷¼þÎÞÓ¦´ð */
		}
	}
	else
	{
		i2c_SendByte(_usAddress >> 8);
 8003760:	887b      	ldrh	r3, [r7, #2]
 8003762:	0a1b      	lsrs	r3, r3, #8
 8003764:	b29b      	uxth	r3, r3
 8003766:	b2db      	uxtb	r3, r3
 8003768:	4618      	mov	r0, r3
 800376a:	f000 fa6b 	bl	8003c44 <i2c_SendByte>
		if (i2c_WaitAck() != 0)
 800376e:	f000 fad9 	bl	8003d24 <i2c_WaitAck>
 8003772:	4603      	mov	r3, r0
 8003774:	2b00      	cmp	r3, #0
 8003776:	d134      	bne.n	80037e2 <ee_ReadBytes+0xa6>
		{
			goto cmd_fail;	/* EEPROMÆ÷¼þÎÞÓ¦´ð */
		}
		i2c_SendByte(_usAddress);
 8003778:	887b      	ldrh	r3, [r7, #2]
 800377a:	b2db      	uxtb	r3, r3
 800377c:	4618      	mov	r0, r3
 800377e:	f000 fa61 	bl	8003c44 <i2c_SendByte>
		if (i2c_WaitAck() != 0)
 8003782:	f000 facf 	bl	8003d24 <i2c_WaitAck>
 8003786:	4603      	mov	r3, r0
 8003788:	2b00      	cmp	r3, #0
 800378a:	d12c      	bne.n	80037e6 <ee_ReadBytes+0xaa>
		{
			goto cmd_fail;	/* EEPROMÆ÷¼þÎÞÓ¦´ð */
		}
	}
	i2c_Start();
 800378c:	f000 fa3a 	bl	8003c04 <i2c_Start>
	i2c_SendByte(EE_DEV_ADDR | I2C_RD);
 8003790:	20a1      	movs	r0, #161	; 0xa1
 8003792:	f000 fa57 	bl	8003c44 <i2c_SendByte>

	if (i2c_WaitAck() != 0)
 8003796:	f000 fac5 	bl	8003d24 <i2c_WaitAck>
 800379a:	4603      	mov	r3, r0
 800379c:	2b00      	cmp	r3, #0
 800379e:	d124      	bne.n	80037ea <ee_ReadBytes+0xae>
	{
		goto cmd_fail;	/* EEPROMÆ÷¼þÎÞÓ¦´ð */
	}
	for (i = 0; i < _usSize; i++)
 80037a0:	2300      	movs	r3, #0
 80037a2:	81fb      	strh	r3, [r7, #14]
 80037a4:	e013      	b.n	80037ce <ee_ReadBytes+0x92>
	{
		_pReadBuf[i] = i2c_ReadByte();	/* ¶Á1¸ö×Ö½Ú */
 80037a6:	89fb      	ldrh	r3, [r7, #14]
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	18d4      	adds	r4, r2, r3
 80037ac:	f000 fa8a 	bl	8003cc4 <i2c_ReadByte>
 80037b0:	4603      	mov	r3, r0
 80037b2:	7023      	strb	r3, [r4, #0]

		if (i != _usSize - 1)
 80037b4:	89fa      	ldrh	r2, [r7, #14]
 80037b6:	883b      	ldrh	r3, [r7, #0]
 80037b8:	3b01      	subs	r3, #1
 80037ba:	429a      	cmp	r2, r3
 80037bc:	d002      	beq.n	80037c4 <ee_ReadBytes+0x88>
		{
			i2c_Ack();
 80037be:	f000 fadd 	bl	8003d7c <i2c_Ack>
 80037c2:	e001      	b.n	80037c8 <ee_ReadBytes+0x8c>
		}
		else
		{
			i2c_NAck();	/* ×îºó1¸ö×Ö½Ú¶ÁÍêºó£¬CPU²úÉúNACKÐÅºÅ(Çý¶¯SDA = 1) */
 80037c4:	f000 fafa 	bl	8003dbc <i2c_NAck>
	for (i = 0; i < _usSize; i++)
 80037c8:	89fb      	ldrh	r3, [r7, #14]
 80037ca:	3301      	adds	r3, #1
 80037cc:	81fb      	strh	r3, [r7, #14]
 80037ce:	89fa      	ldrh	r2, [r7, #14]
 80037d0:	883b      	ldrh	r3, [r7, #0]
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d3e7      	bcc.n	80037a6 <ee_ReadBytes+0x6a>
		}
	}
	i2c_Stop();
 80037d6:	f000 fb0d 	bl	8003df4 <i2c_Stop>
	return 1;
 80037da:	2301      	movs	r3, #1
 80037dc:	e009      	b.n	80037f2 <ee_ReadBytes+0xb6>
		goto cmd_fail;
 80037de:	bf00      	nop
 80037e0:	e004      	b.n	80037ec <ee_ReadBytes+0xb0>
			goto cmd_fail;	/* EEPROMÆ÷¼þÎÞÓ¦´ð */
 80037e2:	bf00      	nop
 80037e4:	e002      	b.n	80037ec <ee_ReadBytes+0xb0>
			goto cmd_fail;	/* EEPROMÆ÷¼þÎÞÓ¦´ð */
 80037e6:	bf00      	nop
 80037e8:	e000      	b.n	80037ec <ee_ReadBytes+0xb0>
		goto cmd_fail;	/* EEPROMÆ÷¼þÎÞÓ¦´ð */
 80037ea:	bf00      	nop
cmd_fail:
	i2c_Stop();
 80037ec:	f000 fb02 	bl	8003df4 <i2c_Stop>
	return 0;
 80037f0:	2300      	movs	r3, #0
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3714      	adds	r7, #20
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd90      	pop	{r4, r7, pc}

080037fa <ee_WriteBytes>:
*********************************************************************************************************
*	Func name: ee_WriteBytes
*********************************************************************************************************
*/
uint8_t ee_WriteBytes(uint8_t *_pWriteBuf, uint16_t _usAddress, uint16_t _usSize)
{
 80037fa:	b580      	push	{r7, lr}
 80037fc:	b084      	sub	sp, #16
 80037fe:	af00      	add	r7, sp, #0
 8003800:	6078      	str	r0, [r7, #4]
 8003802:	460b      	mov	r3, r1
 8003804:	807b      	strh	r3, [r7, #2]
 8003806:	4613      	mov	r3, r2
 8003808:	803b      	strh	r3, [r7, #0]
	uint16_t i,m;
	uint16_t usAddr;

	usAddr = _usAddress;
 800380a:	887b      	ldrh	r3, [r7, #2]
 800380c:	817b      	strh	r3, [r7, #10]
	for (i = 0; i < _usSize; i++)
 800380e:	2300      	movs	r3, #0
 8003810:	81fb      	strh	r3, [r7, #14]
 8003812:	e04b      	b.n	80038ac <ee_WriteBytes+0xb2>
	{

		if ((i == 0) || (usAddr & (EE_PAGE_SIZE - 1)) == 0)
 8003814:	89fb      	ldrh	r3, [r7, #14]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d004      	beq.n	8003824 <ee_WriteBytes+0x2a>
 800381a:	897b      	ldrh	r3, [r7, #10]
 800381c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003820:	2b00      	cmp	r3, #0
 8003822:	d131      	bne.n	8003888 <ee_WriteBytes+0x8e>
		{
			i2c_Stop();
 8003824:	f000 fae6 	bl	8003df4 <i2c_Stop>

			for (m = 0; m < 1000; m++)
 8003828:	2300      	movs	r3, #0
 800382a:	81bb      	strh	r3, [r7, #12]
 800382c:	e00c      	b.n	8003848 <ee_WriteBytes+0x4e>
			{
				i2c_Start();
 800382e:	f000 f9e9 	bl	8003c04 <i2c_Start>

				i2c_SendByte(EE_DEV_ADDR | I2C_WR);	/* ´Ë´¦ÊÇÐ´Ö¸Áî */
 8003832:	20a0      	movs	r0, #160	; 0xa0
 8003834:	f000 fa06 	bl	8003c44 <i2c_SendByte>

				if (i2c_WaitAck() == 0)
 8003838:	f000 fa74 	bl	8003d24 <i2c_WaitAck>
 800383c:	4603      	mov	r3, r0
 800383e:	2b00      	cmp	r3, #0
 8003840:	d007      	beq.n	8003852 <ee_WriteBytes+0x58>
			for (m = 0; m < 1000; m++)
 8003842:	89bb      	ldrh	r3, [r7, #12]
 8003844:	3301      	adds	r3, #1
 8003846:	81bb      	strh	r3, [r7, #12]
 8003848:	89bb      	ldrh	r3, [r7, #12]
 800384a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800384e:	d3ee      	bcc.n	800382e <ee_WriteBytes+0x34>
 8003850:	e000      	b.n	8003854 <ee_WriteBytes+0x5a>
				{
					break;
 8003852:	bf00      	nop
				}
			}
			if (m  == 1000)
 8003854:	89bb      	ldrh	r3, [r7, #12]
 8003856:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800385a:	d02f      	beq.n	80038bc <ee_WriteBytes+0xc2>
					goto cmd_fail;
				}
			}
			else
			{
				i2c_SendByte(usAddr >> 8);
 800385c:	897b      	ldrh	r3, [r7, #10]
 800385e:	0a1b      	lsrs	r3, r3, #8
 8003860:	b29b      	uxth	r3, r3
 8003862:	b2db      	uxtb	r3, r3
 8003864:	4618      	mov	r0, r3
 8003866:	f000 f9ed 	bl	8003c44 <i2c_SendByte>
				if (i2c_WaitAck() != 0)
 800386a:	f000 fa5b 	bl	8003d24 <i2c_WaitAck>
 800386e:	4603      	mov	r3, r0
 8003870:	2b00      	cmp	r3, #0
 8003872:	d125      	bne.n	80038c0 <ee_WriteBytes+0xc6>
				{
					goto cmd_fail;	/* EEPROMÆ÷¼þÎÞÓ¦´ð */
				}
				i2c_SendByte(usAddr);
 8003874:	897b      	ldrh	r3, [r7, #10]
 8003876:	b2db      	uxtb	r3, r3
 8003878:	4618      	mov	r0, r3
 800387a:	f000 f9e3 	bl	8003c44 <i2c_SendByte>
				if (i2c_WaitAck() != 0)
 800387e:	f000 fa51 	bl	8003d24 <i2c_WaitAck>
 8003882:	4603      	mov	r3, r0
 8003884:	2b00      	cmp	r3, #0
 8003886:	d11d      	bne.n	80038c4 <ee_WriteBytes+0xca>
					goto cmd_fail;	/* EEPROMÆ÷¼þÎÞÓ¦´ð */
				}
			}
		}
		/* µÚ6²½£º¿ªÊ¼Ð´ÈëÊý¾Ý */
		i2c_SendByte(_pWriteBuf[i]);
 8003888:	89fb      	ldrh	r3, [r7, #14]
 800388a:	687a      	ldr	r2, [r7, #4]
 800388c:	4413      	add	r3, r2
 800388e:	781b      	ldrb	r3, [r3, #0]
 8003890:	4618      	mov	r0, r3
 8003892:	f000 f9d7 	bl	8003c44 <i2c_SendByte>
		/* µÚ7²½£º·¢ËÍACK */
		if (i2c_WaitAck() != 0)
 8003896:	f000 fa45 	bl	8003d24 <i2c_WaitAck>
 800389a:	4603      	mov	r3, r0
 800389c:	2b00      	cmp	r3, #0
 800389e:	d113      	bne.n	80038c8 <ee_WriteBytes+0xce>
		{
			goto cmd_fail;	/* EEPROMÆ÷¼þÎÞÓ¦´ð */
		}
		usAddr++;	/* µØÖ·Ôö1 */
 80038a0:	897b      	ldrh	r3, [r7, #10]
 80038a2:	3301      	adds	r3, #1
 80038a4:	817b      	strh	r3, [r7, #10]
	for (i = 0; i < _usSize; i++)
 80038a6:	89fb      	ldrh	r3, [r7, #14]
 80038a8:	3301      	adds	r3, #1
 80038aa:	81fb      	strh	r3, [r7, #14]
 80038ac:	89fa      	ldrh	r2, [r7, #14]
 80038ae:	883b      	ldrh	r3, [r7, #0]
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d3af      	bcc.n	8003814 <ee_WriteBytes+0x1a>
	}
	/* ÃüÁîÖ´ÐÐ³É¹¦£¬·¢ËÍI2C×ÜÏßÍ£Ö¹ÐÅºÅ */
	i2c_Stop();
 80038b4:	f000 fa9e 	bl	8003df4 <i2c_Stop>
	return 1;
 80038b8:	2301      	movs	r3, #1
 80038ba:	e009      	b.n	80038d0 <ee_WriteBytes+0xd6>
				goto cmd_fail;	/* EEPROMÆ÷¼þÐ´³¬Ê± */
 80038bc:	bf00      	nop
 80038be:	e004      	b.n	80038ca <ee_WriteBytes+0xd0>
					goto cmd_fail;	/* EEPROMÆ÷¼þÎÞÓ¦´ð */
 80038c0:	bf00      	nop
 80038c2:	e002      	b.n	80038ca <ee_WriteBytes+0xd0>
					goto cmd_fail;	/* EEPROMÆ÷¼þÎÞÓ¦´ð */
 80038c4:	bf00      	nop
 80038c6:	e000      	b.n	80038ca <ee_WriteBytes+0xd0>
			goto cmd_fail;	/* EEPROMÆ÷¼þÎÞÓ¦´ð */
 80038c8:	bf00      	nop
cmd_fail: /* ÃüÁîÖ´ÐÐÊ§°Üºó£¬ÇÐ¼Ç·¢ËÍÍ£Ö¹ÐÅºÅ£¬±ÜÃâÓ°ÏìI2C×ÜÏßÉÏÆäËûÉè±¸ */
	/* ·¢ËÍI2C×ÜÏßÍ£Ö¹ÐÅºÅ */
	i2c_Stop();
 80038ca:	f000 fa93 	bl	8003df4 <i2c_Stop>
	return 0;
 80038ce:	2300      	movs	r3, #0
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	3710      	adds	r7, #16
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}

080038d8 <bsp_InitExtSRAM>:
*	func name: bsp_InitExtSRAM
*	SRAM_HandleTypeDef , FSMC_NORSRAM_TimingTypeDef
*********************************************************************************************************
*/
void bsp_InitExtSRAM(void)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b0ac      	sub	sp, #176	; 0xb0
 80038dc:	af00      	add	r7, sp, #0
	SRAM_HandleTypeDef hnorsram;
	FSMC_NORSRAM_TimingTypeDef  timingWrite;
	FSMC_NORSRAM_TimingTypeDef  timingRead;
	GPIO_InitTypeDef GPIO_InitStructure;

	__HAL_RCC_GPIOD_CLK_ENABLE();
 80038de:	2300      	movs	r3, #0
 80038e0:	613b      	str	r3, [r7, #16]
 80038e2:	4b62      	ldr	r3, [pc, #392]	; (8003a6c <bsp_InitExtSRAM+0x194>)
 80038e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e6:	4a61      	ldr	r2, [pc, #388]	; (8003a6c <bsp_InitExtSRAM+0x194>)
 80038e8:	f043 0308 	orr.w	r3, r3, #8
 80038ec:	6313      	str	r3, [r2, #48]	; 0x30
 80038ee:	4b5f      	ldr	r3, [pc, #380]	; (8003a6c <bsp_InitExtSRAM+0x194>)
 80038f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f2:	f003 0308 	and.w	r3, r3, #8
 80038f6:	613b      	str	r3, [r7, #16]
 80038f8:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80038fa:	2300      	movs	r3, #0
 80038fc:	60fb      	str	r3, [r7, #12]
 80038fe:	4b5b      	ldr	r3, [pc, #364]	; (8003a6c <bsp_InitExtSRAM+0x194>)
 8003900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003902:	4a5a      	ldr	r2, [pc, #360]	; (8003a6c <bsp_InitExtSRAM+0x194>)
 8003904:	f043 0310 	orr.w	r3, r3, #16
 8003908:	6313      	str	r3, [r2, #48]	; 0x30
 800390a:	4b58      	ldr	r3, [pc, #352]	; (8003a6c <bsp_InitExtSRAM+0x194>)
 800390c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800390e:	f003 0310 	and.w	r3, r3, #16
 8003912:	60fb      	str	r3, [r7, #12]
 8003914:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8003916:	2300      	movs	r3, #0
 8003918:	60bb      	str	r3, [r7, #8]
 800391a:	4b54      	ldr	r3, [pc, #336]	; (8003a6c <bsp_InitExtSRAM+0x194>)
 800391c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800391e:	4a53      	ldr	r2, [pc, #332]	; (8003a6c <bsp_InitExtSRAM+0x194>)
 8003920:	f043 0320 	orr.w	r3, r3, #32
 8003924:	6313      	str	r3, [r2, #48]	; 0x30
 8003926:	4b51      	ldr	r3, [pc, #324]	; (8003a6c <bsp_InitExtSRAM+0x194>)
 8003928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800392a:	f003 0320 	and.w	r3, r3, #32
 800392e:	60bb      	str	r3, [r7, #8]
 8003930:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8003932:	2300      	movs	r3, #0
 8003934:	607b      	str	r3, [r7, #4]
 8003936:	4b4d      	ldr	r3, [pc, #308]	; (8003a6c <bsp_InitExtSRAM+0x194>)
 8003938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800393a:	4a4c      	ldr	r2, [pc, #304]	; (8003a6c <bsp_InitExtSRAM+0x194>)
 800393c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003940:	6313      	str	r3, [r2, #48]	; 0x30
 8003942:	4b4a      	ldr	r3, [pc, #296]	; (8003a6c <bsp_InitExtSRAM+0x194>)
 8003944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003946:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800394a:	607b      	str	r3, [r7, #4]
 800394c:	687b      	ldr	r3, [r7, #4]

	__HAL_RCC_FSMC_CLK_ENABLE();
 800394e:	2300      	movs	r3, #0
 8003950:	603b      	str	r3, [r7, #0]
 8003952:	4b46      	ldr	r3, [pc, #280]	; (8003a6c <bsp_InitExtSRAM+0x194>)
 8003954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003956:	4a45      	ldr	r2, [pc, #276]	; (8003a6c <bsp_InitExtSRAM+0x194>)
 8003958:	f043 0301 	orr.w	r3, r3, #1
 800395c:	6393      	str	r3, [r2, #56]	; 0x38
 800395e:	4b43      	ldr	r3, [pc, #268]	; (8003a6c <bsp_InitExtSRAM+0x194>)
 8003960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003962:	f003 0301 	and.w	r3, r3, #1
 8003966:	603b      	str	r3, [r7, #0]
 8003968:	683b      	ldr	r3, [r7, #0]
		PG5/FSMC_A15
		PG10/FSMC_NE3	--- Æ¬Ñ¡Ö÷ÐÅºÅ
	*/

	/* GPIOD configuration */
	GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_4  | GPIO_PIN_5  |
 800396a:	f64f 7333 	movw	r3, #65331	; 0xff33
 800396e:	617b      	str	r3, [r7, #20]
		                    GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 | GPIO_PIN_11 |
		                    GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
	GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8003970:	2302      	movs	r3, #2
 8003972:	61bb      	str	r3, [r7, #24]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003974:	2303      	movs	r3, #3
 8003976:	623b      	str	r3, [r7, #32]
	GPIO_InitStructure.Pull = GPIO_NOPULL;
 8003978:	2300      	movs	r3, #0
 800397a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStructure.Alternate = GPIO_AF12_FSMC;
 800397c:	230c      	movs	r3, #12
 800397e:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8003980:	f107 0314 	add.w	r3, r7, #20
 8003984:	4619      	mov	r1, r3
 8003986:	483a      	ldr	r0, [pc, #232]	; (8003a70 <bsp_InitExtSRAM+0x198>)
 8003988:	f003 fa8e 	bl	8006ea8 <HAL_GPIO_Init>

	/* GPIOE configuration */
	GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_3 |
 800398c:	f64f 73bb 	movw	r3, #65467	; 0xffbb
 8003990:	617b      	str	r3, [r7, #20]
		                    GPIO_PIN_4  | GPIO_PIN_5  | GPIO_PIN_7 |
		                    GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 | GPIO_PIN_11|
		                    GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
	GPIO_InitStructure.Alternate = GPIO_AF12_FSMC;
 8003992:	230c      	movs	r3, #12
 8003994:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8003996:	f107 0314 	add.w	r3, r7, #20
 800399a:	4619      	mov	r1, r3
 800399c:	4835      	ldr	r0, [pc, #212]	; (8003a74 <bsp_InitExtSRAM+0x19c>)
 800399e:	f003 fa83 	bl	8006ea8 <HAL_GPIO_Init>

	/* GPIOF configuration */
	GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_2  | GPIO_PIN_3  |
 80039a2:	f24f 033f 	movw	r3, #61503	; 0xf03f
 80039a6:	617b      	str	r3, [r7, #20]
		                    GPIO_PIN_4  | GPIO_PIN_5  | GPIO_PIN_12 | GPIO_PIN_13 |
		                    GPIO_PIN_14 | GPIO_PIN_15;
	GPIO_InitStructure.Alternate = GPIO_AF12_FSMC;
 80039a8:	230c      	movs	r3, #12
 80039aa:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 80039ac:	f107 0314 	add.w	r3, r7, #20
 80039b0:	4619      	mov	r1, r3
 80039b2:	4831      	ldr	r0, [pc, #196]	; (8003a78 <bsp_InitExtSRAM+0x1a0>)
 80039b4:	f003 fa78 	bl	8006ea8 <HAL_GPIO_Init>

	/* GPIOG configuration */
	GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_2  | GPIO_PIN_3 |
 80039b8:	f240 433f 	movw	r3, #1087	; 0x43f
 80039bc:	617b      	str	r3, [r7, #20]
		                    GPIO_PIN_4  | GPIO_PIN_5  |GPIO_PIN_10;
	GPIO_InitStructure.Alternate = GPIO_AF12_FSMC;
 80039be:	230c      	movs	r3, #12
 80039c0:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80039c2:	f107 0314 	add.w	r3, r7, #20
 80039c6:	4619      	mov	r1, r3
 80039c8:	482c      	ldr	r0, [pc, #176]	; (8003a7c <bsp_InitExtSRAM+0x1a4>)
 80039ca:	f003 fa6d 	bl	8006ea8 <HAL_GPIO_Init>

	/*-- FSMC Configuration ------------------------------------------------------*/
	timingWrite.AddressSetupTime = 3;
 80039ce:	2303      	movs	r3, #3
 80039d0:	647b      	str	r3, [r7, #68]	; 0x44
	timingWrite.AddressHoldTime = 0;
 80039d2:	2300      	movs	r3, #0
 80039d4:	64bb      	str	r3, [r7, #72]	; 0x48
	timingWrite.DataSetupTime = 2;
 80039d6:	2302      	movs	r3, #2
 80039d8:	64fb      	str	r3, [r7, #76]	; 0x4c
	timingWrite.BusTurnAroundDuration = 1;
 80039da:	2301      	movs	r3, #1
 80039dc:	653b      	str	r3, [r7, #80]	; 0x50
	timingWrite.CLKDivision = 0;
 80039de:	2300      	movs	r3, #0
 80039e0:	657b      	str	r3, [r7, #84]	; 0x54
	timingWrite.DataLatency = 0;
 80039e2:	2300      	movs	r3, #0
 80039e4:	65bb      	str	r3, [r7, #88]	; 0x58
	timingWrite.AccessMode = FSMC_ACCESS_MODE_A;
 80039e6:	2300      	movs	r3, #0
 80039e8:	65fb      	str	r3, [r7, #92]	; 0x5c

	timingRead.AddressSetupTime = 3;
 80039ea:	2303      	movs	r3, #3
 80039ec:	62bb      	str	r3, [r7, #40]	; 0x28
	timingRead.AddressHoldTime = 0;
 80039ee:	2300      	movs	r3, #0
 80039f0:	62fb      	str	r3, [r7, #44]	; 0x2c
	timingRead.DataSetupTime = 2;
 80039f2:	2302      	movs	r3, #2
 80039f4:	633b      	str	r3, [r7, #48]	; 0x30
	timingRead.BusTurnAroundDuration = 1;
 80039f6:	2301      	movs	r3, #1
 80039f8:	637b      	str	r3, [r7, #52]	; 0x34
	timingRead.CLKDivision = 0;
 80039fa:	2300      	movs	r3, #0
 80039fc:	63bb      	str	r3, [r7, #56]	; 0x38
	timingRead.DataLatency = 0;
 80039fe:	2300      	movs	r3, #0
 8003a00:	63fb      	str	r3, [r7, #60]	; 0x3c
	timingRead.AccessMode = FSMC_ACCESS_MODE_A;
 8003a02:	2300      	movs	r3, #0
 8003a04:	643b      	str	r3, [r7, #64]	; 0x40

	hnorsram.Instance = FSMC_NORSRAM_DEVICE;
 8003a06:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8003a0a:	663b      	str	r3, [r7, #96]	; 0x60
	hnorsram.Init.NSBank = FSMC_NORSRAM_BANK3;
 8003a0c:	2304      	movs	r3, #4
 8003a0e:	66bb      	str	r3, [r7, #104]	; 0x68
	hnorsram.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8003a10:	2300      	movs	r3, #0
 8003a12:	66fb      	str	r3, [r7, #108]	; 0x6c
	hnorsram.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8003a14:	2300      	movs	r3, #0
 8003a16:	673b      	str	r3, [r7, #112]	; 0x70
	hnorsram.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8003a18:	2310      	movs	r3, #16
 8003a1a:	677b      	str	r3, [r7, #116]	; 0x74
	hnorsram.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	67bb      	str	r3, [r7, #120]	; 0x78
	hnorsram.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8003a20:	2300      	movs	r3, #0
 8003a22:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	hnorsram.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8003a26:	2300      	movs	r3, #0
 8003a28:	67fb      	str	r3, [r7, #124]	; 0x7c
	hnorsram.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	hnorsram.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8003a30:	2300      	movs	r3, #0
 8003a32:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	hnorsram.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8003a36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a3a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	hnorsram.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	hnorsram.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8003a44:	2300      	movs	r3, #0
 8003a46:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	hnorsram.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

	HAL_SRAM_Init(&hnorsram, &timingRead, &timingWrite);
 8003a50:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8003a54:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8003a58:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f7fe facd 	bl	8001ffc <HAL_SRAM_Init>
}
 8003a62:	bf00      	nop
 8003a64:	37b0      	adds	r7, #176	; 0xb0
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	40023800 	.word	0x40023800
 8003a70:	40020c00 	.word	0x40020c00
 8003a74:	40021000 	.word	0x40021000
 8003a78:	40021400 	.word	0x40021400
 8003a7c:	40021800 	.word	0x40021800

08003a80 <bsp_TestExtSRAM>:
*********************************************************************************************************
*	Func name: bsp_TestExtSRAM
*********************************************************************************************************
*/
uint8_t bsp_TestExtSRAM(void)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b087      	sub	sp, #28
 8003a84:	af00      	add	r7, sp, #0
	uint32_t i;
	uint32_t *pSRAM;
	uint8_t *pBytes;
	uint32_t err;
	const uint8_t ByteBuf[4] = {0x55, 0xA5, 0x5A, 0xAA};
 8003a86:	4b54      	ldr	r3, [pc, #336]	; (8003bd8 <bsp_TestExtSRAM+0x158>)
 8003a88:	607b      	str	r3, [r7, #4]

	/* Ð´SRAM */
	pSRAM = (uint32_t *)EXT_SRAM_ADDR;
 8003a8a:	f04f 43d0 	mov.w	r3, #1744830464	; 0x68000000
 8003a8e:	613b      	str	r3, [r7, #16]
	for (i = 0; i < EXT_SRAM_SIZE / 4; i++)
 8003a90:	2300      	movs	r3, #0
 8003a92:	617b      	str	r3, [r7, #20]
 8003a94:	e007      	b.n	8003aa6 <bsp_TestExtSRAM+0x26>
	{
		*pSRAM++ = i;
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	1d1a      	adds	r2, r3, #4
 8003a9a:	613a      	str	r2, [r7, #16]
 8003a9c:	697a      	ldr	r2, [r7, #20]
 8003a9e:	601a      	str	r2, [r3, #0]
	for (i = 0; i < EXT_SRAM_SIZE / 4; i++)
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	3301      	adds	r3, #1
 8003aa4:	617b      	str	r3, [r7, #20]
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003aac:	d3f3      	bcc.n	8003a96 <bsp_TestExtSRAM+0x16>
	}

	/* ¶ÁSRAM */
	err = 0;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	60bb      	str	r3, [r7, #8]
	pSRAM = (uint32_t *)EXT_SRAM_ADDR;
 8003ab2:	f04f 43d0 	mov.w	r3, #1744830464	; 0x68000000
 8003ab6:	613b      	str	r3, [r7, #16]
	for (i = 0; i < EXT_SRAM_SIZE / 4; i++)
 8003ab8:	2300      	movs	r3, #0
 8003aba:	617b      	str	r3, [r7, #20]
 8003abc:	e00c      	b.n	8003ad8 <bsp_TestExtSRAM+0x58>
	{
		if (*pSRAM++ != i)
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	1d1a      	adds	r2, r3, #4
 8003ac2:	613a      	str	r2, [r7, #16]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	697a      	ldr	r2, [r7, #20]
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d002      	beq.n	8003ad2 <bsp_TestExtSRAM+0x52>
		{
			err++;
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	3301      	adds	r3, #1
 8003ad0:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < EXT_SRAM_SIZE / 4; i++)
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	3301      	adds	r3, #1
 8003ad6:	617b      	str	r3, [r7, #20]
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003ade:	d3ee      	bcc.n	8003abe <bsp_TestExtSRAM+0x3e>
		}
	}

	if (err >  0)
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d004      	beq.n	8003af0 <bsp_TestExtSRAM+0x70>
	{
		return  (4 * err);
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	e06c      	b.n	8003bca <bsp_TestExtSRAM+0x14a>
	}

	/* ¶ÔSRAM µÄÊý¾ÝÇó·´²¢Ð´Èë */
	pSRAM = (uint32_t *)EXT_SRAM_ADDR;
 8003af0:	f04f 43d0 	mov.w	r3, #1744830464	; 0x68000000
 8003af4:	613b      	str	r3, [r7, #16]
	for (i = 0; i < EXT_SRAM_SIZE / 4; i++)
 8003af6:	2300      	movs	r3, #0
 8003af8:	617b      	str	r3, [r7, #20]
 8003afa:	e00a      	b.n	8003b12 <bsp_TestExtSRAM+0x92>
	{
		*pSRAM = ~*pSRAM;
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	43da      	mvns	r2, r3
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	601a      	str	r2, [r3, #0]
		pSRAM++;
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	3304      	adds	r3, #4
 8003b0a:	613b      	str	r3, [r7, #16]
	for (i = 0; i < EXT_SRAM_SIZE / 4; i++)
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	3301      	adds	r3, #1
 8003b10:	617b      	str	r3, [r7, #20]
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003b18:	d3f0      	bcc.n	8003afc <bsp_TestExtSRAM+0x7c>
	}

	/* ÔÙ´Î±È½ÏSRAMµÄÊý¾Ý */
	err = 0;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	60bb      	str	r3, [r7, #8]
	pSRAM = (uint32_t *)EXT_SRAM_ADDR;
 8003b1e:	f04f 43d0 	mov.w	r3, #1744830464	; 0x68000000
 8003b22:	613b      	str	r3, [r7, #16]
	for (i = 0; i < EXT_SRAM_SIZE / 4; i++)
 8003b24:	2300      	movs	r3, #0
 8003b26:	617b      	str	r3, [r7, #20]
 8003b28:	e00d      	b.n	8003b46 <bsp_TestExtSRAM+0xc6>
	{
		if (*pSRAM++ != (~i))
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	1d1a      	adds	r2, r3, #4
 8003b2e:	613a      	str	r2, [r7, #16]
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	43db      	mvns	r3, r3
 8003b36:	429a      	cmp	r2, r3
 8003b38:	d002      	beq.n	8003b40 <bsp_TestExtSRAM+0xc0>
		{
			err++;
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	3301      	adds	r3, #1
 8003b3e:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < EXT_SRAM_SIZE / 4; i++)
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	3301      	adds	r3, #1
 8003b44:	617b      	str	r3, [r7, #20]
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003b4c:	d3ed      	bcc.n	8003b2a <bsp_TestExtSRAM+0xaa>
		}
	}

	if (err >  0)
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d004      	beq.n	8003b5e <bsp_TestExtSRAM+0xde>
	{
		return (4 * err);
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	009b      	lsls	r3, r3, #2
 8003b5a:	b2db      	uxtb	r3, r3
 8003b5c:	e035      	b.n	8003bca <bsp_TestExtSRAM+0x14a>
	}

	/* ²âÊÔ°´×Ö½Ú·½Ê½·ÃÎÊ, Ä¿µÄÊÇÑéÖ¤ FSMC_NBL0 ¡¢ FSMC_NBL1 ¿ÚÏß */
	pBytes = (uint8_t *)EXT_SRAM_ADDR;
 8003b5e:	f04f 43d0 	mov.w	r3, #1744830464	; 0x68000000
 8003b62:	60fb      	str	r3, [r7, #12]
	for (i = 0; i < sizeof(ByteBuf); i++)
 8003b64:	2300      	movs	r3, #0
 8003b66:	617b      	str	r3, [r7, #20]
 8003b68:	e00a      	b.n	8003b80 <bsp_TestExtSRAM+0x100>
	{
		*pBytes++ = ByteBuf[i];
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	1c5a      	adds	r2, r3, #1
 8003b6e:	60fa      	str	r2, [r7, #12]
 8003b70:	1d39      	adds	r1, r7, #4
 8003b72:	697a      	ldr	r2, [r7, #20]
 8003b74:	440a      	add	r2, r1
 8003b76:	7812      	ldrb	r2, [r2, #0]
 8003b78:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < sizeof(ByteBuf); i++)
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	3301      	adds	r3, #1
 8003b7e:	617b      	str	r3, [r7, #20]
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	2b03      	cmp	r3, #3
 8003b84:	d9f1      	bls.n	8003b6a <bsp_TestExtSRAM+0xea>
	}

	/* ±È½ÏSRAMµÄÊý¾Ý */
	err = 0;
 8003b86:	2300      	movs	r3, #0
 8003b88:	60bb      	str	r3, [r7, #8]
	pBytes = (uint8_t *)EXT_SRAM_ADDR;
 8003b8a:	f04f 43d0 	mov.w	r3, #1744830464	; 0x68000000
 8003b8e:	60fb      	str	r3, [r7, #12]
	for (i = 0; i < sizeof(ByteBuf); i++)
 8003b90:	2300      	movs	r3, #0
 8003b92:	617b      	str	r3, [r7, #20]
 8003b94:	e00f      	b.n	8003bb6 <bsp_TestExtSRAM+0x136>
	{
		if (*pBytes++ != ByteBuf[i])
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	1c5a      	adds	r2, r3, #1
 8003b9a:	60fa      	str	r2, [r7, #12]
 8003b9c:	781a      	ldrb	r2, [r3, #0]
 8003b9e:	1d39      	adds	r1, r7, #4
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	440b      	add	r3, r1
 8003ba4:	781b      	ldrb	r3, [r3, #0]
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d002      	beq.n	8003bb0 <bsp_TestExtSRAM+0x130>
		{
			err++;
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	3301      	adds	r3, #1
 8003bae:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < sizeof(ByteBuf); i++)
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	3301      	adds	r3, #1
 8003bb4:	617b      	str	r3, [r7, #20]
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	2b03      	cmp	r3, #3
 8003bba:	d9ec      	bls.n	8003b96 <bsp_TestExtSRAM+0x116>
		}
	}
	if (err >  0)
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d002      	beq.n	8003bc8 <bsp_TestExtSRAM+0x148>
	{
		return err;
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	e000      	b.n	8003bca <bsp_TestExtSRAM+0x14a>
	}
	return 0;
 8003bc8:	2300      	movs	r3, #0
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	371c      	adds	r7, #28
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr
 8003bd6:	bf00      	nop
 8003bd8:	aa5aa555 	.word	0xaa5aa555

08003bdc <i2c_Delay>:
*********************************************************************************************************
*	Func name: i2c_Delay
*********************************************************************************************************
*/
void i2c_Delay(void)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b083      	sub	sp, #12
 8003be0:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < 30; i++);
 8003be2:	2300      	movs	r3, #0
 8003be4:	71fb      	strb	r3, [r7, #7]
 8003be6:	e002      	b.n	8003bee <i2c_Delay+0x12>
 8003be8:	79fb      	ldrb	r3, [r7, #7]
 8003bea:	3301      	adds	r3, #1
 8003bec:	71fb      	strb	r3, [r7, #7]
 8003bee:	79fb      	ldrb	r3, [r7, #7]
 8003bf0:	2b1d      	cmp	r3, #29
 8003bf2:	d9f9      	bls.n	8003be8 <i2c_Delay+0xc>
}
 8003bf4:	bf00      	nop
 8003bf6:	bf00      	nop
 8003bf8:	370c      	adds	r7, #12
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr
	...

08003c04 <i2c_Start>:
*********************************************************************************************************
*	Func name: i2c_Start
*********************************************************************************************************
*/
void i2c_Start(void)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	af00      	add	r7, sp, #0
	I2C_SDA_1();
 8003c08:	2201      	movs	r2, #1
 8003c0a:	2120      	movs	r1, #32
 8003c0c:	480c      	ldr	r0, [pc, #48]	; (8003c40 <i2c_Start+0x3c>)
 8003c0e:	f003 faff 	bl	8007210 <HAL_GPIO_WritePin>
	I2C_SCL_1();
 8003c12:	2201      	movs	r2, #1
 8003c14:	2110      	movs	r1, #16
 8003c16:	480a      	ldr	r0, [pc, #40]	; (8003c40 <i2c_Start+0x3c>)
 8003c18:	f003 fafa 	bl	8007210 <HAL_GPIO_WritePin>
	i2c_Delay();
 8003c1c:	f7ff ffde 	bl	8003bdc <i2c_Delay>
	I2C_SDA_0();
 8003c20:	2200      	movs	r2, #0
 8003c22:	2120      	movs	r1, #32
 8003c24:	4806      	ldr	r0, [pc, #24]	; (8003c40 <i2c_Start+0x3c>)
 8003c26:	f003 faf3 	bl	8007210 <HAL_GPIO_WritePin>
	i2c_Delay();
 8003c2a:	f7ff ffd7 	bl	8003bdc <i2c_Delay>
	I2C_SCL_0();
 8003c2e:	2200      	movs	r2, #0
 8003c30:	2110      	movs	r1, #16
 8003c32:	4803      	ldr	r0, [pc, #12]	; (8003c40 <i2c_Start+0x3c>)
 8003c34:	f003 faec 	bl	8007210 <HAL_GPIO_WritePin>
	i2c_Delay();
 8003c38:	f7ff ffd0 	bl	8003bdc <i2c_Delay>
}
 8003c3c:	bf00      	nop
 8003c3e:	bd80      	pop	{r7, pc}
 8003c40:	40021c00 	.word	0x40021c00

08003c44 <i2c_SendByte>:
*********************************************************************************************************
*	Func name: i2c_SendByte
*********************************************************************************************************
*/
void i2c_SendByte(uint8_t _ucByte)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b084      	sub	sp, #16
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	for (i = 0; i < 8; i++)
 8003c4e:	2300      	movs	r3, #0
 8003c50:	73fb      	strb	r3, [r7, #15]
 8003c52:	e02c      	b.n	8003cae <i2c_SendByte+0x6a>
	{
		if (_ucByte & 0x80)
 8003c54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	da05      	bge.n	8003c68 <i2c_SendByte+0x24>
		{
			I2C_SDA_1();
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	2120      	movs	r1, #32
 8003c60:	4817      	ldr	r0, [pc, #92]	; (8003cc0 <i2c_SendByte+0x7c>)
 8003c62:	f003 fad5 	bl	8007210 <HAL_GPIO_WritePin>
 8003c66:	e004      	b.n	8003c72 <i2c_SendByte+0x2e>
		}
		else
		{
			I2C_SDA_0();
 8003c68:	2200      	movs	r2, #0
 8003c6a:	2120      	movs	r1, #32
 8003c6c:	4814      	ldr	r0, [pc, #80]	; (8003cc0 <i2c_SendByte+0x7c>)
 8003c6e:	f003 facf 	bl	8007210 <HAL_GPIO_WritePin>
		}
		i2c_Delay();
 8003c72:	f7ff ffb3 	bl	8003bdc <i2c_Delay>
		I2C_SCL_1();
 8003c76:	2201      	movs	r2, #1
 8003c78:	2110      	movs	r1, #16
 8003c7a:	4811      	ldr	r0, [pc, #68]	; (8003cc0 <i2c_SendByte+0x7c>)
 8003c7c:	f003 fac8 	bl	8007210 <HAL_GPIO_WritePin>
		i2c_Delay();
 8003c80:	f7ff ffac 	bl	8003bdc <i2c_Delay>
		I2C_SCL_0();
 8003c84:	2200      	movs	r2, #0
 8003c86:	2110      	movs	r1, #16
 8003c88:	480d      	ldr	r0, [pc, #52]	; (8003cc0 <i2c_SendByte+0x7c>)
 8003c8a:	f003 fac1 	bl	8007210 <HAL_GPIO_WritePin>
		if (i == 7)
 8003c8e:	7bfb      	ldrb	r3, [r7, #15]
 8003c90:	2b07      	cmp	r3, #7
 8003c92:	d104      	bne.n	8003c9e <i2c_SendByte+0x5a>
		{
			 I2C_SDA_1(); // ÊÍ·Å×ÜÏß
 8003c94:	2201      	movs	r2, #1
 8003c96:	2120      	movs	r1, #32
 8003c98:	4809      	ldr	r0, [pc, #36]	; (8003cc0 <i2c_SendByte+0x7c>)
 8003c9a:	f003 fab9 	bl	8007210 <HAL_GPIO_WritePin>
		}
		_ucByte <<= 1;	/* ×óÒÆÒ»¸öbit */
 8003c9e:	79fb      	ldrb	r3, [r7, #7]
 8003ca0:	005b      	lsls	r3, r3, #1
 8003ca2:	71fb      	strb	r3, [r7, #7]
		i2c_Delay();
 8003ca4:	f7ff ff9a 	bl	8003bdc <i2c_Delay>
	for (i = 0; i < 8; i++)
 8003ca8:	7bfb      	ldrb	r3, [r7, #15]
 8003caa:	3301      	adds	r3, #1
 8003cac:	73fb      	strb	r3, [r7, #15]
 8003cae:	7bfb      	ldrb	r3, [r7, #15]
 8003cb0:	2b07      	cmp	r3, #7
 8003cb2:	d9cf      	bls.n	8003c54 <i2c_SendByte+0x10>
	}
}
 8003cb4:	bf00      	nop
 8003cb6:	bf00      	nop
 8003cb8:	3710      	adds	r7, #16
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}
 8003cbe:	bf00      	nop
 8003cc0:	40021c00 	.word	0x40021c00

08003cc4 <i2c_ReadByte>:
*********************************************************************************************************
*	Func name: i2c_ReadByte
*********************************************************************************************************
*/
uint8_t i2c_ReadByte(void)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b082      	sub	sp, #8
 8003cc8:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t value;

	value = 0;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	71bb      	strb	r3, [r7, #6]

	for (i = 0; i < 8; i++)
 8003cce:	2300      	movs	r3, #0
 8003cd0:	71fb      	strb	r3, [r7, #7]
 8003cd2:	e01d      	b.n	8003d10 <i2c_ReadByte+0x4c>
	{
		value <<= 1;
 8003cd4:	79bb      	ldrb	r3, [r7, #6]
 8003cd6:	005b      	lsls	r3, r3, #1
 8003cd8:	71bb      	strb	r3, [r7, #6]
		I2C_SCL_1();
 8003cda:	2201      	movs	r2, #1
 8003cdc:	2110      	movs	r1, #16
 8003cde:	4810      	ldr	r0, [pc, #64]	; (8003d20 <i2c_ReadByte+0x5c>)
 8003ce0:	f003 fa96 	bl	8007210 <HAL_GPIO_WritePin>
		i2c_Delay();
 8003ce4:	f7ff ff7a 	bl	8003bdc <i2c_Delay>
		if (I2C_SDA_READ())
 8003ce8:	2120      	movs	r1, #32
 8003cea:	480d      	ldr	r0, [pc, #52]	; (8003d20 <i2c_ReadByte+0x5c>)
 8003cec:	f003 fa78 	bl	80071e0 <HAL_GPIO_ReadPin>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d102      	bne.n	8003cfc <i2c_ReadByte+0x38>
		{
			value++;
 8003cf6:	79bb      	ldrb	r3, [r7, #6]
 8003cf8:	3301      	adds	r3, #1
 8003cfa:	71bb      	strb	r3, [r7, #6]
		}
		I2C_SCL_0();
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	2110      	movs	r1, #16
 8003d00:	4807      	ldr	r0, [pc, #28]	; (8003d20 <i2c_ReadByte+0x5c>)
 8003d02:	f003 fa85 	bl	8007210 <HAL_GPIO_WritePin>
		i2c_Delay();
 8003d06:	f7ff ff69 	bl	8003bdc <i2c_Delay>
	for (i = 0; i < 8; i++)
 8003d0a:	79fb      	ldrb	r3, [r7, #7]
 8003d0c:	3301      	adds	r3, #1
 8003d0e:	71fb      	strb	r3, [r7, #7]
 8003d10:	79fb      	ldrb	r3, [r7, #7]
 8003d12:	2b07      	cmp	r3, #7
 8003d14:	d9de      	bls.n	8003cd4 <i2c_ReadByte+0x10>
	}
	return value;
 8003d16:	79bb      	ldrb	r3, [r7, #6]
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3708      	adds	r7, #8
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}
 8003d20:	40021c00 	.word	0x40021c00

08003d24 <i2c_WaitAck>:
*********************************************************************************************************
*	Func name: i2c_WaitAck
*********************************************************************************************************
*/
uint8_t i2c_WaitAck(void)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b082      	sub	sp, #8
 8003d28:	af00      	add	r7, sp, #0
	uint8_t re;

	I2C_SDA_1();	/* CPUÊÍ·ÅSDA×ÜÏß */
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	2120      	movs	r1, #32
 8003d2e:	4812      	ldr	r0, [pc, #72]	; (8003d78 <i2c_WaitAck+0x54>)
 8003d30:	f003 fa6e 	bl	8007210 <HAL_GPIO_WritePin>
	i2c_Delay();
 8003d34:	f7ff ff52 	bl	8003bdc <i2c_Delay>
	I2C_SCL_1();	/* CPUÇý¶¯SCL = 1, ´ËÊ±Æ÷¼þ»á·µ»ØACKÓ¦´ð */
 8003d38:	2201      	movs	r2, #1
 8003d3a:	2110      	movs	r1, #16
 8003d3c:	480e      	ldr	r0, [pc, #56]	; (8003d78 <i2c_WaitAck+0x54>)
 8003d3e:	f003 fa67 	bl	8007210 <HAL_GPIO_WritePin>
	i2c_Delay();
 8003d42:	f7ff ff4b 	bl	8003bdc <i2c_Delay>
	if (I2C_SDA_READ())	/* CPU¶ÁÈ¡SDA¿ÚÏß×´Ì¬ */
 8003d46:	2120      	movs	r1, #32
 8003d48:	480b      	ldr	r0, [pc, #44]	; (8003d78 <i2c_WaitAck+0x54>)
 8003d4a:	f003 fa49 	bl	80071e0 <HAL_GPIO_ReadPin>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d102      	bne.n	8003d5a <i2c_WaitAck+0x36>
	{
		re = 1;
 8003d54:	2301      	movs	r3, #1
 8003d56:	71fb      	strb	r3, [r7, #7]
 8003d58:	e001      	b.n	8003d5e <i2c_WaitAck+0x3a>
	}
	else
	{
		re = 0;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	71fb      	strb	r3, [r7, #7]
	}
	I2C_SCL_0();
 8003d5e:	2200      	movs	r2, #0
 8003d60:	2110      	movs	r1, #16
 8003d62:	4805      	ldr	r0, [pc, #20]	; (8003d78 <i2c_WaitAck+0x54>)
 8003d64:	f003 fa54 	bl	8007210 <HAL_GPIO_WritePin>
	i2c_Delay();
 8003d68:	f7ff ff38 	bl	8003bdc <i2c_Delay>
	return re;
 8003d6c:	79fb      	ldrb	r3, [r7, #7]
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3708      	adds	r7, #8
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop
 8003d78:	40021c00 	.word	0x40021c00

08003d7c <i2c_Ack>:
*********************************************************************************************************
*	Func name: i2c_Ack
*********************************************************************************************************
*/
void i2c_Ack(void)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	af00      	add	r7, sp, #0
	I2C_SDA_0();	/* CPUÇý¶¯SDA = 0 */
 8003d80:	2200      	movs	r2, #0
 8003d82:	2120      	movs	r1, #32
 8003d84:	480c      	ldr	r0, [pc, #48]	; (8003db8 <i2c_Ack+0x3c>)
 8003d86:	f003 fa43 	bl	8007210 <HAL_GPIO_WritePin>
	i2c_Delay();
 8003d8a:	f7ff ff27 	bl	8003bdc <i2c_Delay>
	I2C_SCL_1();	/* CPU²úÉú1¸öÊ±ÖÓ */
 8003d8e:	2201      	movs	r2, #1
 8003d90:	2110      	movs	r1, #16
 8003d92:	4809      	ldr	r0, [pc, #36]	; (8003db8 <i2c_Ack+0x3c>)
 8003d94:	f003 fa3c 	bl	8007210 <HAL_GPIO_WritePin>
	i2c_Delay();
 8003d98:	f7ff ff20 	bl	8003bdc <i2c_Delay>
	I2C_SCL_0();
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	2110      	movs	r1, #16
 8003da0:	4805      	ldr	r0, [pc, #20]	; (8003db8 <i2c_Ack+0x3c>)
 8003da2:	f003 fa35 	bl	8007210 <HAL_GPIO_WritePin>
	i2c_Delay();
 8003da6:	f7ff ff19 	bl	8003bdc <i2c_Delay>
	I2C_SDA_1();	/* CPUÊÍ·ÅSDA×ÜÏß */
 8003daa:	2201      	movs	r2, #1
 8003dac:	2120      	movs	r1, #32
 8003dae:	4802      	ldr	r0, [pc, #8]	; (8003db8 <i2c_Ack+0x3c>)
 8003db0:	f003 fa2e 	bl	8007210 <HAL_GPIO_WritePin>
}
 8003db4:	bf00      	nop
 8003db6:	bd80      	pop	{r7, pc}
 8003db8:	40021c00 	.word	0x40021c00

08003dbc <i2c_NAck>:
*********************************************************************************************************
*	Func name: i2c_NAck
*********************************************************************************************************
*/
void i2c_NAck(void)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	af00      	add	r7, sp, #0
	I2C_SDA_1();	/* CPUÇý¶¯SDA = 1 */
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	2120      	movs	r1, #32
 8003dc4:	480a      	ldr	r0, [pc, #40]	; (8003df0 <i2c_NAck+0x34>)
 8003dc6:	f003 fa23 	bl	8007210 <HAL_GPIO_WritePin>
	i2c_Delay();
 8003dca:	f7ff ff07 	bl	8003bdc <i2c_Delay>
	I2C_SCL_1();	/* CPU²úÉú1¸öÊ±ÖÓ */
 8003dce:	2201      	movs	r2, #1
 8003dd0:	2110      	movs	r1, #16
 8003dd2:	4807      	ldr	r0, [pc, #28]	; (8003df0 <i2c_NAck+0x34>)
 8003dd4:	f003 fa1c 	bl	8007210 <HAL_GPIO_WritePin>
	i2c_Delay();
 8003dd8:	f7ff ff00 	bl	8003bdc <i2c_Delay>
	I2C_SCL_0();
 8003ddc:	2200      	movs	r2, #0
 8003dde:	2110      	movs	r1, #16
 8003de0:	4803      	ldr	r0, [pc, #12]	; (8003df0 <i2c_NAck+0x34>)
 8003de2:	f003 fa15 	bl	8007210 <HAL_GPIO_WritePin>
	i2c_Delay();
 8003de6:	f7ff fef9 	bl	8003bdc <i2c_Delay>
}
 8003dea:	bf00      	nop
 8003dec:	bd80      	pop	{r7, pc}
 8003dee:	bf00      	nop
 8003df0:	40021c00 	.word	0x40021c00

08003df4 <i2c_Stop>:
*********************************************************************************************************
*	Func name: i2c_Start
*********************************************************************************************************
*/
void i2c_Stop(void)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	af00      	add	r7, sp, #0
	I2C_SDA_0();
 8003df8:	2200      	movs	r2, #0
 8003dfa:	2120      	movs	r1, #32
 8003dfc:	4808      	ldr	r0, [pc, #32]	; (8003e20 <i2c_Stop+0x2c>)
 8003dfe:	f003 fa07 	bl	8007210 <HAL_GPIO_WritePin>
	I2C_SCL_1();
 8003e02:	2201      	movs	r2, #1
 8003e04:	2110      	movs	r1, #16
 8003e06:	4806      	ldr	r0, [pc, #24]	; (8003e20 <i2c_Stop+0x2c>)
 8003e08:	f003 fa02 	bl	8007210 <HAL_GPIO_WritePin>
	i2c_Delay();
 8003e0c:	f7ff fee6 	bl	8003bdc <i2c_Delay>
	I2C_SDA_1();
 8003e10:	2201      	movs	r2, #1
 8003e12:	2120      	movs	r1, #32
 8003e14:	4802      	ldr	r0, [pc, #8]	; (8003e20 <i2c_Stop+0x2c>)
 8003e16:	f003 f9fb 	bl	8007210 <HAL_GPIO_WritePin>
}
 8003e1a:	bf00      	nop
 8003e1c:	bd80      	pop	{r7, pc}
 8003e1e:	bf00      	nop
 8003e20:	40021c00 	.word	0x40021c00

08003e24 <bsp_InitI2C>:
*********************************************************************************************************
*	Func name: bsp_InitI2C
*********************************************************************************************************
*/
void bsp_InitI2C(void)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b086      	sub	sp, #24
 8003e28:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	__HAL_RCC_GPIOH_CLK_ENABLE();
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	603b      	str	r3, [r7, #0]
 8003e2e:	4b0f      	ldr	r3, [pc, #60]	; (8003e6c <bsp_InitI2C+0x48>)
 8003e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e32:	4a0e      	ldr	r2, [pc, #56]	; (8003e6c <bsp_InitI2C+0x48>)
 8003e34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e38:	6313      	str	r3, [r2, #48]	; 0x30
 8003e3a:	4b0c      	ldr	r3, [pc, #48]	; (8003e6c <bsp_InitI2C+0x48>)
 8003e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e42:	603b      	str	r3, [r7, #0]
 8003e44:	683b      	ldr	r3, [r7, #0]

	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_OD;
 8003e46:	2311      	movs	r3, #17
 8003e48:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructure.Pull = GPIO_NOPULL;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e4e:	2303      	movs	r3, #3
 8003e50:	613b      	str	r3, [r7, #16]
	GPIO_InitStructure.Pin = I2C_SCL_PIN | I2C_SDA_PIN;
 8003e52:	2330      	movs	r3, #48	; 0x30
 8003e54:	607b      	str	r3, [r7, #4]

	HAL_GPIO_Init(GPIO_PORT_I2C, &GPIO_InitStructure);
 8003e56:	1d3b      	adds	r3, r7, #4
 8003e58:	4619      	mov	r1, r3
 8003e5a:	4805      	ldr	r0, [pc, #20]	; (8003e70 <bsp_InitI2C+0x4c>)
 8003e5c:	f003 f824 	bl	8006ea8 <HAL_GPIO_Init>

	i2c_Stop();
 8003e60:	f7ff ffc8 	bl	8003df4 <i2c_Stop>
}
 8003e64:	bf00      	nop
 8003e66:	3718      	adds	r7, #24
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}
 8003e6c:	40023800 	.word	0x40023800
 8003e70:	40021c00 	.word	0x40021c00

08003e74 <i2c_CheckDevice>:
*********************************************************************************************************
*	Func name: i2c_CheckDevice
*********************************************************************************************************
*/
uint8_t i2c_CheckDevice(uint8_t _Address)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b084      	sub	sp, #16
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	71fb      	strb	r3, [r7, #7]
	uint8_t ucAck;

	if (I2C_SDA_READ() && I2C_SCL_READ())
 8003e7e:	2120      	movs	r1, #32
 8003e80:	480f      	ldr	r0, [pc, #60]	; (8003ec0 <i2c_CheckDevice+0x4c>)
 8003e82:	f003 f9ad 	bl	80071e0 <HAL_GPIO_ReadPin>
 8003e86:	4603      	mov	r3, r0
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d114      	bne.n	8003eb6 <i2c_CheckDevice+0x42>
 8003e8c:	2110      	movs	r1, #16
 8003e8e:	480c      	ldr	r0, [pc, #48]	; (8003ec0 <i2c_CheckDevice+0x4c>)
 8003e90:	f003 f9a6 	bl	80071e0 <HAL_GPIO_ReadPin>
 8003e94:	4603      	mov	r3, r0
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d10d      	bne.n	8003eb6 <i2c_CheckDevice+0x42>
	{
		i2c_Start();
 8003e9a:	f7ff feb3 	bl	8003c04 <i2c_Start>

		i2c_SendByte(_Address | I2C_WR);
 8003e9e:	79fb      	ldrb	r3, [r7, #7]
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f7ff fecf 	bl	8003c44 <i2c_SendByte>
		ucAck = i2c_WaitAck();
 8003ea6:	f7ff ff3d 	bl	8003d24 <i2c_WaitAck>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	73fb      	strb	r3, [r7, #15]

		i2c_Stop();
 8003eae:	f7ff ffa1 	bl	8003df4 <i2c_Stop>

		return ucAck;
 8003eb2:	7bfb      	ldrb	r3, [r7, #15]
 8003eb4:	e000      	b.n	8003eb8 <i2c_CheckDevice+0x44>
	}
	return 1;
 8003eb6:	2301      	movs	r3, #1
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3710      	adds	r7, #16
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}
 8003ec0:	40021c00 	.word	0x40021c00

08003ec4 <IsKeyDown1>:
	static uint8_t IsKeyDown5(void) {if ((GPIO_PORT_K5->IDR & GPIO_PIN_K5) == 0) return 1;else return 0;}
	static uint8_t IsKeyDown6(void) {if ((GPIO_PORT_K6->IDR & GPIO_PIN_K6) == 0) return 1;else return 0;}
	static uint8_t IsKeyDown7(void) {if ((GPIO_PORT_K7->IDR & GPIO_PIN_K7) == 0) return 1;else return 0;}
	static uint8_t IsKeyDown8(void) {if ((GPIO_PORT_K8->IDR & GPIO_PIN_K8) == 0) return 1;else return 0;}
#else				/* 안릉란 STM32-V5 개발보드 */
	static uint8_t IsKeyDown1(void){return (HAL_GPIO_ReadPin(GPIO_PORT_K1, GPIO_PIN_K1) == GPIO_PIN_RESET) ? 1 : 0;}
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003ecc:	4805      	ldr	r0, [pc, #20]	; (8003ee4 <IsKeyDown1+0x20>)
 8003ece:	f003 f987 	bl	80071e0 <HAL_GPIO_ReadPin>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	bf0c      	ite	eq
 8003ed8:	2301      	moveq	r3, #1
 8003eda:	2300      	movne	r3, #0
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	4618      	mov	r0, r3
 8003ee0:	bd80      	pop	{r7, pc}
 8003ee2:	bf00      	nop
 8003ee4:	40022000 	.word	0x40022000

08003ee8 <IsKeyDown2>:
	static uint8_t IsKeyDown2(void) {return (HAL_GPIO_ReadPin(GPIO_PORT_K2, GPIO_PIN_K2) == GPIO_PIN_RESET) ? 1 : 0;}
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	af00      	add	r7, sp, #0
 8003eec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003ef0:	4805      	ldr	r0, [pc, #20]	; (8003f08 <IsKeyDown2+0x20>)
 8003ef2:	f003 f975 	bl	80071e0 <HAL_GPIO_ReadPin>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	bf0c      	ite	eq
 8003efc:	2301      	moveq	r3, #1
 8003efe:	2300      	movne	r3, #0
 8003f00:	b2db      	uxtb	r3, r3
 8003f02:	4618      	mov	r0, r3
 8003f04:	bd80      	pop	{r7, pc}
 8003f06:	bf00      	nop
 8003f08:	40020800 	.word	0x40020800

08003f0c <IsKeyDown3>:
	static uint8_t IsKeyDown3(void){return (HAL_GPIO_ReadPin(GPIO_PORT_K3, GPIO_PIN_K3) == GPIO_PIN_RESET) ? 1 : 0;}
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	af00      	add	r7, sp, #0
 8003f10:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003f14:	4805      	ldr	r0, [pc, #20]	; (8003f2c <IsKeyDown3+0x20>)
 8003f16:	f003 f963 	bl	80071e0 <HAL_GPIO_ReadPin>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	bf0c      	ite	eq
 8003f20:	2301      	moveq	r3, #1
 8003f22:	2300      	movne	r3, #0
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	4618      	mov	r0, r3
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	bf00      	nop
 8003f2c:	40022000 	.word	0x40022000

08003f30 <IsKeyDown4>:
	static uint8_t IsKeyDown4(void) {return (HAL_GPIO_ReadPin(GPIO_PORT_K4, GPIO_PIN_K4) == GPIO_PIN_RESET) ? 1 : 0;}
 8003f30:	b580      	push	{r7, lr}
 8003f32:	af00      	add	r7, sp, #0
 8003f34:	2104      	movs	r1, #4
 8003f36:	4805      	ldr	r0, [pc, #20]	; (8003f4c <IsKeyDown4+0x1c>)
 8003f38:	f003 f952 	bl	80071e0 <HAL_GPIO_ReadPin>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	bf0c      	ite	eq
 8003f42:	2301      	moveq	r3, #1
 8003f44:	2300      	movne	r3, #0
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	4618      	mov	r0, r3
 8003f4a:	bd80      	pop	{r7, pc}
 8003f4c:	40021c00 	.word	0x40021c00

08003f50 <IsKeyDown5>:
	static uint8_t IsKeyDown5(void) {return (HAL_GPIO_ReadPin(GPIO_PORT_K5, GPIO_PIN_K5) == GPIO_PIN_RESET) ? 1 : 0;}
 8003f50:	b580      	push	{r7, lr}
 8003f52:	af00      	add	r7, sp, #0
 8003f54:	2108      	movs	r1, #8
 8003f56:	4805      	ldr	r0, [pc, #20]	; (8003f6c <IsKeyDown5+0x1c>)
 8003f58:	f003 f942 	bl	80071e0 <HAL_GPIO_ReadPin>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	bf0c      	ite	eq
 8003f62:	2301      	moveq	r3, #1
 8003f64:	2300      	movne	r3, #0
 8003f66:	b2db      	uxtb	r3, r3
 8003f68:	4618      	mov	r0, r3
 8003f6a:	bd80      	pop	{r7, pc}
 8003f6c:	40021c00 	.word	0x40021c00

08003f70 <IsKeyDown6>:
	static uint8_t IsKeyDown6(void) {return (HAL_GPIO_ReadPin(GPIO_PORT_K6, GPIO_PIN_K6) == GPIO_PIN_RESET) ? 1 : 0;}
 8003f70:	b580      	push	{r7, lr}
 8003f72:	af00      	add	r7, sp, #0
 8003f74:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003f78:	4805      	ldr	r0, [pc, #20]	; (8003f90 <IsKeyDown6+0x20>)
 8003f7a:	f003 f931 	bl	80071e0 <HAL_GPIO_ReadPin>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	bf0c      	ite	eq
 8003f84:	2301      	moveq	r3, #1
 8003f86:	2300      	movne	r3, #0
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	bf00      	nop
 8003f90:	40021400 	.word	0x40021400

08003f94 <IsKeyDown7>:
	static uint8_t IsKeyDown7(void) {return (HAL_GPIO_ReadPin(GPIO_PORT_K7, GPIO_PIN_K7) == GPIO_PIN_RESET) ? 1 : 0;}
 8003f94:	b580      	push	{r7, lr}
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	2180      	movs	r1, #128	; 0x80
 8003f9a:	4805      	ldr	r0, [pc, #20]	; (8003fb0 <IsKeyDown7+0x1c>)
 8003f9c:	f003 f920 	bl	80071e0 <HAL_GPIO_ReadPin>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	bf0c      	ite	eq
 8003fa6:	2301      	moveq	r3, #1
 8003fa8:	2300      	movne	r3, #0
 8003faa:	b2db      	uxtb	r3, r3
 8003fac:	4618      	mov	r0, r3
 8003fae:	bd80      	pop	{r7, pc}
 8003fb0:	40021800 	.word	0x40021800

08003fb4 <IsKeyDown8>:
	static uint8_t IsKeyDown8(void) {return (HAL_GPIO_ReadPin(GPIO_PORT_K8, GPIO_PIN_K8) == GPIO_PIN_RESET) ? 1 : 0;}
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003fbc:	4805      	ldr	r0, [pc, #20]	; (8003fd4 <IsKeyDown8+0x20>)
 8003fbe:	f003 f90f 	bl	80071e0 <HAL_GPIO_ReadPin>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	bf0c      	ite	eq
 8003fc8:	2301      	moveq	r3, #1
 8003fca:	2300      	movne	r3, #0
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	4618      	mov	r0, r3
 8003fd0:	bd80      	pop	{r7, pc}
 8003fd2:	bf00      	nop
 8003fd4:	40021c00 	.word	0x40021c00

08003fd8 <IsKeyDown9>:
#endif
	static uint8_t IsKeyDown9(void) {if (IsKeyDown1() && IsKeyDown2()) return 1;else return 0;}
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	af00      	add	r7, sp, #0
 8003fdc:	f7ff ff72 	bl	8003ec4 <IsKeyDown1>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d006      	beq.n	8003ff4 <IsKeyDown9+0x1c>
 8003fe6:	f7ff ff7f 	bl	8003ee8 <IsKeyDown2>
 8003fea:	4603      	mov	r3, r0
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d001      	beq.n	8003ff4 <IsKeyDown9+0x1c>
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e000      	b.n	8003ff6 <IsKeyDown9+0x1e>
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	bd80      	pop	{r7, pc}

08003ffa <IsKeyDown10>:
	static uint8_t IsKeyDown10(void) {if (IsKeyDown1() && IsKeyDown2()) return 1;else return 0;}
 8003ffa:	b580      	push	{r7, lr}
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	f7ff ff61 	bl	8003ec4 <IsKeyDown1>
 8004002:	4603      	mov	r3, r0
 8004004:	2b00      	cmp	r3, #0
 8004006:	d006      	beq.n	8004016 <IsKeyDown10+0x1c>
 8004008:	f7ff ff6e 	bl	8003ee8 <IsKeyDown2>
 800400c:	4603      	mov	r3, r0
 800400e:	2b00      	cmp	r3, #0
 8004010:	d001      	beq.n	8004016 <IsKeyDown10+0x1c>
 8004012:	2301      	movs	r3, #1
 8004014:	e000      	b.n	8004018 <IsKeyDown10+0x1e>
 8004016:	2300      	movs	r3, #0
 8004018:	4618      	mov	r0, r3
 800401a:	bd80      	pop	{r7, pc}

0800401c <bsp_InitKey>:
*********************************************************************************************************
* 함수 이름: bsp_InitKey
*********************************************************************************************************
*/
void bsp_InitKey(void)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	af00      	add	r7, sp, #0
	bsp_InitKeyVar();
 8004020:	f000 f8a8 	bl	8004174 <bsp_InitKeyVar>
	bsp_InitKeyHard();
 8004024:	f000 f802 	bl	800402c <bsp_InitKeyHard>
}
 8004028:	bf00      	nop
 800402a:	bd80      	pop	{r7, pc}

0800402c <bsp_InitKeyHard>:
*********************************************************************************************************
* 함수 이름: bsp_InitKeyHard
*********************************************************************************************************
*/
static void bsp_InitKeyHard(void)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b08a      	sub	sp, #40	; 0x28
 8004030:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	// #define RCC_ALL_KEY 	(RCC_AHB1Periph_GPIOC | RCC_AHB1Periph_GPIOF | RCC_AHB1Periph_GPIOH | RCC_AHB1Periph_GPIOI | RCC_AHB1Periph_GPIOG)
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8004032:	2300      	movs	r3, #0
 8004034:	613b      	str	r3, [r7, #16]
 8004036:	4b49      	ldr	r3, [pc, #292]	; (800415c <bsp_InitKeyHard+0x130>)
 8004038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800403a:	4a48      	ldr	r2, [pc, #288]	; (800415c <bsp_InitKeyHard+0x130>)
 800403c:	f043 0304 	orr.w	r3, r3, #4
 8004040:	6313      	str	r3, [r2, #48]	; 0x30
 8004042:	4b46      	ldr	r3, [pc, #280]	; (800415c <bsp_InitKeyHard+0x130>)
 8004044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004046:	f003 0304 	and.w	r3, r3, #4
 800404a:	613b      	str	r3, [r7, #16]
 800404c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 800404e:	2300      	movs	r3, #0
 8004050:	60fb      	str	r3, [r7, #12]
 8004052:	4b42      	ldr	r3, [pc, #264]	; (800415c <bsp_InitKeyHard+0x130>)
 8004054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004056:	4a41      	ldr	r2, [pc, #260]	; (800415c <bsp_InitKeyHard+0x130>)
 8004058:	f043 0320 	orr.w	r3, r3, #32
 800405c:	6313      	str	r3, [r2, #48]	; 0x30
 800405e:	4b3f      	ldr	r3, [pc, #252]	; (800415c <bsp_InitKeyHard+0x130>)
 8004060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004062:	f003 0320 	and.w	r3, r3, #32
 8004066:	60fb      	str	r3, [r7, #12]
 8004068:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800406a:	2300      	movs	r3, #0
 800406c:	60bb      	str	r3, [r7, #8]
 800406e:	4b3b      	ldr	r3, [pc, #236]	; (800415c <bsp_InitKeyHard+0x130>)
 8004070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004072:	4a3a      	ldr	r2, [pc, #232]	; (800415c <bsp_InitKeyHard+0x130>)
 8004074:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004078:	6313      	str	r3, [r2, #48]	; 0x30
 800407a:	4b38      	ldr	r3, [pc, #224]	; (800415c <bsp_InitKeyHard+0x130>)
 800407c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800407e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004082:	60bb      	str	r3, [r7, #8]
 8004084:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOI_CLK_ENABLE();
 8004086:	2300      	movs	r3, #0
 8004088:	607b      	str	r3, [r7, #4]
 800408a:	4b34      	ldr	r3, [pc, #208]	; (800415c <bsp_InitKeyHard+0x130>)
 800408c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800408e:	4a33      	ldr	r2, [pc, #204]	; (800415c <bsp_InitKeyHard+0x130>)
 8004090:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004094:	6313      	str	r3, [r2, #48]	; 0x30
 8004096:	4b31      	ldr	r3, [pc, #196]	; (800415c <bsp_InitKeyHard+0x130>)
 8004098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800409a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800409e:	607b      	str	r3, [r7, #4]
 80040a0:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 80040a2:	2300      	movs	r3, #0
 80040a4:	603b      	str	r3, [r7, #0]
 80040a6:	4b2d      	ldr	r3, [pc, #180]	; (800415c <bsp_InitKeyHard+0x130>)
 80040a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040aa:	4a2c      	ldr	r2, [pc, #176]	; (800415c <bsp_InitKeyHard+0x130>)
 80040ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040b0:	6313      	str	r3, [r2, #48]	; 0x30
 80040b2:	4b2a      	ldr	r3, [pc, #168]	; (800415c <bsp_InitKeyHard+0x130>)
 80040b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040ba:	603b      	str	r3, [r7, #0]
 80040bc:	683b      	ldr	r3, [r7, #0]


	GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 80040be:	2300      	movs	r3, #0
 80040c0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStructure.Pull = GPIO_PULLUP;  // 풀업 저항 사용 (버튼이 GND에 연결되어 있을 경우)
 80040c2:	2301      	movs	r3, #1
 80040c4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 80040c6:	2302      	movs	r3, #2
 80040c8:	623b      	str	r3, [r7, #32]

	GPIO_InitStructure.Pin = GPIO_PIN_K1;
 80040ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80040ce:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_PORT_K1, &GPIO_InitStructure);
 80040d0:	f107 0314 	add.w	r3, r7, #20
 80040d4:	4619      	mov	r1, r3
 80040d6:	4822      	ldr	r0, [pc, #136]	; (8004160 <bsp_InitKeyHard+0x134>)
 80040d8:	f002 fee6 	bl	8006ea8 <HAL_GPIO_Init>

	GPIO_InitStructure.Pin = GPIO_PIN_K2;
 80040dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80040e0:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_PORT_K2, &GPIO_InitStructure);
 80040e2:	f107 0314 	add.w	r3, r7, #20
 80040e6:	4619      	mov	r1, r3
 80040e8:	481e      	ldr	r0, [pc, #120]	; (8004164 <bsp_InitKeyHard+0x138>)
 80040ea:	f002 fedd 	bl	8006ea8 <HAL_GPIO_Init>

	GPIO_InitStructure.Pin = GPIO_PIN_K3;
 80040ee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80040f2:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_PORT_K3, &GPIO_InitStructure);
 80040f4:	f107 0314 	add.w	r3, r7, #20
 80040f8:	4619      	mov	r1, r3
 80040fa:	4819      	ldr	r0, [pc, #100]	; (8004160 <bsp_InitKeyHard+0x134>)
 80040fc:	f002 fed4 	bl	8006ea8 <HAL_GPIO_Init>

	GPIO_InitStructure.Pin = GPIO_PIN_K4;
 8004100:	2304      	movs	r3, #4
 8004102:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_PORT_K4, &GPIO_InitStructure);
 8004104:	f107 0314 	add.w	r3, r7, #20
 8004108:	4619      	mov	r1, r3
 800410a:	4817      	ldr	r0, [pc, #92]	; (8004168 <bsp_InitKeyHard+0x13c>)
 800410c:	f002 fecc 	bl	8006ea8 <HAL_GPIO_Init>

	GPIO_InitStructure.Pin = GPIO_PIN_K5;
 8004110:	2308      	movs	r3, #8
 8004112:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_PORT_K5, &GPIO_InitStructure);
 8004114:	f107 0314 	add.w	r3, r7, #20
 8004118:	4619      	mov	r1, r3
 800411a:	4813      	ldr	r0, [pc, #76]	; (8004168 <bsp_InitKeyHard+0x13c>)
 800411c:	f002 fec4 	bl	8006ea8 <HAL_GPIO_Init>

	GPIO_InitStructure.Pin = GPIO_PIN_K6;
 8004120:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004124:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_PORT_K6, &GPIO_InitStructure);
 8004126:	f107 0314 	add.w	r3, r7, #20
 800412a:	4619      	mov	r1, r3
 800412c:	480f      	ldr	r0, [pc, #60]	; (800416c <bsp_InitKeyHard+0x140>)
 800412e:	f002 febb 	bl	8006ea8 <HAL_GPIO_Init>

	GPIO_InitStructure.Pin = GPIO_PIN_K7;
 8004132:	2380      	movs	r3, #128	; 0x80
 8004134:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_PORT_K7, &GPIO_InitStructure);
 8004136:	f107 0314 	add.w	r3, r7, #20
 800413a:	4619      	mov	r1, r3
 800413c:	480c      	ldr	r0, [pc, #48]	; (8004170 <bsp_InitKeyHard+0x144>)
 800413e:	f002 feb3 	bl	8006ea8 <HAL_GPIO_Init>

	GPIO_InitStructure.Pin = GPIO_PIN_K8;
 8004142:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004146:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_PORT_K8, &GPIO_InitStructure);
 8004148:	f107 0314 	add.w	r3, r7, #20
 800414c:	4619      	mov	r1, r3
 800414e:	4806      	ldr	r0, [pc, #24]	; (8004168 <bsp_InitKeyHard+0x13c>)
 8004150:	f002 feaa 	bl	8006ea8 <HAL_GPIO_Init>
}
 8004154:	bf00      	nop
 8004156:	3728      	adds	r7, #40	; 0x28
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}
 800415c:	40023800 	.word	0x40023800
 8004160:	40022000 	.word	0x40022000
 8004164:	40020800 	.word	0x40020800
 8004168:	40021c00 	.word	0x40021c00
 800416c:	40021400 	.word	0x40021400
 8004170:	40021800 	.word	0x40021800

08004174 <bsp_InitKeyVar>:
*********************************************************************************************************
*	함수 이름: bsp_InitKeyVar
*********************************************************************************************************
*/
static void bsp_InitKeyVar(void)
{
 8004174:	b480      	push	{r7}
 8004176:	b083      	sub	sp, #12
 8004178:	af00      	add	r7, sp, #0
	uint8_t i;

	/* 키 FIFO 읽기/쓰기 포인터 초기화 */
	s_tKey.Read = 0;
 800417a:	4b3d      	ldr	r3, [pc, #244]	; (8004270 <bsp_InitKeyVar+0xfc>)
 800417c:	2200      	movs	r2, #0
 800417e:	729a      	strb	r2, [r3, #10]
	s_tKey.Write = 0;
 8004180:	4b3b      	ldr	r3, [pc, #236]	; (8004270 <bsp_InitKeyVar+0xfc>)
 8004182:	2200      	movs	r2, #0
 8004184:	72da      	strb	r2, [r3, #11]
	s_tKey.Read2 = 0;
 8004186:	4b3a      	ldr	r3, [pc, #232]	; (8004270 <bsp_InitKeyVar+0xfc>)
 8004188:	2200      	movs	r2, #0
 800418a:	731a      	strb	r2, [r3, #12]

	/* 각 버튼 구조체 멤버 변수 초기화 */
	for (i = 0; i < KEY_COUNT; i++)
 800418c:	2300      	movs	r3, #0
 800418e:	71fb      	strb	r3, [r7, #7]
 8004190:	e025      	b.n	80041de <bsp_InitKeyVar+0x6a>
	{
		s_tBtn[i].LongTime = KEY_LONG_TIME;			/* 장시간 누름 시간. 0이면 장시간 누름 이벤트 없음 */
 8004192:	79fb      	ldrb	r3, [r7, #7]
 8004194:	4a37      	ldr	r2, [pc, #220]	; (8004274 <bsp_InitKeyVar+0x100>)
 8004196:	011b      	lsls	r3, r3, #4
 8004198:	4413      	add	r3, r2
 800419a:	3308      	adds	r3, #8
 800419c:	2264      	movs	r2, #100	; 0x64
 800419e:	801a      	strh	r2, [r3, #0]
		s_tBtn[i].Count = KEY_FILTER_TIME / 2;		/* 카운터를 필터링 시간의 절반으로 설정 */
 80041a0:	79fb      	ldrb	r3, [r7, #7]
 80041a2:	4a34      	ldr	r2, [pc, #208]	; (8004274 <bsp_InitKeyVar+0x100>)
 80041a4:	011b      	lsls	r3, r3, #4
 80041a6:	4413      	add	r3, r2
 80041a8:	3304      	adds	r3, #4
 80041aa:	2202      	movs	r2, #2
 80041ac:	701a      	strb	r2, [r3, #0]
		s_tBtn[i].State = 0;							/* 버튼 상태, 0은 누르지 않음 */
 80041ae:	79fb      	ldrb	r3, [r7, #7]
 80041b0:	4a30      	ldr	r2, [pc, #192]	; (8004274 <bsp_InitKeyVar+0x100>)
 80041b2:	011b      	lsls	r3, r3, #4
 80041b4:	4413      	add	r3, r2
 80041b6:	330a      	adds	r3, #10
 80041b8:	2200      	movs	r2, #0
 80041ba:	701a      	strb	r2, [r3, #0]
		//s_tBtn[i].KeyCodeDown = 3 * i + 1;				/* 버튼 눌림 키코드 */
		//s_tBtn[i].KeyCodeUp = 3 * i + 2;				/* 버튼 뗌 키코드 */
		//s_tBtn[i].KeyCodeLong = 3 * i + 3;				/* 버튼 장시간 누름 키코드 */
		s_tBtn[i].RepeatSpeed = 0;						/* 연속 입력 속도, 0은 연속 입력 없음 */
 80041bc:	79fb      	ldrb	r3, [r7, #7]
 80041be:	4a2d      	ldr	r2, [pc, #180]	; (8004274 <bsp_InitKeyVar+0x100>)
 80041c0:	011b      	lsls	r3, r3, #4
 80041c2:	4413      	add	r3, r2
 80041c4:	330b      	adds	r3, #11
 80041c6:	2200      	movs	r2, #0
 80041c8:	701a      	strb	r2, [r3, #0]
		s_tBtn[i].RepeatCount = 0;						/* 연속 입력 카운터 */
 80041ca:	79fb      	ldrb	r3, [r7, #7]
 80041cc:	4a29      	ldr	r2, [pc, #164]	; (8004274 <bsp_InitKeyVar+0x100>)
 80041ce:	011b      	lsls	r3, r3, #4
 80041d0:	4413      	add	r3, r2
 80041d2:	330c      	adds	r3, #12
 80041d4:	2200      	movs	r2, #0
 80041d6:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < KEY_COUNT; i++)
 80041d8:	79fb      	ldrb	r3, [r7, #7]
 80041da:	3301      	adds	r3, #1
 80041dc:	71fb      	strb	r3, [r7, #7]
 80041de:	79fb      	ldrb	r3, [r7, #7]
 80041e0:	2b09      	cmp	r3, #9
 80041e2:	d9d6      	bls.n	8004192 <bsp_InitKeyVar+0x1e>
	}

	/* 특정 버튼의 파라미터를 개별적으로 변경할 경우 */
	/* 예를 들어, 버튼 1을 1초 이상 누르면 자동으로 동일한 키코드 발송 */
	s_tBtn[KID_JOY_U].LongTime = 100;
 80041e4:	4b23      	ldr	r3, [pc, #140]	; (8004274 <bsp_InitKeyVar+0x100>)
 80041e6:	2264      	movs	r2, #100	; 0x64
 80041e8:	871a      	strh	r2, [r3, #56]	; 0x38
	s_tBtn[KID_JOY_U].RepeatSpeed = 5;	/* 50ms마다 자동으로 키코드 발송 */
 80041ea:	4b22      	ldr	r3, [pc, #136]	; (8004274 <bsp_InitKeyVar+0x100>)
 80041ec:	2205      	movs	r2, #5
 80041ee:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b

	s_tBtn[KID_JOY_D].LongTime = 100;
 80041f2:	4b20      	ldr	r3, [pc, #128]	; (8004274 <bsp_InitKeyVar+0x100>)
 80041f4:	2264      	movs	r2, #100	; 0x64
 80041f6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
	s_tBtn[KID_JOY_D].RepeatSpeed = 5;
 80041fa:	4b1e      	ldr	r3, [pc, #120]	; (8004274 <bsp_InitKeyVar+0x100>)
 80041fc:	2205      	movs	r2, #5
 80041fe:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b

	s_tBtn[KID_JOY_L].LongTime = 100;
 8004202:	4b1c      	ldr	r3, [pc, #112]	; (8004274 <bsp_InitKeyVar+0x100>)
 8004204:	2264      	movs	r2, #100	; 0x64
 8004206:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
	s_tBtn[KID_JOY_L].RepeatSpeed = 5;
 800420a:	4b1a      	ldr	r3, [pc, #104]	; (8004274 <bsp_InitKeyVar+0x100>)
 800420c:	2205      	movs	r2, #5
 800420e:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b

	s_tBtn[KID_JOY_R].LongTime = 100;
 8004212:	4b18      	ldr	r3, [pc, #96]	; (8004274 <bsp_InitKeyVar+0x100>)
 8004214:	2264      	movs	r2, #100	; 0x64
 8004216:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
	s_tBtn[KID_JOY_R].RepeatSpeed = 5;
 800421a:	4b16      	ldr	r3, [pc, #88]	; (8004274 <bsp_InitKeyVar+0x100>)
 800421c:	2205      	movs	r2, #5
 800421e:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b

	/* 버튼 눌림 감지 함수 설정 */
	s_tBtn[0].IsKeyDownFunc = IsKeyDown1;
 8004222:	4b14      	ldr	r3, [pc, #80]	; (8004274 <bsp_InitKeyVar+0x100>)
 8004224:	4a14      	ldr	r2, [pc, #80]	; (8004278 <bsp_InitKeyVar+0x104>)
 8004226:	601a      	str	r2, [r3, #0]
	s_tBtn[1].IsKeyDownFunc = IsKeyDown2;
 8004228:	4b12      	ldr	r3, [pc, #72]	; (8004274 <bsp_InitKeyVar+0x100>)
 800422a:	4a14      	ldr	r2, [pc, #80]	; (800427c <bsp_InitKeyVar+0x108>)
 800422c:	611a      	str	r2, [r3, #16]
	s_tBtn[2].IsKeyDownFunc = IsKeyDown3;
 800422e:	4b11      	ldr	r3, [pc, #68]	; (8004274 <bsp_InitKeyVar+0x100>)
 8004230:	4a13      	ldr	r2, [pc, #76]	; (8004280 <bsp_InitKeyVar+0x10c>)
 8004232:	621a      	str	r2, [r3, #32]
	s_tBtn[3].IsKeyDownFunc = IsKeyDown4;
 8004234:	4b0f      	ldr	r3, [pc, #60]	; (8004274 <bsp_InitKeyVar+0x100>)
 8004236:	4a13      	ldr	r2, [pc, #76]	; (8004284 <bsp_InitKeyVar+0x110>)
 8004238:	631a      	str	r2, [r3, #48]	; 0x30
	s_tBtn[4].IsKeyDownFunc = IsKeyDown5;
 800423a:	4b0e      	ldr	r3, [pc, #56]	; (8004274 <bsp_InitKeyVar+0x100>)
 800423c:	4a12      	ldr	r2, [pc, #72]	; (8004288 <bsp_InitKeyVar+0x114>)
 800423e:	641a      	str	r2, [r3, #64]	; 0x40
	s_tBtn[5].IsKeyDownFunc = IsKeyDown6;
 8004240:	4b0c      	ldr	r3, [pc, #48]	; (8004274 <bsp_InitKeyVar+0x100>)
 8004242:	4a12      	ldr	r2, [pc, #72]	; (800428c <bsp_InitKeyVar+0x118>)
 8004244:	651a      	str	r2, [r3, #80]	; 0x50
	s_tBtn[6].IsKeyDownFunc = IsKeyDown7;
 8004246:	4b0b      	ldr	r3, [pc, #44]	; (8004274 <bsp_InitKeyVar+0x100>)
 8004248:	4a11      	ldr	r2, [pc, #68]	; (8004290 <bsp_InitKeyVar+0x11c>)
 800424a:	661a      	str	r2, [r3, #96]	; 0x60
	s_tBtn[7].IsKeyDownFunc = IsKeyDown8;
 800424c:	4b09      	ldr	r3, [pc, #36]	; (8004274 <bsp_InitKeyVar+0x100>)
 800424e:	4a11      	ldr	r2, [pc, #68]	; (8004294 <bsp_InitKeyVar+0x120>)
 8004250:	671a      	str	r2, [r3, #112]	; 0x70

	/* 조합 키 */
	s_tBtn[8].IsKeyDownFunc = IsKeyDown9;
 8004252:	4b08      	ldr	r3, [pc, #32]	; (8004274 <bsp_InitKeyVar+0x100>)
 8004254:	4a10      	ldr	r2, [pc, #64]	; (8004298 <bsp_InitKeyVar+0x124>)
 8004256:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	s_tBtn[9].IsKeyDownFunc = IsKeyDown10;
 800425a:	4b06      	ldr	r3, [pc, #24]	; (8004274 <bsp_InitKeyVar+0x100>)
 800425c:	4a0f      	ldr	r2, [pc, #60]	; (800429c <bsp_InitKeyVar+0x128>)
 800425e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
}
 8004262:	bf00      	nop
 8004264:	370c      	adds	r7, #12
 8004266:	46bd      	mov	sp, r7
 8004268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426c:	4770      	bx	lr
 800426e:	bf00      	nop
 8004270:	200002e8 	.word	0x200002e8
 8004274:	20000248 	.word	0x20000248
 8004278:	08003ec5 	.word	0x08003ec5
 800427c:	08003ee9 	.word	0x08003ee9
 8004280:	08003f0d 	.word	0x08003f0d
 8004284:	08003f31 	.word	0x08003f31
 8004288:	08003f51 	.word	0x08003f51
 800428c:	08003f71 	.word	0x08003f71
 8004290:	08003f95 	.word	0x08003f95
 8004294:	08003fb5 	.word	0x08003fb5
 8004298:	08003fd9 	.word	0x08003fd9
 800429c:	08003ffb 	.word	0x08003ffb

080042a0 <bsp_PutKey>:
*	매개 변수: _KeyCode - 키 코드
*	반환 값: 없음
*********************************************************************************************************
*/
void bsp_PutKey(uint8_t _KeyCode)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b083      	sub	sp, #12
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	4603      	mov	r3, r0
 80042a8:	71fb      	strb	r3, [r7, #7]
	s_tKey.Buf[s_tKey.Write] = _KeyCode;
 80042aa:	4b0c      	ldr	r3, [pc, #48]	; (80042dc <bsp_PutKey+0x3c>)
 80042ac:	7adb      	ldrb	r3, [r3, #11]
 80042ae:	4619      	mov	r1, r3
 80042b0:	4a0a      	ldr	r2, [pc, #40]	; (80042dc <bsp_PutKey+0x3c>)
 80042b2:	79fb      	ldrb	r3, [r7, #7]
 80042b4:	5453      	strb	r3, [r2, r1]

	if (++s_tKey.Write >= KEY_FIFO_SIZE)
 80042b6:	4b09      	ldr	r3, [pc, #36]	; (80042dc <bsp_PutKey+0x3c>)
 80042b8:	7adb      	ldrb	r3, [r3, #11]
 80042ba:	3301      	adds	r3, #1
 80042bc:	b2da      	uxtb	r2, r3
 80042be:	4b07      	ldr	r3, [pc, #28]	; (80042dc <bsp_PutKey+0x3c>)
 80042c0:	72da      	strb	r2, [r3, #11]
 80042c2:	4b06      	ldr	r3, [pc, #24]	; (80042dc <bsp_PutKey+0x3c>)
 80042c4:	7adb      	ldrb	r3, [r3, #11]
 80042c6:	2b09      	cmp	r3, #9
 80042c8:	d902      	bls.n	80042d0 <bsp_PutKey+0x30>
	{
		s_tKey.Write = 0;
 80042ca:	4b04      	ldr	r3, [pc, #16]	; (80042dc <bsp_PutKey+0x3c>)
 80042cc:	2200      	movs	r2, #0
 80042ce:	72da      	strb	r2, [r3, #11]
	}
}
 80042d0:	bf00      	nop
 80042d2:	370c      	adds	r7, #12
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr
 80042dc:	200002e8 	.word	0x200002e8

080042e0 <bsp_DetectKey>:
*	매개 변수: i - 키 인덱스
*	반환 값: 없음
*********************************************************************************************************
*/
static void bsp_DetectKey(uint8_t i)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b084      	sub	sp, #16
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	4603      	mov	r3, r0
 80042e8:	71fb      	strb	r3, [r7, #7]
	KEY_T *pBtn;

	pBtn = &s_tBtn[i];
 80042ea:	79fb      	ldrb	r3, [r7, #7]
 80042ec:	011b      	lsls	r3, r3, #4
 80042ee:	4a4d      	ldr	r2, [pc, #308]	; (8004424 <bsp_DetectKey+0x144>)
 80042f0:	4413      	add	r3, r2
 80042f2:	60fb      	str	r3, [r7, #12]

	if (pBtn->IsKeyDownFunc())
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4798      	blx	r3
 80042fa:	4603      	mov	r3, r0
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d062      	beq.n	80043c6 <bsp_DetectKey+0xe6>
	{
		if (pBtn->Count < KEY_FILTER_TIME)
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	791b      	ldrb	r3, [r3, #4]
 8004304:	2b04      	cmp	r3, #4
 8004306:	d803      	bhi.n	8004310 <bsp_DetectKey+0x30>
		{
			pBtn->Count = KEY_FILTER_TIME;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2205      	movs	r2, #5
 800430c:	711a      	strb	r2, [r3, #4]
		}

		pBtn->LongCount = 0;
		pBtn->RepeatCount = 0;
	}
}
 800430e:	e084      	b.n	800441a <bsp_DetectKey+0x13a>
		else if (pBtn->Count < 2 * KEY_FILTER_TIME)
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	791b      	ldrb	r3, [r3, #4]
 8004314:	2b09      	cmp	r3, #9
 8004316:	d806      	bhi.n	8004326 <bsp_DetectKey+0x46>
			pBtn->Count++;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	791b      	ldrb	r3, [r3, #4]
 800431c:	3301      	adds	r3, #1
 800431e:	b2da      	uxtb	r2, r3
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	711a      	strb	r2, [r3, #4]
}
 8004324:	e079      	b.n	800441a <bsp_DetectKey+0x13a>
			if (pBtn->State == 0)
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	7a9b      	ldrb	r3, [r3, #10]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d10c      	bne.n	8004348 <bsp_DetectKey+0x68>
				pBtn->State = 1;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2201      	movs	r2, #1
 8004332:	729a      	strb	r2, [r3, #10]
				bsp_PutKey((uint8_t)(3 * i + 1));
 8004334:	79fb      	ldrb	r3, [r7, #7]
 8004336:	461a      	mov	r2, r3
 8004338:	0052      	lsls	r2, r2, #1
 800433a:	4413      	add	r3, r2
 800433c:	b2db      	uxtb	r3, r3
 800433e:	3301      	adds	r3, #1
 8004340:	b2db      	uxtb	r3, r3
 8004342:	4618      	mov	r0, r3
 8004344:	f7ff ffac 	bl	80042a0 <bsp_PutKey>
			if (pBtn->LongTime > 0)
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	891b      	ldrh	r3, [r3, #8]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d064      	beq.n	800441a <bsp_DetectKey+0x13a>
				if (pBtn->LongCount < pBtn->LongTime)
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	88da      	ldrh	r2, [r3, #6]
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	891b      	ldrh	r3, [r3, #8]
 8004358:	429a      	cmp	r2, r3
 800435a:	d216      	bcs.n	800438a <bsp_DetectKey+0xaa>
					if (++pBtn->LongCount == pBtn->LongTime)
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	88db      	ldrh	r3, [r3, #6]
 8004360:	3301      	adds	r3, #1
 8004362:	b29a      	uxth	r2, r3
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	80da      	strh	r2, [r3, #6]
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	88da      	ldrh	r2, [r3, #6]
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	891b      	ldrh	r3, [r3, #8]
 8004370:	429a      	cmp	r2, r3
 8004372:	d152      	bne.n	800441a <bsp_DetectKey+0x13a>
						bsp_PutKey((uint8_t)(3 * i + 3));
 8004374:	79fb      	ldrb	r3, [r7, #7]
 8004376:	3301      	adds	r3, #1
 8004378:	b2db      	uxtb	r3, r3
 800437a:	461a      	mov	r2, r3
 800437c:	0052      	lsls	r2, r2, #1
 800437e:	4413      	add	r3, r2
 8004380:	b2db      	uxtb	r3, r3
 8004382:	4618      	mov	r0, r3
 8004384:	f7ff ff8c 	bl	80042a0 <bsp_PutKey>
}
 8004388:	e047      	b.n	800441a <bsp_DetectKey+0x13a>
					if (pBtn->RepeatSpeed > 0)
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	7adb      	ldrb	r3, [r3, #11]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d043      	beq.n	800441a <bsp_DetectKey+0x13a>
						if (++pBtn->RepeatCount >= pBtn->RepeatSpeed)
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	7b1b      	ldrb	r3, [r3, #12]
 8004396:	3301      	adds	r3, #1
 8004398:	b2da      	uxtb	r2, r3
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	731a      	strb	r2, [r3, #12]
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	7b1a      	ldrb	r2, [r3, #12]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	7adb      	ldrb	r3, [r3, #11]
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d337      	bcc.n	800441a <bsp_DetectKey+0x13a>
							pBtn->RepeatCount = 0;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2200      	movs	r2, #0
 80043ae:	731a      	strb	r2, [r3, #12]
							bsp_PutKey((uint8_t)(3 * i + 1));
 80043b0:	79fb      	ldrb	r3, [r7, #7]
 80043b2:	461a      	mov	r2, r3
 80043b4:	0052      	lsls	r2, r2, #1
 80043b6:	4413      	add	r3, r2
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	3301      	adds	r3, #1
 80043bc:	b2db      	uxtb	r3, r3
 80043be:	4618      	mov	r0, r3
 80043c0:	f7ff ff6e 	bl	80042a0 <bsp_PutKey>
}
 80043c4:	e029      	b.n	800441a <bsp_DetectKey+0x13a>
		if (pBtn->Count > KEY_FILTER_TIME)
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	791b      	ldrb	r3, [r3, #4]
 80043ca:	2b05      	cmp	r3, #5
 80043cc:	d903      	bls.n	80043d6 <bsp_DetectKey+0xf6>
			pBtn->Count = KEY_FILTER_TIME;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2205      	movs	r2, #5
 80043d2:	711a      	strb	r2, [r3, #4]
 80043d4:	e01b      	b.n	800440e <bsp_DetectKey+0x12e>
		else if (pBtn->Count > 0)
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	791b      	ldrb	r3, [r3, #4]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d006      	beq.n	80043ec <bsp_DetectKey+0x10c>
			pBtn->Count--;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	791b      	ldrb	r3, [r3, #4]
 80043e2:	3b01      	subs	r3, #1
 80043e4:	b2da      	uxtb	r2, r3
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	711a      	strb	r2, [r3, #4]
 80043ea:	e010      	b.n	800440e <bsp_DetectKey+0x12e>
			if (pBtn->State == 1)
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	7a9b      	ldrb	r3, [r3, #10]
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d10c      	bne.n	800440e <bsp_DetectKey+0x12e>
				pBtn->State = 0;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2200      	movs	r2, #0
 80043f8:	729a      	strb	r2, [r3, #10]
				bsp_PutKey((uint8_t)(3 * i + 2));
 80043fa:	79fb      	ldrb	r3, [r7, #7]
 80043fc:	461a      	mov	r2, r3
 80043fe:	0052      	lsls	r2, r2, #1
 8004400:	4413      	add	r3, r2
 8004402:	b2db      	uxtb	r3, r3
 8004404:	3302      	adds	r3, #2
 8004406:	b2db      	uxtb	r3, r3
 8004408:	4618      	mov	r0, r3
 800440a:	f7ff ff49 	bl	80042a0 <bsp_PutKey>
		pBtn->LongCount = 0;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2200      	movs	r2, #0
 8004412:	80da      	strh	r2, [r3, #6]
		pBtn->RepeatCount = 0;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2200      	movs	r2, #0
 8004418:	731a      	strb	r2, [r3, #12]
}
 800441a:	bf00      	nop
 800441c:	3710      	adds	r7, #16
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}
 8004422:	bf00      	nop
 8004424:	20000248 	.word	0x20000248

08004428 <bsp_KeyScan>:
*	매개 변수: 없음
*	반환 값: 없음
*********************************************************************************************************
*/
void bsp_KeyScan(void)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b082      	sub	sp, #8
 800442c:	af00      	add	r7, sp, #0
	uint8_t i;

	for (i = 0; i < KEY_COUNT; i++)
 800442e:	2300      	movs	r3, #0
 8004430:	71fb      	strb	r3, [r7, #7]
 8004432:	e006      	b.n	8004442 <bsp_KeyScan+0x1a>
	{
		bsp_DetectKey(i);
 8004434:	79fb      	ldrb	r3, [r7, #7]
 8004436:	4618      	mov	r0, r3
 8004438:	f7ff ff52 	bl	80042e0 <bsp_DetectKey>
	for (i = 0; i < KEY_COUNT; i++)
 800443c:	79fb      	ldrb	r3, [r7, #7]
 800443e:	3301      	adds	r3, #1
 8004440:	71fb      	strb	r3, [r7, #7]
 8004442:	79fb      	ldrb	r3, [r7, #7]
 8004444:	2b09      	cmp	r3, #9
 8004446:	d9f5      	bls.n	8004434 <bsp_KeyScan+0xc>
	}
}
 8004448:	bf00      	nop
 800444a:	bf00      	nop
 800444c:	3708      	adds	r7, #8
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}
	...

08004454 <bsp_GetKey2>:
*********************************************************************************************************
*	함수 이름: bsp_GetKey2
*********************************************************************************************************
*/
uint8_t bsp_GetKey2(void)
{
 8004454:	b480      	push	{r7}
 8004456:	b083      	sub	sp, #12
 8004458:	af00      	add	r7, sp, #0
	uint8_t ret;

	if (s_tKey.Read2 == s_tKey.Write)
 800445a:	4b11      	ldr	r3, [pc, #68]	; (80044a0 <bsp_GetKey2+0x4c>)
 800445c:	7b1a      	ldrb	r2, [r3, #12]
 800445e:	4b10      	ldr	r3, [pc, #64]	; (80044a0 <bsp_GetKey2+0x4c>)
 8004460:	7adb      	ldrb	r3, [r3, #11]
 8004462:	429a      	cmp	r2, r3
 8004464:	d101      	bne.n	800446a <bsp_GetKey2+0x16>
	{
		return KEY_NONE;
 8004466:	2300      	movs	r3, #0
 8004468:	e013      	b.n	8004492 <bsp_GetKey2+0x3e>
	}
	else
	{
		ret = s_tKey.Buf[s_tKey.Read2];
 800446a:	4b0d      	ldr	r3, [pc, #52]	; (80044a0 <bsp_GetKey2+0x4c>)
 800446c:	7b1b      	ldrb	r3, [r3, #12]
 800446e:	461a      	mov	r2, r3
 8004470:	4b0b      	ldr	r3, [pc, #44]	; (80044a0 <bsp_GetKey2+0x4c>)
 8004472:	5c9b      	ldrb	r3, [r3, r2]
 8004474:	71fb      	strb	r3, [r7, #7]

		if (++s_tKey.Read2 >= KEY_FIFO_SIZE)
 8004476:	4b0a      	ldr	r3, [pc, #40]	; (80044a0 <bsp_GetKey2+0x4c>)
 8004478:	7b1b      	ldrb	r3, [r3, #12]
 800447a:	3301      	adds	r3, #1
 800447c:	b2da      	uxtb	r2, r3
 800447e:	4b08      	ldr	r3, [pc, #32]	; (80044a0 <bsp_GetKey2+0x4c>)
 8004480:	731a      	strb	r2, [r3, #12]
 8004482:	4b07      	ldr	r3, [pc, #28]	; (80044a0 <bsp_GetKey2+0x4c>)
 8004484:	7b1b      	ldrb	r3, [r3, #12]
 8004486:	2b09      	cmp	r3, #9
 8004488:	d902      	bls.n	8004490 <bsp_GetKey2+0x3c>
		{
			s_tKey.Read2 = 0;
 800448a:	4b05      	ldr	r3, [pc, #20]	; (80044a0 <bsp_GetKey2+0x4c>)
 800448c:	2200      	movs	r2, #0
 800448e:	731a      	strb	r2, [r3, #12]
		}
		return ret;
 8004490:	79fb      	ldrb	r3, [r7, #7]
	}
}
 8004492:	4618      	mov	r0, r3
 8004494:	370c      	adds	r7, #12
 8004496:	46bd      	mov	sp, r7
 8004498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449c:	4770      	bx	lr
 800449e:	bf00      	nop
 80044a0:	200002e8 	.word	0x200002e8

080044a4 <bsp_GetKey>:
*********************************************************************************************************
*	함수 이름: bsp_GetKey
*********************************************************************************************************
*/
uint8_t bsp_GetKey(void)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b083      	sub	sp, #12
 80044a8:	af00      	add	r7, sp, #0
	uint8_t ret;

	if (s_tKey.Read == s_tKey.Write)
 80044aa:	4b11      	ldr	r3, [pc, #68]	; (80044f0 <bsp_GetKey+0x4c>)
 80044ac:	7a9a      	ldrb	r2, [r3, #10]
 80044ae:	4b10      	ldr	r3, [pc, #64]	; (80044f0 <bsp_GetKey+0x4c>)
 80044b0:	7adb      	ldrb	r3, [r3, #11]
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d101      	bne.n	80044ba <bsp_GetKey+0x16>
	{
		return KEY_NONE;
 80044b6:	2300      	movs	r3, #0
 80044b8:	e013      	b.n	80044e2 <bsp_GetKey+0x3e>
	}
	else
	{
		ret = s_tKey.Buf[s_tKey.Read];
 80044ba:	4b0d      	ldr	r3, [pc, #52]	; (80044f0 <bsp_GetKey+0x4c>)
 80044bc:	7a9b      	ldrb	r3, [r3, #10]
 80044be:	461a      	mov	r2, r3
 80044c0:	4b0b      	ldr	r3, [pc, #44]	; (80044f0 <bsp_GetKey+0x4c>)
 80044c2:	5c9b      	ldrb	r3, [r3, r2]
 80044c4:	71fb      	strb	r3, [r7, #7]

		if (++s_tKey.Read >= KEY_FIFO_SIZE)
 80044c6:	4b0a      	ldr	r3, [pc, #40]	; (80044f0 <bsp_GetKey+0x4c>)
 80044c8:	7a9b      	ldrb	r3, [r3, #10]
 80044ca:	3301      	adds	r3, #1
 80044cc:	b2da      	uxtb	r2, r3
 80044ce:	4b08      	ldr	r3, [pc, #32]	; (80044f0 <bsp_GetKey+0x4c>)
 80044d0:	729a      	strb	r2, [r3, #10]
 80044d2:	4b07      	ldr	r3, [pc, #28]	; (80044f0 <bsp_GetKey+0x4c>)
 80044d4:	7a9b      	ldrb	r3, [r3, #10]
 80044d6:	2b09      	cmp	r3, #9
 80044d8:	d902      	bls.n	80044e0 <bsp_GetKey+0x3c>
		{
			s_tKey.Read = 0;
 80044da:	4b05      	ldr	r3, [pc, #20]	; (80044f0 <bsp_GetKey+0x4c>)
 80044dc:	2200      	movs	r2, #0
 80044de:	729a      	strb	r2, [r3, #10]
		}
		return ret;
 80044e0:	79fb      	ldrb	r3, [r7, #7]
	}
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	370c      	adds	r7, #12
 80044e6:	46bd      	mov	sp, r7
 80044e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ec:	4770      	bx	lr
 80044ee:	bf00      	nop
 80044f0:	200002e8 	.word	0x200002e8

080044f4 <bsp_InitLed>:
*********************************************************************************************************
*	Func name: bsp_InitLed
*********************************************************************************************************
*/
void bsp_InitLed(void)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b08a      	sub	sp, #40	; 0x28
 80044f8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;
	// #define RCC_ALL_LED 	(RCC_AHB1Periph_GPIOC | RCC_AHB1Periph_GPIOF | RCC_AHB1Periph_GPIOI)
	__HAL_RCC_GPIOI_CLK_ENABLE();
 80044fa:	2300      	movs	r3, #0
 80044fc:	613b      	str	r3, [r7, #16]
 80044fe:	4b40      	ldr	r3, [pc, #256]	; (8004600 <bsp_InitLed+0x10c>)
 8004500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004502:	4a3f      	ldr	r2, [pc, #252]	; (8004600 <bsp_InitLed+0x10c>)
 8004504:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004508:	6313      	str	r3, [r2, #48]	; 0x30
 800450a:	4b3d      	ldr	r3, [pc, #244]	; (8004600 <bsp_InitLed+0x10c>)
 800450c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800450e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004512:	613b      	str	r3, [r7, #16]
 8004514:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8004516:	2300      	movs	r3, #0
 8004518:	60fb      	str	r3, [r7, #12]
 800451a:	4b39      	ldr	r3, [pc, #228]	; (8004600 <bsp_InitLed+0x10c>)
 800451c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800451e:	4a38      	ldr	r2, [pc, #224]	; (8004600 <bsp_InitLed+0x10c>)
 8004520:	f043 0304 	orr.w	r3, r3, #4
 8004524:	6313      	str	r3, [r2, #48]	; 0x30
 8004526:	4b36      	ldr	r3, [pc, #216]	; (8004600 <bsp_InitLed+0x10c>)
 8004528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800452a:	f003 0304 	and.w	r3, r3, #4
 800452e:	60fb      	str	r3, [r7, #12]
 8004530:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8004532:	2300      	movs	r3, #0
 8004534:	60bb      	str	r3, [r7, #8]
 8004536:	4b32      	ldr	r3, [pc, #200]	; (8004600 <bsp_InitLed+0x10c>)
 8004538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800453a:	4a31      	ldr	r2, [pc, #196]	; (8004600 <bsp_InitLed+0x10c>)
 800453c:	f043 0320 	orr.w	r3, r3, #32
 8004540:	6313      	str	r3, [r2, #48]	; 0x30
 8004542:	4b2f      	ldr	r3, [pc, #188]	; (8004600 <bsp_InitLed+0x10c>)
 8004544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004546:	f003 0320 	and.w	r3, r3, #32
 800454a:	60bb      	str	r3, [r7, #8]
 800454c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800454e:	2300      	movs	r3, #0
 8004550:	607b      	str	r3, [r7, #4]
 8004552:	4b2b      	ldr	r3, [pc, #172]	; (8004600 <bsp_InitLed+0x10c>)
 8004554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004556:	4a2a      	ldr	r2, [pc, #168]	; (8004600 <bsp_InitLed+0x10c>)
 8004558:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800455c:	6313      	str	r3, [r2, #48]	; 0x30
 800455e:	4b28      	ldr	r3, [pc, #160]	; (8004600 <bsp_InitLed+0x10c>)
 8004560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004562:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004566:	607b      	str	r3, [r7, #4]
 8004568:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800456a:	2300      	movs	r3, #0
 800456c:	603b      	str	r3, [r7, #0]
 800456e:	4b24      	ldr	r3, [pc, #144]	; (8004600 <bsp_InitLed+0x10c>)
 8004570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004572:	4a23      	ldr	r2, [pc, #140]	; (8004600 <bsp_InitLed+0x10c>)
 8004574:	f043 0301 	orr.w	r3, r3, #1
 8004578:	6313      	str	r3, [r2, #48]	; 0x30
 800457a:	4b21      	ldr	r3, [pc, #132]	; (8004600 <bsp_InitLed+0x10c>)
 800457c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800457e:	f003 0301 	and.w	r3, r3, #1
 8004582:	603b      	str	r3, [r7, #0]
 8004584:	683b      	ldr	r3, [r7, #0]

	bsp_LedOff(1);
 8004586:	2001      	movs	r0, #1
 8004588:	f000 f87a 	bl	8004680 <bsp_LedOff>
	bsp_LedOff(2);
 800458c:	2002      	movs	r0, #2
 800458e:	f000 f877 	bl	8004680 <bsp_LedOff>
	bsp_LedOff(3);
 8004592:	2003      	movs	r0, #3
 8004594:	f000 f874 	bl	8004680 <bsp_LedOff>
	bsp_LedOff(4);
 8004598:	2004      	movs	r0, #4
 800459a:	f000 f871 	bl	8004680 <bsp_LedOff>

	GPIO_InitStructure.Pin = GPIO_PIN_LED1;
 800459e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80045a2:	617b      	str	r3, [r7, #20]
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 80045a4:	2301      	movs	r3, #1
 80045a6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStructure.Pull = GPIO_NOPULL;
 80045a8:	2300      	movs	r3, #0
 80045aa:	61fb      	str	r3, [r7, #28]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 80045ac:	2302      	movs	r3, #2
 80045ae:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOI, &GPIO_InitStructure);
 80045b0:	f107 0314 	add.w	r3, r7, #20
 80045b4:	4619      	mov	r1, r3
 80045b6:	4813      	ldr	r0, [pc, #76]	; (8004604 <bsp_InitLed+0x110>)
 80045b8:	f002 fc76 	bl	8006ea8 <HAL_GPIO_Init>

	GPIO_InitStructure.Pin = GPIO_PIN_LED2|GPIO_PIN_LED3;
 80045bc:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80045c0:	617b      	str	r3, [r7, #20]
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 80045c2:	2301      	movs	r3, #1
 80045c4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStructure.Pull = GPIO_NOPULL;
 80045c6:	2300      	movs	r3, #0
 80045c8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 80045ca:	2302      	movs	r3, #2
 80045cc:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 80045ce:	f107 0314 	add.w	r3, r7, #20
 80045d2:	4619      	mov	r1, r3
 80045d4:	480c      	ldr	r0, [pc, #48]	; (8004608 <bsp_InitLed+0x114>)
 80045d6:	f002 fc67 	bl	8006ea8 <HAL_GPIO_Init>

	GPIO_InitStructure.Pin = GPIO_PIN_LED4;
 80045da:	2304      	movs	r3, #4
 80045dc:	617b      	str	r3, [r7, #20]
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 80045de:	2301      	movs	r3, #1
 80045e0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStructure.Pull = GPIO_NOPULL;
 80045e2:	2300      	movs	r3, #0
 80045e4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 80045e6:	2302      	movs	r3, #2
 80045e8:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 80045ea:	f107 0314 	add.w	r3, r7, #20
 80045ee:	4619      	mov	r1, r3
 80045f0:	4806      	ldr	r0, [pc, #24]	; (800460c <bsp_InitLed+0x118>)
 80045f2:	f002 fc59 	bl	8006ea8 <HAL_GPIO_Init>
}
 80045f6:	bf00      	nop
 80045f8:	3728      	adds	r7, #40	; 0x28
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}
 80045fe:	bf00      	nop
 8004600:	40023800 	.word	0x40023800
 8004604:	40022000 	.word	0x40022000
 8004608:	40021400 	.word	0x40021400
 800460c:	40020800 	.word	0x40020800

08004610 <bsp_LedOn>:
*********************************************************************************************************
*	Func name: bsp_LedOn
*********************************************************************************************************
*/
void bsp_LedOn(uint8_t _no)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b082      	sub	sp, #8
 8004614:	af00      	add	r7, sp, #0
 8004616:	4603      	mov	r3, r0
 8004618:	71fb      	strb	r3, [r7, #7]
	_no--;
 800461a:	79fb      	ldrb	r3, [r7, #7]
 800461c:	3b01      	subs	r3, #1
 800461e:	71fb      	strb	r3, [r7, #7]

	if (_no == 0)
 8004620:	79fb      	ldrb	r3, [r7, #7]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d106      	bne.n	8004634 <bsp_LedOn+0x24>
	{
		HAL_GPIO_WritePin(GPIOI, GPIO_PIN_LED1, GPIO_PIN_RESET);
 8004626:	2200      	movs	r2, #0
 8004628:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800462c:	4811      	ldr	r0, [pc, #68]	; (8004674 <bsp_LedOn+0x64>)
 800462e:	f002 fdef 	bl	8007210 <HAL_GPIO_WritePin>
	}
	else if (_no == 3)
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_LED4, GPIO_PIN_RESET);
	}
}
 8004632:	e01a      	b.n	800466a <bsp_LedOn+0x5a>
	else if (_no == 1)
 8004634:	79fb      	ldrb	r3, [r7, #7]
 8004636:	2b01      	cmp	r3, #1
 8004638:	d105      	bne.n	8004646 <bsp_LedOn+0x36>
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_LED2, GPIO_PIN_RESET);
 800463a:	2200      	movs	r2, #0
 800463c:	2180      	movs	r1, #128	; 0x80
 800463e:	480e      	ldr	r0, [pc, #56]	; (8004678 <bsp_LedOn+0x68>)
 8004640:	f002 fde6 	bl	8007210 <HAL_GPIO_WritePin>
}
 8004644:	e011      	b.n	800466a <bsp_LedOn+0x5a>
	else if (_no == 2)
 8004646:	79fb      	ldrb	r3, [r7, #7]
 8004648:	2b02      	cmp	r3, #2
 800464a:	d106      	bne.n	800465a <bsp_LedOn+0x4a>
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_LED3, GPIO_PIN_RESET);
 800464c:	2200      	movs	r2, #0
 800464e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004652:	4809      	ldr	r0, [pc, #36]	; (8004678 <bsp_LedOn+0x68>)
 8004654:	f002 fddc 	bl	8007210 <HAL_GPIO_WritePin>
}
 8004658:	e007      	b.n	800466a <bsp_LedOn+0x5a>
	else if (_no == 3)
 800465a:	79fb      	ldrb	r3, [r7, #7]
 800465c:	2b03      	cmp	r3, #3
 800465e:	d104      	bne.n	800466a <bsp_LedOn+0x5a>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_LED4, GPIO_PIN_RESET);
 8004660:	2200      	movs	r2, #0
 8004662:	2104      	movs	r1, #4
 8004664:	4805      	ldr	r0, [pc, #20]	; (800467c <bsp_LedOn+0x6c>)
 8004666:	f002 fdd3 	bl	8007210 <HAL_GPIO_WritePin>
}
 800466a:	bf00      	nop
 800466c:	3708      	adds	r7, #8
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}
 8004672:	bf00      	nop
 8004674:	40022000 	.word	0x40022000
 8004678:	40021400 	.word	0x40021400
 800467c:	40020800 	.word	0x40020800

08004680 <bsp_LedOff>:
*********************************************************************************************************
*	Func name: bsp_LedOff
*********************************************************************************************************
*/
void bsp_LedOff(uint8_t _no)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b082      	sub	sp, #8
 8004684:	af00      	add	r7, sp, #0
 8004686:	4603      	mov	r3, r0
 8004688:	71fb      	strb	r3, [r7, #7]
	_no--;
 800468a:	79fb      	ldrb	r3, [r7, #7]
 800468c:	3b01      	subs	r3, #1
 800468e:	71fb      	strb	r3, [r7, #7]

	if (_no == 0)
 8004690:	79fb      	ldrb	r3, [r7, #7]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d106      	bne.n	80046a4 <bsp_LedOff+0x24>
	{
		HAL_GPIO_WritePin(GPIOI, GPIO_PIN_LED1, GPIO_PIN_SET);
 8004696:	2201      	movs	r2, #1
 8004698:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800469c:	4811      	ldr	r0, [pc, #68]	; (80046e4 <bsp_LedOff+0x64>)
 800469e:	f002 fdb7 	bl	8007210 <HAL_GPIO_WritePin>
	}
	else if (_no == 3)
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_LED4, GPIO_PIN_SET);
	}
}
 80046a2:	e01a      	b.n	80046da <bsp_LedOff+0x5a>
	else if (_no == 1)
 80046a4:	79fb      	ldrb	r3, [r7, #7]
 80046a6:	2b01      	cmp	r3, #1
 80046a8:	d105      	bne.n	80046b6 <bsp_LedOff+0x36>
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_LED2, GPIO_PIN_SET);
 80046aa:	2201      	movs	r2, #1
 80046ac:	2180      	movs	r1, #128	; 0x80
 80046ae:	480e      	ldr	r0, [pc, #56]	; (80046e8 <bsp_LedOff+0x68>)
 80046b0:	f002 fdae 	bl	8007210 <HAL_GPIO_WritePin>
}
 80046b4:	e011      	b.n	80046da <bsp_LedOff+0x5a>
	else if (_no == 2)
 80046b6:	79fb      	ldrb	r3, [r7, #7]
 80046b8:	2b02      	cmp	r3, #2
 80046ba:	d106      	bne.n	80046ca <bsp_LedOff+0x4a>
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_LED3, GPIO_PIN_SET);
 80046bc:	2201      	movs	r2, #1
 80046be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80046c2:	4809      	ldr	r0, [pc, #36]	; (80046e8 <bsp_LedOff+0x68>)
 80046c4:	f002 fda4 	bl	8007210 <HAL_GPIO_WritePin>
}
 80046c8:	e007      	b.n	80046da <bsp_LedOff+0x5a>
	else if (_no == 3)
 80046ca:	79fb      	ldrb	r3, [r7, #7]
 80046cc:	2b03      	cmp	r3, #3
 80046ce:	d104      	bne.n	80046da <bsp_LedOff+0x5a>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_LED4, GPIO_PIN_SET);
 80046d0:	2201      	movs	r2, #1
 80046d2:	2104      	movs	r1, #4
 80046d4:	4805      	ldr	r0, [pc, #20]	; (80046ec <bsp_LedOff+0x6c>)
 80046d6:	f002 fd9b 	bl	8007210 <HAL_GPIO_WritePin>
}
 80046da:	bf00      	nop
 80046dc:	3708      	adds	r7, #8
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}
 80046e2:	bf00      	nop
 80046e4:	40022000 	.word	0x40022000
 80046e8:	40021400 	.word	0x40021400
 80046ec:	40020800 	.word	0x40020800

080046f0 <bsp_InitNorFlash>:
*********************************************************************************************************
*	Func name: bsp_InitNorFlash
*********************************************************************************************************
*/
void bsp_InitNorFlash(void)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b0ac      	sub	sp, #176	; 0xb0
 80046f4:	af00      	add	r7, sp, #0
	SRAM_HandleTypeDef hnorsram;
	FSMC_NORSRAM_TimingTypeDef  timingWrite;
	FSMC_NORSRAM_TimingTypeDef  timingRead;
	GPIO_InitTypeDef GPIO_InitStructure;

	__HAL_RCC_GPIOD_CLK_ENABLE();
 80046f6:	2300      	movs	r3, #0
 80046f8:	613b      	str	r3, [r7, #16]
 80046fa:	4b6a      	ldr	r3, [pc, #424]	; (80048a4 <bsp_InitNorFlash+0x1b4>)
 80046fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046fe:	4a69      	ldr	r2, [pc, #420]	; (80048a4 <bsp_InitNorFlash+0x1b4>)
 8004700:	f043 0308 	orr.w	r3, r3, #8
 8004704:	6313      	str	r3, [r2, #48]	; 0x30
 8004706:	4b67      	ldr	r3, [pc, #412]	; (80048a4 <bsp_InitNorFlash+0x1b4>)
 8004708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800470a:	f003 0308 	and.w	r3, r3, #8
 800470e:	613b      	str	r3, [r7, #16]
 8004710:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8004712:	2300      	movs	r3, #0
 8004714:	60fb      	str	r3, [r7, #12]
 8004716:	4b63      	ldr	r3, [pc, #396]	; (80048a4 <bsp_InitNorFlash+0x1b4>)
 8004718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800471a:	4a62      	ldr	r2, [pc, #392]	; (80048a4 <bsp_InitNorFlash+0x1b4>)
 800471c:	f043 0310 	orr.w	r3, r3, #16
 8004720:	6313      	str	r3, [r2, #48]	; 0x30
 8004722:	4b60      	ldr	r3, [pc, #384]	; (80048a4 <bsp_InitNorFlash+0x1b4>)
 8004724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004726:	f003 0310 	and.w	r3, r3, #16
 800472a:	60fb      	str	r3, [r7, #12]
 800472c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 800472e:	2300      	movs	r3, #0
 8004730:	60bb      	str	r3, [r7, #8]
 8004732:	4b5c      	ldr	r3, [pc, #368]	; (80048a4 <bsp_InitNorFlash+0x1b4>)
 8004734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004736:	4a5b      	ldr	r2, [pc, #364]	; (80048a4 <bsp_InitNorFlash+0x1b4>)
 8004738:	f043 0320 	orr.w	r3, r3, #32
 800473c:	6313      	str	r3, [r2, #48]	; 0x30
 800473e:	4b59      	ldr	r3, [pc, #356]	; (80048a4 <bsp_InitNorFlash+0x1b4>)
 8004740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004742:	f003 0320 	and.w	r3, r3, #32
 8004746:	60bb      	str	r3, [r7, #8]
 8004748:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 800474a:	2300      	movs	r3, #0
 800474c:	607b      	str	r3, [r7, #4]
 800474e:	4b55      	ldr	r3, [pc, #340]	; (80048a4 <bsp_InitNorFlash+0x1b4>)
 8004750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004752:	4a54      	ldr	r2, [pc, #336]	; (80048a4 <bsp_InitNorFlash+0x1b4>)
 8004754:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004758:	6313      	str	r3, [r2, #48]	; 0x30
 800475a:	4b52      	ldr	r3, [pc, #328]	; (80048a4 <bsp_InitNorFlash+0x1b4>)
 800475c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800475e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004762:	607b      	str	r3, [r7, #4]
 8004764:	687b      	ldr	r3, [r7, #4]

	__HAL_RCC_FSMC_CLK_ENABLE();
 8004766:	2300      	movs	r3, #0
 8004768:	603b      	str	r3, [r7, #0]
 800476a:	4b4e      	ldr	r3, [pc, #312]	; (80048a4 <bsp_InitNorFlash+0x1b4>)
 800476c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800476e:	4a4d      	ldr	r2, [pc, #308]	; (80048a4 <bsp_InitNorFlash+0x1b4>)
 8004770:	f043 0301 	orr.w	r3, r3, #1
 8004774:	6393      	str	r3, [r2, #56]	; 0x38
 8004776:	4b4b      	ldr	r3, [pc, #300]	; (80048a4 <bsp_InitNorFlash+0x1b4>)
 8004778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800477a:	f003 0301 	and.w	r3, r3, #1
 800477e:	603b      	str	r3, [r7, #0]
 8004780:	683b      	ldr	r3, [r7, #0]
			PG4/FSMC_A14
			PG5/FSMC_A15
			PG9/FSMC_NE2	- Æ¬Ñ¡ÐÅºÅ
	*/
	/* GPIOD configuration */
	GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_4  | GPIO_PIN_5  |
 8004782:	f64f 7333 	movw	r3, #65331	; 0xff33
 8004786:	617b      	str	r3, [r7, #20]
		                    GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 | GPIO_PIN_11 |
		                    GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
	GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8004788:	2302      	movs	r3, #2
 800478a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800478c:	2303      	movs	r3, #3
 800478e:	623b      	str	r3, [r7, #32]
	GPIO_InitStructure.Pull = GPIO_NOPULL;
 8004790:	2300      	movs	r3, #0
 8004792:	61fb      	str	r3, [r7, #28]
	GPIO_InitStructure.Alternate = GPIO_AF12_FSMC;
 8004794:	230c      	movs	r3, #12
 8004796:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8004798:	f107 0314 	add.w	r3, r7, #20
 800479c:	4619      	mov	r1, r3
 800479e:	4842      	ldr	r0, [pc, #264]	; (80048a8 <bsp_InitNorFlash+0x1b8>)
 80047a0:	f002 fb82 	bl	8006ea8 <HAL_GPIO_Init>

	/* GPIOE configuration */
	GPIO_InitStructure.Pin = GPIO_PIN_3 |
 80047a4:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 80047a8:	617b      	str	r3, [r7, #20]
		                    GPIO_PIN_4  | GPIO_PIN_5  | GPIO_PIN_6 | GPIO_PIN_7 |
		                    GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 | GPIO_PIN_11|
		                    GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
	GPIO_InitStructure.Alternate = GPIO_AF12_FSMC;
 80047aa:	230c      	movs	r3, #12
 80047ac:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 80047ae:	f107 0314 	add.w	r3, r7, #20
 80047b2:	4619      	mov	r1, r3
 80047b4:	483d      	ldr	r0, [pc, #244]	; (80048ac <bsp_InitNorFlash+0x1bc>)
 80047b6:	f002 fb77 	bl	8006ea8 <HAL_GPIO_Init>

	/* GPIOF configuration */
	GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_2  | GPIO_PIN_3  |
 80047ba:	f24f 033f 	movw	r3, #61503	; 0xf03f
 80047be:	617b      	str	r3, [r7, #20]
		                    GPIO_PIN_4  | GPIO_PIN_5  | GPIO_PIN_12 | GPIO_PIN_13 |
		                    GPIO_PIN_14 | GPIO_PIN_15;
	GPIO_InitStructure.Alternate = GPIO_AF12_FSMC;
 80047c0:	230c      	movs	r3, #12
 80047c2:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 80047c4:	f107 0314 	add.w	r3, r7, #20
 80047c8:	4619      	mov	r1, r3
 80047ca:	4839      	ldr	r0, [pc, #228]	; (80048b0 <bsp_InitNorFlash+0x1c0>)
 80047cc:	f002 fb6c 	bl	8006ea8 <HAL_GPIO_Init>

	/* GPIOG configuration */
	GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_2  | GPIO_PIN_3 |
 80047d0:	f240 233f 	movw	r3, #575	; 0x23f
 80047d4:	617b      	str	r3, [r7, #20]
		                    GPIO_PIN_4  | GPIO_PIN_5  | GPIO_PIN_9;
	GPIO_InitStructure.Alternate = GPIO_AF12_FSMC;
 80047d6:	230c      	movs	r3, #12
 80047d8:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80047da:	f107 0314 	add.w	r3, r7, #20
 80047de:	4619      	mov	r1, r3
 80047e0:	4834      	ldr	r0, [pc, #208]	; (80048b4 <bsp_InitNorFlash+0x1c4>)
 80047e2:	f002 fb61 	bl	8006ea8 <HAL_GPIO_Init>

	/* PD6 ×÷ÎªÃ¦ÐÅºÅ, ÅäÖÃÎªGPIOÊäÈëÄ£Ê½£¬Èí¼þ²éÑ¯ */
	GPIO_InitStructure.Pin = GPIO_PIN_6;
 80047e6:	2340      	movs	r3, #64	; 0x40
 80047e8:	617b      	str	r3, [r7, #20]
	GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 80047ea:	2300      	movs	r3, #0
 80047ec:	61bb      	str	r3, [r7, #24]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047ee:	2303      	movs	r3, #3
 80047f0:	623b      	str	r3, [r7, #32]
	GPIO_InitStructure.Pull = GPIO_NOPULL;
 80047f2:	2300      	movs	r3, #0
 80047f4:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80047f6:	f107 0314 	add.w	r3, r7, #20
 80047fa:	4619      	mov	r1, r3
 80047fc:	482a      	ldr	r0, [pc, #168]	; (80048a8 <bsp_InitNorFlash+0x1b8>)
 80047fe:	f002 fb53 	bl	8006ea8 <HAL_GPIO_Init>

	/*-- FSMC Configuration ------------------------------------------------------*/
	timingWrite.AddressSetupTime = 0x06;
 8004802:	2306      	movs	r3, #6
 8004804:	647b      	str	r3, [r7, #68]	; 0x44
	timingWrite.AddressHoldTime = 0x01;
 8004806:	2301      	movs	r3, #1
 8004808:	64bb      	str	r3, [r7, #72]	; 0x48
	timingWrite.DataSetupTime = 0x0C;
 800480a:	230c      	movs	r3, #12
 800480c:	64fb      	str	r3, [r7, #76]	; 0x4c
	timingWrite.BusTurnAroundDuration = 0x00;
 800480e:	2300      	movs	r3, #0
 8004810:	653b      	str	r3, [r7, #80]	; 0x50
	timingWrite.CLKDivision = 0x00;
 8004812:	2300      	movs	r3, #0
 8004814:	657b      	str	r3, [r7, #84]	; 0x54
	timingWrite.DataLatency = 0x00;
 8004816:	2300      	movs	r3, #0
 8004818:	65bb      	str	r3, [r7, #88]	; 0x58
	timingWrite.AccessMode = FSMC_ACCESS_MODE_B;
 800481a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800481e:	65fb      	str	r3, [r7, #92]	; 0x5c

	timingRead.AddressSetupTime = 0x06;
 8004820:	2306      	movs	r3, #6
 8004822:	62bb      	str	r3, [r7, #40]	; 0x28
	timingRead.AddressHoldTime = 0x01;
 8004824:	2301      	movs	r3, #1
 8004826:	62fb      	str	r3, [r7, #44]	; 0x2c
	timingRead.DataSetupTime = 0x0C;
 8004828:	230c      	movs	r3, #12
 800482a:	633b      	str	r3, [r7, #48]	; 0x30
	timingRead.BusTurnAroundDuration = 0x00;
 800482c:	2300      	movs	r3, #0
 800482e:	637b      	str	r3, [r7, #52]	; 0x34
	timingRead.CLKDivision = 0x00;
 8004830:	2300      	movs	r3, #0
 8004832:	63bb      	str	r3, [r7, #56]	; 0x38
	timingRead.DataLatency = 0x00;
 8004834:	2300      	movs	r3, #0
 8004836:	63fb      	str	r3, [r7, #60]	; 0x3c
	timingRead.AccessMode = FSMC_ACCESS_MODE_B;
 8004838:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800483c:	643b      	str	r3, [r7, #64]	; 0x40

	hnorsram.Instance = FSMC_NORSRAM_DEVICE;
 800483e:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8004842:	663b      	str	r3, [r7, #96]	; 0x60
	hnorsram.Init.NSBank = FSMC_NORSRAM_BANK2;
 8004844:	2302      	movs	r3, #2
 8004846:	66bb      	str	r3, [r7, #104]	; 0x68
	hnorsram.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8004848:	2300      	movs	r3, #0
 800484a:	66fb      	str	r3, [r7, #108]	; 0x6c
	hnorsram.Init.MemoryType = FSMC_MEMORY_TYPE_NOR;
 800484c:	2308      	movs	r3, #8
 800484e:	673b      	str	r3, [r7, #112]	; 0x70
	hnorsram.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8004850:	2310      	movs	r3, #16
 8004852:	677b      	str	r3, [r7, #116]	; 0x74
	hnorsram.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8004854:	2300      	movs	r3, #0
 8004856:	67bb      	str	r3, [r7, #120]	; 0x78
	hnorsram.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8004858:	2300      	movs	r3, #0
 800485a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	hnorsram.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 800485e:	2300      	movs	r3, #0
 8004860:	67fb      	str	r3, [r7, #124]	; 0x7c
	hnorsram.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8004862:	2300      	movs	r3, #0
 8004864:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	hnorsram.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;     // ??
 8004868:	2300      	movs	r3, #0
 800486a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	hnorsram.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800486e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004872:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	hnorsram.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8004876:	2300      	movs	r3, #0
 8004878:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	hnorsram.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 800487c:	2300      	movs	r3, #0
 800487e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	hnorsram.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8004882:	2300      	movs	r3, #0
 8004884:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

	HAL_SRAM_Init(&hnorsram, &timingRead, &timingWrite);
 8004888:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800488c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8004890:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8004894:	4618      	mov	r0, r3
 8004896:	f7fd fbb1 	bl	8001ffc <HAL_SRAM_Init>
}
 800489a:	bf00      	nop
 800489c:	37b0      	adds	r7, #176	; 0xb0
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}
 80048a2:	bf00      	nop
 80048a4:	40023800 	.word	0x40023800
 80048a8:	40020c00 	.word	0x40020c00
 80048ac:	40021000 	.word	0x40021000
 80048b0:	40021400 	.word	0x40021400
 80048b4:	40021800 	.word	0x40021800

080048b8 <RA8875_WriteCmd>:
*********************************************************************************************************
*	Func name: RA8875_WriteCmd
*********************************************************************************************************
*/
void RA8875_WriteCmd(uint8_t _ucRegAddr)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b083      	sub	sp, #12
 80048bc:	af00      	add	r7, sp, #0
 80048be:	4603      	mov	r3, r0
 80048c0:	71fb      	strb	r3, [r7, #7]
	SPI_ShiftByte(_ucRegAddr);
	RA8875_CS_1();
#endif

#ifdef RA_HARD_8080_16			/* 8080Ó²¼þ×ÜÏß */
	RA8875_REG = _ucRegAddr;	/* ÉèÖÃ¼Ä´æÆ÷µØÖ· */
 80048c2:	4b05      	ldr	r3, [pc, #20]	; (80048d8 <RA8875_WriteCmd+0x20>)
 80048c4:	79fa      	ldrb	r2, [r7, #7]
 80048c6:	b292      	uxth	r2, r2
 80048c8:	801a      	strh	r2, [r3, #0]
#endif
}
 80048ca:	bf00      	nop
 80048cc:	370c      	adds	r7, #12
 80048ce:	46bd      	mov	sp, r7
 80048d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d4:	4770      	bx	lr
 80048d6:	bf00      	nop
 80048d8:	6c080000 	.word	0x6c080000

080048dc <RA8875_ReadData>:
*********************************************************************************************************
*	Func name: RA8875_ReadData
*********************************************************************************************************
*/
uint8_t RA8875_ReadData(void)
{
 80048dc:	b480      	push	{r7}
 80048de:	b083      	sub	sp, #12
 80048e0:	af00      	add	r7, sp, #0
#endif

#ifdef RA_HARD_8080_16			/* 8080Ó²¼þ×ÜÏß */
	uint8_t value;

	value = RA8875_RAM;		/* ¶ÁÈ¡¼Ä´æÆ÷Öµ */
 80048e2:	f04f 43d8 	mov.w	r3, #1811939328	; 0x6c000000
 80048e6:	881b      	ldrh	r3, [r3, #0]
 80048e8:	b29b      	uxth	r3, r3
 80048ea:	71fb      	strb	r3, [r7, #7]

	return value;
 80048ec:	79fb      	ldrb	r3, [r7, #7]
#endif
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	370c      	adds	r7, #12
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr

080048fa <RA8875_WriteData>:
*********************************************************************************************************
*	Func name: RA8875_WriteData
*********************************************************************************************************
*/
void RA8875_WriteData(uint8_t _ucRegValue)
{
 80048fa:	b480      	push	{r7}
 80048fc:	b083      	sub	sp, #12
 80048fe:	af00      	add	r7, sp, #0
 8004900:	4603      	mov	r3, r0
 8004902:	71fb      	strb	r3, [r7, #7]
	SPI_ShiftByte(_ucRegValue);
	RA8875_CS_1();
#endif

#ifdef RA_HARD_8080_16			/* 8080Ó²¼þ×ÜÏß */
	RA8875_RAM = _ucRegValue;	/* ÉèÖÃ¼Ä´æÆ÷µØÖ· */
 8004904:	f04f 43d8 	mov.w	r3, #1811939328	; 0x6c000000
 8004908:	79fa      	ldrb	r2, [r7, #7]
 800490a:	b292      	uxth	r2, r2
 800490c:	801a      	strh	r2, [r3, #0]
#endif
}
 800490e:	bf00      	nop
 8004910:	370c      	adds	r7, #12
 8004912:	46bd      	mov	sp, r7
 8004914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004918:	4770      	bx	lr
	...

0800491c <RA8875_ReadStatus>:
*********************************************************************************************************
*	Func name: RA8875_ReadStatus
*********************************************************************************************************
*/
uint8_t RA8875_ReadStatus(void)
{
 800491c:	b480      	push	{r7}
 800491e:	b083      	sub	sp, #12
 8004920:	af00      	add	r7, sp, #0
#endif

#ifdef RA_HARD_8080_16			/* 8080Ó²¼þ×ÜÏß */
	uint8_t value;

	value = RA8875_REG;
 8004922:	4b05      	ldr	r3, [pc, #20]	; (8004938 <RA8875_ReadStatus+0x1c>)
 8004924:	881b      	ldrh	r3, [r3, #0]
 8004926:	b29b      	uxth	r3, r3
 8004928:	71fb      	strb	r3, [r7, #7]

	return value;
 800492a:	79fb      	ldrb	r3, [r7, #7]
#endif
}
 800492c:	4618      	mov	r0, r3
 800492e:	370c      	adds	r7, #12
 8004930:	46bd      	mov	sp, r7
 8004932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004936:	4770      	bx	lr
 8004938:	6c080000 	.word	0x6c080000

0800493c <RA8875_Delaly1us>:
*********************************************************************************************************
*	Func name: RA8875_Delaly1us
*********************************************************************************************************
*/
void RA8875_Delaly1us(void)
{
 800493c:	b480      	push	{r7}
 800493e:	b083      	sub	sp, #12
 8004940:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < 10; i++);
 8004942:	2300      	movs	r3, #0
 8004944:	71fb      	strb	r3, [r7, #7]
 8004946:	e002      	b.n	800494e <RA8875_Delaly1us+0x12>
 8004948:	79fb      	ldrb	r3, [r7, #7]
 800494a:	3301      	adds	r3, #1
 800494c:	71fb      	strb	r3, [r7, #7]
 800494e:	79fb      	ldrb	r3, [r7, #7]
 8004950:	2b09      	cmp	r3, #9
 8004952:	d9f9      	bls.n	8004948 <RA8875_Delaly1us+0xc>
}
 8004954:	bf00      	nop
 8004956:	bf00      	nop
 8004958:	370c      	adds	r7, #12
 800495a:	46bd      	mov	sp, r7
 800495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004960:	4770      	bx	lr

08004962 <RA8875_Delaly1ms>:
*********************************************************************************************************
*	Func name: RA8875_Delaly1ms
*********************************************************************************************************
*/
void RA8875_Delaly1ms(void)
{
 8004962:	b480      	push	{r7}
 8004964:	b083      	sub	sp, #12
 8004966:	af00      	add	r7, sp, #0
	uint16_t i;
	for (i = 0; i < 5000; i++);
 8004968:	2300      	movs	r3, #0
 800496a:	80fb      	strh	r3, [r7, #6]
 800496c:	e002      	b.n	8004974 <RA8875_Delaly1ms+0x12>
 800496e:	88fb      	ldrh	r3, [r7, #6]
 8004970:	3301      	adds	r3, #1
 8004972:	80fb      	strh	r3, [r7, #6]
 8004974:	88fb      	ldrh	r3, [r7, #6]
 8004976:	f241 3287 	movw	r2, #4999	; 0x1387
 800497a:	4293      	cmp	r3, r2
 800497c:	d9f7      	bls.n	800496e <RA8875_Delaly1ms+0xc>
}
 800497e:	bf00      	nop
 8004980:	bf00      	nop
 8004982:	370c      	adds	r7, #12
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr

0800498c <bsp_InitSFlash>:
*********************************************************************************************************
* Func name: bsp_InitSpiFlash
*********************************************************************************************************
*/
void bsp_InitSFlash(void)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b088      	sub	sp, #32
 8004990:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004992:	f107 030c 	add.w	r3, r7, #12
 8004996:	2200      	movs	r2, #0
 8004998:	601a      	str	r2, [r3, #0]
 800499a:	605a      	str	r2, [r3, #4]
 800499c:	609a      	str	r2, [r3, #8]
 800499e:	60da      	str	r2, [r3, #12]
 80049a0:	611a      	str	r2, [r3, #16]

	__HAL_RCC_GPIOF_CLK_ENABLE();
 80049a2:	2300      	movs	r3, #0
 80049a4:	60bb      	str	r3, [r7, #8]
 80049a6:	4b52      	ldr	r3, [pc, #328]	; (8004af0 <bsp_InitSFlash+0x164>)
 80049a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049aa:	4a51      	ldr	r2, [pc, #324]	; (8004af0 <bsp_InitSFlash+0x164>)
 80049ac:	f043 0320 	orr.w	r3, r3, #32
 80049b0:	6313      	str	r3, [r2, #48]	; 0x30
 80049b2:	4b4f      	ldr	r3, [pc, #316]	; (8004af0 <bsp_InitSFlash+0x164>)
 80049b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049b6:	f003 0320 	and.w	r3, r3, #32
 80049ba:	60bb      	str	r3, [r7, #8]
 80049bc:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80049be:	2300      	movs	r3, #0
 80049c0:	607b      	str	r3, [r7, #4]
 80049c2:	4b4b      	ldr	r3, [pc, #300]	; (8004af0 <bsp_InitSFlash+0x164>)
 80049c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049c6:	4a4a      	ldr	r2, [pc, #296]	; (8004af0 <bsp_InitSFlash+0x164>)
 80049c8:	f043 0302 	orr.w	r3, r3, #2
 80049cc:	6313      	str	r3, [r2, #48]	; 0x30
 80049ce:	4b48      	ldr	r3, [pc, #288]	; (8004af0 <bsp_InitSFlash+0x164>)
 80049d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049d2:	f003 0302 	and.w	r3, r3, #2
 80049d6:	607b      	str	r3, [r7, #4]
 80049d8:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_SPI1_CLK_ENABLE();
 80049da:	2300      	movs	r3, #0
 80049dc:	603b      	str	r3, [r7, #0]
 80049de:	4b44      	ldr	r3, [pc, #272]	; (8004af0 <bsp_InitSFlash+0x164>)
 80049e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049e2:	4a43      	ldr	r2, [pc, #268]	; (8004af0 <bsp_InitSFlash+0x164>)
 80049e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80049e8:	6453      	str	r3, [r2, #68]	; 0x44
 80049ea:	4b41      	ldr	r3, [pc, #260]	; (8004af0 <bsp_InitSFlash+0x164>)
 80049ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80049f2:	603b      	str	r3, [r7, #0]
 80049f4:	683b      	ldr	r3, [r7, #0]

	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049f6:	2302      	movs	r3, #2
 80049f8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80049fa:	2302      	movs	r3, #2
 80049fc:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull  = GPIO_PULLDOWN;
 80049fe:	2302      	movs	r3, #2
 8004a00:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;      // SPI1(GPIO_AF5_SPI1) , SPI3 (GPIO_AF6_SPI3)
 8004a02:	2305      	movs	r3, #5
 8004a04:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5;
 8004a06:	2338      	movs	r3, #56	; 0x38
 8004a08:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOB,&GPIO_InitStruct);
 8004a0a:	f107 030c 	add.w	r3, r7, #12
 8004a0e:	4619      	mov	r1, r3
 8004a10:	4838      	ldr	r0, [pc, #224]	; (8004af4 <bsp_InitSFlash+0x168>)
 8004a12:	f002 fa49 	bl	8006ea8 <HAL_GPIO_Init>

	SF_CS_HIGH();
 8004a16:	2201      	movs	r2, #1
 8004a18:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004a1c:	4836      	ldr	r0, [pc, #216]	; (8004af8 <bsp_InitSFlash+0x16c>)
 8004a1e:	f002 fbf7 	bl	8007210 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004a22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004a26:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004a30:	2302      	movs	r3, #2
 8004a32:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004a34:	f107 030c 	add.w	r3, r7, #12
 8004a38:	4619      	mov	r1, r3
 8004a3a:	482f      	ldr	r0, [pc, #188]	; (8004af8 <bsp_InitSFlash+0x16c>)
 8004a3c:	f002 fa34 	bl	8006ea8 <HAL_GPIO_Init>

	hspi1.Instance = SPI_FLASH;
 8004a40:	4b2e      	ldr	r3, [pc, #184]	; (8004afc <bsp_InitSFlash+0x170>)
 8004a42:	4a2f      	ldr	r2, [pc, #188]	; (8004b00 <bsp_InitSFlash+0x174>)
 8004a44:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8004a46:	4b2d      	ldr	r3, [pc, #180]	; (8004afc <bsp_InitSFlash+0x170>)
 8004a48:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004a4c:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004a4e:	4b2b      	ldr	r3, [pc, #172]	; (8004afc <bsp_InitSFlash+0x170>)
 8004a50:	2200      	movs	r2, #0
 8004a52:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004a54:	4b29      	ldr	r3, [pc, #164]	; (8004afc <bsp_InitSFlash+0x170>)
 8004a56:	2200      	movs	r2, #0
 8004a58:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8004a5a:	4b28      	ldr	r3, [pc, #160]	; (8004afc <bsp_InitSFlash+0x170>)
 8004a5c:	2202      	movs	r2, #2
 8004a5e:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8004a60:	4b26      	ldr	r3, [pc, #152]	; (8004afc <bsp_InitSFlash+0x170>)
 8004a62:	2201      	movs	r2, #1
 8004a64:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8004a66:	4b25      	ldr	r3, [pc, #148]	; (8004afc <bsp_InitSFlash+0x170>)
 8004a68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a6c:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8004a6e:	4b23      	ldr	r3, [pc, #140]	; (8004afc <bsp_InitSFlash+0x170>)
 8004a70:	2208      	movs	r2, #8
 8004a72:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004a74:	4b21      	ldr	r3, [pc, #132]	; (8004afc <bsp_InitSFlash+0x170>)
 8004a76:	2200      	movs	r2, #0
 8004a78:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004a7a:	4b20      	ldr	r3, [pc, #128]	; (8004afc <bsp_InitSFlash+0x170>)
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a80:	4b1e      	ldr	r3, [pc, #120]	; (8004afc <bsp_InitSFlash+0x170>)
 8004a82:	2200      	movs	r2, #0
 8004a84:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 8004a86:	4b1d      	ldr	r3, [pc, #116]	; (8004afc <bsp_InitSFlash+0x170>)
 8004a88:	2207      	movs	r2, #7
 8004a8a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004a8c:	481b      	ldr	r0, [pc, #108]	; (8004afc <bsp_InitSFlash+0x170>)
 8004a8e:	f7fc ffb5 	bl	80019fc <HAL_SPI_Init>
 8004a92:	4603      	mov	r3, r0
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d001      	beq.n	8004a9c <bsp_InitSFlash+0x110>
	{
		Error_Handler();
 8004a98:	f7fc fd04 	bl	80014a4 <Error_Handler>
	}

	__HAL_SPI_DISABLE(&hspi1);  // SPI 비활성화
 8004a9c:	4b17      	ldr	r3, [pc, #92]	; (8004afc <bsp_InitSFlash+0x170>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	4b16      	ldr	r3, [pc, #88]	; (8004afc <bsp_InitSFlash+0x170>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004aaa:	601a      	str	r2, [r3, #0]
	__HAL_SPI_ENABLE(&hspi1);   // SPI 활성화
 8004aac:	4b13      	ldr	r3, [pc, #76]	; (8004afc <bsp_InitSFlash+0x170>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	681a      	ldr	r2, [r3, #0]
 8004ab2:	4b12      	ldr	r3, [pc, #72]	; (8004afc <bsp_InitSFlash+0x170>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004aba:	601a      	str	r2, [r3, #0]

	sf_ReadInfo();
 8004abc:	f000 f822 	bl	8004b04 <sf_ReadInfo>

	SF_CS_LOW();
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004ac6:	480c      	ldr	r0, [pc, #48]	; (8004af8 <bsp_InitSFlash+0x16c>)
 8004ac8:	f002 fba2 	bl	8007210 <HAL_GPIO_WritePin>
	sf_SendByte(CMD_DISWR);
 8004acc:	2004      	movs	r0, #4
 8004ace:	f000 f8bb 	bl	8004c48 <sf_SendByte>
	SF_CS_HIGH();
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004ad8:	4807      	ldr	r0, [pc, #28]	; (8004af8 <bsp_InitSFlash+0x16c>)
 8004ada:	f002 fb99 	bl	8007210 <HAL_GPIO_WritePin>
	sf_WaitForWriteEnd();
 8004ade:	f000 f8cd 	bl	8004c7c <sf_WaitForWriteEnd>
	sf_WriteStatus(0);
 8004ae2:	2000      	movs	r0, #0
 8004ae4:	f000 f8e8 	bl	8004cb8 <sf_WriteStatus>
}
 8004ae8:	bf00      	nop
 8004aea:	3720      	adds	r7, #32
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}
 8004af0:	40023800 	.word	0x40023800
 8004af4:	40020400 	.word	0x40020400
 8004af8:	40021400 	.word	0x40021400
 8004afc:	200002f8 	.word	0x200002f8
 8004b00:	40013000 	.word	0x40013000

08004b04 <sf_ReadInfo>:

void sf_ReadInfo(void)
{
 8004b04:	b598      	push	{r3, r4, r7, lr}
 8004b06:	af00      	add	r7, sp, #0
	g_tSF.ChipID = sf_ReadID();
 8004b08:	f000 f86e 	bl	8004be8 <sf_ReadID>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	4a2d      	ldr	r2, [pc, #180]	; (8004bc4 <sf_ReadInfo+0xc0>)
 8004b10:	6013      	str	r3, [r2, #0]
	//char buffer[20];
	//sprintf(buffer, "CHIPID: 0x%08lX\r\n", g_tSF.ChipID);
	//UART1_Transmit_String(buffer);
	//HAL_Delay(1000);
	switch (g_tSF.ChipID)
 8004b12:	4b2c      	ldr	r3, [pc, #176]	; (8004bc4 <sf_ReadInfo+0xc0>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a2c      	ldr	r2, [pc, #176]	; (8004bc8 <sf_ReadInfo+0xc4>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d02e      	beq.n	8004b7a <sf_ReadInfo+0x76>
 8004b1c:	4a2a      	ldr	r2, [pc, #168]	; (8004bc8 <sf_ReadInfo+0xc4>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d83c      	bhi.n	8004b9c <sf_ReadInfo+0x98>
 8004b22:	4a2a      	ldr	r2, [pc, #168]	; (8004bcc <sf_ReadInfo+0xc8>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d003      	beq.n	8004b30 <sf_ReadInfo+0x2c>
 8004b28:	4a29      	ldr	r2, [pc, #164]	; (8004bd0 <sf_ReadInfo+0xcc>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d011      	beq.n	8004b52 <sf_ReadInfo+0x4e>
 8004b2e:	e035      	b.n	8004b9c <sf_ReadInfo+0x98>
	{
		case SST25VF016B_ID:
			strcpy(g_tSF.ChipName, "SST25VF016B");
 8004b30:	4b28      	ldr	r3, [pc, #160]	; (8004bd4 <sf_ReadInfo+0xd0>)
 8004b32:	4a29      	ldr	r2, [pc, #164]	; (8004bd8 <sf_ReadInfo+0xd4>)
 8004b34:	ca07      	ldmia	r2, {r0, r1, r2}
 8004b36:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			UART1_Transmit_String(g_tSF.ChipName);
 8004b3a:	4826      	ldr	r0, [pc, #152]	; (8004bd4 <sf_ReadInfo+0xd0>)
 8004b3c:	f001 ffc8 	bl	8006ad0 <UART1_Transmit_String>
			g_tSF.TotalSize = 2 * 1024 * 1024;	/* ×ÜÈÝÁ¿ = 2M */
 8004b40:	4b20      	ldr	r3, [pc, #128]	; (8004bc4 <sf_ReadInfo+0xc0>)
 8004b42:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004b46:	615a      	str	r2, [r3, #20]
			g_tSF.PageSize = 4 * 1024;			/* Ò³Ãæ´óÐ¡ = 4K */
 8004b48:	4b1e      	ldr	r3, [pc, #120]	; (8004bc4 <sf_ReadInfo+0xc0>)
 8004b4a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004b4e:	831a      	strh	r2, [r3, #24]
		break;
 8004b50:	e036      	b.n	8004bc0 <sf_ReadInfo+0xbc>
		case MX25L1606E_ID:
			strcpy(g_tSF.ChipName, "MX25L1606E");
 8004b52:	4b20      	ldr	r3, [pc, #128]	; (8004bd4 <sf_ReadInfo+0xd0>)
 8004b54:	4a21      	ldr	r2, [pc, #132]	; (8004bdc <sf_ReadInfo+0xd8>)
 8004b56:	ca07      	ldmia	r2, {r0, r1, r2}
 8004b58:	c303      	stmia	r3!, {r0, r1}
 8004b5a:	801a      	strh	r2, [r3, #0]
 8004b5c:	3302      	adds	r3, #2
 8004b5e:	0c12      	lsrs	r2, r2, #16
 8004b60:	701a      	strb	r2, [r3, #0]
			UART1_Transmit_String(g_tSF.ChipName);
 8004b62:	481c      	ldr	r0, [pc, #112]	; (8004bd4 <sf_ReadInfo+0xd0>)
 8004b64:	f001 ffb4 	bl	8006ad0 <UART1_Transmit_String>
			g_tSF.TotalSize = 2 * 1024 * 1024;	/* ×ÜÈÝÁ¿ = 2M */
 8004b68:	4b16      	ldr	r3, [pc, #88]	; (8004bc4 <sf_ReadInfo+0xc0>)
 8004b6a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004b6e:	615a      	str	r2, [r3, #20]
			g_tSF.PageSize = 4 * 1024;			/* Ò³Ãæ´óÐ¡ = 4K */
 8004b70:	4b14      	ldr	r3, [pc, #80]	; (8004bc4 <sf_ReadInfo+0xc0>)
 8004b72:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004b76:	831a      	strh	r2, [r3, #24]
		break;
 8004b78:	e022      	b.n	8004bc0 <sf_ReadInfo+0xbc>
		case W25Q64BV_ID:
			strcpy(g_tSF.ChipName, "W25Q64BV");
 8004b7a:	4b16      	ldr	r3, [pc, #88]	; (8004bd4 <sf_ReadInfo+0xd0>)
 8004b7c:	4a18      	ldr	r2, [pc, #96]	; (8004be0 <sf_ReadInfo+0xdc>)
 8004b7e:	ca07      	ldmia	r2, {r0, r1, r2}
 8004b80:	c303      	stmia	r3!, {r0, r1}
 8004b82:	701a      	strb	r2, [r3, #0]
			UART1_Transmit_String(g_tSF.ChipName);
 8004b84:	4813      	ldr	r0, [pc, #76]	; (8004bd4 <sf_ReadInfo+0xd0>)
 8004b86:	f001 ffa3 	bl	8006ad0 <UART1_Transmit_String>
			g_tSF.TotalSize = 8 * 1024 * 1024;	/* ×ÜÈÝÁ¿ = 8M */
 8004b8a:	4b0e      	ldr	r3, [pc, #56]	; (8004bc4 <sf_ReadInfo+0xc0>)
 8004b8c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004b90:	615a      	str	r2, [r3, #20]
			g_tSF.PageSize = 4 * 1024;			/* Ò³Ãæ´óÐ¡ = 4K */
 8004b92:	4b0c      	ldr	r3, [pc, #48]	; (8004bc4 <sf_ReadInfo+0xc0>)
 8004b94:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004b98:	831a      	strh	r2, [r3, #24]
		break;
 8004b9a:	e011      	b.n	8004bc0 <sf_ReadInfo+0xbc>
		default:
			strcpy(g_tSF.ChipName, "Unknow Flash");
 8004b9c:	4a0d      	ldr	r2, [pc, #52]	; (8004bd4 <sf_ReadInfo+0xd0>)
 8004b9e:	4b11      	ldr	r3, [pc, #68]	; (8004be4 <sf_ReadInfo+0xe0>)
 8004ba0:	4614      	mov	r4, r2
 8004ba2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004ba4:	c407      	stmia	r4!, {r0, r1, r2}
 8004ba6:	7023      	strb	r3, [r4, #0]
			UART1_Transmit_String(g_tSF.ChipName);
 8004ba8:	480a      	ldr	r0, [pc, #40]	; (8004bd4 <sf_ReadInfo+0xd0>)
 8004baa:	f001 ff91 	bl	8006ad0 <UART1_Transmit_String>
			g_tSF.TotalSize = 2 * 1024 * 1024;
 8004bae:	4b05      	ldr	r3, [pc, #20]	; (8004bc4 <sf_ReadInfo+0xc0>)
 8004bb0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004bb4:	615a      	str	r2, [r3, #20]
			g_tSF.PageSize = 4 * 1024;
 8004bb6:	4b03      	ldr	r3, [pc, #12]	; (8004bc4 <sf_ReadInfo+0xc0>)
 8004bb8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004bbc:	831a      	strh	r2, [r3, #24]
		break;
 8004bbe:	bf00      	nop
	}
}
 8004bc0:	bf00      	nop
 8004bc2:	bd98      	pop	{r3, r4, r7, pc}
 8004bc4:	20000350 	.word	0x20000350
 8004bc8:	00ef4017 	.word	0x00ef4017
 8004bcc:	00bf2541 	.word	0x00bf2541
 8004bd0:	00c22015 	.word	0x00c22015
 8004bd4:	20000354 	.word	0x20000354
 8004bd8:	0800a92c 	.word	0x0800a92c
 8004bdc:	0800a938 	.word	0x0800a938
 8004be0:	0800a944 	.word	0x0800a944
 8004be4:	0800a950 	.word	0x0800a950

08004be8 <sf_ReadID>:

uint32_t sf_ReadID(void)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b082      	sub	sp, #8
 8004bec:	af00      	add	r7, sp, #0
	uint32_t uiID;
	uint8_t id1, id2, id3;

	SF_CS_LOW();
 8004bee:	2200      	movs	r2, #0
 8004bf0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004bf4:	4813      	ldr	r0, [pc, #76]	; (8004c44 <sf_ReadID+0x5c>)
 8004bf6:	f002 fb0b 	bl	8007210 <HAL_GPIO_WritePin>
	sf_SendByte(CMD_RDID);
 8004bfa:	209f      	movs	r0, #159	; 0x9f
 8004bfc:	f000 f824 	bl	8004c48 <sf_SendByte>
	id1 = sf_SendByte(DUMMY_BYTE);					/* ¶ÁIDµÄµÚ1¸ö×Ö½Ú */
 8004c00:	20a5      	movs	r0, #165	; 0xa5
 8004c02:	f000 f821 	bl	8004c48 <sf_SendByte>
 8004c06:	4603      	mov	r3, r0
 8004c08:	71fb      	strb	r3, [r7, #7]
	id2 = sf_SendByte(DUMMY_BYTE);					/* ¶ÁIDµÄµÚ2¸ö×Ö½Ú */
 8004c0a:	20a5      	movs	r0, #165	; 0xa5
 8004c0c:	f000 f81c 	bl	8004c48 <sf_SendByte>
 8004c10:	4603      	mov	r3, r0
 8004c12:	71bb      	strb	r3, [r7, #6]
	id3 = sf_SendByte(DUMMY_BYTE);					/* ¶ÁIDµÄµÚ2¸ö×Ö½Ú */
 8004c14:	20a5      	movs	r0, #165	; 0xa5
 8004c16:	f000 f817 	bl	8004c48 <sf_SendByte>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	717b      	strb	r3, [r7, #5]
	SF_CS_HIGH();
 8004c1e:	2201      	movs	r2, #1
 8004c20:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004c24:	4807      	ldr	r0, [pc, #28]	; (8004c44 <sf_ReadID+0x5c>)
 8004c26:	f002 faf3 	bl	8007210 <HAL_GPIO_WritePin>

	uiID = ((uint32_t)id1 << 16) | ((uint32_t)id2 << 8) | id3;
 8004c2a:	79fb      	ldrb	r3, [r7, #7]
 8004c2c:	041a      	lsls	r2, r3, #16
 8004c2e:	79bb      	ldrb	r3, [r7, #6]
 8004c30:	021b      	lsls	r3, r3, #8
 8004c32:	431a      	orrs	r2, r3
 8004c34:	797b      	ldrb	r3, [r7, #5]
 8004c36:	4313      	orrs	r3, r2
 8004c38:	603b      	str	r3, [r7, #0]

	return uiID;
 8004c3a:	683b      	ldr	r3, [r7, #0]
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3708      	adds	r7, #8
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}
 8004c44:	40021400 	.word	0x40021400

08004c48 <sf_SendByte>:
	return rxData;
}
#endif

static uint8_t sf_SendByte(uint8_t _ucValue)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b086      	sub	sp, #24
 8004c4c:	af02      	add	r7, sp, #8
 8004c4e:	4603      	mov	r3, r0
 8004c50:	71fb      	strb	r3, [r7, #7]
	uint8_t rxData = 0;
 8004c52:	2300      	movs	r3, #0
 8004c54:	73bb      	strb	r3, [r7, #14]

	HAL_StatusTypeDef status = HAL_SPI_TransmitReceive(&hspi1, &_ucValue, &rxData, 1, HAL_MAX_DELAY);
 8004c56:	f107 020e 	add.w	r2, r7, #14
 8004c5a:	1df9      	adds	r1, r7, #7
 8004c5c:	f04f 33ff 	mov.w	r3, #4294967295
 8004c60:	9300      	str	r3, [sp, #0]
 8004c62:	2301      	movs	r3, #1
 8004c64:	4804      	ldr	r0, [pc, #16]	; (8004c78 <sf_SendByte+0x30>)
 8004c66:	f7fc ff5c 	bl	8001b22 <HAL_SPI_TransmitReceive>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	73fb      	strb	r3, [r7, #15]

	if (status != HAL_OK){
		// 에러 처리
	    // 예: Error_Handler();
	}
	return rxData;
 8004c6e:	7bbb      	ldrb	r3, [r7, #14]
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	3710      	adds	r7, #16
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}
 8004c78:	200002f8 	.word	0x200002f8

08004c7c <sf_WaitForWriteEnd>:
*********************************************************************************************************
*	Func name: sf_WaitForWriteEnd
*********************************************************************************************************
*/
static void sf_WaitForWriteEnd(void)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	af00      	add	r7, sp, #0
	SF_CS_LOW();
 8004c80:	2200      	movs	r2, #0
 8004c82:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004c86:	480b      	ldr	r0, [pc, #44]	; (8004cb4 <sf_WaitForWriteEnd+0x38>)
 8004c88:	f002 fac2 	bl	8007210 <HAL_GPIO_WritePin>
	sf_SendByte(CMD_RDSR);
 8004c8c:	2005      	movs	r0, #5
 8004c8e:	f7ff ffdb 	bl	8004c48 <sf_SendByte>
	while((sf_SendByte(DUMMY_BYTE) & WIP_FLAG) == SET);
 8004c92:	bf00      	nop
 8004c94:	20a5      	movs	r0, #165	; 0xa5
 8004c96:	f7ff ffd7 	bl	8004c48 <sf_SendByte>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	f003 0301 	and.w	r3, r3, #1
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d0f7      	beq.n	8004c94 <sf_WaitForWriteEnd+0x18>
	SF_CS_HIGH();
 8004ca4:	2201      	movs	r2, #1
 8004ca6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004caa:	4802      	ldr	r0, [pc, #8]	; (8004cb4 <sf_WaitForWriteEnd+0x38>)
 8004cac:	f002 fab0 	bl	8007210 <HAL_GPIO_WritePin>
}
 8004cb0:	bf00      	nop
 8004cb2:	bd80      	pop	{r7, pc}
 8004cb4:	40021400 	.word	0x40021400

08004cb8 <sf_WriteStatus>:
*********************************************************************************************************
* Func name: sf_WriteStatus
*********************************************************************************************************
*/
static void sf_WriteStatus(uint8_t _ucValue)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b082      	sub	sp, #8
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	71fb      	strb	r3, [r7, #7]
	if (g_tSF.ChipID == SST25VF016B_ID)
 8004cc2:	4b1f      	ldr	r3, [pc, #124]	; (8004d40 <sf_WriteStatus+0x88>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a1f      	ldr	r2, [pc, #124]	; (8004d44 <sf_WriteStatus+0x8c>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d122      	bne.n	8004d12 <sf_WriteStatus+0x5a>
	{
		SF_CS_LOW();									/* Ê¹ÄÜÆ¬Ñ¡ */
 8004ccc:	2200      	movs	r2, #0
 8004cce:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004cd2:	481d      	ldr	r0, [pc, #116]	; (8004d48 <sf_WriteStatus+0x90>)
 8004cd4:	f002 fa9c 	bl	8007210 <HAL_GPIO_WritePin>
		sf_SendByte(CMD_EWRSR);							/* ·¢ËÍÃüÁî£¬ ÔÊÐíÐ´×´Ì¬¼Ä´æÆ÷ */
 8004cd8:	2050      	movs	r0, #80	; 0x50
 8004cda:	f7ff ffb5 	bl	8004c48 <sf_SendByte>
		SF_CS_HIGH();									/* ½ûÄÜÆ¬Ñ¡ */
 8004cde:	2201      	movs	r2, #1
 8004ce0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004ce4:	4818      	ldr	r0, [pc, #96]	; (8004d48 <sf_WriteStatus+0x90>)
 8004ce6:	f002 fa93 	bl	8007210 <HAL_GPIO_WritePin>

		/* µÚ2²½£ºÔÙÐ´×´Ì¬¼Ä´æÆ÷ */
		SF_CS_LOW();									/* Ê¹ÄÜÆ¬Ñ¡ */
 8004cea:	2200      	movs	r2, #0
 8004cec:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004cf0:	4815      	ldr	r0, [pc, #84]	; (8004d48 <sf_WriteStatus+0x90>)
 8004cf2:	f002 fa8d 	bl	8007210 <HAL_GPIO_WritePin>
		sf_SendByte(CMD_WRSR);							/* ·¢ËÍÃüÁî£¬ Ð´×´Ì¬¼Ä´æÆ÷ */
 8004cf6:	2001      	movs	r0, #1
 8004cf8:	f7ff ffa6 	bl	8004c48 <sf_SendByte>
		sf_SendByte(_ucValue);							/* ·¢ËÍÊý¾Ý£º×´Ì¬¼Ä´æÆ÷µÄÖµ */
 8004cfc:	79fb      	ldrb	r3, [r7, #7]
 8004cfe:	4618      	mov	r0, r3
 8004d00:	f7ff ffa2 	bl	8004c48 <sf_SendByte>
		SF_CS_HIGH();
 8004d04:	2201      	movs	r2, #1
 8004d06:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004d0a:	480f      	ldr	r0, [pc, #60]	; (8004d48 <sf_WriteStatus+0x90>)
 8004d0c:	f002 fa80 	bl	8007210 <HAL_GPIO_WritePin>
		SF_CS_LOW();									/* Ê¹ÄÜÆ¬Ñ¡ */
		sf_SendByte(CMD_WRSR);							/* ·¢ËÍÃüÁî£¬ Ð´×´Ì¬¼Ä´æÆ÷ */
		sf_SendByte(_ucValue);							/* ·¢ËÍÊý¾Ý£º×´Ì¬¼Ä´æÆ÷µÄÖµ */
		SF_CS_HIGH();									/* ½ûÄÜÆ¬Ñ¡ */
	}
}
 8004d10:	e012      	b.n	8004d38 <sf_WriteStatus+0x80>
		SF_CS_LOW();									/* Ê¹ÄÜÆ¬Ñ¡ */
 8004d12:	2200      	movs	r2, #0
 8004d14:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004d18:	480b      	ldr	r0, [pc, #44]	; (8004d48 <sf_WriteStatus+0x90>)
 8004d1a:	f002 fa79 	bl	8007210 <HAL_GPIO_WritePin>
		sf_SendByte(CMD_WRSR);							/* ·¢ËÍÃüÁî£¬ Ð´×´Ì¬¼Ä´æÆ÷ */
 8004d1e:	2001      	movs	r0, #1
 8004d20:	f7ff ff92 	bl	8004c48 <sf_SendByte>
		sf_SendByte(_ucValue);							/* ·¢ËÍÊý¾Ý£º×´Ì¬¼Ä´æÆ÷µÄÖµ */
 8004d24:	79fb      	ldrb	r3, [r7, #7]
 8004d26:	4618      	mov	r0, r3
 8004d28:	f7ff ff8e 	bl	8004c48 <sf_SendByte>
		SF_CS_HIGH();									/* ½ûÄÜÆ¬Ñ¡ */
 8004d2c:	2201      	movs	r2, #1
 8004d2e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004d32:	4805      	ldr	r0, [pc, #20]	; (8004d48 <sf_WriteStatus+0x90>)
 8004d34:	f002 fa6c 	bl	8007210 <HAL_GPIO_WritePin>
}
 8004d38:	bf00      	nop
 8004d3a:	3708      	adds	r7, #8
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}
 8004d40:	20000350 	.word	0x20000350
 8004d44:	00bf2541 	.word	0x00bf2541
 8004d48:	40021400 	.word	0x40021400

08004d4c <LCD_InitHard>:
*********************************************************************************************************
*	Func name: LCD_InitHard
*********************************************************************************************************
*/
void LCD_InitHard(void)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b082      	sub	sp, #8
 8004d50:	af00      	add	r7, sp, #0
	uint16_t id;

	LCD_CtrlLinesConfig();
 8004d52:	f000 f839 	bl	8004dc8 <LCD_CtrlLinesConfig>

	LCD_FSMCConfig();
 8004d56:	f000 f8af 	bl	8004eb8 <LCD_FSMCConfig>

	HAL_Delay(20);
 8004d5a:	2014      	movs	r0, #20
 8004d5c:	f001 ff6e 	bl	8006c3c <HAL_Delay>

	id = SPFD5420_ReadID();
 8004d60:	f7fe fcce 	bl	8003700 <SPFD5420_ReadID>
 8004d64:	4603      	mov	r3, r0
 8004d66:	80fb      	strh	r3, [r7, #6]
	if ((id == 0x5420) || (id ==  0xB509) || (id == 0x5520))
 8004d68:	88fb      	ldrh	r3, [r7, #6]
 8004d6a:	f245 4220 	movw	r2, #21536	; 0x5420
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d01f      	beq.n	8004db2 <LCD_InitHard+0x66>
 8004d72:	88fb      	ldrh	r3, [r7, #6]
 8004d74:	f24b 5209 	movw	r2, #46345	; 0xb509
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d01a      	beq.n	8004db2 <LCD_InitHard+0x66>
 8004d7c:	88fb      	ldrh	r3, [r7, #6]
 8004d7e:	f245 5220 	movw	r2, #21792	; 0x5520
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d015      	beq.n	8004db2 <LCD_InitHard+0x66>
	{
		//SPFD5420_InitHard();
	}
	else
	{
		if (RA8875_ReadID() == 0x75)
 8004d86:	f7fd ff5c 	bl	8002c42 <RA8875_ReadID>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	2b75      	cmp	r3, #117	; 0x75
 8004d8e:	d105      	bne.n	8004d9c <LCD_InitHard+0x50>
		{
			//UART1_Transmit_String("LCD Controller is RA8875 or compatible\r\n");
			g_ChipID = IC_8875;
 8004d90:	4b0a      	ldr	r3, [pc, #40]	; (8004dbc <LCD_InitHard+0x70>)
 8004d92:	2275      	movs	r2, #117	; 0x75
 8004d94:	801a      	strh	r2, [r3, #0]
			RA8875_InitHard();
 8004d96:	f7fd ff89 	bl	8002cac <RA8875_InitHard>
			g_LcdWidth = LCD_30_WIDTH;
		}
	}
	//LCD_ClrScr(CL_BLUE);
	//LCD_SetBackLight(BRIGHT_DEFAULT);
}
 8004d9a:	e00a      	b.n	8004db2 <LCD_InitHard+0x66>
			g_ChipID = IC_4001;
 8004d9c:	4b07      	ldr	r3, [pc, #28]	; (8004dbc <LCD_InitHard+0x70>)
 8004d9e:	f244 0201 	movw	r2, #16385	; 0x4001
 8004da2:	801a      	strh	r2, [r3, #0]
			g_LcdHeight = LCD_30_HEIGHT;
 8004da4:	4b06      	ldr	r3, [pc, #24]	; (8004dc0 <LCD_InitHard+0x74>)
 8004da6:	22f0      	movs	r2, #240	; 0xf0
 8004da8:	801a      	strh	r2, [r3, #0]
			g_LcdWidth = LCD_30_WIDTH;
 8004daa:	4b06      	ldr	r3, [pc, #24]	; (8004dc4 <LCD_InitHard+0x78>)
 8004dac:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8004db0:	801a      	strh	r2, [r3, #0]
}
 8004db2:	bf00      	nop
 8004db4:	3708      	adds	r7, #8
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}
 8004dba:	bf00      	nop
 8004dbc:	20000008 	.word	0x20000008
 8004dc0:	2000000a 	.word	0x2000000a
 8004dc4:	2000000c 	.word	0x2000000c

08004dc8 <LCD_CtrlLinesConfig>:


static void LCD_CtrlLinesConfig(void)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b08a      	sub	sp, #40	; 0x28
 8004dcc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	__HAL_RCC_FSMC_CLK_ENABLE();
 8004dce:	2300      	movs	r3, #0
 8004dd0:	613b      	str	r3, [r7, #16]
 8004dd2:	4b35      	ldr	r3, [pc, #212]	; (8004ea8 <LCD_CtrlLinesConfig+0xe0>)
 8004dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dd6:	4a34      	ldr	r2, [pc, #208]	; (8004ea8 <LCD_CtrlLinesConfig+0xe0>)
 8004dd8:	f043 0301 	orr.w	r3, r3, #1
 8004ddc:	6393      	str	r3, [r2, #56]	; 0x38
 8004dde:	4b32      	ldr	r3, [pc, #200]	; (8004ea8 <LCD_CtrlLinesConfig+0xe0>)
 8004de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004de2:	f003 0301 	and.w	r3, r3, #1
 8004de6:	613b      	str	r3, [r7, #16]
 8004de8:	693b      	ldr	r3, [r7, #16]

	__HAL_RCC_GPIOD_CLK_ENABLE();
 8004dea:	2300      	movs	r3, #0
 8004dec:	60fb      	str	r3, [r7, #12]
 8004dee:	4b2e      	ldr	r3, [pc, #184]	; (8004ea8 <LCD_CtrlLinesConfig+0xe0>)
 8004df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004df2:	4a2d      	ldr	r2, [pc, #180]	; (8004ea8 <LCD_CtrlLinesConfig+0xe0>)
 8004df4:	f043 0308 	orr.w	r3, r3, #8
 8004df8:	6313      	str	r3, [r2, #48]	; 0x30
 8004dfa:	4b2b      	ldr	r3, [pc, #172]	; (8004ea8 <LCD_CtrlLinesConfig+0xe0>)
 8004dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dfe:	f003 0308 	and.w	r3, r3, #8
 8004e02:	60fb      	str	r3, [r7, #12]
 8004e04:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8004e06:	2300      	movs	r3, #0
 8004e08:	60bb      	str	r3, [r7, #8]
 8004e0a:	4b27      	ldr	r3, [pc, #156]	; (8004ea8 <LCD_CtrlLinesConfig+0xe0>)
 8004e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e0e:	4a26      	ldr	r2, [pc, #152]	; (8004ea8 <LCD_CtrlLinesConfig+0xe0>)
 8004e10:	f043 0310 	orr.w	r3, r3, #16
 8004e14:	6313      	str	r3, [r2, #48]	; 0x30
 8004e16:	4b24      	ldr	r3, [pc, #144]	; (8004ea8 <LCD_CtrlLinesConfig+0xe0>)
 8004e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e1a:	f003 0310 	and.w	r3, r3, #16
 8004e1e:	60bb      	str	r3, [r7, #8]
 8004e20:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8004e22:	2300      	movs	r3, #0
 8004e24:	607b      	str	r3, [r7, #4]
 8004e26:	4b20      	ldr	r3, [pc, #128]	; (8004ea8 <LCD_CtrlLinesConfig+0xe0>)
 8004e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e2a:	4a1f      	ldr	r2, [pc, #124]	; (8004ea8 <LCD_CtrlLinesConfig+0xe0>)
 8004e2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e30:	6313      	str	r3, [r2, #48]	; 0x30
 8004e32:	4b1d      	ldr	r3, [pc, #116]	; (8004ea8 <LCD_CtrlLinesConfig+0xe0>)
 8004e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e3a:	607b      	str	r3, [r7, #4]
 8004e3c:	687b      	ldr	r3, [r7, #4]

	GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 |
 8004e3e:	f24c 7333 	movw	r3, #50995	; 0xc733
 8004e42:	617b      	str	r3, [r7, #20]
		                     GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
		                     GPIO_PIN_15;
	GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8004e44:	2302      	movs	r3, #2
 8004e46:	61bb      	str	r3, [r7, #24]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e48:	2303      	movs	r3, #3
 8004e4a:	623b      	str	r3, [r7, #32]
	GPIO_InitStructure.Pull = GPIO_NOPULL;
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStructure.Alternate = GPIO_AF12_FSMC;
 8004e50:	230c      	movs	r3, #12
 8004e52:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOD,&GPIO_InitStructure);
 8004e54:	f107 0314 	add.w	r3, r7, #20
 8004e58:	4619      	mov	r1, r3
 8004e5a:	4814      	ldr	r0, [pc, #80]	; (8004eac <LCD_CtrlLinesConfig+0xe4>)
 8004e5c:	f002 f824 	bl	8006ea8 <HAL_GPIO_Init>

	GPIO_InitStructure.Pin = GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 |
 8004e60:	f64f 73b0 	movw	r3, #65456	; 0xffb0
 8004e64:	617b      	str	r3, [r7, #20]
		                     GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |
							 GPIO_PIN_15;
	HAL_GPIO_Init(GPIOE,&GPIO_InitStructure);
 8004e66:	f107 0314 	add.w	r3, r7, #20
 8004e6a:	4619      	mov	r1, r3
 8004e6c:	4810      	ldr	r0, [pc, #64]	; (8004eb0 <LCD_CtrlLinesConfig+0xe8>)
 8004e6e:	f002 f81b 	bl	8006ea8 <HAL_GPIO_Init>

	GPIO_InitStructure.Pin = GPIO_PIN_13;
 8004e72:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004e76:	617b      	str	r3, [r7, #20]
	GPIO_InitStructure.Alternate = GPIO_AF12_FSMC;
 8004e78:	230c      	movs	r3, #12
 8004e7a:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOD,&GPIO_InitStructure);
 8004e7c:	f107 0314 	add.w	r3, r7, #20
 8004e80:	4619      	mov	r1, r3
 8004e82:	480a      	ldr	r0, [pc, #40]	; (8004eac <LCD_CtrlLinesConfig+0xe4>)
 8004e84:	f002 f810 	bl	8006ea8 <HAL_GPIO_Init>

	GPIO_InitStructure.Pin = GPIO_PIN_12;
 8004e88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004e8c:	617b      	str	r3, [r7, #20]
	GPIO_InitStructure.Alternate = GPIO_AF12_FSMC;
 8004e8e:	230c      	movs	r3, #12
 8004e90:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOG,&GPIO_InitStructure);
 8004e92:	f107 0314 	add.w	r3, r7, #20
 8004e96:	4619      	mov	r1, r3
 8004e98:	4806      	ldr	r0, [pc, #24]	; (8004eb4 <LCD_CtrlLinesConfig+0xec>)
 8004e9a:	f002 f805 	bl	8006ea8 <HAL_GPIO_Init>
}
 8004e9e:	bf00      	nop
 8004ea0:	3728      	adds	r7, #40	; 0x28
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}
 8004ea6:	bf00      	nop
 8004ea8:	40023800 	.word	0x40023800
 8004eac:	40020c00 	.word	0x40020c00
 8004eb0:	40021000 	.word	0x40021000
 8004eb4:	40021800 	.word	0x40021800

08004eb8 <LCD_FSMCConfig>:

static void LCD_FSMCConfig(void)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b0a2      	sub	sp, #136	; 0x88
 8004ebc:	af00      	add	r7, sp, #0
	//FSMC_NORSRAM_InitTypeDef  init;
	SRAM_HandleTypeDef hsram;
	FSMC_NORSRAM_TimingTypeDef  timingWrite;
	FSMC_NORSRAM_TimingTypeDef  timingRead;

	timingWrite.AddressSetupTime = 4;
 8004ebe:	2304      	movs	r3, #4
 8004ec0:	61fb      	str	r3, [r7, #28]
	timingWrite.AddressHoldTime = 0;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	623b      	str	r3, [r7, #32]
	timingWrite.DataSetupTime = 6;
 8004ec6:	2306      	movs	r3, #6
 8004ec8:	627b      	str	r3, [r7, #36]	; 0x24
	timingWrite.BusTurnAroundDuration = 1;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	62bb      	str	r3, [r7, #40]	; 0x28
	timingWrite.CLKDivision = 0;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
	timingWrite.DataLatency = 0;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	633b      	str	r3, [r7, #48]	; 0x30
	timingWrite.AccessMode = FSMC_ACCESS_MODE_A;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	637b      	str	r3, [r7, #52]	; 0x34

	timingRead.AddressSetupTime = 4;
 8004eda:	2304      	movs	r3, #4
 8004edc:	603b      	str	r3, [r7, #0]
	timingRead.AddressHoldTime = 0;
 8004ede:	2300      	movs	r3, #0
 8004ee0:	607b      	str	r3, [r7, #4]
	timingRead.DataSetupTime = 8;
 8004ee2:	2308      	movs	r3, #8
 8004ee4:	60bb      	str	r3, [r7, #8]
	timingRead.BusTurnAroundDuration = 1;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	60fb      	str	r3, [r7, #12]
	timingRead.CLKDivision = 0;
 8004eea:	2300      	movs	r3, #0
 8004eec:	613b      	str	r3, [r7, #16]
	timingRead.DataLatency = 0;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	617b      	str	r3, [r7, #20]
	timingRead.AccessMode = FSMC_ACCESS_MODE_A;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	61bb      	str	r3, [r7, #24]

	hsram.Instance = FSMC_NORSRAM_DEVICE;
 8004ef6:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8004efa:	63bb      	str	r3, [r7, #56]	; 0x38
	hsram.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8004efc:	4b13      	ldr	r3, [pc, #76]	; (8004f4c <LCD_FSMCConfig+0x94>)
 8004efe:	63fb      	str	r3, [r7, #60]	; 0x3c
	hsram.Init.NSBank = FSMC_NORSRAM_BANK4;
 8004f00:	2306      	movs	r3, #6
 8004f02:	643b      	str	r3, [r7, #64]	; 0x40
	hsram.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8004f04:	2300      	movs	r3, #0
 8004f06:	647b      	str	r3, [r7, #68]	; 0x44
	hsram.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8004f08:	2310      	movs	r3, #16
 8004f0a:	64fb      	str	r3, [r7, #76]	; 0x4c
	hsram.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	653b      	str	r3, [r7, #80]	; 0x50
	hsram.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8004f10:	2300      	movs	r3, #0
 8004f12:	66fb      	str	r3, [r7, #108]	; 0x6c
	hsram.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8004f14:	2300      	movs	r3, #0
 8004f16:	657b      	str	r3, [r7, #84]	; 0x54
	hsram.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8004f18:	2300      	movs	r3, #0
 8004f1a:	65bb      	str	r3, [r7, #88]	; 0x58
	hsram.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	65fb      	str	r3, [r7, #92]	; 0x5c
	hsram.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8004f20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004f24:	663b      	str	r3, [r7, #96]	; 0x60
	hsram.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8004f26:	2300      	movs	r3, #0
 8004f28:	667b      	str	r3, [r7, #100]	; 0x64
	hsram.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	66bb      	str	r3, [r7, #104]	; 0x68
	hsram.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	673b      	str	r3, [r7, #112]	; 0x70
	//hsram.Init.ContinuousClock = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY; /* 새로운 파라미터 */

	HAL_SRAM_Init(&hsram, &timingRead, &timingWrite);
 8004f32:	f107 021c 	add.w	r2, r7, #28
 8004f36:	4639      	mov	r1, r7
 8004f38:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	f7fd f85d 	bl	8001ffc <HAL_SRAM_Init>
}
 8004f42:	bf00      	nop
 8004f44:	3788      	adds	r7, #136	; 0x88
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}
 8004f4a:	bf00      	nop
 8004f4c:	a0000104 	.word	0xa0000104

08004f50 <LCD_ClrScr>:
*********************************************************************************************************
*	Func name: LCD_ClrScr
*********************************************************************************************************
*/
void LCD_ClrScr(uint16_t _usColor)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b082      	sub	sp, #8
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	4603      	mov	r3, r0
 8004f58:	80fb      	strh	r3, [r7, #6]
	if (g_ChipID == IC_8875)	/* RA8875 ·ÖÖ§ */
 8004f5a:	4b06      	ldr	r3, [pc, #24]	; (8004f74 <LCD_ClrScr+0x24>)
 8004f5c:	881b      	ldrh	r3, [r3, #0]
 8004f5e:	2b75      	cmp	r3, #117	; 0x75
 8004f60:	d103      	bne.n	8004f6a <LCD_ClrScr+0x1a>
	{
		//UART1_Transmit_String("LCD Controller is RA8875 color\r\n");
		RA8875_ClrScr(_usColor);
 8004f62:	88fb      	ldrh	r3, [r7, #6]
 8004f64:	4618      	mov	r0, r3
 8004f66:	f7fe f813 	bl	8002f90 <RA8875_ClrScr>
	else	/* 5420£¬4001£¬61509 ·ÖÖ§ */
	{
		//UART1_Transmit_String("LCD Controller is SFD5420 color\r\n");
		//SPFD5420_ClrScr(_usColor);
	}
}
 8004f6a:	bf00      	nop
 8004f6c:	3708      	adds	r7, #8
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}
 8004f72:	bf00      	nop
 8004f74:	20000008 	.word	0x20000008

08004f78 <LCD_SetBackLight>:
*********************************************************************************************************
* 	Func name: LCD_SetBackLight
*********************************************************************************************************
*/
void LCD_SetBackLight(uint8_t _bright)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b082      	sub	sp, #8
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	4603      	mov	r3, r0
 8004f80:	71fb      	strb	r3, [r7, #7]
	s_ucBright =  _bright;	/* ±£´æ±³¹âÖµ */
 8004f82:	4a07      	ldr	r2, [pc, #28]	; (8004fa0 <LCD_SetBackLight+0x28>)
 8004f84:	79fb      	ldrb	r3, [r7, #7]
 8004f86:	7013      	strb	r3, [r2, #0]

	if (g_ChipID == IC_8875)
 8004f88:	4b06      	ldr	r3, [pc, #24]	; (8004fa4 <LCD_SetBackLight+0x2c>)
 8004f8a:	881b      	ldrh	r3, [r3, #0]
 8004f8c:	2b75      	cmp	r3, #117	; 0x75
 8004f8e:	d103      	bne.n	8004f98 <LCD_SetBackLight+0x20>
	{
		RA8875_SetBackLight(_bright);
 8004f90:	79fb      	ldrb	r3, [r7, #7]
 8004f92:	4618      	mov	r0, r3
 8004f94:	f7fe f972 	bl	800327c <RA8875_SetBackLight>
	}
	else
	{
		//SPFD5420_SetBackLight(_bright);
	}
}
 8004f98:	bf00      	nop
 8004f9a:	3708      	adds	r7, #8
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}
 8004fa0:	2000036c 	.word	0x2000036c
 8004fa4:	20000008 	.word	0x20000008

08004fa8 <LCD_DrawBMP>:
*********************************************************************************************************
*	Func name: LCD_DrawBMP
*********************************************************************************************************
*/
void LCD_DrawBMP(uint16_t _usX, uint16_t _usY, uint16_t _usHeight, uint16_t _usWidth, uint16_t *_ptr)
{
 8004fa8:	b590      	push	{r4, r7, lr}
 8004faa:	b085      	sub	sp, #20
 8004fac:	af02      	add	r7, sp, #8
 8004fae:	4604      	mov	r4, r0
 8004fb0:	4608      	mov	r0, r1
 8004fb2:	4611      	mov	r1, r2
 8004fb4:	461a      	mov	r2, r3
 8004fb6:	4623      	mov	r3, r4
 8004fb8:	80fb      	strh	r3, [r7, #6]
 8004fba:	4603      	mov	r3, r0
 8004fbc:	80bb      	strh	r3, [r7, #4]
 8004fbe:	460b      	mov	r3, r1
 8004fc0:	807b      	strh	r3, [r7, #2]
 8004fc2:	4613      	mov	r3, r2
 8004fc4:	803b      	strh	r3, [r7, #0]
	if (g_ChipID == IC_8875)
 8004fc6:	4b08      	ldr	r3, [pc, #32]	; (8004fe8 <LCD_DrawBMP+0x40>)
 8004fc8:	881b      	ldrh	r3, [r3, #0]
 8004fca:	2b75      	cmp	r3, #117	; 0x75
 8004fcc:	d108      	bne.n	8004fe0 <LCD_DrawBMP+0x38>
	{
		RA8875_DrawBMP(_usX, _usY, _usHeight, _usWidth, _ptr);
 8004fce:	883c      	ldrh	r4, [r7, #0]
 8004fd0:	887a      	ldrh	r2, [r7, #2]
 8004fd2:	88b9      	ldrh	r1, [r7, #4]
 8004fd4:	88f8      	ldrh	r0, [r7, #6]
 8004fd6:	69bb      	ldr	r3, [r7, #24]
 8004fd8:	9300      	str	r3, [sp, #0]
 8004fda:	4623      	mov	r3, r4
 8004fdc:	f7fe f8cc 	bl	8003178 <RA8875_DrawBMP>
	}
	else
	{
		//SPFD5420_DrawBMP(_usX, _usY, _usHeight, _usWidth, _ptr);
	}
}
 8004fe0:	bf00      	nop
 8004fe2:	370c      	adds	r7, #12
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd90      	pop	{r4, r7, pc}
 8004fe8:	20000008 	.word	0x20000008

08004fec <LCD_DispStr>:
*********************************************************************************************************
*	Func name: LCD_DispStr
*********************************************************************************************************
*/
void LCD_DispStr(uint16_t _usX, uint16_t _usY, char *_ptr, FONT_T *_tFont)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b09e      	sub	sp, #120	; 0x78
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	60ba      	str	r2, [r7, #8]
 8004ff4:	607b      	str	r3, [r7, #4]
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	81fb      	strh	r3, [r7, #14]
 8004ffa:	460b      	mov	r3, r1
 8004ffc:	81bb      	strh	r3, [r7, #12]
#ifdef USE_SMALL_FONT
	const uint8_t *pHzDot;
#else
	uint32_t AddrHZK;
#endif
	if (_tFont->FontCode == FC_ST_12)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	881b      	ldrh	r3, [r3, #0]
 8005002:	2b01      	cmp	r3, #1
 8005004:	d10e      	bne.n	8005024 <LCD_DispStr+0x38>
	{
		font_height = 12;
 8005006:	230c      	movs	r3, #12
 8005008:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
		font_width = 12;
 800500c:	230c      	movs	r3, #12
 800500e:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
		font_bytes = 24;
 8005012:	2318      	movs	r3, #24
 8005014:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
		pAscDot = g_Ascii12;
 8005018:	4b83      	ldr	r3, [pc, #524]	; (8005228 <LCD_DispStr+0x23c>)
 800501a:	663b      	str	r3, [r7, #96]	; 0x60

		#ifdef USE_SMALL_FONT
			pHzDot = g_Hz12;
		#else
			AddrHZK = HZK12_ADDR;
 800501c:	f04f 43c8 	mov.w	r3, #1677721600	; 0x64000000
 8005020:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005022:	e0f5      	b.n	8005210 <LCD_DispStr+0x224>
		#endif
		}
		else
		{
			font_height = 16;
 8005024:	2310      	movs	r3, #16
 8005026:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
			font_width = 16;
 800502a:	2310      	movs	r3, #16
 800502c:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
			font_bytes = 32;
 8005030:	2320      	movs	r3, #32
 8005032:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
			pAscDot = g_Ascii16;
 8005036:	4b7d      	ldr	r3, [pc, #500]	; (800522c <LCD_DispStr+0x240>)
 8005038:	663b      	str	r3, [r7, #96]	; 0x60

		#ifdef USE_SMALL_FONT
			pHzDot = g_Hz16;
		#else
			AddrHZK = HZK16_ADDR;
 800503a:	4b7d      	ldr	r3, [pc, #500]	; (8005230 <LCD_DispStr+0x244>)
 800503c:	65fb      	str	r3, [r7, #92]	; 0x5c
		#endif
		}

		while (*_ptr != 0)
 800503e:	e0e7      	b.n	8005210 <LCD_DispStr+0x224>
		{
			code1 = *_ptr;
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	781b      	ldrb	r3, [r3, #0]
 8005044:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			if (code1 < 0x80)
 8005048:	f997 305b 	ldrsb.w	r3, [r7, #91]	; 0x5b
 800504c:	2b00      	cmp	r3, #0
 800504e:	db1a      	blt.n	8005086 <LCD_DispStr+0x9a>
			{
				memcpy(buf, &pAscDot[code1 * (font_bytes / 2)], (font_bytes / 2));
 8005050:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8005054:	f897 2069 	ldrb.w	r2, [r7, #105]	; 0x69
 8005058:	0852      	lsrs	r2, r2, #1
 800505a:	b2d2      	uxtb	r2, r2
 800505c:	fb02 f303 	mul.w	r3, r2, r3
 8005060:	461a      	mov	r2, r3
 8005062:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005064:	1899      	adds	r1, r3, r2
 8005066:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 800506a:	085b      	lsrs	r3, r3, #1
 800506c:	b2db      	uxtb	r3, r3
 800506e:	461a      	mov	r2, r3
 8005070:	f107 0310 	add.w	r3, r7, #16
 8005074:	4618      	mov	r0, r3
 8005076:	f003 fbdc 	bl	8008832 <memcpy>
				width = font_width / 2;
 800507a:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800507e:	085b      	lsrs	r3, r3, #1
 8005080:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8005084:	e056      	b.n	8005134 <LCD_DispStr+0x148>
			}
			else
			{
				code2 = *++_ptr;
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	3301      	adds	r3, #1
 800508a:	60bb      	str	r3, [r7, #8]
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	781b      	ldrb	r3, [r3, #0]
 8005090:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
				if (code2 == 0)
 8005094:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8005098:	2b00      	cmp	r3, #0
 800509a:	f000 80bf 	beq.w	800521c <LCD_DispStr+0x230>
							break;
						}
					}
				#else	/* ÓÃÈ«×Ö¿â */
					/* ´Ë´¦ÐèÒª¸ù¾Ý×Ö¿âÎÄ¼þ´æ·ÅÎ»ÖÃ½øÐÐÐÞ¸Ä */
					if (code1 >=0xA1 && code1 <= 0xA9 && code2 >=0xA1)
 800509e:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80050a2:	2ba0      	cmp	r3, #160	; 0xa0
 80050a4:	d91a      	bls.n	80050dc <LCD_DispStr+0xf0>
 80050a6:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80050aa:	2ba9      	cmp	r3, #169	; 0xa9
 80050ac:	d816      	bhi.n	80050dc <LCD_DispStr+0xf0>
 80050ae:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 80050b2:	2ba0      	cmp	r3, #160	; 0xa0
 80050b4:	d912      	bls.n	80050dc <LCD_DispStr+0xf0>
					{
						address = ((code1 - 0xA1) * 94 + (code2 - 0xA1)) * font_bytes + AddrHZK;
 80050b6:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80050ba:	3ba1      	subs	r3, #161	; 0xa1
 80050bc:	225e      	movs	r2, #94	; 0x5e
 80050be:	fb03 f202 	mul.w	r2, r3, r2
 80050c2:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 80050c6:	3ba1      	subs	r3, #161	; 0xa1
 80050c8:	4413      	add	r3, r2
 80050ca:	f897 2069 	ldrb.w	r2, [r7, #105]	; 0x69
 80050ce:	fb02 f303 	mul.w	r3, r2, r3
 80050d2:	461a      	mov	r2, r3
 80050d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050d6:	4413      	add	r3, r2
 80050d8:	673b      	str	r3, [r7, #112]	; 0x70
 80050da:	e01f      	b.n	800511c <LCD_DispStr+0x130>
					}
					else if (code1 >=0xB0 && code1 <= 0xF7 && code2 >=0xA1)
 80050dc:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80050e0:	2baf      	cmp	r3, #175	; 0xaf
 80050e2:	d91b      	bls.n	800511c <LCD_DispStr+0x130>
 80050e4:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80050e8:	2bf7      	cmp	r3, #247	; 0xf7
 80050ea:	d817      	bhi.n	800511c <LCD_DispStr+0x130>
 80050ec:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 80050f0:	2ba0      	cmp	r3, #160	; 0xa0
 80050f2:	d913      	bls.n	800511c <LCD_DispStr+0x130>
					{
						address = ((code1 - 0xB0) * 94 + (code2 - 0xA1) + 846) * font_bytes + AddrHZK;
 80050f4:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80050f8:	3bb0      	subs	r3, #176	; 0xb0
 80050fa:	225e      	movs	r2, #94	; 0x5e
 80050fc:	fb03 f202 	mul.w	r2, r3, r2
 8005100:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8005104:	3ba1      	subs	r3, #161	; 0xa1
 8005106:	4413      	add	r3, r2
 8005108:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800510c:	f897 2069 	ldrb.w	r2, [r7, #105]	; 0x69
 8005110:	fb02 f303 	mul.w	r3, r2, r3
 8005114:	461a      	mov	r2, r3
 8005116:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005118:	4413      	add	r3, r2
 800511a:	673b      	str	r3, [r7, #112]	; 0x70
					}
					memcpy(buf, (const uint8_t *)address, font_bytes);
 800511c:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800511e:	f897 2069 	ldrb.w	r2, [r7, #105]	; 0x69
 8005122:	f107 0310 	add.w	r3, r7, #16
 8005126:	4618      	mov	r0, r3
 8005128:	f003 fb83 	bl	8008832 <memcpy>
				#endif
					width = font_width;
 800512c:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8005130:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			}
			y = _usY;
 8005134:	89bb      	ldrh	r3, [r7, #12]
 8005136:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
			/* ¿ªÊ¼Ë¢LCD */
			for (m = 0; m < font_height; m++)	/* ×Ö·û¸ß¶È */
 800513a:	2300      	movs	r3, #0
 800513c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 8005140:	e052      	b.n	80051e8 <LCD_DispStr+0x1fc>
			{
				x = _usX;
 8005142:	89fb      	ldrh	r3, [r7, #14]
 8005144:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
				for (i = 0; i < width; i++)	/* ×Ö·û¿í¶È */
 8005148:	2300      	movs	r3, #0
 800514a:	677b      	str	r3, [r7, #116]	; 0x74
 800514c:	e03d      	b.n	80051ca <LCD_DispStr+0x1de>
				{
					if ((buf[m * ((2 * width) / font_width) + i / 8] & (0x80 >> (i % 8 ))) != 0x00)
 800514e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005152:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8005156:	0051      	lsls	r1, r2, #1
 8005158:	f897 206b 	ldrb.w	r2, [r7, #107]	; 0x6b
 800515c:	fb91 f2f2 	sdiv	r2, r1, r2
 8005160:	fb02 f303 	mul.w	r3, r2, r3
 8005164:	461a      	mov	r2, r3
 8005166:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005168:	08db      	lsrs	r3, r3, #3
 800516a:	4413      	add	r3, r2
 800516c:	3378      	adds	r3, #120	; 0x78
 800516e:	443b      	add	r3, r7
 8005170:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8005174:	4619      	mov	r1, r3
 8005176:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005178:	f003 0307 	and.w	r3, r3, #7
 800517c:	2280      	movs	r2, #128	; 0x80
 800517e:	fa42 f303 	asr.w	r3, r2, r3
 8005182:	400b      	ands	r3, r1
 8005184:	2b00      	cmp	r3, #0
 8005186:	d009      	beq.n	800519c <LCD_DispStr+0x1b0>
					{
						LCD_PutPixel(x, y, _tFont->FrontColor);	/* ÉèÖÃÏñËØÑÕÉ«ÎªÎÄ×ÖÉ« */
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	885a      	ldrh	r2, [r3, #2]
 800518c:	f8b7 1064 	ldrh.w	r1, [r7, #100]	; 0x64
 8005190:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005194:	4618      	mov	r0, r3
 8005196:	f000 f84d 	bl	8005234 <LCD_PutPixel>
 800519a:	e00e      	b.n	80051ba <LCD_DispStr+0x1ce>
					}
					else
					{
						if (_tFont->BackColor != CL_MASK)	/* Í¸Ã÷É« */
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	889b      	ldrh	r3, [r3, #4]
 80051a0:	f649 1299 	movw	r2, #39321	; 0x9999
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d008      	beq.n	80051ba <LCD_DispStr+0x1ce>
						{
							LCD_PutPixel(x, y, _tFont->BackColor);	/* ÉèÖÃÏñËØÑÕÉ«ÎªÎÄ×Ö±³¾°É« */
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	889a      	ldrh	r2, [r3, #4]
 80051ac:	f8b7 1064 	ldrh.w	r1, [r7, #100]	; 0x64
 80051b0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80051b4:	4618      	mov	r0, r3
 80051b6:	f000 f83d 	bl	8005234 <LCD_PutPixel>
						}
					}
					x++;
 80051ba:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80051be:	3301      	adds	r3, #1
 80051c0:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
				for (i = 0; i < width; i++)	/* ×Ö·û¿í¶È */
 80051c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80051c6:	3301      	adds	r3, #1
 80051c8:	677b      	str	r3, [r7, #116]	; 0x74
 80051ca:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80051ce:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80051d0:	429a      	cmp	r2, r3
 80051d2:	d3bc      	bcc.n	800514e <LCD_DispStr+0x162>
				}
				y++;
 80051d4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80051d8:	3301      	adds	r3, #1
 80051da:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
			for (m = 0; m < font_height; m++)	/* ×Ö·û¸ß¶È */
 80051de:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80051e2:	3301      	adds	r3, #1
 80051e4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 80051e8:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 80051ec:	b29b      	uxth	r3, r3
 80051ee:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80051f2:	429a      	cmp	r2, r3
 80051f4:	d3a5      	bcc.n	8005142 <LCD_DispStr+0x156>

			if (_tFont->Space > 0)
			{
				/* Èç¹ûÎÄ×Öµ×É«°´_tFont->usBackColor£¬²¢ÇÒ×Ö¼ä¾à´óÓÚµãÕóµÄ¿í¶È£¬ÄÇÃ´ÐèÒªÔÚÎÄ×ÖÖ®¼äÌî³ä(ÔÝÊ±Î´ÊµÏÖ) */
			}
			_usX += width + _tFont->Space;	/* ÁÐµØÖ·µÝÔö */
 80051f6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80051fa:	b29a      	uxth	r2, r3
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	88db      	ldrh	r3, [r3, #6]
 8005200:	4413      	add	r3, r2
 8005202:	b29a      	uxth	r2, r3
 8005204:	89fb      	ldrh	r3, [r7, #14]
 8005206:	4413      	add	r3, r2
 8005208:	81fb      	strh	r3, [r7, #14]
			_ptr++;			/* Ö¸ÏòÏÂÒ»¸ö×Ö·û */
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	3301      	adds	r3, #1
 800520e:	60bb      	str	r3, [r7, #8]
		while (*_ptr != 0)
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	781b      	ldrb	r3, [r3, #0]
 8005214:	2b00      	cmp	r3, #0
 8005216:	f47f af13 	bne.w	8005040 <LCD_DispStr+0x54>
		}
}
 800521a:	e000      	b.n	800521e <LCD_DispStr+0x232>
					break;
 800521c:	bf00      	nop
}
 800521e:	bf00      	nop
 8005220:	3778      	adds	r7, #120	; 0x78
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}
 8005226:	bf00      	nop
 8005228:	0800a99c 	.word	0x0800a99c
 800522c:	0800af90 	.word	0x0800af90
 8005230:	6402c9d0 	.word	0x6402c9d0

08005234 <LCD_PutPixel>:
*********************************************************************************************************
*	Func name: LCD_PutPixel
*********************************************************************************************************
*/
void LCD_PutPixel(uint16_t _usX, uint16_t _usY, uint16_t _usColor)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b082      	sub	sp, #8
 8005238:	af00      	add	r7, sp, #0
 800523a:	4603      	mov	r3, r0
 800523c:	80fb      	strh	r3, [r7, #6]
 800523e:	460b      	mov	r3, r1
 8005240:	80bb      	strh	r3, [r7, #4]
 8005242:	4613      	mov	r3, r2
 8005244:	807b      	strh	r3, [r7, #2]
	if (g_ChipID == IC_8875)
 8005246:	4b07      	ldr	r3, [pc, #28]	; (8005264 <LCD_PutPixel+0x30>)
 8005248:	881b      	ldrh	r3, [r3, #0]
 800524a:	2b75      	cmp	r3, #117	; 0x75
 800524c:	d105      	bne.n	800525a <LCD_PutPixel+0x26>
	{
		RA8875_PutPixel(_usX, _usY, _usColor);
 800524e:	887a      	ldrh	r2, [r7, #2]
 8005250:	88b9      	ldrh	r1, [r7, #4]
 8005252:	88fb      	ldrh	r3, [r7, #6]
 8005254:	4618      	mov	r0, r3
 8005256:	f7fd fec3 	bl	8002fe0 <RA8875_PutPixel>
	}
	else
	{
		//SPFD5420_PutPixel(_usX, _usY, _usColor);
	}
}
 800525a:	bf00      	nop
 800525c:	3708      	adds	r7, #8
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}
 8005262:	bf00      	nop
 8005264:	20000008 	.word	0x20000008

08005268 <LCD_DrawIcon32>:
*********************************************************************************************************
*	Func name: LCD_DrawIcon32
*********************************************************************************************************
*/
void LCD_DrawIcon32(const ICON_T *_tIcon, FONT_T *_tFont, uint8_t _ucFocusMode)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b08a      	sub	sp, #40	; 0x28
 800526c:	af00      	add	r7, sp, #0
 800526e:	60f8      	str	r0, [r7, #12]
 8005270:	60b9      	str	r1, [r7, #8]
 8005272:	4613      	mov	r3, r2
 8005274:	71fb      	strb	r3, [r7, #7]
	uint16_t usOldRGB, usNewRGB;
	int16_t x, y;		/* ÓÃÓÚ¼ÇÂ¼´°¿ÚÄÚµÄÏà¶Ô×ø±ê */
	uint8_t R1,G1,B1,A;	/* ÐÂÏñËØÉ«²Ê·ÖÁ¿ */
	uint8_t R0,G0,B0;	/* ¾ÉÏñËØÉ«²Ê·ÖÁ¿ */

	p = (const uint8_t *)_tIcon->pBmp;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	68db      	ldr	r3, [r3, #12]
 800527a:	627b      	str	r3, [r7, #36]	; 0x24
	p += 54;		/* Ö±½ÓÖ¸ÏòÍ¼ÏñÊý¾ÝÇø */
 800527c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800527e:	3336      	adds	r3, #54	; 0x36
 8005280:	627b      	str	r3, [r7, #36]	; 0x24

	/* °´ÕÕBMPÎ»Í¼´ÎÐò£¬´Ó×óÖÁÓÒ£¬´ÓÉÏÖÁÏÂÉ¨Ãè */
	for (y = _tIcon->Height - 1; y >= 0; y--)
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	88db      	ldrh	r3, [r3, #6]
 8005286:	3b01      	subs	r3, #1
 8005288:	b29b      	uxth	r3, r3
 800528a:	83fb      	strh	r3, [r7, #30]
 800528c:	e0ff      	b.n	800548e <LCD_DrawIcon32+0x226>
	{
		for (x = 0; x < _tIcon->Width; x++)
 800528e:	2300      	movs	r3, #0
 8005290:	843b      	strh	r3, [r7, #32]
 8005292:	e0ef      	b.n	8005474 <LCD_DrawIcon32+0x20c>
		{
			B1 = *p++;
 8005294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005296:	1c5a      	adds	r2, r3, #1
 8005298:	627a      	str	r2, [r7, #36]	; 0x24
 800529a:	781b      	ldrb	r3, [r3, #0]
 800529c:	767b      	strb	r3, [r7, #25]
			G1 = *p++;
 800529e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a0:	1c5a      	adds	r2, r3, #1
 80052a2:	627a      	str	r2, [r7, #36]	; 0x24
 80052a4:	781b      	ldrb	r3, [r3, #0]
 80052a6:	763b      	strb	r3, [r7, #24]
			R1 = *p++;
 80052a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052aa:	1c5a      	adds	r2, r3, #1
 80052ac:	627a      	str	r2, [r7, #36]	; 0x24
 80052ae:	781b      	ldrb	r3, [r3, #0]
 80052b0:	75fb      	strb	r3, [r7, #23]
			A = *p++;	/* Alpha Öµ(Í¸Ã÷¶È)£¬0-255, 0±íÊ¾Í¸Ã÷£¬1±íÊ¾²»Í¸Ã÷, ÖÐ¼äÖµ±íÊ¾Í¸Ã÷¶È */
 80052b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b4:	1c5a      	adds	r2, r3, #1
 80052b6:	627a      	str	r2, [r7, #36]	; 0x24
 80052b8:	781b      	ldrb	r3, [r3, #0]
 80052ba:	75bb      	strb	r3, [r7, #22]

			if (A == 0x00)	/* ÐèÒªÍ¸Ã÷,ÏÔÊ¾±³¾° */
 80052bc:	7dbb      	ldrb	r3, [r7, #22]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	f000 80d2 	beq.w	8005468 <LCD_DrawIcon32+0x200>
			{
				;	/* ²»ÓÃË¢ÐÂ±³¾° */
			}
			else if (A == 0xFF)	/* ÍêÈ«²»Í¸Ã÷£¬ ÏÔÊ¾ÐÂÏñËØ */
 80052c4:	7dbb      	ldrb	r3, [r7, #22]
 80052c6:	2bff      	cmp	r3, #255	; 0xff
 80052c8:	d12d      	bne.n	8005326 <LCD_DrawIcon32+0xbe>
			{
				usNewRGB = RGB(R1, G1, B1);
 80052ca:	7dfb      	ldrb	r3, [r7, #23]
 80052cc:	08db      	lsrs	r3, r3, #3
 80052ce:	b2db      	uxtb	r3, r3
 80052d0:	02db      	lsls	r3, r3, #11
 80052d2:	b21a      	sxth	r2, r3
 80052d4:	7e3b      	ldrb	r3, [r7, #24]
 80052d6:	089b      	lsrs	r3, r3, #2
 80052d8:	b2db      	uxtb	r3, r3
 80052da:	015b      	lsls	r3, r3, #5
 80052dc:	b21b      	sxth	r3, r3
 80052de:	4313      	orrs	r3, r2
 80052e0:	b21a      	sxth	r2, r3
 80052e2:	7e7b      	ldrb	r3, [r7, #25]
 80052e4:	08db      	lsrs	r3, r3, #3
 80052e6:	b2db      	uxtb	r3, r3
 80052e8:	b21b      	sxth	r3, r3
 80052ea:	4313      	orrs	r3, r2
 80052ec:	b21b      	sxth	r3, r3
 80052ee:	847b      	strh	r3, [r7, #34]	; 0x22
				if (_ucFocusMode == 1)
 80052f0:	79fb      	ldrb	r3, [r7, #7]
 80052f2:	2b01      	cmp	r3, #1
 80052f4:	d108      	bne.n	8005308 <LCD_DrawIcon32+0xa0>
				{
					usNewRGB = Blend565(usNewRGB, CL_YELLOW, 10);
 80052f6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80052f8:	220a      	movs	r2, #10
 80052fa:	f64f 71e0 	movw	r1, #65504	; 0xffe0
 80052fe:	4618      	mov	r0, r3
 8005300:	f000 f910 	bl	8005524 <Blend565>
 8005304:	4603      	mov	r3, r0
 8005306:	847b      	strh	r3, [r7, #34]	; 0x22
				}
				LCD_PutPixel(x + _tIcon->Left, y + _tIcon->Top, usNewRGB);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	885a      	ldrh	r2, [r3, #2]
 800530c:	8c3b      	ldrh	r3, [r7, #32]
 800530e:	4413      	add	r3, r2
 8005310:	b298      	uxth	r0, r3
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	889a      	ldrh	r2, [r3, #4]
 8005316:	8bfb      	ldrh	r3, [r7, #30]
 8005318:	4413      	add	r3, r2
 800531a:	b29b      	uxth	r3, r3
 800531c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800531e:	4619      	mov	r1, r3
 8005320:	f7ff ff88 	bl	8005234 <LCD_PutPixel>
 8005324:	e0a0      	b.n	8005468 <LCD_DrawIcon32+0x200>
			}
			else 	/* °ëÍ¸Ã÷ */
			{
				/* ¼ÆËã¹«Ê½£º Êµ¼ÊÏÔÊ¾ÑÕÉ« = Ç°¾°ÑÕÉ« * Alpha / 255 + ±³¾°ÑÕÉ« * (255-Alpha) / 255 */
				usOldRGB = LCD_GetPixel(x + _tIcon->Left, y + _tIcon->Top);
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	885a      	ldrh	r2, [r3, #2]
 800532a:	8c3b      	ldrh	r3, [r7, #32]
 800532c:	4413      	add	r3, r2
 800532e:	b298      	uxth	r0, r3
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	889a      	ldrh	r2, [r3, #4]
 8005334:	8bfb      	ldrh	r3, [r7, #30]
 8005336:	4413      	add	r3, r2
 8005338:	b29b      	uxth	r3, r3
 800533a:	4619      	mov	r1, r3
 800533c:	f000 f926 	bl	800558c <LCD_GetPixel>
 8005340:	4603      	mov	r3, r0
 8005342:	82bb      	strh	r3, [r7, #20]
				R0 = RGB565_R(usOldRGB);
 8005344:	8abb      	ldrh	r3, [r7, #20]
 8005346:	0a1b      	lsrs	r3, r3, #8
 8005348:	b29b      	uxth	r3, r3
 800534a:	b2db      	uxtb	r3, r3
 800534c:	f023 0307 	bic.w	r3, r3, #7
 8005350:	74fb      	strb	r3, [r7, #19]
				G0 = RGB565_G(usOldRGB);
 8005352:	8abb      	ldrh	r3, [r7, #20]
 8005354:	08db      	lsrs	r3, r3, #3
 8005356:	b29b      	uxth	r3, r3
 8005358:	b2db      	uxtb	r3, r3
 800535a:	f023 0303 	bic.w	r3, r3, #3
 800535e:	74bb      	strb	r3, [r7, #18]
				B0 = RGB565_B(usOldRGB);
 8005360:	8abb      	ldrh	r3, [r7, #20]
 8005362:	00db      	lsls	r3, r3, #3
 8005364:	747b      	strb	r3, [r7, #17]

				R1 = (R1 * A) / 255 + R0 * (255 - A) / 255;
 8005366:	7dfb      	ldrb	r3, [r7, #23]
 8005368:	7dba      	ldrb	r2, [r7, #22]
 800536a:	fb02 f303 	mul.w	r3, r2, r3
 800536e:	4a6c      	ldr	r2, [pc, #432]	; (8005520 <LCD_DrawIcon32+0x2b8>)
 8005370:	fb82 1203 	smull	r1, r2, r2, r3
 8005374:	441a      	add	r2, r3
 8005376:	11d2      	asrs	r2, r2, #7
 8005378:	17db      	asrs	r3, r3, #31
 800537a:	1ad3      	subs	r3, r2, r3
 800537c:	b2da      	uxtb	r2, r3
 800537e:	7cfb      	ldrb	r3, [r7, #19]
 8005380:	7db9      	ldrb	r1, [r7, #22]
 8005382:	f1c1 01ff 	rsb	r1, r1, #255	; 0xff
 8005386:	fb01 f303 	mul.w	r3, r1, r3
 800538a:	4965      	ldr	r1, [pc, #404]	; (8005520 <LCD_DrawIcon32+0x2b8>)
 800538c:	fb81 0103 	smull	r0, r1, r1, r3
 8005390:	4419      	add	r1, r3
 8005392:	11c9      	asrs	r1, r1, #7
 8005394:	17db      	asrs	r3, r3, #31
 8005396:	1acb      	subs	r3, r1, r3
 8005398:	b2db      	uxtb	r3, r3
 800539a:	4413      	add	r3, r2
 800539c:	75fb      	strb	r3, [r7, #23]
				G1 = (G1 * A) / 255 + G0 * (255 - A) / 255;
 800539e:	7e3b      	ldrb	r3, [r7, #24]
 80053a0:	7dba      	ldrb	r2, [r7, #22]
 80053a2:	fb02 f303 	mul.w	r3, r2, r3
 80053a6:	4a5e      	ldr	r2, [pc, #376]	; (8005520 <LCD_DrawIcon32+0x2b8>)
 80053a8:	fb82 1203 	smull	r1, r2, r2, r3
 80053ac:	441a      	add	r2, r3
 80053ae:	11d2      	asrs	r2, r2, #7
 80053b0:	17db      	asrs	r3, r3, #31
 80053b2:	1ad3      	subs	r3, r2, r3
 80053b4:	b2da      	uxtb	r2, r3
 80053b6:	7cbb      	ldrb	r3, [r7, #18]
 80053b8:	7db9      	ldrb	r1, [r7, #22]
 80053ba:	f1c1 01ff 	rsb	r1, r1, #255	; 0xff
 80053be:	fb01 f303 	mul.w	r3, r1, r3
 80053c2:	4957      	ldr	r1, [pc, #348]	; (8005520 <LCD_DrawIcon32+0x2b8>)
 80053c4:	fb81 0103 	smull	r0, r1, r1, r3
 80053c8:	4419      	add	r1, r3
 80053ca:	11c9      	asrs	r1, r1, #7
 80053cc:	17db      	asrs	r3, r3, #31
 80053ce:	1acb      	subs	r3, r1, r3
 80053d0:	b2db      	uxtb	r3, r3
 80053d2:	4413      	add	r3, r2
 80053d4:	763b      	strb	r3, [r7, #24]
				B1 = (B1 * A) / 255 + B0 * (255 - A) / 255;
 80053d6:	7e7b      	ldrb	r3, [r7, #25]
 80053d8:	7dba      	ldrb	r2, [r7, #22]
 80053da:	fb02 f303 	mul.w	r3, r2, r3
 80053de:	4a50      	ldr	r2, [pc, #320]	; (8005520 <LCD_DrawIcon32+0x2b8>)
 80053e0:	fb82 1203 	smull	r1, r2, r2, r3
 80053e4:	441a      	add	r2, r3
 80053e6:	11d2      	asrs	r2, r2, #7
 80053e8:	17db      	asrs	r3, r3, #31
 80053ea:	1ad3      	subs	r3, r2, r3
 80053ec:	b2da      	uxtb	r2, r3
 80053ee:	7c7b      	ldrb	r3, [r7, #17]
 80053f0:	7db9      	ldrb	r1, [r7, #22]
 80053f2:	f1c1 01ff 	rsb	r1, r1, #255	; 0xff
 80053f6:	fb01 f303 	mul.w	r3, r1, r3
 80053fa:	4949      	ldr	r1, [pc, #292]	; (8005520 <LCD_DrawIcon32+0x2b8>)
 80053fc:	fb81 0103 	smull	r0, r1, r1, r3
 8005400:	4419      	add	r1, r3
 8005402:	11c9      	asrs	r1, r1, #7
 8005404:	17db      	asrs	r3, r3, #31
 8005406:	1acb      	subs	r3, r1, r3
 8005408:	b2db      	uxtb	r3, r3
 800540a:	4413      	add	r3, r2
 800540c:	767b      	strb	r3, [r7, #25]
				usNewRGB = RGB(R1, G1, B1);
 800540e:	7dfb      	ldrb	r3, [r7, #23]
 8005410:	08db      	lsrs	r3, r3, #3
 8005412:	b2db      	uxtb	r3, r3
 8005414:	02db      	lsls	r3, r3, #11
 8005416:	b21a      	sxth	r2, r3
 8005418:	7e3b      	ldrb	r3, [r7, #24]
 800541a:	089b      	lsrs	r3, r3, #2
 800541c:	b2db      	uxtb	r3, r3
 800541e:	015b      	lsls	r3, r3, #5
 8005420:	b21b      	sxth	r3, r3
 8005422:	4313      	orrs	r3, r2
 8005424:	b21a      	sxth	r2, r3
 8005426:	7e7b      	ldrb	r3, [r7, #25]
 8005428:	08db      	lsrs	r3, r3, #3
 800542a:	b2db      	uxtb	r3, r3
 800542c:	b21b      	sxth	r3, r3
 800542e:	4313      	orrs	r3, r2
 8005430:	b21b      	sxth	r3, r3
 8005432:	847b      	strh	r3, [r7, #34]	; 0x22
				if (_ucFocusMode == 1)
 8005434:	79fb      	ldrb	r3, [r7, #7]
 8005436:	2b01      	cmp	r3, #1
 8005438:	d108      	bne.n	800544c <LCD_DrawIcon32+0x1e4>
				{
					usNewRGB = Blend565(usNewRGB, CL_YELLOW, 10);
 800543a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800543c:	220a      	movs	r2, #10
 800543e:	f64f 71e0 	movw	r1, #65504	; 0xffe0
 8005442:	4618      	mov	r0, r3
 8005444:	f000 f86e 	bl	8005524 <Blend565>
 8005448:	4603      	mov	r3, r0
 800544a:	847b      	strh	r3, [r7, #34]	; 0x22
				}
				LCD_PutPixel(x + _tIcon->Left, y + _tIcon->Top, usNewRGB);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	885a      	ldrh	r2, [r3, #2]
 8005450:	8c3b      	ldrh	r3, [r7, #32]
 8005452:	4413      	add	r3, r2
 8005454:	b298      	uxth	r0, r3
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	889a      	ldrh	r2, [r3, #4]
 800545a:	8bfb      	ldrh	r3, [r7, #30]
 800545c:	4413      	add	r3, r2
 800545e:	b29b      	uxth	r3, r3
 8005460:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8005462:	4619      	mov	r1, r3
 8005464:	f7ff fee6 	bl	8005234 <LCD_PutPixel>
		for (x = 0; x < _tIcon->Width; x++)
 8005468:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800546c:	b29b      	uxth	r3, r3
 800546e:	3301      	adds	r3, #1
 8005470:	b29b      	uxth	r3, r3
 8005472:	843b      	strh	r3, [r7, #32]
 8005474:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8005478:	68fa      	ldr	r2, [r7, #12]
 800547a:	8912      	ldrh	r2, [r2, #8]
 800547c:	4293      	cmp	r3, r2
 800547e:	f6ff af09 	blt.w	8005294 <LCD_DrawIcon32+0x2c>
	for (y = _tIcon->Height - 1; y >= 0; y--)
 8005482:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8005486:	b29b      	uxth	r3, r3
 8005488:	3b01      	subs	r3, #1
 800548a:	b29b      	uxth	r3, r3
 800548c:	83fb      	strh	r3, [r7, #30]
 800548e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8005492:	2b00      	cmp	r3, #0
 8005494:	f6bf aefb 	bge.w	800528e <LCD_DrawIcon32+0x26>
	/* »æÖÆÍ¼±êÏÂµÄÎÄ×Ö */
	{
		uint16_t len;
		uint16_t width;

		len = strlen(_tIcon->Text);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	3310      	adds	r3, #16
 800549c:	4618      	mov	r0, r3
 800549e:	f7fa fee7 	bl	8000270 <strlen>
 80054a2:	4603      	mov	r3, r0
 80054a4:	837b      	strh	r3, [r7, #26]

		if  (len == 0)
 80054a6:	8b7b      	ldrh	r3, [r7, #26]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d035      	beq.n	8005518 <LCD_DrawIcon32+0x2b0>
		{
			return;	/* Èç¹ûÍ¼±êÎÄ±¾³¤¶ÈÎª0£¬Ôò²»ÏÔÊ¾ */
		}

		/* ¼ÆËãÎÄ±¾µÄ×Ü¿í¶È */
		if (_tFont->FontCode == FC_ST_12)		/* 12µãÕó */
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	881b      	ldrh	r3, [r3, #0]
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	d10a      	bne.n	80054ca <LCD_DrawIcon32+0x262>
		{
			width = 6 * (len + _tFont->Space);
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	88da      	ldrh	r2, [r3, #6]
 80054b8:	8b7b      	ldrh	r3, [r7, #26]
 80054ba:	4413      	add	r3, r2
 80054bc:	b29b      	uxth	r3, r3
 80054be:	461a      	mov	r2, r3
 80054c0:	0052      	lsls	r2, r2, #1
 80054c2:	4413      	add	r3, r2
 80054c4:	005b      	lsls	r3, r3, #1
 80054c6:	83bb      	strh	r3, [r7, #28]
 80054c8:	e006      	b.n	80054d8 <LCD_DrawIcon32+0x270>
		}
		else	/* FC_ST_16 */
		{
			width = 8 * (len + _tFont->Space);
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	88da      	ldrh	r2, [r3, #6]
 80054ce:	8b7b      	ldrh	r3, [r7, #26]
 80054d0:	4413      	add	r3, r2
 80054d2:	b29b      	uxth	r3, r3
 80054d4:	00db      	lsls	r3, r3, #3
 80054d6:	83bb      	strh	r3, [r7, #28]
		}


		/* Ë®Æ½¾ÓÖÐ */
		x = (_tIcon->Left + _tIcon->Width / 2) - width / 2;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	885a      	ldrh	r2, [r3, #2]
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	891b      	ldrh	r3, [r3, #8]
 80054e0:	085b      	lsrs	r3, r3, #1
 80054e2:	b29b      	uxth	r3, r3
 80054e4:	4413      	add	r3, r2
 80054e6:	b29a      	uxth	r2, r3
 80054e8:	8bbb      	ldrh	r3, [r7, #28]
 80054ea:	085b      	lsrs	r3, r3, #1
 80054ec:	b29b      	uxth	r3, r3
 80054ee:	1ad3      	subs	r3, r2, r3
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	843b      	strh	r3, [r7, #32]
		y = _tIcon->Top + _tIcon->Height + 2;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	889a      	ldrh	r2, [r3, #4]
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	88db      	ldrh	r3, [r3, #6]
 80054fc:	4413      	add	r3, r2
 80054fe:	b29b      	uxth	r3, r3
 8005500:	3302      	adds	r3, #2
 8005502:	b29b      	uxth	r3, r3
 8005504:	83fb      	strh	r3, [r7, #30]
		LCD_DispStr(x, y, (char *)_tIcon->Text, _tFont);
 8005506:	8c38      	ldrh	r0, [r7, #32]
 8005508:	8bf9      	ldrh	r1, [r7, #30]
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	f103 0210 	add.w	r2, r3, #16
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	f7ff fd6b 	bl	8004fec <LCD_DispStr>
 8005516:	e000      	b.n	800551a <LCD_DrawIcon32+0x2b2>
			return;	/* Èç¹ûÍ¼±êÎÄ±¾³¤¶ÈÎª0£¬Ôò²»ÏÔÊ¾ */
 8005518:	bf00      	nop
	}
}
 800551a:	3728      	adds	r7, #40	; 0x28
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}
 8005520:	80808081 	.word	0x80808081

08005524 <Blend565>:


uint16_t Blend565(uint16_t src, uint16_t dst, uint8_t alpha)
{
 8005524:	b480      	push	{r7}
 8005526:	b085      	sub	sp, #20
 8005528:	af00      	add	r7, sp, #0
 800552a:	4603      	mov	r3, r0
 800552c:	80fb      	strh	r3, [r7, #6]
 800552e:	460b      	mov	r3, r1
 8005530:	80bb      	strh	r3, [r7, #4]
 8005532:	4613      	mov	r3, r2
 8005534:	70fb      	strb	r3, [r7, #3]
	uint32_t src2;
	uint32_t dst2;

	src2 = ((src << 16) |src) & 0x07E0F81F;
 8005536:	88fb      	ldrh	r3, [r7, #6]
 8005538:	041a      	lsls	r2, r3, #16
 800553a:	88fb      	ldrh	r3, [r7, #6]
 800553c:	4313      	orrs	r3, r2
 800553e:	461a      	mov	r2, r3
 8005540:	4b11      	ldr	r3, [pc, #68]	; (8005588 <Blend565+0x64>)
 8005542:	4013      	ands	r3, r2
 8005544:	60fb      	str	r3, [r7, #12]
	dst2 = ((dst << 16) | dst) & 0x07E0F81F;
 8005546:	88bb      	ldrh	r3, [r7, #4]
 8005548:	041a      	lsls	r2, r3, #16
 800554a:	88bb      	ldrh	r3, [r7, #4]
 800554c:	4313      	orrs	r3, r2
 800554e:	461a      	mov	r2, r3
 8005550:	4b0d      	ldr	r3, [pc, #52]	; (8005588 <Blend565+0x64>)
 8005552:	4013      	ands	r3, r2
 8005554:	60bb      	str	r3, [r7, #8]
	dst2 = ((((dst2 - src2) * alpha) >> 5) + src2) & 0x07E0F81F;
 8005556:	68ba      	ldr	r2, [r7, #8]
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	1ad3      	subs	r3, r2, r3
 800555c:	78fa      	ldrb	r2, [r7, #3]
 800555e:	fb02 f303 	mul.w	r3, r2, r3
 8005562:	095a      	lsrs	r2, r3, #5
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	441a      	add	r2, r3
 8005568:	4b07      	ldr	r3, [pc, #28]	; (8005588 <Blend565+0x64>)
 800556a:	4013      	ands	r3, r2
 800556c:	60bb      	str	r3, [r7, #8]
	return (dst2 >> 16) | dst2;
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	0c1b      	lsrs	r3, r3, #16
 8005572:	b29a      	uxth	r2, r3
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	b29b      	uxth	r3, r3
 8005578:	4313      	orrs	r3, r2
 800557a:	b29b      	uxth	r3, r3
}
 800557c:	4618      	mov	r0, r3
 800557e:	3714      	adds	r7, #20
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr
 8005588:	07e0f81f 	.word	0x07e0f81f

0800558c <LCD_GetPixel>:
*********************************************************************************************************
*	Func name: LCD_GetPixel
*********************************************************************************************************
*/
uint16_t LCD_GetPixel(uint16_t _usX, uint16_t _usY)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b084      	sub	sp, #16
 8005590:	af00      	add	r7, sp, #0
 8005592:	4603      	mov	r3, r0
 8005594:	460a      	mov	r2, r1
 8005596:	80fb      	strh	r3, [r7, #6]
 8005598:	4613      	mov	r3, r2
 800559a:	80bb      	strh	r3, [r7, #4]
	uint16_t usRGB;
	if (g_ChipID == IC_8875)
 800559c:	4b08      	ldr	r3, [pc, #32]	; (80055c0 <LCD_GetPixel+0x34>)
 800559e:	881b      	ldrh	r3, [r3, #0]
 80055a0:	2b75      	cmp	r3, #117	; 0x75
 80055a2:	d107      	bne.n	80055b4 <LCD_GetPixel+0x28>
	{
		usRGB = RA8875_GetPixel(_usX, _usY);
 80055a4:	88ba      	ldrh	r2, [r7, #4]
 80055a6:	88fb      	ldrh	r3, [r7, #6]
 80055a8:	4611      	mov	r1, r2
 80055aa:	4618      	mov	r0, r3
 80055ac:	f7fd fe88 	bl	80032c0 <RA8875_GetPixel>
 80055b0:	4603      	mov	r3, r0
 80055b2:	81fb      	strh	r3, [r7, #14]
	}
	else
	{
		//usRGB = SPFD5420_GetPixel(_usX, _usY);
	}
	return usRGB;
 80055b4:	89fb      	ldrh	r3, [r7, #14]
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	3710      	adds	r7, #16
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}
 80055be:	bf00      	nop
 80055c0:	20000008 	.word	0x20000008

080055c4 <LCD_GetHeight>:
*********************************************************************************************************
*	Func name: LCD_GetHeight
*********************************************************************************************************
*/
uint16_t LCD_GetHeight(void)
{
 80055c4:	b480      	push	{r7}
 80055c6:	af00      	add	r7, sp, #0
	return g_LcdHeight;
 80055c8:	4b03      	ldr	r3, [pc, #12]	; (80055d8 <LCD_GetHeight+0x14>)
 80055ca:	881b      	ldrh	r3, [r3, #0]
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	46bd      	mov	sp, r7
 80055d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d4:	4770      	bx	lr
 80055d6:	bf00      	nop
 80055d8:	2000000a 	.word	0x2000000a

080055dc <LCD_GetWidth>:
*********************************************************************************************************
*	Func name: LCD_GetWidth
*********************************************************************************************************
*/
uint16_t LCD_GetWidth(void)
{
 80055dc:	b480      	push	{r7}
 80055de:	af00      	add	r7, sp, #0
	return g_LcdWidth;
 80055e0:	4b03      	ldr	r3, [pc, #12]	; (80055f0 <LCD_GetWidth+0x14>)
 80055e2:	881b      	ldrh	r3, [r3, #0]
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	46bd      	mov	sp, r7
 80055e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ec:	4770      	bx	lr
 80055ee:	bf00      	nop
 80055f0:	2000000c 	.word	0x2000000c

080055f4 <LCD_DrawRect>:
*********************************************************************************************************
*	Func name: LCD_DrawRect
*********************************************************************************************************
*/
void LCD_DrawRect(uint16_t _usX, uint16_t _usY, uint16_t _usHeight, uint16_t _usWidth, uint16_t _usColor)
{
 80055f4:	b590      	push	{r4, r7, lr}
 80055f6:	b085      	sub	sp, #20
 80055f8:	af02      	add	r7, sp, #8
 80055fa:	4604      	mov	r4, r0
 80055fc:	4608      	mov	r0, r1
 80055fe:	4611      	mov	r1, r2
 8005600:	461a      	mov	r2, r3
 8005602:	4623      	mov	r3, r4
 8005604:	80fb      	strh	r3, [r7, #6]
 8005606:	4603      	mov	r3, r0
 8005608:	80bb      	strh	r3, [r7, #4]
 800560a:	460b      	mov	r3, r1
 800560c:	807b      	strh	r3, [r7, #2]
 800560e:	4613      	mov	r3, r2
 8005610:	803b      	strh	r3, [r7, #0]
	if (g_ChipID == IC_8875)
 8005612:	4b08      	ldr	r3, [pc, #32]	; (8005634 <LCD_DrawRect+0x40>)
 8005614:	881b      	ldrh	r3, [r3, #0]
 8005616:	2b75      	cmp	r3, #117	; 0x75
 8005618:	d108      	bne.n	800562c <LCD_DrawRect+0x38>
	{
		RA8875_DrawRect(_usX, _usY, _usHeight, _usWidth, _usColor);
 800561a:	883c      	ldrh	r4, [r7, #0]
 800561c:	887a      	ldrh	r2, [r7, #2]
 800561e:	88b9      	ldrh	r1, [r7, #4]
 8005620:	88f8      	ldrh	r0, [r7, #6]
 8005622:	8b3b      	ldrh	r3, [r7, #24]
 8005624:	9300      	str	r3, [sp, #0]
 8005626:	4623      	mov	r3, r4
 8005628:	f7fd febe 	bl	80033a8 <RA8875_DrawRect>
	}
	else
	{
		//SPFD5420_DrawRect(_usX, _usY, _usHeight, _usWidth, _usColor);
	}
}
 800562c:	bf00      	nop
 800562e:	370c      	adds	r7, #12
 8005630:	46bd      	mov	sp, r7
 8005632:	bd90      	pop	{r4, r7, pc}
 8005634:	20000008 	.word	0x20000008

08005638 <LCD_DrawCircle>:
*********************************************************************************************************
*	Func name: LCD_DrawCircle
*********************************************************************************************************
*/
void LCD_DrawCircle(uint16_t _usX, uint16_t _usY, uint16_t _usRadius, uint16_t _usColor)
{
 8005638:	b590      	push	{r4, r7, lr}
 800563a:	b083      	sub	sp, #12
 800563c:	af00      	add	r7, sp, #0
 800563e:	4604      	mov	r4, r0
 8005640:	4608      	mov	r0, r1
 8005642:	4611      	mov	r1, r2
 8005644:	461a      	mov	r2, r3
 8005646:	4623      	mov	r3, r4
 8005648:	80fb      	strh	r3, [r7, #6]
 800564a:	4603      	mov	r3, r0
 800564c:	80bb      	strh	r3, [r7, #4]
 800564e:	460b      	mov	r3, r1
 8005650:	807b      	strh	r3, [r7, #2]
 8005652:	4613      	mov	r3, r2
 8005654:	803b      	strh	r3, [r7, #0]
	if (g_ChipID == IC_8875)
 8005656:	4b07      	ldr	r3, [pc, #28]	; (8005674 <LCD_DrawCircle+0x3c>)
 8005658:	881b      	ldrh	r3, [r3, #0]
 800565a:	2b75      	cmp	r3, #117	; 0x75
 800565c:	d105      	bne.n	800566a <LCD_DrawCircle+0x32>
	{
		RA8875_DrawCircle(_usX, _usY, _usRadius, _usColor);
 800565e:	883b      	ldrh	r3, [r7, #0]
 8005660:	887a      	ldrh	r2, [r7, #2]
 8005662:	88b9      	ldrh	r1, [r7, #4]
 8005664:	88f8      	ldrh	r0, [r7, #6]
 8005666:	f7fd ff1d 	bl	80034a4 <RA8875_DrawCircle>
	}
	else
	{
		//SPFD5420_DrawCircle(_usX, _usY, _usRadius, _usColor);
	}
}
 800566a:	bf00      	nop
 800566c:	370c      	adds	r7, #12
 800566e:	46bd      	mov	sp, r7
 8005670:	bd90      	pop	{r4, r7, pc}
 8005672:	bf00      	nop
 8005674:	20000008 	.word	0x20000008

08005678 <LCD_GetChipDescribe>:
*********************************************************************************************************
*	Func name: LCD_GetChipDescribe
*********************************************************************************************************
*/
void LCD_GetChipDescribe(char *_str)
{
 8005678:	b480      	push	{r7}
 800567a:	b083      	sub	sp, #12
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
	switch (g_ChipID)
 8005680:	4b26      	ldr	r3, [pc, #152]	; (800571c <LCD_GetChipDescribe+0xa4>)
 8005682:	881b      	ldrh	r3, [r3, #0]
 8005684:	f24b 5209 	movw	r2, #46345	; 0xb509
 8005688:	4293      	cmp	r3, r2
 800568a:	d026      	beq.n	80056da <LCD_GetChipDescribe+0x62>
 800568c:	f24b 5209 	movw	r2, #46345	; 0xb509
 8005690:	4293      	cmp	r3, r2
 8005692:	dc33      	bgt.n	80056fc <LCD_GetChipDescribe+0x84>
 8005694:	f245 4220 	movw	r2, #21536	; 0x5420
 8005698:	4293      	cmp	r3, r2
 800569a:	d00a      	beq.n	80056b2 <LCD_GetChipDescribe+0x3a>
 800569c:	f245 4220 	movw	r2, #21536	; 0x5420
 80056a0:	4293      	cmp	r3, r2
 80056a2:	dc2b      	bgt.n	80056fc <LCD_GetChipDescribe+0x84>
 80056a4:	2b75      	cmp	r3, #117	; 0x75
 80056a6:	d020      	beq.n	80056ea <LCD_GetChipDescribe+0x72>
 80056a8:	f244 0201 	movw	r2, #16385	; 0x4001
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d00a      	beq.n	80056c6 <LCD_GetChipDescribe+0x4e>
 80056b0:	e024      	b.n	80056fc <LCD_GetChipDescribe+0x84>
	{
		case IC_5420:
			strcpy(_str, CHIP_STR_5420);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	491a      	ldr	r1, [pc, #104]	; (8005720 <LCD_GetChipDescribe+0xa8>)
 80056b6:	461a      	mov	r2, r3
 80056b8:	460b      	mov	r3, r1
 80056ba:	cb03      	ldmia	r3!, {r0, r1}
 80056bc:	6010      	str	r0, [r2, #0]
 80056be:	6051      	str	r1, [r2, #4]
 80056c0:	881b      	ldrh	r3, [r3, #0]
 80056c2:	8113      	strh	r3, [r2, #8]
		break;
 80056c4:	e023      	b.n	800570e <LCD_GetChipDescribe+0x96>

		case IC_4001:
			strcpy(_str, CHIP_STR_4001);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	4916      	ldr	r1, [pc, #88]	; (8005724 <LCD_GetChipDescribe+0xac>)
 80056ca:	461a      	mov	r2, r3
 80056cc:	460b      	mov	r3, r1
 80056ce:	cb03      	ldmia	r3!, {r0, r1}
 80056d0:	6010      	str	r0, [r2, #0]
 80056d2:	6051      	str	r1, [r2, #4]
 80056d4:	781b      	ldrb	r3, [r3, #0]
 80056d6:	7213      	strb	r3, [r2, #8]
		break;
 80056d8:	e019      	b.n	800570e <LCD_GetChipDescribe+0x96>

		case IC_61509:
			strcpy(_str, CHIP_STR_61509);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	4912      	ldr	r1, [pc, #72]	; (8005728 <LCD_GetChipDescribe+0xb0>)
 80056de:	461a      	mov	r2, r3
 80056e0:	460b      	mov	r3, r1
 80056e2:	cb03      	ldmia	r3!, {r0, r1}
 80056e4:	6010      	str	r0, [r2, #0]
 80056e6:	6051      	str	r1, [r2, #4]
		break;
 80056e8:	e011      	b.n	800570e <LCD_GetChipDescribe+0x96>

		case IC_8875:
			strcpy(_str, CHIP_STR_8875);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	4a0f      	ldr	r2, [pc, #60]	; (800572c <LCD_GetChipDescribe+0xb4>)
 80056ee:	6810      	ldr	r0, [r2, #0]
 80056f0:	6018      	str	r0, [r3, #0]
 80056f2:	8891      	ldrh	r1, [r2, #4]
 80056f4:	7992      	ldrb	r2, [r2, #6]
 80056f6:	8099      	strh	r1, [r3, #4]
 80056f8:	719a      	strb	r2, [r3, #6]
		break;
 80056fa:	e008      	b.n	800570e <LCD_GetChipDescribe+0x96>

		default:
			strcpy(_str, "Unknow");
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	4a0c      	ldr	r2, [pc, #48]	; (8005730 <LCD_GetChipDescribe+0xb8>)
 8005700:	6810      	ldr	r0, [r2, #0]
 8005702:	6018      	str	r0, [r3, #0]
 8005704:	8891      	ldrh	r1, [r2, #4]
 8005706:	7992      	ldrb	r2, [r2, #6]
 8005708:	8099      	strh	r1, [r3, #4]
 800570a:	719a      	strb	r2, [r3, #6]
		break;
 800570c:	bf00      	nop
	}
}
 800570e:	bf00      	nop
 8005710:	370c      	adds	r7, #12
 8005712:	46bd      	mov	sp, r7
 8005714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005718:	4770      	bx	lr
 800571a:	bf00      	nop
 800571c:	20000008 	.word	0x20000008
 8005720:	0800a960 	.word	0x0800a960
 8005724:	0800a96c 	.word	0x0800a96c
 8005728:	0800a978 	.word	0x0800a978
 800572c:	0800a980 	.word	0x0800a980
 8005730:	0800a988 	.word	0x0800a988

08005734 <LCD_Fill_Rect>:
*********************************************************************************************************
*	Func name: LCD_Fill_Rect
*********************************************************************************************************
*/
void LCD_Fill_Rect(uint16_t _usX, uint16_t _usY, uint16_t _usHeight, uint16_t _usWidth, uint16_t _usColor)
{
 8005734:	b590      	push	{r4, r7, lr}
 8005736:	b085      	sub	sp, #20
 8005738:	af02      	add	r7, sp, #8
 800573a:	4604      	mov	r4, r0
 800573c:	4608      	mov	r0, r1
 800573e:	4611      	mov	r1, r2
 8005740:	461a      	mov	r2, r3
 8005742:	4623      	mov	r3, r4
 8005744:	80fb      	strh	r3, [r7, #6]
 8005746:	4603      	mov	r3, r0
 8005748:	80bb      	strh	r3, [r7, #4]
 800574a:	460b      	mov	r3, r1
 800574c:	807b      	strh	r3, [r7, #2]
 800574e:	4613      	mov	r3, r2
 8005750:	803b      	strh	r3, [r7, #0]
	uint16_t i;

	if (g_ChipID == IC_8875)
 8005752:	4b08      	ldr	r3, [pc, #32]	; (8005774 <LCD_Fill_Rect+0x40>)
 8005754:	881b      	ldrh	r3, [r3, #0]
 8005756:	2b75      	cmp	r3, #117	; 0x75
 8005758:	d108      	bne.n	800576c <LCD_Fill_Rect+0x38>
	{
		RA8875_FillRect(_usX, _usY, _usHeight, _usWidth, _usColor);
 800575a:	883c      	ldrh	r4, [r7, #0]
 800575c:	887a      	ldrh	r2, [r7, #2]
 800575e:	88b9      	ldrh	r1, [r7, #4]
 8005760:	88f8      	ldrh	r0, [r7, #6]
 8005762:	8b3b      	ldrh	r3, [r7, #24]
 8005764:	9300      	str	r3, [sp, #0]
 8005766:	4623      	mov	r3, r4
 8005768:	f7fd ff5a 	bl	8003620 <RA8875_FillRect>
		//for (i = 0; i < _usHeight; i++)
		//{
			//SPFD5420_DrawHLine(_usX, _usY, _usX + _usWidth - 1, _usColor);
		//}
	}
}
 800576c:	bf00      	nop
 800576e:	370c      	adds	r7, #12
 8005770:	46bd      	mov	sp, r7
 8005772:	bd90      	pop	{r4, r7, pc}
 8005774:	20000008 	.word	0x20000008

08005778 <LCD_DrawButton>:
*********************************************************************************************************
* Func name: LCD_DrawEdit
*********************************************************************************************************
*/
void LCD_DrawButton(BUTTON_T *_pBtn)
{
 8005778:	b590      	push	{r4, r7, lr}
 800577a:	b087      	sub	sp, #28
 800577c:	af02      	add	r7, sp, #8
 800577e:	6078      	str	r0, [r7, #4]
#if 1
	uint16_t len, fwidth, x, y;

	if (_pBtn->Focus == 1)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	7d1b      	ldrb	r3, [r3, #20]
 8005784:	2b01      	cmp	r3, #1
 8005786:	d14b      	bne.n	8005820 <LCD_DrawButton+0xa8>
	{
		LCD_DrawRect(_pBtn->Left, _pBtn->Top, _pBtn->Height, _pBtn->Width, BUTTON_BORDER_COLOR);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	8858      	ldrh	r0, [r3, #2]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	8899      	ldrh	r1, [r3, #4]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	88da      	ldrh	r2, [r3, #6]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	891b      	ldrh	r3, [r3, #8]
 8005798:	2410      	movs	r4, #16
 800579a:	9400      	str	r4, [sp, #0]
 800579c:	f7ff ff2a 	bl	80055f4 <LCD_DrawRect>
		LCD_DrawRect(_pBtn->Left + 1, _pBtn->Top + 1, _pBtn->Height - 2, _pBtn->Width - 2, BUTTON_BORDER1_COLOR);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	885b      	ldrh	r3, [r3, #2]
 80057a4:	3301      	adds	r3, #1
 80057a6:	b298      	uxth	r0, r3
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	889b      	ldrh	r3, [r3, #4]
 80057ac:	3301      	adds	r3, #1
 80057ae:	b299      	uxth	r1, r3
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	88db      	ldrh	r3, [r3, #6]
 80057b4:	3b02      	subs	r3, #2
 80057b6:	b29a      	uxth	r2, r3
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	891b      	ldrh	r3, [r3, #8]
 80057bc:	3b02      	subs	r3, #2
 80057be:	b29b      	uxth	r3, r3
 80057c0:	f64f 74ff 	movw	r4, #65535	; 0xffff
 80057c4:	9400      	str	r4, [sp, #0]
 80057c6:	f7ff ff15 	bl	80055f4 <LCD_DrawRect>
		LCD_DrawRect(_pBtn->Left + 2, _pBtn->Top + 2, _pBtn->Height - 4, _pBtn->Width - 4, BUTTON_BORDER2_COLOR);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	885b      	ldrh	r3, [r3, #2]
 80057ce:	3302      	adds	r3, #2
 80057d0:	b298      	uxth	r0, r3
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	889b      	ldrh	r3, [r3, #4]
 80057d6:	3302      	adds	r3, #2
 80057d8:	b299      	uxth	r1, r3
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	88db      	ldrh	r3, [r3, #6]
 80057de:	3b04      	subs	r3, #4
 80057e0:	b29a      	uxth	r2, r3
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	891b      	ldrh	r3, [r3, #8]
 80057e6:	3b04      	subs	r3, #4
 80057e8:	b29b      	uxth	r3, r3
 80057ea:	f249 44b2 	movw	r4, #38066	; 0x94b2
 80057ee:	9400      	str	r4, [sp, #0]
 80057f0:	f7ff ff00 	bl	80055f4 <LCD_DrawRect>

		LCD_Fill_Rect(_pBtn->Left + 3, _pBtn->Top + 3, _pBtn->Height - 6, _pBtn->Width - 6, BUTTON_ACTIVE_COLOR);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	885b      	ldrh	r3, [r3, #2]
 80057f8:	3303      	adds	r3, #3
 80057fa:	b298      	uxth	r0, r3
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	889b      	ldrh	r3, [r3, #4]
 8005800:	3303      	adds	r3, #3
 8005802:	b299      	uxth	r1, r3
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	88db      	ldrh	r3, [r3, #6]
 8005808:	3b06      	subs	r3, #6
 800580a:	b29a      	uxth	r2, r3
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	891b      	ldrh	r3, [r3, #8]
 8005810:	3b06      	subs	r3, #6
 8005812:	b29b      	uxth	r3, r3
 8005814:	f647 74ff 	movw	r4, #32767	; 0x7fff
 8005818:	9400      	str	r4, [sp, #0]
 800581a:	f7ff ff8b 	bl	8005734 <LCD_Fill_Rect>
 800581e:	e04a      	b.n	80058b6 <LCD_DrawButton+0x13e>
	}
	else
	{
		LCD_DrawRect(_pBtn->Left, _pBtn->Top, _pBtn->Height, _pBtn->Width, BUTTON_BORDER_COLOR);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	8858      	ldrh	r0, [r3, #2]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	8899      	ldrh	r1, [r3, #4]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	88da      	ldrh	r2, [r3, #6]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	891b      	ldrh	r3, [r3, #8]
 8005830:	2410      	movs	r4, #16
 8005832:	9400      	str	r4, [sp, #0]
 8005834:	f7ff fede 	bl	80055f4 <LCD_DrawRect>
		LCD_DrawRect(_pBtn->Left + 1, _pBtn->Top + 1, _pBtn->Height - 2, _pBtn->Width - 2, BUTTON_BORDER1_COLOR);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	885b      	ldrh	r3, [r3, #2]
 800583c:	3301      	adds	r3, #1
 800583e:	b298      	uxth	r0, r3
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	889b      	ldrh	r3, [r3, #4]
 8005844:	3301      	adds	r3, #1
 8005846:	b299      	uxth	r1, r3
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	88db      	ldrh	r3, [r3, #6]
 800584c:	3b02      	subs	r3, #2
 800584e:	b29a      	uxth	r2, r3
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	891b      	ldrh	r3, [r3, #8]
 8005854:	3b02      	subs	r3, #2
 8005856:	b29b      	uxth	r3, r3
 8005858:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800585c:	9400      	str	r4, [sp, #0]
 800585e:	f7ff fec9 	bl	80055f4 <LCD_DrawRect>
		LCD_DrawRect(_pBtn->Left + 2, _pBtn->Top + 2, _pBtn->Height - 4, _pBtn->Width - 4, BUTTON_BORDER2_COLOR);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	885b      	ldrh	r3, [r3, #2]
 8005866:	3302      	adds	r3, #2
 8005868:	b298      	uxth	r0, r3
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	889b      	ldrh	r3, [r3, #4]
 800586e:	3302      	adds	r3, #2
 8005870:	b299      	uxth	r1, r3
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	88db      	ldrh	r3, [r3, #6]
 8005876:	3b04      	subs	r3, #4
 8005878:	b29a      	uxth	r2, r3
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	891b      	ldrh	r3, [r3, #8]
 800587e:	3b04      	subs	r3, #4
 8005880:	b29b      	uxth	r3, r3
 8005882:	f249 44b2 	movw	r4, #38066	; 0x94b2
 8005886:	9400      	str	r4, [sp, #0]
 8005888:	f7ff feb4 	bl	80055f4 <LCD_DrawRect>

		LCD_Fill_Rect(_pBtn->Left + 3, _pBtn->Top + 3, _pBtn->Height - 6, _pBtn->Width - 6, BUTTON_BACK_COLOR);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	885b      	ldrh	r3, [r3, #2]
 8005890:	3303      	adds	r3, #3
 8005892:	b298      	uxth	r0, r3
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	889b      	ldrh	r3, [r3, #4]
 8005898:	3303      	adds	r3, #3
 800589a:	b299      	uxth	r1, r3
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	88db      	ldrh	r3, [r3, #6]
 80058a0:	3b06      	subs	r3, #6
 80058a2:	b29a      	uxth	r2, r3
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	891b      	ldrh	r3, [r3, #8]
 80058a8:	3b06      	subs	r3, #6
 80058aa:	b29b      	uxth	r3, r3
 80058ac:	f64c 6459 	movw	r4, #52825	; 0xce59
 80058b0:	9400      	str	r4, [sp, #0]
 80058b2:	f7ff ff3f 	bl	8005734 <LCD_Fill_Rect>
	}

	len = strlen(_pBtn->pCaption);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	691b      	ldr	r3, [r3, #16]
 80058ba:	4618      	mov	r0, r3
 80058bc:	f7fa fcd8 	bl	8000270 <strlen>
 80058c0:	4603      	mov	r3, r0
 80058c2:	81bb      	strh	r3, [r7, #12]

	if (_pBtn->Font->FontCode == FC_ST_16)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	68db      	ldr	r3, [r3, #12]
 80058c8:	881b      	ldrh	r3, [r3, #0]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d102      	bne.n	80058d4 <LCD_DrawButton+0x15c>
	{
		fwidth = 8;
 80058ce:	2308      	movs	r3, #8
 80058d0:	81fb      	strh	r3, [r7, #14]
 80058d2:	e009      	b.n	80058e8 <LCD_DrawButton+0x170>
	}
	else if(_pBtn->Font->FontCode == FC_ST_12)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	68db      	ldr	r3, [r3, #12]
 80058d8:	881b      	ldrh	r3, [r3, #0]
 80058da:	2b01      	cmp	r3, #1
 80058dc:	d102      	bne.n	80058e4 <LCD_DrawButton+0x16c>
	{
		fwidth = 6;
 80058de:	2306      	movs	r3, #6
 80058e0:	81fb      	strh	r3, [r7, #14]
 80058e2:	e001      	b.n	80058e8 <LCD_DrawButton+0x170>
	}
	else
	{
		fwidth = 8;
 80058e4:	2308      	movs	r3, #8
 80058e6:	81fb      	strh	r3, [r7, #14]
	}
	x = _pBtn->Left + _pBtn->Width / 2 - (len * fwidth) / 2;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	885a      	ldrh	r2, [r3, #2]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	891b      	ldrh	r3, [r3, #8]
 80058f0:	085b      	lsrs	r3, r3, #1
 80058f2:	b29b      	uxth	r3, r3
 80058f4:	4413      	add	r3, r2
 80058f6:	b29a      	uxth	r2, r3
 80058f8:	89bb      	ldrh	r3, [r7, #12]
 80058fa:	89f9      	ldrh	r1, [r7, #14]
 80058fc:	fb01 f303 	mul.w	r3, r1, r3
 8005900:	0fd9      	lsrs	r1, r3, #31
 8005902:	440b      	add	r3, r1
 8005904:	105b      	asrs	r3, r3, #1
 8005906:	425b      	negs	r3, r3
 8005908:	b29b      	uxth	r3, r3
 800590a:	4413      	add	r3, r2
 800590c:	817b      	strh	r3, [r7, #10]
	y = _pBtn->Top + _pBtn->Height / 2 - fwidth;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	889a      	ldrh	r2, [r3, #4]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	88db      	ldrh	r3, [r3, #6]
 8005916:	085b      	lsrs	r3, r3, #1
 8005918:	b29b      	uxth	r3, r3
 800591a:	4413      	add	r3, r2
 800591c:	b29a      	uxth	r2, r3
 800591e:	89fb      	ldrh	r3, [r7, #14]
 8005920:	1ad3      	subs	r3, r2, r3
 8005922:	813b      	strh	r3, [r7, #8]

	LCD_DispStr(x, y, _pBtn->pCaption, _pBtn->Font);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	691a      	ldr	r2, [r3, #16]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	68db      	ldr	r3, [r3, #12]
 800592c:	8939      	ldrh	r1, [r7, #8]
 800592e:	8978      	ldrh	r0, [r7, #10]
 8005930:	f7ff fb5c 	bl	8004fec <LCD_DispStr>
#endif
}
 8005934:	bf00      	nop
 8005936:	3714      	adds	r7, #20
 8005938:	46bd      	mov	sp, r7
 800593a:	bd90      	pop	{r4, r7, pc}

0800593c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800593c:	b480      	push	{r7}
 800593e:	b083      	sub	sp, #12
 8005940:	af00      	add	r7, sp, #0
 8005942:	4603      	mov	r3, r0
 8005944:	6039      	str	r1, [r7, #0]
 8005946:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005948:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800594c:	2b00      	cmp	r3, #0
 800594e:	db0a      	blt.n	8005966 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	b2da      	uxtb	r2, r3
 8005954:	490c      	ldr	r1, [pc, #48]	; (8005988 <__NVIC_SetPriority+0x4c>)
 8005956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800595a:	0112      	lsls	r2, r2, #4
 800595c:	b2d2      	uxtb	r2, r2
 800595e:	440b      	add	r3, r1
 8005960:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005964:	e00a      	b.n	800597c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	b2da      	uxtb	r2, r3
 800596a:	4908      	ldr	r1, [pc, #32]	; (800598c <__NVIC_SetPriority+0x50>)
 800596c:	79fb      	ldrb	r3, [r7, #7]
 800596e:	f003 030f 	and.w	r3, r3, #15
 8005972:	3b04      	subs	r3, #4
 8005974:	0112      	lsls	r2, r2, #4
 8005976:	b2d2      	uxtb	r2, r2
 8005978:	440b      	add	r3, r1
 800597a:	761a      	strb	r2, [r3, #24]
}
 800597c:	bf00      	nop
 800597e:	370c      	adds	r7, #12
 8005980:	46bd      	mov	sp, r7
 8005982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005986:	4770      	bx	lr
 8005988:	e000e100 	.word	0xe000e100
 800598c:	e000ed00 	.word	0xe000ed00

08005990 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b082      	sub	sp, #8
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	3b01      	subs	r3, #1
 800599c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80059a0:	d301      	bcc.n	80059a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80059a2:	2301      	movs	r3, #1
 80059a4:	e00f      	b.n	80059c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80059a6:	4a0a      	ldr	r2, [pc, #40]	; (80059d0 <SysTick_Config+0x40>)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	3b01      	subs	r3, #1
 80059ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80059ae:	210f      	movs	r1, #15
 80059b0:	f04f 30ff 	mov.w	r0, #4294967295
 80059b4:	f7ff ffc2 	bl	800593c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80059b8:	4b05      	ldr	r3, [pc, #20]	; (80059d0 <SysTick_Config+0x40>)
 80059ba:	2200      	movs	r2, #0
 80059bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80059be:	4b04      	ldr	r3, [pc, #16]	; (80059d0 <SysTick_Config+0x40>)
 80059c0:	2207      	movs	r2, #7
 80059c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80059c4:	2300      	movs	r3, #0
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	3708      	adds	r7, #8
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}
 80059ce:	bf00      	nop
 80059d0:	e000e010 	.word	0xe000e010

080059d4 <bsp_InitTimer>:
*	ÐÎ    ²Î:  ÎÞ
*	·µ »Ø Öµ: ÎÞ
*********************************************************************************************************
*/
void bsp_InitTimer(void)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b082      	sub	sp, #8
 80059d8:	af00      	add	r7, sp, #0
	uint8_t i;

	/* ÇåÁãËùÓÐµÄÈí¼þ¶¨Ê±Æ÷ */
	for (i = 0; i < TMR_COUNT; i++)
 80059da:	2300      	movs	r3, #0
 80059dc:	71fb      	strb	r3, [r7, #7]
 80059de:	e029      	b.n	8005a34 <bsp_InitTimer+0x60>
	{
		s_tTmr[i].Count = 0;
 80059e0:	79fa      	ldrb	r2, [r7, #7]
 80059e2:	491c      	ldr	r1, [pc, #112]	; (8005a54 <bsp_InitTimer+0x80>)
 80059e4:	4613      	mov	r3, r2
 80059e6:	005b      	lsls	r3, r3, #1
 80059e8:	4413      	add	r3, r2
 80059ea:	009b      	lsls	r3, r3, #2
 80059ec:	440b      	add	r3, r1
 80059ee:	3304      	adds	r3, #4
 80059f0:	2200      	movs	r2, #0
 80059f2:	601a      	str	r2, [r3, #0]
		s_tTmr[i].PreLoad = 0;
 80059f4:	79fa      	ldrb	r2, [r7, #7]
 80059f6:	4917      	ldr	r1, [pc, #92]	; (8005a54 <bsp_InitTimer+0x80>)
 80059f8:	4613      	mov	r3, r2
 80059fa:	005b      	lsls	r3, r3, #1
 80059fc:	4413      	add	r3, r2
 80059fe:	009b      	lsls	r3, r3, #2
 8005a00:	440b      	add	r3, r1
 8005a02:	3308      	adds	r3, #8
 8005a04:	2200      	movs	r2, #0
 8005a06:	601a      	str	r2, [r3, #0]
		s_tTmr[i].Flag = 0;
 8005a08:	79fa      	ldrb	r2, [r7, #7]
 8005a0a:	4912      	ldr	r1, [pc, #72]	; (8005a54 <bsp_InitTimer+0x80>)
 8005a0c:	4613      	mov	r3, r2
 8005a0e:	005b      	lsls	r3, r3, #1
 8005a10:	4413      	add	r3, r2
 8005a12:	009b      	lsls	r3, r3, #2
 8005a14:	440b      	add	r3, r1
 8005a16:	3301      	adds	r3, #1
 8005a18:	2200      	movs	r2, #0
 8005a1a:	701a      	strb	r2, [r3, #0]
		s_tTmr[i].Mode = TMR_ONCE_MODE;	/* È±Ê¡ÊÇ1´ÎÐÔ¹¤×÷Ä£Ê½ */
 8005a1c:	79fa      	ldrb	r2, [r7, #7]
 8005a1e:	490d      	ldr	r1, [pc, #52]	; (8005a54 <bsp_InitTimer+0x80>)
 8005a20:	4613      	mov	r3, r2
 8005a22:	005b      	lsls	r3, r3, #1
 8005a24:	4413      	add	r3, r2
 8005a26:	009b      	lsls	r3, r3, #2
 8005a28:	440b      	add	r3, r1
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TMR_COUNT; i++)
 8005a2e:	79fb      	ldrb	r3, [r7, #7]
 8005a30:	3301      	adds	r3, #1
 8005a32:	71fb      	strb	r3, [r7, #7]
 8005a34:	79fb      	ldrb	r3, [r7, #7]
 8005a36:	2b03      	cmp	r3, #3
 8005a38:	d9d2      	bls.n	80059e0 <bsp_InitTimer+0xc>
	    	-- SystemCoreClock / 500   ±íÊ¾¶¨Ê±ÆµÂÊÎª 500Hz£¬  Ò²¾ÍÊÇ¶¨Ê±ÖÜÆÚÎª  2ms
	    	-- SystemCoreClock / 2000  ±íÊ¾¶¨Ê±ÆµÂÊÎª 2000Hz£¬ Ò²¾ÍÊÇ¶¨Ê±ÖÜÆÚÎª  500us

    	¶ÔÓÚ³£¹æµÄÓ¦ÓÃ£¬ÎÒÃÇÒ»°ãÈ¡¶¨Ê±ÖÜÆÚ1ms¡£¶ÔÓÚµÍËÙCPU»òÕßµÍ¹¦ºÄÓ¦ÓÃ£¬¿ÉÒÔÉèÖÃ¶¨Ê±ÖÜÆÚÎª 10ms
    */
	SysTick_Config(SystemCoreClock / 1000);
 8005a3a:	4b07      	ldr	r3, [pc, #28]	; (8005a58 <bsp_InitTimer+0x84>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a07      	ldr	r2, [pc, #28]	; (8005a5c <bsp_InitTimer+0x88>)
 8005a40:	fba2 2303 	umull	r2, r3, r2, r3
 8005a44:	099b      	lsrs	r3, r3, #6
 8005a46:	4618      	mov	r0, r3
 8005a48:	f7ff ffa2 	bl	8005990 <SysTick_Config>
}
 8005a4c:	bf00      	nop
 8005a4e:	3708      	adds	r7, #8
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}
 8005a54:	20000378 	.word	0x20000378
 8005a58:	20000000 	.word	0x20000000
 8005a5c:	10624dd3 	.word	0x10624dd3

08005a60 <SysTick_ISR>:
*********************************************************************************************************
*/
extern void bsp_RunPer1ms(void);
extern void bsp_RunPer10ms(void);
void SysTick_ISR(void)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b082      	sub	sp, #8
 8005a64:	af00      	add	r7, sp, #0
	static uint8_t s_count = 0;
	uint8_t i;

	/* Ã¿¸ô1ms½øÀ´1´Î £¨½öÓÃÓÚ bsp_DelayMS£© */
	if (s_uiDelayCount > 0)
 8005a66:	4b21      	ldr	r3, [pc, #132]	; (8005aec <SysTick_ISR+0x8c>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d009      	beq.n	8005a82 <SysTick_ISR+0x22>
	{
		if (--s_uiDelayCount == 0)
 8005a6e:	4b1f      	ldr	r3, [pc, #124]	; (8005aec <SysTick_ISR+0x8c>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	3b01      	subs	r3, #1
 8005a74:	4a1d      	ldr	r2, [pc, #116]	; (8005aec <SysTick_ISR+0x8c>)
 8005a76:	6013      	str	r3, [r2, #0]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d102      	bne.n	8005a82 <SysTick_ISR+0x22>
		{
			s_ucTimeOutFlag = 1;
 8005a7c:	4b1c      	ldr	r3, [pc, #112]	; (8005af0 <SysTick_ISR+0x90>)
 8005a7e:	2201      	movs	r2, #1
 8005a80:	701a      	strb	r2, [r3, #0]
		}
	}

	/* Ã¿¸ô1ms£¬¶ÔÈí¼þ¶¨Ê±Æ÷µÄ¼ÆÊýÆ÷½øÐÐ¼õÒ»²Ù×÷ */
	for (i = 0; i < TMR_COUNT; i++)
 8005a82:	2300      	movs	r3, #0
 8005a84:	71fb      	strb	r3, [r7, #7]
 8005a86:	e00c      	b.n	8005aa2 <SysTick_ISR+0x42>
	{
		bsp_SoftTimerDec(&s_tTmr[i]);
 8005a88:	79fa      	ldrb	r2, [r7, #7]
 8005a8a:	4613      	mov	r3, r2
 8005a8c:	005b      	lsls	r3, r3, #1
 8005a8e:	4413      	add	r3, r2
 8005a90:	009b      	lsls	r3, r3, #2
 8005a92:	4a18      	ldr	r2, [pc, #96]	; (8005af4 <SysTick_ISR+0x94>)
 8005a94:	4413      	add	r3, r2
 8005a96:	4618      	mov	r0, r3
 8005a98:	f000 f832 	bl	8005b00 <bsp_SoftTimerDec>
	for (i = 0; i < TMR_COUNT; i++)
 8005a9c:	79fb      	ldrb	r3, [r7, #7]
 8005a9e:	3301      	adds	r3, #1
 8005aa0:	71fb      	strb	r3, [r7, #7]
 8005aa2:	79fb      	ldrb	r3, [r7, #7]
 8005aa4:	2b03      	cmp	r3, #3
 8005aa6:	d9ef      	bls.n	8005a88 <SysTick_ISR+0x28>
	}

	/* È«¾ÖÔËÐÐÊ±¼äÃ¿1msÔö1 */
	g_iRunTime++;
 8005aa8:	4b13      	ldr	r3, [pc, #76]	; (8005af8 <SysTick_ISR+0x98>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	3301      	adds	r3, #1
 8005aae:	4a12      	ldr	r2, [pc, #72]	; (8005af8 <SysTick_ISR+0x98>)
 8005ab0:	6013      	str	r3, [r2, #0]
	if (g_iRunTime == 0x7FFFFFFF)	/* Õâ¸ö±äÁ¿ÊÇ int32_t ÀàÐÍ£¬×î´óÊýÎª 0x7FFFFFFF */
 8005ab2:	4b11      	ldr	r3, [pc, #68]	; (8005af8 <SysTick_ISR+0x98>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d102      	bne.n	8005ac4 <SysTick_ISR+0x64>
	{
		g_iRunTime = 0;
 8005abe:	4b0e      	ldr	r3, [pc, #56]	; (8005af8 <SysTick_ISR+0x98>)
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	601a      	str	r2, [r3, #0]
	}

	bsp_RunPer1ms();		/* Ã¿¸ô1msµ÷ÓÃÒ»´Î´Ëº¯Êý£¬´Ëº¯ÊýÔÚ bsp.c */
 8005ac4:	f001 f842 	bl	8006b4c <bsp_RunPer1ms>

	if (++s_count >= 10)
 8005ac8:	4b0c      	ldr	r3, [pc, #48]	; (8005afc <SysTick_ISR+0x9c>)
 8005aca:	781b      	ldrb	r3, [r3, #0]
 8005acc:	3301      	adds	r3, #1
 8005ace:	b2da      	uxtb	r2, r3
 8005ad0:	4b0a      	ldr	r3, [pc, #40]	; (8005afc <SysTick_ISR+0x9c>)
 8005ad2:	701a      	strb	r2, [r3, #0]
 8005ad4:	4b09      	ldr	r3, [pc, #36]	; (8005afc <SysTick_ISR+0x9c>)
 8005ad6:	781b      	ldrb	r3, [r3, #0]
 8005ad8:	2b09      	cmp	r3, #9
 8005ada:	d902      	bls.n	8005ae2 <SysTick_ISR+0x82>
	{
		s_count = 0;
 8005adc:	4b07      	ldr	r3, [pc, #28]	; (8005afc <SysTick_ISR+0x9c>)
 8005ade:	2200      	movs	r2, #0
 8005ae0:	701a      	strb	r2, [r3, #0]

		//bsp_RunPer10ms();	/* Ã¿¸ô10msµ÷ÓÃÒ»´Î´Ëº¯Êý£¬´Ëº¯ÊýÔÚ bsp.c */
	}
}
 8005ae2:	bf00      	nop
 8005ae4:	3708      	adds	r7, #8
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}
 8005aea:	bf00      	nop
 8005aec:	20000370 	.word	0x20000370
 8005af0:	20000374 	.word	0x20000374
 8005af4:	20000378 	.word	0x20000378
 8005af8:	200003a8 	.word	0x200003a8
 8005afc:	200003ac 	.word	0x200003ac

08005b00 <bsp_SoftTimerDec>:
*	ÐÎ    ²Î:  _tmr : ¶¨Ê±Æ÷±äÁ¿Ö¸Õë
*	·µ »Ø Öµ: ÎÞ
*********************************************************************************************************
*/
static void bsp_SoftTimerDec(SOFT_TMR *_tmr)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b083      	sub	sp, #12
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
	if (_tmr->Count > 0)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	685b      	ldr	r3, [r3, #4]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d012      	beq.n	8005b36 <bsp_SoftTimerDec+0x36>
	{
		/* Èç¹û¶¨Ê±Æ÷±äÁ¿¼õµ½1ÔòÉèÖÃ¶¨Ê±Æ÷µ½´ï±êÖ¾ */
		if (--_tmr->Count == 0)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	3b01      	subs	r3, #1
 8005b16:	687a      	ldr	r2, [r7, #4]
 8005b18:	6053      	str	r3, [r2, #4]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d10b      	bne.n	8005b36 <bsp_SoftTimerDec+0x36>
		{
			_tmr->Flag = 1;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2201      	movs	r2, #1
 8005b22:	705a      	strb	r2, [r3, #1]

			/* Èç¹ûÊÇ×Ô¶¯Ä£Ê½£¬Ôò×Ô¶¯ÖØ×°¼ÆÊýÆ÷ */
			if(_tmr->Mode == TMR_AUTO_MODE)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	781b      	ldrb	r3, [r3, #0]
 8005b28:	b2db      	uxtb	r3, r3
 8005b2a:	2b01      	cmp	r3, #1
 8005b2c:	d103      	bne.n	8005b36 <bsp_SoftTimerDec+0x36>
			{
				_tmr->Count = _tmr->PreLoad;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	689a      	ldr	r2, [r3, #8]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	605a      	str	r2, [r3, #4]
			}
		}
	}
}
 8005b36:	bf00      	nop
 8005b38:	370c      	adds	r7, #12
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b40:	4770      	bx	lr
	...

08005b44 <bsp_DelayMS>:
*	ÐÎ    ²Î:  n : ÑÓ³Ù³¤¶È£¬µ¥Î»1 ms¡£ n Ó¦´óÓÚ2
*	·µ »Ø Öµ: ÎÞ
*********************************************************************************************************
*/
void bsp_DelayMS(uint32_t n)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b085      	sub	sp, #20
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
	if (n == 0)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d01c      	beq.n	8005b8c <bsp_DelayMS+0x48>
	{
		return;
	}
	else if (n == 1)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2b01      	cmp	r3, #1
 8005b56:	d101      	bne.n	8005b5c <bsp_DelayMS+0x18>
	{
		n = 2;
 8005b58:	2302      	movs	r3, #2
 8005b5a:	607b      	str	r3, [r7, #4]
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	f383 8810 	msr	PRIMASK, r3
}
 8005b66:	bf00      	nop
	}

	DISABLE_INT();  			/* ¹ØÖÐ¶Ï */

	s_uiDelayCount = n;
 8005b68:	4a0c      	ldr	r2, [pc, #48]	; (8005b9c <bsp_DelayMS+0x58>)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6013      	str	r3, [r2, #0]
	s_ucTimeOutFlag = 0;
 8005b6e:	4b0c      	ldr	r3, [pc, #48]	; (8005ba0 <bsp_DelayMS+0x5c>)
 8005b70:	2200      	movs	r2, #0
 8005b72:	701a      	strb	r2, [r3, #0]
 8005b74:	2300      	movs	r3, #0
 8005b76:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	f383 8810 	msr	PRIMASK, r3
}
 8005b7e:	bf00      	nop

		/*
			µÈ´ýÑÓ³ÙÊ±¼äµ½
			×¢Òâ£º±àÒëÆ÷ÈÏÎª s_ucTimeOutFlag = 0£¬ËùÒÔ¿ÉÄÜÓÅ»¯´íÎó£¬Òò´Ë s_ucTimeOutFlag ±äÁ¿±ØÐëÉêÃ÷Îª volatile
		*/
		if (s_ucTimeOutFlag == 1)
 8005b80:	4b07      	ldr	r3, [pc, #28]	; (8005ba0 <bsp_DelayMS+0x5c>)
 8005b82:	781b      	ldrb	r3, [r3, #0]
 8005b84:	b2db      	uxtb	r3, r3
 8005b86:	2b01      	cmp	r3, #1
 8005b88:	d002      	beq.n	8005b90 <bsp_DelayMS+0x4c>
 8005b8a:	e7f9      	b.n	8005b80 <bsp_DelayMS+0x3c>
		return;
 8005b8c:	bf00      	nop
 8005b8e:	e000      	b.n	8005b92 <bsp_DelayMS+0x4e>
		{
			break;
 8005b90:	bf00      	nop
		}
	}
}
 8005b92:	3714      	adds	r7, #20
 8005b94:	46bd      	mov	sp, r7
 8005b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9a:	4770      	bx	lr
 8005b9c:	20000370 	.word	0x20000370
 8005ba0:	20000374 	.word	0x20000374

08005ba4 <TOUCH_InitHard>:
*	ÐÎ    ²Î:  ÎÞ
*	·µ »Ø Öµ: ÎÞ
*********************************************************************************************************
*/
void TOUCH_InitHard(void)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	af00      	add	r7, sp, #0
	g_tTP.Enable = 0;
 8005ba8:	4b0e      	ldr	r3, [pc, #56]	; (8005be4 <TOUCH_InitHard+0x40>)
 8005baa:	2200      	movs	r2, #0
 8005bac:	761a      	strb	r2, [r3, #24]
	if (g_ChipID == IC_8875)
 8005bae:	4b0e      	ldr	r3, [pc, #56]	; (8005be8 <TOUCH_InitHard+0x44>)
 8005bb0:	881b      	ldrh	r3, [r3, #0]
 8005bb2:	2b75      	cmp	r3, #117	; 0x75
 8005bb4:	d105      	bne.n	8005bc2 <TOUCH_InitHard+0x1e>
	{
		RA8875_TouchInit();
 8005bb6:	f7fd fbe7 	bl	8003388 <RA8875_TouchInit>
		g_tTP.usMaxAdc = 1023;	/* 10Î»ADC */
 8005bba:	4b0a      	ldr	r3, [pc, #40]	; (8005be4 <TOUCH_InitHard+0x40>)
 8005bbc:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8005bc0:	825a      	strh	r2, [r3, #18]
	else
	{
		//TSC2046_InitHard();
		//g_tTP.usMaxAdc = 4095;	/* 12Î»ADC */
	}
	TOUCH_LoadParam();
 8005bc2:	f000 f813 	bl	8005bec <TOUCH_LoadParam>
	g_tTP.Write = g_tTP.Read = 0;
 8005bc6:	4b07      	ldr	r3, [pc, #28]	; (8005be4 <TOUCH_InitHard+0x40>)
 8005bc8:	2200      	movs	r2, #0
 8005bca:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 8005bce:	4b05      	ldr	r3, [pc, #20]	; (8005be4 <TOUCH_InitHard+0x40>)
 8005bd0:	f893 207e 	ldrb.w	r2, [r3, #126]	; 0x7e
 8005bd4:	4b03      	ldr	r3, [pc, #12]	; (8005be4 <TOUCH_InitHard+0x40>)
 8005bd6:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
	g_tTP.Enable = 1;
 8005bda:	4b02      	ldr	r3, [pc, #8]	; (8005be4 <TOUCH_InitHard+0x40>)
 8005bdc:	2201      	movs	r2, #1
 8005bde:	761a      	strb	r2, [r3, #24]
}
 8005be0:	bf00      	nop
 8005be2:	bd80      	pop	{r7, pc}
 8005be4:	200003b0 	.word	0x200003b0
 8005be8:	20000008 	.word	0x20000008

08005bec <TOUCH_LoadParam>:
*	Func name: TOUCH_LoadParam
*********************************************************************************************************
*/
extern void LoadParam(void);
static void TOUCH_LoadParam(void)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	af00      	add	r7, sp, #0
#if 1
	LoadParam();	/* ´ÓFlashÖÐ¶ÁÈ¡²ÎÊý */
 8005bf0:	f7fb fe46 	bl	8001880 <LoadParam>

	g_tTP.usAdcX1 = g_tParam.usAdcX1;
 8005bf4:	4b12      	ldr	r3, [pc, #72]	; (8005c40 <TOUCH_LoadParam+0x54>)
 8005bf6:	88da      	ldrh	r2, [r3, #6]
 8005bf8:	4b12      	ldr	r3, [pc, #72]	; (8005c44 <TOUCH_LoadParam+0x58>)
 8005bfa:	801a      	strh	r2, [r3, #0]
	g_tTP.usAdcY1 = g_tParam.usAdcY1;
 8005bfc:	4b10      	ldr	r3, [pc, #64]	; (8005c40 <TOUCH_LoadParam+0x54>)
 8005bfe:	891a      	ldrh	r2, [r3, #8]
 8005c00:	4b10      	ldr	r3, [pc, #64]	; (8005c44 <TOUCH_LoadParam+0x58>)
 8005c02:	805a      	strh	r2, [r3, #2]
	g_tTP.usAdcX2 = g_tParam.usAdcX2;
 8005c04:	4b0e      	ldr	r3, [pc, #56]	; (8005c40 <TOUCH_LoadParam+0x54>)
 8005c06:	895a      	ldrh	r2, [r3, #10]
 8005c08:	4b0e      	ldr	r3, [pc, #56]	; (8005c44 <TOUCH_LoadParam+0x58>)
 8005c0a:	809a      	strh	r2, [r3, #4]
	g_tTP.usAdcY2 = g_tParam.usAdcY2;
 8005c0c:	4b0c      	ldr	r3, [pc, #48]	; (8005c40 <TOUCH_LoadParam+0x54>)
 8005c0e:	899a      	ldrh	r2, [r3, #12]
 8005c10:	4b0c      	ldr	r3, [pc, #48]	; (8005c44 <TOUCH_LoadParam+0x58>)
 8005c12:	80da      	strh	r2, [r3, #6]
	g_tTP.usAdcX3 = g_tParam.usAdcX3;
 8005c14:	4b0a      	ldr	r3, [pc, #40]	; (8005c40 <TOUCH_LoadParam+0x54>)
 8005c16:	89da      	ldrh	r2, [r3, #14]
 8005c18:	4b0a      	ldr	r3, [pc, #40]	; (8005c44 <TOUCH_LoadParam+0x58>)
 8005c1a:	811a      	strh	r2, [r3, #8]
	g_tTP.usAdcY3 = g_tParam.usAdcY3;
 8005c1c:	4b08      	ldr	r3, [pc, #32]	; (8005c40 <TOUCH_LoadParam+0x54>)
 8005c1e:	8a1a      	ldrh	r2, [r3, #16]
 8005c20:	4b08      	ldr	r3, [pc, #32]	; (8005c44 <TOUCH_LoadParam+0x58>)
 8005c22:	815a      	strh	r2, [r3, #10]
	g_tTP.usAdcX4 = g_tParam.usAdcX4;
 8005c24:	4b06      	ldr	r3, [pc, #24]	; (8005c40 <TOUCH_LoadParam+0x54>)
 8005c26:	8a5a      	ldrh	r2, [r3, #18]
 8005c28:	4b06      	ldr	r3, [pc, #24]	; (8005c44 <TOUCH_LoadParam+0x58>)
 8005c2a:	819a      	strh	r2, [r3, #12]
	g_tTP.usAdcY4 = g_tParam.usAdcY4;
 8005c2c:	4b04      	ldr	r3, [pc, #16]	; (8005c40 <TOUCH_LoadParam+0x54>)
 8005c2e:	8a9a      	ldrh	r2, [r3, #20]
 8005c30:	4b04      	ldr	r3, [pc, #16]	; (8005c44 <TOUCH_LoadParam+0x58>)
 8005c32:	81da      	strh	r2, [r3, #14]
	g_tTP.XYChange = g_tParam.XYChange;
 8005c34:	4b02      	ldr	r3, [pc, #8]	; (8005c40 <TOUCH_LoadParam+0x54>)
 8005c36:	8ada      	ldrh	r2, [r3, #22]
 8005c38:	4b02      	ldr	r3, [pc, #8]	; (8005c44 <TOUCH_LoadParam+0x58>)
 8005c3a:	821a      	strh	r2, [r3, #16]

#endif
}
 8005c3c:	bf00      	nop
 8005c3e:	bd80      	pop	{r7, pc}
 8005c40:	20000200 	.word	0x20000200
 8005c44:	200003b0 	.word	0x200003b0

08005c48 <TOUCH_GetKey>:
*********************************************************************************************************
*	Func name: TOUCH_GetKey
*********************************************************************************************************
*/
uint8_t TOUCH_GetKey(int16_t *_pX, int16_t *_pY)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b085      	sub	sp, #20
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
 8005c50:	6039      	str	r1, [r7, #0]
	uint8_t ret;

	if (g_tTP.Read == g_tTP.Write)
 8005c52:	4b20      	ldr	r3, [pc, #128]	; (8005cd4 <TOUCH_GetKey+0x8c>)
 8005c54:	f893 207e 	ldrb.w	r2, [r3, #126]	; 0x7e
 8005c58:	4b1e      	ldr	r3, [pc, #120]	; (8005cd4 <TOUCH_GetKey+0x8c>)
 8005c5a:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8005c5e:	429a      	cmp	r2, r3
 8005c60:	d101      	bne.n	8005c66 <TOUCH_GetKey+0x1e>
	{
		return TOUCH_NONE;
 8005c62:	2300      	movs	r3, #0
 8005c64:	e02f      	b.n	8005cc6 <TOUCH_GetKey+0x7e>
	}
	else
	{
		ret = g_tTP.Event[g_tTP.Read];
 8005c66:	4b1b      	ldr	r3, [pc, #108]	; (8005cd4 <TOUCH_GetKey+0x8c>)
 8005c68:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8005c6c:	461a      	mov	r2, r3
 8005c6e:	4b19      	ldr	r3, [pc, #100]	; (8005cd4 <TOUCH_GetKey+0x8c>)
 8005c70:	4413      	add	r3, r2
 8005c72:	7e5b      	ldrb	r3, [r3, #25]
 8005c74:	73fb      	strb	r3, [r7, #15]
		*_pX = g_tTP.XBuf[g_tTP.Read];
 8005c76:	4b17      	ldr	r3, [pc, #92]	; (8005cd4 <TOUCH_GetKey+0x8c>)
 8005c78:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8005c7c:	4a15      	ldr	r2, [pc, #84]	; (8005cd4 <TOUCH_GetKey+0x8c>)
 8005c7e:	3314      	adds	r3, #20
 8005c80:	005b      	lsls	r3, r3, #1
 8005c82:	4413      	add	r3, r2
 8005c84:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	801a      	strh	r2, [r3, #0]
		*_pY = g_tTP.YBuf[g_tTP.Read];
 8005c8c:	4b11      	ldr	r3, [pc, #68]	; (8005cd4 <TOUCH_GetKey+0x8c>)
 8005c8e:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8005c92:	4a10      	ldr	r2, [pc, #64]	; (8005cd4 <TOUCH_GetKey+0x8c>)
 8005c94:	3328      	adds	r3, #40	; 0x28
 8005c96:	005b      	lsls	r3, r3, #1
 8005c98:	4413      	add	r3, r2
 8005c9a:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	801a      	strh	r2, [r3, #0]

		if (++g_tTP.Read >= TOUCH_FIFO_SIZE)
 8005ca2:	4b0c      	ldr	r3, [pc, #48]	; (8005cd4 <TOUCH_GetKey+0x8c>)
 8005ca4:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8005ca8:	3301      	adds	r3, #1
 8005caa:	b2da      	uxtb	r2, r3
 8005cac:	4b09      	ldr	r3, [pc, #36]	; (8005cd4 <TOUCH_GetKey+0x8c>)
 8005cae:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 8005cb2:	4b08      	ldr	r3, [pc, #32]	; (8005cd4 <TOUCH_GetKey+0x8c>)
 8005cb4:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8005cb8:	2b13      	cmp	r3, #19
 8005cba:	d903      	bls.n	8005cc4 <TOUCH_GetKey+0x7c>
		{
			g_tTP.Read = 0;
 8005cbc:	4b05      	ldr	r3, [pc, #20]	; (8005cd4 <TOUCH_GetKey+0x8c>)
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
		}
		return ret;
 8005cc4:	7bfb      	ldrb	r3, [r7, #15]
	}
}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	3714      	adds	r7, #20
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd0:	4770      	bx	lr
 8005cd2:	bf00      	nop
 8005cd4:	200003b0 	.word	0x200003b0

08005cd8 <TOUCH_InRect>:
*	Func name: TOUCH_InRect
*********************************************************************************************************
*/
uint8_t TOUCH_InRect(uint16_t _usX, uint16_t _usY,
	uint16_t _usRectX, uint16_t _usRectY, uint16_t _usRectH, uint16_t _usRectW)
{
 8005cd8:	b490      	push	{r4, r7}
 8005cda:	b082      	sub	sp, #8
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	4604      	mov	r4, r0
 8005ce0:	4608      	mov	r0, r1
 8005ce2:	4611      	mov	r1, r2
 8005ce4:	461a      	mov	r2, r3
 8005ce6:	4623      	mov	r3, r4
 8005ce8:	80fb      	strh	r3, [r7, #6]
 8005cea:	4603      	mov	r3, r0
 8005cec:	80bb      	strh	r3, [r7, #4]
 8005cee:	460b      	mov	r3, r1
 8005cf0:	807b      	strh	r3, [r7, #2]
 8005cf2:	4613      	mov	r3, r2
 8005cf4:	803b      	strh	r3, [r7, #0]
	if ((_usX > _usRectX) && (_usX < _usRectX + _usRectW)
 8005cf6:	88fa      	ldrh	r2, [r7, #6]
 8005cf8:	887b      	ldrh	r3, [r7, #2]
 8005cfa:	429a      	cmp	r2, r3
 8005cfc:	d911      	bls.n	8005d22 <TOUCH_InRect+0x4a>
 8005cfe:	88fa      	ldrh	r2, [r7, #6]
 8005d00:	8879      	ldrh	r1, [r7, #2]
 8005d02:	8abb      	ldrh	r3, [r7, #20]
 8005d04:	440b      	add	r3, r1
 8005d06:	429a      	cmp	r2, r3
 8005d08:	da0b      	bge.n	8005d22 <TOUCH_InRect+0x4a>
		&& (_usY > _usRectY) && (_usY < _usRectY + _usRectH))
 8005d0a:	88ba      	ldrh	r2, [r7, #4]
 8005d0c:	883b      	ldrh	r3, [r7, #0]
 8005d0e:	429a      	cmp	r2, r3
 8005d10:	d907      	bls.n	8005d22 <TOUCH_InRect+0x4a>
 8005d12:	88ba      	ldrh	r2, [r7, #4]
 8005d14:	8839      	ldrh	r1, [r7, #0]
 8005d16:	8a3b      	ldrh	r3, [r7, #16]
 8005d18:	440b      	add	r3, r1
 8005d1a:	429a      	cmp	r2, r3
 8005d1c:	da01      	bge.n	8005d22 <TOUCH_InRect+0x4a>
	{
		return 1;
 8005d1e:	2301      	movs	r3, #1
 8005d20:	e000      	b.n	8005d24 <TOUCH_InRect+0x4c>
	}
	else
	{
		return 0;
 8005d22:	2300      	movs	r3, #0
	}
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	3708      	adds	r7, #8
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bc90      	pop	{r4, r7}
 8005d2c:	4770      	bx	lr

08005d2e <CalTwoPoint>:
*********************************************************************************************************
*	Func name: CalTwoPoint
*********************************************************************************************************
*/
static int32_t CalTwoPoint(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t x)
{
 8005d2e:	b490      	push	{r4, r7}
 8005d30:	b082      	sub	sp, #8
 8005d32:	af00      	add	r7, sp, #0
 8005d34:	4604      	mov	r4, r0
 8005d36:	4608      	mov	r0, r1
 8005d38:	4611      	mov	r1, r2
 8005d3a:	461a      	mov	r2, r3
 8005d3c:	4623      	mov	r3, r4
 8005d3e:	80fb      	strh	r3, [r7, #6]
 8005d40:	4603      	mov	r3, r0
 8005d42:	80bb      	strh	r3, [r7, #4]
 8005d44:	460b      	mov	r3, r1
 8005d46:	807b      	strh	r3, [r7, #2]
 8005d48:	4613      	mov	r3, r2
 8005d4a:	803b      	strh	r3, [r7, #0]
	return y1 + ((int32_t)(y2 - y1) * (x - x1)) / (x2 - x1);
 8005d4c:	88ba      	ldrh	r2, [r7, #4]
 8005d4e:	8839      	ldrh	r1, [r7, #0]
 8005d50:	88bb      	ldrh	r3, [r7, #4]
 8005d52:	1acb      	subs	r3, r1, r3
 8005d54:	8a38      	ldrh	r0, [r7, #16]
 8005d56:	88f9      	ldrh	r1, [r7, #6]
 8005d58:	1a41      	subs	r1, r0, r1
 8005d5a:	fb03 f101 	mul.w	r1, r3, r1
 8005d5e:	8878      	ldrh	r0, [r7, #2]
 8005d60:	88fb      	ldrh	r3, [r7, #6]
 8005d62:	1ac3      	subs	r3, r0, r3
 8005d64:	fb91 f3f3 	sdiv	r3, r1, r3
 8005d68:	4413      	add	r3, r2
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	3708      	adds	r7, #8
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bc90      	pop	{r4, r7}
 8005d72:	4770      	bx	lr

08005d74 <TOUCH_TransX>:
*********************************************************************************************************
* Func name: TOUCH_TransX
*********************************************************************************************************
*/
static int16_t TOUCH_TransX(uint16_t _usAdcX, uint16_t _usAdcY)
{
 8005d74:	b5b0      	push	{r4, r5, r7, lr}
 8005d76:	b086      	sub	sp, #24
 8005d78:	af02      	add	r7, sp, #8
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	460a      	mov	r2, r1
 8005d7e:	80fb      	strh	r3, [r7, #6]
 8005d80:	4613      	mov	r3, r2
 8005d82:	80bb      	strh	r3, [r7, #4]
#if CALIB_POINT_COUNT == 2
	uint16_t x;
	int32_t y;

	if (g_tTP.XYChange == 0)
 8005d84:	4b1f      	ldr	r3, [pc, #124]	; (8005e04 <TOUCH_TransX+0x90>)
 8005d86:	8a1b      	ldrh	r3, [r3, #16]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d11a      	bne.n	8005dc2 <TOUCH_TransX+0x4e>
	{
		x = _usAdcX;
 8005d8c:	88fb      	ldrh	r3, [r7, #6]
 8005d8e:	817b      	strh	r3, [r7, #10]
		if (x == 0)
 8005d90:	897b      	ldrh	r3, [r7, #10]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d102      	bne.n	8005d9c <TOUCH_TransX+0x28>
		{
			y = 0;
 8005d96:	2300      	movs	r3, #0
 8005d98:	60fb      	str	r3, [r7, #12]
 8005d9a:	e02c      	b.n	8005df6 <TOUCH_TransX+0x82>
		}
		else
		{
			y = CalTwoPoint(g_tTP.usAdcX1, TP_X1, g_tTP.usAdcX2, TP_X2, x);
 8005d9c:	4b19      	ldr	r3, [pc, #100]	; (8005e04 <TOUCH_TransX+0x90>)
 8005d9e:	881c      	ldrh	r4, [r3, #0]
 8005da0:	4b18      	ldr	r3, [pc, #96]	; (8005e04 <TOUCH_TransX+0x90>)
 8005da2:	889d      	ldrh	r5, [r3, #4]
 8005da4:	f7ff fc1a 	bl	80055dc <LCD_GetWidth>
 8005da8:	4603      	mov	r3, r0
 8005daa:	3b14      	subs	r3, #20
 8005dac:	b29a      	uxth	r2, r3
 8005dae:	897b      	ldrh	r3, [r7, #10]
 8005db0:	9300      	str	r3, [sp, #0]
 8005db2:	4613      	mov	r3, r2
 8005db4:	462a      	mov	r2, r5
 8005db6:	2114      	movs	r1, #20
 8005db8:	4620      	mov	r0, r4
 8005dba:	f7ff ffb8 	bl	8005d2e <CalTwoPoint>
 8005dbe:	60f8      	str	r0, [r7, #12]
 8005dc0:	e019      	b.n	8005df6 <TOUCH_TransX+0x82>
		}
	}
	else
	{
		x = _usAdcY;
 8005dc2:	88bb      	ldrh	r3, [r7, #4]
 8005dc4:	817b      	strh	r3, [r7, #10]
		if (x == 0)
 8005dc6:	897b      	ldrh	r3, [r7, #10]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d102      	bne.n	8005dd2 <TOUCH_TransX+0x5e>
		{
			y = 0;
 8005dcc:	2300      	movs	r3, #0
 8005dce:	60fb      	str	r3, [r7, #12]
 8005dd0:	e011      	b.n	8005df6 <TOUCH_TransX+0x82>
		}
		else
		{
			y = CalTwoPoint(g_tTP.usAdcY1, TP_X1, g_tTP.usAdcY2, TP_X2, x);
 8005dd2:	4b0c      	ldr	r3, [pc, #48]	; (8005e04 <TOUCH_TransX+0x90>)
 8005dd4:	885c      	ldrh	r4, [r3, #2]
 8005dd6:	4b0b      	ldr	r3, [pc, #44]	; (8005e04 <TOUCH_TransX+0x90>)
 8005dd8:	88dd      	ldrh	r5, [r3, #6]
 8005dda:	f7ff fbff 	bl	80055dc <LCD_GetWidth>
 8005dde:	4603      	mov	r3, r0
 8005de0:	3b14      	subs	r3, #20
 8005de2:	b29a      	uxth	r2, r3
 8005de4:	897b      	ldrh	r3, [r7, #10]
 8005de6:	9300      	str	r3, [sp, #0]
 8005de8:	4613      	mov	r3, r2
 8005dea:	462a      	mov	r2, r5
 8005dec:	2114      	movs	r1, #20
 8005dee:	4620      	mov	r0, r4
 8005df0:	f7ff ff9d 	bl	8005d2e <CalTwoPoint>
 8005df4:	60f8      	str	r0, [r7, #12]
		}
	}
	return y;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	b21b      	sxth	r3, r3
#endif
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3710      	adds	r7, #16
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bdb0      	pop	{r4, r5, r7, pc}
 8005e02:	bf00      	nop
 8005e04:	200003b0 	.word	0x200003b0

08005e08 <TOUCH_TransY>:
*********************************************************************************************************
*	Func name: TOUCH_TransY
*********************************************************************************************************
*/
static int16_t TOUCH_TransY(uint16_t _usAdcX, uint16_t _usAdcY)
{
 8005e08:	b5b0      	push	{r4, r5, r7, lr}
 8005e0a:	b086      	sub	sp, #24
 8005e0c:	af02      	add	r7, sp, #8
 8005e0e:	4603      	mov	r3, r0
 8005e10:	460a      	mov	r2, r1
 8005e12:	80fb      	strh	r3, [r7, #6]
 8005e14:	4613      	mov	r3, r2
 8005e16:	80bb      	strh	r3, [r7, #4]
#if CALIB_POINT_COUNT == 2
	int32_t x;
	int32_t y;

	if (g_tTP.XYChange == 0)
 8005e18:	4b20      	ldr	r3, [pc, #128]	; (8005e9c <TOUCH_TransY+0x94>)
 8005e1a:	8a1b      	ldrh	r3, [r3, #16]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d11b      	bne.n	8005e58 <TOUCH_TransY+0x50>
	{
		x = _usAdcY;
 8005e20:	88bb      	ldrh	r3, [r7, #4]
 8005e22:	60bb      	str	r3, [r7, #8]
		if (x == 0)
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d102      	bne.n	8005e30 <TOUCH_TransY+0x28>
		{
			y = 0;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	60fb      	str	r3, [r7, #12]
 8005e2e:	e02e      	b.n	8005e8e <TOUCH_TransY+0x86>
		}
		else
		{
			y = CalTwoPoint(g_tTP.usAdcY1, TP_Y1, g_tTP.usAdcY2, TP_Y2, x);
 8005e30:	4b1a      	ldr	r3, [pc, #104]	; (8005e9c <TOUCH_TransY+0x94>)
 8005e32:	885c      	ldrh	r4, [r3, #2]
 8005e34:	4b19      	ldr	r3, [pc, #100]	; (8005e9c <TOUCH_TransY+0x94>)
 8005e36:	88dd      	ldrh	r5, [r3, #6]
 8005e38:	f7ff fbc4 	bl	80055c4 <LCD_GetHeight>
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	3b14      	subs	r3, #20
 8005e40:	b29a      	uxth	r2, r3
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	b29b      	uxth	r3, r3
 8005e46:	9300      	str	r3, [sp, #0]
 8005e48:	4613      	mov	r3, r2
 8005e4a:	462a      	mov	r2, r5
 8005e4c:	2114      	movs	r1, #20
 8005e4e:	4620      	mov	r0, r4
 8005e50:	f7ff ff6d 	bl	8005d2e <CalTwoPoint>
 8005e54:	60f8      	str	r0, [r7, #12]
 8005e56:	e01a      	b.n	8005e8e <TOUCH_TransY+0x86>
		}
	}
	else
	{
		x = _usAdcX;
 8005e58:	88fb      	ldrh	r3, [r7, #6]
 8005e5a:	60bb      	str	r3, [r7, #8]
		if (x == 0)
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d102      	bne.n	8005e68 <TOUCH_TransY+0x60>
		{
			y = 0;
 8005e62:	2300      	movs	r3, #0
 8005e64:	60fb      	str	r3, [r7, #12]
 8005e66:	e012      	b.n	8005e8e <TOUCH_TransY+0x86>
		}
		else
		{
			y = CalTwoPoint(g_tTP.usAdcX1, TP_Y1, g_tTP.usAdcX2, TP_Y2, x);
 8005e68:	4b0c      	ldr	r3, [pc, #48]	; (8005e9c <TOUCH_TransY+0x94>)
 8005e6a:	881c      	ldrh	r4, [r3, #0]
 8005e6c:	4b0b      	ldr	r3, [pc, #44]	; (8005e9c <TOUCH_TransY+0x94>)
 8005e6e:	889d      	ldrh	r5, [r3, #4]
 8005e70:	f7ff fba8 	bl	80055c4 <LCD_GetHeight>
 8005e74:	4603      	mov	r3, r0
 8005e76:	3b14      	subs	r3, #20
 8005e78:	b29a      	uxth	r2, r3
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	b29b      	uxth	r3, r3
 8005e7e:	9300      	str	r3, [sp, #0]
 8005e80:	4613      	mov	r3, r2
 8005e82:	462a      	mov	r2, r5
 8005e84:	2114      	movs	r1, #20
 8005e86:	4620      	mov	r0, r4
 8005e88:	f7ff ff51 	bl	8005d2e <CalTwoPoint>
 8005e8c:	60f8      	str	r0, [r7, #12]
		}
	}
	return y;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	b21b      	sxth	r3, r3
		/* ¸ù¾Ý2µãÖ±Ïß·½³Ì£¬¼ÆËã×ø±ê */
		y = CalTwoPoint(x1, TP_Y1, x2, TP_Y2, x);
	}
	return y;
#endif
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3710      	adds	r7, #16
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bdb0      	pop	{r4, r5, r7, pc}
 8005e9a:	bf00      	nop
 8005e9c:	200003b0 	.word	0x200003b0

08005ea0 <TOUCH_PutKey>:
*********************************************************************************************************
* Func name: TOUCH_PutKey
*********************************************************************************************************
*/
void TOUCH_PutKey(uint8_t _ucEvent, uint16_t _usX, uint16_t _usY)
{
 8005ea0:	b590      	push	{r4, r7, lr}
 8005ea2:	b083      	sub	sp, #12
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	71fb      	strb	r3, [r7, #7]
 8005eaa:	460b      	mov	r3, r1
 8005eac:	80bb      	strh	r3, [r7, #4]
 8005eae:	4613      	mov	r3, r2
 8005eb0:	807b      	strh	r3, [r7, #2]
	g_tTP.Event[g_tTP.Write] = _ucEvent;
 8005eb2:	4b21      	ldr	r3, [pc, #132]	; (8005f38 <TOUCH_PutKey+0x98>)
 8005eb4:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8005eb8:	461a      	mov	r2, r3
 8005eba:	4b1f      	ldr	r3, [pc, #124]	; (8005f38 <TOUCH_PutKey+0x98>)
 8005ebc:	4413      	add	r3, r2
 8005ebe:	79fa      	ldrb	r2, [r7, #7]
 8005ec0:	765a      	strb	r2, [r3, #25]
	g_tTP.XBuf[g_tTP.Write] = TOUCH_TransX(_usX, _usY);
 8005ec2:	4b1d      	ldr	r3, [pc, #116]	; (8005f38 <TOUCH_PutKey+0x98>)
 8005ec4:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8005ec8:	461c      	mov	r4, r3
 8005eca:	887a      	ldrh	r2, [r7, #2]
 8005ecc:	88bb      	ldrh	r3, [r7, #4]
 8005ece:	4611      	mov	r1, r2
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	f7ff ff4f 	bl	8005d74 <TOUCH_TransX>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	4619      	mov	r1, r3
 8005eda:	4a17      	ldr	r2, [pc, #92]	; (8005f38 <TOUCH_PutKey+0x98>)
 8005edc:	f104 0314 	add.w	r3, r4, #20
 8005ee0:	005b      	lsls	r3, r3, #1
 8005ee2:	4413      	add	r3, r2
 8005ee4:	460a      	mov	r2, r1
 8005ee6:	80da      	strh	r2, [r3, #6]
	g_tTP.YBuf[g_tTP.Write] = TOUCH_TransY(_usX, _usY);
 8005ee8:	4b13      	ldr	r3, [pc, #76]	; (8005f38 <TOUCH_PutKey+0x98>)
 8005eea:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8005eee:	461c      	mov	r4, r3
 8005ef0:	887a      	ldrh	r2, [r7, #2]
 8005ef2:	88bb      	ldrh	r3, [r7, #4]
 8005ef4:	4611      	mov	r1, r2
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f7ff ff86 	bl	8005e08 <TOUCH_TransY>
 8005efc:	4603      	mov	r3, r0
 8005efe:	4619      	mov	r1, r3
 8005f00:	4a0d      	ldr	r2, [pc, #52]	; (8005f38 <TOUCH_PutKey+0x98>)
 8005f02:	f104 0328 	add.w	r3, r4, #40	; 0x28
 8005f06:	005b      	lsls	r3, r3, #1
 8005f08:	4413      	add	r3, r2
 8005f0a:	460a      	mov	r2, r1
 8005f0c:	80da      	strh	r2, [r3, #6]

	if (++g_tTP.Write  >= TOUCH_FIFO_SIZE)
 8005f0e:	4b0a      	ldr	r3, [pc, #40]	; (8005f38 <TOUCH_PutKey+0x98>)
 8005f10:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8005f14:	3301      	adds	r3, #1
 8005f16:	b2da      	uxtb	r2, r3
 8005f18:	4b07      	ldr	r3, [pc, #28]	; (8005f38 <TOUCH_PutKey+0x98>)
 8005f1a:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 8005f1e:	4b06      	ldr	r3, [pc, #24]	; (8005f38 <TOUCH_PutKey+0x98>)
 8005f20:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8005f24:	2b13      	cmp	r3, #19
 8005f26:	d903      	bls.n	8005f30 <TOUCH_PutKey+0x90>
	{
		g_tTP.Write = 0;
 8005f28:	4b03      	ldr	r3, [pc, #12]	; (8005f38 <TOUCH_PutKey+0x98>)
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
	}
}
 8005f30:	bf00      	nop
 8005f32:	370c      	adds	r7, #12
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bd90      	pop	{r4, r7, pc}
 8005f38:	200003b0 	.word	0x200003b0

08005f3c <TOUCH_MoveValid>:
*********************************************************************************************************
* Func name: TOUCH_MoveValid
*********************************************************************************************************
*/
uint8_t TOUCH_MoveValid(uint16_t _usX1, uint16_t _usY1, uint16_t _usX2, uint16_t _usY2)
{
 8005f3c:	b590      	push	{r4, r7, lr}
 8005f3e:	b085      	sub	sp, #20
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	4604      	mov	r4, r0
 8005f44:	4608      	mov	r0, r1
 8005f46:	4611      	mov	r1, r2
 8005f48:	461a      	mov	r2, r3
 8005f4a:	4623      	mov	r3, r4
 8005f4c:	80fb      	strh	r3, [r7, #6]
 8005f4e:	4603      	mov	r3, r0
 8005f50:	80bb      	strh	r3, [r7, #4]
 8005f52:	460b      	mov	r3, r1
 8005f54:	807b      	strh	r3, [r7, #2]
 8005f56:	4613      	mov	r3, r2
 8005f58:	803b      	strh	r3, [r7, #0]
	int16_t iX, iY;
	static uint8_t s_invalid_count = 0;

	iX = TOUCH_Abs(_usX1 - _usX2);
 8005f5a:	88fa      	ldrh	r2, [r7, #6]
 8005f5c:	887b      	ldrh	r3, [r7, #2]
 8005f5e:	1ad3      	subs	r3, r2, r3
 8005f60:	4618      	mov	r0, r3
 8005f62:	f000 fadf 	bl	8006524 <TOUCH_Abs>
 8005f66:	4603      	mov	r3, r0
 8005f68:	81fb      	strh	r3, [r7, #14]
	iY = TOUCH_Abs(_usY1 - _usY2);
 8005f6a:	88ba      	ldrh	r2, [r7, #4]
 8005f6c:	883b      	ldrh	r3, [r7, #0]
 8005f6e:	1ad3      	subs	r3, r2, r3
 8005f70:	4618      	mov	r0, r3
 8005f72:	f000 fad7 	bl	8006524 <TOUCH_Abs>
 8005f76:	4603      	mov	r3, r0
 8005f78:	81bb      	strh	r3, [r7, #12]

	if ((iX < 25) && (iY < 25))
 8005f7a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005f7e:	2b18      	cmp	r3, #24
 8005f80:	dc08      	bgt.n	8005f94 <TOUCH_MoveValid+0x58>
 8005f82:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005f86:	2b18      	cmp	r3, #24
 8005f88:	dc04      	bgt.n	8005f94 <TOUCH_MoveValid+0x58>
	{
		s_invalid_count = 0;
 8005f8a:	4b0c      	ldr	r3, [pc, #48]	; (8005fbc <TOUCH_MoveValid+0x80>)
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	701a      	strb	r2, [r3, #0]
		return 1;
 8005f90:	2301      	movs	r3, #1
 8005f92:	e00f      	b.n	8005fb4 <TOUCH_MoveValid+0x78>
	}
	else
	{
		if (++s_invalid_count >= 3)
 8005f94:	4b09      	ldr	r3, [pc, #36]	; (8005fbc <TOUCH_MoveValid+0x80>)
 8005f96:	781b      	ldrb	r3, [r3, #0]
 8005f98:	3301      	adds	r3, #1
 8005f9a:	b2da      	uxtb	r2, r3
 8005f9c:	4b07      	ldr	r3, [pc, #28]	; (8005fbc <TOUCH_MoveValid+0x80>)
 8005f9e:	701a      	strb	r2, [r3, #0]
 8005fa0:	4b06      	ldr	r3, [pc, #24]	; (8005fbc <TOUCH_MoveValid+0x80>)
 8005fa2:	781b      	ldrb	r3, [r3, #0]
 8005fa4:	2b02      	cmp	r3, #2
 8005fa6:	d904      	bls.n	8005fb2 <TOUCH_MoveValid+0x76>
		{
			s_invalid_count = 0;
 8005fa8:	4b04      	ldr	r3, [pc, #16]	; (8005fbc <TOUCH_MoveValid+0x80>)
 8005faa:	2200      	movs	r2, #0
 8005fac:	701a      	strb	r2, [r3, #0]
			return 1;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	e000      	b.n	8005fb4 <TOUCH_MoveValid+0x78>
		}
		return 0;
 8005fb2:	2300      	movs	r3, #0
	}
}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	3714      	adds	r7, #20
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bd90      	pop	{r4, r7, pc}
 8005fbc:	20000430 	.word	0x20000430

08005fc0 <TOUCH_Scan>:
*********************************************************************************************************
*	Func name: TOUCH_Scan
*********************************************************************************************************
*/
void TOUCH_Scan(void)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b082      	sub	sp, #8
 8005fc4:	af00      	add	r7, sp, #0
	static uint8_t s_ucPos = 0;
	static uint8_t s_count = 0;
	static uint8_t s_down = 0;
	static uint16_t s_usSaveAdcX, s_usSaveAdcY;

	if (g_tTP.Enable == 0)
 8005fc6:	4b5e      	ldr	r3, [pc, #376]	; (8006140 <TOUCH_Scan+0x180>)
 8005fc8:	7e1b      	ldrb	r3, [r3, #24]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	f000 80b1 	beq.w	8006132 <TOUCH_Scan+0x172>
	{
		return;
	}
	if (g_ChipID == IC_8875)
 8005fd0:	4b5c      	ldr	r3, [pc, #368]	; (8006144 <TOUCH_Scan+0x184>)
 8005fd2:	881b      	ldrh	r3, [r3, #0]
 8005fd4:	2b75      	cmp	r3, #117	; 0x75
 8005fd6:	d10d      	bne.n	8005ff4 <TOUCH_Scan+0x34>
	{
		if (RA8875_IsBusy())
 8005fd8:	f7fd fab2 	bl	8003540 <RA8875_IsBusy>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	f040 80a9 	bne.w	8006136 <TOUCH_Scan+0x176>
		{
			return;
		}
		usAdcX = RA8875_TouchReadX();
 8005fe4:	f7fd fabe 	bl	8003564 <RA8875_TouchReadX>
 8005fe8:	4603      	mov	r3, r0
 8005fea:	80fb      	strh	r3, [r7, #6]
		usAdcY = RA8875_TouchReadY();
 8005fec:	f7fd fb0c 	bl	8003608 <RA8875_TouchReadY>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	80bb      	strh	r3, [r7, #4]
	else
	{
		//usAdcX = TSC2046_ReadAdc(ADC_CH_X);
		//usAdcY = TSC2046_ReadAdc(ADC_CH_Y);
	}
	if (TOUCH_PressValid(usAdcX, usAdcY))
 8005ff4:	88ba      	ldrh	r2, [r7, #4]
 8005ff6:	88fb      	ldrh	r3, [r7, #6]
 8005ff8:	4611      	mov	r1, r2
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	f000 fa34 	bl	8006468 <TOUCH_PressValid>
 8006000:	4603      	mov	r3, r0
 8006002:	2b00      	cmp	r3, #0
 8006004:	d06f      	beq.n	80060e6 <TOUCH_Scan+0x126>
	{
		if (s_count >= 30)
 8006006:	4b50      	ldr	r3, [pc, #320]	; (8006148 <TOUCH_Scan+0x188>)
 8006008:	781b      	ldrb	r3, [r3, #0]
 800600a:	2b1d      	cmp	r3, #29
 800600c:	d964      	bls.n	80060d8 <TOUCH_Scan+0x118>
		{
			s_usXBuf[s_ucPos] = usAdcX;
 800600e:	4b4f      	ldr	r3, [pc, #316]	; (800614c <TOUCH_Scan+0x18c>)
 8006010:	781b      	ldrb	r3, [r3, #0]
 8006012:	4619      	mov	r1, r3
 8006014:	4a4e      	ldr	r2, [pc, #312]	; (8006150 <TOUCH_Scan+0x190>)
 8006016:	88fb      	ldrh	r3, [r7, #6]
 8006018:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
			s_usYBuf[s_ucPos] = usAdcY;
 800601c:	4b4b      	ldr	r3, [pc, #300]	; (800614c <TOUCH_Scan+0x18c>)
 800601e:	781b      	ldrb	r3, [r3, #0]
 8006020:	4619      	mov	r1, r3
 8006022:	4a4c      	ldr	r2, [pc, #304]	; (8006154 <TOUCH_Scan+0x194>)
 8006024:	88bb      	ldrh	r3, [r7, #4]
 8006026:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]

			if (++s_ucPos >= SAMPLE_COUNT)
 800602a:	4b48      	ldr	r3, [pc, #288]	; (800614c <TOUCH_Scan+0x18c>)
 800602c:	781b      	ldrb	r3, [r3, #0]
 800602e:	3301      	adds	r3, #1
 8006030:	b2da      	uxtb	r2, r3
 8006032:	4b46      	ldr	r3, [pc, #280]	; (800614c <TOUCH_Scan+0x18c>)
 8006034:	701a      	strb	r2, [r3, #0]
 8006036:	4b45      	ldr	r3, [pc, #276]	; (800614c <TOUCH_Scan+0x18c>)
 8006038:	781b      	ldrb	r3, [r3, #0]
 800603a:	2b09      	cmp	r3, #9
 800603c:	d97c      	bls.n	8006138 <TOUCH_Scan+0x178>
			{
				s_ucPos = 0;
 800603e:	4b43      	ldr	r3, [pc, #268]	; (800614c <TOUCH_Scan+0x18c>)
 8006040:	2200      	movs	r2, #0
 8006042:	701a      	strb	r2, [r3, #0]

				g_tTP.usAdcNowX = TOUCH_DataFilter(s_usXBuf, SAMPLE_COUNT);
 8006044:	210a      	movs	r1, #10
 8006046:	4842      	ldr	r0, [pc, #264]	; (8006150 <TOUCH_Scan+0x190>)
 8006048:	f000 fa7e 	bl	8006548 <TOUCH_DataFilter>
 800604c:	4603      	mov	r3, r0
 800604e:	461a      	mov	r2, r3
 8006050:	4b3b      	ldr	r3, [pc, #236]	; (8006140 <TOUCH_Scan+0x180>)
 8006052:	829a      	strh	r2, [r3, #20]
				g_tTP.usAdcNowY = TOUCH_DataFilter(s_usYBuf, SAMPLE_COUNT);
 8006054:	210a      	movs	r1, #10
 8006056:	483f      	ldr	r0, [pc, #252]	; (8006154 <TOUCH_Scan+0x194>)
 8006058:	f000 fa76 	bl	8006548 <TOUCH_DataFilter>
 800605c:	4603      	mov	r3, r0
 800605e:	461a      	mov	r2, r3
 8006060:	4b37      	ldr	r3, [pc, #220]	; (8006140 <TOUCH_Scan+0x180>)
 8006062:	82da      	strh	r2, [r3, #22]

				if (s_down == 0)
 8006064:	4b3c      	ldr	r3, [pc, #240]	; (8006158 <TOUCH_Scan+0x198>)
 8006066:	781b      	ldrb	r3, [r3, #0]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d113      	bne.n	8006094 <TOUCH_Scan+0xd4>
				{
					s_down = 1;
 800606c:	4b3a      	ldr	r3, [pc, #232]	; (8006158 <TOUCH_Scan+0x198>)
 800606e:	2201      	movs	r2, #1
 8006070:	701a      	strb	r2, [r3, #0]
					TOUCH_PutKey(TOUCH_DOWN, g_tTP.usAdcNowX, g_tTP.usAdcNowY);
 8006072:	4b33      	ldr	r3, [pc, #204]	; (8006140 <TOUCH_Scan+0x180>)
 8006074:	8a9b      	ldrh	r3, [r3, #20]
 8006076:	4a32      	ldr	r2, [pc, #200]	; (8006140 <TOUCH_Scan+0x180>)
 8006078:	8ad2      	ldrh	r2, [r2, #22]
 800607a:	4619      	mov	r1, r3
 800607c:	2001      	movs	r0, #1
 800607e:	f7ff ff0f 	bl	8005ea0 <TOUCH_PutKey>

					s_usSaveAdcX = g_tTP.usAdcNowX;
 8006082:	4b2f      	ldr	r3, [pc, #188]	; (8006140 <TOUCH_Scan+0x180>)
 8006084:	8a9a      	ldrh	r2, [r3, #20]
 8006086:	4b35      	ldr	r3, [pc, #212]	; (800615c <TOUCH_Scan+0x19c>)
 8006088:	801a      	strh	r2, [r3, #0]
					s_usSaveAdcY = g_tTP.usAdcNowY;
 800608a:	4b2d      	ldr	r3, [pc, #180]	; (8006140 <TOUCH_Scan+0x180>)
 800608c:	8ada      	ldrh	r2, [r3, #22]
 800608e:	4b34      	ldr	r3, [pc, #208]	; (8006160 <TOUCH_Scan+0x1a0>)
 8006090:	801a      	strh	r2, [r3, #0]
 8006092:	e051      	b.n	8006138 <TOUCH_Scan+0x178>
				}
				else
				{
					if (TOUCH_MoveValid(s_usSaveAdcX, s_usSaveAdcY, g_tTP.usAdcNowX, g_tTP.usAdcNowY))
 8006094:	4b31      	ldr	r3, [pc, #196]	; (800615c <TOUCH_Scan+0x19c>)
 8006096:	8818      	ldrh	r0, [r3, #0]
 8006098:	4b31      	ldr	r3, [pc, #196]	; (8006160 <TOUCH_Scan+0x1a0>)
 800609a:	8819      	ldrh	r1, [r3, #0]
 800609c:	4b28      	ldr	r3, [pc, #160]	; (8006140 <TOUCH_Scan+0x180>)
 800609e:	8a9a      	ldrh	r2, [r3, #20]
 80060a0:	4b27      	ldr	r3, [pc, #156]	; (8006140 <TOUCH_Scan+0x180>)
 80060a2:	8adb      	ldrh	r3, [r3, #22]
 80060a4:	f7ff ff4a 	bl	8005f3c <TOUCH_MoveValid>
 80060a8:	4603      	mov	r3, r0
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d010      	beq.n	80060d0 <TOUCH_Scan+0x110>
					{
						TOUCH_PutKey(TOUCH_MOVE, g_tTP.usAdcNowX, g_tTP.usAdcNowY);
 80060ae:	4b24      	ldr	r3, [pc, #144]	; (8006140 <TOUCH_Scan+0x180>)
 80060b0:	8a9b      	ldrh	r3, [r3, #20]
 80060b2:	4a23      	ldr	r2, [pc, #140]	; (8006140 <TOUCH_Scan+0x180>)
 80060b4:	8ad2      	ldrh	r2, [r2, #22]
 80060b6:	4619      	mov	r1, r3
 80060b8:	2002      	movs	r0, #2
 80060ba:	f7ff fef1 	bl	8005ea0 <TOUCH_PutKey>

						s_usSaveAdcX = g_tTP.usAdcNowX;
 80060be:	4b20      	ldr	r3, [pc, #128]	; (8006140 <TOUCH_Scan+0x180>)
 80060c0:	8a9a      	ldrh	r2, [r3, #20]
 80060c2:	4b26      	ldr	r3, [pc, #152]	; (800615c <TOUCH_Scan+0x19c>)
 80060c4:	801a      	strh	r2, [r3, #0]
						s_usSaveAdcY = g_tTP.usAdcNowY;
 80060c6:	4b1e      	ldr	r3, [pc, #120]	; (8006140 <TOUCH_Scan+0x180>)
 80060c8:	8ada      	ldrh	r2, [r3, #22]
 80060ca:	4b25      	ldr	r3, [pc, #148]	; (8006160 <TOUCH_Scan+0x1a0>)
 80060cc:	801a      	strh	r2, [r3, #0]
 80060ce:	e033      	b.n	8006138 <TOUCH_Scan+0x178>
					}
					else
					{
						g_tTP.usAdcNowX = 0;
 80060d0:	4b1b      	ldr	r3, [pc, #108]	; (8006140 <TOUCH_Scan+0x180>)
 80060d2:	2200      	movs	r2, #0
 80060d4:	829a      	strh	r2, [r3, #20]
 80060d6:	e02f      	b.n	8006138 <TOUCH_Scan+0x178>
				}
			}
		}
		else
		{
			s_count++;
 80060d8:	4b1b      	ldr	r3, [pc, #108]	; (8006148 <TOUCH_Scan+0x188>)
 80060da:	781b      	ldrb	r3, [r3, #0]
 80060dc:	3301      	adds	r3, #1
 80060de:	b2da      	uxtb	r2, r3
 80060e0:	4b19      	ldr	r3, [pc, #100]	; (8006148 <TOUCH_Scan+0x188>)
 80060e2:	701a      	strb	r2, [r3, #0]
 80060e4:	e028      	b.n	8006138 <TOUCH_Scan+0x178>
		}
	}
	else
	{
		if (s_count > 0)
 80060e6:	4b18      	ldr	r3, [pc, #96]	; (8006148 <TOUCH_Scan+0x188>)
 80060e8:	781b      	ldrb	r3, [r3, #0]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d01d      	beq.n	800612a <TOUCH_Scan+0x16a>
		{
			if (--s_count == 0)
 80060ee:	4b16      	ldr	r3, [pc, #88]	; (8006148 <TOUCH_Scan+0x188>)
 80060f0:	781b      	ldrb	r3, [r3, #0]
 80060f2:	3b01      	subs	r3, #1
 80060f4:	b2da      	uxtb	r2, r3
 80060f6:	4b14      	ldr	r3, [pc, #80]	; (8006148 <TOUCH_Scan+0x188>)
 80060f8:	701a      	strb	r2, [r3, #0]
 80060fa:	4b13      	ldr	r3, [pc, #76]	; (8006148 <TOUCH_Scan+0x188>)
 80060fc:	781b      	ldrb	r3, [r3, #0]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d113      	bne.n	800612a <TOUCH_Scan+0x16a>
			{
				TOUCH_PutKey(TOUCH_RELEASE, s_usSaveAdcX, s_usSaveAdcY);
 8006102:	4b16      	ldr	r3, [pc, #88]	; (800615c <TOUCH_Scan+0x19c>)
 8006104:	881b      	ldrh	r3, [r3, #0]
 8006106:	4a16      	ldr	r2, [pc, #88]	; (8006160 <TOUCH_Scan+0x1a0>)
 8006108:	8812      	ldrh	r2, [r2, #0]
 800610a:	4619      	mov	r1, r3
 800610c:	2003      	movs	r0, #3
 800610e:	f7ff fec7 	bl	8005ea0 <TOUCH_PutKey>

				g_tTP.usAdcNowX = 0;
 8006112:	4b0b      	ldr	r3, [pc, #44]	; (8006140 <TOUCH_Scan+0x180>)
 8006114:	2200      	movs	r2, #0
 8006116:	829a      	strh	r2, [r3, #20]
				g_tTP.usAdcNowY = 0;
 8006118:	4b09      	ldr	r3, [pc, #36]	; (8006140 <TOUCH_Scan+0x180>)
 800611a:	2200      	movs	r2, #0
 800611c:	82da      	strh	r2, [r3, #22]

				s_count = 0;
 800611e:	4b0a      	ldr	r3, [pc, #40]	; (8006148 <TOUCH_Scan+0x188>)
 8006120:	2200      	movs	r2, #0
 8006122:	701a      	strb	r2, [r3, #0]
				s_down = 0;
 8006124:	4b0c      	ldr	r3, [pc, #48]	; (8006158 <TOUCH_Scan+0x198>)
 8006126:	2200      	movs	r2, #0
 8006128:	701a      	strb	r2, [r3, #0]
			}
		}
		s_ucPos = 0;
 800612a:	4b08      	ldr	r3, [pc, #32]	; (800614c <TOUCH_Scan+0x18c>)
 800612c:	2200      	movs	r2, #0
 800612e:	701a      	strb	r2, [r3, #0]
 8006130:	e002      	b.n	8006138 <TOUCH_Scan+0x178>
		return;
 8006132:	bf00      	nop
 8006134:	e000      	b.n	8006138 <TOUCH_Scan+0x178>
			return;
 8006136:	bf00      	nop
	}
}
 8006138:	3708      	adds	r7, #8
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}
 800613e:	bf00      	nop
 8006140:	200003b0 	.word	0x200003b0
 8006144:	20000008 	.word	0x20000008
 8006148:	20000431 	.word	0x20000431
 800614c:	20000432 	.word	0x20000432
 8006150:	20000434 	.word	0x20000434
 8006154:	20000448 	.word	0x20000448
 8006158:	2000045c 	.word	0x2000045c
 800615c:	2000045e 	.word	0x2000045e
 8006160:	20000460 	.word	0x20000460

08006164 <TOUCH_Calibration>:
*********************************************************************************************************
* Func name: TOUCH_Calibration
*********************************************************************************************************
*/
void TOUCH_Calibration(void)
{
 8006164:	b590      	push	{r4, r7, lr}
 8006166:	b085      	sub	sp, #20
 8006168:	af00      	add	r7, sp, #0
	uint16_t usAdcY;
	uint8_t usCount;
	uint8_t i;
	uint32_t n;

	TOUCH_CelarFIFO();
 800616a:	f000 f8ab 	bl	80062c4 <TOUCH_CelarFIFO>

	for (i = 0; i < CALIB_POINT_COUNT; i++)
 800616e:	2300      	movs	r3, #0
 8006170:	73bb      	strb	r3, [r7, #14]
 8006172:	e059      	b.n	8006228 <TOUCH_Calibration+0xc4>
	{
		TOUCH_DispPoint(i);		/* ÏÔÊ¾Ð£×¼µã */
 8006174:	7bbb      	ldrb	r3, [r7, #14]
 8006176:	4618      	mov	r0, r3
 8006178:	f000 f8b8 	bl	80062ec <TOUCH_DispPoint>
		TOUCH_WaitRelease(); 	/* µÈ´ý´¥±ÊÊÍ·Å */
 800617c:	f000 f950 	bl	8006420 <TOUCH_WaitRelease>

		usCount = 0;
 8006180:	2300      	movs	r3, #0
 8006182:	73fb      	strb	r3, [r7, #15]
		for (n = 0; n < 500; n++)
 8006184:	2300      	movs	r3, #0
 8006186:	60bb      	str	r3, [r7, #8]
 8006188:	e043      	b.n	8006212 <TOUCH_Calibration+0xae>
		{
			usAdcX = TOUCH_ReadAdcX();
 800618a:	f000 f993 	bl	80064b4 <TOUCH_ReadAdcX>
 800618e:	4603      	mov	r3, r0
 8006190:	80fb      	strh	r3, [r7, #6]

			usAdcY = TOUCH_ReadAdcY();
 8006192:	f000 f9ab 	bl	80064ec <TOUCH_ReadAdcY>
 8006196:	4603      	mov	r3, r0
 8006198:	80bb      	strh	r3, [r7, #4]

			if (TOUCH_PressValid(usAdcX, usAdcY))
 800619a:	88ba      	ldrh	r2, [r7, #4]
 800619c:	88fb      	ldrh	r3, [r7, #6]
 800619e:	4611      	mov	r1, r2
 80061a0:	4618      	mov	r0, r3
 80061a2:	f000 f961 	bl	8006468 <TOUCH_PressValid>
 80061a6:	4603      	mov	r3, r0
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d02a      	beq.n	8006202 <TOUCH_Calibration+0x9e>
			{
				if (++usCount > 5)
 80061ac:	7bfb      	ldrb	r3, [r7, #15]
 80061ae:	3301      	adds	r3, #1
 80061b0:	73fb      	strb	r3, [r7, #15]
 80061b2:	7bfb      	ldrb	r3, [r7, #15]
 80061b4:	2b05      	cmp	r3, #5
 80061b6:	d926      	bls.n	8006206 <TOUCH_Calibration+0xa2>
				{
					if (i == 0)
 80061b8:	7bbb      	ldrb	r3, [r7, #14]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d106      	bne.n	80061cc <TOUCH_Calibration+0x68>
					{
						g_tTP.usAdcX1 = usAdcX;
 80061be:	4a40      	ldr	r2, [pc, #256]	; (80062c0 <TOUCH_Calibration+0x15c>)
 80061c0:	88fb      	ldrh	r3, [r7, #6]
 80061c2:	8013      	strh	r3, [r2, #0]
						g_tTP.usAdcY1 = usAdcY;
 80061c4:	4a3e      	ldr	r2, [pc, #248]	; (80062c0 <TOUCH_Calibration+0x15c>)
 80061c6:	88bb      	ldrh	r3, [r7, #4]
 80061c8:	8053      	strh	r3, [r2, #2]
					else
					{
						g_tTP.usAdcX4 = usAdcX;
						g_tTP.usAdcY4 = usAdcY;
					}
					break;
 80061ca:	e026      	b.n	800621a <TOUCH_Calibration+0xb6>
					else if (i == 1)
 80061cc:	7bbb      	ldrb	r3, [r7, #14]
 80061ce:	2b01      	cmp	r3, #1
 80061d0:	d106      	bne.n	80061e0 <TOUCH_Calibration+0x7c>
						g_tTP.usAdcX2 = usAdcX;
 80061d2:	4a3b      	ldr	r2, [pc, #236]	; (80062c0 <TOUCH_Calibration+0x15c>)
 80061d4:	88fb      	ldrh	r3, [r7, #6]
 80061d6:	8093      	strh	r3, [r2, #4]
						g_tTP.usAdcY2 = usAdcY;
 80061d8:	4a39      	ldr	r2, [pc, #228]	; (80062c0 <TOUCH_Calibration+0x15c>)
 80061da:	88bb      	ldrh	r3, [r7, #4]
 80061dc:	80d3      	strh	r3, [r2, #6]
					break;
 80061de:	e01c      	b.n	800621a <TOUCH_Calibration+0xb6>
					else if (i == 2)
 80061e0:	7bbb      	ldrb	r3, [r7, #14]
 80061e2:	2b02      	cmp	r3, #2
 80061e4:	d106      	bne.n	80061f4 <TOUCH_Calibration+0x90>
						g_tTP.usAdcX3 = usAdcX;
 80061e6:	4a36      	ldr	r2, [pc, #216]	; (80062c0 <TOUCH_Calibration+0x15c>)
 80061e8:	88fb      	ldrh	r3, [r7, #6]
 80061ea:	8113      	strh	r3, [r2, #8]
						g_tTP.usAdcY3 = usAdcY;
 80061ec:	4a34      	ldr	r2, [pc, #208]	; (80062c0 <TOUCH_Calibration+0x15c>)
 80061ee:	88bb      	ldrh	r3, [r7, #4]
 80061f0:	8153      	strh	r3, [r2, #10]
					break;
 80061f2:	e012      	b.n	800621a <TOUCH_Calibration+0xb6>
						g_tTP.usAdcX4 = usAdcX;
 80061f4:	4a32      	ldr	r2, [pc, #200]	; (80062c0 <TOUCH_Calibration+0x15c>)
 80061f6:	88fb      	ldrh	r3, [r7, #6]
 80061f8:	8193      	strh	r3, [r2, #12]
						g_tTP.usAdcY4 = usAdcY;
 80061fa:	4a31      	ldr	r2, [pc, #196]	; (80062c0 <TOUCH_Calibration+0x15c>)
 80061fc:	88bb      	ldrh	r3, [r7, #4]
 80061fe:	81d3      	strh	r3, [r2, #14]
					break;
 8006200:	e00b      	b.n	800621a <TOUCH_Calibration+0xb6>
				}
			}
			else
			{
				usCount = 0;
 8006202:	2300      	movs	r3, #0
 8006204:	73fb      	strb	r3, [r7, #15]
			}
			bsp_DelayMS(10);
 8006206:	200a      	movs	r0, #10
 8006208:	f7ff fc9c 	bl	8005b44 <bsp_DelayMS>
		for (n = 0; n < 500; n++)
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	3301      	adds	r3, #1
 8006210:	60bb      	str	r3, [r7, #8]
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8006218:	d3b7      	bcc.n	800618a <TOUCH_Calibration+0x26>
		}
		if (n == 500)
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8006220:	d049      	beq.n	80062b6 <TOUCH_Calibration+0x152>
	for (i = 0; i < CALIB_POINT_COUNT; i++)
 8006222:	7bbb      	ldrb	r3, [r7, #14]
 8006224:	3301      	adds	r3, #1
 8006226:	73bb      	strb	r3, [r7, #14]
 8006228:	7bbb      	ldrb	r3, [r7, #14]
 800622a:	2b01      	cmp	r3, #1
 800622c:	d9a2      	bls.n	8006174 <TOUCH_Calibration+0x10>
		{
			return;
		}
	}
	TOUCH_WaitRelease(); 	/* µÈ´ý´¥±ÊÊÍ·Å */
 800622e:	f000 f8f7 	bl	8006420 <TOUCH_WaitRelease>

	/* Ê¶±ð´¥ÃþµÄ X, Y ºÍ ÏÔÊ¾Ãæ°åµÄ X£¬Y ÊÇ·ñÐèÒª½»»» */
	g_tTP.XYChange = 0;		/* 1±íÊ¾X YÐèÒª½»»» */
 8006232:	4b23      	ldr	r3, [pc, #140]	; (80062c0 <TOUCH_Calibration+0x15c>)
 8006234:	2200      	movs	r2, #0
 8006236:	821a      	strh	r2, [r3, #16]
	if (LCD_GetHeight() < LCD_GetWidth())
 8006238:	f7ff f9c4 	bl	80055c4 <LCD_GetHeight>
 800623c:	4603      	mov	r3, r0
 800623e:	461c      	mov	r4, r3
 8006240:	f7ff f9cc 	bl	80055dc <LCD_GetWidth>
 8006244:	4603      	mov	r3, r0
 8006246:	429c      	cmp	r4, r3
 8006248:	d219      	bcs.n	800627e <TOUCH_Calibration+0x11a>
	{
		if (TOUCH_Abs(g_tTP.usAdcX1 - g_tTP.usAdcX2) < TOUCH_Abs(g_tTP.usAdcY1 - g_tTP.usAdcY2))
 800624a:	4b1d      	ldr	r3, [pc, #116]	; (80062c0 <TOUCH_Calibration+0x15c>)
 800624c:	881b      	ldrh	r3, [r3, #0]
 800624e:	461a      	mov	r2, r3
 8006250:	4b1b      	ldr	r3, [pc, #108]	; (80062c0 <TOUCH_Calibration+0x15c>)
 8006252:	889b      	ldrh	r3, [r3, #4]
 8006254:	1ad3      	subs	r3, r2, r3
 8006256:	4618      	mov	r0, r3
 8006258:	f000 f964 	bl	8006524 <TOUCH_Abs>
 800625c:	4604      	mov	r4, r0
 800625e:	4b18      	ldr	r3, [pc, #96]	; (80062c0 <TOUCH_Calibration+0x15c>)
 8006260:	885b      	ldrh	r3, [r3, #2]
 8006262:	461a      	mov	r2, r3
 8006264:	4b16      	ldr	r3, [pc, #88]	; (80062c0 <TOUCH_Calibration+0x15c>)
 8006266:	88db      	ldrh	r3, [r3, #6]
 8006268:	1ad3      	subs	r3, r2, r3
 800626a:	4618      	mov	r0, r3
 800626c:	f000 f95a 	bl	8006524 <TOUCH_Abs>
 8006270:	4603      	mov	r3, r0
 8006272:	429c      	cmp	r4, r3
 8006274:	da1c      	bge.n	80062b0 <TOUCH_Calibration+0x14c>
		{
			g_tTP.XYChange = 1;
 8006276:	4b12      	ldr	r3, [pc, #72]	; (80062c0 <TOUCH_Calibration+0x15c>)
 8006278:	2201      	movs	r2, #1
 800627a:	821a      	strh	r2, [r3, #16]
 800627c:	e018      	b.n	80062b0 <TOUCH_Calibration+0x14c>
		}
	}
	else
	{
		if (TOUCH_Abs(g_tTP.usAdcX1 - g_tTP.usAdcX2) > TOUCH_Abs(g_tTP.usAdcY1 - g_tTP.usAdcY2))
 800627e:	4b10      	ldr	r3, [pc, #64]	; (80062c0 <TOUCH_Calibration+0x15c>)
 8006280:	881b      	ldrh	r3, [r3, #0]
 8006282:	461a      	mov	r2, r3
 8006284:	4b0e      	ldr	r3, [pc, #56]	; (80062c0 <TOUCH_Calibration+0x15c>)
 8006286:	889b      	ldrh	r3, [r3, #4]
 8006288:	1ad3      	subs	r3, r2, r3
 800628a:	4618      	mov	r0, r3
 800628c:	f000 f94a 	bl	8006524 <TOUCH_Abs>
 8006290:	4604      	mov	r4, r0
 8006292:	4b0b      	ldr	r3, [pc, #44]	; (80062c0 <TOUCH_Calibration+0x15c>)
 8006294:	885b      	ldrh	r3, [r3, #2]
 8006296:	461a      	mov	r2, r3
 8006298:	4b09      	ldr	r3, [pc, #36]	; (80062c0 <TOUCH_Calibration+0x15c>)
 800629a:	88db      	ldrh	r3, [r3, #6]
 800629c:	1ad3      	subs	r3, r2, r3
 800629e:	4618      	mov	r0, r3
 80062a0:	f000 f940 	bl	8006524 <TOUCH_Abs>
 80062a4:	4603      	mov	r3, r0
 80062a6:	429c      	cmp	r4, r3
 80062a8:	dd02      	ble.n	80062b0 <TOUCH_Calibration+0x14c>
		{
			g_tTP.XYChange = 1;
 80062aa:	4b05      	ldr	r3, [pc, #20]	; (80062c0 <TOUCH_Calibration+0x15c>)
 80062ac:	2201      	movs	r2, #1
 80062ae:	821a      	strh	r2, [r3, #16]
		}
	}
	TOUCH_SaveParam();
 80062b0:	f000 f9be 	bl	8006630 <TOUCH_SaveParam>
 80062b4:	e000      	b.n	80062b8 <TOUCH_Calibration+0x154>
			return;
 80062b6:	bf00      	nop
}
 80062b8:	3714      	adds	r7, #20
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd90      	pop	{r4, r7, pc}
 80062be:	bf00      	nop
 80062c0:	200003b0 	.word	0x200003b0

080062c4 <TOUCH_CelarFIFO>:
*********************************************************************************************************
* Func name: TOUCH_CelarFIFO
*********************************************************************************************************
*/
void TOUCH_CelarFIFO(void)
{
 80062c4:	b480      	push	{r7}
 80062c6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 80062c8:	b662      	cpsie	i
}
 80062ca:	bf00      	nop
	//__set_PRIMASK(1);  		/* ¹ØÖÐ¶Ï */
	__enable_irq();
	g_tTP.Write = g_tTP.Read;
 80062cc:	4b06      	ldr	r3, [pc, #24]	; (80062e8 <TOUCH_CelarFIFO+0x24>)
 80062ce:	f893 207e 	ldrb.w	r2, [r3, #126]	; 0x7e
 80062d2:	4b05      	ldr	r3, [pc, #20]	; (80062e8 <TOUCH_CelarFIFO+0x24>)
 80062d4:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
  __ASM volatile ("cpsid i" : : : "memory");
 80062d8:	b672      	cpsid	i
}
 80062da:	bf00      	nop
	//__set_PRIMASK(0);  		/* ¿ªÖÐ¶Ï */
	__disable_irq();
}
 80062dc:	bf00      	nop
 80062de:	46bd      	mov	sp, r7
 80062e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e4:	4770      	bx	lr
 80062e6:	bf00      	nop
 80062e8:	200003b0 	.word	0x200003b0

080062ec <TOUCH_DispPoint>:
*********************************************************************************************************
* Func name: TOUCH_DispPoint1
*********************************************************************************************************
*/
static void TOUCH_DispPoint(uint8_t _ucIndex)
{
 80062ec:	b590      	push	{r4, r7, lr}
 80062ee:	b087      	sub	sp, #28
 80062f0:	af02      	add	r7, sp, #8
 80062f2:	4603      	mov	r3, r0
 80062f4:	71fb      	strb	r3, [r7, #7]
	FONT_T tFont16;
	{
		tFont16.FontCode = FC_ST_16;	/* ×ÖÌå´úÂë 16µãÕó */
 80062f6:	2300      	movs	r3, #0
 80062f8:	813b      	strh	r3, [r7, #8]
		tFont16.FrontColor = CL_WHITE;		/* ×ÖÌåÑÕÉ« 0 »ò 1 */
 80062fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80062fe:	817b      	strh	r3, [r7, #10]
		tFont16.BackColor = CL_BLUE;	/* ÎÄ×Ö±³¾°ÑÕÉ« */
 8006300:	231f      	movs	r3, #31
 8006302:	81bb      	strh	r3, [r7, #12]
		tFont16.Space = 0;			/* ÎÄ×Ö¼ä¾à£¬µ¥Î» = ÏñËØ */
 8006304:	2300      	movs	r3, #0
 8006306:	81fb      	strh	r3, [r7, #14]
	}
	if (_ucIndex == 0)
 8006308:	79fb      	ldrb	r3, [r7, #7]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d134      	bne.n	8006378 <TOUCH_DispPoint+0x8c>
	{
		LCD_ClrScr(CL_BLUE);
 800630e:	201f      	movs	r0, #31
 8006310:	f7fe fe1e 	bl	8004f50 <LCD_ClrScr>
		LCD_DrawRect(0, 0, LCD_GetHeight(), LCD_GetWidth(), CL_WHITE);
 8006314:	f7ff f956 	bl	80055c4 <LCD_GetHeight>
 8006318:	4603      	mov	r3, r0
 800631a:	461c      	mov	r4, r3
 800631c:	f7ff f95e 	bl	80055dc <LCD_GetWidth>
 8006320:	4603      	mov	r3, r0
 8006322:	461a      	mov	r2, r3
 8006324:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006328:	9300      	str	r3, [sp, #0]
 800632a:	4613      	mov	r3, r2
 800632c:	4622      	mov	r2, r4
 800632e:	2100      	movs	r1, #0
 8006330:	2000      	movs	r0, #0
 8006332:	f7ff f95f 	bl	80055f4 <LCD_DrawRect>
		LCD_DrawRect(2, 2, LCD_GetHeight() - 4, LCD_GetWidth() - 4, CL_YELLOW);
 8006336:	f7ff f945 	bl	80055c4 <LCD_GetHeight>
 800633a:	4603      	mov	r3, r0
 800633c:	3b04      	subs	r3, #4
 800633e:	b29c      	uxth	r4, r3
 8006340:	f7ff f94c 	bl	80055dc <LCD_GetWidth>
 8006344:	4603      	mov	r3, r0
 8006346:	3b04      	subs	r3, #4
 8006348:	b29b      	uxth	r3, r3
 800634a:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800634e:	9200      	str	r2, [sp, #0]
 8006350:	4622      	mov	r2, r4
 8006352:	2102      	movs	r1, #2
 8006354:	2002      	movs	r0, #2
 8006356:	f7ff f94d 	bl	80055f4 <LCD_DrawRect>

		LCD_DispStr(50, 10, "Calibration", &tFont16);
 800635a:	f107 0308 	add.w	r3, r7, #8
 800635e:	4a2f      	ldr	r2, [pc, #188]	; (800641c <TOUCH_DispPoint+0x130>)
 8006360:	210a      	movs	r1, #10
 8006362:	2032      	movs	r0, #50	; 0x32
 8006364:	f7fe fe42 	bl	8004fec <LCD_DispStr>

		LCD_DrawCircle(TP_X1, TP_Y1, 6, CL_WHITE);
 8006368:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800636c:	2206      	movs	r2, #6
 800636e:	2114      	movs	r1, #20
 8006370:	2014      	movs	r0, #20
 8006372:	f7ff f961 	bl	8005638 <LCD_DrawCircle>
	{
		LCD_DrawCircle(TP_X3, TP_Y3, 6, CL_BLUE);			/* ²Á³ýµÚ3¸öµã */

		LCD_DrawCircle(TP_X4, TP_Y4, 6, CL_WHITE);
	}
}
 8006376:	e04c      	b.n	8006412 <TOUCH_DispPoint+0x126>
	else if (_ucIndex == 1)
 8006378:	79fb      	ldrb	r3, [r7, #7]
 800637a:	2b01      	cmp	r3, #1
 800637c:	d116      	bne.n	80063ac <TOUCH_DispPoint+0xc0>
		LCD_DrawCircle(TP_X1, TP_Y1, 6, CL_BLUE);			/* ²Á³ýµÚ1¸öµã */
 800637e:	231f      	movs	r3, #31
 8006380:	2206      	movs	r2, #6
 8006382:	2114      	movs	r1, #20
 8006384:	2014      	movs	r0, #20
 8006386:	f7ff f957 	bl	8005638 <LCD_DrawCircle>
		LCD_DrawCircle(TP_X2, TP_Y2, 6, CL_WHITE);
 800638a:	f7ff f927 	bl	80055dc <LCD_GetWidth>
 800638e:	4603      	mov	r3, r0
 8006390:	3b14      	subs	r3, #20
 8006392:	b29c      	uxth	r4, r3
 8006394:	f7ff f916 	bl	80055c4 <LCD_GetHeight>
 8006398:	4603      	mov	r3, r0
 800639a:	3b14      	subs	r3, #20
 800639c:	b299      	uxth	r1, r3
 800639e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80063a2:	2206      	movs	r2, #6
 80063a4:	4620      	mov	r0, r4
 80063a6:	f7ff f947 	bl	8005638 <LCD_DrawCircle>
}
 80063aa:	e032      	b.n	8006412 <TOUCH_DispPoint+0x126>
	else if (_ucIndex == 2)
 80063ac:	79fb      	ldrb	r3, [r7, #7]
 80063ae:	2b02      	cmp	r3, #2
 80063b0:	d11a      	bne.n	80063e8 <TOUCH_DispPoint+0xfc>
		LCD_DrawCircle(TP_X2, TP_Y2, 6, CL_BLUE);			/* ²Á³ýµÚ2¸öµã */
 80063b2:	f7ff f913 	bl	80055dc <LCD_GetWidth>
 80063b6:	4603      	mov	r3, r0
 80063b8:	3b14      	subs	r3, #20
 80063ba:	b29c      	uxth	r4, r3
 80063bc:	f7ff f902 	bl	80055c4 <LCD_GetHeight>
 80063c0:	4603      	mov	r3, r0
 80063c2:	3b14      	subs	r3, #20
 80063c4:	b299      	uxth	r1, r3
 80063c6:	231f      	movs	r3, #31
 80063c8:	2206      	movs	r2, #6
 80063ca:	4620      	mov	r0, r4
 80063cc:	f7ff f934 	bl	8005638 <LCD_DrawCircle>
		LCD_DrawCircle(TP_X3, TP_Y3, 6, CL_WHITE);
 80063d0:	f7ff f8f8 	bl	80055c4 <LCD_GetHeight>
 80063d4:	4603      	mov	r3, r0
 80063d6:	3b14      	subs	r3, #20
 80063d8:	b299      	uxth	r1, r3
 80063da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80063de:	2206      	movs	r2, #6
 80063e0:	2014      	movs	r0, #20
 80063e2:	f7ff f929 	bl	8005638 <LCD_DrawCircle>
}
 80063e6:	e014      	b.n	8006412 <TOUCH_DispPoint+0x126>
		LCD_DrawCircle(TP_X3, TP_Y3, 6, CL_BLUE);			/* ²Á³ýµÚ3¸öµã */
 80063e8:	f7ff f8ec 	bl	80055c4 <LCD_GetHeight>
 80063ec:	4603      	mov	r3, r0
 80063ee:	3b14      	subs	r3, #20
 80063f0:	b299      	uxth	r1, r3
 80063f2:	231f      	movs	r3, #31
 80063f4:	2206      	movs	r2, #6
 80063f6:	2014      	movs	r0, #20
 80063f8:	f7ff f91e 	bl	8005638 <LCD_DrawCircle>
		LCD_DrawCircle(TP_X4, TP_Y4, 6, CL_WHITE);
 80063fc:	f7ff f8ee 	bl	80055dc <LCD_GetWidth>
 8006400:	4603      	mov	r3, r0
 8006402:	3b14      	subs	r3, #20
 8006404:	b298      	uxth	r0, r3
 8006406:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800640a:	2206      	movs	r2, #6
 800640c:	2114      	movs	r1, #20
 800640e:	f7ff f913 	bl	8005638 <LCD_DrawCircle>
}
 8006412:	bf00      	nop
 8006414:	3714      	adds	r7, #20
 8006416:	46bd      	mov	sp, r7
 8006418:	bd90      	pop	{r4, r7, pc}
 800641a:	bf00      	nop
 800641c:	0800a990 	.word	0x0800a990

08006420 <TOUCH_WaitRelease>:
*********************************************************************************************************
* Func name: TOUCH_WaitRelease
*********************************************************************************************************
*/
void TOUCH_WaitRelease(void)
{
 8006420:	b590      	push	{r4, r7, lr}
 8006422:	b083      	sub	sp, #12
 8006424:	af00      	add	r7, sp, #0
	uint8_t usCount = 0;
 8006426:	2300      	movs	r3, #0
 8006428:	71fb      	strb	r3, [r7, #7]

	for (;;)
	{
		if (TOUCH_PressValid(TOUCH_ReadAdcX(), TOUCH_ReadAdcY()) == 0)
 800642a:	f000 f843 	bl	80064b4 <TOUCH_ReadAdcX>
 800642e:	4603      	mov	r3, r0
 8006430:	461c      	mov	r4, r3
 8006432:	f000 f85b 	bl	80064ec <TOUCH_ReadAdcY>
 8006436:	4603      	mov	r3, r0
 8006438:	4619      	mov	r1, r3
 800643a:	4620      	mov	r0, r4
 800643c:	f000 f814 	bl	8006468 <TOUCH_PressValid>
 8006440:	4603      	mov	r3, r0
 8006442:	2b00      	cmp	r3, #0
 8006444:	d106      	bne.n	8006454 <TOUCH_WaitRelease+0x34>
		{
			if (++usCount > 5)
 8006446:	79fb      	ldrb	r3, [r7, #7]
 8006448:	3301      	adds	r3, #1
 800644a:	71fb      	strb	r3, [r7, #7]
 800644c:	79fb      	ldrb	r3, [r7, #7]
 800644e:	2b05      	cmp	r3, #5
 8006450:	d902      	bls.n	8006458 <TOUCH_WaitRelease+0x38>
			{
				break;
 8006452:	e005      	b.n	8006460 <TOUCH_WaitRelease+0x40>
			}
		}
		else
		{
			usCount = 0;
 8006454:	2300      	movs	r3, #0
 8006456:	71fb      	strb	r3, [r7, #7]
		}
		bsp_DelayMS(10);
 8006458:	200a      	movs	r0, #10
 800645a:	f7ff fb73 	bl	8005b44 <bsp_DelayMS>
		if (TOUCH_PressValid(TOUCH_ReadAdcX(), TOUCH_ReadAdcY()) == 0)
 800645e:	e7e4      	b.n	800642a <TOUCH_WaitRelease+0xa>
	}
}
 8006460:	bf00      	nop
 8006462:	370c      	adds	r7, #12
 8006464:	46bd      	mov	sp, r7
 8006466:	bd90      	pop	{r4, r7, pc}

08006468 <TOUCH_PressValid>:
*	ÐÎ    ²Î:  ÎÞ
*	·µ »Ø Öµ: 1 ±íÊ¾ÓÐÐ§£» 0 ±íÊ¾ÎÞÐ§
*********************************************************************************************************
*/
static uint8_t	TOUCH_PressValid(uint16_t _usX, uint16_t _usY)
{
 8006468:	b480      	push	{r7}
 800646a:	b083      	sub	sp, #12
 800646c:	af00      	add	r7, sp, #0
 800646e:	4603      	mov	r3, r0
 8006470:	460a      	mov	r2, r1
 8006472:	80fb      	strh	r3, [r7, #6]
 8006474:	4613      	mov	r3, r2
 8006476:	80bb      	strh	r3, [r7, #4]
	if ((_usX <= ADC_VALID_OFFSET) || (_usY <= ADC_VALID_OFFSET)
 8006478:	88fb      	ldrh	r3, [r7, #6]
 800647a:	2b02      	cmp	r3, #2
 800647c:	d90e      	bls.n	800649c <TOUCH_PressValid+0x34>
 800647e:	88bb      	ldrh	r3, [r7, #4]
 8006480:	2b02      	cmp	r3, #2
 8006482:	d90b      	bls.n	800649c <TOUCH_PressValid+0x34>
			|| (_usX >= g_tTP.usMaxAdc - ADC_VALID_OFFSET)
 8006484:	88fa      	ldrh	r2, [r7, #6]
 8006486:	4b0a      	ldr	r3, [pc, #40]	; (80064b0 <TOUCH_PressValid+0x48>)
 8006488:	8a5b      	ldrh	r3, [r3, #18]
 800648a:	3b02      	subs	r3, #2
 800648c:	429a      	cmp	r2, r3
 800648e:	da05      	bge.n	800649c <TOUCH_PressValid+0x34>
			|| (_usY >= g_tTP.usMaxAdc - ADC_VALID_OFFSET))
 8006490:	88ba      	ldrh	r2, [r7, #4]
 8006492:	4b07      	ldr	r3, [pc, #28]	; (80064b0 <TOUCH_PressValid+0x48>)
 8006494:	8a5b      	ldrh	r3, [r3, #18]
 8006496:	3b02      	subs	r3, #2
 8006498:	429a      	cmp	r2, r3
 800649a:	db01      	blt.n	80064a0 <TOUCH_PressValid+0x38>
	{
		return 0;
 800649c:	2300      	movs	r3, #0
 800649e:	e000      	b.n	80064a2 <TOUCH_PressValid+0x3a>
	}
	else
	{
		return 1;
 80064a0:	2301      	movs	r3, #1
	}
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	370c      	adds	r7, #12
 80064a6:	46bd      	mov	sp, r7
 80064a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ac:	4770      	bx	lr
 80064ae:	bf00      	nop
 80064b0:	200003b0 	.word	0x200003b0

080064b4 <TOUCH_ReadAdcX>:
*********************************************************************************************************
*	Func name: TOUCH_ReadAdcX
*********************************************************************************************************
*/
uint16_t TOUCH_ReadAdcX(void)
{
 80064b4:	b480      	push	{r7}
 80064b6:	b085      	sub	sp, #20
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	2301      	movs	r3, #1
 80064bc:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	f383 8810 	msr	PRIMASK, r3
}
 80064c4:	bf00      	nop
	uint16_t usAdc;

	__set_PRIMASK(1);  		/* ¹ØÖÐ¶Ï */

	usAdc = g_tTP.usAdcNowX;
 80064c6:	4b08      	ldr	r3, [pc, #32]	; (80064e8 <TOUCH_ReadAdcX+0x34>)
 80064c8:	8a9b      	ldrh	r3, [r3, #20]
 80064ca:	81fb      	strh	r3, [r7, #14]
 80064cc:	2300      	movs	r3, #0
 80064ce:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	f383 8810 	msr	PRIMASK, r3
}
 80064d6:	bf00      	nop
	__set_PRIMASK(0);  		/* ¿ªÖÐ¶Ï */

	return usAdc;
 80064d8:	89fb      	ldrh	r3, [r7, #14]
}
 80064da:	4618      	mov	r0, r3
 80064dc:	3714      	adds	r7, #20
 80064de:	46bd      	mov	sp, r7
 80064e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e4:	4770      	bx	lr
 80064e6:	bf00      	nop
 80064e8:	200003b0 	.word	0x200003b0

080064ec <TOUCH_ReadAdcY>:
*********************************************************************************************************
*	Func name: TOUCH_ReadAdcY
*********************************************************************************************************
*/
uint16_t TOUCH_ReadAdcY(void)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b085      	sub	sp, #20
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	2301      	movs	r3, #1
 80064f4:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	f383 8810 	msr	PRIMASK, r3
}
 80064fc:	bf00      	nop
	uint16_t usAdc;

	__set_PRIMASK(1);  		/* ¹ØÖÐ¶Ï */
	usAdc = g_tTP.usAdcNowY;
 80064fe:	4b08      	ldr	r3, [pc, #32]	; (8006520 <TOUCH_ReadAdcY+0x34>)
 8006500:	8adb      	ldrh	r3, [r3, #22]
 8006502:	81fb      	strh	r3, [r7, #14]
 8006504:	2300      	movs	r3, #0
 8006506:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	f383 8810 	msr	PRIMASK, r3
}
 800650e:	bf00      	nop
	__set_PRIMASK(0);  		/* ¿ªÖÐ¶Ï */

	return usAdc;
 8006510:	89fb      	ldrh	r3, [r7, #14]
}
 8006512:	4618      	mov	r0, r3
 8006514:	3714      	adds	r7, #20
 8006516:	46bd      	mov	sp, r7
 8006518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651c:	4770      	bx	lr
 800651e:	bf00      	nop
 8006520:	200003b0 	.word	0x200003b0

08006524 <TOUCH_Abs>:
*********************************************************************************************************
* Func name: TOUCH_Abs
*********************************************************************************************************
*/
int32_t TOUCH_Abs(int32_t x)
{
 8006524:	b480      	push	{r7}
 8006526:	b083      	sub	sp, #12
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
	if (x >= 0)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2b00      	cmp	r3, #0
 8006530:	db01      	blt.n	8006536 <TOUCH_Abs+0x12>
	{
		return x;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	e001      	b.n	800653a <TOUCH_Abs+0x16>
	}
	else
	{
		return -x;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	425b      	negs	r3, r3
	}
}
 800653a:	4618      	mov	r0, r3
 800653c:	370c      	adds	r7, #12
 800653e:	46bd      	mov	sp, r7
 8006540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006544:	4770      	bx	lr
	...

08006548 <TOUCH_DataFilter>:
*********************************************************************************************************
*  Func name: TOUCH_DataFilter
*********************************************************************************************************
*/
static uint16_t TOUCH_DataFilter(uint16_t *_pBuf, uint8_t _ucCount)
{
 8006548:	b480      	push	{r7}
 800654a:	b087      	sub	sp, #28
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
 8006550:	460b      	mov	r3, r1
 8006552:	70fb      	strb	r3, [r7, #3]
	uint16_t usTemp;
	uint32_t uiSum;

	do
	{
		flag = 0;
 8006554:	2300      	movs	r3, #0
 8006556:	75fb      	strb	r3, [r7, #23]
		for (i = 0; i < _ucCount - 1; i++)
 8006558:	2300      	movs	r3, #0
 800655a:	75bb      	strb	r3, [r7, #22]
 800655c:	e029      	b.n	80065b2 <TOUCH_DataFilter+0x6a>
		{
			if (_pBuf[i] > _pBuf[i+1])
 800655e:	7dbb      	ldrb	r3, [r7, #22]
 8006560:	005b      	lsls	r3, r3, #1
 8006562:	687a      	ldr	r2, [r7, #4]
 8006564:	4413      	add	r3, r2
 8006566:	881a      	ldrh	r2, [r3, #0]
 8006568:	7dbb      	ldrb	r3, [r7, #22]
 800656a:	3301      	adds	r3, #1
 800656c:	005b      	lsls	r3, r3, #1
 800656e:	6879      	ldr	r1, [r7, #4]
 8006570:	440b      	add	r3, r1
 8006572:	881b      	ldrh	r3, [r3, #0]
 8006574:	429a      	cmp	r2, r3
 8006576:	d919      	bls.n	80065ac <TOUCH_DataFilter+0x64>
			{
				usTemp = _pBuf[i + 1];
 8006578:	7dbb      	ldrb	r3, [r7, #22]
 800657a:	3301      	adds	r3, #1
 800657c:	005b      	lsls	r3, r3, #1
 800657e:	687a      	ldr	r2, [r7, #4]
 8006580:	4413      	add	r3, r2
 8006582:	881b      	ldrh	r3, [r3, #0]
 8006584:	81fb      	strh	r3, [r7, #14]
				_pBuf[i+1] = _pBuf[i];
 8006586:	7dbb      	ldrb	r3, [r7, #22]
 8006588:	005b      	lsls	r3, r3, #1
 800658a:	687a      	ldr	r2, [r7, #4]
 800658c:	441a      	add	r2, r3
 800658e:	7dbb      	ldrb	r3, [r7, #22]
 8006590:	3301      	adds	r3, #1
 8006592:	005b      	lsls	r3, r3, #1
 8006594:	6879      	ldr	r1, [r7, #4]
 8006596:	440b      	add	r3, r1
 8006598:	8812      	ldrh	r2, [r2, #0]
 800659a:	801a      	strh	r2, [r3, #0]
				_pBuf[i] = usTemp;
 800659c:	7dbb      	ldrb	r3, [r7, #22]
 800659e:	005b      	lsls	r3, r3, #1
 80065a0:	687a      	ldr	r2, [r7, #4]
 80065a2:	4413      	add	r3, r2
 80065a4:	89fa      	ldrh	r2, [r7, #14]
 80065a6:	801a      	strh	r2, [r3, #0]
				flag = 1;
 80065a8:	2301      	movs	r3, #1
 80065aa:	75fb      	strb	r3, [r7, #23]
		for (i = 0; i < _ucCount - 1; i++)
 80065ac:	7dbb      	ldrb	r3, [r7, #22]
 80065ae:	3301      	adds	r3, #1
 80065b0:	75bb      	strb	r3, [r7, #22]
 80065b2:	7dba      	ldrb	r2, [r7, #22]
 80065b4:	78fb      	ldrb	r3, [r7, #3]
 80065b6:	3b01      	subs	r3, #1
 80065b8:	429a      	cmp	r2, r3
 80065ba:	dbd0      	blt.n	800655e <TOUCH_DataFilter+0x16>
			}
		}
	}while(flag);
 80065bc:	7dfb      	ldrb	r3, [r7, #23]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d1c8      	bne.n	8006554 <TOUCH_DataFilter+0xc>

	uiSum = 0;
 80065c2:	2300      	movs	r3, #0
 80065c4:	613b      	str	r3, [r7, #16]
	for (i = 0; i < _ucCount / 3; i++)
 80065c6:	2300      	movs	r3, #0
 80065c8:	75bb      	strb	r3, [r7, #22]
 80065ca:	e013      	b.n	80065f4 <TOUCH_DataFilter+0xac>
	{
		uiSum += _pBuf[_ucCount / 3 + i];
 80065cc:	78fb      	ldrb	r3, [r7, #3]
 80065ce:	4a17      	ldr	r2, [pc, #92]	; (800662c <TOUCH_DataFilter+0xe4>)
 80065d0:	fba2 2303 	umull	r2, r3, r2, r3
 80065d4:	085b      	lsrs	r3, r3, #1
 80065d6:	b2db      	uxtb	r3, r3
 80065d8:	461a      	mov	r2, r3
 80065da:	7dbb      	ldrb	r3, [r7, #22]
 80065dc:	4413      	add	r3, r2
 80065de:	005b      	lsls	r3, r3, #1
 80065e0:	687a      	ldr	r2, [r7, #4]
 80065e2:	4413      	add	r3, r2
 80065e4:	881b      	ldrh	r3, [r3, #0]
 80065e6:	461a      	mov	r2, r3
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	4413      	add	r3, r2
 80065ec:	613b      	str	r3, [r7, #16]
	for (i = 0; i < _ucCount / 3; i++)
 80065ee:	7dbb      	ldrb	r3, [r7, #22]
 80065f0:	3301      	adds	r3, #1
 80065f2:	75bb      	strb	r3, [r7, #22]
 80065f4:	78fb      	ldrb	r3, [r7, #3]
 80065f6:	4a0d      	ldr	r2, [pc, #52]	; (800662c <TOUCH_DataFilter+0xe4>)
 80065f8:	fba2 2303 	umull	r2, r3, r2, r3
 80065fc:	085b      	lsrs	r3, r3, #1
 80065fe:	b2db      	uxtb	r3, r3
 8006600:	7dba      	ldrb	r2, [r7, #22]
 8006602:	429a      	cmp	r2, r3
 8006604:	d3e2      	bcc.n	80065cc <TOUCH_DataFilter+0x84>
	}
	usTemp = uiSum / (_ucCount / 3);
 8006606:	78fb      	ldrb	r3, [r7, #3]
 8006608:	4a08      	ldr	r2, [pc, #32]	; (800662c <TOUCH_DataFilter+0xe4>)
 800660a:	fba2 2303 	umull	r2, r3, r2, r3
 800660e:	085b      	lsrs	r3, r3, #1
 8006610:	b2db      	uxtb	r3, r3
 8006612:	461a      	mov	r2, r3
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	fbb3 f3f2 	udiv	r3, r3, r2
 800661a:	81fb      	strh	r3, [r7, #14]
	return usTemp;
 800661c:	89fb      	ldrh	r3, [r7, #14]
}
 800661e:	4618      	mov	r0, r3
 8006620:	371c      	adds	r7, #28
 8006622:	46bd      	mov	sp, r7
 8006624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006628:	4770      	bx	lr
 800662a:	bf00      	nop
 800662c:	aaaaaaab 	.word	0xaaaaaaab

08006630 <TOUCH_SaveParam>:
*	Func name: TOUCH_SaveParam
*********************************************************************************************************
*/
extern void SaveParam(void);
static void TOUCH_SaveParam(void)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	af00      	add	r7, sp, #0
#if 1
	g_tParam.usAdcX1 = g_tTP.usAdcX1;
 8006634:	4b13      	ldr	r3, [pc, #76]	; (8006684 <TOUCH_SaveParam+0x54>)
 8006636:	881a      	ldrh	r2, [r3, #0]
 8006638:	4b13      	ldr	r3, [pc, #76]	; (8006688 <TOUCH_SaveParam+0x58>)
 800663a:	80da      	strh	r2, [r3, #6]
	g_tParam.usAdcY1 = g_tTP.usAdcY1;
 800663c:	4b11      	ldr	r3, [pc, #68]	; (8006684 <TOUCH_SaveParam+0x54>)
 800663e:	885a      	ldrh	r2, [r3, #2]
 8006640:	4b11      	ldr	r3, [pc, #68]	; (8006688 <TOUCH_SaveParam+0x58>)
 8006642:	811a      	strh	r2, [r3, #8]
	g_tParam.usAdcX2 = g_tTP.usAdcX2;
 8006644:	4b0f      	ldr	r3, [pc, #60]	; (8006684 <TOUCH_SaveParam+0x54>)
 8006646:	889a      	ldrh	r2, [r3, #4]
 8006648:	4b0f      	ldr	r3, [pc, #60]	; (8006688 <TOUCH_SaveParam+0x58>)
 800664a:	815a      	strh	r2, [r3, #10]
	g_tParam.usAdcY2 = g_tTP.usAdcY2;
 800664c:	4b0d      	ldr	r3, [pc, #52]	; (8006684 <TOUCH_SaveParam+0x54>)
 800664e:	88da      	ldrh	r2, [r3, #6]
 8006650:	4b0d      	ldr	r3, [pc, #52]	; (8006688 <TOUCH_SaveParam+0x58>)
 8006652:	819a      	strh	r2, [r3, #12]
	g_tParam.usAdcX3 = g_tTP.usAdcX3;
 8006654:	4b0b      	ldr	r3, [pc, #44]	; (8006684 <TOUCH_SaveParam+0x54>)
 8006656:	891a      	ldrh	r2, [r3, #8]
 8006658:	4b0b      	ldr	r3, [pc, #44]	; (8006688 <TOUCH_SaveParam+0x58>)
 800665a:	81da      	strh	r2, [r3, #14]
	g_tParam.usAdcY3 = g_tTP.usAdcY3;
 800665c:	4b09      	ldr	r3, [pc, #36]	; (8006684 <TOUCH_SaveParam+0x54>)
 800665e:	895a      	ldrh	r2, [r3, #10]
 8006660:	4b09      	ldr	r3, [pc, #36]	; (8006688 <TOUCH_SaveParam+0x58>)
 8006662:	821a      	strh	r2, [r3, #16]
	g_tParam.usAdcX4 = g_tTP.usAdcX4;
 8006664:	4b07      	ldr	r3, [pc, #28]	; (8006684 <TOUCH_SaveParam+0x54>)
 8006666:	899a      	ldrh	r2, [r3, #12]
 8006668:	4b07      	ldr	r3, [pc, #28]	; (8006688 <TOUCH_SaveParam+0x58>)
 800666a:	825a      	strh	r2, [r3, #18]
	g_tParam.usAdcY4 = g_tTP.usAdcY4;
 800666c:	4b05      	ldr	r3, [pc, #20]	; (8006684 <TOUCH_SaveParam+0x54>)
 800666e:	89da      	ldrh	r2, [r3, #14]
 8006670:	4b05      	ldr	r3, [pc, #20]	; (8006688 <TOUCH_SaveParam+0x58>)
 8006672:	829a      	strh	r2, [r3, #20]
	g_tParam.XYChange = g_tTP.XYChange;
 8006674:	4b03      	ldr	r3, [pc, #12]	; (8006684 <TOUCH_SaveParam+0x54>)
 8006676:	8a1a      	ldrh	r2, [r3, #16]
 8006678:	4b03      	ldr	r3, [pc, #12]	; (8006688 <TOUCH_SaveParam+0x58>)
 800667a:	82da      	strh	r2, [r3, #22]

	SaveParam();	/* ½«²ÎÊýÐ´ÈëFlash */
 800667c:	f7fb f98a 	bl	8001994 <SaveParam>
#endif
}
 8006680:	bf00      	nop
 8006682:	bd80      	pop	{r7, pc}
 8006684:	200003b0 	.word	0x200003b0
 8006688:	20000200 	.word	0x20000200

0800668c <bsp_InitUart>:
*********************************************************************************************************
*	Func name: bsp_InitUart
*********************************************************************************************************
*/
void bsp_InitUart(void)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	af00      	add	r7, sp, #0
	UartVarInit();		/* ±ØÐëÏÈ³õÊ¼»¯È«¾Ö±äÁ¿,ÔÙÅäÖÃÓ²¼þ */
 8006690:	f000 f81e 	bl	80066d0 <UartVarInit>

	InitHardUart();		/* ÅäÖÃ´®¿ÚµÄÓ²¼þ²ÎÊý(²¨ÌØÂÊµÈ) */
 8006694:	f000 f8f6 	bl	8006884 <InitHardUart>

	ConfigUartNVIC();	/* ÅäÖÃ´®¿ÚÖÐ¶Ï */
 8006698:	f000 f9d6 	bl	8006a48 <ConfigUartNVIC>
}
 800669c:	bf00      	nop
 800669e:	bd80      	pop	{r7, pc}

080066a0 <USART3_SendBefor>:
*********************************************************************************************************
*	Func name: USART3_SendBefor
*********************************************************************************************************
*/
void USART3_SendBefor(void)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	af00      	add	r7, sp, #0
	RS485_TX_EN();	/* ÇÐ»»RS485ÊÕ·¢Ð¾Æ¬Îª·¢ËÍÄ£Ê½ */
 80066a4:	2201      	movs	r2, #1
 80066a6:	2104      	movs	r1, #4
 80066a8:	4802      	ldr	r0, [pc, #8]	; (80066b4 <USART3_SendBefor+0x14>)
 80066aa:	f000 fdb1 	bl	8007210 <HAL_GPIO_WritePin>
}
 80066ae:	bf00      	nop
 80066b0:	bd80      	pop	{r7, pc}
 80066b2:	bf00      	nop
 80066b4:	40020400 	.word	0x40020400

080066b8 <USART3_SendOver>:
*********************************************************************************************************
*	Func name: USART3_SendOver
*********************************************************************************************************
*/
void USART3_SendOver(void)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	af00      	add	r7, sp, #0
	RS485_RX_EN();	/* ÇÐ»»RS485ÊÕ·¢Ð¾Æ¬Îª½ÓÊÕÄ£Ê½ */
 80066bc:	2200      	movs	r2, #0
 80066be:	2104      	movs	r1, #4
 80066c0:	4802      	ldr	r0, [pc, #8]	; (80066cc <USART3_SendOver+0x14>)
 80066c2:	f000 fda5 	bl	8007210 <HAL_GPIO_WritePin>
}
 80066c6:	bf00      	nop
 80066c8:	bd80      	pop	{r7, pc}
 80066ca:	bf00      	nop
 80066cc:	40020400 	.word	0x40020400

080066d0 <UartVarInit>:
*********************************************************************************************************
*	Func name: UartVarInit
*********************************************************************************************************
*/
static void UartVarInit(void)
{
 80066d0:	b480      	push	{r7}
 80066d2:	af00      	add	r7, sp, #0
#if UART1_FIFO_EN == 1
	g_tUart1.uart = USART1;						/* STM32 ´®¿ÚÉè±¸ */
 80066d4:	4b59      	ldr	r3, [pc, #356]	; (800683c <UartVarInit+0x16c>)
 80066d6:	4a5a      	ldr	r2, [pc, #360]	; (8006840 <UartVarInit+0x170>)
 80066d8:	601a      	str	r2, [r3, #0]
	g_tUart1.pTxBuf = g_TxBuf1;					/* ·¢ËÍ»º³åÇøÖ¸Õë */
 80066da:	4b58      	ldr	r3, [pc, #352]	; (800683c <UartVarInit+0x16c>)
 80066dc:	4a59      	ldr	r2, [pc, #356]	; (8006844 <UartVarInit+0x174>)
 80066de:	605a      	str	r2, [r3, #4]
	g_tUart1.pRxBuf = g_RxBuf1;					/* ½ÓÊÕ»º³åÇøÖ¸Õë */
 80066e0:	4b56      	ldr	r3, [pc, #344]	; (800683c <UartVarInit+0x16c>)
 80066e2:	4a59      	ldr	r2, [pc, #356]	; (8006848 <UartVarInit+0x178>)
 80066e4:	609a      	str	r2, [r3, #8]
	g_tUart1.usTxBufSize = UART1_TX_BUF_SIZE;	/* ·¢ËÍ»º³åÇø´óÐ¡ */
 80066e6:	4b55      	ldr	r3, [pc, #340]	; (800683c <UartVarInit+0x16c>)
 80066e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80066ec:	819a      	strh	r2, [r3, #12]
	g_tUart1.usRxBufSize = UART1_RX_BUF_SIZE;	/* ½ÓÊÕ»º³åÇø´óÐ¡ */
 80066ee:	4b53      	ldr	r3, [pc, #332]	; (800683c <UartVarInit+0x16c>)
 80066f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80066f4:	81da      	strh	r2, [r3, #14]
	g_tUart1.usTxWrite = 0;						/* ·¢ËÍFIFOÐ´Ë÷Òý */
 80066f6:	4b51      	ldr	r3, [pc, #324]	; (800683c <UartVarInit+0x16c>)
 80066f8:	2200      	movs	r2, #0
 80066fa:	821a      	strh	r2, [r3, #16]
	g_tUart1.usTxRead = 0;						/* ·¢ËÍFIFO¶ÁË÷Òý */
 80066fc:	4b4f      	ldr	r3, [pc, #316]	; (800683c <UartVarInit+0x16c>)
 80066fe:	2200      	movs	r2, #0
 8006700:	825a      	strh	r2, [r3, #18]
	g_tUart1.usRxWrite = 0;						/* ½ÓÊÕFIFOÐ´Ë÷Òý */
 8006702:	4b4e      	ldr	r3, [pc, #312]	; (800683c <UartVarInit+0x16c>)
 8006704:	2200      	movs	r2, #0
 8006706:	82da      	strh	r2, [r3, #22]
	g_tUart1.usRxRead = 0;						/* ½ÓÊÕFIFO¶ÁË÷Òý */
 8006708:	4b4c      	ldr	r3, [pc, #304]	; (800683c <UartVarInit+0x16c>)
 800670a:	2200      	movs	r2, #0
 800670c:	831a      	strh	r2, [r3, #24]
	g_tUart1.usRxCount = 0;						/* ½ÓÊÕµ½µÄÐÂÊý¾Ý¸öÊý */
 800670e:	4b4b      	ldr	r3, [pc, #300]	; (800683c <UartVarInit+0x16c>)
 8006710:	2200      	movs	r2, #0
 8006712:	835a      	strh	r2, [r3, #26]
	g_tUart1.usTxCount = 0;						/* ´ý·¢ËÍµÄÊý¾Ý¸öÊý */
 8006714:	4b49      	ldr	r3, [pc, #292]	; (800683c <UartVarInit+0x16c>)
 8006716:	2200      	movs	r2, #0
 8006718:	829a      	strh	r2, [r3, #20]
	g_tUart1.SendBefor = 0;						/* ·¢ËÍÊý¾ÝÇ°µÄ»Øµ÷º¯Êý */
 800671a:	4b48      	ldr	r3, [pc, #288]	; (800683c <UartVarInit+0x16c>)
 800671c:	2200      	movs	r2, #0
 800671e:	61da      	str	r2, [r3, #28]
	g_tUart1.SendOver = 0;						/* ·¢ËÍÍê±ÏºóµÄ»Øµ÷º¯Êý */
 8006720:	4b46      	ldr	r3, [pc, #280]	; (800683c <UartVarInit+0x16c>)
 8006722:	2200      	movs	r2, #0
 8006724:	621a      	str	r2, [r3, #32]
	g_tUart1.ReciveNew = 0;						/* ½ÓÊÕµ½ÐÂÊý¾ÝºóµÄ»Øµ÷º¯Êý */
 8006726:	4b45      	ldr	r3, [pc, #276]	; (800683c <UartVarInit+0x16c>)
 8006728:	2200      	movs	r2, #0
 800672a:	625a      	str	r2, [r3, #36]	; 0x24
#endif

#if UART2_FIFO_EN == 1
	g_tUart2.uart = USART2;						/* STM32 ´®¿ÚÉè±¸ */
 800672c:	4b47      	ldr	r3, [pc, #284]	; (800684c <UartVarInit+0x17c>)
 800672e:	4a48      	ldr	r2, [pc, #288]	; (8006850 <UartVarInit+0x180>)
 8006730:	601a      	str	r2, [r3, #0]
	g_tUart2.pTxBuf = g_TxBuf2;					/* ·¢ËÍ»º³åÇøÖ¸Õë */
 8006732:	4b46      	ldr	r3, [pc, #280]	; (800684c <UartVarInit+0x17c>)
 8006734:	4a47      	ldr	r2, [pc, #284]	; (8006854 <UartVarInit+0x184>)
 8006736:	605a      	str	r2, [r3, #4]
	g_tUart2.pRxBuf = g_RxBuf2;					/* ½ÓÊÕ»º³åÇøÖ¸Õë */
 8006738:	4b44      	ldr	r3, [pc, #272]	; (800684c <UartVarInit+0x17c>)
 800673a:	4a47      	ldr	r2, [pc, #284]	; (8006858 <UartVarInit+0x188>)
 800673c:	609a      	str	r2, [r3, #8]
	g_tUart2.usTxBufSize = UART2_TX_BUF_SIZE;	/* ·¢ËÍ»º³åÇø´óÐ¡ */
 800673e:	4b43      	ldr	r3, [pc, #268]	; (800684c <UartVarInit+0x17c>)
 8006740:	2201      	movs	r2, #1
 8006742:	819a      	strh	r2, [r3, #12]
	g_tUart2.usRxBufSize = UART2_RX_BUF_SIZE;	/* ½ÓÊÕ»º³åÇø´óÐ¡ */
 8006744:	4b41      	ldr	r3, [pc, #260]	; (800684c <UartVarInit+0x17c>)
 8006746:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800674a:	81da      	strh	r2, [r3, #14]
	g_tUart2.usTxWrite = 0;						/* ·¢ËÍFIFOÐ´Ë÷Òý */
 800674c:	4b3f      	ldr	r3, [pc, #252]	; (800684c <UartVarInit+0x17c>)
 800674e:	2200      	movs	r2, #0
 8006750:	821a      	strh	r2, [r3, #16]
	g_tUart2.usTxRead = 0;						/* ·¢ËÍFIFO¶ÁË÷Òý */
 8006752:	4b3e      	ldr	r3, [pc, #248]	; (800684c <UartVarInit+0x17c>)
 8006754:	2200      	movs	r2, #0
 8006756:	825a      	strh	r2, [r3, #18]
	g_tUart2.usRxWrite = 0;						/* ½ÓÊÕFIFOÐ´Ë÷Òý */
 8006758:	4b3c      	ldr	r3, [pc, #240]	; (800684c <UartVarInit+0x17c>)
 800675a:	2200      	movs	r2, #0
 800675c:	82da      	strh	r2, [r3, #22]
	g_tUart2.usRxRead = 0;						/* ½ÓÊÕFIFO¶ÁË÷Òý */
 800675e:	4b3b      	ldr	r3, [pc, #236]	; (800684c <UartVarInit+0x17c>)
 8006760:	2200      	movs	r2, #0
 8006762:	831a      	strh	r2, [r3, #24]
	g_tUart2.usRxCount = 0;						/* ½ÓÊÕµ½µÄÐÂÊý¾Ý¸öÊý */
 8006764:	4b39      	ldr	r3, [pc, #228]	; (800684c <UartVarInit+0x17c>)
 8006766:	2200      	movs	r2, #0
 8006768:	835a      	strh	r2, [r3, #26]
	g_tUart2.usTxCount = 0;						/* ´ý·¢ËÍµÄÊý¾Ý¸öÊý */
 800676a:	4b38      	ldr	r3, [pc, #224]	; (800684c <UartVarInit+0x17c>)
 800676c:	2200      	movs	r2, #0
 800676e:	829a      	strh	r2, [r3, #20]
	g_tUart2.SendBefor = 0;						/* ·¢ËÍÊý¾ÝÇ°µÄ»Øµ÷º¯Êý */
 8006770:	4b36      	ldr	r3, [pc, #216]	; (800684c <UartVarInit+0x17c>)
 8006772:	2200      	movs	r2, #0
 8006774:	61da      	str	r2, [r3, #28]
	g_tUart2.SendOver = 0;						/* ·¢ËÍÍê±ÏºóµÄ»Øµ÷º¯Êý */
 8006776:	4b35      	ldr	r3, [pc, #212]	; (800684c <UartVarInit+0x17c>)
 8006778:	2200      	movs	r2, #0
 800677a:	621a      	str	r2, [r3, #32]
	g_tUart2.ReciveNew = 0;						/* ½ÓÊÕµ½ÐÂÊý¾ÝºóµÄ»Øµ÷º¯Êý */
 800677c:	4b33      	ldr	r3, [pc, #204]	; (800684c <UartVarInit+0x17c>)
 800677e:	2200      	movs	r2, #0
 8006780:	625a      	str	r2, [r3, #36]	; 0x24
#endif

#if UART3_FIFO_EN == 1
	g_tUart3.uart = USART3;						/* STM32 ´®¿ÚÉè±¸ */
 8006782:	4b36      	ldr	r3, [pc, #216]	; (800685c <UartVarInit+0x18c>)
 8006784:	4a36      	ldr	r2, [pc, #216]	; (8006860 <UartVarInit+0x190>)
 8006786:	601a      	str	r2, [r3, #0]
	g_tUart3.pTxBuf = g_TxBuf3;					/* ·¢ËÍ»º³åÇøÖ¸Õë */
 8006788:	4b34      	ldr	r3, [pc, #208]	; (800685c <UartVarInit+0x18c>)
 800678a:	4a36      	ldr	r2, [pc, #216]	; (8006864 <UartVarInit+0x194>)
 800678c:	605a      	str	r2, [r3, #4]
	g_tUart3.pRxBuf = g_RxBuf3;					/* ½ÓÊÕ»º³åÇøÖ¸Õë */
 800678e:	4b33      	ldr	r3, [pc, #204]	; (800685c <UartVarInit+0x18c>)
 8006790:	4a35      	ldr	r2, [pc, #212]	; (8006868 <UartVarInit+0x198>)
 8006792:	609a      	str	r2, [r3, #8]
	g_tUart3.usTxBufSize = UART3_TX_BUF_SIZE;	/* ·¢ËÍ»º³åÇø´óÐ¡ */
 8006794:	4b31      	ldr	r3, [pc, #196]	; (800685c <UartVarInit+0x18c>)
 8006796:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800679a:	819a      	strh	r2, [r3, #12]
	g_tUart3.usRxBufSize = UART3_RX_BUF_SIZE;	/* ½ÓÊÕ»º³åÇø´óÐ¡ */
 800679c:	4b2f      	ldr	r3, [pc, #188]	; (800685c <UartVarInit+0x18c>)
 800679e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80067a2:	81da      	strh	r2, [r3, #14]
	g_tUart3.usTxWrite = 0;						/* ·¢ËÍFIFOÐ´Ë÷Òý */
 80067a4:	4b2d      	ldr	r3, [pc, #180]	; (800685c <UartVarInit+0x18c>)
 80067a6:	2200      	movs	r2, #0
 80067a8:	821a      	strh	r2, [r3, #16]
	g_tUart3.usTxRead = 0;						/* ·¢ËÍFIFO¶ÁË÷Òý */
 80067aa:	4b2c      	ldr	r3, [pc, #176]	; (800685c <UartVarInit+0x18c>)
 80067ac:	2200      	movs	r2, #0
 80067ae:	825a      	strh	r2, [r3, #18]
	g_tUart3.usRxWrite = 0;						/* ½ÓÊÕFIFOÐ´Ë÷Òý */
 80067b0:	4b2a      	ldr	r3, [pc, #168]	; (800685c <UartVarInit+0x18c>)
 80067b2:	2200      	movs	r2, #0
 80067b4:	82da      	strh	r2, [r3, #22]
	g_tUart3.usRxRead = 0;						/* ½ÓÊÕFIFO¶ÁË÷Òý */
 80067b6:	4b29      	ldr	r3, [pc, #164]	; (800685c <UartVarInit+0x18c>)
 80067b8:	2200      	movs	r2, #0
 80067ba:	831a      	strh	r2, [r3, #24]
	g_tUart3.usRxCount = 0;						/* ½ÓÊÕµ½µÄÐÂÊý¾Ý¸öÊý */
 80067bc:	4b27      	ldr	r3, [pc, #156]	; (800685c <UartVarInit+0x18c>)
 80067be:	2200      	movs	r2, #0
 80067c0:	835a      	strh	r2, [r3, #26]
	g_tUart3.usTxCount = 0;						/* ´ý·¢ËÍµÄÊý¾Ý¸öÊý */
 80067c2:	4b26      	ldr	r3, [pc, #152]	; (800685c <UartVarInit+0x18c>)
 80067c4:	2200      	movs	r2, #0
 80067c6:	829a      	strh	r2, [r3, #20]
	g_tUart3.SendBefor = USART3_SendBefor;		/* ·¢ËÍÊý¾ÝÇ°µÄ»Øµ÷º¯Êý */
 80067c8:	4b24      	ldr	r3, [pc, #144]	; (800685c <UartVarInit+0x18c>)
 80067ca:	4a28      	ldr	r2, [pc, #160]	; (800686c <UartVarInit+0x19c>)
 80067cc:	61da      	str	r2, [r3, #28]
	g_tUart3.SendOver = USART3_SendOver;		/* ·¢ËÍÍê±ÏºóµÄ»Øµ÷º¯Êý */
 80067ce:	4b23      	ldr	r3, [pc, #140]	; (800685c <UartVarInit+0x18c>)
 80067d0:	4a27      	ldr	r2, [pc, #156]	; (8006870 <UartVarInit+0x1a0>)
 80067d2:	621a      	str	r2, [r3, #32]
	g_tUart3.ReciveNew = 0;						/* ½ÓÊÕµ½ÐÂÊý¾ÝºóµÄ»Øµ÷º¯Êý */
 80067d4:	4b21      	ldr	r3, [pc, #132]	; (800685c <UartVarInit+0x18c>)
 80067d6:	2200      	movs	r2, #0
 80067d8:	625a      	str	r2, [r3, #36]	; 0x24
	g_tUart5.ReciveNew = 0;						/* ½ÓÊÕµ½ÐÂÊý¾ÝºóµÄ»Øµ÷º¯Êý */
#endif


#if UART6_FIFO_EN == 1
	g_tUart6.uart = USART6;						/* STM32 ´®¿ÚÉè±¸ */
 80067da:	4b26      	ldr	r3, [pc, #152]	; (8006874 <UartVarInit+0x1a4>)
 80067dc:	4a26      	ldr	r2, [pc, #152]	; (8006878 <UartVarInit+0x1a8>)
 80067de:	601a      	str	r2, [r3, #0]
	g_tUart6.pTxBuf = g_TxBuf6;					/* ·¢ËÍ»º³åÇøÖ¸Õë */
 80067e0:	4b24      	ldr	r3, [pc, #144]	; (8006874 <UartVarInit+0x1a4>)
 80067e2:	4a26      	ldr	r2, [pc, #152]	; (800687c <UartVarInit+0x1ac>)
 80067e4:	605a      	str	r2, [r3, #4]
	g_tUart6.pRxBuf = g_RxBuf6;					/* ½ÓÊÕ»º³åÇøÖ¸Õë */
 80067e6:	4b23      	ldr	r3, [pc, #140]	; (8006874 <UartVarInit+0x1a4>)
 80067e8:	4a25      	ldr	r2, [pc, #148]	; (8006880 <UartVarInit+0x1b0>)
 80067ea:	609a      	str	r2, [r3, #8]
	g_tUart6.usTxBufSize = UART6_TX_BUF_SIZE;	/* ·¢ËÍ»º³åÇø´óÐ¡ */
 80067ec:	4b21      	ldr	r3, [pc, #132]	; (8006874 <UartVarInit+0x1a4>)
 80067ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80067f2:	819a      	strh	r2, [r3, #12]
	g_tUart6.usRxBufSize = UART6_RX_BUF_SIZE;	/* ½ÓÊÕ»º³åÇø´óÐ¡ */
 80067f4:	4b1f      	ldr	r3, [pc, #124]	; (8006874 <UartVarInit+0x1a4>)
 80067f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80067fa:	81da      	strh	r2, [r3, #14]
	g_tUart6.usTxWrite = 0;						/* ·¢ËÍFIFOÐ´Ë÷Òý */
 80067fc:	4b1d      	ldr	r3, [pc, #116]	; (8006874 <UartVarInit+0x1a4>)
 80067fe:	2200      	movs	r2, #0
 8006800:	821a      	strh	r2, [r3, #16]
	g_tUart6.usTxRead = 0;						/* ·¢ËÍFIFO¶ÁË÷Òý */
 8006802:	4b1c      	ldr	r3, [pc, #112]	; (8006874 <UartVarInit+0x1a4>)
 8006804:	2200      	movs	r2, #0
 8006806:	825a      	strh	r2, [r3, #18]
	g_tUart6.usRxWrite = 0;						/* ½ÓÊÕFIFOÐ´Ë÷Òý */
 8006808:	4b1a      	ldr	r3, [pc, #104]	; (8006874 <UartVarInit+0x1a4>)
 800680a:	2200      	movs	r2, #0
 800680c:	82da      	strh	r2, [r3, #22]
	g_tUart6.usRxRead = 0;						/* ½ÓÊÕFIFO¶ÁË÷Òý */
 800680e:	4b19      	ldr	r3, [pc, #100]	; (8006874 <UartVarInit+0x1a4>)
 8006810:	2200      	movs	r2, #0
 8006812:	831a      	strh	r2, [r3, #24]
	g_tUart6.usRxCount = 0;						/* ½ÓÊÕµ½µÄÐÂÊý¾Ý¸öÊý */
 8006814:	4b17      	ldr	r3, [pc, #92]	; (8006874 <UartVarInit+0x1a4>)
 8006816:	2200      	movs	r2, #0
 8006818:	835a      	strh	r2, [r3, #26]
	g_tUart6.usTxCount = 0;						/* ´ý·¢ËÍµÄÊý¾Ý¸öÊý */
 800681a:	4b16      	ldr	r3, [pc, #88]	; (8006874 <UartVarInit+0x1a4>)
 800681c:	2200      	movs	r2, #0
 800681e:	829a      	strh	r2, [r3, #20]
	g_tUart6.SendBefor = 0;						/* ·¢ËÍÊý¾ÝÇ°µÄ»Øµ÷º¯Êý */
 8006820:	4b14      	ldr	r3, [pc, #80]	; (8006874 <UartVarInit+0x1a4>)
 8006822:	2200      	movs	r2, #0
 8006824:	61da      	str	r2, [r3, #28]
	g_tUart6.SendOver = 0;						/* ·¢ËÍÍê±ÏºóµÄ»Øµ÷º¯Êý */
 8006826:	4b13      	ldr	r3, [pc, #76]	; (8006874 <UartVarInit+0x1a4>)
 8006828:	2200      	movs	r2, #0
 800682a:	621a      	str	r2, [r3, #32]
	g_tUart6.ReciveNew = 0;						/* ½ÓÊÕµ½ÐÂÊý¾ÝºóµÄ»Øµ÷º¯Êý */
 800682c:	4b11      	ldr	r3, [pc, #68]	; (8006874 <UartVarInit+0x1a4>)
 800682e:	2200      	movs	r2, #0
 8006830:	625a      	str	r2, [r3, #36]	; 0x24
#endif
}
 8006832:	bf00      	nop
 8006834:	46bd      	mov	sp, r7
 8006836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683a:	4770      	bx	lr
 800683c:	20000464 	.word	0x20000464
 8006840:	40011000 	.word	0x40011000
 8006844:	2000048c 	.word	0x2000048c
 8006848:	2000088c 	.word	0x2000088c
 800684c:	20000c8c 	.word	0x20000c8c
 8006850:	40004400 	.word	0x40004400
 8006854:	20000cb4 	.word	0x20000cb4
 8006858:	20000cb8 	.word	0x20000cb8
 800685c:	200014b8 	.word	0x200014b8
 8006860:	40004800 	.word	0x40004800
 8006864:	200014e0 	.word	0x200014e0
 8006868:	200018e0 	.word	0x200018e0
 800686c:	080066a1 	.word	0x080066a1
 8006870:	080066b9 	.word	0x080066b9
 8006874:	20001ce0 	.word	0x20001ce0
 8006878:	40011400 	.word	0x40011400
 800687c:	20001d08 	.word	0x20001d08
 8006880:	20002108 	.word	0x20002108

08006884 <InitHardUart>:
*********************************************************************************************************
*	Func name: InitHardUart
*********************************************************************************************************
*/
static void InitHardUart(void)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b08a      	sub	sp, #40	; 0x28
 8006888:	af00      	add	r7, sp, #0
	//UART_HandleTypeDef USART_InitStructure2;
	//UART_HandleTypeDef USART_InitStructure3;
	//UART_HandleTypeDef USART_InitStructure6;

#if UART1_FIFO_EN == 1		/* TX = PA9   RX = PA10  TX = PB6   RX = PB7*/
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800688a:	2300      	movs	r3, #0
 800688c:	613b      	str	r3, [r7, #16]
 800688e:	4b68      	ldr	r3, [pc, #416]	; (8006a30 <InitHardUart+0x1ac>)
 8006890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006892:	4a67      	ldr	r2, [pc, #412]	; (8006a30 <InitHardUart+0x1ac>)
 8006894:	f043 0301 	orr.w	r3, r3, #1
 8006898:	6313      	str	r3, [r2, #48]	; 0x30
 800689a:	4b65      	ldr	r3, [pc, #404]	; (8006a30 <InitHardUart+0x1ac>)
 800689c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800689e:	f003 0301 	and.w	r3, r3, #1
 80068a2:	613b      	str	r3, [r7, #16]
 80068a4:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_USART1_CLK_ENABLE();
 80068a6:	2300      	movs	r3, #0
 80068a8:	60fb      	str	r3, [r7, #12]
 80068aa:	4b61      	ldr	r3, [pc, #388]	; (8006a30 <InitHardUart+0x1ac>)
 80068ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068ae:	4a60      	ldr	r2, [pc, #384]	; (8006a30 <InitHardUart+0x1ac>)
 80068b0:	f043 0310 	orr.w	r3, r3, #16
 80068b4:	6453      	str	r3, [r2, #68]	; 0x44
 80068b6:	4b5e      	ldr	r3, [pc, #376]	; (8006a30 <InitHardUart+0x1ac>)
 80068b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068ba:	f003 0310 	and.w	r3, r3, #16
 80068be:	60fb      	str	r3, [r7, #12]
 80068c0:	68fb      	ldr	r3, [r7, #12]
#if	1
	// TX
	GPIO_InitStructure.Pin = GPIO_PIN_9;
 80068c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80068c6:	617b      	str	r3, [r7, #20]
	GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80068c8:	2302      	movs	r3, #2
 80068ca:	61bb      	str	r3, [r7, #24]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 80068cc:	2302      	movs	r3, #2
 80068ce:	623b      	str	r3, [r7, #32]
	GPIO_InitStructure.Pull = GPIO_NOPULL;
 80068d0:	2300      	movs	r3, #0
 80068d2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStructure.Alternate = GPIO_AF7_USART1;
 80068d4:	2307      	movs	r3, #7
 80068d6:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80068d8:	f107 0314 	add.w	r3, r7, #20
 80068dc:	4619      	mov	r1, r3
 80068de:	4855      	ldr	r0, [pc, #340]	; (8006a34 <InitHardUart+0x1b0>)
 80068e0:	f000 fae2 	bl	8006ea8 <HAL_GPIO_Init>
	// RX
	GPIO_InitStructure.Pin = GPIO_PIN_10;
 80068e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80068e8:	617b      	str	r3, [r7, #20]
	GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80068ea:	2302      	movs	r3, #2
 80068ec:	61bb      	str	r3, [r7, #24]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 80068ee:	2302      	movs	r3, #2
 80068f0:	623b      	str	r3, [r7, #32]
	GPIO_InitStructure.Pull = GPIO_NOPULL;
 80068f2:	2300      	movs	r3, #0
 80068f4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStructure.Alternate = GPIO_AF7_USART1;
 80068f6:	2307      	movs	r3, #7
 80068f8:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80068fa:	f107 0314 	add.w	r3, r7, #20
 80068fe:	4619      	mov	r1, r3
 8006900:	484c      	ldr	r0, [pc, #304]	; (8006a34 <InitHardUart+0x1b0>)
 8006902:	f000 fad1 	bl	8006ea8 <HAL_GPIO_Init>
#endif
	USART_InitStructure1.Instance = USART1;
 8006906:	4b4c      	ldr	r3, [pc, #304]	; (8006a38 <InitHardUart+0x1b4>)
 8006908:	4a4c      	ldr	r2, [pc, #304]	; (8006a3c <InitHardUart+0x1b8>)
 800690a:	601a      	str	r2, [r3, #0]
	USART_InitStructure1.Init.BaudRate = UART1_BAUD;
 800690c:	4b4a      	ldr	r3, [pc, #296]	; (8006a38 <InitHardUart+0x1b4>)
 800690e:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006912:	605a      	str	r2, [r3, #4]
	USART_InitStructure1.Init.WordLength = UART_WORDLENGTH_8B;
 8006914:	4b48      	ldr	r3, [pc, #288]	; (8006a38 <InitHardUart+0x1b4>)
 8006916:	2200      	movs	r2, #0
 8006918:	609a      	str	r2, [r3, #8]
	USART_InitStructure1.Init.StopBits = UART_STOPBITS_1;
 800691a:	4b47      	ldr	r3, [pc, #284]	; (8006a38 <InitHardUart+0x1b4>)
 800691c:	2200      	movs	r2, #0
 800691e:	60da      	str	r2, [r3, #12]
	USART_InitStructure1.Init.Parity = UART_PARITY_NONE;
 8006920:	4b45      	ldr	r3, [pc, #276]	; (8006a38 <InitHardUart+0x1b4>)
 8006922:	2200      	movs	r2, #0
 8006924:	611a      	str	r2, [r3, #16]
	USART_InitStructure1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006926:	4b44      	ldr	r3, [pc, #272]	; (8006a38 <InitHardUart+0x1b4>)
 8006928:	2200      	movs	r2, #0
 800692a:	619a      	str	r2, [r3, #24]
	USART_InitStructure1.Init.Mode = UART_MODE_TX_RX;
 800692c:	4b42      	ldr	r3, [pc, #264]	; (8006a38 <InitHardUart+0x1b4>)
 800692e:	220c      	movs	r2, #12
 8006930:	615a      	str	r2, [r3, #20]
	HAL_UART_Init(&USART_InitStructure1);
 8006932:	4841      	ldr	r0, [pc, #260]	; (8006a38 <InitHardUart+0x1b4>)
 8006934:	f7fb fbb4 	bl	80020a0 <HAL_UART_Init>

	__HAL_UART_ENABLE_IT(&USART_InitStructure1,UART_IT_RXNE);
 8006938:	4b3f      	ldr	r3, [pc, #252]	; (8006a38 <InitHardUart+0x1b4>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	68da      	ldr	r2, [r3, #12]
 800693e:	4b3e      	ldr	r3, [pc, #248]	; (8006a38 <InitHardUart+0x1b4>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f042 0220 	orr.w	r2, r2, #32
 8006946:	60da      	str	r2, [r3, #12]
	__HAL_UART_ENABLE(&USART_InitStructure1);
 8006948:	4b3b      	ldr	r3, [pc, #236]	; (8006a38 <InitHardUart+0x1b4>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	68da      	ldr	r2, [r3, #12]
 800694e:	4b3a      	ldr	r3, [pc, #232]	; (8006a38 <InitHardUart+0x1b4>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006956:	60da      	str	r2, [r3, #12]
	__HAL_UART_CLEAR_FLAG(&USART_InitStructure1, UART_FLAG_TC);
 8006958:	4b37      	ldr	r3, [pc, #220]	; (8006a38 <InitHardUart+0x1b4>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006960:	601a      	str	r2, [r3, #0]
#endif

#if UART2_FIFO_EN == 1		/* TX = PD5   RX = PD6 TX = PA2 RX = PA3  */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8006962:	2300      	movs	r3, #0
 8006964:	60bb      	str	r3, [r7, #8]
 8006966:	4b32      	ldr	r3, [pc, #200]	; (8006a30 <InitHardUart+0x1ac>)
 8006968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800696a:	4a31      	ldr	r2, [pc, #196]	; (8006a30 <InitHardUart+0x1ac>)
 800696c:	f043 0301 	orr.w	r3, r3, #1
 8006970:	6313      	str	r3, [r2, #48]	; 0x30
 8006972:	4b2f      	ldr	r3, [pc, #188]	; (8006a30 <InitHardUart+0x1ac>)
 8006974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006976:	f003 0301 	and.w	r3, r3, #1
 800697a:	60bb      	str	r3, [r7, #8]
 800697c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_USART2_CLK_ENABLE();
 800697e:	2300      	movs	r3, #0
 8006980:	607b      	str	r3, [r7, #4]
 8006982:	4b2b      	ldr	r3, [pc, #172]	; (8006a30 <InitHardUart+0x1ac>)
 8006984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006986:	4a2a      	ldr	r2, [pc, #168]	; (8006a30 <InitHardUart+0x1ac>)
 8006988:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800698c:	6413      	str	r3, [r2, #64]	; 0x40
 800698e:	4b28      	ldr	r3, [pc, #160]	; (8006a30 <InitHardUart+0x1ac>)
 8006990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006996:	607b      	str	r3, [r7, #4]
 8006998:	687b      	ldr	r3, [r7, #4]

	// TX
	GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 800699a:	2302      	movs	r3, #2
 800699c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 800699e:	2302      	movs	r3, #2
 80069a0:	623b      	str	r3, [r7, #32]
	GPIO_InitStructure.Pull = GPIO_NOPULL;
 80069a2:	2300      	movs	r3, #0
 80069a4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStructure.Alternate = GPIO_AF7_USART2;
 80069a6:	2307      	movs	r3, #7
 80069a8:	627b      	str	r3, [r7, #36]	; 0x24
	// RX
	GPIO_InitStructure.Pin = GPIO_PIN_3;
 80069aa:	2308      	movs	r3, #8
 80069ac:	617b      	str	r3, [r7, #20]
	GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80069ae:	2302      	movs	r3, #2
 80069b0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 80069b2:	2302      	movs	r3, #2
 80069b4:	623b      	str	r3, [r7, #32]
	GPIO_InitStructure.Pull = GPIO_NOPULL;
 80069b6:	2300      	movs	r3, #0
 80069b8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStructure.Alternate = GPIO_AF7_USART2;
 80069ba:	2307      	movs	r3, #7
 80069bc:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80069be:	f107 0314 	add.w	r3, r7, #20
 80069c2:	4619      	mov	r1, r3
 80069c4:	481b      	ldr	r0, [pc, #108]	; (8006a34 <InitHardUart+0x1b0>)
 80069c6:	f000 fa6f 	bl	8006ea8 <HAL_GPIO_Init>

	USART_InitStructure2.Instance = USART2;
 80069ca:	4b1d      	ldr	r3, [pc, #116]	; (8006a40 <InitHardUart+0x1bc>)
 80069cc:	4a1d      	ldr	r2, [pc, #116]	; (8006a44 <InitHardUart+0x1c0>)
 80069ce:	601a      	str	r2, [r3, #0]
	USART_InitStructure2.Init.BaudRate = UART2_BAUD;
 80069d0:	4b1b      	ldr	r3, [pc, #108]	; (8006a40 <InitHardUart+0x1bc>)
 80069d2:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80069d6:	605a      	str	r2, [r3, #4]
	USART_InitStructure2.Init.WordLength = UART_WORDLENGTH_8B;
 80069d8:	4b19      	ldr	r3, [pc, #100]	; (8006a40 <InitHardUart+0x1bc>)
 80069da:	2200      	movs	r2, #0
 80069dc:	609a      	str	r2, [r3, #8]
	USART_InitStructure2.Init.StopBits = UART_STOPBITS_1;
 80069de:	4b18      	ldr	r3, [pc, #96]	; (8006a40 <InitHardUart+0x1bc>)
 80069e0:	2200      	movs	r2, #0
 80069e2:	60da      	str	r2, [r3, #12]
	USART_InitStructure2.Init.Parity = UART_PARITY_NONE;
 80069e4:	4b16      	ldr	r3, [pc, #88]	; (8006a40 <InitHardUart+0x1bc>)
 80069e6:	2200      	movs	r2, #0
 80069e8:	611a      	str	r2, [r3, #16]
	USART_InitStructure2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80069ea:	4b15      	ldr	r3, [pc, #84]	; (8006a40 <InitHardUart+0x1bc>)
 80069ec:	2200      	movs	r2, #0
 80069ee:	619a      	str	r2, [r3, #24]
	USART_InitStructure2.Init.Mode = UART_MODE_RX;
 80069f0:	4b13      	ldr	r3, [pc, #76]	; (8006a40 <InitHardUart+0x1bc>)
 80069f2:	2204      	movs	r2, #4
 80069f4:	615a      	str	r2, [r3, #20]
	HAL_UART_Init(&USART_InitStructure2);
 80069f6:	4812      	ldr	r0, [pc, #72]	; (8006a40 <InitHardUart+0x1bc>)
 80069f8:	f7fb fb52 	bl	80020a0 <HAL_UART_Init>

	__HAL_UART_ENABLE_IT(&USART_InitStructure2,UART_IT_RXNE);
 80069fc:	4b10      	ldr	r3, [pc, #64]	; (8006a40 <InitHardUart+0x1bc>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	68da      	ldr	r2, [r3, #12]
 8006a02:	4b0f      	ldr	r3, [pc, #60]	; (8006a40 <InitHardUart+0x1bc>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f042 0220 	orr.w	r2, r2, #32
 8006a0a:	60da      	str	r2, [r3, #12]
	__HAL_UART_ENABLE(&USART_InitStructure2);
 8006a0c:	4b0c      	ldr	r3, [pc, #48]	; (8006a40 <InitHardUart+0x1bc>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	68da      	ldr	r2, [r3, #12]
 8006a12:	4b0b      	ldr	r3, [pc, #44]	; (8006a40 <InitHardUart+0x1bc>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006a1a:	60da      	str	r2, [r3, #12]
	__HAL_UART_CLEAR_FLAG(&USART_InitStructure2, UART_FLAG_TC);
 8006a1c:	4b08      	ldr	r3, [pc, #32]	; (8006a40 <InitHardUart+0x1bc>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006a24:	601a      	str	r2, [r3, #0]
	__HAL_UART_ENABLE_IT(&USART_InitStructure6,UART_IT_RXNE);
	__HAL_UART_ENABLE(&USART_InitStructure6);
	__HAL_UART_CLEAR_FLAG(&USART_InitStructure6, UART_FLAG_TC);
#endif
#endif
}
 8006a26:	bf00      	nop
 8006a28:	3728      	adds	r7, #40	; 0x28
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}
 8006a2e:	bf00      	nop
 8006a30:	40023800 	.word	0x40023800
 8006a34:	40020000 	.word	0x40020000
 8006a38:	20002508 	.word	0x20002508
 8006a3c:	40011000 	.word	0x40011000
 8006a40:	2000254c 	.word	0x2000254c
 8006a44:	40004400 	.word	0x40004400

08006a48 <ConfigUartNVIC>:

static void ConfigUartNVIC(void)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	af00      	add	r7, sp, #0
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8006a4c:	2007      	movs	r0, #7
 8006a4e:	f000 f9e9 	bl	8006e24 <HAL_NVIC_SetPriorityGrouping>

#if UART1_FIFO_EN == 1
	  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8006a52:	2200      	movs	r2, #0
 8006a54:	2100      	movs	r1, #0
 8006a56:	2025      	movs	r0, #37	; 0x25
 8006a58:	f000 f9ef 	bl	8006e3a <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8006a5c:	2025      	movs	r0, #37	; 0x25
 8006a5e:	f000 fa08 	bl	8006e72 <HAL_NVIC_EnableIRQ>
#endif

#if UART2_FIFO_EN == 1
	  HAL_NVIC_SetPriority(USART2_IRQn, 0, 1);
 8006a62:	2201      	movs	r2, #1
 8006a64:	2100      	movs	r1, #0
 8006a66:	2026      	movs	r0, #38	; 0x26
 8006a68:	f000 f9e7 	bl	8006e3a <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8006a6c:	2026      	movs	r0, #38	; 0x26
 8006a6e:	f000 fa00 	bl	8006e72 <HAL_NVIC_EnableIRQ>
#endif

#if UART3_FIFO_EN == 1
	  HAL_NVIC_SetPriority(USART3_IRQn, 0, 2);
 8006a72:	2202      	movs	r2, #2
 8006a74:	2100      	movs	r1, #0
 8006a76:	2027      	movs	r0, #39	; 0x27
 8006a78:	f000 f9df 	bl	8006e3a <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(USART3_IRQn);
 8006a7c:	2027      	movs	r0, #39	; 0x27
 8006a7e:	f000 f9f8 	bl	8006e72 <HAL_NVIC_EnableIRQ>
	  HAL_NVIC_SetPriority(UART5_IRQn, 0, 4);
	  HAL_NVIC_EnableIRQ(UART5_IRQn);
#endif

#if UART6_FIFO_EN == 1
	  HAL_NVIC_SetPriority(USART6_IRQn, 0, 5);
 8006a82:	2205      	movs	r2, #5
 8006a84:	2100      	movs	r1, #0
 8006a86:	2047      	movs	r0, #71	; 0x47
 8006a88:	f000 f9d7 	bl	8006e3a <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(USART6_IRQn);
 8006a8c:	2047      	movs	r0, #71	; 0x47
 8006a8e:	f000 f9f0 	bl	8006e72 <HAL_NVIC_EnableIRQ>
#endif
}
 8006a92:	bf00      	nop
 8006a94:	bd80      	pop	{r7, pc}
	...

08006a98 <UART1_Transmit>:
  * @param  data: 송신할 데이터 버퍼의 포인터
  * @param  size: 송신할 데이터 크기
  * @retval HAL 상태 (HAL_OK, HAL_ERROR, HAL_BUSY, HAL_TIMEOUT)
 */
HAL_StatusTypeDef UART1_Transmit(uint8_t *data, uint16_t size)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b084      	sub	sp, #16
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
 8006aa0:	460b      	mov	r3, r1
 8006aa2:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status;

  // 폴링 방식으로 데이터 송신
  status = HAL_UART_Transmit(&USART_InitStructure1, data, size, 1000); // 타임아웃 1000ms
 8006aa4:	887a      	ldrh	r2, [r7, #2]
 8006aa6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006aaa:	6879      	ldr	r1, [r7, #4]
 8006aac:	4807      	ldr	r0, [pc, #28]	; (8006acc <UART1_Transmit+0x34>)
 8006aae:	f7fb fb4e 	bl	800214e <HAL_UART_Transmit>
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	73fb      	strb	r3, [r7, #15]

  // 송신 완료 플래그 클리어
  __HAL_UART_CLEAR_FLAG(&USART_InitStructure1, UART_FLAG_TC);
 8006ab6:	4b05      	ldr	r3, [pc, #20]	; (8006acc <UART1_Transmit+0x34>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006abe:	601a      	str	r2, [r3, #0]

  return status;
 8006ac0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	3710      	adds	r7, #16
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}
 8006aca:	bf00      	nop
 8006acc:	20002508 	.word	0x20002508

08006ad0 <UART1_Transmit_String>:
  * @brief  UART1을 통해 문자열을 송신하는 함수
  * @param  str: 송신할 문자열
  * @retval HAL 상태 (HAL_OK, HAL_ERROR, HAL_BUSY, HAL_TIMEOUT)
  */
HAL_StatusTypeDef UART1_Transmit_String(char *str)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b082      	sub	sp, #8
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
  return UART1_Transmit((uint8_t*)str, strlen(str));
 8006ad8:	6878      	ldr	r0, [r7, #4]
 8006ada:	f7f9 fbc9 	bl	8000270 <strlen>
 8006ade:	4603      	mov	r3, r0
 8006ae0:	b29b      	uxth	r3, r3
 8006ae2:	4619      	mov	r1, r3
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f7ff ffd7 	bl	8006a98 <UART1_Transmit>
 8006aea:	4603      	mov	r3, r0
}
 8006aec:	4618      	mov	r0, r3
 8006aee:	3708      	adds	r7, #8
 8006af0:	46bd      	mov	sp, r7
 8006af2:	bd80      	pop	{r7, pc}

08006af4 <bsp_Init>:
 *      Author: compro
 */
#include "bsp.h"

void bsp_Init(void)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	af00      	add	r7, sp, #0
	bsp_InitUart();
 8006af8:	f7ff fdc8 	bl	800668c <bsp_InitUart>
	bsp_InitLed();
 8006afc:	f7fd fcfa 	bl	80044f4 <bsp_InitLed>
	bsp_InitKey();
 8006b00:	f7fd fa8c 	bl	800401c <bsp_InitKey>

	bsp_InitExtSRAM();
 8006b04:	f7fc fee8 	bl	80038d8 <bsp_InitExtSRAM>
	bsp_InitNorFlash();	/* ³õÊ¼»¯FSMC NOR Flash */
 8006b08:	f7fd fdf2 	bl	80046f0 <bsp_InitNorFlash>
	bsp_InitSFlash();       // nand flash
 8006b0c:	f7fd ff3e 	bl	800498c <bsp_InitSFlash>

	bsp_InitI2C();
 8006b10:	f7fd f988 	bl	8003e24 <bsp_InitI2C>
	bsp_InitTimer();
 8006b14:	f7fe ff5e 	bl	80059d4 <bsp_InitTimer>

	//bsp_DelayMS(20);
	HAL_Delay(20);
 8006b18:	2014      	movs	r0, #20
 8006b1a:	f000 f88f 	bl	8006c3c <HAL_Delay>
}
 8006b1e:	bf00      	nop
 8006b20:	bd80      	pop	{r7, pc}
	...

08006b24 <bsp_Idle>:

extern void SaveScreenToBmp(uint16_t _index);
void bsp_Idle(void)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	af00      	add	r7, sp, #0
	if (bsp_GetKey2() == SYS_DOWN_K1K2)
 8006b28:	f7fd fc94 	bl	8004454 <bsp_GetKey2>
 8006b2c:	4603      	mov	r3, r0
 8006b2e:	2b19      	cmp	r3, #25
 8006b30:	d108      	bne.n	8006b44 <bsp_Idle+0x20>
	{
		static uint16_t s_file_no = 0;
		SaveScreenToBmp(s_file_no++);
 8006b32:	4b05      	ldr	r3, [pc, #20]	; (8006b48 <bsp_Idle+0x24>)
 8006b34:	881b      	ldrh	r3, [r3, #0]
 8006b36:	1c5a      	adds	r2, r3, #1
 8006b38:	b291      	uxth	r1, r2
 8006b3a:	4a03      	ldr	r2, [pc, #12]	; (8006b48 <bsp_Idle+0x24>)
 8006b3c:	8011      	strh	r1, [r2, #0]
 8006b3e:	4618      	mov	r0, r3
 8006b40:	f7fa f9fe 	bl	8000f40 <SaveScreenToBmp>
	}
}
 8006b44:	bf00      	nop
 8006b46:	bd80      	pop	{r7, pc}
 8006b48:	20002590 	.word	0x20002590

08006b4c <bsp_RunPer1ms>:
*	ÐÎ    ²Î£ºÎÞ
*	·µ »Ø Öµ: ÎÞ
*********************************************************************************************************
*/
void bsp_RunPer1ms(void)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	af00      	add	r7, sp, #0
	TOUCH_Scan();	/* ´¥ÃþÉ¨Ãè */
 8006b50:	f7ff fa36 	bl	8005fc0 <TOUCH_Scan>
}
 8006b54:	bf00      	nop
 8006b56:	bd80      	pop	{r7, pc}

08006b58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006b5c:	4b0e      	ldr	r3, [pc, #56]	; (8006b98 <HAL_Init+0x40>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4a0d      	ldr	r2, [pc, #52]	; (8006b98 <HAL_Init+0x40>)
 8006b62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006b66:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006b68:	4b0b      	ldr	r3, [pc, #44]	; (8006b98 <HAL_Init+0x40>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4a0a      	ldr	r2, [pc, #40]	; (8006b98 <HAL_Init+0x40>)
 8006b6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006b72:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006b74:	4b08      	ldr	r3, [pc, #32]	; (8006b98 <HAL_Init+0x40>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4a07      	ldr	r2, [pc, #28]	; (8006b98 <HAL_Init+0x40>)
 8006b7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006b80:	2003      	movs	r0, #3
 8006b82:	f000 f94f 	bl	8006e24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006b86:	200f      	movs	r0, #15
 8006b88:	f000 f808 	bl	8006b9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006b8c:	f7fa ff0e 	bl	80019ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006b90:	2300      	movs	r3, #0
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	bd80      	pop	{r7, pc}
 8006b96:	bf00      	nop
 8006b98:	40023c00 	.word	0x40023c00

08006b9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b082      	sub	sp, #8
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006ba4:	4b12      	ldr	r3, [pc, #72]	; (8006bf0 <HAL_InitTick+0x54>)
 8006ba6:	681a      	ldr	r2, [r3, #0]
 8006ba8:	4b12      	ldr	r3, [pc, #72]	; (8006bf4 <HAL_InitTick+0x58>)
 8006baa:	781b      	ldrb	r3, [r3, #0]
 8006bac:	4619      	mov	r1, r3
 8006bae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006bb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8006bb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bba:	4618      	mov	r0, r3
 8006bbc:	f000 f967 	bl	8006e8e <HAL_SYSTICK_Config>
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d001      	beq.n	8006bca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	e00e      	b.n	8006be8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2b0f      	cmp	r3, #15
 8006bce:	d80a      	bhi.n	8006be6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	6879      	ldr	r1, [r7, #4]
 8006bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8006bd8:	f000 f92f 	bl	8006e3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006bdc:	4a06      	ldr	r2, [pc, #24]	; (8006bf8 <HAL_InitTick+0x5c>)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006be2:	2300      	movs	r3, #0
 8006be4:	e000      	b.n	8006be8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006be6:	2301      	movs	r3, #1
}
 8006be8:	4618      	mov	r0, r3
 8006bea:	3708      	adds	r7, #8
 8006bec:	46bd      	mov	sp, r7
 8006bee:	bd80      	pop	{r7, pc}
 8006bf0:	20000000 	.word	0x20000000
 8006bf4:	20000014 	.word	0x20000014
 8006bf8:	20000010 	.word	0x20000010

08006bfc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006c00:	4b06      	ldr	r3, [pc, #24]	; (8006c1c <HAL_IncTick+0x20>)
 8006c02:	781b      	ldrb	r3, [r3, #0]
 8006c04:	461a      	mov	r2, r3
 8006c06:	4b06      	ldr	r3, [pc, #24]	; (8006c20 <HAL_IncTick+0x24>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4413      	add	r3, r2
 8006c0c:	4a04      	ldr	r2, [pc, #16]	; (8006c20 <HAL_IncTick+0x24>)
 8006c0e:	6013      	str	r3, [r2, #0]
}
 8006c10:	bf00      	nop
 8006c12:	46bd      	mov	sp, r7
 8006c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c18:	4770      	bx	lr
 8006c1a:	bf00      	nop
 8006c1c:	20000014 	.word	0x20000014
 8006c20:	20002594 	.word	0x20002594

08006c24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006c24:	b480      	push	{r7}
 8006c26:	af00      	add	r7, sp, #0
  return uwTick;
 8006c28:	4b03      	ldr	r3, [pc, #12]	; (8006c38 <HAL_GetTick+0x14>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
}
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c34:	4770      	bx	lr
 8006c36:	bf00      	nop
 8006c38:	20002594 	.word	0x20002594

08006c3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b084      	sub	sp, #16
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006c44:	f7ff ffee 	bl	8006c24 <HAL_GetTick>
 8006c48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c54:	d005      	beq.n	8006c62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006c56:	4b0a      	ldr	r3, [pc, #40]	; (8006c80 <HAL_Delay+0x44>)
 8006c58:	781b      	ldrb	r3, [r3, #0]
 8006c5a:	461a      	mov	r2, r3
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	4413      	add	r3, r2
 8006c60:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006c62:	bf00      	nop
 8006c64:	f7ff ffde 	bl	8006c24 <HAL_GetTick>
 8006c68:	4602      	mov	r2, r0
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	1ad3      	subs	r3, r2, r3
 8006c6e:	68fa      	ldr	r2, [r7, #12]
 8006c70:	429a      	cmp	r2, r3
 8006c72:	d8f7      	bhi.n	8006c64 <HAL_Delay+0x28>
  {
  }
}
 8006c74:	bf00      	nop
 8006c76:	bf00      	nop
 8006c78:	3710      	adds	r7, #16
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}
 8006c7e:	bf00      	nop
 8006c80:	20000014 	.word	0x20000014

08006c84 <__NVIC_SetPriorityGrouping>:
{
 8006c84:	b480      	push	{r7}
 8006c86:	b085      	sub	sp, #20
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f003 0307 	and.w	r3, r3, #7
 8006c92:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006c94:	4b0c      	ldr	r3, [pc, #48]	; (8006cc8 <__NVIC_SetPriorityGrouping+0x44>)
 8006c96:	68db      	ldr	r3, [r3, #12]
 8006c98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006c9a:	68ba      	ldr	r2, [r7, #8]
 8006c9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006ca0:	4013      	ands	r3, r2
 8006ca2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006cac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006cb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006cb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006cb6:	4a04      	ldr	r2, [pc, #16]	; (8006cc8 <__NVIC_SetPriorityGrouping+0x44>)
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	60d3      	str	r3, [r2, #12]
}
 8006cbc:	bf00      	nop
 8006cbe:	3714      	adds	r7, #20
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc6:	4770      	bx	lr
 8006cc8:	e000ed00 	.word	0xe000ed00

08006ccc <__NVIC_GetPriorityGrouping>:
{
 8006ccc:	b480      	push	{r7}
 8006cce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006cd0:	4b04      	ldr	r3, [pc, #16]	; (8006ce4 <__NVIC_GetPriorityGrouping+0x18>)
 8006cd2:	68db      	ldr	r3, [r3, #12]
 8006cd4:	0a1b      	lsrs	r3, r3, #8
 8006cd6:	f003 0307 	and.w	r3, r3, #7
}
 8006cda:	4618      	mov	r0, r3
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce2:	4770      	bx	lr
 8006ce4:	e000ed00 	.word	0xe000ed00

08006ce8 <__NVIC_EnableIRQ>:
{
 8006ce8:	b480      	push	{r7}
 8006cea:	b083      	sub	sp, #12
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	4603      	mov	r3, r0
 8006cf0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	db0b      	blt.n	8006d12 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006cfa:	79fb      	ldrb	r3, [r7, #7]
 8006cfc:	f003 021f 	and.w	r2, r3, #31
 8006d00:	4907      	ldr	r1, [pc, #28]	; (8006d20 <__NVIC_EnableIRQ+0x38>)
 8006d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d06:	095b      	lsrs	r3, r3, #5
 8006d08:	2001      	movs	r0, #1
 8006d0a:	fa00 f202 	lsl.w	r2, r0, r2
 8006d0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006d12:	bf00      	nop
 8006d14:	370c      	adds	r7, #12
 8006d16:	46bd      	mov	sp, r7
 8006d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1c:	4770      	bx	lr
 8006d1e:	bf00      	nop
 8006d20:	e000e100 	.word	0xe000e100

08006d24 <__NVIC_SetPriority>:
{
 8006d24:	b480      	push	{r7}
 8006d26:	b083      	sub	sp, #12
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	6039      	str	r1, [r7, #0]
 8006d2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006d30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	db0a      	blt.n	8006d4e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	b2da      	uxtb	r2, r3
 8006d3c:	490c      	ldr	r1, [pc, #48]	; (8006d70 <__NVIC_SetPriority+0x4c>)
 8006d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d42:	0112      	lsls	r2, r2, #4
 8006d44:	b2d2      	uxtb	r2, r2
 8006d46:	440b      	add	r3, r1
 8006d48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006d4c:	e00a      	b.n	8006d64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	b2da      	uxtb	r2, r3
 8006d52:	4908      	ldr	r1, [pc, #32]	; (8006d74 <__NVIC_SetPriority+0x50>)
 8006d54:	79fb      	ldrb	r3, [r7, #7]
 8006d56:	f003 030f 	and.w	r3, r3, #15
 8006d5a:	3b04      	subs	r3, #4
 8006d5c:	0112      	lsls	r2, r2, #4
 8006d5e:	b2d2      	uxtb	r2, r2
 8006d60:	440b      	add	r3, r1
 8006d62:	761a      	strb	r2, [r3, #24]
}
 8006d64:	bf00      	nop
 8006d66:	370c      	adds	r7, #12
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6e:	4770      	bx	lr
 8006d70:	e000e100 	.word	0xe000e100
 8006d74:	e000ed00 	.word	0xe000ed00

08006d78 <NVIC_EncodePriority>:
{
 8006d78:	b480      	push	{r7}
 8006d7a:	b089      	sub	sp, #36	; 0x24
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	60f8      	str	r0, [r7, #12]
 8006d80:	60b9      	str	r1, [r7, #8]
 8006d82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	f003 0307 	and.w	r3, r3, #7
 8006d8a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006d8c:	69fb      	ldr	r3, [r7, #28]
 8006d8e:	f1c3 0307 	rsb	r3, r3, #7
 8006d92:	2b04      	cmp	r3, #4
 8006d94:	bf28      	it	cs
 8006d96:	2304      	movcs	r3, #4
 8006d98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006d9a:	69fb      	ldr	r3, [r7, #28]
 8006d9c:	3304      	adds	r3, #4
 8006d9e:	2b06      	cmp	r3, #6
 8006da0:	d902      	bls.n	8006da8 <NVIC_EncodePriority+0x30>
 8006da2:	69fb      	ldr	r3, [r7, #28]
 8006da4:	3b03      	subs	r3, #3
 8006da6:	e000      	b.n	8006daa <NVIC_EncodePriority+0x32>
 8006da8:	2300      	movs	r3, #0
 8006daa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006dac:	f04f 32ff 	mov.w	r2, #4294967295
 8006db0:	69bb      	ldr	r3, [r7, #24]
 8006db2:	fa02 f303 	lsl.w	r3, r2, r3
 8006db6:	43da      	mvns	r2, r3
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	401a      	ands	r2, r3
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006dc0:	f04f 31ff 	mov.w	r1, #4294967295
 8006dc4:	697b      	ldr	r3, [r7, #20]
 8006dc6:	fa01 f303 	lsl.w	r3, r1, r3
 8006dca:	43d9      	mvns	r1, r3
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006dd0:	4313      	orrs	r3, r2
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	3724      	adds	r7, #36	; 0x24
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ddc:	4770      	bx	lr
	...

08006de0 <SysTick_Config>:
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b082      	sub	sp, #8
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	3b01      	subs	r3, #1
 8006dec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006df0:	d301      	bcc.n	8006df6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8006df2:	2301      	movs	r3, #1
 8006df4:	e00f      	b.n	8006e16 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006df6:	4a0a      	ldr	r2, [pc, #40]	; (8006e20 <SysTick_Config+0x40>)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	3b01      	subs	r3, #1
 8006dfc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006dfe:	210f      	movs	r1, #15
 8006e00:	f04f 30ff 	mov.w	r0, #4294967295
 8006e04:	f7ff ff8e 	bl	8006d24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006e08:	4b05      	ldr	r3, [pc, #20]	; (8006e20 <SysTick_Config+0x40>)
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006e0e:	4b04      	ldr	r3, [pc, #16]	; (8006e20 <SysTick_Config+0x40>)
 8006e10:	2207      	movs	r2, #7
 8006e12:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8006e14:	2300      	movs	r3, #0
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	3708      	adds	r7, #8
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd80      	pop	{r7, pc}
 8006e1e:	bf00      	nop
 8006e20:	e000e010 	.word	0xe000e010

08006e24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b082      	sub	sp, #8
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006e2c:	6878      	ldr	r0, [r7, #4]
 8006e2e:	f7ff ff29 	bl	8006c84 <__NVIC_SetPriorityGrouping>
}
 8006e32:	bf00      	nop
 8006e34:	3708      	adds	r7, #8
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bd80      	pop	{r7, pc}

08006e3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006e3a:	b580      	push	{r7, lr}
 8006e3c:	b086      	sub	sp, #24
 8006e3e:	af00      	add	r7, sp, #0
 8006e40:	4603      	mov	r3, r0
 8006e42:	60b9      	str	r1, [r7, #8]
 8006e44:	607a      	str	r2, [r7, #4]
 8006e46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006e48:	2300      	movs	r3, #0
 8006e4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006e4c:	f7ff ff3e 	bl	8006ccc <__NVIC_GetPriorityGrouping>
 8006e50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006e52:	687a      	ldr	r2, [r7, #4]
 8006e54:	68b9      	ldr	r1, [r7, #8]
 8006e56:	6978      	ldr	r0, [r7, #20]
 8006e58:	f7ff ff8e 	bl	8006d78 <NVIC_EncodePriority>
 8006e5c:	4602      	mov	r2, r0
 8006e5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e62:	4611      	mov	r1, r2
 8006e64:	4618      	mov	r0, r3
 8006e66:	f7ff ff5d 	bl	8006d24 <__NVIC_SetPriority>
}
 8006e6a:	bf00      	nop
 8006e6c:	3718      	adds	r7, #24
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bd80      	pop	{r7, pc}

08006e72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006e72:	b580      	push	{r7, lr}
 8006e74:	b082      	sub	sp, #8
 8006e76:	af00      	add	r7, sp, #0
 8006e78:	4603      	mov	r3, r0
 8006e7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006e7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e80:	4618      	mov	r0, r3
 8006e82:	f7ff ff31 	bl	8006ce8 <__NVIC_EnableIRQ>
}
 8006e86:	bf00      	nop
 8006e88:	3708      	adds	r7, #8
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}

08006e8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006e8e:	b580      	push	{r7, lr}
 8006e90:	b082      	sub	sp, #8
 8006e92:	af00      	add	r7, sp, #0
 8006e94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f7ff ffa2 	bl	8006de0 <SysTick_Config>
 8006e9c:	4603      	mov	r3, r0
}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	3708      	adds	r7, #8
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bd80      	pop	{r7, pc}
	...

08006ea8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b089      	sub	sp, #36	; 0x24
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
 8006eb0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006eba:	2300      	movs	r3, #0
 8006ebc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	61fb      	str	r3, [r7, #28]
 8006ec2:	e16b      	b.n	800719c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006ec4:	2201      	movs	r2, #1
 8006ec6:	69fb      	ldr	r3, [r7, #28]
 8006ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8006ecc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	697a      	ldr	r2, [r7, #20]
 8006ed4:	4013      	ands	r3, r2
 8006ed6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006ed8:	693a      	ldr	r2, [r7, #16]
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	429a      	cmp	r2, r3
 8006ede:	f040 815a 	bne.w	8007196 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	685b      	ldr	r3, [r3, #4]
 8006ee6:	f003 0303 	and.w	r3, r3, #3
 8006eea:	2b01      	cmp	r3, #1
 8006eec:	d005      	beq.n	8006efa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	685b      	ldr	r3, [r3, #4]
 8006ef2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006ef6:	2b02      	cmp	r3, #2
 8006ef8:	d130      	bne.n	8006f5c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	689b      	ldr	r3, [r3, #8]
 8006efe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006f00:	69fb      	ldr	r3, [r7, #28]
 8006f02:	005b      	lsls	r3, r3, #1
 8006f04:	2203      	movs	r2, #3
 8006f06:	fa02 f303 	lsl.w	r3, r2, r3
 8006f0a:	43db      	mvns	r3, r3
 8006f0c:	69ba      	ldr	r2, [r7, #24]
 8006f0e:	4013      	ands	r3, r2
 8006f10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	68da      	ldr	r2, [r3, #12]
 8006f16:	69fb      	ldr	r3, [r7, #28]
 8006f18:	005b      	lsls	r3, r3, #1
 8006f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8006f1e:	69ba      	ldr	r2, [r7, #24]
 8006f20:	4313      	orrs	r3, r2
 8006f22:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	69ba      	ldr	r2, [r7, #24]
 8006f28:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	685b      	ldr	r3, [r3, #4]
 8006f2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006f30:	2201      	movs	r2, #1
 8006f32:	69fb      	ldr	r3, [r7, #28]
 8006f34:	fa02 f303 	lsl.w	r3, r2, r3
 8006f38:	43db      	mvns	r3, r3
 8006f3a:	69ba      	ldr	r2, [r7, #24]
 8006f3c:	4013      	ands	r3, r2
 8006f3e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	685b      	ldr	r3, [r3, #4]
 8006f44:	091b      	lsrs	r3, r3, #4
 8006f46:	f003 0201 	and.w	r2, r3, #1
 8006f4a:	69fb      	ldr	r3, [r7, #28]
 8006f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8006f50:	69ba      	ldr	r2, [r7, #24]
 8006f52:	4313      	orrs	r3, r2
 8006f54:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	69ba      	ldr	r2, [r7, #24]
 8006f5a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	685b      	ldr	r3, [r3, #4]
 8006f60:	f003 0303 	and.w	r3, r3, #3
 8006f64:	2b03      	cmp	r3, #3
 8006f66:	d017      	beq.n	8006f98 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	68db      	ldr	r3, [r3, #12]
 8006f6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006f6e:	69fb      	ldr	r3, [r7, #28]
 8006f70:	005b      	lsls	r3, r3, #1
 8006f72:	2203      	movs	r2, #3
 8006f74:	fa02 f303 	lsl.w	r3, r2, r3
 8006f78:	43db      	mvns	r3, r3
 8006f7a:	69ba      	ldr	r2, [r7, #24]
 8006f7c:	4013      	ands	r3, r2
 8006f7e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	689a      	ldr	r2, [r3, #8]
 8006f84:	69fb      	ldr	r3, [r7, #28]
 8006f86:	005b      	lsls	r3, r3, #1
 8006f88:	fa02 f303 	lsl.w	r3, r2, r3
 8006f8c:	69ba      	ldr	r2, [r7, #24]
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	69ba      	ldr	r2, [r7, #24]
 8006f96:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	685b      	ldr	r3, [r3, #4]
 8006f9c:	f003 0303 	and.w	r3, r3, #3
 8006fa0:	2b02      	cmp	r3, #2
 8006fa2:	d123      	bne.n	8006fec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006fa4:	69fb      	ldr	r3, [r7, #28]
 8006fa6:	08da      	lsrs	r2, r3, #3
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	3208      	adds	r2, #8
 8006fac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006fb2:	69fb      	ldr	r3, [r7, #28]
 8006fb4:	f003 0307 	and.w	r3, r3, #7
 8006fb8:	009b      	lsls	r3, r3, #2
 8006fba:	220f      	movs	r2, #15
 8006fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8006fc0:	43db      	mvns	r3, r3
 8006fc2:	69ba      	ldr	r2, [r7, #24]
 8006fc4:	4013      	ands	r3, r2
 8006fc6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	691a      	ldr	r2, [r3, #16]
 8006fcc:	69fb      	ldr	r3, [r7, #28]
 8006fce:	f003 0307 	and.w	r3, r3, #7
 8006fd2:	009b      	lsls	r3, r3, #2
 8006fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8006fd8:	69ba      	ldr	r2, [r7, #24]
 8006fda:	4313      	orrs	r3, r2
 8006fdc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006fde:	69fb      	ldr	r3, [r7, #28]
 8006fe0:	08da      	lsrs	r2, r3, #3
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	3208      	adds	r2, #8
 8006fe6:	69b9      	ldr	r1, [r7, #24]
 8006fe8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006ff2:	69fb      	ldr	r3, [r7, #28]
 8006ff4:	005b      	lsls	r3, r3, #1
 8006ff6:	2203      	movs	r2, #3
 8006ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8006ffc:	43db      	mvns	r3, r3
 8006ffe:	69ba      	ldr	r2, [r7, #24]
 8007000:	4013      	ands	r3, r2
 8007002:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	685b      	ldr	r3, [r3, #4]
 8007008:	f003 0203 	and.w	r2, r3, #3
 800700c:	69fb      	ldr	r3, [r7, #28]
 800700e:	005b      	lsls	r3, r3, #1
 8007010:	fa02 f303 	lsl.w	r3, r2, r3
 8007014:	69ba      	ldr	r2, [r7, #24]
 8007016:	4313      	orrs	r3, r2
 8007018:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	69ba      	ldr	r2, [r7, #24]
 800701e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	685b      	ldr	r3, [r3, #4]
 8007024:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007028:	2b00      	cmp	r3, #0
 800702a:	f000 80b4 	beq.w	8007196 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800702e:	2300      	movs	r3, #0
 8007030:	60fb      	str	r3, [r7, #12]
 8007032:	4b60      	ldr	r3, [pc, #384]	; (80071b4 <HAL_GPIO_Init+0x30c>)
 8007034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007036:	4a5f      	ldr	r2, [pc, #380]	; (80071b4 <HAL_GPIO_Init+0x30c>)
 8007038:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800703c:	6453      	str	r3, [r2, #68]	; 0x44
 800703e:	4b5d      	ldr	r3, [pc, #372]	; (80071b4 <HAL_GPIO_Init+0x30c>)
 8007040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007042:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007046:	60fb      	str	r3, [r7, #12]
 8007048:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800704a:	4a5b      	ldr	r2, [pc, #364]	; (80071b8 <HAL_GPIO_Init+0x310>)
 800704c:	69fb      	ldr	r3, [r7, #28]
 800704e:	089b      	lsrs	r3, r3, #2
 8007050:	3302      	adds	r3, #2
 8007052:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007056:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007058:	69fb      	ldr	r3, [r7, #28]
 800705a:	f003 0303 	and.w	r3, r3, #3
 800705e:	009b      	lsls	r3, r3, #2
 8007060:	220f      	movs	r2, #15
 8007062:	fa02 f303 	lsl.w	r3, r2, r3
 8007066:	43db      	mvns	r3, r3
 8007068:	69ba      	ldr	r2, [r7, #24]
 800706a:	4013      	ands	r3, r2
 800706c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	4a52      	ldr	r2, [pc, #328]	; (80071bc <HAL_GPIO_Init+0x314>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d02b      	beq.n	80070ce <HAL_GPIO_Init+0x226>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	4a51      	ldr	r2, [pc, #324]	; (80071c0 <HAL_GPIO_Init+0x318>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d025      	beq.n	80070ca <HAL_GPIO_Init+0x222>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	4a50      	ldr	r2, [pc, #320]	; (80071c4 <HAL_GPIO_Init+0x31c>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d01f      	beq.n	80070c6 <HAL_GPIO_Init+0x21e>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	4a4f      	ldr	r2, [pc, #316]	; (80071c8 <HAL_GPIO_Init+0x320>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d019      	beq.n	80070c2 <HAL_GPIO_Init+0x21a>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	4a4e      	ldr	r2, [pc, #312]	; (80071cc <HAL_GPIO_Init+0x324>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d013      	beq.n	80070be <HAL_GPIO_Init+0x216>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	4a4d      	ldr	r2, [pc, #308]	; (80071d0 <HAL_GPIO_Init+0x328>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d00d      	beq.n	80070ba <HAL_GPIO_Init+0x212>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	4a4c      	ldr	r2, [pc, #304]	; (80071d4 <HAL_GPIO_Init+0x32c>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d007      	beq.n	80070b6 <HAL_GPIO_Init+0x20e>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	4a4b      	ldr	r2, [pc, #300]	; (80071d8 <HAL_GPIO_Init+0x330>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d101      	bne.n	80070b2 <HAL_GPIO_Init+0x20a>
 80070ae:	2307      	movs	r3, #7
 80070b0:	e00e      	b.n	80070d0 <HAL_GPIO_Init+0x228>
 80070b2:	2308      	movs	r3, #8
 80070b4:	e00c      	b.n	80070d0 <HAL_GPIO_Init+0x228>
 80070b6:	2306      	movs	r3, #6
 80070b8:	e00a      	b.n	80070d0 <HAL_GPIO_Init+0x228>
 80070ba:	2305      	movs	r3, #5
 80070bc:	e008      	b.n	80070d0 <HAL_GPIO_Init+0x228>
 80070be:	2304      	movs	r3, #4
 80070c0:	e006      	b.n	80070d0 <HAL_GPIO_Init+0x228>
 80070c2:	2303      	movs	r3, #3
 80070c4:	e004      	b.n	80070d0 <HAL_GPIO_Init+0x228>
 80070c6:	2302      	movs	r3, #2
 80070c8:	e002      	b.n	80070d0 <HAL_GPIO_Init+0x228>
 80070ca:	2301      	movs	r3, #1
 80070cc:	e000      	b.n	80070d0 <HAL_GPIO_Init+0x228>
 80070ce:	2300      	movs	r3, #0
 80070d0:	69fa      	ldr	r2, [r7, #28]
 80070d2:	f002 0203 	and.w	r2, r2, #3
 80070d6:	0092      	lsls	r2, r2, #2
 80070d8:	4093      	lsls	r3, r2
 80070da:	69ba      	ldr	r2, [r7, #24]
 80070dc:	4313      	orrs	r3, r2
 80070de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80070e0:	4935      	ldr	r1, [pc, #212]	; (80071b8 <HAL_GPIO_Init+0x310>)
 80070e2:	69fb      	ldr	r3, [r7, #28]
 80070e4:	089b      	lsrs	r3, r3, #2
 80070e6:	3302      	adds	r3, #2
 80070e8:	69ba      	ldr	r2, [r7, #24]
 80070ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80070ee:	4b3b      	ldr	r3, [pc, #236]	; (80071dc <HAL_GPIO_Init+0x334>)
 80070f0:	689b      	ldr	r3, [r3, #8]
 80070f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80070f4:	693b      	ldr	r3, [r7, #16]
 80070f6:	43db      	mvns	r3, r3
 80070f8:	69ba      	ldr	r2, [r7, #24]
 80070fa:	4013      	ands	r3, r2
 80070fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	685b      	ldr	r3, [r3, #4]
 8007102:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007106:	2b00      	cmp	r3, #0
 8007108:	d003      	beq.n	8007112 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800710a:	69ba      	ldr	r2, [r7, #24]
 800710c:	693b      	ldr	r3, [r7, #16]
 800710e:	4313      	orrs	r3, r2
 8007110:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007112:	4a32      	ldr	r2, [pc, #200]	; (80071dc <HAL_GPIO_Init+0x334>)
 8007114:	69bb      	ldr	r3, [r7, #24]
 8007116:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007118:	4b30      	ldr	r3, [pc, #192]	; (80071dc <HAL_GPIO_Init+0x334>)
 800711a:	68db      	ldr	r3, [r3, #12]
 800711c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800711e:	693b      	ldr	r3, [r7, #16]
 8007120:	43db      	mvns	r3, r3
 8007122:	69ba      	ldr	r2, [r7, #24]
 8007124:	4013      	ands	r3, r2
 8007126:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	685b      	ldr	r3, [r3, #4]
 800712c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007130:	2b00      	cmp	r3, #0
 8007132:	d003      	beq.n	800713c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8007134:	69ba      	ldr	r2, [r7, #24]
 8007136:	693b      	ldr	r3, [r7, #16]
 8007138:	4313      	orrs	r3, r2
 800713a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800713c:	4a27      	ldr	r2, [pc, #156]	; (80071dc <HAL_GPIO_Init+0x334>)
 800713e:	69bb      	ldr	r3, [r7, #24]
 8007140:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8007142:	4b26      	ldr	r3, [pc, #152]	; (80071dc <HAL_GPIO_Init+0x334>)
 8007144:	685b      	ldr	r3, [r3, #4]
 8007146:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007148:	693b      	ldr	r3, [r7, #16]
 800714a:	43db      	mvns	r3, r3
 800714c:	69ba      	ldr	r2, [r7, #24]
 800714e:	4013      	ands	r3, r2
 8007150:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	685b      	ldr	r3, [r3, #4]
 8007156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800715a:	2b00      	cmp	r3, #0
 800715c:	d003      	beq.n	8007166 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800715e:	69ba      	ldr	r2, [r7, #24]
 8007160:	693b      	ldr	r3, [r7, #16]
 8007162:	4313      	orrs	r3, r2
 8007164:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007166:	4a1d      	ldr	r2, [pc, #116]	; (80071dc <HAL_GPIO_Init+0x334>)
 8007168:	69bb      	ldr	r3, [r7, #24]
 800716a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800716c:	4b1b      	ldr	r3, [pc, #108]	; (80071dc <HAL_GPIO_Init+0x334>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007172:	693b      	ldr	r3, [r7, #16]
 8007174:	43db      	mvns	r3, r3
 8007176:	69ba      	ldr	r2, [r7, #24]
 8007178:	4013      	ands	r3, r2
 800717a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	685b      	ldr	r3, [r3, #4]
 8007180:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007184:	2b00      	cmp	r3, #0
 8007186:	d003      	beq.n	8007190 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8007188:	69ba      	ldr	r2, [r7, #24]
 800718a:	693b      	ldr	r3, [r7, #16]
 800718c:	4313      	orrs	r3, r2
 800718e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007190:	4a12      	ldr	r2, [pc, #72]	; (80071dc <HAL_GPIO_Init+0x334>)
 8007192:	69bb      	ldr	r3, [r7, #24]
 8007194:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007196:	69fb      	ldr	r3, [r7, #28]
 8007198:	3301      	adds	r3, #1
 800719a:	61fb      	str	r3, [r7, #28]
 800719c:	69fb      	ldr	r3, [r7, #28]
 800719e:	2b0f      	cmp	r3, #15
 80071a0:	f67f ae90 	bls.w	8006ec4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80071a4:	bf00      	nop
 80071a6:	bf00      	nop
 80071a8:	3724      	adds	r7, #36	; 0x24
 80071aa:	46bd      	mov	sp, r7
 80071ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b0:	4770      	bx	lr
 80071b2:	bf00      	nop
 80071b4:	40023800 	.word	0x40023800
 80071b8:	40013800 	.word	0x40013800
 80071bc:	40020000 	.word	0x40020000
 80071c0:	40020400 	.word	0x40020400
 80071c4:	40020800 	.word	0x40020800
 80071c8:	40020c00 	.word	0x40020c00
 80071cc:	40021000 	.word	0x40021000
 80071d0:	40021400 	.word	0x40021400
 80071d4:	40021800 	.word	0x40021800
 80071d8:	40021c00 	.word	0x40021c00
 80071dc:	40013c00 	.word	0x40013c00

080071e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80071e0:	b480      	push	{r7}
 80071e2:	b085      	sub	sp, #20
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
 80071e8:	460b      	mov	r3, r1
 80071ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	691a      	ldr	r2, [r3, #16]
 80071f0:	887b      	ldrh	r3, [r7, #2]
 80071f2:	4013      	ands	r3, r2
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d002      	beq.n	80071fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80071f8:	2301      	movs	r3, #1
 80071fa:	73fb      	strb	r3, [r7, #15]
 80071fc:	e001      	b.n	8007202 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80071fe:	2300      	movs	r3, #0
 8007200:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007202:	7bfb      	ldrb	r3, [r7, #15]
}
 8007204:	4618      	mov	r0, r3
 8007206:	3714      	adds	r7, #20
 8007208:	46bd      	mov	sp, r7
 800720a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720e:	4770      	bx	lr

08007210 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007210:	b480      	push	{r7}
 8007212:	b083      	sub	sp, #12
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
 8007218:	460b      	mov	r3, r1
 800721a:	807b      	strh	r3, [r7, #2]
 800721c:	4613      	mov	r3, r2
 800721e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007220:	787b      	ldrb	r3, [r7, #1]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d003      	beq.n	800722e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007226:	887a      	ldrh	r2, [r7, #2]
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800722c:	e003      	b.n	8007236 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800722e:	887b      	ldrh	r3, [r7, #2]
 8007230:	041a      	lsls	r2, r3, #16
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	619a      	str	r2, [r3, #24]
}
 8007236:	bf00      	nop
 8007238:	370c      	adds	r7, #12
 800723a:	46bd      	mov	sp, r7
 800723c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007240:	4770      	bx	lr
	...

08007244 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b086      	sub	sp, #24
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d101      	bne.n	8007256 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007252:	2301      	movs	r3, #1
 8007254:	e267      	b.n	8007726 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f003 0301 	and.w	r3, r3, #1
 800725e:	2b00      	cmp	r3, #0
 8007260:	d075      	beq.n	800734e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007262:	4b88      	ldr	r3, [pc, #544]	; (8007484 <HAL_RCC_OscConfig+0x240>)
 8007264:	689b      	ldr	r3, [r3, #8]
 8007266:	f003 030c 	and.w	r3, r3, #12
 800726a:	2b04      	cmp	r3, #4
 800726c:	d00c      	beq.n	8007288 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800726e:	4b85      	ldr	r3, [pc, #532]	; (8007484 <HAL_RCC_OscConfig+0x240>)
 8007270:	689b      	ldr	r3, [r3, #8]
 8007272:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007276:	2b08      	cmp	r3, #8
 8007278:	d112      	bne.n	80072a0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800727a:	4b82      	ldr	r3, [pc, #520]	; (8007484 <HAL_RCC_OscConfig+0x240>)
 800727c:	685b      	ldr	r3, [r3, #4]
 800727e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007282:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007286:	d10b      	bne.n	80072a0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007288:	4b7e      	ldr	r3, [pc, #504]	; (8007484 <HAL_RCC_OscConfig+0x240>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007290:	2b00      	cmp	r3, #0
 8007292:	d05b      	beq.n	800734c <HAL_RCC_OscConfig+0x108>
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	685b      	ldr	r3, [r3, #4]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d157      	bne.n	800734c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800729c:	2301      	movs	r3, #1
 800729e:	e242      	b.n	8007726 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	685b      	ldr	r3, [r3, #4]
 80072a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072a8:	d106      	bne.n	80072b8 <HAL_RCC_OscConfig+0x74>
 80072aa:	4b76      	ldr	r3, [pc, #472]	; (8007484 <HAL_RCC_OscConfig+0x240>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	4a75      	ldr	r2, [pc, #468]	; (8007484 <HAL_RCC_OscConfig+0x240>)
 80072b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80072b4:	6013      	str	r3, [r2, #0]
 80072b6:	e01d      	b.n	80072f4 <HAL_RCC_OscConfig+0xb0>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	685b      	ldr	r3, [r3, #4]
 80072bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80072c0:	d10c      	bne.n	80072dc <HAL_RCC_OscConfig+0x98>
 80072c2:	4b70      	ldr	r3, [pc, #448]	; (8007484 <HAL_RCC_OscConfig+0x240>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	4a6f      	ldr	r2, [pc, #444]	; (8007484 <HAL_RCC_OscConfig+0x240>)
 80072c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80072cc:	6013      	str	r3, [r2, #0]
 80072ce:	4b6d      	ldr	r3, [pc, #436]	; (8007484 <HAL_RCC_OscConfig+0x240>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	4a6c      	ldr	r2, [pc, #432]	; (8007484 <HAL_RCC_OscConfig+0x240>)
 80072d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80072d8:	6013      	str	r3, [r2, #0]
 80072da:	e00b      	b.n	80072f4 <HAL_RCC_OscConfig+0xb0>
 80072dc:	4b69      	ldr	r3, [pc, #420]	; (8007484 <HAL_RCC_OscConfig+0x240>)
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	4a68      	ldr	r2, [pc, #416]	; (8007484 <HAL_RCC_OscConfig+0x240>)
 80072e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80072e6:	6013      	str	r3, [r2, #0]
 80072e8:	4b66      	ldr	r3, [pc, #408]	; (8007484 <HAL_RCC_OscConfig+0x240>)
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	4a65      	ldr	r2, [pc, #404]	; (8007484 <HAL_RCC_OscConfig+0x240>)
 80072ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80072f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	685b      	ldr	r3, [r3, #4]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d013      	beq.n	8007324 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80072fc:	f7ff fc92 	bl	8006c24 <HAL_GetTick>
 8007300:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007302:	e008      	b.n	8007316 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007304:	f7ff fc8e 	bl	8006c24 <HAL_GetTick>
 8007308:	4602      	mov	r2, r0
 800730a:	693b      	ldr	r3, [r7, #16]
 800730c:	1ad3      	subs	r3, r2, r3
 800730e:	2b64      	cmp	r3, #100	; 0x64
 8007310:	d901      	bls.n	8007316 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007312:	2303      	movs	r3, #3
 8007314:	e207      	b.n	8007726 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007316:	4b5b      	ldr	r3, [pc, #364]	; (8007484 <HAL_RCC_OscConfig+0x240>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800731e:	2b00      	cmp	r3, #0
 8007320:	d0f0      	beq.n	8007304 <HAL_RCC_OscConfig+0xc0>
 8007322:	e014      	b.n	800734e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007324:	f7ff fc7e 	bl	8006c24 <HAL_GetTick>
 8007328:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800732a:	e008      	b.n	800733e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800732c:	f7ff fc7a 	bl	8006c24 <HAL_GetTick>
 8007330:	4602      	mov	r2, r0
 8007332:	693b      	ldr	r3, [r7, #16]
 8007334:	1ad3      	subs	r3, r2, r3
 8007336:	2b64      	cmp	r3, #100	; 0x64
 8007338:	d901      	bls.n	800733e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800733a:	2303      	movs	r3, #3
 800733c:	e1f3      	b.n	8007726 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800733e:	4b51      	ldr	r3, [pc, #324]	; (8007484 <HAL_RCC_OscConfig+0x240>)
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007346:	2b00      	cmp	r3, #0
 8007348:	d1f0      	bne.n	800732c <HAL_RCC_OscConfig+0xe8>
 800734a:	e000      	b.n	800734e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800734c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f003 0302 	and.w	r3, r3, #2
 8007356:	2b00      	cmp	r3, #0
 8007358:	d063      	beq.n	8007422 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800735a:	4b4a      	ldr	r3, [pc, #296]	; (8007484 <HAL_RCC_OscConfig+0x240>)
 800735c:	689b      	ldr	r3, [r3, #8]
 800735e:	f003 030c 	and.w	r3, r3, #12
 8007362:	2b00      	cmp	r3, #0
 8007364:	d00b      	beq.n	800737e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007366:	4b47      	ldr	r3, [pc, #284]	; (8007484 <HAL_RCC_OscConfig+0x240>)
 8007368:	689b      	ldr	r3, [r3, #8]
 800736a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800736e:	2b08      	cmp	r3, #8
 8007370:	d11c      	bne.n	80073ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007372:	4b44      	ldr	r3, [pc, #272]	; (8007484 <HAL_RCC_OscConfig+0x240>)
 8007374:	685b      	ldr	r3, [r3, #4]
 8007376:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800737a:	2b00      	cmp	r3, #0
 800737c:	d116      	bne.n	80073ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800737e:	4b41      	ldr	r3, [pc, #260]	; (8007484 <HAL_RCC_OscConfig+0x240>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f003 0302 	and.w	r3, r3, #2
 8007386:	2b00      	cmp	r3, #0
 8007388:	d005      	beq.n	8007396 <HAL_RCC_OscConfig+0x152>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	68db      	ldr	r3, [r3, #12]
 800738e:	2b01      	cmp	r3, #1
 8007390:	d001      	beq.n	8007396 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007392:	2301      	movs	r3, #1
 8007394:	e1c7      	b.n	8007726 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007396:	4b3b      	ldr	r3, [pc, #236]	; (8007484 <HAL_RCC_OscConfig+0x240>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	691b      	ldr	r3, [r3, #16]
 80073a2:	00db      	lsls	r3, r3, #3
 80073a4:	4937      	ldr	r1, [pc, #220]	; (8007484 <HAL_RCC_OscConfig+0x240>)
 80073a6:	4313      	orrs	r3, r2
 80073a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80073aa:	e03a      	b.n	8007422 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	68db      	ldr	r3, [r3, #12]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d020      	beq.n	80073f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80073b4:	4b34      	ldr	r3, [pc, #208]	; (8007488 <HAL_RCC_OscConfig+0x244>)
 80073b6:	2201      	movs	r2, #1
 80073b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073ba:	f7ff fc33 	bl	8006c24 <HAL_GetTick>
 80073be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80073c0:	e008      	b.n	80073d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80073c2:	f7ff fc2f 	bl	8006c24 <HAL_GetTick>
 80073c6:	4602      	mov	r2, r0
 80073c8:	693b      	ldr	r3, [r7, #16]
 80073ca:	1ad3      	subs	r3, r2, r3
 80073cc:	2b02      	cmp	r3, #2
 80073ce:	d901      	bls.n	80073d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80073d0:	2303      	movs	r3, #3
 80073d2:	e1a8      	b.n	8007726 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80073d4:	4b2b      	ldr	r3, [pc, #172]	; (8007484 <HAL_RCC_OscConfig+0x240>)
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f003 0302 	and.w	r3, r3, #2
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d0f0      	beq.n	80073c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80073e0:	4b28      	ldr	r3, [pc, #160]	; (8007484 <HAL_RCC_OscConfig+0x240>)
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	691b      	ldr	r3, [r3, #16]
 80073ec:	00db      	lsls	r3, r3, #3
 80073ee:	4925      	ldr	r1, [pc, #148]	; (8007484 <HAL_RCC_OscConfig+0x240>)
 80073f0:	4313      	orrs	r3, r2
 80073f2:	600b      	str	r3, [r1, #0]
 80073f4:	e015      	b.n	8007422 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80073f6:	4b24      	ldr	r3, [pc, #144]	; (8007488 <HAL_RCC_OscConfig+0x244>)
 80073f8:	2200      	movs	r2, #0
 80073fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073fc:	f7ff fc12 	bl	8006c24 <HAL_GetTick>
 8007400:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007402:	e008      	b.n	8007416 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007404:	f7ff fc0e 	bl	8006c24 <HAL_GetTick>
 8007408:	4602      	mov	r2, r0
 800740a:	693b      	ldr	r3, [r7, #16]
 800740c:	1ad3      	subs	r3, r2, r3
 800740e:	2b02      	cmp	r3, #2
 8007410:	d901      	bls.n	8007416 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007412:	2303      	movs	r3, #3
 8007414:	e187      	b.n	8007726 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007416:	4b1b      	ldr	r3, [pc, #108]	; (8007484 <HAL_RCC_OscConfig+0x240>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f003 0302 	and.w	r3, r3, #2
 800741e:	2b00      	cmp	r3, #0
 8007420:	d1f0      	bne.n	8007404 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f003 0308 	and.w	r3, r3, #8
 800742a:	2b00      	cmp	r3, #0
 800742c:	d036      	beq.n	800749c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	695b      	ldr	r3, [r3, #20]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d016      	beq.n	8007464 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007436:	4b15      	ldr	r3, [pc, #84]	; (800748c <HAL_RCC_OscConfig+0x248>)
 8007438:	2201      	movs	r2, #1
 800743a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800743c:	f7ff fbf2 	bl	8006c24 <HAL_GetTick>
 8007440:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007442:	e008      	b.n	8007456 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007444:	f7ff fbee 	bl	8006c24 <HAL_GetTick>
 8007448:	4602      	mov	r2, r0
 800744a:	693b      	ldr	r3, [r7, #16]
 800744c:	1ad3      	subs	r3, r2, r3
 800744e:	2b02      	cmp	r3, #2
 8007450:	d901      	bls.n	8007456 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007452:	2303      	movs	r3, #3
 8007454:	e167      	b.n	8007726 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007456:	4b0b      	ldr	r3, [pc, #44]	; (8007484 <HAL_RCC_OscConfig+0x240>)
 8007458:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800745a:	f003 0302 	and.w	r3, r3, #2
 800745e:	2b00      	cmp	r3, #0
 8007460:	d0f0      	beq.n	8007444 <HAL_RCC_OscConfig+0x200>
 8007462:	e01b      	b.n	800749c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007464:	4b09      	ldr	r3, [pc, #36]	; (800748c <HAL_RCC_OscConfig+0x248>)
 8007466:	2200      	movs	r2, #0
 8007468:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800746a:	f7ff fbdb 	bl	8006c24 <HAL_GetTick>
 800746e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007470:	e00e      	b.n	8007490 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007472:	f7ff fbd7 	bl	8006c24 <HAL_GetTick>
 8007476:	4602      	mov	r2, r0
 8007478:	693b      	ldr	r3, [r7, #16]
 800747a:	1ad3      	subs	r3, r2, r3
 800747c:	2b02      	cmp	r3, #2
 800747e:	d907      	bls.n	8007490 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007480:	2303      	movs	r3, #3
 8007482:	e150      	b.n	8007726 <HAL_RCC_OscConfig+0x4e2>
 8007484:	40023800 	.word	0x40023800
 8007488:	42470000 	.word	0x42470000
 800748c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007490:	4b88      	ldr	r3, [pc, #544]	; (80076b4 <HAL_RCC_OscConfig+0x470>)
 8007492:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007494:	f003 0302 	and.w	r3, r3, #2
 8007498:	2b00      	cmp	r3, #0
 800749a:	d1ea      	bne.n	8007472 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f003 0304 	and.w	r3, r3, #4
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	f000 8097 	beq.w	80075d8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80074aa:	2300      	movs	r3, #0
 80074ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80074ae:	4b81      	ldr	r3, [pc, #516]	; (80076b4 <HAL_RCC_OscConfig+0x470>)
 80074b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d10f      	bne.n	80074da <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80074ba:	2300      	movs	r3, #0
 80074bc:	60bb      	str	r3, [r7, #8]
 80074be:	4b7d      	ldr	r3, [pc, #500]	; (80076b4 <HAL_RCC_OscConfig+0x470>)
 80074c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074c2:	4a7c      	ldr	r2, [pc, #496]	; (80076b4 <HAL_RCC_OscConfig+0x470>)
 80074c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80074c8:	6413      	str	r3, [r2, #64]	; 0x40
 80074ca:	4b7a      	ldr	r3, [pc, #488]	; (80076b4 <HAL_RCC_OscConfig+0x470>)
 80074cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80074d2:	60bb      	str	r3, [r7, #8]
 80074d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80074d6:	2301      	movs	r3, #1
 80074d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80074da:	4b77      	ldr	r3, [pc, #476]	; (80076b8 <HAL_RCC_OscConfig+0x474>)
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d118      	bne.n	8007518 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80074e6:	4b74      	ldr	r3, [pc, #464]	; (80076b8 <HAL_RCC_OscConfig+0x474>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	4a73      	ldr	r2, [pc, #460]	; (80076b8 <HAL_RCC_OscConfig+0x474>)
 80074ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80074f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80074f2:	f7ff fb97 	bl	8006c24 <HAL_GetTick>
 80074f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80074f8:	e008      	b.n	800750c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80074fa:	f7ff fb93 	bl	8006c24 <HAL_GetTick>
 80074fe:	4602      	mov	r2, r0
 8007500:	693b      	ldr	r3, [r7, #16]
 8007502:	1ad3      	subs	r3, r2, r3
 8007504:	2b02      	cmp	r3, #2
 8007506:	d901      	bls.n	800750c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007508:	2303      	movs	r3, #3
 800750a:	e10c      	b.n	8007726 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800750c:	4b6a      	ldr	r3, [pc, #424]	; (80076b8 <HAL_RCC_OscConfig+0x474>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007514:	2b00      	cmp	r3, #0
 8007516:	d0f0      	beq.n	80074fa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	689b      	ldr	r3, [r3, #8]
 800751c:	2b01      	cmp	r3, #1
 800751e:	d106      	bne.n	800752e <HAL_RCC_OscConfig+0x2ea>
 8007520:	4b64      	ldr	r3, [pc, #400]	; (80076b4 <HAL_RCC_OscConfig+0x470>)
 8007522:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007524:	4a63      	ldr	r2, [pc, #396]	; (80076b4 <HAL_RCC_OscConfig+0x470>)
 8007526:	f043 0301 	orr.w	r3, r3, #1
 800752a:	6713      	str	r3, [r2, #112]	; 0x70
 800752c:	e01c      	b.n	8007568 <HAL_RCC_OscConfig+0x324>
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	689b      	ldr	r3, [r3, #8]
 8007532:	2b05      	cmp	r3, #5
 8007534:	d10c      	bne.n	8007550 <HAL_RCC_OscConfig+0x30c>
 8007536:	4b5f      	ldr	r3, [pc, #380]	; (80076b4 <HAL_RCC_OscConfig+0x470>)
 8007538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800753a:	4a5e      	ldr	r2, [pc, #376]	; (80076b4 <HAL_RCC_OscConfig+0x470>)
 800753c:	f043 0304 	orr.w	r3, r3, #4
 8007540:	6713      	str	r3, [r2, #112]	; 0x70
 8007542:	4b5c      	ldr	r3, [pc, #368]	; (80076b4 <HAL_RCC_OscConfig+0x470>)
 8007544:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007546:	4a5b      	ldr	r2, [pc, #364]	; (80076b4 <HAL_RCC_OscConfig+0x470>)
 8007548:	f043 0301 	orr.w	r3, r3, #1
 800754c:	6713      	str	r3, [r2, #112]	; 0x70
 800754e:	e00b      	b.n	8007568 <HAL_RCC_OscConfig+0x324>
 8007550:	4b58      	ldr	r3, [pc, #352]	; (80076b4 <HAL_RCC_OscConfig+0x470>)
 8007552:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007554:	4a57      	ldr	r2, [pc, #348]	; (80076b4 <HAL_RCC_OscConfig+0x470>)
 8007556:	f023 0301 	bic.w	r3, r3, #1
 800755a:	6713      	str	r3, [r2, #112]	; 0x70
 800755c:	4b55      	ldr	r3, [pc, #340]	; (80076b4 <HAL_RCC_OscConfig+0x470>)
 800755e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007560:	4a54      	ldr	r2, [pc, #336]	; (80076b4 <HAL_RCC_OscConfig+0x470>)
 8007562:	f023 0304 	bic.w	r3, r3, #4
 8007566:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	689b      	ldr	r3, [r3, #8]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d015      	beq.n	800759c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007570:	f7ff fb58 	bl	8006c24 <HAL_GetTick>
 8007574:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007576:	e00a      	b.n	800758e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007578:	f7ff fb54 	bl	8006c24 <HAL_GetTick>
 800757c:	4602      	mov	r2, r0
 800757e:	693b      	ldr	r3, [r7, #16]
 8007580:	1ad3      	subs	r3, r2, r3
 8007582:	f241 3288 	movw	r2, #5000	; 0x1388
 8007586:	4293      	cmp	r3, r2
 8007588:	d901      	bls.n	800758e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800758a:	2303      	movs	r3, #3
 800758c:	e0cb      	b.n	8007726 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800758e:	4b49      	ldr	r3, [pc, #292]	; (80076b4 <HAL_RCC_OscConfig+0x470>)
 8007590:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007592:	f003 0302 	and.w	r3, r3, #2
 8007596:	2b00      	cmp	r3, #0
 8007598:	d0ee      	beq.n	8007578 <HAL_RCC_OscConfig+0x334>
 800759a:	e014      	b.n	80075c6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800759c:	f7ff fb42 	bl	8006c24 <HAL_GetTick>
 80075a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80075a2:	e00a      	b.n	80075ba <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80075a4:	f7ff fb3e 	bl	8006c24 <HAL_GetTick>
 80075a8:	4602      	mov	r2, r0
 80075aa:	693b      	ldr	r3, [r7, #16]
 80075ac:	1ad3      	subs	r3, r2, r3
 80075ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d901      	bls.n	80075ba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80075b6:	2303      	movs	r3, #3
 80075b8:	e0b5      	b.n	8007726 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80075ba:	4b3e      	ldr	r3, [pc, #248]	; (80076b4 <HAL_RCC_OscConfig+0x470>)
 80075bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075be:	f003 0302 	and.w	r3, r3, #2
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d1ee      	bne.n	80075a4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80075c6:	7dfb      	ldrb	r3, [r7, #23]
 80075c8:	2b01      	cmp	r3, #1
 80075ca:	d105      	bne.n	80075d8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80075cc:	4b39      	ldr	r3, [pc, #228]	; (80076b4 <HAL_RCC_OscConfig+0x470>)
 80075ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075d0:	4a38      	ldr	r2, [pc, #224]	; (80076b4 <HAL_RCC_OscConfig+0x470>)
 80075d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80075d6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	699b      	ldr	r3, [r3, #24]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	f000 80a1 	beq.w	8007724 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80075e2:	4b34      	ldr	r3, [pc, #208]	; (80076b4 <HAL_RCC_OscConfig+0x470>)
 80075e4:	689b      	ldr	r3, [r3, #8]
 80075e6:	f003 030c 	and.w	r3, r3, #12
 80075ea:	2b08      	cmp	r3, #8
 80075ec:	d05c      	beq.n	80076a8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	699b      	ldr	r3, [r3, #24]
 80075f2:	2b02      	cmp	r3, #2
 80075f4:	d141      	bne.n	800767a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80075f6:	4b31      	ldr	r3, [pc, #196]	; (80076bc <HAL_RCC_OscConfig+0x478>)
 80075f8:	2200      	movs	r2, #0
 80075fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80075fc:	f7ff fb12 	bl	8006c24 <HAL_GetTick>
 8007600:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007602:	e008      	b.n	8007616 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007604:	f7ff fb0e 	bl	8006c24 <HAL_GetTick>
 8007608:	4602      	mov	r2, r0
 800760a:	693b      	ldr	r3, [r7, #16]
 800760c:	1ad3      	subs	r3, r2, r3
 800760e:	2b02      	cmp	r3, #2
 8007610:	d901      	bls.n	8007616 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007612:	2303      	movs	r3, #3
 8007614:	e087      	b.n	8007726 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007616:	4b27      	ldr	r3, [pc, #156]	; (80076b4 <HAL_RCC_OscConfig+0x470>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800761e:	2b00      	cmp	r3, #0
 8007620:	d1f0      	bne.n	8007604 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	69da      	ldr	r2, [r3, #28]
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6a1b      	ldr	r3, [r3, #32]
 800762a:	431a      	orrs	r2, r3
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007630:	019b      	lsls	r3, r3, #6
 8007632:	431a      	orrs	r2, r3
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007638:	085b      	lsrs	r3, r3, #1
 800763a:	3b01      	subs	r3, #1
 800763c:	041b      	lsls	r3, r3, #16
 800763e:	431a      	orrs	r2, r3
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007644:	061b      	lsls	r3, r3, #24
 8007646:	491b      	ldr	r1, [pc, #108]	; (80076b4 <HAL_RCC_OscConfig+0x470>)
 8007648:	4313      	orrs	r3, r2
 800764a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800764c:	4b1b      	ldr	r3, [pc, #108]	; (80076bc <HAL_RCC_OscConfig+0x478>)
 800764e:	2201      	movs	r2, #1
 8007650:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007652:	f7ff fae7 	bl	8006c24 <HAL_GetTick>
 8007656:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007658:	e008      	b.n	800766c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800765a:	f7ff fae3 	bl	8006c24 <HAL_GetTick>
 800765e:	4602      	mov	r2, r0
 8007660:	693b      	ldr	r3, [r7, #16]
 8007662:	1ad3      	subs	r3, r2, r3
 8007664:	2b02      	cmp	r3, #2
 8007666:	d901      	bls.n	800766c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007668:	2303      	movs	r3, #3
 800766a:	e05c      	b.n	8007726 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800766c:	4b11      	ldr	r3, [pc, #68]	; (80076b4 <HAL_RCC_OscConfig+0x470>)
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007674:	2b00      	cmp	r3, #0
 8007676:	d0f0      	beq.n	800765a <HAL_RCC_OscConfig+0x416>
 8007678:	e054      	b.n	8007724 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800767a:	4b10      	ldr	r3, [pc, #64]	; (80076bc <HAL_RCC_OscConfig+0x478>)
 800767c:	2200      	movs	r2, #0
 800767e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007680:	f7ff fad0 	bl	8006c24 <HAL_GetTick>
 8007684:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007686:	e008      	b.n	800769a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007688:	f7ff facc 	bl	8006c24 <HAL_GetTick>
 800768c:	4602      	mov	r2, r0
 800768e:	693b      	ldr	r3, [r7, #16]
 8007690:	1ad3      	subs	r3, r2, r3
 8007692:	2b02      	cmp	r3, #2
 8007694:	d901      	bls.n	800769a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007696:	2303      	movs	r3, #3
 8007698:	e045      	b.n	8007726 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800769a:	4b06      	ldr	r3, [pc, #24]	; (80076b4 <HAL_RCC_OscConfig+0x470>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d1f0      	bne.n	8007688 <HAL_RCC_OscConfig+0x444>
 80076a6:	e03d      	b.n	8007724 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	699b      	ldr	r3, [r3, #24]
 80076ac:	2b01      	cmp	r3, #1
 80076ae:	d107      	bne.n	80076c0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80076b0:	2301      	movs	r3, #1
 80076b2:	e038      	b.n	8007726 <HAL_RCC_OscConfig+0x4e2>
 80076b4:	40023800 	.word	0x40023800
 80076b8:	40007000 	.word	0x40007000
 80076bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80076c0:	4b1b      	ldr	r3, [pc, #108]	; (8007730 <HAL_RCC_OscConfig+0x4ec>)
 80076c2:	685b      	ldr	r3, [r3, #4]
 80076c4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	699b      	ldr	r3, [r3, #24]
 80076ca:	2b01      	cmp	r3, #1
 80076cc:	d028      	beq.n	8007720 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80076d8:	429a      	cmp	r2, r3
 80076da:	d121      	bne.n	8007720 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80076e6:	429a      	cmp	r2, r3
 80076e8:	d11a      	bne.n	8007720 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80076ea:	68fa      	ldr	r2, [r7, #12]
 80076ec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80076f0:	4013      	ands	r3, r2
 80076f2:	687a      	ldr	r2, [r7, #4]
 80076f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80076f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80076f8:	4293      	cmp	r3, r2
 80076fa:	d111      	bne.n	8007720 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007706:	085b      	lsrs	r3, r3, #1
 8007708:	3b01      	subs	r3, #1
 800770a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800770c:	429a      	cmp	r2, r3
 800770e:	d107      	bne.n	8007720 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800771a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800771c:	429a      	cmp	r2, r3
 800771e:	d001      	beq.n	8007724 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007720:	2301      	movs	r3, #1
 8007722:	e000      	b.n	8007726 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007724:	2300      	movs	r3, #0
}
 8007726:	4618      	mov	r0, r3
 8007728:	3718      	adds	r7, #24
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}
 800772e:	bf00      	nop
 8007730:	40023800 	.word	0x40023800

08007734 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b084      	sub	sp, #16
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
 800773c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d101      	bne.n	8007748 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007744:	2301      	movs	r3, #1
 8007746:	e0cc      	b.n	80078e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007748:	4b68      	ldr	r3, [pc, #416]	; (80078ec <HAL_RCC_ClockConfig+0x1b8>)
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f003 0307 	and.w	r3, r3, #7
 8007750:	683a      	ldr	r2, [r7, #0]
 8007752:	429a      	cmp	r2, r3
 8007754:	d90c      	bls.n	8007770 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007756:	4b65      	ldr	r3, [pc, #404]	; (80078ec <HAL_RCC_ClockConfig+0x1b8>)
 8007758:	683a      	ldr	r2, [r7, #0]
 800775a:	b2d2      	uxtb	r2, r2
 800775c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800775e:	4b63      	ldr	r3, [pc, #396]	; (80078ec <HAL_RCC_ClockConfig+0x1b8>)
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f003 0307 	and.w	r3, r3, #7
 8007766:	683a      	ldr	r2, [r7, #0]
 8007768:	429a      	cmp	r2, r3
 800776a:	d001      	beq.n	8007770 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800776c:	2301      	movs	r3, #1
 800776e:	e0b8      	b.n	80078e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f003 0302 	and.w	r3, r3, #2
 8007778:	2b00      	cmp	r3, #0
 800777a:	d020      	beq.n	80077be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f003 0304 	and.w	r3, r3, #4
 8007784:	2b00      	cmp	r3, #0
 8007786:	d005      	beq.n	8007794 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007788:	4b59      	ldr	r3, [pc, #356]	; (80078f0 <HAL_RCC_ClockConfig+0x1bc>)
 800778a:	689b      	ldr	r3, [r3, #8]
 800778c:	4a58      	ldr	r2, [pc, #352]	; (80078f0 <HAL_RCC_ClockConfig+0x1bc>)
 800778e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007792:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f003 0308 	and.w	r3, r3, #8
 800779c:	2b00      	cmp	r3, #0
 800779e:	d005      	beq.n	80077ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80077a0:	4b53      	ldr	r3, [pc, #332]	; (80078f0 <HAL_RCC_ClockConfig+0x1bc>)
 80077a2:	689b      	ldr	r3, [r3, #8]
 80077a4:	4a52      	ldr	r2, [pc, #328]	; (80078f0 <HAL_RCC_ClockConfig+0x1bc>)
 80077a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80077aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80077ac:	4b50      	ldr	r3, [pc, #320]	; (80078f0 <HAL_RCC_ClockConfig+0x1bc>)
 80077ae:	689b      	ldr	r3, [r3, #8]
 80077b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	689b      	ldr	r3, [r3, #8]
 80077b8:	494d      	ldr	r1, [pc, #308]	; (80078f0 <HAL_RCC_ClockConfig+0x1bc>)
 80077ba:	4313      	orrs	r3, r2
 80077bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f003 0301 	and.w	r3, r3, #1
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d044      	beq.n	8007854 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	685b      	ldr	r3, [r3, #4]
 80077ce:	2b01      	cmp	r3, #1
 80077d0:	d107      	bne.n	80077e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80077d2:	4b47      	ldr	r3, [pc, #284]	; (80078f0 <HAL_RCC_ClockConfig+0x1bc>)
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d119      	bne.n	8007812 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80077de:	2301      	movs	r3, #1
 80077e0:	e07f      	b.n	80078e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	685b      	ldr	r3, [r3, #4]
 80077e6:	2b02      	cmp	r3, #2
 80077e8:	d003      	beq.n	80077f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80077ee:	2b03      	cmp	r3, #3
 80077f0:	d107      	bne.n	8007802 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80077f2:	4b3f      	ldr	r3, [pc, #252]	; (80078f0 <HAL_RCC_ClockConfig+0x1bc>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d109      	bne.n	8007812 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80077fe:	2301      	movs	r3, #1
 8007800:	e06f      	b.n	80078e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007802:	4b3b      	ldr	r3, [pc, #236]	; (80078f0 <HAL_RCC_ClockConfig+0x1bc>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f003 0302 	and.w	r3, r3, #2
 800780a:	2b00      	cmp	r3, #0
 800780c:	d101      	bne.n	8007812 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800780e:	2301      	movs	r3, #1
 8007810:	e067      	b.n	80078e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007812:	4b37      	ldr	r3, [pc, #220]	; (80078f0 <HAL_RCC_ClockConfig+0x1bc>)
 8007814:	689b      	ldr	r3, [r3, #8]
 8007816:	f023 0203 	bic.w	r2, r3, #3
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	685b      	ldr	r3, [r3, #4]
 800781e:	4934      	ldr	r1, [pc, #208]	; (80078f0 <HAL_RCC_ClockConfig+0x1bc>)
 8007820:	4313      	orrs	r3, r2
 8007822:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007824:	f7ff f9fe 	bl	8006c24 <HAL_GetTick>
 8007828:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800782a:	e00a      	b.n	8007842 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800782c:	f7ff f9fa 	bl	8006c24 <HAL_GetTick>
 8007830:	4602      	mov	r2, r0
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	1ad3      	subs	r3, r2, r3
 8007836:	f241 3288 	movw	r2, #5000	; 0x1388
 800783a:	4293      	cmp	r3, r2
 800783c:	d901      	bls.n	8007842 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800783e:	2303      	movs	r3, #3
 8007840:	e04f      	b.n	80078e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007842:	4b2b      	ldr	r3, [pc, #172]	; (80078f0 <HAL_RCC_ClockConfig+0x1bc>)
 8007844:	689b      	ldr	r3, [r3, #8]
 8007846:	f003 020c 	and.w	r2, r3, #12
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	685b      	ldr	r3, [r3, #4]
 800784e:	009b      	lsls	r3, r3, #2
 8007850:	429a      	cmp	r2, r3
 8007852:	d1eb      	bne.n	800782c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007854:	4b25      	ldr	r3, [pc, #148]	; (80078ec <HAL_RCC_ClockConfig+0x1b8>)
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f003 0307 	and.w	r3, r3, #7
 800785c:	683a      	ldr	r2, [r7, #0]
 800785e:	429a      	cmp	r2, r3
 8007860:	d20c      	bcs.n	800787c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007862:	4b22      	ldr	r3, [pc, #136]	; (80078ec <HAL_RCC_ClockConfig+0x1b8>)
 8007864:	683a      	ldr	r2, [r7, #0]
 8007866:	b2d2      	uxtb	r2, r2
 8007868:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800786a:	4b20      	ldr	r3, [pc, #128]	; (80078ec <HAL_RCC_ClockConfig+0x1b8>)
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f003 0307 	and.w	r3, r3, #7
 8007872:	683a      	ldr	r2, [r7, #0]
 8007874:	429a      	cmp	r2, r3
 8007876:	d001      	beq.n	800787c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007878:	2301      	movs	r3, #1
 800787a:	e032      	b.n	80078e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f003 0304 	and.w	r3, r3, #4
 8007884:	2b00      	cmp	r3, #0
 8007886:	d008      	beq.n	800789a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007888:	4b19      	ldr	r3, [pc, #100]	; (80078f0 <HAL_RCC_ClockConfig+0x1bc>)
 800788a:	689b      	ldr	r3, [r3, #8]
 800788c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	68db      	ldr	r3, [r3, #12]
 8007894:	4916      	ldr	r1, [pc, #88]	; (80078f0 <HAL_RCC_ClockConfig+0x1bc>)
 8007896:	4313      	orrs	r3, r2
 8007898:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f003 0308 	and.w	r3, r3, #8
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d009      	beq.n	80078ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80078a6:	4b12      	ldr	r3, [pc, #72]	; (80078f0 <HAL_RCC_ClockConfig+0x1bc>)
 80078a8:	689b      	ldr	r3, [r3, #8]
 80078aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	691b      	ldr	r3, [r3, #16]
 80078b2:	00db      	lsls	r3, r3, #3
 80078b4:	490e      	ldr	r1, [pc, #56]	; (80078f0 <HAL_RCC_ClockConfig+0x1bc>)
 80078b6:	4313      	orrs	r3, r2
 80078b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80078ba:	f000 f821 	bl	8007900 <HAL_RCC_GetSysClockFreq>
 80078be:	4602      	mov	r2, r0
 80078c0:	4b0b      	ldr	r3, [pc, #44]	; (80078f0 <HAL_RCC_ClockConfig+0x1bc>)
 80078c2:	689b      	ldr	r3, [r3, #8]
 80078c4:	091b      	lsrs	r3, r3, #4
 80078c6:	f003 030f 	and.w	r3, r3, #15
 80078ca:	490a      	ldr	r1, [pc, #40]	; (80078f4 <HAL_RCC_ClockConfig+0x1c0>)
 80078cc:	5ccb      	ldrb	r3, [r1, r3]
 80078ce:	fa22 f303 	lsr.w	r3, r2, r3
 80078d2:	4a09      	ldr	r2, [pc, #36]	; (80078f8 <HAL_RCC_ClockConfig+0x1c4>)
 80078d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80078d6:	4b09      	ldr	r3, [pc, #36]	; (80078fc <HAL_RCC_ClockConfig+0x1c8>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	4618      	mov	r0, r3
 80078dc:	f7ff f95e 	bl	8006b9c <HAL_InitTick>

  return HAL_OK;
 80078e0:	2300      	movs	r3, #0
}
 80078e2:	4618      	mov	r0, r3
 80078e4:	3710      	adds	r7, #16
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bd80      	pop	{r7, pc}
 80078ea:	bf00      	nop
 80078ec:	40023c00 	.word	0x40023c00
 80078f0:	40023800 	.word	0x40023800
 80078f4:	0802bd64 	.word	0x0802bd64
 80078f8:	20000000 	.word	0x20000000
 80078fc:	20000010 	.word	0x20000010

08007900 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007900:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007904:	b090      	sub	sp, #64	; 0x40
 8007906:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007908:	2300      	movs	r3, #0
 800790a:	637b      	str	r3, [r7, #52]	; 0x34
 800790c:	2300      	movs	r3, #0
 800790e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007910:	2300      	movs	r3, #0
 8007912:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8007914:	2300      	movs	r3, #0
 8007916:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007918:	4b59      	ldr	r3, [pc, #356]	; (8007a80 <HAL_RCC_GetSysClockFreq+0x180>)
 800791a:	689b      	ldr	r3, [r3, #8]
 800791c:	f003 030c 	and.w	r3, r3, #12
 8007920:	2b08      	cmp	r3, #8
 8007922:	d00d      	beq.n	8007940 <HAL_RCC_GetSysClockFreq+0x40>
 8007924:	2b08      	cmp	r3, #8
 8007926:	f200 80a1 	bhi.w	8007a6c <HAL_RCC_GetSysClockFreq+0x16c>
 800792a:	2b00      	cmp	r3, #0
 800792c:	d002      	beq.n	8007934 <HAL_RCC_GetSysClockFreq+0x34>
 800792e:	2b04      	cmp	r3, #4
 8007930:	d003      	beq.n	800793a <HAL_RCC_GetSysClockFreq+0x3a>
 8007932:	e09b      	b.n	8007a6c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007934:	4b53      	ldr	r3, [pc, #332]	; (8007a84 <HAL_RCC_GetSysClockFreq+0x184>)
 8007936:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8007938:	e09b      	b.n	8007a72 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800793a:	4b53      	ldr	r3, [pc, #332]	; (8007a88 <HAL_RCC_GetSysClockFreq+0x188>)
 800793c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800793e:	e098      	b.n	8007a72 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007940:	4b4f      	ldr	r3, [pc, #316]	; (8007a80 <HAL_RCC_GetSysClockFreq+0x180>)
 8007942:	685b      	ldr	r3, [r3, #4]
 8007944:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007948:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800794a:	4b4d      	ldr	r3, [pc, #308]	; (8007a80 <HAL_RCC_GetSysClockFreq+0x180>)
 800794c:	685b      	ldr	r3, [r3, #4]
 800794e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007952:	2b00      	cmp	r3, #0
 8007954:	d028      	beq.n	80079a8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007956:	4b4a      	ldr	r3, [pc, #296]	; (8007a80 <HAL_RCC_GetSysClockFreq+0x180>)
 8007958:	685b      	ldr	r3, [r3, #4]
 800795a:	099b      	lsrs	r3, r3, #6
 800795c:	2200      	movs	r2, #0
 800795e:	623b      	str	r3, [r7, #32]
 8007960:	627a      	str	r2, [r7, #36]	; 0x24
 8007962:	6a3b      	ldr	r3, [r7, #32]
 8007964:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007968:	2100      	movs	r1, #0
 800796a:	4b47      	ldr	r3, [pc, #284]	; (8007a88 <HAL_RCC_GetSysClockFreq+0x188>)
 800796c:	fb03 f201 	mul.w	r2, r3, r1
 8007970:	2300      	movs	r3, #0
 8007972:	fb00 f303 	mul.w	r3, r0, r3
 8007976:	4413      	add	r3, r2
 8007978:	4a43      	ldr	r2, [pc, #268]	; (8007a88 <HAL_RCC_GetSysClockFreq+0x188>)
 800797a:	fba0 1202 	umull	r1, r2, r0, r2
 800797e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007980:	460a      	mov	r2, r1
 8007982:	62ba      	str	r2, [r7, #40]	; 0x28
 8007984:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007986:	4413      	add	r3, r2
 8007988:	62fb      	str	r3, [r7, #44]	; 0x2c
 800798a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800798c:	2200      	movs	r2, #0
 800798e:	61bb      	str	r3, [r7, #24]
 8007990:	61fa      	str	r2, [r7, #28]
 8007992:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007996:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800799a:	f7f9 f905 	bl	8000ba8 <__aeabi_uldivmod>
 800799e:	4602      	mov	r2, r0
 80079a0:	460b      	mov	r3, r1
 80079a2:	4613      	mov	r3, r2
 80079a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80079a6:	e053      	b.n	8007a50 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80079a8:	4b35      	ldr	r3, [pc, #212]	; (8007a80 <HAL_RCC_GetSysClockFreq+0x180>)
 80079aa:	685b      	ldr	r3, [r3, #4]
 80079ac:	099b      	lsrs	r3, r3, #6
 80079ae:	2200      	movs	r2, #0
 80079b0:	613b      	str	r3, [r7, #16]
 80079b2:	617a      	str	r2, [r7, #20]
 80079b4:	693b      	ldr	r3, [r7, #16]
 80079b6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80079ba:	f04f 0b00 	mov.w	fp, #0
 80079be:	4652      	mov	r2, sl
 80079c0:	465b      	mov	r3, fp
 80079c2:	f04f 0000 	mov.w	r0, #0
 80079c6:	f04f 0100 	mov.w	r1, #0
 80079ca:	0159      	lsls	r1, r3, #5
 80079cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80079d0:	0150      	lsls	r0, r2, #5
 80079d2:	4602      	mov	r2, r0
 80079d4:	460b      	mov	r3, r1
 80079d6:	ebb2 080a 	subs.w	r8, r2, sl
 80079da:	eb63 090b 	sbc.w	r9, r3, fp
 80079de:	f04f 0200 	mov.w	r2, #0
 80079e2:	f04f 0300 	mov.w	r3, #0
 80079e6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80079ea:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80079ee:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80079f2:	ebb2 0408 	subs.w	r4, r2, r8
 80079f6:	eb63 0509 	sbc.w	r5, r3, r9
 80079fa:	f04f 0200 	mov.w	r2, #0
 80079fe:	f04f 0300 	mov.w	r3, #0
 8007a02:	00eb      	lsls	r3, r5, #3
 8007a04:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007a08:	00e2      	lsls	r2, r4, #3
 8007a0a:	4614      	mov	r4, r2
 8007a0c:	461d      	mov	r5, r3
 8007a0e:	eb14 030a 	adds.w	r3, r4, sl
 8007a12:	603b      	str	r3, [r7, #0]
 8007a14:	eb45 030b 	adc.w	r3, r5, fp
 8007a18:	607b      	str	r3, [r7, #4]
 8007a1a:	f04f 0200 	mov.w	r2, #0
 8007a1e:	f04f 0300 	mov.w	r3, #0
 8007a22:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007a26:	4629      	mov	r1, r5
 8007a28:	028b      	lsls	r3, r1, #10
 8007a2a:	4621      	mov	r1, r4
 8007a2c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007a30:	4621      	mov	r1, r4
 8007a32:	028a      	lsls	r2, r1, #10
 8007a34:	4610      	mov	r0, r2
 8007a36:	4619      	mov	r1, r3
 8007a38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	60bb      	str	r3, [r7, #8]
 8007a3e:	60fa      	str	r2, [r7, #12]
 8007a40:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007a44:	f7f9 f8b0 	bl	8000ba8 <__aeabi_uldivmod>
 8007a48:	4602      	mov	r2, r0
 8007a4a:	460b      	mov	r3, r1
 8007a4c:	4613      	mov	r3, r2
 8007a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007a50:	4b0b      	ldr	r3, [pc, #44]	; (8007a80 <HAL_RCC_GetSysClockFreq+0x180>)
 8007a52:	685b      	ldr	r3, [r3, #4]
 8007a54:	0c1b      	lsrs	r3, r3, #16
 8007a56:	f003 0303 	and.w	r3, r3, #3
 8007a5a:	3301      	adds	r3, #1
 8007a5c:	005b      	lsls	r3, r3, #1
 8007a5e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8007a60:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a64:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a68:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007a6a:	e002      	b.n	8007a72 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007a6c:	4b05      	ldr	r3, [pc, #20]	; (8007a84 <HAL_RCC_GetSysClockFreq+0x184>)
 8007a6e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007a70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8007a74:	4618      	mov	r0, r3
 8007a76:	3740      	adds	r7, #64	; 0x40
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007a7e:	bf00      	nop
 8007a80:	40023800 	.word	0x40023800
 8007a84:	00f42400 	.word	0x00f42400
 8007a88:	017d7840 	.word	0x017d7840

08007a8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007a90:	4b03      	ldr	r3, [pc, #12]	; (8007aa0 <HAL_RCC_GetHCLKFreq+0x14>)
 8007a92:	681b      	ldr	r3, [r3, #0]
}
 8007a94:	4618      	mov	r0, r3
 8007a96:	46bd      	mov	sp, r7
 8007a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9c:	4770      	bx	lr
 8007a9e:	bf00      	nop
 8007aa0:	20000000 	.word	0x20000000

08007aa4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007aa8:	f7ff fff0 	bl	8007a8c <HAL_RCC_GetHCLKFreq>
 8007aac:	4602      	mov	r2, r0
 8007aae:	4b05      	ldr	r3, [pc, #20]	; (8007ac4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007ab0:	689b      	ldr	r3, [r3, #8]
 8007ab2:	0a9b      	lsrs	r3, r3, #10
 8007ab4:	f003 0307 	and.w	r3, r3, #7
 8007ab8:	4903      	ldr	r1, [pc, #12]	; (8007ac8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007aba:	5ccb      	ldrb	r3, [r1, r3]
 8007abc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	bd80      	pop	{r7, pc}
 8007ac4:	40023800 	.word	0x40023800
 8007ac8:	0802bd74 	.word	0x0802bd74

08007acc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007ad0:	f7ff ffdc 	bl	8007a8c <HAL_RCC_GetHCLKFreq>
 8007ad4:	4602      	mov	r2, r0
 8007ad6:	4b05      	ldr	r3, [pc, #20]	; (8007aec <HAL_RCC_GetPCLK2Freq+0x20>)
 8007ad8:	689b      	ldr	r3, [r3, #8]
 8007ada:	0b5b      	lsrs	r3, r3, #13
 8007adc:	f003 0307 	and.w	r3, r3, #7
 8007ae0:	4903      	ldr	r1, [pc, #12]	; (8007af0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007ae2:	5ccb      	ldrb	r3, [r1, r3]
 8007ae4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007ae8:	4618      	mov	r0, r3
 8007aea:	bd80      	pop	{r7, pc}
 8007aec:	40023800 	.word	0x40023800
 8007af0:	0802bd74 	.word	0x0802bd74

08007af4 <__cvt>:
 8007af4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007af8:	ec55 4b10 	vmov	r4, r5, d0
 8007afc:	2d00      	cmp	r5, #0
 8007afe:	460e      	mov	r6, r1
 8007b00:	4619      	mov	r1, r3
 8007b02:	462b      	mov	r3, r5
 8007b04:	bfbb      	ittet	lt
 8007b06:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007b0a:	461d      	movlt	r5, r3
 8007b0c:	2300      	movge	r3, #0
 8007b0e:	232d      	movlt	r3, #45	; 0x2d
 8007b10:	700b      	strb	r3, [r1, #0]
 8007b12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b14:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007b18:	4691      	mov	r9, r2
 8007b1a:	f023 0820 	bic.w	r8, r3, #32
 8007b1e:	bfbc      	itt	lt
 8007b20:	4622      	movlt	r2, r4
 8007b22:	4614      	movlt	r4, r2
 8007b24:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007b28:	d005      	beq.n	8007b36 <__cvt+0x42>
 8007b2a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007b2e:	d100      	bne.n	8007b32 <__cvt+0x3e>
 8007b30:	3601      	adds	r6, #1
 8007b32:	2102      	movs	r1, #2
 8007b34:	e000      	b.n	8007b38 <__cvt+0x44>
 8007b36:	2103      	movs	r1, #3
 8007b38:	ab03      	add	r3, sp, #12
 8007b3a:	9301      	str	r3, [sp, #4]
 8007b3c:	ab02      	add	r3, sp, #8
 8007b3e:	9300      	str	r3, [sp, #0]
 8007b40:	ec45 4b10 	vmov	d0, r4, r5
 8007b44:	4653      	mov	r3, sl
 8007b46:	4632      	mov	r2, r6
 8007b48:	f000 ff0a 	bl	8008960 <_dtoa_r>
 8007b4c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007b50:	4607      	mov	r7, r0
 8007b52:	d102      	bne.n	8007b5a <__cvt+0x66>
 8007b54:	f019 0f01 	tst.w	r9, #1
 8007b58:	d022      	beq.n	8007ba0 <__cvt+0xac>
 8007b5a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007b5e:	eb07 0906 	add.w	r9, r7, r6
 8007b62:	d110      	bne.n	8007b86 <__cvt+0x92>
 8007b64:	783b      	ldrb	r3, [r7, #0]
 8007b66:	2b30      	cmp	r3, #48	; 0x30
 8007b68:	d10a      	bne.n	8007b80 <__cvt+0x8c>
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	4620      	mov	r0, r4
 8007b70:	4629      	mov	r1, r5
 8007b72:	f7f8 ffa9 	bl	8000ac8 <__aeabi_dcmpeq>
 8007b76:	b918      	cbnz	r0, 8007b80 <__cvt+0x8c>
 8007b78:	f1c6 0601 	rsb	r6, r6, #1
 8007b7c:	f8ca 6000 	str.w	r6, [sl]
 8007b80:	f8da 3000 	ldr.w	r3, [sl]
 8007b84:	4499      	add	r9, r3
 8007b86:	2200      	movs	r2, #0
 8007b88:	2300      	movs	r3, #0
 8007b8a:	4620      	mov	r0, r4
 8007b8c:	4629      	mov	r1, r5
 8007b8e:	f7f8 ff9b 	bl	8000ac8 <__aeabi_dcmpeq>
 8007b92:	b108      	cbz	r0, 8007b98 <__cvt+0xa4>
 8007b94:	f8cd 900c 	str.w	r9, [sp, #12]
 8007b98:	2230      	movs	r2, #48	; 0x30
 8007b9a:	9b03      	ldr	r3, [sp, #12]
 8007b9c:	454b      	cmp	r3, r9
 8007b9e:	d307      	bcc.n	8007bb0 <__cvt+0xbc>
 8007ba0:	9b03      	ldr	r3, [sp, #12]
 8007ba2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007ba4:	1bdb      	subs	r3, r3, r7
 8007ba6:	4638      	mov	r0, r7
 8007ba8:	6013      	str	r3, [r2, #0]
 8007baa:	b004      	add	sp, #16
 8007bac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bb0:	1c59      	adds	r1, r3, #1
 8007bb2:	9103      	str	r1, [sp, #12]
 8007bb4:	701a      	strb	r2, [r3, #0]
 8007bb6:	e7f0      	b.n	8007b9a <__cvt+0xa6>

08007bb8 <__exponent>:
 8007bb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007bba:	4603      	mov	r3, r0
 8007bbc:	2900      	cmp	r1, #0
 8007bbe:	bfb8      	it	lt
 8007bc0:	4249      	neglt	r1, r1
 8007bc2:	f803 2b02 	strb.w	r2, [r3], #2
 8007bc6:	bfb4      	ite	lt
 8007bc8:	222d      	movlt	r2, #45	; 0x2d
 8007bca:	222b      	movge	r2, #43	; 0x2b
 8007bcc:	2909      	cmp	r1, #9
 8007bce:	7042      	strb	r2, [r0, #1]
 8007bd0:	dd2a      	ble.n	8007c28 <__exponent+0x70>
 8007bd2:	f10d 0207 	add.w	r2, sp, #7
 8007bd6:	4617      	mov	r7, r2
 8007bd8:	260a      	movs	r6, #10
 8007bda:	4694      	mov	ip, r2
 8007bdc:	fb91 f5f6 	sdiv	r5, r1, r6
 8007be0:	fb06 1415 	mls	r4, r6, r5, r1
 8007be4:	3430      	adds	r4, #48	; 0x30
 8007be6:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8007bea:	460c      	mov	r4, r1
 8007bec:	2c63      	cmp	r4, #99	; 0x63
 8007bee:	f102 32ff 	add.w	r2, r2, #4294967295
 8007bf2:	4629      	mov	r1, r5
 8007bf4:	dcf1      	bgt.n	8007bda <__exponent+0x22>
 8007bf6:	3130      	adds	r1, #48	; 0x30
 8007bf8:	f1ac 0402 	sub.w	r4, ip, #2
 8007bfc:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007c00:	1c41      	adds	r1, r0, #1
 8007c02:	4622      	mov	r2, r4
 8007c04:	42ba      	cmp	r2, r7
 8007c06:	d30a      	bcc.n	8007c1e <__exponent+0x66>
 8007c08:	f10d 0209 	add.w	r2, sp, #9
 8007c0c:	eba2 020c 	sub.w	r2, r2, ip
 8007c10:	42bc      	cmp	r4, r7
 8007c12:	bf88      	it	hi
 8007c14:	2200      	movhi	r2, #0
 8007c16:	4413      	add	r3, r2
 8007c18:	1a18      	subs	r0, r3, r0
 8007c1a:	b003      	add	sp, #12
 8007c1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c1e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8007c22:	f801 5f01 	strb.w	r5, [r1, #1]!
 8007c26:	e7ed      	b.n	8007c04 <__exponent+0x4c>
 8007c28:	2330      	movs	r3, #48	; 0x30
 8007c2a:	3130      	adds	r1, #48	; 0x30
 8007c2c:	7083      	strb	r3, [r0, #2]
 8007c2e:	70c1      	strb	r1, [r0, #3]
 8007c30:	1d03      	adds	r3, r0, #4
 8007c32:	e7f1      	b.n	8007c18 <__exponent+0x60>

08007c34 <_printf_float>:
 8007c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c38:	ed2d 8b02 	vpush	{d8}
 8007c3c:	b08d      	sub	sp, #52	; 0x34
 8007c3e:	460c      	mov	r4, r1
 8007c40:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007c44:	4616      	mov	r6, r2
 8007c46:	461f      	mov	r7, r3
 8007c48:	4605      	mov	r5, r0
 8007c4a:	f000 fd7b 	bl	8008744 <_localeconv_r>
 8007c4e:	f8d0 a000 	ldr.w	sl, [r0]
 8007c52:	4650      	mov	r0, sl
 8007c54:	f7f8 fb0c 	bl	8000270 <strlen>
 8007c58:	2300      	movs	r3, #0
 8007c5a:	930a      	str	r3, [sp, #40]	; 0x28
 8007c5c:	6823      	ldr	r3, [r4, #0]
 8007c5e:	9305      	str	r3, [sp, #20]
 8007c60:	f8d8 3000 	ldr.w	r3, [r8]
 8007c64:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007c68:	3307      	adds	r3, #7
 8007c6a:	f023 0307 	bic.w	r3, r3, #7
 8007c6e:	f103 0208 	add.w	r2, r3, #8
 8007c72:	f8c8 2000 	str.w	r2, [r8]
 8007c76:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007c7a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007c7e:	9307      	str	r3, [sp, #28]
 8007c80:	f8cd 8018 	str.w	r8, [sp, #24]
 8007c84:	ee08 0a10 	vmov	s16, r0
 8007c88:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8007c8c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007c90:	4b9e      	ldr	r3, [pc, #632]	; (8007f0c <_printf_float+0x2d8>)
 8007c92:	f04f 32ff 	mov.w	r2, #4294967295
 8007c96:	f7f8 ff49 	bl	8000b2c <__aeabi_dcmpun>
 8007c9a:	bb88      	cbnz	r0, 8007d00 <_printf_float+0xcc>
 8007c9c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007ca0:	4b9a      	ldr	r3, [pc, #616]	; (8007f0c <_printf_float+0x2d8>)
 8007ca2:	f04f 32ff 	mov.w	r2, #4294967295
 8007ca6:	f7f8 ff23 	bl	8000af0 <__aeabi_dcmple>
 8007caa:	bb48      	cbnz	r0, 8007d00 <_printf_float+0xcc>
 8007cac:	2200      	movs	r2, #0
 8007cae:	2300      	movs	r3, #0
 8007cb0:	4640      	mov	r0, r8
 8007cb2:	4649      	mov	r1, r9
 8007cb4:	f7f8 ff12 	bl	8000adc <__aeabi_dcmplt>
 8007cb8:	b110      	cbz	r0, 8007cc0 <_printf_float+0x8c>
 8007cba:	232d      	movs	r3, #45	; 0x2d
 8007cbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007cc0:	4a93      	ldr	r2, [pc, #588]	; (8007f10 <_printf_float+0x2dc>)
 8007cc2:	4b94      	ldr	r3, [pc, #592]	; (8007f14 <_printf_float+0x2e0>)
 8007cc4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007cc8:	bf94      	ite	ls
 8007cca:	4690      	movls	r8, r2
 8007ccc:	4698      	movhi	r8, r3
 8007cce:	2303      	movs	r3, #3
 8007cd0:	6123      	str	r3, [r4, #16]
 8007cd2:	9b05      	ldr	r3, [sp, #20]
 8007cd4:	f023 0304 	bic.w	r3, r3, #4
 8007cd8:	6023      	str	r3, [r4, #0]
 8007cda:	f04f 0900 	mov.w	r9, #0
 8007cde:	9700      	str	r7, [sp, #0]
 8007ce0:	4633      	mov	r3, r6
 8007ce2:	aa0b      	add	r2, sp, #44	; 0x2c
 8007ce4:	4621      	mov	r1, r4
 8007ce6:	4628      	mov	r0, r5
 8007ce8:	f000 f9da 	bl	80080a0 <_printf_common>
 8007cec:	3001      	adds	r0, #1
 8007cee:	f040 8090 	bne.w	8007e12 <_printf_float+0x1de>
 8007cf2:	f04f 30ff 	mov.w	r0, #4294967295
 8007cf6:	b00d      	add	sp, #52	; 0x34
 8007cf8:	ecbd 8b02 	vpop	{d8}
 8007cfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d00:	4642      	mov	r2, r8
 8007d02:	464b      	mov	r3, r9
 8007d04:	4640      	mov	r0, r8
 8007d06:	4649      	mov	r1, r9
 8007d08:	f7f8 ff10 	bl	8000b2c <__aeabi_dcmpun>
 8007d0c:	b140      	cbz	r0, 8007d20 <_printf_float+0xec>
 8007d0e:	464b      	mov	r3, r9
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	bfbc      	itt	lt
 8007d14:	232d      	movlt	r3, #45	; 0x2d
 8007d16:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007d1a:	4a7f      	ldr	r2, [pc, #508]	; (8007f18 <_printf_float+0x2e4>)
 8007d1c:	4b7f      	ldr	r3, [pc, #508]	; (8007f1c <_printf_float+0x2e8>)
 8007d1e:	e7d1      	b.n	8007cc4 <_printf_float+0x90>
 8007d20:	6863      	ldr	r3, [r4, #4]
 8007d22:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007d26:	9206      	str	r2, [sp, #24]
 8007d28:	1c5a      	adds	r2, r3, #1
 8007d2a:	d13f      	bne.n	8007dac <_printf_float+0x178>
 8007d2c:	2306      	movs	r3, #6
 8007d2e:	6063      	str	r3, [r4, #4]
 8007d30:	9b05      	ldr	r3, [sp, #20]
 8007d32:	6861      	ldr	r1, [r4, #4]
 8007d34:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007d38:	2300      	movs	r3, #0
 8007d3a:	9303      	str	r3, [sp, #12]
 8007d3c:	ab0a      	add	r3, sp, #40	; 0x28
 8007d3e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007d42:	ab09      	add	r3, sp, #36	; 0x24
 8007d44:	ec49 8b10 	vmov	d0, r8, r9
 8007d48:	9300      	str	r3, [sp, #0]
 8007d4a:	6022      	str	r2, [r4, #0]
 8007d4c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007d50:	4628      	mov	r0, r5
 8007d52:	f7ff fecf 	bl	8007af4 <__cvt>
 8007d56:	9b06      	ldr	r3, [sp, #24]
 8007d58:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007d5a:	2b47      	cmp	r3, #71	; 0x47
 8007d5c:	4680      	mov	r8, r0
 8007d5e:	d108      	bne.n	8007d72 <_printf_float+0x13e>
 8007d60:	1cc8      	adds	r0, r1, #3
 8007d62:	db02      	blt.n	8007d6a <_printf_float+0x136>
 8007d64:	6863      	ldr	r3, [r4, #4]
 8007d66:	4299      	cmp	r1, r3
 8007d68:	dd41      	ble.n	8007dee <_printf_float+0x1ba>
 8007d6a:	f1ab 0302 	sub.w	r3, fp, #2
 8007d6e:	fa5f fb83 	uxtb.w	fp, r3
 8007d72:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007d76:	d820      	bhi.n	8007dba <_printf_float+0x186>
 8007d78:	3901      	subs	r1, #1
 8007d7a:	465a      	mov	r2, fp
 8007d7c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007d80:	9109      	str	r1, [sp, #36]	; 0x24
 8007d82:	f7ff ff19 	bl	8007bb8 <__exponent>
 8007d86:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007d88:	1813      	adds	r3, r2, r0
 8007d8a:	2a01      	cmp	r2, #1
 8007d8c:	4681      	mov	r9, r0
 8007d8e:	6123      	str	r3, [r4, #16]
 8007d90:	dc02      	bgt.n	8007d98 <_printf_float+0x164>
 8007d92:	6822      	ldr	r2, [r4, #0]
 8007d94:	07d2      	lsls	r2, r2, #31
 8007d96:	d501      	bpl.n	8007d9c <_printf_float+0x168>
 8007d98:	3301      	adds	r3, #1
 8007d9a:	6123      	str	r3, [r4, #16]
 8007d9c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d09c      	beq.n	8007cde <_printf_float+0xaa>
 8007da4:	232d      	movs	r3, #45	; 0x2d
 8007da6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007daa:	e798      	b.n	8007cde <_printf_float+0xaa>
 8007dac:	9a06      	ldr	r2, [sp, #24]
 8007dae:	2a47      	cmp	r2, #71	; 0x47
 8007db0:	d1be      	bne.n	8007d30 <_printf_float+0xfc>
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d1bc      	bne.n	8007d30 <_printf_float+0xfc>
 8007db6:	2301      	movs	r3, #1
 8007db8:	e7b9      	b.n	8007d2e <_printf_float+0xfa>
 8007dba:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007dbe:	d118      	bne.n	8007df2 <_printf_float+0x1be>
 8007dc0:	2900      	cmp	r1, #0
 8007dc2:	6863      	ldr	r3, [r4, #4]
 8007dc4:	dd0b      	ble.n	8007dde <_printf_float+0x1aa>
 8007dc6:	6121      	str	r1, [r4, #16]
 8007dc8:	b913      	cbnz	r3, 8007dd0 <_printf_float+0x19c>
 8007dca:	6822      	ldr	r2, [r4, #0]
 8007dcc:	07d0      	lsls	r0, r2, #31
 8007dce:	d502      	bpl.n	8007dd6 <_printf_float+0x1a2>
 8007dd0:	3301      	adds	r3, #1
 8007dd2:	440b      	add	r3, r1
 8007dd4:	6123      	str	r3, [r4, #16]
 8007dd6:	65a1      	str	r1, [r4, #88]	; 0x58
 8007dd8:	f04f 0900 	mov.w	r9, #0
 8007ddc:	e7de      	b.n	8007d9c <_printf_float+0x168>
 8007dde:	b913      	cbnz	r3, 8007de6 <_printf_float+0x1b2>
 8007de0:	6822      	ldr	r2, [r4, #0]
 8007de2:	07d2      	lsls	r2, r2, #31
 8007de4:	d501      	bpl.n	8007dea <_printf_float+0x1b6>
 8007de6:	3302      	adds	r3, #2
 8007de8:	e7f4      	b.n	8007dd4 <_printf_float+0x1a0>
 8007dea:	2301      	movs	r3, #1
 8007dec:	e7f2      	b.n	8007dd4 <_printf_float+0x1a0>
 8007dee:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007df2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007df4:	4299      	cmp	r1, r3
 8007df6:	db05      	blt.n	8007e04 <_printf_float+0x1d0>
 8007df8:	6823      	ldr	r3, [r4, #0]
 8007dfa:	6121      	str	r1, [r4, #16]
 8007dfc:	07d8      	lsls	r0, r3, #31
 8007dfe:	d5ea      	bpl.n	8007dd6 <_printf_float+0x1a2>
 8007e00:	1c4b      	adds	r3, r1, #1
 8007e02:	e7e7      	b.n	8007dd4 <_printf_float+0x1a0>
 8007e04:	2900      	cmp	r1, #0
 8007e06:	bfd4      	ite	le
 8007e08:	f1c1 0202 	rsble	r2, r1, #2
 8007e0c:	2201      	movgt	r2, #1
 8007e0e:	4413      	add	r3, r2
 8007e10:	e7e0      	b.n	8007dd4 <_printf_float+0x1a0>
 8007e12:	6823      	ldr	r3, [r4, #0]
 8007e14:	055a      	lsls	r2, r3, #21
 8007e16:	d407      	bmi.n	8007e28 <_printf_float+0x1f4>
 8007e18:	6923      	ldr	r3, [r4, #16]
 8007e1a:	4642      	mov	r2, r8
 8007e1c:	4631      	mov	r1, r6
 8007e1e:	4628      	mov	r0, r5
 8007e20:	47b8      	blx	r7
 8007e22:	3001      	adds	r0, #1
 8007e24:	d12c      	bne.n	8007e80 <_printf_float+0x24c>
 8007e26:	e764      	b.n	8007cf2 <_printf_float+0xbe>
 8007e28:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007e2c:	f240 80e0 	bls.w	8007ff0 <_printf_float+0x3bc>
 8007e30:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007e34:	2200      	movs	r2, #0
 8007e36:	2300      	movs	r3, #0
 8007e38:	f7f8 fe46 	bl	8000ac8 <__aeabi_dcmpeq>
 8007e3c:	2800      	cmp	r0, #0
 8007e3e:	d034      	beq.n	8007eaa <_printf_float+0x276>
 8007e40:	4a37      	ldr	r2, [pc, #220]	; (8007f20 <_printf_float+0x2ec>)
 8007e42:	2301      	movs	r3, #1
 8007e44:	4631      	mov	r1, r6
 8007e46:	4628      	mov	r0, r5
 8007e48:	47b8      	blx	r7
 8007e4a:	3001      	adds	r0, #1
 8007e4c:	f43f af51 	beq.w	8007cf2 <_printf_float+0xbe>
 8007e50:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007e54:	429a      	cmp	r2, r3
 8007e56:	db02      	blt.n	8007e5e <_printf_float+0x22a>
 8007e58:	6823      	ldr	r3, [r4, #0]
 8007e5a:	07d8      	lsls	r0, r3, #31
 8007e5c:	d510      	bpl.n	8007e80 <_printf_float+0x24c>
 8007e5e:	ee18 3a10 	vmov	r3, s16
 8007e62:	4652      	mov	r2, sl
 8007e64:	4631      	mov	r1, r6
 8007e66:	4628      	mov	r0, r5
 8007e68:	47b8      	blx	r7
 8007e6a:	3001      	adds	r0, #1
 8007e6c:	f43f af41 	beq.w	8007cf2 <_printf_float+0xbe>
 8007e70:	f04f 0800 	mov.w	r8, #0
 8007e74:	f104 091a 	add.w	r9, r4, #26
 8007e78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e7a:	3b01      	subs	r3, #1
 8007e7c:	4543      	cmp	r3, r8
 8007e7e:	dc09      	bgt.n	8007e94 <_printf_float+0x260>
 8007e80:	6823      	ldr	r3, [r4, #0]
 8007e82:	079b      	lsls	r3, r3, #30
 8007e84:	f100 8107 	bmi.w	8008096 <_printf_float+0x462>
 8007e88:	68e0      	ldr	r0, [r4, #12]
 8007e8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e8c:	4298      	cmp	r0, r3
 8007e8e:	bfb8      	it	lt
 8007e90:	4618      	movlt	r0, r3
 8007e92:	e730      	b.n	8007cf6 <_printf_float+0xc2>
 8007e94:	2301      	movs	r3, #1
 8007e96:	464a      	mov	r2, r9
 8007e98:	4631      	mov	r1, r6
 8007e9a:	4628      	mov	r0, r5
 8007e9c:	47b8      	blx	r7
 8007e9e:	3001      	adds	r0, #1
 8007ea0:	f43f af27 	beq.w	8007cf2 <_printf_float+0xbe>
 8007ea4:	f108 0801 	add.w	r8, r8, #1
 8007ea8:	e7e6      	b.n	8007e78 <_printf_float+0x244>
 8007eaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	dc39      	bgt.n	8007f24 <_printf_float+0x2f0>
 8007eb0:	4a1b      	ldr	r2, [pc, #108]	; (8007f20 <_printf_float+0x2ec>)
 8007eb2:	2301      	movs	r3, #1
 8007eb4:	4631      	mov	r1, r6
 8007eb6:	4628      	mov	r0, r5
 8007eb8:	47b8      	blx	r7
 8007eba:	3001      	adds	r0, #1
 8007ebc:	f43f af19 	beq.w	8007cf2 <_printf_float+0xbe>
 8007ec0:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007ec4:	4313      	orrs	r3, r2
 8007ec6:	d102      	bne.n	8007ece <_printf_float+0x29a>
 8007ec8:	6823      	ldr	r3, [r4, #0]
 8007eca:	07d9      	lsls	r1, r3, #31
 8007ecc:	d5d8      	bpl.n	8007e80 <_printf_float+0x24c>
 8007ece:	ee18 3a10 	vmov	r3, s16
 8007ed2:	4652      	mov	r2, sl
 8007ed4:	4631      	mov	r1, r6
 8007ed6:	4628      	mov	r0, r5
 8007ed8:	47b8      	blx	r7
 8007eda:	3001      	adds	r0, #1
 8007edc:	f43f af09 	beq.w	8007cf2 <_printf_float+0xbe>
 8007ee0:	f04f 0900 	mov.w	r9, #0
 8007ee4:	f104 0a1a 	add.w	sl, r4, #26
 8007ee8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007eea:	425b      	negs	r3, r3
 8007eec:	454b      	cmp	r3, r9
 8007eee:	dc01      	bgt.n	8007ef4 <_printf_float+0x2c0>
 8007ef0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ef2:	e792      	b.n	8007e1a <_printf_float+0x1e6>
 8007ef4:	2301      	movs	r3, #1
 8007ef6:	4652      	mov	r2, sl
 8007ef8:	4631      	mov	r1, r6
 8007efa:	4628      	mov	r0, r5
 8007efc:	47b8      	blx	r7
 8007efe:	3001      	adds	r0, #1
 8007f00:	f43f aef7 	beq.w	8007cf2 <_printf_float+0xbe>
 8007f04:	f109 0901 	add.w	r9, r9, #1
 8007f08:	e7ee      	b.n	8007ee8 <_printf_float+0x2b4>
 8007f0a:	bf00      	nop
 8007f0c:	7fefffff 	.word	0x7fefffff
 8007f10:	0802bd7c 	.word	0x0802bd7c
 8007f14:	0802bd80 	.word	0x0802bd80
 8007f18:	0802bd84 	.word	0x0802bd84
 8007f1c:	0802bd88 	.word	0x0802bd88
 8007f20:	0802bd8c 	.word	0x0802bd8c
 8007f24:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007f26:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007f28:	429a      	cmp	r2, r3
 8007f2a:	bfa8      	it	ge
 8007f2c:	461a      	movge	r2, r3
 8007f2e:	2a00      	cmp	r2, #0
 8007f30:	4691      	mov	r9, r2
 8007f32:	dc37      	bgt.n	8007fa4 <_printf_float+0x370>
 8007f34:	f04f 0b00 	mov.w	fp, #0
 8007f38:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007f3c:	f104 021a 	add.w	r2, r4, #26
 8007f40:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007f42:	9305      	str	r3, [sp, #20]
 8007f44:	eba3 0309 	sub.w	r3, r3, r9
 8007f48:	455b      	cmp	r3, fp
 8007f4a:	dc33      	bgt.n	8007fb4 <_printf_float+0x380>
 8007f4c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007f50:	429a      	cmp	r2, r3
 8007f52:	db3b      	blt.n	8007fcc <_printf_float+0x398>
 8007f54:	6823      	ldr	r3, [r4, #0]
 8007f56:	07da      	lsls	r2, r3, #31
 8007f58:	d438      	bmi.n	8007fcc <_printf_float+0x398>
 8007f5a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007f5e:	eba2 0903 	sub.w	r9, r2, r3
 8007f62:	9b05      	ldr	r3, [sp, #20]
 8007f64:	1ad2      	subs	r2, r2, r3
 8007f66:	4591      	cmp	r9, r2
 8007f68:	bfa8      	it	ge
 8007f6a:	4691      	movge	r9, r2
 8007f6c:	f1b9 0f00 	cmp.w	r9, #0
 8007f70:	dc35      	bgt.n	8007fde <_printf_float+0x3aa>
 8007f72:	f04f 0800 	mov.w	r8, #0
 8007f76:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007f7a:	f104 0a1a 	add.w	sl, r4, #26
 8007f7e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007f82:	1a9b      	subs	r3, r3, r2
 8007f84:	eba3 0309 	sub.w	r3, r3, r9
 8007f88:	4543      	cmp	r3, r8
 8007f8a:	f77f af79 	ble.w	8007e80 <_printf_float+0x24c>
 8007f8e:	2301      	movs	r3, #1
 8007f90:	4652      	mov	r2, sl
 8007f92:	4631      	mov	r1, r6
 8007f94:	4628      	mov	r0, r5
 8007f96:	47b8      	blx	r7
 8007f98:	3001      	adds	r0, #1
 8007f9a:	f43f aeaa 	beq.w	8007cf2 <_printf_float+0xbe>
 8007f9e:	f108 0801 	add.w	r8, r8, #1
 8007fa2:	e7ec      	b.n	8007f7e <_printf_float+0x34a>
 8007fa4:	4613      	mov	r3, r2
 8007fa6:	4631      	mov	r1, r6
 8007fa8:	4642      	mov	r2, r8
 8007faa:	4628      	mov	r0, r5
 8007fac:	47b8      	blx	r7
 8007fae:	3001      	adds	r0, #1
 8007fb0:	d1c0      	bne.n	8007f34 <_printf_float+0x300>
 8007fb2:	e69e      	b.n	8007cf2 <_printf_float+0xbe>
 8007fb4:	2301      	movs	r3, #1
 8007fb6:	4631      	mov	r1, r6
 8007fb8:	4628      	mov	r0, r5
 8007fba:	9205      	str	r2, [sp, #20]
 8007fbc:	47b8      	blx	r7
 8007fbe:	3001      	adds	r0, #1
 8007fc0:	f43f ae97 	beq.w	8007cf2 <_printf_float+0xbe>
 8007fc4:	9a05      	ldr	r2, [sp, #20]
 8007fc6:	f10b 0b01 	add.w	fp, fp, #1
 8007fca:	e7b9      	b.n	8007f40 <_printf_float+0x30c>
 8007fcc:	ee18 3a10 	vmov	r3, s16
 8007fd0:	4652      	mov	r2, sl
 8007fd2:	4631      	mov	r1, r6
 8007fd4:	4628      	mov	r0, r5
 8007fd6:	47b8      	blx	r7
 8007fd8:	3001      	adds	r0, #1
 8007fda:	d1be      	bne.n	8007f5a <_printf_float+0x326>
 8007fdc:	e689      	b.n	8007cf2 <_printf_float+0xbe>
 8007fde:	9a05      	ldr	r2, [sp, #20]
 8007fe0:	464b      	mov	r3, r9
 8007fe2:	4442      	add	r2, r8
 8007fe4:	4631      	mov	r1, r6
 8007fe6:	4628      	mov	r0, r5
 8007fe8:	47b8      	blx	r7
 8007fea:	3001      	adds	r0, #1
 8007fec:	d1c1      	bne.n	8007f72 <_printf_float+0x33e>
 8007fee:	e680      	b.n	8007cf2 <_printf_float+0xbe>
 8007ff0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007ff2:	2a01      	cmp	r2, #1
 8007ff4:	dc01      	bgt.n	8007ffa <_printf_float+0x3c6>
 8007ff6:	07db      	lsls	r3, r3, #31
 8007ff8:	d53a      	bpl.n	8008070 <_printf_float+0x43c>
 8007ffa:	2301      	movs	r3, #1
 8007ffc:	4642      	mov	r2, r8
 8007ffe:	4631      	mov	r1, r6
 8008000:	4628      	mov	r0, r5
 8008002:	47b8      	blx	r7
 8008004:	3001      	adds	r0, #1
 8008006:	f43f ae74 	beq.w	8007cf2 <_printf_float+0xbe>
 800800a:	ee18 3a10 	vmov	r3, s16
 800800e:	4652      	mov	r2, sl
 8008010:	4631      	mov	r1, r6
 8008012:	4628      	mov	r0, r5
 8008014:	47b8      	blx	r7
 8008016:	3001      	adds	r0, #1
 8008018:	f43f ae6b 	beq.w	8007cf2 <_printf_float+0xbe>
 800801c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008020:	2200      	movs	r2, #0
 8008022:	2300      	movs	r3, #0
 8008024:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8008028:	f7f8 fd4e 	bl	8000ac8 <__aeabi_dcmpeq>
 800802c:	b9d8      	cbnz	r0, 8008066 <_printf_float+0x432>
 800802e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008032:	f108 0201 	add.w	r2, r8, #1
 8008036:	4631      	mov	r1, r6
 8008038:	4628      	mov	r0, r5
 800803a:	47b8      	blx	r7
 800803c:	3001      	adds	r0, #1
 800803e:	d10e      	bne.n	800805e <_printf_float+0x42a>
 8008040:	e657      	b.n	8007cf2 <_printf_float+0xbe>
 8008042:	2301      	movs	r3, #1
 8008044:	4652      	mov	r2, sl
 8008046:	4631      	mov	r1, r6
 8008048:	4628      	mov	r0, r5
 800804a:	47b8      	blx	r7
 800804c:	3001      	adds	r0, #1
 800804e:	f43f ae50 	beq.w	8007cf2 <_printf_float+0xbe>
 8008052:	f108 0801 	add.w	r8, r8, #1
 8008056:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008058:	3b01      	subs	r3, #1
 800805a:	4543      	cmp	r3, r8
 800805c:	dcf1      	bgt.n	8008042 <_printf_float+0x40e>
 800805e:	464b      	mov	r3, r9
 8008060:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008064:	e6da      	b.n	8007e1c <_printf_float+0x1e8>
 8008066:	f04f 0800 	mov.w	r8, #0
 800806a:	f104 0a1a 	add.w	sl, r4, #26
 800806e:	e7f2      	b.n	8008056 <_printf_float+0x422>
 8008070:	2301      	movs	r3, #1
 8008072:	4642      	mov	r2, r8
 8008074:	e7df      	b.n	8008036 <_printf_float+0x402>
 8008076:	2301      	movs	r3, #1
 8008078:	464a      	mov	r2, r9
 800807a:	4631      	mov	r1, r6
 800807c:	4628      	mov	r0, r5
 800807e:	47b8      	blx	r7
 8008080:	3001      	adds	r0, #1
 8008082:	f43f ae36 	beq.w	8007cf2 <_printf_float+0xbe>
 8008086:	f108 0801 	add.w	r8, r8, #1
 800808a:	68e3      	ldr	r3, [r4, #12]
 800808c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800808e:	1a5b      	subs	r3, r3, r1
 8008090:	4543      	cmp	r3, r8
 8008092:	dcf0      	bgt.n	8008076 <_printf_float+0x442>
 8008094:	e6f8      	b.n	8007e88 <_printf_float+0x254>
 8008096:	f04f 0800 	mov.w	r8, #0
 800809a:	f104 0919 	add.w	r9, r4, #25
 800809e:	e7f4      	b.n	800808a <_printf_float+0x456>

080080a0 <_printf_common>:
 80080a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080a4:	4616      	mov	r6, r2
 80080a6:	4699      	mov	r9, r3
 80080a8:	688a      	ldr	r2, [r1, #8]
 80080aa:	690b      	ldr	r3, [r1, #16]
 80080ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80080b0:	4293      	cmp	r3, r2
 80080b2:	bfb8      	it	lt
 80080b4:	4613      	movlt	r3, r2
 80080b6:	6033      	str	r3, [r6, #0]
 80080b8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80080bc:	4607      	mov	r7, r0
 80080be:	460c      	mov	r4, r1
 80080c0:	b10a      	cbz	r2, 80080c6 <_printf_common+0x26>
 80080c2:	3301      	adds	r3, #1
 80080c4:	6033      	str	r3, [r6, #0]
 80080c6:	6823      	ldr	r3, [r4, #0]
 80080c8:	0699      	lsls	r1, r3, #26
 80080ca:	bf42      	ittt	mi
 80080cc:	6833      	ldrmi	r3, [r6, #0]
 80080ce:	3302      	addmi	r3, #2
 80080d0:	6033      	strmi	r3, [r6, #0]
 80080d2:	6825      	ldr	r5, [r4, #0]
 80080d4:	f015 0506 	ands.w	r5, r5, #6
 80080d8:	d106      	bne.n	80080e8 <_printf_common+0x48>
 80080da:	f104 0a19 	add.w	sl, r4, #25
 80080de:	68e3      	ldr	r3, [r4, #12]
 80080e0:	6832      	ldr	r2, [r6, #0]
 80080e2:	1a9b      	subs	r3, r3, r2
 80080e4:	42ab      	cmp	r3, r5
 80080e6:	dc26      	bgt.n	8008136 <_printf_common+0x96>
 80080e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80080ec:	1e13      	subs	r3, r2, #0
 80080ee:	6822      	ldr	r2, [r4, #0]
 80080f0:	bf18      	it	ne
 80080f2:	2301      	movne	r3, #1
 80080f4:	0692      	lsls	r2, r2, #26
 80080f6:	d42b      	bmi.n	8008150 <_printf_common+0xb0>
 80080f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80080fc:	4649      	mov	r1, r9
 80080fe:	4638      	mov	r0, r7
 8008100:	47c0      	blx	r8
 8008102:	3001      	adds	r0, #1
 8008104:	d01e      	beq.n	8008144 <_printf_common+0xa4>
 8008106:	6823      	ldr	r3, [r4, #0]
 8008108:	6922      	ldr	r2, [r4, #16]
 800810a:	f003 0306 	and.w	r3, r3, #6
 800810e:	2b04      	cmp	r3, #4
 8008110:	bf02      	ittt	eq
 8008112:	68e5      	ldreq	r5, [r4, #12]
 8008114:	6833      	ldreq	r3, [r6, #0]
 8008116:	1aed      	subeq	r5, r5, r3
 8008118:	68a3      	ldr	r3, [r4, #8]
 800811a:	bf0c      	ite	eq
 800811c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008120:	2500      	movne	r5, #0
 8008122:	4293      	cmp	r3, r2
 8008124:	bfc4      	itt	gt
 8008126:	1a9b      	subgt	r3, r3, r2
 8008128:	18ed      	addgt	r5, r5, r3
 800812a:	2600      	movs	r6, #0
 800812c:	341a      	adds	r4, #26
 800812e:	42b5      	cmp	r5, r6
 8008130:	d11a      	bne.n	8008168 <_printf_common+0xc8>
 8008132:	2000      	movs	r0, #0
 8008134:	e008      	b.n	8008148 <_printf_common+0xa8>
 8008136:	2301      	movs	r3, #1
 8008138:	4652      	mov	r2, sl
 800813a:	4649      	mov	r1, r9
 800813c:	4638      	mov	r0, r7
 800813e:	47c0      	blx	r8
 8008140:	3001      	adds	r0, #1
 8008142:	d103      	bne.n	800814c <_printf_common+0xac>
 8008144:	f04f 30ff 	mov.w	r0, #4294967295
 8008148:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800814c:	3501      	adds	r5, #1
 800814e:	e7c6      	b.n	80080de <_printf_common+0x3e>
 8008150:	18e1      	adds	r1, r4, r3
 8008152:	1c5a      	adds	r2, r3, #1
 8008154:	2030      	movs	r0, #48	; 0x30
 8008156:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800815a:	4422      	add	r2, r4
 800815c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008160:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008164:	3302      	adds	r3, #2
 8008166:	e7c7      	b.n	80080f8 <_printf_common+0x58>
 8008168:	2301      	movs	r3, #1
 800816a:	4622      	mov	r2, r4
 800816c:	4649      	mov	r1, r9
 800816e:	4638      	mov	r0, r7
 8008170:	47c0      	blx	r8
 8008172:	3001      	adds	r0, #1
 8008174:	d0e6      	beq.n	8008144 <_printf_common+0xa4>
 8008176:	3601      	adds	r6, #1
 8008178:	e7d9      	b.n	800812e <_printf_common+0x8e>
	...

0800817c <_printf_i>:
 800817c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008180:	7e0f      	ldrb	r7, [r1, #24]
 8008182:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008184:	2f78      	cmp	r7, #120	; 0x78
 8008186:	4691      	mov	r9, r2
 8008188:	4680      	mov	r8, r0
 800818a:	460c      	mov	r4, r1
 800818c:	469a      	mov	sl, r3
 800818e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008192:	d807      	bhi.n	80081a4 <_printf_i+0x28>
 8008194:	2f62      	cmp	r7, #98	; 0x62
 8008196:	d80a      	bhi.n	80081ae <_printf_i+0x32>
 8008198:	2f00      	cmp	r7, #0
 800819a:	f000 80d4 	beq.w	8008346 <_printf_i+0x1ca>
 800819e:	2f58      	cmp	r7, #88	; 0x58
 80081a0:	f000 80c0 	beq.w	8008324 <_printf_i+0x1a8>
 80081a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80081a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80081ac:	e03a      	b.n	8008224 <_printf_i+0xa8>
 80081ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80081b2:	2b15      	cmp	r3, #21
 80081b4:	d8f6      	bhi.n	80081a4 <_printf_i+0x28>
 80081b6:	a101      	add	r1, pc, #4	; (adr r1, 80081bc <_printf_i+0x40>)
 80081b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80081bc:	08008215 	.word	0x08008215
 80081c0:	08008229 	.word	0x08008229
 80081c4:	080081a5 	.word	0x080081a5
 80081c8:	080081a5 	.word	0x080081a5
 80081cc:	080081a5 	.word	0x080081a5
 80081d0:	080081a5 	.word	0x080081a5
 80081d4:	08008229 	.word	0x08008229
 80081d8:	080081a5 	.word	0x080081a5
 80081dc:	080081a5 	.word	0x080081a5
 80081e0:	080081a5 	.word	0x080081a5
 80081e4:	080081a5 	.word	0x080081a5
 80081e8:	0800832d 	.word	0x0800832d
 80081ec:	08008255 	.word	0x08008255
 80081f0:	080082e7 	.word	0x080082e7
 80081f4:	080081a5 	.word	0x080081a5
 80081f8:	080081a5 	.word	0x080081a5
 80081fc:	0800834f 	.word	0x0800834f
 8008200:	080081a5 	.word	0x080081a5
 8008204:	08008255 	.word	0x08008255
 8008208:	080081a5 	.word	0x080081a5
 800820c:	080081a5 	.word	0x080081a5
 8008210:	080082ef 	.word	0x080082ef
 8008214:	682b      	ldr	r3, [r5, #0]
 8008216:	1d1a      	adds	r2, r3, #4
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	602a      	str	r2, [r5, #0]
 800821c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008220:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008224:	2301      	movs	r3, #1
 8008226:	e09f      	b.n	8008368 <_printf_i+0x1ec>
 8008228:	6820      	ldr	r0, [r4, #0]
 800822a:	682b      	ldr	r3, [r5, #0]
 800822c:	0607      	lsls	r7, r0, #24
 800822e:	f103 0104 	add.w	r1, r3, #4
 8008232:	6029      	str	r1, [r5, #0]
 8008234:	d501      	bpl.n	800823a <_printf_i+0xbe>
 8008236:	681e      	ldr	r6, [r3, #0]
 8008238:	e003      	b.n	8008242 <_printf_i+0xc6>
 800823a:	0646      	lsls	r6, r0, #25
 800823c:	d5fb      	bpl.n	8008236 <_printf_i+0xba>
 800823e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008242:	2e00      	cmp	r6, #0
 8008244:	da03      	bge.n	800824e <_printf_i+0xd2>
 8008246:	232d      	movs	r3, #45	; 0x2d
 8008248:	4276      	negs	r6, r6
 800824a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800824e:	485a      	ldr	r0, [pc, #360]	; (80083b8 <_printf_i+0x23c>)
 8008250:	230a      	movs	r3, #10
 8008252:	e012      	b.n	800827a <_printf_i+0xfe>
 8008254:	682b      	ldr	r3, [r5, #0]
 8008256:	6820      	ldr	r0, [r4, #0]
 8008258:	1d19      	adds	r1, r3, #4
 800825a:	6029      	str	r1, [r5, #0]
 800825c:	0605      	lsls	r5, r0, #24
 800825e:	d501      	bpl.n	8008264 <_printf_i+0xe8>
 8008260:	681e      	ldr	r6, [r3, #0]
 8008262:	e002      	b.n	800826a <_printf_i+0xee>
 8008264:	0641      	lsls	r1, r0, #25
 8008266:	d5fb      	bpl.n	8008260 <_printf_i+0xe4>
 8008268:	881e      	ldrh	r6, [r3, #0]
 800826a:	4853      	ldr	r0, [pc, #332]	; (80083b8 <_printf_i+0x23c>)
 800826c:	2f6f      	cmp	r7, #111	; 0x6f
 800826e:	bf0c      	ite	eq
 8008270:	2308      	moveq	r3, #8
 8008272:	230a      	movne	r3, #10
 8008274:	2100      	movs	r1, #0
 8008276:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800827a:	6865      	ldr	r5, [r4, #4]
 800827c:	60a5      	str	r5, [r4, #8]
 800827e:	2d00      	cmp	r5, #0
 8008280:	bfa2      	ittt	ge
 8008282:	6821      	ldrge	r1, [r4, #0]
 8008284:	f021 0104 	bicge.w	r1, r1, #4
 8008288:	6021      	strge	r1, [r4, #0]
 800828a:	b90e      	cbnz	r6, 8008290 <_printf_i+0x114>
 800828c:	2d00      	cmp	r5, #0
 800828e:	d04b      	beq.n	8008328 <_printf_i+0x1ac>
 8008290:	4615      	mov	r5, r2
 8008292:	fbb6 f1f3 	udiv	r1, r6, r3
 8008296:	fb03 6711 	mls	r7, r3, r1, r6
 800829a:	5dc7      	ldrb	r7, [r0, r7]
 800829c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80082a0:	4637      	mov	r7, r6
 80082a2:	42bb      	cmp	r3, r7
 80082a4:	460e      	mov	r6, r1
 80082a6:	d9f4      	bls.n	8008292 <_printf_i+0x116>
 80082a8:	2b08      	cmp	r3, #8
 80082aa:	d10b      	bne.n	80082c4 <_printf_i+0x148>
 80082ac:	6823      	ldr	r3, [r4, #0]
 80082ae:	07de      	lsls	r6, r3, #31
 80082b0:	d508      	bpl.n	80082c4 <_printf_i+0x148>
 80082b2:	6923      	ldr	r3, [r4, #16]
 80082b4:	6861      	ldr	r1, [r4, #4]
 80082b6:	4299      	cmp	r1, r3
 80082b8:	bfde      	ittt	le
 80082ba:	2330      	movle	r3, #48	; 0x30
 80082bc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80082c0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80082c4:	1b52      	subs	r2, r2, r5
 80082c6:	6122      	str	r2, [r4, #16]
 80082c8:	f8cd a000 	str.w	sl, [sp]
 80082cc:	464b      	mov	r3, r9
 80082ce:	aa03      	add	r2, sp, #12
 80082d0:	4621      	mov	r1, r4
 80082d2:	4640      	mov	r0, r8
 80082d4:	f7ff fee4 	bl	80080a0 <_printf_common>
 80082d8:	3001      	adds	r0, #1
 80082da:	d14a      	bne.n	8008372 <_printf_i+0x1f6>
 80082dc:	f04f 30ff 	mov.w	r0, #4294967295
 80082e0:	b004      	add	sp, #16
 80082e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082e6:	6823      	ldr	r3, [r4, #0]
 80082e8:	f043 0320 	orr.w	r3, r3, #32
 80082ec:	6023      	str	r3, [r4, #0]
 80082ee:	4833      	ldr	r0, [pc, #204]	; (80083bc <_printf_i+0x240>)
 80082f0:	2778      	movs	r7, #120	; 0x78
 80082f2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80082f6:	6823      	ldr	r3, [r4, #0]
 80082f8:	6829      	ldr	r1, [r5, #0]
 80082fa:	061f      	lsls	r7, r3, #24
 80082fc:	f851 6b04 	ldr.w	r6, [r1], #4
 8008300:	d402      	bmi.n	8008308 <_printf_i+0x18c>
 8008302:	065f      	lsls	r7, r3, #25
 8008304:	bf48      	it	mi
 8008306:	b2b6      	uxthmi	r6, r6
 8008308:	07df      	lsls	r7, r3, #31
 800830a:	bf48      	it	mi
 800830c:	f043 0320 	orrmi.w	r3, r3, #32
 8008310:	6029      	str	r1, [r5, #0]
 8008312:	bf48      	it	mi
 8008314:	6023      	strmi	r3, [r4, #0]
 8008316:	b91e      	cbnz	r6, 8008320 <_printf_i+0x1a4>
 8008318:	6823      	ldr	r3, [r4, #0]
 800831a:	f023 0320 	bic.w	r3, r3, #32
 800831e:	6023      	str	r3, [r4, #0]
 8008320:	2310      	movs	r3, #16
 8008322:	e7a7      	b.n	8008274 <_printf_i+0xf8>
 8008324:	4824      	ldr	r0, [pc, #144]	; (80083b8 <_printf_i+0x23c>)
 8008326:	e7e4      	b.n	80082f2 <_printf_i+0x176>
 8008328:	4615      	mov	r5, r2
 800832a:	e7bd      	b.n	80082a8 <_printf_i+0x12c>
 800832c:	682b      	ldr	r3, [r5, #0]
 800832e:	6826      	ldr	r6, [r4, #0]
 8008330:	6961      	ldr	r1, [r4, #20]
 8008332:	1d18      	adds	r0, r3, #4
 8008334:	6028      	str	r0, [r5, #0]
 8008336:	0635      	lsls	r5, r6, #24
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	d501      	bpl.n	8008340 <_printf_i+0x1c4>
 800833c:	6019      	str	r1, [r3, #0]
 800833e:	e002      	b.n	8008346 <_printf_i+0x1ca>
 8008340:	0670      	lsls	r0, r6, #25
 8008342:	d5fb      	bpl.n	800833c <_printf_i+0x1c0>
 8008344:	8019      	strh	r1, [r3, #0]
 8008346:	2300      	movs	r3, #0
 8008348:	6123      	str	r3, [r4, #16]
 800834a:	4615      	mov	r5, r2
 800834c:	e7bc      	b.n	80082c8 <_printf_i+0x14c>
 800834e:	682b      	ldr	r3, [r5, #0]
 8008350:	1d1a      	adds	r2, r3, #4
 8008352:	602a      	str	r2, [r5, #0]
 8008354:	681d      	ldr	r5, [r3, #0]
 8008356:	6862      	ldr	r2, [r4, #4]
 8008358:	2100      	movs	r1, #0
 800835a:	4628      	mov	r0, r5
 800835c:	f7f7 ff38 	bl	80001d0 <memchr>
 8008360:	b108      	cbz	r0, 8008366 <_printf_i+0x1ea>
 8008362:	1b40      	subs	r0, r0, r5
 8008364:	6060      	str	r0, [r4, #4]
 8008366:	6863      	ldr	r3, [r4, #4]
 8008368:	6123      	str	r3, [r4, #16]
 800836a:	2300      	movs	r3, #0
 800836c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008370:	e7aa      	b.n	80082c8 <_printf_i+0x14c>
 8008372:	6923      	ldr	r3, [r4, #16]
 8008374:	462a      	mov	r2, r5
 8008376:	4649      	mov	r1, r9
 8008378:	4640      	mov	r0, r8
 800837a:	47d0      	blx	sl
 800837c:	3001      	adds	r0, #1
 800837e:	d0ad      	beq.n	80082dc <_printf_i+0x160>
 8008380:	6823      	ldr	r3, [r4, #0]
 8008382:	079b      	lsls	r3, r3, #30
 8008384:	d413      	bmi.n	80083ae <_printf_i+0x232>
 8008386:	68e0      	ldr	r0, [r4, #12]
 8008388:	9b03      	ldr	r3, [sp, #12]
 800838a:	4298      	cmp	r0, r3
 800838c:	bfb8      	it	lt
 800838e:	4618      	movlt	r0, r3
 8008390:	e7a6      	b.n	80082e0 <_printf_i+0x164>
 8008392:	2301      	movs	r3, #1
 8008394:	4632      	mov	r2, r6
 8008396:	4649      	mov	r1, r9
 8008398:	4640      	mov	r0, r8
 800839a:	47d0      	blx	sl
 800839c:	3001      	adds	r0, #1
 800839e:	d09d      	beq.n	80082dc <_printf_i+0x160>
 80083a0:	3501      	adds	r5, #1
 80083a2:	68e3      	ldr	r3, [r4, #12]
 80083a4:	9903      	ldr	r1, [sp, #12]
 80083a6:	1a5b      	subs	r3, r3, r1
 80083a8:	42ab      	cmp	r3, r5
 80083aa:	dcf2      	bgt.n	8008392 <_printf_i+0x216>
 80083ac:	e7eb      	b.n	8008386 <_printf_i+0x20a>
 80083ae:	2500      	movs	r5, #0
 80083b0:	f104 0619 	add.w	r6, r4, #25
 80083b4:	e7f5      	b.n	80083a2 <_printf_i+0x226>
 80083b6:	bf00      	nop
 80083b8:	0802bd8e 	.word	0x0802bd8e
 80083bc:	0802bd9f 	.word	0x0802bd9f

080083c0 <std>:
 80083c0:	2300      	movs	r3, #0
 80083c2:	b510      	push	{r4, lr}
 80083c4:	4604      	mov	r4, r0
 80083c6:	e9c0 3300 	strd	r3, r3, [r0]
 80083ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80083ce:	6083      	str	r3, [r0, #8]
 80083d0:	8181      	strh	r1, [r0, #12]
 80083d2:	6643      	str	r3, [r0, #100]	; 0x64
 80083d4:	81c2      	strh	r2, [r0, #14]
 80083d6:	6183      	str	r3, [r0, #24]
 80083d8:	4619      	mov	r1, r3
 80083da:	2208      	movs	r2, #8
 80083dc:	305c      	adds	r0, #92	; 0x5c
 80083de:	f000 f9a9 	bl	8008734 <memset>
 80083e2:	4b0d      	ldr	r3, [pc, #52]	; (8008418 <std+0x58>)
 80083e4:	6263      	str	r3, [r4, #36]	; 0x24
 80083e6:	4b0d      	ldr	r3, [pc, #52]	; (800841c <std+0x5c>)
 80083e8:	62a3      	str	r3, [r4, #40]	; 0x28
 80083ea:	4b0d      	ldr	r3, [pc, #52]	; (8008420 <std+0x60>)
 80083ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 80083ee:	4b0d      	ldr	r3, [pc, #52]	; (8008424 <std+0x64>)
 80083f0:	6323      	str	r3, [r4, #48]	; 0x30
 80083f2:	4b0d      	ldr	r3, [pc, #52]	; (8008428 <std+0x68>)
 80083f4:	6224      	str	r4, [r4, #32]
 80083f6:	429c      	cmp	r4, r3
 80083f8:	d006      	beq.n	8008408 <std+0x48>
 80083fa:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80083fe:	4294      	cmp	r4, r2
 8008400:	d002      	beq.n	8008408 <std+0x48>
 8008402:	33d0      	adds	r3, #208	; 0xd0
 8008404:	429c      	cmp	r4, r3
 8008406:	d105      	bne.n	8008414 <std+0x54>
 8008408:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800840c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008410:	f000 ba0c 	b.w	800882c <__retarget_lock_init_recursive>
 8008414:	bd10      	pop	{r4, pc}
 8008416:	bf00      	nop
 8008418:	08008585 	.word	0x08008585
 800841c:	080085a7 	.word	0x080085a7
 8008420:	080085df 	.word	0x080085df
 8008424:	08008603 	.word	0x08008603
 8008428:	20002598 	.word	0x20002598

0800842c <stdio_exit_handler>:
 800842c:	4a02      	ldr	r2, [pc, #8]	; (8008438 <stdio_exit_handler+0xc>)
 800842e:	4903      	ldr	r1, [pc, #12]	; (800843c <stdio_exit_handler+0x10>)
 8008430:	4803      	ldr	r0, [pc, #12]	; (8008440 <stdio_exit_handler+0x14>)
 8008432:	f000 b869 	b.w	8008508 <_fwalk_sglue>
 8008436:	bf00      	nop
 8008438:	20000018 	.word	0x20000018
 800843c:	0800a481 	.word	0x0800a481
 8008440:	20000024 	.word	0x20000024

08008444 <cleanup_stdio>:
 8008444:	6841      	ldr	r1, [r0, #4]
 8008446:	4b0c      	ldr	r3, [pc, #48]	; (8008478 <cleanup_stdio+0x34>)
 8008448:	4299      	cmp	r1, r3
 800844a:	b510      	push	{r4, lr}
 800844c:	4604      	mov	r4, r0
 800844e:	d001      	beq.n	8008454 <cleanup_stdio+0x10>
 8008450:	f002 f816 	bl	800a480 <_fflush_r>
 8008454:	68a1      	ldr	r1, [r4, #8]
 8008456:	4b09      	ldr	r3, [pc, #36]	; (800847c <cleanup_stdio+0x38>)
 8008458:	4299      	cmp	r1, r3
 800845a:	d002      	beq.n	8008462 <cleanup_stdio+0x1e>
 800845c:	4620      	mov	r0, r4
 800845e:	f002 f80f 	bl	800a480 <_fflush_r>
 8008462:	68e1      	ldr	r1, [r4, #12]
 8008464:	4b06      	ldr	r3, [pc, #24]	; (8008480 <cleanup_stdio+0x3c>)
 8008466:	4299      	cmp	r1, r3
 8008468:	d004      	beq.n	8008474 <cleanup_stdio+0x30>
 800846a:	4620      	mov	r0, r4
 800846c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008470:	f002 b806 	b.w	800a480 <_fflush_r>
 8008474:	bd10      	pop	{r4, pc}
 8008476:	bf00      	nop
 8008478:	20002598 	.word	0x20002598
 800847c:	20002600 	.word	0x20002600
 8008480:	20002668 	.word	0x20002668

08008484 <global_stdio_init.part.0>:
 8008484:	b510      	push	{r4, lr}
 8008486:	4b0b      	ldr	r3, [pc, #44]	; (80084b4 <global_stdio_init.part.0+0x30>)
 8008488:	4c0b      	ldr	r4, [pc, #44]	; (80084b8 <global_stdio_init.part.0+0x34>)
 800848a:	4a0c      	ldr	r2, [pc, #48]	; (80084bc <global_stdio_init.part.0+0x38>)
 800848c:	601a      	str	r2, [r3, #0]
 800848e:	4620      	mov	r0, r4
 8008490:	2200      	movs	r2, #0
 8008492:	2104      	movs	r1, #4
 8008494:	f7ff ff94 	bl	80083c0 <std>
 8008498:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800849c:	2201      	movs	r2, #1
 800849e:	2109      	movs	r1, #9
 80084a0:	f7ff ff8e 	bl	80083c0 <std>
 80084a4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80084a8:	2202      	movs	r2, #2
 80084aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80084ae:	2112      	movs	r1, #18
 80084b0:	f7ff bf86 	b.w	80083c0 <std>
 80084b4:	200026d0 	.word	0x200026d0
 80084b8:	20002598 	.word	0x20002598
 80084bc:	0800842d 	.word	0x0800842d

080084c0 <__sfp_lock_acquire>:
 80084c0:	4801      	ldr	r0, [pc, #4]	; (80084c8 <__sfp_lock_acquire+0x8>)
 80084c2:	f000 b9b4 	b.w	800882e <__retarget_lock_acquire_recursive>
 80084c6:	bf00      	nop
 80084c8:	200026d9 	.word	0x200026d9

080084cc <__sfp_lock_release>:
 80084cc:	4801      	ldr	r0, [pc, #4]	; (80084d4 <__sfp_lock_release+0x8>)
 80084ce:	f000 b9af 	b.w	8008830 <__retarget_lock_release_recursive>
 80084d2:	bf00      	nop
 80084d4:	200026d9 	.word	0x200026d9

080084d8 <__sinit>:
 80084d8:	b510      	push	{r4, lr}
 80084da:	4604      	mov	r4, r0
 80084dc:	f7ff fff0 	bl	80084c0 <__sfp_lock_acquire>
 80084e0:	6a23      	ldr	r3, [r4, #32]
 80084e2:	b11b      	cbz	r3, 80084ec <__sinit+0x14>
 80084e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80084e8:	f7ff bff0 	b.w	80084cc <__sfp_lock_release>
 80084ec:	4b04      	ldr	r3, [pc, #16]	; (8008500 <__sinit+0x28>)
 80084ee:	6223      	str	r3, [r4, #32]
 80084f0:	4b04      	ldr	r3, [pc, #16]	; (8008504 <__sinit+0x2c>)
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d1f5      	bne.n	80084e4 <__sinit+0xc>
 80084f8:	f7ff ffc4 	bl	8008484 <global_stdio_init.part.0>
 80084fc:	e7f2      	b.n	80084e4 <__sinit+0xc>
 80084fe:	bf00      	nop
 8008500:	08008445 	.word	0x08008445
 8008504:	200026d0 	.word	0x200026d0

08008508 <_fwalk_sglue>:
 8008508:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800850c:	4607      	mov	r7, r0
 800850e:	4688      	mov	r8, r1
 8008510:	4614      	mov	r4, r2
 8008512:	2600      	movs	r6, #0
 8008514:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008518:	f1b9 0901 	subs.w	r9, r9, #1
 800851c:	d505      	bpl.n	800852a <_fwalk_sglue+0x22>
 800851e:	6824      	ldr	r4, [r4, #0]
 8008520:	2c00      	cmp	r4, #0
 8008522:	d1f7      	bne.n	8008514 <_fwalk_sglue+0xc>
 8008524:	4630      	mov	r0, r6
 8008526:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800852a:	89ab      	ldrh	r3, [r5, #12]
 800852c:	2b01      	cmp	r3, #1
 800852e:	d907      	bls.n	8008540 <_fwalk_sglue+0x38>
 8008530:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008534:	3301      	adds	r3, #1
 8008536:	d003      	beq.n	8008540 <_fwalk_sglue+0x38>
 8008538:	4629      	mov	r1, r5
 800853a:	4638      	mov	r0, r7
 800853c:	47c0      	blx	r8
 800853e:	4306      	orrs	r6, r0
 8008540:	3568      	adds	r5, #104	; 0x68
 8008542:	e7e9      	b.n	8008518 <_fwalk_sglue+0x10>

08008544 <siprintf>:
 8008544:	b40e      	push	{r1, r2, r3}
 8008546:	b500      	push	{lr}
 8008548:	b09c      	sub	sp, #112	; 0x70
 800854a:	ab1d      	add	r3, sp, #116	; 0x74
 800854c:	9002      	str	r0, [sp, #8]
 800854e:	9006      	str	r0, [sp, #24]
 8008550:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008554:	4809      	ldr	r0, [pc, #36]	; (800857c <siprintf+0x38>)
 8008556:	9107      	str	r1, [sp, #28]
 8008558:	9104      	str	r1, [sp, #16]
 800855a:	4909      	ldr	r1, [pc, #36]	; (8008580 <siprintf+0x3c>)
 800855c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008560:	9105      	str	r1, [sp, #20]
 8008562:	6800      	ldr	r0, [r0, #0]
 8008564:	9301      	str	r3, [sp, #4]
 8008566:	a902      	add	r1, sp, #8
 8008568:	f001 fcc2 	bl	8009ef0 <_svfiprintf_r>
 800856c:	9b02      	ldr	r3, [sp, #8]
 800856e:	2200      	movs	r2, #0
 8008570:	701a      	strb	r2, [r3, #0]
 8008572:	b01c      	add	sp, #112	; 0x70
 8008574:	f85d eb04 	ldr.w	lr, [sp], #4
 8008578:	b003      	add	sp, #12
 800857a:	4770      	bx	lr
 800857c:	20000070 	.word	0x20000070
 8008580:	ffff0208 	.word	0xffff0208

08008584 <__sread>:
 8008584:	b510      	push	{r4, lr}
 8008586:	460c      	mov	r4, r1
 8008588:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800858c:	f000 f900 	bl	8008790 <_read_r>
 8008590:	2800      	cmp	r0, #0
 8008592:	bfab      	itete	ge
 8008594:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008596:	89a3      	ldrhlt	r3, [r4, #12]
 8008598:	181b      	addge	r3, r3, r0
 800859a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800859e:	bfac      	ite	ge
 80085a0:	6563      	strge	r3, [r4, #84]	; 0x54
 80085a2:	81a3      	strhlt	r3, [r4, #12]
 80085a4:	bd10      	pop	{r4, pc}

080085a6 <__swrite>:
 80085a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085aa:	461f      	mov	r7, r3
 80085ac:	898b      	ldrh	r3, [r1, #12]
 80085ae:	05db      	lsls	r3, r3, #23
 80085b0:	4605      	mov	r5, r0
 80085b2:	460c      	mov	r4, r1
 80085b4:	4616      	mov	r6, r2
 80085b6:	d505      	bpl.n	80085c4 <__swrite+0x1e>
 80085b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085bc:	2302      	movs	r3, #2
 80085be:	2200      	movs	r2, #0
 80085c0:	f000 f8d4 	bl	800876c <_lseek_r>
 80085c4:	89a3      	ldrh	r3, [r4, #12]
 80085c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80085ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80085ce:	81a3      	strh	r3, [r4, #12]
 80085d0:	4632      	mov	r2, r6
 80085d2:	463b      	mov	r3, r7
 80085d4:	4628      	mov	r0, r5
 80085d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80085da:	f000 b8eb 	b.w	80087b4 <_write_r>

080085de <__sseek>:
 80085de:	b510      	push	{r4, lr}
 80085e0:	460c      	mov	r4, r1
 80085e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085e6:	f000 f8c1 	bl	800876c <_lseek_r>
 80085ea:	1c43      	adds	r3, r0, #1
 80085ec:	89a3      	ldrh	r3, [r4, #12]
 80085ee:	bf15      	itete	ne
 80085f0:	6560      	strne	r0, [r4, #84]	; 0x54
 80085f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80085f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80085fa:	81a3      	strheq	r3, [r4, #12]
 80085fc:	bf18      	it	ne
 80085fe:	81a3      	strhne	r3, [r4, #12]
 8008600:	bd10      	pop	{r4, pc}

08008602 <__sclose>:
 8008602:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008606:	f000 b8a1 	b.w	800874c <_close_r>

0800860a <__swbuf_r>:
 800860a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800860c:	460e      	mov	r6, r1
 800860e:	4614      	mov	r4, r2
 8008610:	4605      	mov	r5, r0
 8008612:	b118      	cbz	r0, 800861c <__swbuf_r+0x12>
 8008614:	6a03      	ldr	r3, [r0, #32]
 8008616:	b90b      	cbnz	r3, 800861c <__swbuf_r+0x12>
 8008618:	f7ff ff5e 	bl	80084d8 <__sinit>
 800861c:	69a3      	ldr	r3, [r4, #24]
 800861e:	60a3      	str	r3, [r4, #8]
 8008620:	89a3      	ldrh	r3, [r4, #12]
 8008622:	071a      	lsls	r2, r3, #28
 8008624:	d525      	bpl.n	8008672 <__swbuf_r+0x68>
 8008626:	6923      	ldr	r3, [r4, #16]
 8008628:	b31b      	cbz	r3, 8008672 <__swbuf_r+0x68>
 800862a:	6823      	ldr	r3, [r4, #0]
 800862c:	6922      	ldr	r2, [r4, #16]
 800862e:	1a98      	subs	r0, r3, r2
 8008630:	6963      	ldr	r3, [r4, #20]
 8008632:	b2f6      	uxtb	r6, r6
 8008634:	4283      	cmp	r3, r0
 8008636:	4637      	mov	r7, r6
 8008638:	dc04      	bgt.n	8008644 <__swbuf_r+0x3a>
 800863a:	4621      	mov	r1, r4
 800863c:	4628      	mov	r0, r5
 800863e:	f001 ff1f 	bl	800a480 <_fflush_r>
 8008642:	b9e0      	cbnz	r0, 800867e <__swbuf_r+0x74>
 8008644:	68a3      	ldr	r3, [r4, #8]
 8008646:	3b01      	subs	r3, #1
 8008648:	60a3      	str	r3, [r4, #8]
 800864a:	6823      	ldr	r3, [r4, #0]
 800864c:	1c5a      	adds	r2, r3, #1
 800864e:	6022      	str	r2, [r4, #0]
 8008650:	701e      	strb	r6, [r3, #0]
 8008652:	6962      	ldr	r2, [r4, #20]
 8008654:	1c43      	adds	r3, r0, #1
 8008656:	429a      	cmp	r2, r3
 8008658:	d004      	beq.n	8008664 <__swbuf_r+0x5a>
 800865a:	89a3      	ldrh	r3, [r4, #12]
 800865c:	07db      	lsls	r3, r3, #31
 800865e:	d506      	bpl.n	800866e <__swbuf_r+0x64>
 8008660:	2e0a      	cmp	r6, #10
 8008662:	d104      	bne.n	800866e <__swbuf_r+0x64>
 8008664:	4621      	mov	r1, r4
 8008666:	4628      	mov	r0, r5
 8008668:	f001 ff0a 	bl	800a480 <_fflush_r>
 800866c:	b938      	cbnz	r0, 800867e <__swbuf_r+0x74>
 800866e:	4638      	mov	r0, r7
 8008670:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008672:	4621      	mov	r1, r4
 8008674:	4628      	mov	r0, r5
 8008676:	f000 f805 	bl	8008684 <__swsetup_r>
 800867a:	2800      	cmp	r0, #0
 800867c:	d0d5      	beq.n	800862a <__swbuf_r+0x20>
 800867e:	f04f 37ff 	mov.w	r7, #4294967295
 8008682:	e7f4      	b.n	800866e <__swbuf_r+0x64>

08008684 <__swsetup_r>:
 8008684:	b538      	push	{r3, r4, r5, lr}
 8008686:	4b2a      	ldr	r3, [pc, #168]	; (8008730 <__swsetup_r+0xac>)
 8008688:	4605      	mov	r5, r0
 800868a:	6818      	ldr	r0, [r3, #0]
 800868c:	460c      	mov	r4, r1
 800868e:	b118      	cbz	r0, 8008698 <__swsetup_r+0x14>
 8008690:	6a03      	ldr	r3, [r0, #32]
 8008692:	b90b      	cbnz	r3, 8008698 <__swsetup_r+0x14>
 8008694:	f7ff ff20 	bl	80084d8 <__sinit>
 8008698:	89a3      	ldrh	r3, [r4, #12]
 800869a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800869e:	0718      	lsls	r0, r3, #28
 80086a0:	d422      	bmi.n	80086e8 <__swsetup_r+0x64>
 80086a2:	06d9      	lsls	r1, r3, #27
 80086a4:	d407      	bmi.n	80086b6 <__swsetup_r+0x32>
 80086a6:	2309      	movs	r3, #9
 80086a8:	602b      	str	r3, [r5, #0]
 80086aa:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80086ae:	81a3      	strh	r3, [r4, #12]
 80086b0:	f04f 30ff 	mov.w	r0, #4294967295
 80086b4:	e034      	b.n	8008720 <__swsetup_r+0x9c>
 80086b6:	0758      	lsls	r0, r3, #29
 80086b8:	d512      	bpl.n	80086e0 <__swsetup_r+0x5c>
 80086ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80086bc:	b141      	cbz	r1, 80086d0 <__swsetup_r+0x4c>
 80086be:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80086c2:	4299      	cmp	r1, r3
 80086c4:	d002      	beq.n	80086cc <__swsetup_r+0x48>
 80086c6:	4628      	mov	r0, r5
 80086c8:	f000 ff3c 	bl	8009544 <_free_r>
 80086cc:	2300      	movs	r3, #0
 80086ce:	6363      	str	r3, [r4, #52]	; 0x34
 80086d0:	89a3      	ldrh	r3, [r4, #12]
 80086d2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80086d6:	81a3      	strh	r3, [r4, #12]
 80086d8:	2300      	movs	r3, #0
 80086da:	6063      	str	r3, [r4, #4]
 80086dc:	6923      	ldr	r3, [r4, #16]
 80086de:	6023      	str	r3, [r4, #0]
 80086e0:	89a3      	ldrh	r3, [r4, #12]
 80086e2:	f043 0308 	orr.w	r3, r3, #8
 80086e6:	81a3      	strh	r3, [r4, #12]
 80086e8:	6923      	ldr	r3, [r4, #16]
 80086ea:	b94b      	cbnz	r3, 8008700 <__swsetup_r+0x7c>
 80086ec:	89a3      	ldrh	r3, [r4, #12]
 80086ee:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80086f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80086f6:	d003      	beq.n	8008700 <__swsetup_r+0x7c>
 80086f8:	4621      	mov	r1, r4
 80086fa:	4628      	mov	r0, r5
 80086fc:	f001 ff0e 	bl	800a51c <__smakebuf_r>
 8008700:	89a0      	ldrh	r0, [r4, #12]
 8008702:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008706:	f010 0301 	ands.w	r3, r0, #1
 800870a:	d00a      	beq.n	8008722 <__swsetup_r+0x9e>
 800870c:	2300      	movs	r3, #0
 800870e:	60a3      	str	r3, [r4, #8]
 8008710:	6963      	ldr	r3, [r4, #20]
 8008712:	425b      	negs	r3, r3
 8008714:	61a3      	str	r3, [r4, #24]
 8008716:	6923      	ldr	r3, [r4, #16]
 8008718:	b943      	cbnz	r3, 800872c <__swsetup_r+0xa8>
 800871a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800871e:	d1c4      	bne.n	80086aa <__swsetup_r+0x26>
 8008720:	bd38      	pop	{r3, r4, r5, pc}
 8008722:	0781      	lsls	r1, r0, #30
 8008724:	bf58      	it	pl
 8008726:	6963      	ldrpl	r3, [r4, #20]
 8008728:	60a3      	str	r3, [r4, #8]
 800872a:	e7f4      	b.n	8008716 <__swsetup_r+0x92>
 800872c:	2000      	movs	r0, #0
 800872e:	e7f7      	b.n	8008720 <__swsetup_r+0x9c>
 8008730:	20000070 	.word	0x20000070

08008734 <memset>:
 8008734:	4402      	add	r2, r0
 8008736:	4603      	mov	r3, r0
 8008738:	4293      	cmp	r3, r2
 800873a:	d100      	bne.n	800873e <memset+0xa>
 800873c:	4770      	bx	lr
 800873e:	f803 1b01 	strb.w	r1, [r3], #1
 8008742:	e7f9      	b.n	8008738 <memset+0x4>

08008744 <_localeconv_r>:
 8008744:	4800      	ldr	r0, [pc, #0]	; (8008748 <_localeconv_r+0x4>)
 8008746:	4770      	bx	lr
 8008748:	20000164 	.word	0x20000164

0800874c <_close_r>:
 800874c:	b538      	push	{r3, r4, r5, lr}
 800874e:	4d06      	ldr	r5, [pc, #24]	; (8008768 <_close_r+0x1c>)
 8008750:	2300      	movs	r3, #0
 8008752:	4604      	mov	r4, r0
 8008754:	4608      	mov	r0, r1
 8008756:	602b      	str	r3, [r5, #0]
 8008758:	f7fa f9cd 	bl	8002af6 <_close>
 800875c:	1c43      	adds	r3, r0, #1
 800875e:	d102      	bne.n	8008766 <_close_r+0x1a>
 8008760:	682b      	ldr	r3, [r5, #0]
 8008762:	b103      	cbz	r3, 8008766 <_close_r+0x1a>
 8008764:	6023      	str	r3, [r4, #0]
 8008766:	bd38      	pop	{r3, r4, r5, pc}
 8008768:	200026d4 	.word	0x200026d4

0800876c <_lseek_r>:
 800876c:	b538      	push	{r3, r4, r5, lr}
 800876e:	4d07      	ldr	r5, [pc, #28]	; (800878c <_lseek_r+0x20>)
 8008770:	4604      	mov	r4, r0
 8008772:	4608      	mov	r0, r1
 8008774:	4611      	mov	r1, r2
 8008776:	2200      	movs	r2, #0
 8008778:	602a      	str	r2, [r5, #0]
 800877a:	461a      	mov	r2, r3
 800877c:	f7fa f9e2 	bl	8002b44 <_lseek>
 8008780:	1c43      	adds	r3, r0, #1
 8008782:	d102      	bne.n	800878a <_lseek_r+0x1e>
 8008784:	682b      	ldr	r3, [r5, #0]
 8008786:	b103      	cbz	r3, 800878a <_lseek_r+0x1e>
 8008788:	6023      	str	r3, [r4, #0]
 800878a:	bd38      	pop	{r3, r4, r5, pc}
 800878c:	200026d4 	.word	0x200026d4

08008790 <_read_r>:
 8008790:	b538      	push	{r3, r4, r5, lr}
 8008792:	4d07      	ldr	r5, [pc, #28]	; (80087b0 <_read_r+0x20>)
 8008794:	4604      	mov	r4, r0
 8008796:	4608      	mov	r0, r1
 8008798:	4611      	mov	r1, r2
 800879a:	2200      	movs	r2, #0
 800879c:	602a      	str	r2, [r5, #0]
 800879e:	461a      	mov	r2, r3
 80087a0:	f7fa f970 	bl	8002a84 <_read>
 80087a4:	1c43      	adds	r3, r0, #1
 80087a6:	d102      	bne.n	80087ae <_read_r+0x1e>
 80087a8:	682b      	ldr	r3, [r5, #0]
 80087aa:	b103      	cbz	r3, 80087ae <_read_r+0x1e>
 80087ac:	6023      	str	r3, [r4, #0]
 80087ae:	bd38      	pop	{r3, r4, r5, pc}
 80087b0:	200026d4 	.word	0x200026d4

080087b4 <_write_r>:
 80087b4:	b538      	push	{r3, r4, r5, lr}
 80087b6:	4d07      	ldr	r5, [pc, #28]	; (80087d4 <_write_r+0x20>)
 80087b8:	4604      	mov	r4, r0
 80087ba:	4608      	mov	r0, r1
 80087bc:	4611      	mov	r1, r2
 80087be:	2200      	movs	r2, #0
 80087c0:	602a      	str	r2, [r5, #0]
 80087c2:	461a      	mov	r2, r3
 80087c4:	f7fa f97b 	bl	8002abe <_write>
 80087c8:	1c43      	adds	r3, r0, #1
 80087ca:	d102      	bne.n	80087d2 <_write_r+0x1e>
 80087cc:	682b      	ldr	r3, [r5, #0]
 80087ce:	b103      	cbz	r3, 80087d2 <_write_r+0x1e>
 80087d0:	6023      	str	r3, [r4, #0]
 80087d2:	bd38      	pop	{r3, r4, r5, pc}
 80087d4:	200026d4 	.word	0x200026d4

080087d8 <__errno>:
 80087d8:	4b01      	ldr	r3, [pc, #4]	; (80087e0 <__errno+0x8>)
 80087da:	6818      	ldr	r0, [r3, #0]
 80087dc:	4770      	bx	lr
 80087de:	bf00      	nop
 80087e0:	20000070 	.word	0x20000070

080087e4 <__libc_init_array>:
 80087e4:	b570      	push	{r4, r5, r6, lr}
 80087e6:	4d0d      	ldr	r5, [pc, #52]	; (800881c <__libc_init_array+0x38>)
 80087e8:	4c0d      	ldr	r4, [pc, #52]	; (8008820 <__libc_init_array+0x3c>)
 80087ea:	1b64      	subs	r4, r4, r5
 80087ec:	10a4      	asrs	r4, r4, #2
 80087ee:	2600      	movs	r6, #0
 80087f0:	42a6      	cmp	r6, r4
 80087f2:	d109      	bne.n	8008808 <__libc_init_array+0x24>
 80087f4:	4d0b      	ldr	r5, [pc, #44]	; (8008824 <__libc_init_array+0x40>)
 80087f6:	4c0c      	ldr	r4, [pc, #48]	; (8008828 <__libc_init_array+0x44>)
 80087f8:	f002 f800 	bl	800a7fc <_init>
 80087fc:	1b64      	subs	r4, r4, r5
 80087fe:	10a4      	asrs	r4, r4, #2
 8008800:	2600      	movs	r6, #0
 8008802:	42a6      	cmp	r6, r4
 8008804:	d105      	bne.n	8008812 <__libc_init_array+0x2e>
 8008806:	bd70      	pop	{r4, r5, r6, pc}
 8008808:	f855 3b04 	ldr.w	r3, [r5], #4
 800880c:	4798      	blx	r3
 800880e:	3601      	adds	r6, #1
 8008810:	e7ee      	b.n	80087f0 <__libc_init_array+0xc>
 8008812:	f855 3b04 	ldr.w	r3, [r5], #4
 8008816:	4798      	blx	r3
 8008818:	3601      	adds	r6, #1
 800881a:	e7f2      	b.n	8008802 <__libc_init_array+0x1e>
 800881c:	0802c0f4 	.word	0x0802c0f4
 8008820:	0802c0f4 	.word	0x0802c0f4
 8008824:	0802c0f4 	.word	0x0802c0f4
 8008828:	0802c0f8 	.word	0x0802c0f8

0800882c <__retarget_lock_init_recursive>:
 800882c:	4770      	bx	lr

0800882e <__retarget_lock_acquire_recursive>:
 800882e:	4770      	bx	lr

08008830 <__retarget_lock_release_recursive>:
 8008830:	4770      	bx	lr

08008832 <memcpy>:
 8008832:	440a      	add	r2, r1
 8008834:	4291      	cmp	r1, r2
 8008836:	f100 33ff 	add.w	r3, r0, #4294967295
 800883a:	d100      	bne.n	800883e <memcpy+0xc>
 800883c:	4770      	bx	lr
 800883e:	b510      	push	{r4, lr}
 8008840:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008844:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008848:	4291      	cmp	r1, r2
 800884a:	d1f9      	bne.n	8008840 <memcpy+0xe>
 800884c:	bd10      	pop	{r4, pc}

0800884e <quorem>:
 800884e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008852:	6903      	ldr	r3, [r0, #16]
 8008854:	690c      	ldr	r4, [r1, #16]
 8008856:	42a3      	cmp	r3, r4
 8008858:	4607      	mov	r7, r0
 800885a:	db7e      	blt.n	800895a <quorem+0x10c>
 800885c:	3c01      	subs	r4, #1
 800885e:	f101 0814 	add.w	r8, r1, #20
 8008862:	f100 0514 	add.w	r5, r0, #20
 8008866:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800886a:	9301      	str	r3, [sp, #4]
 800886c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008870:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008874:	3301      	adds	r3, #1
 8008876:	429a      	cmp	r2, r3
 8008878:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800887c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008880:	fbb2 f6f3 	udiv	r6, r2, r3
 8008884:	d331      	bcc.n	80088ea <quorem+0x9c>
 8008886:	f04f 0e00 	mov.w	lr, #0
 800888a:	4640      	mov	r0, r8
 800888c:	46ac      	mov	ip, r5
 800888e:	46f2      	mov	sl, lr
 8008890:	f850 2b04 	ldr.w	r2, [r0], #4
 8008894:	b293      	uxth	r3, r2
 8008896:	fb06 e303 	mla	r3, r6, r3, lr
 800889a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800889e:	0c1a      	lsrs	r2, r3, #16
 80088a0:	b29b      	uxth	r3, r3
 80088a2:	ebaa 0303 	sub.w	r3, sl, r3
 80088a6:	f8dc a000 	ldr.w	sl, [ip]
 80088aa:	fa13 f38a 	uxtah	r3, r3, sl
 80088ae:	fb06 220e 	mla	r2, r6, lr, r2
 80088b2:	9300      	str	r3, [sp, #0]
 80088b4:	9b00      	ldr	r3, [sp, #0]
 80088b6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80088ba:	b292      	uxth	r2, r2
 80088bc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80088c0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80088c4:	f8bd 3000 	ldrh.w	r3, [sp]
 80088c8:	4581      	cmp	r9, r0
 80088ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80088ce:	f84c 3b04 	str.w	r3, [ip], #4
 80088d2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80088d6:	d2db      	bcs.n	8008890 <quorem+0x42>
 80088d8:	f855 300b 	ldr.w	r3, [r5, fp]
 80088dc:	b92b      	cbnz	r3, 80088ea <quorem+0x9c>
 80088de:	9b01      	ldr	r3, [sp, #4]
 80088e0:	3b04      	subs	r3, #4
 80088e2:	429d      	cmp	r5, r3
 80088e4:	461a      	mov	r2, r3
 80088e6:	d32c      	bcc.n	8008942 <quorem+0xf4>
 80088e8:	613c      	str	r4, [r7, #16]
 80088ea:	4638      	mov	r0, r7
 80088ec:	f001 f9a6 	bl	8009c3c <__mcmp>
 80088f0:	2800      	cmp	r0, #0
 80088f2:	db22      	blt.n	800893a <quorem+0xec>
 80088f4:	3601      	adds	r6, #1
 80088f6:	4629      	mov	r1, r5
 80088f8:	2000      	movs	r0, #0
 80088fa:	f858 2b04 	ldr.w	r2, [r8], #4
 80088fe:	f8d1 c000 	ldr.w	ip, [r1]
 8008902:	b293      	uxth	r3, r2
 8008904:	1ac3      	subs	r3, r0, r3
 8008906:	0c12      	lsrs	r2, r2, #16
 8008908:	fa13 f38c 	uxtah	r3, r3, ip
 800890c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8008910:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008914:	b29b      	uxth	r3, r3
 8008916:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800891a:	45c1      	cmp	r9, r8
 800891c:	f841 3b04 	str.w	r3, [r1], #4
 8008920:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008924:	d2e9      	bcs.n	80088fa <quorem+0xac>
 8008926:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800892a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800892e:	b922      	cbnz	r2, 800893a <quorem+0xec>
 8008930:	3b04      	subs	r3, #4
 8008932:	429d      	cmp	r5, r3
 8008934:	461a      	mov	r2, r3
 8008936:	d30a      	bcc.n	800894e <quorem+0x100>
 8008938:	613c      	str	r4, [r7, #16]
 800893a:	4630      	mov	r0, r6
 800893c:	b003      	add	sp, #12
 800893e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008942:	6812      	ldr	r2, [r2, #0]
 8008944:	3b04      	subs	r3, #4
 8008946:	2a00      	cmp	r2, #0
 8008948:	d1ce      	bne.n	80088e8 <quorem+0x9a>
 800894a:	3c01      	subs	r4, #1
 800894c:	e7c9      	b.n	80088e2 <quorem+0x94>
 800894e:	6812      	ldr	r2, [r2, #0]
 8008950:	3b04      	subs	r3, #4
 8008952:	2a00      	cmp	r2, #0
 8008954:	d1f0      	bne.n	8008938 <quorem+0xea>
 8008956:	3c01      	subs	r4, #1
 8008958:	e7eb      	b.n	8008932 <quorem+0xe4>
 800895a:	2000      	movs	r0, #0
 800895c:	e7ee      	b.n	800893c <quorem+0xee>
	...

08008960 <_dtoa_r>:
 8008960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008964:	ed2d 8b04 	vpush	{d8-d9}
 8008968:	69c5      	ldr	r5, [r0, #28]
 800896a:	b093      	sub	sp, #76	; 0x4c
 800896c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008970:	ec57 6b10 	vmov	r6, r7, d0
 8008974:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008978:	9107      	str	r1, [sp, #28]
 800897a:	4604      	mov	r4, r0
 800897c:	920a      	str	r2, [sp, #40]	; 0x28
 800897e:	930d      	str	r3, [sp, #52]	; 0x34
 8008980:	b975      	cbnz	r5, 80089a0 <_dtoa_r+0x40>
 8008982:	2010      	movs	r0, #16
 8008984:	f000 fe2a 	bl	80095dc <malloc>
 8008988:	4602      	mov	r2, r0
 800898a:	61e0      	str	r0, [r4, #28]
 800898c:	b920      	cbnz	r0, 8008998 <_dtoa_r+0x38>
 800898e:	4bae      	ldr	r3, [pc, #696]	; (8008c48 <_dtoa_r+0x2e8>)
 8008990:	21ef      	movs	r1, #239	; 0xef
 8008992:	48ae      	ldr	r0, [pc, #696]	; (8008c4c <_dtoa_r+0x2ec>)
 8008994:	f001 fe4a 	bl	800a62c <__assert_func>
 8008998:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800899c:	6005      	str	r5, [r0, #0]
 800899e:	60c5      	str	r5, [r0, #12]
 80089a0:	69e3      	ldr	r3, [r4, #28]
 80089a2:	6819      	ldr	r1, [r3, #0]
 80089a4:	b151      	cbz	r1, 80089bc <_dtoa_r+0x5c>
 80089a6:	685a      	ldr	r2, [r3, #4]
 80089a8:	604a      	str	r2, [r1, #4]
 80089aa:	2301      	movs	r3, #1
 80089ac:	4093      	lsls	r3, r2
 80089ae:	608b      	str	r3, [r1, #8]
 80089b0:	4620      	mov	r0, r4
 80089b2:	f000 ff07 	bl	80097c4 <_Bfree>
 80089b6:	69e3      	ldr	r3, [r4, #28]
 80089b8:	2200      	movs	r2, #0
 80089ba:	601a      	str	r2, [r3, #0]
 80089bc:	1e3b      	subs	r3, r7, #0
 80089be:	bfbb      	ittet	lt
 80089c0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80089c4:	9303      	strlt	r3, [sp, #12]
 80089c6:	2300      	movge	r3, #0
 80089c8:	2201      	movlt	r2, #1
 80089ca:	bfac      	ite	ge
 80089cc:	f8c8 3000 	strge.w	r3, [r8]
 80089d0:	f8c8 2000 	strlt.w	r2, [r8]
 80089d4:	4b9e      	ldr	r3, [pc, #632]	; (8008c50 <_dtoa_r+0x2f0>)
 80089d6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80089da:	ea33 0308 	bics.w	r3, r3, r8
 80089de:	d11b      	bne.n	8008a18 <_dtoa_r+0xb8>
 80089e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80089e2:	f242 730f 	movw	r3, #9999	; 0x270f
 80089e6:	6013      	str	r3, [r2, #0]
 80089e8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80089ec:	4333      	orrs	r3, r6
 80089ee:	f000 8593 	beq.w	8009518 <_dtoa_r+0xbb8>
 80089f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80089f4:	b963      	cbnz	r3, 8008a10 <_dtoa_r+0xb0>
 80089f6:	4b97      	ldr	r3, [pc, #604]	; (8008c54 <_dtoa_r+0x2f4>)
 80089f8:	e027      	b.n	8008a4a <_dtoa_r+0xea>
 80089fa:	4b97      	ldr	r3, [pc, #604]	; (8008c58 <_dtoa_r+0x2f8>)
 80089fc:	9300      	str	r3, [sp, #0]
 80089fe:	3308      	adds	r3, #8
 8008a00:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008a02:	6013      	str	r3, [r2, #0]
 8008a04:	9800      	ldr	r0, [sp, #0]
 8008a06:	b013      	add	sp, #76	; 0x4c
 8008a08:	ecbd 8b04 	vpop	{d8-d9}
 8008a0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a10:	4b90      	ldr	r3, [pc, #576]	; (8008c54 <_dtoa_r+0x2f4>)
 8008a12:	9300      	str	r3, [sp, #0]
 8008a14:	3303      	adds	r3, #3
 8008a16:	e7f3      	b.n	8008a00 <_dtoa_r+0xa0>
 8008a18:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	ec51 0b17 	vmov	r0, r1, d7
 8008a22:	eeb0 8a47 	vmov.f32	s16, s14
 8008a26:	eef0 8a67 	vmov.f32	s17, s15
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	f7f8 f84c 	bl	8000ac8 <__aeabi_dcmpeq>
 8008a30:	4681      	mov	r9, r0
 8008a32:	b160      	cbz	r0, 8008a4e <_dtoa_r+0xee>
 8008a34:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008a36:	2301      	movs	r3, #1
 8008a38:	6013      	str	r3, [r2, #0]
 8008a3a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	f000 8568 	beq.w	8009512 <_dtoa_r+0xbb2>
 8008a42:	4b86      	ldr	r3, [pc, #536]	; (8008c5c <_dtoa_r+0x2fc>)
 8008a44:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008a46:	6013      	str	r3, [r2, #0]
 8008a48:	3b01      	subs	r3, #1
 8008a4a:	9300      	str	r3, [sp, #0]
 8008a4c:	e7da      	b.n	8008a04 <_dtoa_r+0xa4>
 8008a4e:	aa10      	add	r2, sp, #64	; 0x40
 8008a50:	a911      	add	r1, sp, #68	; 0x44
 8008a52:	4620      	mov	r0, r4
 8008a54:	eeb0 0a48 	vmov.f32	s0, s16
 8008a58:	eef0 0a68 	vmov.f32	s1, s17
 8008a5c:	f001 f994 	bl	8009d88 <__d2b>
 8008a60:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008a64:	4682      	mov	sl, r0
 8008a66:	2d00      	cmp	r5, #0
 8008a68:	d07f      	beq.n	8008b6a <_dtoa_r+0x20a>
 8008a6a:	ee18 3a90 	vmov	r3, s17
 8008a6e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008a72:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8008a76:	ec51 0b18 	vmov	r0, r1, d8
 8008a7a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008a7e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008a82:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8008a86:	4619      	mov	r1, r3
 8008a88:	2200      	movs	r2, #0
 8008a8a:	4b75      	ldr	r3, [pc, #468]	; (8008c60 <_dtoa_r+0x300>)
 8008a8c:	f7f7 fbfc 	bl	8000288 <__aeabi_dsub>
 8008a90:	a367      	add	r3, pc, #412	; (adr r3, 8008c30 <_dtoa_r+0x2d0>)
 8008a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a96:	f7f7 fdaf 	bl	80005f8 <__aeabi_dmul>
 8008a9a:	a367      	add	r3, pc, #412	; (adr r3, 8008c38 <_dtoa_r+0x2d8>)
 8008a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aa0:	f7f7 fbf4 	bl	800028c <__adddf3>
 8008aa4:	4606      	mov	r6, r0
 8008aa6:	4628      	mov	r0, r5
 8008aa8:	460f      	mov	r7, r1
 8008aaa:	f7f7 fd3b 	bl	8000524 <__aeabi_i2d>
 8008aae:	a364      	add	r3, pc, #400	; (adr r3, 8008c40 <_dtoa_r+0x2e0>)
 8008ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ab4:	f7f7 fda0 	bl	80005f8 <__aeabi_dmul>
 8008ab8:	4602      	mov	r2, r0
 8008aba:	460b      	mov	r3, r1
 8008abc:	4630      	mov	r0, r6
 8008abe:	4639      	mov	r1, r7
 8008ac0:	f7f7 fbe4 	bl	800028c <__adddf3>
 8008ac4:	4606      	mov	r6, r0
 8008ac6:	460f      	mov	r7, r1
 8008ac8:	f7f8 f846 	bl	8000b58 <__aeabi_d2iz>
 8008acc:	2200      	movs	r2, #0
 8008ace:	4683      	mov	fp, r0
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	4630      	mov	r0, r6
 8008ad4:	4639      	mov	r1, r7
 8008ad6:	f7f8 f801 	bl	8000adc <__aeabi_dcmplt>
 8008ada:	b148      	cbz	r0, 8008af0 <_dtoa_r+0x190>
 8008adc:	4658      	mov	r0, fp
 8008ade:	f7f7 fd21 	bl	8000524 <__aeabi_i2d>
 8008ae2:	4632      	mov	r2, r6
 8008ae4:	463b      	mov	r3, r7
 8008ae6:	f7f7 ffef 	bl	8000ac8 <__aeabi_dcmpeq>
 8008aea:	b908      	cbnz	r0, 8008af0 <_dtoa_r+0x190>
 8008aec:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008af0:	f1bb 0f16 	cmp.w	fp, #22
 8008af4:	d857      	bhi.n	8008ba6 <_dtoa_r+0x246>
 8008af6:	4b5b      	ldr	r3, [pc, #364]	; (8008c64 <_dtoa_r+0x304>)
 8008af8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b00:	ec51 0b18 	vmov	r0, r1, d8
 8008b04:	f7f7 ffea 	bl	8000adc <__aeabi_dcmplt>
 8008b08:	2800      	cmp	r0, #0
 8008b0a:	d04e      	beq.n	8008baa <_dtoa_r+0x24a>
 8008b0c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008b10:	2300      	movs	r3, #0
 8008b12:	930c      	str	r3, [sp, #48]	; 0x30
 8008b14:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008b16:	1b5b      	subs	r3, r3, r5
 8008b18:	1e5a      	subs	r2, r3, #1
 8008b1a:	bf45      	ittet	mi
 8008b1c:	f1c3 0301 	rsbmi	r3, r3, #1
 8008b20:	9305      	strmi	r3, [sp, #20]
 8008b22:	2300      	movpl	r3, #0
 8008b24:	2300      	movmi	r3, #0
 8008b26:	9206      	str	r2, [sp, #24]
 8008b28:	bf54      	ite	pl
 8008b2a:	9305      	strpl	r3, [sp, #20]
 8008b2c:	9306      	strmi	r3, [sp, #24]
 8008b2e:	f1bb 0f00 	cmp.w	fp, #0
 8008b32:	db3c      	blt.n	8008bae <_dtoa_r+0x24e>
 8008b34:	9b06      	ldr	r3, [sp, #24]
 8008b36:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8008b3a:	445b      	add	r3, fp
 8008b3c:	9306      	str	r3, [sp, #24]
 8008b3e:	2300      	movs	r3, #0
 8008b40:	9308      	str	r3, [sp, #32]
 8008b42:	9b07      	ldr	r3, [sp, #28]
 8008b44:	2b09      	cmp	r3, #9
 8008b46:	d868      	bhi.n	8008c1a <_dtoa_r+0x2ba>
 8008b48:	2b05      	cmp	r3, #5
 8008b4a:	bfc4      	itt	gt
 8008b4c:	3b04      	subgt	r3, #4
 8008b4e:	9307      	strgt	r3, [sp, #28]
 8008b50:	9b07      	ldr	r3, [sp, #28]
 8008b52:	f1a3 0302 	sub.w	r3, r3, #2
 8008b56:	bfcc      	ite	gt
 8008b58:	2500      	movgt	r5, #0
 8008b5a:	2501      	movle	r5, #1
 8008b5c:	2b03      	cmp	r3, #3
 8008b5e:	f200 8085 	bhi.w	8008c6c <_dtoa_r+0x30c>
 8008b62:	e8df f003 	tbb	[pc, r3]
 8008b66:	3b2e      	.short	0x3b2e
 8008b68:	5839      	.short	0x5839
 8008b6a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008b6e:	441d      	add	r5, r3
 8008b70:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008b74:	2b20      	cmp	r3, #32
 8008b76:	bfc1      	itttt	gt
 8008b78:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008b7c:	fa08 f803 	lslgt.w	r8, r8, r3
 8008b80:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8008b84:	fa26 f303 	lsrgt.w	r3, r6, r3
 8008b88:	bfd6      	itet	le
 8008b8a:	f1c3 0320 	rsble	r3, r3, #32
 8008b8e:	ea48 0003 	orrgt.w	r0, r8, r3
 8008b92:	fa06 f003 	lslle.w	r0, r6, r3
 8008b96:	f7f7 fcb5 	bl	8000504 <__aeabi_ui2d>
 8008b9a:	2201      	movs	r2, #1
 8008b9c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8008ba0:	3d01      	subs	r5, #1
 8008ba2:	920e      	str	r2, [sp, #56]	; 0x38
 8008ba4:	e76f      	b.n	8008a86 <_dtoa_r+0x126>
 8008ba6:	2301      	movs	r3, #1
 8008ba8:	e7b3      	b.n	8008b12 <_dtoa_r+0x1b2>
 8008baa:	900c      	str	r0, [sp, #48]	; 0x30
 8008bac:	e7b2      	b.n	8008b14 <_dtoa_r+0x1b4>
 8008bae:	9b05      	ldr	r3, [sp, #20]
 8008bb0:	eba3 030b 	sub.w	r3, r3, fp
 8008bb4:	9305      	str	r3, [sp, #20]
 8008bb6:	f1cb 0300 	rsb	r3, fp, #0
 8008bba:	9308      	str	r3, [sp, #32]
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	930b      	str	r3, [sp, #44]	; 0x2c
 8008bc0:	e7bf      	b.n	8008b42 <_dtoa_r+0x1e2>
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	9309      	str	r3, [sp, #36]	; 0x24
 8008bc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	dc52      	bgt.n	8008c72 <_dtoa_r+0x312>
 8008bcc:	2301      	movs	r3, #1
 8008bce:	9301      	str	r3, [sp, #4]
 8008bd0:	9304      	str	r3, [sp, #16]
 8008bd2:	461a      	mov	r2, r3
 8008bd4:	920a      	str	r2, [sp, #40]	; 0x28
 8008bd6:	e00b      	b.n	8008bf0 <_dtoa_r+0x290>
 8008bd8:	2301      	movs	r3, #1
 8008bda:	e7f3      	b.n	8008bc4 <_dtoa_r+0x264>
 8008bdc:	2300      	movs	r3, #0
 8008bde:	9309      	str	r3, [sp, #36]	; 0x24
 8008be0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008be2:	445b      	add	r3, fp
 8008be4:	9301      	str	r3, [sp, #4]
 8008be6:	3301      	adds	r3, #1
 8008be8:	2b01      	cmp	r3, #1
 8008bea:	9304      	str	r3, [sp, #16]
 8008bec:	bfb8      	it	lt
 8008bee:	2301      	movlt	r3, #1
 8008bf0:	69e0      	ldr	r0, [r4, #28]
 8008bf2:	2100      	movs	r1, #0
 8008bf4:	2204      	movs	r2, #4
 8008bf6:	f102 0614 	add.w	r6, r2, #20
 8008bfa:	429e      	cmp	r6, r3
 8008bfc:	d93d      	bls.n	8008c7a <_dtoa_r+0x31a>
 8008bfe:	6041      	str	r1, [r0, #4]
 8008c00:	4620      	mov	r0, r4
 8008c02:	f000 fd9f 	bl	8009744 <_Balloc>
 8008c06:	9000      	str	r0, [sp, #0]
 8008c08:	2800      	cmp	r0, #0
 8008c0a:	d139      	bne.n	8008c80 <_dtoa_r+0x320>
 8008c0c:	4b16      	ldr	r3, [pc, #88]	; (8008c68 <_dtoa_r+0x308>)
 8008c0e:	4602      	mov	r2, r0
 8008c10:	f240 11af 	movw	r1, #431	; 0x1af
 8008c14:	e6bd      	b.n	8008992 <_dtoa_r+0x32>
 8008c16:	2301      	movs	r3, #1
 8008c18:	e7e1      	b.n	8008bde <_dtoa_r+0x27e>
 8008c1a:	2501      	movs	r5, #1
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	9307      	str	r3, [sp, #28]
 8008c20:	9509      	str	r5, [sp, #36]	; 0x24
 8008c22:	f04f 33ff 	mov.w	r3, #4294967295
 8008c26:	9301      	str	r3, [sp, #4]
 8008c28:	9304      	str	r3, [sp, #16]
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	2312      	movs	r3, #18
 8008c2e:	e7d1      	b.n	8008bd4 <_dtoa_r+0x274>
 8008c30:	636f4361 	.word	0x636f4361
 8008c34:	3fd287a7 	.word	0x3fd287a7
 8008c38:	8b60c8b3 	.word	0x8b60c8b3
 8008c3c:	3fc68a28 	.word	0x3fc68a28
 8008c40:	509f79fb 	.word	0x509f79fb
 8008c44:	3fd34413 	.word	0x3fd34413
 8008c48:	0802bdbd 	.word	0x0802bdbd
 8008c4c:	0802bdd4 	.word	0x0802bdd4
 8008c50:	7ff00000 	.word	0x7ff00000
 8008c54:	0802bdb9 	.word	0x0802bdb9
 8008c58:	0802bdb0 	.word	0x0802bdb0
 8008c5c:	0802bd8d 	.word	0x0802bd8d
 8008c60:	3ff80000 	.word	0x3ff80000
 8008c64:	0802bec0 	.word	0x0802bec0
 8008c68:	0802be2c 	.word	0x0802be2c
 8008c6c:	2301      	movs	r3, #1
 8008c6e:	9309      	str	r3, [sp, #36]	; 0x24
 8008c70:	e7d7      	b.n	8008c22 <_dtoa_r+0x2c2>
 8008c72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c74:	9301      	str	r3, [sp, #4]
 8008c76:	9304      	str	r3, [sp, #16]
 8008c78:	e7ba      	b.n	8008bf0 <_dtoa_r+0x290>
 8008c7a:	3101      	adds	r1, #1
 8008c7c:	0052      	lsls	r2, r2, #1
 8008c7e:	e7ba      	b.n	8008bf6 <_dtoa_r+0x296>
 8008c80:	69e3      	ldr	r3, [r4, #28]
 8008c82:	9a00      	ldr	r2, [sp, #0]
 8008c84:	601a      	str	r2, [r3, #0]
 8008c86:	9b04      	ldr	r3, [sp, #16]
 8008c88:	2b0e      	cmp	r3, #14
 8008c8a:	f200 80a8 	bhi.w	8008dde <_dtoa_r+0x47e>
 8008c8e:	2d00      	cmp	r5, #0
 8008c90:	f000 80a5 	beq.w	8008dde <_dtoa_r+0x47e>
 8008c94:	f1bb 0f00 	cmp.w	fp, #0
 8008c98:	dd38      	ble.n	8008d0c <_dtoa_r+0x3ac>
 8008c9a:	4bc0      	ldr	r3, [pc, #768]	; (8008f9c <_dtoa_r+0x63c>)
 8008c9c:	f00b 020f 	and.w	r2, fp, #15
 8008ca0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008ca4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008ca8:	e9d3 6700 	ldrd	r6, r7, [r3]
 8008cac:	ea4f 182b 	mov.w	r8, fp, asr #4
 8008cb0:	d019      	beq.n	8008ce6 <_dtoa_r+0x386>
 8008cb2:	4bbb      	ldr	r3, [pc, #748]	; (8008fa0 <_dtoa_r+0x640>)
 8008cb4:	ec51 0b18 	vmov	r0, r1, d8
 8008cb8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008cbc:	f7f7 fdc6 	bl	800084c <__aeabi_ddiv>
 8008cc0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008cc4:	f008 080f 	and.w	r8, r8, #15
 8008cc8:	2503      	movs	r5, #3
 8008cca:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8008fa0 <_dtoa_r+0x640>
 8008cce:	f1b8 0f00 	cmp.w	r8, #0
 8008cd2:	d10a      	bne.n	8008cea <_dtoa_r+0x38a>
 8008cd4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008cd8:	4632      	mov	r2, r6
 8008cda:	463b      	mov	r3, r7
 8008cdc:	f7f7 fdb6 	bl	800084c <__aeabi_ddiv>
 8008ce0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008ce4:	e02b      	b.n	8008d3e <_dtoa_r+0x3de>
 8008ce6:	2502      	movs	r5, #2
 8008ce8:	e7ef      	b.n	8008cca <_dtoa_r+0x36a>
 8008cea:	f018 0f01 	tst.w	r8, #1
 8008cee:	d008      	beq.n	8008d02 <_dtoa_r+0x3a2>
 8008cf0:	4630      	mov	r0, r6
 8008cf2:	4639      	mov	r1, r7
 8008cf4:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008cf8:	f7f7 fc7e 	bl	80005f8 <__aeabi_dmul>
 8008cfc:	3501      	adds	r5, #1
 8008cfe:	4606      	mov	r6, r0
 8008d00:	460f      	mov	r7, r1
 8008d02:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008d06:	f109 0908 	add.w	r9, r9, #8
 8008d0a:	e7e0      	b.n	8008cce <_dtoa_r+0x36e>
 8008d0c:	f000 809f 	beq.w	8008e4e <_dtoa_r+0x4ee>
 8008d10:	f1cb 0600 	rsb	r6, fp, #0
 8008d14:	4ba1      	ldr	r3, [pc, #644]	; (8008f9c <_dtoa_r+0x63c>)
 8008d16:	4fa2      	ldr	r7, [pc, #648]	; (8008fa0 <_dtoa_r+0x640>)
 8008d18:	f006 020f 	and.w	r2, r6, #15
 8008d1c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d24:	ec51 0b18 	vmov	r0, r1, d8
 8008d28:	f7f7 fc66 	bl	80005f8 <__aeabi_dmul>
 8008d2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008d30:	1136      	asrs	r6, r6, #4
 8008d32:	2300      	movs	r3, #0
 8008d34:	2502      	movs	r5, #2
 8008d36:	2e00      	cmp	r6, #0
 8008d38:	d17e      	bne.n	8008e38 <_dtoa_r+0x4d8>
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d1d0      	bne.n	8008ce0 <_dtoa_r+0x380>
 8008d3e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008d40:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	f000 8084 	beq.w	8008e52 <_dtoa_r+0x4f2>
 8008d4a:	4b96      	ldr	r3, [pc, #600]	; (8008fa4 <_dtoa_r+0x644>)
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	4640      	mov	r0, r8
 8008d50:	4649      	mov	r1, r9
 8008d52:	f7f7 fec3 	bl	8000adc <__aeabi_dcmplt>
 8008d56:	2800      	cmp	r0, #0
 8008d58:	d07b      	beq.n	8008e52 <_dtoa_r+0x4f2>
 8008d5a:	9b04      	ldr	r3, [sp, #16]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d078      	beq.n	8008e52 <_dtoa_r+0x4f2>
 8008d60:	9b01      	ldr	r3, [sp, #4]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	dd39      	ble.n	8008dda <_dtoa_r+0x47a>
 8008d66:	4b90      	ldr	r3, [pc, #576]	; (8008fa8 <_dtoa_r+0x648>)
 8008d68:	2200      	movs	r2, #0
 8008d6a:	4640      	mov	r0, r8
 8008d6c:	4649      	mov	r1, r9
 8008d6e:	f7f7 fc43 	bl	80005f8 <__aeabi_dmul>
 8008d72:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008d76:	9e01      	ldr	r6, [sp, #4]
 8008d78:	f10b 37ff 	add.w	r7, fp, #4294967295
 8008d7c:	3501      	adds	r5, #1
 8008d7e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008d82:	4628      	mov	r0, r5
 8008d84:	f7f7 fbce 	bl	8000524 <__aeabi_i2d>
 8008d88:	4642      	mov	r2, r8
 8008d8a:	464b      	mov	r3, r9
 8008d8c:	f7f7 fc34 	bl	80005f8 <__aeabi_dmul>
 8008d90:	4b86      	ldr	r3, [pc, #536]	; (8008fac <_dtoa_r+0x64c>)
 8008d92:	2200      	movs	r2, #0
 8008d94:	f7f7 fa7a 	bl	800028c <__adddf3>
 8008d98:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008d9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008da0:	9303      	str	r3, [sp, #12]
 8008da2:	2e00      	cmp	r6, #0
 8008da4:	d158      	bne.n	8008e58 <_dtoa_r+0x4f8>
 8008da6:	4b82      	ldr	r3, [pc, #520]	; (8008fb0 <_dtoa_r+0x650>)
 8008da8:	2200      	movs	r2, #0
 8008daa:	4640      	mov	r0, r8
 8008dac:	4649      	mov	r1, r9
 8008dae:	f7f7 fa6b 	bl	8000288 <__aeabi_dsub>
 8008db2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008db6:	4680      	mov	r8, r0
 8008db8:	4689      	mov	r9, r1
 8008dba:	f7f7 fead 	bl	8000b18 <__aeabi_dcmpgt>
 8008dbe:	2800      	cmp	r0, #0
 8008dc0:	f040 8296 	bne.w	80092f0 <_dtoa_r+0x990>
 8008dc4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008dc8:	4640      	mov	r0, r8
 8008dca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008dce:	4649      	mov	r1, r9
 8008dd0:	f7f7 fe84 	bl	8000adc <__aeabi_dcmplt>
 8008dd4:	2800      	cmp	r0, #0
 8008dd6:	f040 8289 	bne.w	80092ec <_dtoa_r+0x98c>
 8008dda:	ed8d 8b02 	vstr	d8, [sp, #8]
 8008dde:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	f2c0 814e 	blt.w	8009082 <_dtoa_r+0x722>
 8008de6:	f1bb 0f0e 	cmp.w	fp, #14
 8008dea:	f300 814a 	bgt.w	8009082 <_dtoa_r+0x722>
 8008dee:	4b6b      	ldr	r3, [pc, #428]	; (8008f9c <_dtoa_r+0x63c>)
 8008df0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008df4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008df8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	f280 80dc 	bge.w	8008fb8 <_dtoa_r+0x658>
 8008e00:	9b04      	ldr	r3, [sp, #16]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	f300 80d8 	bgt.w	8008fb8 <_dtoa_r+0x658>
 8008e08:	f040 826f 	bne.w	80092ea <_dtoa_r+0x98a>
 8008e0c:	4b68      	ldr	r3, [pc, #416]	; (8008fb0 <_dtoa_r+0x650>)
 8008e0e:	2200      	movs	r2, #0
 8008e10:	4640      	mov	r0, r8
 8008e12:	4649      	mov	r1, r9
 8008e14:	f7f7 fbf0 	bl	80005f8 <__aeabi_dmul>
 8008e18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008e1c:	f7f7 fe72 	bl	8000b04 <__aeabi_dcmpge>
 8008e20:	9e04      	ldr	r6, [sp, #16]
 8008e22:	4637      	mov	r7, r6
 8008e24:	2800      	cmp	r0, #0
 8008e26:	f040 8245 	bne.w	80092b4 <_dtoa_r+0x954>
 8008e2a:	9d00      	ldr	r5, [sp, #0]
 8008e2c:	2331      	movs	r3, #49	; 0x31
 8008e2e:	f805 3b01 	strb.w	r3, [r5], #1
 8008e32:	f10b 0b01 	add.w	fp, fp, #1
 8008e36:	e241      	b.n	80092bc <_dtoa_r+0x95c>
 8008e38:	07f2      	lsls	r2, r6, #31
 8008e3a:	d505      	bpl.n	8008e48 <_dtoa_r+0x4e8>
 8008e3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e40:	f7f7 fbda 	bl	80005f8 <__aeabi_dmul>
 8008e44:	3501      	adds	r5, #1
 8008e46:	2301      	movs	r3, #1
 8008e48:	1076      	asrs	r6, r6, #1
 8008e4a:	3708      	adds	r7, #8
 8008e4c:	e773      	b.n	8008d36 <_dtoa_r+0x3d6>
 8008e4e:	2502      	movs	r5, #2
 8008e50:	e775      	b.n	8008d3e <_dtoa_r+0x3de>
 8008e52:	9e04      	ldr	r6, [sp, #16]
 8008e54:	465f      	mov	r7, fp
 8008e56:	e792      	b.n	8008d7e <_dtoa_r+0x41e>
 8008e58:	9900      	ldr	r1, [sp, #0]
 8008e5a:	4b50      	ldr	r3, [pc, #320]	; (8008f9c <_dtoa_r+0x63c>)
 8008e5c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008e60:	4431      	add	r1, r6
 8008e62:	9102      	str	r1, [sp, #8]
 8008e64:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008e66:	eeb0 9a47 	vmov.f32	s18, s14
 8008e6a:	eef0 9a67 	vmov.f32	s19, s15
 8008e6e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008e72:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008e76:	2900      	cmp	r1, #0
 8008e78:	d044      	beq.n	8008f04 <_dtoa_r+0x5a4>
 8008e7a:	494e      	ldr	r1, [pc, #312]	; (8008fb4 <_dtoa_r+0x654>)
 8008e7c:	2000      	movs	r0, #0
 8008e7e:	f7f7 fce5 	bl	800084c <__aeabi_ddiv>
 8008e82:	ec53 2b19 	vmov	r2, r3, d9
 8008e86:	f7f7 f9ff 	bl	8000288 <__aeabi_dsub>
 8008e8a:	9d00      	ldr	r5, [sp, #0]
 8008e8c:	ec41 0b19 	vmov	d9, r0, r1
 8008e90:	4649      	mov	r1, r9
 8008e92:	4640      	mov	r0, r8
 8008e94:	f7f7 fe60 	bl	8000b58 <__aeabi_d2iz>
 8008e98:	4606      	mov	r6, r0
 8008e9a:	f7f7 fb43 	bl	8000524 <__aeabi_i2d>
 8008e9e:	4602      	mov	r2, r0
 8008ea0:	460b      	mov	r3, r1
 8008ea2:	4640      	mov	r0, r8
 8008ea4:	4649      	mov	r1, r9
 8008ea6:	f7f7 f9ef 	bl	8000288 <__aeabi_dsub>
 8008eaa:	3630      	adds	r6, #48	; 0x30
 8008eac:	f805 6b01 	strb.w	r6, [r5], #1
 8008eb0:	ec53 2b19 	vmov	r2, r3, d9
 8008eb4:	4680      	mov	r8, r0
 8008eb6:	4689      	mov	r9, r1
 8008eb8:	f7f7 fe10 	bl	8000adc <__aeabi_dcmplt>
 8008ebc:	2800      	cmp	r0, #0
 8008ebe:	d164      	bne.n	8008f8a <_dtoa_r+0x62a>
 8008ec0:	4642      	mov	r2, r8
 8008ec2:	464b      	mov	r3, r9
 8008ec4:	4937      	ldr	r1, [pc, #220]	; (8008fa4 <_dtoa_r+0x644>)
 8008ec6:	2000      	movs	r0, #0
 8008ec8:	f7f7 f9de 	bl	8000288 <__aeabi_dsub>
 8008ecc:	ec53 2b19 	vmov	r2, r3, d9
 8008ed0:	f7f7 fe04 	bl	8000adc <__aeabi_dcmplt>
 8008ed4:	2800      	cmp	r0, #0
 8008ed6:	f040 80b6 	bne.w	8009046 <_dtoa_r+0x6e6>
 8008eda:	9b02      	ldr	r3, [sp, #8]
 8008edc:	429d      	cmp	r5, r3
 8008ede:	f43f af7c 	beq.w	8008dda <_dtoa_r+0x47a>
 8008ee2:	4b31      	ldr	r3, [pc, #196]	; (8008fa8 <_dtoa_r+0x648>)
 8008ee4:	ec51 0b19 	vmov	r0, r1, d9
 8008ee8:	2200      	movs	r2, #0
 8008eea:	f7f7 fb85 	bl	80005f8 <__aeabi_dmul>
 8008eee:	4b2e      	ldr	r3, [pc, #184]	; (8008fa8 <_dtoa_r+0x648>)
 8008ef0:	ec41 0b19 	vmov	d9, r0, r1
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	4640      	mov	r0, r8
 8008ef8:	4649      	mov	r1, r9
 8008efa:	f7f7 fb7d 	bl	80005f8 <__aeabi_dmul>
 8008efe:	4680      	mov	r8, r0
 8008f00:	4689      	mov	r9, r1
 8008f02:	e7c5      	b.n	8008e90 <_dtoa_r+0x530>
 8008f04:	ec51 0b17 	vmov	r0, r1, d7
 8008f08:	f7f7 fb76 	bl	80005f8 <__aeabi_dmul>
 8008f0c:	9b02      	ldr	r3, [sp, #8]
 8008f0e:	9d00      	ldr	r5, [sp, #0]
 8008f10:	930f      	str	r3, [sp, #60]	; 0x3c
 8008f12:	ec41 0b19 	vmov	d9, r0, r1
 8008f16:	4649      	mov	r1, r9
 8008f18:	4640      	mov	r0, r8
 8008f1a:	f7f7 fe1d 	bl	8000b58 <__aeabi_d2iz>
 8008f1e:	4606      	mov	r6, r0
 8008f20:	f7f7 fb00 	bl	8000524 <__aeabi_i2d>
 8008f24:	3630      	adds	r6, #48	; 0x30
 8008f26:	4602      	mov	r2, r0
 8008f28:	460b      	mov	r3, r1
 8008f2a:	4640      	mov	r0, r8
 8008f2c:	4649      	mov	r1, r9
 8008f2e:	f7f7 f9ab 	bl	8000288 <__aeabi_dsub>
 8008f32:	f805 6b01 	strb.w	r6, [r5], #1
 8008f36:	9b02      	ldr	r3, [sp, #8]
 8008f38:	429d      	cmp	r5, r3
 8008f3a:	4680      	mov	r8, r0
 8008f3c:	4689      	mov	r9, r1
 8008f3e:	f04f 0200 	mov.w	r2, #0
 8008f42:	d124      	bne.n	8008f8e <_dtoa_r+0x62e>
 8008f44:	4b1b      	ldr	r3, [pc, #108]	; (8008fb4 <_dtoa_r+0x654>)
 8008f46:	ec51 0b19 	vmov	r0, r1, d9
 8008f4a:	f7f7 f99f 	bl	800028c <__adddf3>
 8008f4e:	4602      	mov	r2, r0
 8008f50:	460b      	mov	r3, r1
 8008f52:	4640      	mov	r0, r8
 8008f54:	4649      	mov	r1, r9
 8008f56:	f7f7 fddf 	bl	8000b18 <__aeabi_dcmpgt>
 8008f5a:	2800      	cmp	r0, #0
 8008f5c:	d173      	bne.n	8009046 <_dtoa_r+0x6e6>
 8008f5e:	ec53 2b19 	vmov	r2, r3, d9
 8008f62:	4914      	ldr	r1, [pc, #80]	; (8008fb4 <_dtoa_r+0x654>)
 8008f64:	2000      	movs	r0, #0
 8008f66:	f7f7 f98f 	bl	8000288 <__aeabi_dsub>
 8008f6a:	4602      	mov	r2, r0
 8008f6c:	460b      	mov	r3, r1
 8008f6e:	4640      	mov	r0, r8
 8008f70:	4649      	mov	r1, r9
 8008f72:	f7f7 fdb3 	bl	8000adc <__aeabi_dcmplt>
 8008f76:	2800      	cmp	r0, #0
 8008f78:	f43f af2f 	beq.w	8008dda <_dtoa_r+0x47a>
 8008f7c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008f7e:	1e6b      	subs	r3, r5, #1
 8008f80:	930f      	str	r3, [sp, #60]	; 0x3c
 8008f82:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008f86:	2b30      	cmp	r3, #48	; 0x30
 8008f88:	d0f8      	beq.n	8008f7c <_dtoa_r+0x61c>
 8008f8a:	46bb      	mov	fp, r7
 8008f8c:	e04a      	b.n	8009024 <_dtoa_r+0x6c4>
 8008f8e:	4b06      	ldr	r3, [pc, #24]	; (8008fa8 <_dtoa_r+0x648>)
 8008f90:	f7f7 fb32 	bl	80005f8 <__aeabi_dmul>
 8008f94:	4680      	mov	r8, r0
 8008f96:	4689      	mov	r9, r1
 8008f98:	e7bd      	b.n	8008f16 <_dtoa_r+0x5b6>
 8008f9a:	bf00      	nop
 8008f9c:	0802bec0 	.word	0x0802bec0
 8008fa0:	0802be98 	.word	0x0802be98
 8008fa4:	3ff00000 	.word	0x3ff00000
 8008fa8:	40240000 	.word	0x40240000
 8008fac:	401c0000 	.word	0x401c0000
 8008fb0:	40140000 	.word	0x40140000
 8008fb4:	3fe00000 	.word	0x3fe00000
 8008fb8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008fbc:	9d00      	ldr	r5, [sp, #0]
 8008fbe:	4642      	mov	r2, r8
 8008fc0:	464b      	mov	r3, r9
 8008fc2:	4630      	mov	r0, r6
 8008fc4:	4639      	mov	r1, r7
 8008fc6:	f7f7 fc41 	bl	800084c <__aeabi_ddiv>
 8008fca:	f7f7 fdc5 	bl	8000b58 <__aeabi_d2iz>
 8008fce:	9001      	str	r0, [sp, #4]
 8008fd0:	f7f7 faa8 	bl	8000524 <__aeabi_i2d>
 8008fd4:	4642      	mov	r2, r8
 8008fd6:	464b      	mov	r3, r9
 8008fd8:	f7f7 fb0e 	bl	80005f8 <__aeabi_dmul>
 8008fdc:	4602      	mov	r2, r0
 8008fde:	460b      	mov	r3, r1
 8008fe0:	4630      	mov	r0, r6
 8008fe2:	4639      	mov	r1, r7
 8008fe4:	f7f7 f950 	bl	8000288 <__aeabi_dsub>
 8008fe8:	9e01      	ldr	r6, [sp, #4]
 8008fea:	9f04      	ldr	r7, [sp, #16]
 8008fec:	3630      	adds	r6, #48	; 0x30
 8008fee:	f805 6b01 	strb.w	r6, [r5], #1
 8008ff2:	9e00      	ldr	r6, [sp, #0]
 8008ff4:	1bae      	subs	r6, r5, r6
 8008ff6:	42b7      	cmp	r7, r6
 8008ff8:	4602      	mov	r2, r0
 8008ffa:	460b      	mov	r3, r1
 8008ffc:	d134      	bne.n	8009068 <_dtoa_r+0x708>
 8008ffe:	f7f7 f945 	bl	800028c <__adddf3>
 8009002:	4642      	mov	r2, r8
 8009004:	464b      	mov	r3, r9
 8009006:	4606      	mov	r6, r0
 8009008:	460f      	mov	r7, r1
 800900a:	f7f7 fd85 	bl	8000b18 <__aeabi_dcmpgt>
 800900e:	b9c8      	cbnz	r0, 8009044 <_dtoa_r+0x6e4>
 8009010:	4642      	mov	r2, r8
 8009012:	464b      	mov	r3, r9
 8009014:	4630      	mov	r0, r6
 8009016:	4639      	mov	r1, r7
 8009018:	f7f7 fd56 	bl	8000ac8 <__aeabi_dcmpeq>
 800901c:	b110      	cbz	r0, 8009024 <_dtoa_r+0x6c4>
 800901e:	9b01      	ldr	r3, [sp, #4]
 8009020:	07db      	lsls	r3, r3, #31
 8009022:	d40f      	bmi.n	8009044 <_dtoa_r+0x6e4>
 8009024:	4651      	mov	r1, sl
 8009026:	4620      	mov	r0, r4
 8009028:	f000 fbcc 	bl	80097c4 <_Bfree>
 800902c:	2300      	movs	r3, #0
 800902e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009030:	702b      	strb	r3, [r5, #0]
 8009032:	f10b 0301 	add.w	r3, fp, #1
 8009036:	6013      	str	r3, [r2, #0]
 8009038:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800903a:	2b00      	cmp	r3, #0
 800903c:	f43f ace2 	beq.w	8008a04 <_dtoa_r+0xa4>
 8009040:	601d      	str	r5, [r3, #0]
 8009042:	e4df      	b.n	8008a04 <_dtoa_r+0xa4>
 8009044:	465f      	mov	r7, fp
 8009046:	462b      	mov	r3, r5
 8009048:	461d      	mov	r5, r3
 800904a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800904e:	2a39      	cmp	r2, #57	; 0x39
 8009050:	d106      	bne.n	8009060 <_dtoa_r+0x700>
 8009052:	9a00      	ldr	r2, [sp, #0]
 8009054:	429a      	cmp	r2, r3
 8009056:	d1f7      	bne.n	8009048 <_dtoa_r+0x6e8>
 8009058:	9900      	ldr	r1, [sp, #0]
 800905a:	2230      	movs	r2, #48	; 0x30
 800905c:	3701      	adds	r7, #1
 800905e:	700a      	strb	r2, [r1, #0]
 8009060:	781a      	ldrb	r2, [r3, #0]
 8009062:	3201      	adds	r2, #1
 8009064:	701a      	strb	r2, [r3, #0]
 8009066:	e790      	b.n	8008f8a <_dtoa_r+0x62a>
 8009068:	4ba3      	ldr	r3, [pc, #652]	; (80092f8 <_dtoa_r+0x998>)
 800906a:	2200      	movs	r2, #0
 800906c:	f7f7 fac4 	bl	80005f8 <__aeabi_dmul>
 8009070:	2200      	movs	r2, #0
 8009072:	2300      	movs	r3, #0
 8009074:	4606      	mov	r6, r0
 8009076:	460f      	mov	r7, r1
 8009078:	f7f7 fd26 	bl	8000ac8 <__aeabi_dcmpeq>
 800907c:	2800      	cmp	r0, #0
 800907e:	d09e      	beq.n	8008fbe <_dtoa_r+0x65e>
 8009080:	e7d0      	b.n	8009024 <_dtoa_r+0x6c4>
 8009082:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009084:	2a00      	cmp	r2, #0
 8009086:	f000 80ca 	beq.w	800921e <_dtoa_r+0x8be>
 800908a:	9a07      	ldr	r2, [sp, #28]
 800908c:	2a01      	cmp	r2, #1
 800908e:	f300 80ad 	bgt.w	80091ec <_dtoa_r+0x88c>
 8009092:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009094:	2a00      	cmp	r2, #0
 8009096:	f000 80a5 	beq.w	80091e4 <_dtoa_r+0x884>
 800909a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800909e:	9e08      	ldr	r6, [sp, #32]
 80090a0:	9d05      	ldr	r5, [sp, #20]
 80090a2:	9a05      	ldr	r2, [sp, #20]
 80090a4:	441a      	add	r2, r3
 80090a6:	9205      	str	r2, [sp, #20]
 80090a8:	9a06      	ldr	r2, [sp, #24]
 80090aa:	2101      	movs	r1, #1
 80090ac:	441a      	add	r2, r3
 80090ae:	4620      	mov	r0, r4
 80090b0:	9206      	str	r2, [sp, #24]
 80090b2:	f000 fc3d 	bl	8009930 <__i2b>
 80090b6:	4607      	mov	r7, r0
 80090b8:	b165      	cbz	r5, 80090d4 <_dtoa_r+0x774>
 80090ba:	9b06      	ldr	r3, [sp, #24]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	dd09      	ble.n	80090d4 <_dtoa_r+0x774>
 80090c0:	42ab      	cmp	r3, r5
 80090c2:	9a05      	ldr	r2, [sp, #20]
 80090c4:	bfa8      	it	ge
 80090c6:	462b      	movge	r3, r5
 80090c8:	1ad2      	subs	r2, r2, r3
 80090ca:	9205      	str	r2, [sp, #20]
 80090cc:	9a06      	ldr	r2, [sp, #24]
 80090ce:	1aed      	subs	r5, r5, r3
 80090d0:	1ad3      	subs	r3, r2, r3
 80090d2:	9306      	str	r3, [sp, #24]
 80090d4:	9b08      	ldr	r3, [sp, #32]
 80090d6:	b1f3      	cbz	r3, 8009116 <_dtoa_r+0x7b6>
 80090d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090da:	2b00      	cmp	r3, #0
 80090dc:	f000 80a3 	beq.w	8009226 <_dtoa_r+0x8c6>
 80090e0:	2e00      	cmp	r6, #0
 80090e2:	dd10      	ble.n	8009106 <_dtoa_r+0x7a6>
 80090e4:	4639      	mov	r1, r7
 80090e6:	4632      	mov	r2, r6
 80090e8:	4620      	mov	r0, r4
 80090ea:	f000 fce1 	bl	8009ab0 <__pow5mult>
 80090ee:	4652      	mov	r2, sl
 80090f0:	4601      	mov	r1, r0
 80090f2:	4607      	mov	r7, r0
 80090f4:	4620      	mov	r0, r4
 80090f6:	f000 fc31 	bl	800995c <__multiply>
 80090fa:	4651      	mov	r1, sl
 80090fc:	4680      	mov	r8, r0
 80090fe:	4620      	mov	r0, r4
 8009100:	f000 fb60 	bl	80097c4 <_Bfree>
 8009104:	46c2      	mov	sl, r8
 8009106:	9b08      	ldr	r3, [sp, #32]
 8009108:	1b9a      	subs	r2, r3, r6
 800910a:	d004      	beq.n	8009116 <_dtoa_r+0x7b6>
 800910c:	4651      	mov	r1, sl
 800910e:	4620      	mov	r0, r4
 8009110:	f000 fcce 	bl	8009ab0 <__pow5mult>
 8009114:	4682      	mov	sl, r0
 8009116:	2101      	movs	r1, #1
 8009118:	4620      	mov	r0, r4
 800911a:	f000 fc09 	bl	8009930 <__i2b>
 800911e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009120:	2b00      	cmp	r3, #0
 8009122:	4606      	mov	r6, r0
 8009124:	f340 8081 	ble.w	800922a <_dtoa_r+0x8ca>
 8009128:	461a      	mov	r2, r3
 800912a:	4601      	mov	r1, r0
 800912c:	4620      	mov	r0, r4
 800912e:	f000 fcbf 	bl	8009ab0 <__pow5mult>
 8009132:	9b07      	ldr	r3, [sp, #28]
 8009134:	2b01      	cmp	r3, #1
 8009136:	4606      	mov	r6, r0
 8009138:	dd7a      	ble.n	8009230 <_dtoa_r+0x8d0>
 800913a:	f04f 0800 	mov.w	r8, #0
 800913e:	6933      	ldr	r3, [r6, #16]
 8009140:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009144:	6918      	ldr	r0, [r3, #16]
 8009146:	f000 fba5 	bl	8009894 <__hi0bits>
 800914a:	f1c0 0020 	rsb	r0, r0, #32
 800914e:	9b06      	ldr	r3, [sp, #24]
 8009150:	4418      	add	r0, r3
 8009152:	f010 001f 	ands.w	r0, r0, #31
 8009156:	f000 8094 	beq.w	8009282 <_dtoa_r+0x922>
 800915a:	f1c0 0320 	rsb	r3, r0, #32
 800915e:	2b04      	cmp	r3, #4
 8009160:	f340 8085 	ble.w	800926e <_dtoa_r+0x90e>
 8009164:	9b05      	ldr	r3, [sp, #20]
 8009166:	f1c0 001c 	rsb	r0, r0, #28
 800916a:	4403      	add	r3, r0
 800916c:	9305      	str	r3, [sp, #20]
 800916e:	9b06      	ldr	r3, [sp, #24]
 8009170:	4403      	add	r3, r0
 8009172:	4405      	add	r5, r0
 8009174:	9306      	str	r3, [sp, #24]
 8009176:	9b05      	ldr	r3, [sp, #20]
 8009178:	2b00      	cmp	r3, #0
 800917a:	dd05      	ble.n	8009188 <_dtoa_r+0x828>
 800917c:	4651      	mov	r1, sl
 800917e:	461a      	mov	r2, r3
 8009180:	4620      	mov	r0, r4
 8009182:	f000 fcef 	bl	8009b64 <__lshift>
 8009186:	4682      	mov	sl, r0
 8009188:	9b06      	ldr	r3, [sp, #24]
 800918a:	2b00      	cmp	r3, #0
 800918c:	dd05      	ble.n	800919a <_dtoa_r+0x83a>
 800918e:	4631      	mov	r1, r6
 8009190:	461a      	mov	r2, r3
 8009192:	4620      	mov	r0, r4
 8009194:	f000 fce6 	bl	8009b64 <__lshift>
 8009198:	4606      	mov	r6, r0
 800919a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800919c:	2b00      	cmp	r3, #0
 800919e:	d072      	beq.n	8009286 <_dtoa_r+0x926>
 80091a0:	4631      	mov	r1, r6
 80091a2:	4650      	mov	r0, sl
 80091a4:	f000 fd4a 	bl	8009c3c <__mcmp>
 80091a8:	2800      	cmp	r0, #0
 80091aa:	da6c      	bge.n	8009286 <_dtoa_r+0x926>
 80091ac:	2300      	movs	r3, #0
 80091ae:	4651      	mov	r1, sl
 80091b0:	220a      	movs	r2, #10
 80091b2:	4620      	mov	r0, r4
 80091b4:	f000 fb28 	bl	8009808 <__multadd>
 80091b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091ba:	f10b 3bff 	add.w	fp, fp, #4294967295
 80091be:	4682      	mov	sl, r0
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	f000 81b0 	beq.w	8009526 <_dtoa_r+0xbc6>
 80091c6:	2300      	movs	r3, #0
 80091c8:	4639      	mov	r1, r7
 80091ca:	220a      	movs	r2, #10
 80091cc:	4620      	mov	r0, r4
 80091ce:	f000 fb1b 	bl	8009808 <__multadd>
 80091d2:	9b01      	ldr	r3, [sp, #4]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	4607      	mov	r7, r0
 80091d8:	f300 8096 	bgt.w	8009308 <_dtoa_r+0x9a8>
 80091dc:	9b07      	ldr	r3, [sp, #28]
 80091de:	2b02      	cmp	r3, #2
 80091e0:	dc59      	bgt.n	8009296 <_dtoa_r+0x936>
 80091e2:	e091      	b.n	8009308 <_dtoa_r+0x9a8>
 80091e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80091e6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80091ea:	e758      	b.n	800909e <_dtoa_r+0x73e>
 80091ec:	9b04      	ldr	r3, [sp, #16]
 80091ee:	1e5e      	subs	r6, r3, #1
 80091f0:	9b08      	ldr	r3, [sp, #32]
 80091f2:	42b3      	cmp	r3, r6
 80091f4:	bfbf      	itttt	lt
 80091f6:	9b08      	ldrlt	r3, [sp, #32]
 80091f8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80091fa:	9608      	strlt	r6, [sp, #32]
 80091fc:	1af3      	sublt	r3, r6, r3
 80091fe:	bfb4      	ite	lt
 8009200:	18d2      	addlt	r2, r2, r3
 8009202:	1b9e      	subge	r6, r3, r6
 8009204:	9b04      	ldr	r3, [sp, #16]
 8009206:	bfbc      	itt	lt
 8009208:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800920a:	2600      	movlt	r6, #0
 800920c:	2b00      	cmp	r3, #0
 800920e:	bfb7      	itett	lt
 8009210:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8009214:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8009218:	1a9d      	sublt	r5, r3, r2
 800921a:	2300      	movlt	r3, #0
 800921c:	e741      	b.n	80090a2 <_dtoa_r+0x742>
 800921e:	9e08      	ldr	r6, [sp, #32]
 8009220:	9d05      	ldr	r5, [sp, #20]
 8009222:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009224:	e748      	b.n	80090b8 <_dtoa_r+0x758>
 8009226:	9a08      	ldr	r2, [sp, #32]
 8009228:	e770      	b.n	800910c <_dtoa_r+0x7ac>
 800922a:	9b07      	ldr	r3, [sp, #28]
 800922c:	2b01      	cmp	r3, #1
 800922e:	dc19      	bgt.n	8009264 <_dtoa_r+0x904>
 8009230:	9b02      	ldr	r3, [sp, #8]
 8009232:	b9bb      	cbnz	r3, 8009264 <_dtoa_r+0x904>
 8009234:	9b03      	ldr	r3, [sp, #12]
 8009236:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800923a:	b99b      	cbnz	r3, 8009264 <_dtoa_r+0x904>
 800923c:	9b03      	ldr	r3, [sp, #12]
 800923e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009242:	0d1b      	lsrs	r3, r3, #20
 8009244:	051b      	lsls	r3, r3, #20
 8009246:	b183      	cbz	r3, 800926a <_dtoa_r+0x90a>
 8009248:	9b05      	ldr	r3, [sp, #20]
 800924a:	3301      	adds	r3, #1
 800924c:	9305      	str	r3, [sp, #20]
 800924e:	9b06      	ldr	r3, [sp, #24]
 8009250:	3301      	adds	r3, #1
 8009252:	9306      	str	r3, [sp, #24]
 8009254:	f04f 0801 	mov.w	r8, #1
 8009258:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800925a:	2b00      	cmp	r3, #0
 800925c:	f47f af6f 	bne.w	800913e <_dtoa_r+0x7de>
 8009260:	2001      	movs	r0, #1
 8009262:	e774      	b.n	800914e <_dtoa_r+0x7ee>
 8009264:	f04f 0800 	mov.w	r8, #0
 8009268:	e7f6      	b.n	8009258 <_dtoa_r+0x8f8>
 800926a:	4698      	mov	r8, r3
 800926c:	e7f4      	b.n	8009258 <_dtoa_r+0x8f8>
 800926e:	d082      	beq.n	8009176 <_dtoa_r+0x816>
 8009270:	9a05      	ldr	r2, [sp, #20]
 8009272:	331c      	adds	r3, #28
 8009274:	441a      	add	r2, r3
 8009276:	9205      	str	r2, [sp, #20]
 8009278:	9a06      	ldr	r2, [sp, #24]
 800927a:	441a      	add	r2, r3
 800927c:	441d      	add	r5, r3
 800927e:	9206      	str	r2, [sp, #24]
 8009280:	e779      	b.n	8009176 <_dtoa_r+0x816>
 8009282:	4603      	mov	r3, r0
 8009284:	e7f4      	b.n	8009270 <_dtoa_r+0x910>
 8009286:	9b04      	ldr	r3, [sp, #16]
 8009288:	2b00      	cmp	r3, #0
 800928a:	dc37      	bgt.n	80092fc <_dtoa_r+0x99c>
 800928c:	9b07      	ldr	r3, [sp, #28]
 800928e:	2b02      	cmp	r3, #2
 8009290:	dd34      	ble.n	80092fc <_dtoa_r+0x99c>
 8009292:	9b04      	ldr	r3, [sp, #16]
 8009294:	9301      	str	r3, [sp, #4]
 8009296:	9b01      	ldr	r3, [sp, #4]
 8009298:	b963      	cbnz	r3, 80092b4 <_dtoa_r+0x954>
 800929a:	4631      	mov	r1, r6
 800929c:	2205      	movs	r2, #5
 800929e:	4620      	mov	r0, r4
 80092a0:	f000 fab2 	bl	8009808 <__multadd>
 80092a4:	4601      	mov	r1, r0
 80092a6:	4606      	mov	r6, r0
 80092a8:	4650      	mov	r0, sl
 80092aa:	f000 fcc7 	bl	8009c3c <__mcmp>
 80092ae:	2800      	cmp	r0, #0
 80092b0:	f73f adbb 	bgt.w	8008e2a <_dtoa_r+0x4ca>
 80092b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092b6:	9d00      	ldr	r5, [sp, #0]
 80092b8:	ea6f 0b03 	mvn.w	fp, r3
 80092bc:	f04f 0800 	mov.w	r8, #0
 80092c0:	4631      	mov	r1, r6
 80092c2:	4620      	mov	r0, r4
 80092c4:	f000 fa7e 	bl	80097c4 <_Bfree>
 80092c8:	2f00      	cmp	r7, #0
 80092ca:	f43f aeab 	beq.w	8009024 <_dtoa_r+0x6c4>
 80092ce:	f1b8 0f00 	cmp.w	r8, #0
 80092d2:	d005      	beq.n	80092e0 <_dtoa_r+0x980>
 80092d4:	45b8      	cmp	r8, r7
 80092d6:	d003      	beq.n	80092e0 <_dtoa_r+0x980>
 80092d8:	4641      	mov	r1, r8
 80092da:	4620      	mov	r0, r4
 80092dc:	f000 fa72 	bl	80097c4 <_Bfree>
 80092e0:	4639      	mov	r1, r7
 80092e2:	4620      	mov	r0, r4
 80092e4:	f000 fa6e 	bl	80097c4 <_Bfree>
 80092e8:	e69c      	b.n	8009024 <_dtoa_r+0x6c4>
 80092ea:	2600      	movs	r6, #0
 80092ec:	4637      	mov	r7, r6
 80092ee:	e7e1      	b.n	80092b4 <_dtoa_r+0x954>
 80092f0:	46bb      	mov	fp, r7
 80092f2:	4637      	mov	r7, r6
 80092f4:	e599      	b.n	8008e2a <_dtoa_r+0x4ca>
 80092f6:	bf00      	nop
 80092f8:	40240000 	.word	0x40240000
 80092fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092fe:	2b00      	cmp	r3, #0
 8009300:	f000 80c8 	beq.w	8009494 <_dtoa_r+0xb34>
 8009304:	9b04      	ldr	r3, [sp, #16]
 8009306:	9301      	str	r3, [sp, #4]
 8009308:	2d00      	cmp	r5, #0
 800930a:	dd05      	ble.n	8009318 <_dtoa_r+0x9b8>
 800930c:	4639      	mov	r1, r7
 800930e:	462a      	mov	r2, r5
 8009310:	4620      	mov	r0, r4
 8009312:	f000 fc27 	bl	8009b64 <__lshift>
 8009316:	4607      	mov	r7, r0
 8009318:	f1b8 0f00 	cmp.w	r8, #0
 800931c:	d05b      	beq.n	80093d6 <_dtoa_r+0xa76>
 800931e:	6879      	ldr	r1, [r7, #4]
 8009320:	4620      	mov	r0, r4
 8009322:	f000 fa0f 	bl	8009744 <_Balloc>
 8009326:	4605      	mov	r5, r0
 8009328:	b928      	cbnz	r0, 8009336 <_dtoa_r+0x9d6>
 800932a:	4b83      	ldr	r3, [pc, #524]	; (8009538 <_dtoa_r+0xbd8>)
 800932c:	4602      	mov	r2, r0
 800932e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8009332:	f7ff bb2e 	b.w	8008992 <_dtoa_r+0x32>
 8009336:	693a      	ldr	r2, [r7, #16]
 8009338:	3202      	adds	r2, #2
 800933a:	0092      	lsls	r2, r2, #2
 800933c:	f107 010c 	add.w	r1, r7, #12
 8009340:	300c      	adds	r0, #12
 8009342:	f7ff fa76 	bl	8008832 <memcpy>
 8009346:	2201      	movs	r2, #1
 8009348:	4629      	mov	r1, r5
 800934a:	4620      	mov	r0, r4
 800934c:	f000 fc0a 	bl	8009b64 <__lshift>
 8009350:	9b00      	ldr	r3, [sp, #0]
 8009352:	3301      	adds	r3, #1
 8009354:	9304      	str	r3, [sp, #16]
 8009356:	e9dd 2300 	ldrd	r2, r3, [sp]
 800935a:	4413      	add	r3, r2
 800935c:	9308      	str	r3, [sp, #32]
 800935e:	9b02      	ldr	r3, [sp, #8]
 8009360:	f003 0301 	and.w	r3, r3, #1
 8009364:	46b8      	mov	r8, r7
 8009366:	9306      	str	r3, [sp, #24]
 8009368:	4607      	mov	r7, r0
 800936a:	9b04      	ldr	r3, [sp, #16]
 800936c:	4631      	mov	r1, r6
 800936e:	3b01      	subs	r3, #1
 8009370:	4650      	mov	r0, sl
 8009372:	9301      	str	r3, [sp, #4]
 8009374:	f7ff fa6b 	bl	800884e <quorem>
 8009378:	4641      	mov	r1, r8
 800937a:	9002      	str	r0, [sp, #8]
 800937c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009380:	4650      	mov	r0, sl
 8009382:	f000 fc5b 	bl	8009c3c <__mcmp>
 8009386:	463a      	mov	r2, r7
 8009388:	9005      	str	r0, [sp, #20]
 800938a:	4631      	mov	r1, r6
 800938c:	4620      	mov	r0, r4
 800938e:	f000 fc71 	bl	8009c74 <__mdiff>
 8009392:	68c2      	ldr	r2, [r0, #12]
 8009394:	4605      	mov	r5, r0
 8009396:	bb02      	cbnz	r2, 80093da <_dtoa_r+0xa7a>
 8009398:	4601      	mov	r1, r0
 800939a:	4650      	mov	r0, sl
 800939c:	f000 fc4e 	bl	8009c3c <__mcmp>
 80093a0:	4602      	mov	r2, r0
 80093a2:	4629      	mov	r1, r5
 80093a4:	4620      	mov	r0, r4
 80093a6:	9209      	str	r2, [sp, #36]	; 0x24
 80093a8:	f000 fa0c 	bl	80097c4 <_Bfree>
 80093ac:	9b07      	ldr	r3, [sp, #28]
 80093ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80093b0:	9d04      	ldr	r5, [sp, #16]
 80093b2:	ea43 0102 	orr.w	r1, r3, r2
 80093b6:	9b06      	ldr	r3, [sp, #24]
 80093b8:	4319      	orrs	r1, r3
 80093ba:	d110      	bne.n	80093de <_dtoa_r+0xa7e>
 80093bc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80093c0:	d029      	beq.n	8009416 <_dtoa_r+0xab6>
 80093c2:	9b05      	ldr	r3, [sp, #20]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	dd02      	ble.n	80093ce <_dtoa_r+0xa6e>
 80093c8:	9b02      	ldr	r3, [sp, #8]
 80093ca:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80093ce:	9b01      	ldr	r3, [sp, #4]
 80093d0:	f883 9000 	strb.w	r9, [r3]
 80093d4:	e774      	b.n	80092c0 <_dtoa_r+0x960>
 80093d6:	4638      	mov	r0, r7
 80093d8:	e7ba      	b.n	8009350 <_dtoa_r+0x9f0>
 80093da:	2201      	movs	r2, #1
 80093dc:	e7e1      	b.n	80093a2 <_dtoa_r+0xa42>
 80093de:	9b05      	ldr	r3, [sp, #20]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	db04      	blt.n	80093ee <_dtoa_r+0xa8e>
 80093e4:	9907      	ldr	r1, [sp, #28]
 80093e6:	430b      	orrs	r3, r1
 80093e8:	9906      	ldr	r1, [sp, #24]
 80093ea:	430b      	orrs	r3, r1
 80093ec:	d120      	bne.n	8009430 <_dtoa_r+0xad0>
 80093ee:	2a00      	cmp	r2, #0
 80093f0:	dded      	ble.n	80093ce <_dtoa_r+0xa6e>
 80093f2:	4651      	mov	r1, sl
 80093f4:	2201      	movs	r2, #1
 80093f6:	4620      	mov	r0, r4
 80093f8:	f000 fbb4 	bl	8009b64 <__lshift>
 80093fc:	4631      	mov	r1, r6
 80093fe:	4682      	mov	sl, r0
 8009400:	f000 fc1c 	bl	8009c3c <__mcmp>
 8009404:	2800      	cmp	r0, #0
 8009406:	dc03      	bgt.n	8009410 <_dtoa_r+0xab0>
 8009408:	d1e1      	bne.n	80093ce <_dtoa_r+0xa6e>
 800940a:	f019 0f01 	tst.w	r9, #1
 800940e:	d0de      	beq.n	80093ce <_dtoa_r+0xa6e>
 8009410:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009414:	d1d8      	bne.n	80093c8 <_dtoa_r+0xa68>
 8009416:	9a01      	ldr	r2, [sp, #4]
 8009418:	2339      	movs	r3, #57	; 0x39
 800941a:	7013      	strb	r3, [r2, #0]
 800941c:	462b      	mov	r3, r5
 800941e:	461d      	mov	r5, r3
 8009420:	3b01      	subs	r3, #1
 8009422:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009426:	2a39      	cmp	r2, #57	; 0x39
 8009428:	d06c      	beq.n	8009504 <_dtoa_r+0xba4>
 800942a:	3201      	adds	r2, #1
 800942c:	701a      	strb	r2, [r3, #0]
 800942e:	e747      	b.n	80092c0 <_dtoa_r+0x960>
 8009430:	2a00      	cmp	r2, #0
 8009432:	dd07      	ble.n	8009444 <_dtoa_r+0xae4>
 8009434:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009438:	d0ed      	beq.n	8009416 <_dtoa_r+0xab6>
 800943a:	9a01      	ldr	r2, [sp, #4]
 800943c:	f109 0301 	add.w	r3, r9, #1
 8009440:	7013      	strb	r3, [r2, #0]
 8009442:	e73d      	b.n	80092c0 <_dtoa_r+0x960>
 8009444:	9b04      	ldr	r3, [sp, #16]
 8009446:	9a08      	ldr	r2, [sp, #32]
 8009448:	f803 9c01 	strb.w	r9, [r3, #-1]
 800944c:	4293      	cmp	r3, r2
 800944e:	d043      	beq.n	80094d8 <_dtoa_r+0xb78>
 8009450:	4651      	mov	r1, sl
 8009452:	2300      	movs	r3, #0
 8009454:	220a      	movs	r2, #10
 8009456:	4620      	mov	r0, r4
 8009458:	f000 f9d6 	bl	8009808 <__multadd>
 800945c:	45b8      	cmp	r8, r7
 800945e:	4682      	mov	sl, r0
 8009460:	f04f 0300 	mov.w	r3, #0
 8009464:	f04f 020a 	mov.w	r2, #10
 8009468:	4641      	mov	r1, r8
 800946a:	4620      	mov	r0, r4
 800946c:	d107      	bne.n	800947e <_dtoa_r+0xb1e>
 800946e:	f000 f9cb 	bl	8009808 <__multadd>
 8009472:	4680      	mov	r8, r0
 8009474:	4607      	mov	r7, r0
 8009476:	9b04      	ldr	r3, [sp, #16]
 8009478:	3301      	adds	r3, #1
 800947a:	9304      	str	r3, [sp, #16]
 800947c:	e775      	b.n	800936a <_dtoa_r+0xa0a>
 800947e:	f000 f9c3 	bl	8009808 <__multadd>
 8009482:	4639      	mov	r1, r7
 8009484:	4680      	mov	r8, r0
 8009486:	2300      	movs	r3, #0
 8009488:	220a      	movs	r2, #10
 800948a:	4620      	mov	r0, r4
 800948c:	f000 f9bc 	bl	8009808 <__multadd>
 8009490:	4607      	mov	r7, r0
 8009492:	e7f0      	b.n	8009476 <_dtoa_r+0xb16>
 8009494:	9b04      	ldr	r3, [sp, #16]
 8009496:	9301      	str	r3, [sp, #4]
 8009498:	9d00      	ldr	r5, [sp, #0]
 800949a:	4631      	mov	r1, r6
 800949c:	4650      	mov	r0, sl
 800949e:	f7ff f9d6 	bl	800884e <quorem>
 80094a2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80094a6:	9b00      	ldr	r3, [sp, #0]
 80094a8:	f805 9b01 	strb.w	r9, [r5], #1
 80094ac:	1aea      	subs	r2, r5, r3
 80094ae:	9b01      	ldr	r3, [sp, #4]
 80094b0:	4293      	cmp	r3, r2
 80094b2:	dd07      	ble.n	80094c4 <_dtoa_r+0xb64>
 80094b4:	4651      	mov	r1, sl
 80094b6:	2300      	movs	r3, #0
 80094b8:	220a      	movs	r2, #10
 80094ba:	4620      	mov	r0, r4
 80094bc:	f000 f9a4 	bl	8009808 <__multadd>
 80094c0:	4682      	mov	sl, r0
 80094c2:	e7ea      	b.n	800949a <_dtoa_r+0xb3a>
 80094c4:	9b01      	ldr	r3, [sp, #4]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	bfc8      	it	gt
 80094ca:	461d      	movgt	r5, r3
 80094cc:	9b00      	ldr	r3, [sp, #0]
 80094ce:	bfd8      	it	le
 80094d0:	2501      	movle	r5, #1
 80094d2:	441d      	add	r5, r3
 80094d4:	f04f 0800 	mov.w	r8, #0
 80094d8:	4651      	mov	r1, sl
 80094da:	2201      	movs	r2, #1
 80094dc:	4620      	mov	r0, r4
 80094de:	f000 fb41 	bl	8009b64 <__lshift>
 80094e2:	4631      	mov	r1, r6
 80094e4:	4682      	mov	sl, r0
 80094e6:	f000 fba9 	bl	8009c3c <__mcmp>
 80094ea:	2800      	cmp	r0, #0
 80094ec:	dc96      	bgt.n	800941c <_dtoa_r+0xabc>
 80094ee:	d102      	bne.n	80094f6 <_dtoa_r+0xb96>
 80094f0:	f019 0f01 	tst.w	r9, #1
 80094f4:	d192      	bne.n	800941c <_dtoa_r+0xabc>
 80094f6:	462b      	mov	r3, r5
 80094f8:	461d      	mov	r5, r3
 80094fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80094fe:	2a30      	cmp	r2, #48	; 0x30
 8009500:	d0fa      	beq.n	80094f8 <_dtoa_r+0xb98>
 8009502:	e6dd      	b.n	80092c0 <_dtoa_r+0x960>
 8009504:	9a00      	ldr	r2, [sp, #0]
 8009506:	429a      	cmp	r2, r3
 8009508:	d189      	bne.n	800941e <_dtoa_r+0xabe>
 800950a:	f10b 0b01 	add.w	fp, fp, #1
 800950e:	2331      	movs	r3, #49	; 0x31
 8009510:	e796      	b.n	8009440 <_dtoa_r+0xae0>
 8009512:	4b0a      	ldr	r3, [pc, #40]	; (800953c <_dtoa_r+0xbdc>)
 8009514:	f7ff ba99 	b.w	8008a4a <_dtoa_r+0xea>
 8009518:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800951a:	2b00      	cmp	r3, #0
 800951c:	f47f aa6d 	bne.w	80089fa <_dtoa_r+0x9a>
 8009520:	4b07      	ldr	r3, [pc, #28]	; (8009540 <_dtoa_r+0xbe0>)
 8009522:	f7ff ba92 	b.w	8008a4a <_dtoa_r+0xea>
 8009526:	9b01      	ldr	r3, [sp, #4]
 8009528:	2b00      	cmp	r3, #0
 800952a:	dcb5      	bgt.n	8009498 <_dtoa_r+0xb38>
 800952c:	9b07      	ldr	r3, [sp, #28]
 800952e:	2b02      	cmp	r3, #2
 8009530:	f73f aeb1 	bgt.w	8009296 <_dtoa_r+0x936>
 8009534:	e7b0      	b.n	8009498 <_dtoa_r+0xb38>
 8009536:	bf00      	nop
 8009538:	0802be2c 	.word	0x0802be2c
 800953c:	0802bd8c 	.word	0x0802bd8c
 8009540:	0802bdb0 	.word	0x0802bdb0

08009544 <_free_r>:
 8009544:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009546:	2900      	cmp	r1, #0
 8009548:	d044      	beq.n	80095d4 <_free_r+0x90>
 800954a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800954e:	9001      	str	r0, [sp, #4]
 8009550:	2b00      	cmp	r3, #0
 8009552:	f1a1 0404 	sub.w	r4, r1, #4
 8009556:	bfb8      	it	lt
 8009558:	18e4      	addlt	r4, r4, r3
 800955a:	f000 f8e7 	bl	800972c <__malloc_lock>
 800955e:	4a1e      	ldr	r2, [pc, #120]	; (80095d8 <_free_r+0x94>)
 8009560:	9801      	ldr	r0, [sp, #4]
 8009562:	6813      	ldr	r3, [r2, #0]
 8009564:	b933      	cbnz	r3, 8009574 <_free_r+0x30>
 8009566:	6063      	str	r3, [r4, #4]
 8009568:	6014      	str	r4, [r2, #0]
 800956a:	b003      	add	sp, #12
 800956c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009570:	f000 b8e2 	b.w	8009738 <__malloc_unlock>
 8009574:	42a3      	cmp	r3, r4
 8009576:	d908      	bls.n	800958a <_free_r+0x46>
 8009578:	6825      	ldr	r5, [r4, #0]
 800957a:	1961      	adds	r1, r4, r5
 800957c:	428b      	cmp	r3, r1
 800957e:	bf01      	itttt	eq
 8009580:	6819      	ldreq	r1, [r3, #0]
 8009582:	685b      	ldreq	r3, [r3, #4]
 8009584:	1949      	addeq	r1, r1, r5
 8009586:	6021      	streq	r1, [r4, #0]
 8009588:	e7ed      	b.n	8009566 <_free_r+0x22>
 800958a:	461a      	mov	r2, r3
 800958c:	685b      	ldr	r3, [r3, #4]
 800958e:	b10b      	cbz	r3, 8009594 <_free_r+0x50>
 8009590:	42a3      	cmp	r3, r4
 8009592:	d9fa      	bls.n	800958a <_free_r+0x46>
 8009594:	6811      	ldr	r1, [r2, #0]
 8009596:	1855      	adds	r5, r2, r1
 8009598:	42a5      	cmp	r5, r4
 800959a:	d10b      	bne.n	80095b4 <_free_r+0x70>
 800959c:	6824      	ldr	r4, [r4, #0]
 800959e:	4421      	add	r1, r4
 80095a0:	1854      	adds	r4, r2, r1
 80095a2:	42a3      	cmp	r3, r4
 80095a4:	6011      	str	r1, [r2, #0]
 80095a6:	d1e0      	bne.n	800956a <_free_r+0x26>
 80095a8:	681c      	ldr	r4, [r3, #0]
 80095aa:	685b      	ldr	r3, [r3, #4]
 80095ac:	6053      	str	r3, [r2, #4]
 80095ae:	440c      	add	r4, r1
 80095b0:	6014      	str	r4, [r2, #0]
 80095b2:	e7da      	b.n	800956a <_free_r+0x26>
 80095b4:	d902      	bls.n	80095bc <_free_r+0x78>
 80095b6:	230c      	movs	r3, #12
 80095b8:	6003      	str	r3, [r0, #0]
 80095ba:	e7d6      	b.n	800956a <_free_r+0x26>
 80095bc:	6825      	ldr	r5, [r4, #0]
 80095be:	1961      	adds	r1, r4, r5
 80095c0:	428b      	cmp	r3, r1
 80095c2:	bf04      	itt	eq
 80095c4:	6819      	ldreq	r1, [r3, #0]
 80095c6:	685b      	ldreq	r3, [r3, #4]
 80095c8:	6063      	str	r3, [r4, #4]
 80095ca:	bf04      	itt	eq
 80095cc:	1949      	addeq	r1, r1, r5
 80095ce:	6021      	streq	r1, [r4, #0]
 80095d0:	6054      	str	r4, [r2, #4]
 80095d2:	e7ca      	b.n	800956a <_free_r+0x26>
 80095d4:	b003      	add	sp, #12
 80095d6:	bd30      	pop	{r4, r5, pc}
 80095d8:	200026dc 	.word	0x200026dc

080095dc <malloc>:
 80095dc:	4b02      	ldr	r3, [pc, #8]	; (80095e8 <malloc+0xc>)
 80095de:	4601      	mov	r1, r0
 80095e0:	6818      	ldr	r0, [r3, #0]
 80095e2:	f000 b823 	b.w	800962c <_malloc_r>
 80095e6:	bf00      	nop
 80095e8:	20000070 	.word	0x20000070

080095ec <sbrk_aligned>:
 80095ec:	b570      	push	{r4, r5, r6, lr}
 80095ee:	4e0e      	ldr	r6, [pc, #56]	; (8009628 <sbrk_aligned+0x3c>)
 80095f0:	460c      	mov	r4, r1
 80095f2:	6831      	ldr	r1, [r6, #0]
 80095f4:	4605      	mov	r5, r0
 80095f6:	b911      	cbnz	r1, 80095fe <sbrk_aligned+0x12>
 80095f8:	f001 f808 	bl	800a60c <_sbrk_r>
 80095fc:	6030      	str	r0, [r6, #0]
 80095fe:	4621      	mov	r1, r4
 8009600:	4628      	mov	r0, r5
 8009602:	f001 f803 	bl	800a60c <_sbrk_r>
 8009606:	1c43      	adds	r3, r0, #1
 8009608:	d00a      	beq.n	8009620 <sbrk_aligned+0x34>
 800960a:	1cc4      	adds	r4, r0, #3
 800960c:	f024 0403 	bic.w	r4, r4, #3
 8009610:	42a0      	cmp	r0, r4
 8009612:	d007      	beq.n	8009624 <sbrk_aligned+0x38>
 8009614:	1a21      	subs	r1, r4, r0
 8009616:	4628      	mov	r0, r5
 8009618:	f000 fff8 	bl	800a60c <_sbrk_r>
 800961c:	3001      	adds	r0, #1
 800961e:	d101      	bne.n	8009624 <sbrk_aligned+0x38>
 8009620:	f04f 34ff 	mov.w	r4, #4294967295
 8009624:	4620      	mov	r0, r4
 8009626:	bd70      	pop	{r4, r5, r6, pc}
 8009628:	200026e0 	.word	0x200026e0

0800962c <_malloc_r>:
 800962c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009630:	1ccd      	adds	r5, r1, #3
 8009632:	f025 0503 	bic.w	r5, r5, #3
 8009636:	3508      	adds	r5, #8
 8009638:	2d0c      	cmp	r5, #12
 800963a:	bf38      	it	cc
 800963c:	250c      	movcc	r5, #12
 800963e:	2d00      	cmp	r5, #0
 8009640:	4607      	mov	r7, r0
 8009642:	db01      	blt.n	8009648 <_malloc_r+0x1c>
 8009644:	42a9      	cmp	r1, r5
 8009646:	d905      	bls.n	8009654 <_malloc_r+0x28>
 8009648:	230c      	movs	r3, #12
 800964a:	603b      	str	r3, [r7, #0]
 800964c:	2600      	movs	r6, #0
 800964e:	4630      	mov	r0, r6
 8009650:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009654:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009728 <_malloc_r+0xfc>
 8009658:	f000 f868 	bl	800972c <__malloc_lock>
 800965c:	f8d8 3000 	ldr.w	r3, [r8]
 8009660:	461c      	mov	r4, r3
 8009662:	bb5c      	cbnz	r4, 80096bc <_malloc_r+0x90>
 8009664:	4629      	mov	r1, r5
 8009666:	4638      	mov	r0, r7
 8009668:	f7ff ffc0 	bl	80095ec <sbrk_aligned>
 800966c:	1c43      	adds	r3, r0, #1
 800966e:	4604      	mov	r4, r0
 8009670:	d155      	bne.n	800971e <_malloc_r+0xf2>
 8009672:	f8d8 4000 	ldr.w	r4, [r8]
 8009676:	4626      	mov	r6, r4
 8009678:	2e00      	cmp	r6, #0
 800967a:	d145      	bne.n	8009708 <_malloc_r+0xdc>
 800967c:	2c00      	cmp	r4, #0
 800967e:	d048      	beq.n	8009712 <_malloc_r+0xe6>
 8009680:	6823      	ldr	r3, [r4, #0]
 8009682:	4631      	mov	r1, r6
 8009684:	4638      	mov	r0, r7
 8009686:	eb04 0903 	add.w	r9, r4, r3
 800968a:	f000 ffbf 	bl	800a60c <_sbrk_r>
 800968e:	4581      	cmp	r9, r0
 8009690:	d13f      	bne.n	8009712 <_malloc_r+0xe6>
 8009692:	6821      	ldr	r1, [r4, #0]
 8009694:	1a6d      	subs	r5, r5, r1
 8009696:	4629      	mov	r1, r5
 8009698:	4638      	mov	r0, r7
 800969a:	f7ff ffa7 	bl	80095ec <sbrk_aligned>
 800969e:	3001      	adds	r0, #1
 80096a0:	d037      	beq.n	8009712 <_malloc_r+0xe6>
 80096a2:	6823      	ldr	r3, [r4, #0]
 80096a4:	442b      	add	r3, r5
 80096a6:	6023      	str	r3, [r4, #0]
 80096a8:	f8d8 3000 	ldr.w	r3, [r8]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d038      	beq.n	8009722 <_malloc_r+0xf6>
 80096b0:	685a      	ldr	r2, [r3, #4]
 80096b2:	42a2      	cmp	r2, r4
 80096b4:	d12b      	bne.n	800970e <_malloc_r+0xe2>
 80096b6:	2200      	movs	r2, #0
 80096b8:	605a      	str	r2, [r3, #4]
 80096ba:	e00f      	b.n	80096dc <_malloc_r+0xb0>
 80096bc:	6822      	ldr	r2, [r4, #0]
 80096be:	1b52      	subs	r2, r2, r5
 80096c0:	d41f      	bmi.n	8009702 <_malloc_r+0xd6>
 80096c2:	2a0b      	cmp	r2, #11
 80096c4:	d917      	bls.n	80096f6 <_malloc_r+0xca>
 80096c6:	1961      	adds	r1, r4, r5
 80096c8:	42a3      	cmp	r3, r4
 80096ca:	6025      	str	r5, [r4, #0]
 80096cc:	bf18      	it	ne
 80096ce:	6059      	strne	r1, [r3, #4]
 80096d0:	6863      	ldr	r3, [r4, #4]
 80096d2:	bf08      	it	eq
 80096d4:	f8c8 1000 	streq.w	r1, [r8]
 80096d8:	5162      	str	r2, [r4, r5]
 80096da:	604b      	str	r3, [r1, #4]
 80096dc:	4638      	mov	r0, r7
 80096de:	f104 060b 	add.w	r6, r4, #11
 80096e2:	f000 f829 	bl	8009738 <__malloc_unlock>
 80096e6:	f026 0607 	bic.w	r6, r6, #7
 80096ea:	1d23      	adds	r3, r4, #4
 80096ec:	1af2      	subs	r2, r6, r3
 80096ee:	d0ae      	beq.n	800964e <_malloc_r+0x22>
 80096f0:	1b9b      	subs	r3, r3, r6
 80096f2:	50a3      	str	r3, [r4, r2]
 80096f4:	e7ab      	b.n	800964e <_malloc_r+0x22>
 80096f6:	42a3      	cmp	r3, r4
 80096f8:	6862      	ldr	r2, [r4, #4]
 80096fa:	d1dd      	bne.n	80096b8 <_malloc_r+0x8c>
 80096fc:	f8c8 2000 	str.w	r2, [r8]
 8009700:	e7ec      	b.n	80096dc <_malloc_r+0xb0>
 8009702:	4623      	mov	r3, r4
 8009704:	6864      	ldr	r4, [r4, #4]
 8009706:	e7ac      	b.n	8009662 <_malloc_r+0x36>
 8009708:	4634      	mov	r4, r6
 800970a:	6876      	ldr	r6, [r6, #4]
 800970c:	e7b4      	b.n	8009678 <_malloc_r+0x4c>
 800970e:	4613      	mov	r3, r2
 8009710:	e7cc      	b.n	80096ac <_malloc_r+0x80>
 8009712:	230c      	movs	r3, #12
 8009714:	603b      	str	r3, [r7, #0]
 8009716:	4638      	mov	r0, r7
 8009718:	f000 f80e 	bl	8009738 <__malloc_unlock>
 800971c:	e797      	b.n	800964e <_malloc_r+0x22>
 800971e:	6025      	str	r5, [r4, #0]
 8009720:	e7dc      	b.n	80096dc <_malloc_r+0xb0>
 8009722:	605b      	str	r3, [r3, #4]
 8009724:	deff      	udf	#255	; 0xff
 8009726:	bf00      	nop
 8009728:	200026dc 	.word	0x200026dc

0800972c <__malloc_lock>:
 800972c:	4801      	ldr	r0, [pc, #4]	; (8009734 <__malloc_lock+0x8>)
 800972e:	f7ff b87e 	b.w	800882e <__retarget_lock_acquire_recursive>
 8009732:	bf00      	nop
 8009734:	200026d8 	.word	0x200026d8

08009738 <__malloc_unlock>:
 8009738:	4801      	ldr	r0, [pc, #4]	; (8009740 <__malloc_unlock+0x8>)
 800973a:	f7ff b879 	b.w	8008830 <__retarget_lock_release_recursive>
 800973e:	bf00      	nop
 8009740:	200026d8 	.word	0x200026d8

08009744 <_Balloc>:
 8009744:	b570      	push	{r4, r5, r6, lr}
 8009746:	69c6      	ldr	r6, [r0, #28]
 8009748:	4604      	mov	r4, r0
 800974a:	460d      	mov	r5, r1
 800974c:	b976      	cbnz	r6, 800976c <_Balloc+0x28>
 800974e:	2010      	movs	r0, #16
 8009750:	f7ff ff44 	bl	80095dc <malloc>
 8009754:	4602      	mov	r2, r0
 8009756:	61e0      	str	r0, [r4, #28]
 8009758:	b920      	cbnz	r0, 8009764 <_Balloc+0x20>
 800975a:	4b18      	ldr	r3, [pc, #96]	; (80097bc <_Balloc+0x78>)
 800975c:	4818      	ldr	r0, [pc, #96]	; (80097c0 <_Balloc+0x7c>)
 800975e:	216b      	movs	r1, #107	; 0x6b
 8009760:	f000 ff64 	bl	800a62c <__assert_func>
 8009764:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009768:	6006      	str	r6, [r0, #0]
 800976a:	60c6      	str	r6, [r0, #12]
 800976c:	69e6      	ldr	r6, [r4, #28]
 800976e:	68f3      	ldr	r3, [r6, #12]
 8009770:	b183      	cbz	r3, 8009794 <_Balloc+0x50>
 8009772:	69e3      	ldr	r3, [r4, #28]
 8009774:	68db      	ldr	r3, [r3, #12]
 8009776:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800977a:	b9b8      	cbnz	r0, 80097ac <_Balloc+0x68>
 800977c:	2101      	movs	r1, #1
 800977e:	fa01 f605 	lsl.w	r6, r1, r5
 8009782:	1d72      	adds	r2, r6, #5
 8009784:	0092      	lsls	r2, r2, #2
 8009786:	4620      	mov	r0, r4
 8009788:	f000 ff6e 	bl	800a668 <_calloc_r>
 800978c:	b160      	cbz	r0, 80097a8 <_Balloc+0x64>
 800978e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009792:	e00e      	b.n	80097b2 <_Balloc+0x6e>
 8009794:	2221      	movs	r2, #33	; 0x21
 8009796:	2104      	movs	r1, #4
 8009798:	4620      	mov	r0, r4
 800979a:	f000 ff65 	bl	800a668 <_calloc_r>
 800979e:	69e3      	ldr	r3, [r4, #28]
 80097a0:	60f0      	str	r0, [r6, #12]
 80097a2:	68db      	ldr	r3, [r3, #12]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d1e4      	bne.n	8009772 <_Balloc+0x2e>
 80097a8:	2000      	movs	r0, #0
 80097aa:	bd70      	pop	{r4, r5, r6, pc}
 80097ac:	6802      	ldr	r2, [r0, #0]
 80097ae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80097b2:	2300      	movs	r3, #0
 80097b4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80097b8:	e7f7      	b.n	80097aa <_Balloc+0x66>
 80097ba:	bf00      	nop
 80097bc:	0802bdbd 	.word	0x0802bdbd
 80097c0:	0802be3d 	.word	0x0802be3d

080097c4 <_Bfree>:
 80097c4:	b570      	push	{r4, r5, r6, lr}
 80097c6:	69c6      	ldr	r6, [r0, #28]
 80097c8:	4605      	mov	r5, r0
 80097ca:	460c      	mov	r4, r1
 80097cc:	b976      	cbnz	r6, 80097ec <_Bfree+0x28>
 80097ce:	2010      	movs	r0, #16
 80097d0:	f7ff ff04 	bl	80095dc <malloc>
 80097d4:	4602      	mov	r2, r0
 80097d6:	61e8      	str	r0, [r5, #28]
 80097d8:	b920      	cbnz	r0, 80097e4 <_Bfree+0x20>
 80097da:	4b09      	ldr	r3, [pc, #36]	; (8009800 <_Bfree+0x3c>)
 80097dc:	4809      	ldr	r0, [pc, #36]	; (8009804 <_Bfree+0x40>)
 80097de:	218f      	movs	r1, #143	; 0x8f
 80097e0:	f000 ff24 	bl	800a62c <__assert_func>
 80097e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80097e8:	6006      	str	r6, [r0, #0]
 80097ea:	60c6      	str	r6, [r0, #12]
 80097ec:	b13c      	cbz	r4, 80097fe <_Bfree+0x3a>
 80097ee:	69eb      	ldr	r3, [r5, #28]
 80097f0:	6862      	ldr	r2, [r4, #4]
 80097f2:	68db      	ldr	r3, [r3, #12]
 80097f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80097f8:	6021      	str	r1, [r4, #0]
 80097fa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80097fe:	bd70      	pop	{r4, r5, r6, pc}
 8009800:	0802bdbd 	.word	0x0802bdbd
 8009804:	0802be3d 	.word	0x0802be3d

08009808 <__multadd>:
 8009808:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800980c:	690d      	ldr	r5, [r1, #16]
 800980e:	4607      	mov	r7, r0
 8009810:	460c      	mov	r4, r1
 8009812:	461e      	mov	r6, r3
 8009814:	f101 0c14 	add.w	ip, r1, #20
 8009818:	2000      	movs	r0, #0
 800981a:	f8dc 3000 	ldr.w	r3, [ip]
 800981e:	b299      	uxth	r1, r3
 8009820:	fb02 6101 	mla	r1, r2, r1, r6
 8009824:	0c1e      	lsrs	r6, r3, #16
 8009826:	0c0b      	lsrs	r3, r1, #16
 8009828:	fb02 3306 	mla	r3, r2, r6, r3
 800982c:	b289      	uxth	r1, r1
 800982e:	3001      	adds	r0, #1
 8009830:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009834:	4285      	cmp	r5, r0
 8009836:	f84c 1b04 	str.w	r1, [ip], #4
 800983a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800983e:	dcec      	bgt.n	800981a <__multadd+0x12>
 8009840:	b30e      	cbz	r6, 8009886 <__multadd+0x7e>
 8009842:	68a3      	ldr	r3, [r4, #8]
 8009844:	42ab      	cmp	r3, r5
 8009846:	dc19      	bgt.n	800987c <__multadd+0x74>
 8009848:	6861      	ldr	r1, [r4, #4]
 800984a:	4638      	mov	r0, r7
 800984c:	3101      	adds	r1, #1
 800984e:	f7ff ff79 	bl	8009744 <_Balloc>
 8009852:	4680      	mov	r8, r0
 8009854:	b928      	cbnz	r0, 8009862 <__multadd+0x5a>
 8009856:	4602      	mov	r2, r0
 8009858:	4b0c      	ldr	r3, [pc, #48]	; (800988c <__multadd+0x84>)
 800985a:	480d      	ldr	r0, [pc, #52]	; (8009890 <__multadd+0x88>)
 800985c:	21ba      	movs	r1, #186	; 0xba
 800985e:	f000 fee5 	bl	800a62c <__assert_func>
 8009862:	6922      	ldr	r2, [r4, #16]
 8009864:	3202      	adds	r2, #2
 8009866:	f104 010c 	add.w	r1, r4, #12
 800986a:	0092      	lsls	r2, r2, #2
 800986c:	300c      	adds	r0, #12
 800986e:	f7fe ffe0 	bl	8008832 <memcpy>
 8009872:	4621      	mov	r1, r4
 8009874:	4638      	mov	r0, r7
 8009876:	f7ff ffa5 	bl	80097c4 <_Bfree>
 800987a:	4644      	mov	r4, r8
 800987c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009880:	3501      	adds	r5, #1
 8009882:	615e      	str	r6, [r3, #20]
 8009884:	6125      	str	r5, [r4, #16]
 8009886:	4620      	mov	r0, r4
 8009888:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800988c:	0802be2c 	.word	0x0802be2c
 8009890:	0802be3d 	.word	0x0802be3d

08009894 <__hi0bits>:
 8009894:	0c03      	lsrs	r3, r0, #16
 8009896:	041b      	lsls	r3, r3, #16
 8009898:	b9d3      	cbnz	r3, 80098d0 <__hi0bits+0x3c>
 800989a:	0400      	lsls	r0, r0, #16
 800989c:	2310      	movs	r3, #16
 800989e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80098a2:	bf04      	itt	eq
 80098a4:	0200      	lsleq	r0, r0, #8
 80098a6:	3308      	addeq	r3, #8
 80098a8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80098ac:	bf04      	itt	eq
 80098ae:	0100      	lsleq	r0, r0, #4
 80098b0:	3304      	addeq	r3, #4
 80098b2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80098b6:	bf04      	itt	eq
 80098b8:	0080      	lsleq	r0, r0, #2
 80098ba:	3302      	addeq	r3, #2
 80098bc:	2800      	cmp	r0, #0
 80098be:	db05      	blt.n	80098cc <__hi0bits+0x38>
 80098c0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80098c4:	f103 0301 	add.w	r3, r3, #1
 80098c8:	bf08      	it	eq
 80098ca:	2320      	moveq	r3, #32
 80098cc:	4618      	mov	r0, r3
 80098ce:	4770      	bx	lr
 80098d0:	2300      	movs	r3, #0
 80098d2:	e7e4      	b.n	800989e <__hi0bits+0xa>

080098d4 <__lo0bits>:
 80098d4:	6803      	ldr	r3, [r0, #0]
 80098d6:	f013 0207 	ands.w	r2, r3, #7
 80098da:	d00c      	beq.n	80098f6 <__lo0bits+0x22>
 80098dc:	07d9      	lsls	r1, r3, #31
 80098de:	d422      	bmi.n	8009926 <__lo0bits+0x52>
 80098e0:	079a      	lsls	r2, r3, #30
 80098e2:	bf49      	itett	mi
 80098e4:	085b      	lsrmi	r3, r3, #1
 80098e6:	089b      	lsrpl	r3, r3, #2
 80098e8:	6003      	strmi	r3, [r0, #0]
 80098ea:	2201      	movmi	r2, #1
 80098ec:	bf5c      	itt	pl
 80098ee:	6003      	strpl	r3, [r0, #0]
 80098f0:	2202      	movpl	r2, #2
 80098f2:	4610      	mov	r0, r2
 80098f4:	4770      	bx	lr
 80098f6:	b299      	uxth	r1, r3
 80098f8:	b909      	cbnz	r1, 80098fe <__lo0bits+0x2a>
 80098fa:	0c1b      	lsrs	r3, r3, #16
 80098fc:	2210      	movs	r2, #16
 80098fe:	b2d9      	uxtb	r1, r3
 8009900:	b909      	cbnz	r1, 8009906 <__lo0bits+0x32>
 8009902:	3208      	adds	r2, #8
 8009904:	0a1b      	lsrs	r3, r3, #8
 8009906:	0719      	lsls	r1, r3, #28
 8009908:	bf04      	itt	eq
 800990a:	091b      	lsreq	r3, r3, #4
 800990c:	3204      	addeq	r2, #4
 800990e:	0799      	lsls	r1, r3, #30
 8009910:	bf04      	itt	eq
 8009912:	089b      	lsreq	r3, r3, #2
 8009914:	3202      	addeq	r2, #2
 8009916:	07d9      	lsls	r1, r3, #31
 8009918:	d403      	bmi.n	8009922 <__lo0bits+0x4e>
 800991a:	085b      	lsrs	r3, r3, #1
 800991c:	f102 0201 	add.w	r2, r2, #1
 8009920:	d003      	beq.n	800992a <__lo0bits+0x56>
 8009922:	6003      	str	r3, [r0, #0]
 8009924:	e7e5      	b.n	80098f2 <__lo0bits+0x1e>
 8009926:	2200      	movs	r2, #0
 8009928:	e7e3      	b.n	80098f2 <__lo0bits+0x1e>
 800992a:	2220      	movs	r2, #32
 800992c:	e7e1      	b.n	80098f2 <__lo0bits+0x1e>
	...

08009930 <__i2b>:
 8009930:	b510      	push	{r4, lr}
 8009932:	460c      	mov	r4, r1
 8009934:	2101      	movs	r1, #1
 8009936:	f7ff ff05 	bl	8009744 <_Balloc>
 800993a:	4602      	mov	r2, r0
 800993c:	b928      	cbnz	r0, 800994a <__i2b+0x1a>
 800993e:	4b05      	ldr	r3, [pc, #20]	; (8009954 <__i2b+0x24>)
 8009940:	4805      	ldr	r0, [pc, #20]	; (8009958 <__i2b+0x28>)
 8009942:	f240 1145 	movw	r1, #325	; 0x145
 8009946:	f000 fe71 	bl	800a62c <__assert_func>
 800994a:	2301      	movs	r3, #1
 800994c:	6144      	str	r4, [r0, #20]
 800994e:	6103      	str	r3, [r0, #16]
 8009950:	bd10      	pop	{r4, pc}
 8009952:	bf00      	nop
 8009954:	0802be2c 	.word	0x0802be2c
 8009958:	0802be3d 	.word	0x0802be3d

0800995c <__multiply>:
 800995c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009960:	4691      	mov	r9, r2
 8009962:	690a      	ldr	r2, [r1, #16]
 8009964:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009968:	429a      	cmp	r2, r3
 800996a:	bfb8      	it	lt
 800996c:	460b      	movlt	r3, r1
 800996e:	460c      	mov	r4, r1
 8009970:	bfbc      	itt	lt
 8009972:	464c      	movlt	r4, r9
 8009974:	4699      	movlt	r9, r3
 8009976:	6927      	ldr	r7, [r4, #16]
 8009978:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800997c:	68a3      	ldr	r3, [r4, #8]
 800997e:	6861      	ldr	r1, [r4, #4]
 8009980:	eb07 060a 	add.w	r6, r7, sl
 8009984:	42b3      	cmp	r3, r6
 8009986:	b085      	sub	sp, #20
 8009988:	bfb8      	it	lt
 800998a:	3101      	addlt	r1, #1
 800998c:	f7ff feda 	bl	8009744 <_Balloc>
 8009990:	b930      	cbnz	r0, 80099a0 <__multiply+0x44>
 8009992:	4602      	mov	r2, r0
 8009994:	4b44      	ldr	r3, [pc, #272]	; (8009aa8 <__multiply+0x14c>)
 8009996:	4845      	ldr	r0, [pc, #276]	; (8009aac <__multiply+0x150>)
 8009998:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800999c:	f000 fe46 	bl	800a62c <__assert_func>
 80099a0:	f100 0514 	add.w	r5, r0, #20
 80099a4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80099a8:	462b      	mov	r3, r5
 80099aa:	2200      	movs	r2, #0
 80099ac:	4543      	cmp	r3, r8
 80099ae:	d321      	bcc.n	80099f4 <__multiply+0x98>
 80099b0:	f104 0314 	add.w	r3, r4, #20
 80099b4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80099b8:	f109 0314 	add.w	r3, r9, #20
 80099bc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80099c0:	9202      	str	r2, [sp, #8]
 80099c2:	1b3a      	subs	r2, r7, r4
 80099c4:	3a15      	subs	r2, #21
 80099c6:	f022 0203 	bic.w	r2, r2, #3
 80099ca:	3204      	adds	r2, #4
 80099cc:	f104 0115 	add.w	r1, r4, #21
 80099d0:	428f      	cmp	r7, r1
 80099d2:	bf38      	it	cc
 80099d4:	2204      	movcc	r2, #4
 80099d6:	9201      	str	r2, [sp, #4]
 80099d8:	9a02      	ldr	r2, [sp, #8]
 80099da:	9303      	str	r3, [sp, #12]
 80099dc:	429a      	cmp	r2, r3
 80099de:	d80c      	bhi.n	80099fa <__multiply+0x9e>
 80099e0:	2e00      	cmp	r6, #0
 80099e2:	dd03      	ble.n	80099ec <__multiply+0x90>
 80099e4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d05b      	beq.n	8009aa4 <__multiply+0x148>
 80099ec:	6106      	str	r6, [r0, #16]
 80099ee:	b005      	add	sp, #20
 80099f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099f4:	f843 2b04 	str.w	r2, [r3], #4
 80099f8:	e7d8      	b.n	80099ac <__multiply+0x50>
 80099fa:	f8b3 a000 	ldrh.w	sl, [r3]
 80099fe:	f1ba 0f00 	cmp.w	sl, #0
 8009a02:	d024      	beq.n	8009a4e <__multiply+0xf2>
 8009a04:	f104 0e14 	add.w	lr, r4, #20
 8009a08:	46a9      	mov	r9, r5
 8009a0a:	f04f 0c00 	mov.w	ip, #0
 8009a0e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009a12:	f8d9 1000 	ldr.w	r1, [r9]
 8009a16:	fa1f fb82 	uxth.w	fp, r2
 8009a1a:	b289      	uxth	r1, r1
 8009a1c:	fb0a 110b 	mla	r1, sl, fp, r1
 8009a20:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009a24:	f8d9 2000 	ldr.w	r2, [r9]
 8009a28:	4461      	add	r1, ip
 8009a2a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009a2e:	fb0a c20b 	mla	r2, sl, fp, ip
 8009a32:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009a36:	b289      	uxth	r1, r1
 8009a38:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009a3c:	4577      	cmp	r7, lr
 8009a3e:	f849 1b04 	str.w	r1, [r9], #4
 8009a42:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009a46:	d8e2      	bhi.n	8009a0e <__multiply+0xb2>
 8009a48:	9a01      	ldr	r2, [sp, #4]
 8009a4a:	f845 c002 	str.w	ip, [r5, r2]
 8009a4e:	9a03      	ldr	r2, [sp, #12]
 8009a50:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009a54:	3304      	adds	r3, #4
 8009a56:	f1b9 0f00 	cmp.w	r9, #0
 8009a5a:	d021      	beq.n	8009aa0 <__multiply+0x144>
 8009a5c:	6829      	ldr	r1, [r5, #0]
 8009a5e:	f104 0c14 	add.w	ip, r4, #20
 8009a62:	46ae      	mov	lr, r5
 8009a64:	f04f 0a00 	mov.w	sl, #0
 8009a68:	f8bc b000 	ldrh.w	fp, [ip]
 8009a6c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009a70:	fb09 220b 	mla	r2, r9, fp, r2
 8009a74:	4452      	add	r2, sl
 8009a76:	b289      	uxth	r1, r1
 8009a78:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009a7c:	f84e 1b04 	str.w	r1, [lr], #4
 8009a80:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009a84:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009a88:	f8be 1000 	ldrh.w	r1, [lr]
 8009a8c:	fb09 110a 	mla	r1, r9, sl, r1
 8009a90:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8009a94:	4567      	cmp	r7, ip
 8009a96:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009a9a:	d8e5      	bhi.n	8009a68 <__multiply+0x10c>
 8009a9c:	9a01      	ldr	r2, [sp, #4]
 8009a9e:	50a9      	str	r1, [r5, r2]
 8009aa0:	3504      	adds	r5, #4
 8009aa2:	e799      	b.n	80099d8 <__multiply+0x7c>
 8009aa4:	3e01      	subs	r6, #1
 8009aa6:	e79b      	b.n	80099e0 <__multiply+0x84>
 8009aa8:	0802be2c 	.word	0x0802be2c
 8009aac:	0802be3d 	.word	0x0802be3d

08009ab0 <__pow5mult>:
 8009ab0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ab4:	4615      	mov	r5, r2
 8009ab6:	f012 0203 	ands.w	r2, r2, #3
 8009aba:	4606      	mov	r6, r0
 8009abc:	460f      	mov	r7, r1
 8009abe:	d007      	beq.n	8009ad0 <__pow5mult+0x20>
 8009ac0:	4c25      	ldr	r4, [pc, #148]	; (8009b58 <__pow5mult+0xa8>)
 8009ac2:	3a01      	subs	r2, #1
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009aca:	f7ff fe9d 	bl	8009808 <__multadd>
 8009ace:	4607      	mov	r7, r0
 8009ad0:	10ad      	asrs	r5, r5, #2
 8009ad2:	d03d      	beq.n	8009b50 <__pow5mult+0xa0>
 8009ad4:	69f4      	ldr	r4, [r6, #28]
 8009ad6:	b97c      	cbnz	r4, 8009af8 <__pow5mult+0x48>
 8009ad8:	2010      	movs	r0, #16
 8009ada:	f7ff fd7f 	bl	80095dc <malloc>
 8009ade:	4602      	mov	r2, r0
 8009ae0:	61f0      	str	r0, [r6, #28]
 8009ae2:	b928      	cbnz	r0, 8009af0 <__pow5mult+0x40>
 8009ae4:	4b1d      	ldr	r3, [pc, #116]	; (8009b5c <__pow5mult+0xac>)
 8009ae6:	481e      	ldr	r0, [pc, #120]	; (8009b60 <__pow5mult+0xb0>)
 8009ae8:	f240 11b3 	movw	r1, #435	; 0x1b3
 8009aec:	f000 fd9e 	bl	800a62c <__assert_func>
 8009af0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009af4:	6004      	str	r4, [r0, #0]
 8009af6:	60c4      	str	r4, [r0, #12]
 8009af8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8009afc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009b00:	b94c      	cbnz	r4, 8009b16 <__pow5mult+0x66>
 8009b02:	f240 2171 	movw	r1, #625	; 0x271
 8009b06:	4630      	mov	r0, r6
 8009b08:	f7ff ff12 	bl	8009930 <__i2b>
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009b12:	4604      	mov	r4, r0
 8009b14:	6003      	str	r3, [r0, #0]
 8009b16:	f04f 0900 	mov.w	r9, #0
 8009b1a:	07eb      	lsls	r3, r5, #31
 8009b1c:	d50a      	bpl.n	8009b34 <__pow5mult+0x84>
 8009b1e:	4639      	mov	r1, r7
 8009b20:	4622      	mov	r2, r4
 8009b22:	4630      	mov	r0, r6
 8009b24:	f7ff ff1a 	bl	800995c <__multiply>
 8009b28:	4639      	mov	r1, r7
 8009b2a:	4680      	mov	r8, r0
 8009b2c:	4630      	mov	r0, r6
 8009b2e:	f7ff fe49 	bl	80097c4 <_Bfree>
 8009b32:	4647      	mov	r7, r8
 8009b34:	106d      	asrs	r5, r5, #1
 8009b36:	d00b      	beq.n	8009b50 <__pow5mult+0xa0>
 8009b38:	6820      	ldr	r0, [r4, #0]
 8009b3a:	b938      	cbnz	r0, 8009b4c <__pow5mult+0x9c>
 8009b3c:	4622      	mov	r2, r4
 8009b3e:	4621      	mov	r1, r4
 8009b40:	4630      	mov	r0, r6
 8009b42:	f7ff ff0b 	bl	800995c <__multiply>
 8009b46:	6020      	str	r0, [r4, #0]
 8009b48:	f8c0 9000 	str.w	r9, [r0]
 8009b4c:	4604      	mov	r4, r0
 8009b4e:	e7e4      	b.n	8009b1a <__pow5mult+0x6a>
 8009b50:	4638      	mov	r0, r7
 8009b52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b56:	bf00      	nop
 8009b58:	0802bf88 	.word	0x0802bf88
 8009b5c:	0802bdbd 	.word	0x0802bdbd
 8009b60:	0802be3d 	.word	0x0802be3d

08009b64 <__lshift>:
 8009b64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b68:	460c      	mov	r4, r1
 8009b6a:	6849      	ldr	r1, [r1, #4]
 8009b6c:	6923      	ldr	r3, [r4, #16]
 8009b6e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009b72:	68a3      	ldr	r3, [r4, #8]
 8009b74:	4607      	mov	r7, r0
 8009b76:	4691      	mov	r9, r2
 8009b78:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009b7c:	f108 0601 	add.w	r6, r8, #1
 8009b80:	42b3      	cmp	r3, r6
 8009b82:	db0b      	blt.n	8009b9c <__lshift+0x38>
 8009b84:	4638      	mov	r0, r7
 8009b86:	f7ff fddd 	bl	8009744 <_Balloc>
 8009b8a:	4605      	mov	r5, r0
 8009b8c:	b948      	cbnz	r0, 8009ba2 <__lshift+0x3e>
 8009b8e:	4602      	mov	r2, r0
 8009b90:	4b28      	ldr	r3, [pc, #160]	; (8009c34 <__lshift+0xd0>)
 8009b92:	4829      	ldr	r0, [pc, #164]	; (8009c38 <__lshift+0xd4>)
 8009b94:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8009b98:	f000 fd48 	bl	800a62c <__assert_func>
 8009b9c:	3101      	adds	r1, #1
 8009b9e:	005b      	lsls	r3, r3, #1
 8009ba0:	e7ee      	b.n	8009b80 <__lshift+0x1c>
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	f100 0114 	add.w	r1, r0, #20
 8009ba8:	f100 0210 	add.w	r2, r0, #16
 8009bac:	4618      	mov	r0, r3
 8009bae:	4553      	cmp	r3, sl
 8009bb0:	db33      	blt.n	8009c1a <__lshift+0xb6>
 8009bb2:	6920      	ldr	r0, [r4, #16]
 8009bb4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009bb8:	f104 0314 	add.w	r3, r4, #20
 8009bbc:	f019 091f 	ands.w	r9, r9, #31
 8009bc0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009bc4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009bc8:	d02b      	beq.n	8009c22 <__lshift+0xbe>
 8009bca:	f1c9 0e20 	rsb	lr, r9, #32
 8009bce:	468a      	mov	sl, r1
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	6818      	ldr	r0, [r3, #0]
 8009bd4:	fa00 f009 	lsl.w	r0, r0, r9
 8009bd8:	4310      	orrs	r0, r2
 8009bda:	f84a 0b04 	str.w	r0, [sl], #4
 8009bde:	f853 2b04 	ldr.w	r2, [r3], #4
 8009be2:	459c      	cmp	ip, r3
 8009be4:	fa22 f20e 	lsr.w	r2, r2, lr
 8009be8:	d8f3      	bhi.n	8009bd2 <__lshift+0x6e>
 8009bea:	ebac 0304 	sub.w	r3, ip, r4
 8009bee:	3b15      	subs	r3, #21
 8009bf0:	f023 0303 	bic.w	r3, r3, #3
 8009bf4:	3304      	adds	r3, #4
 8009bf6:	f104 0015 	add.w	r0, r4, #21
 8009bfa:	4584      	cmp	ip, r0
 8009bfc:	bf38      	it	cc
 8009bfe:	2304      	movcc	r3, #4
 8009c00:	50ca      	str	r2, [r1, r3]
 8009c02:	b10a      	cbz	r2, 8009c08 <__lshift+0xa4>
 8009c04:	f108 0602 	add.w	r6, r8, #2
 8009c08:	3e01      	subs	r6, #1
 8009c0a:	4638      	mov	r0, r7
 8009c0c:	612e      	str	r6, [r5, #16]
 8009c0e:	4621      	mov	r1, r4
 8009c10:	f7ff fdd8 	bl	80097c4 <_Bfree>
 8009c14:	4628      	mov	r0, r5
 8009c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c1a:	f842 0f04 	str.w	r0, [r2, #4]!
 8009c1e:	3301      	adds	r3, #1
 8009c20:	e7c5      	b.n	8009bae <__lshift+0x4a>
 8009c22:	3904      	subs	r1, #4
 8009c24:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c28:	f841 2f04 	str.w	r2, [r1, #4]!
 8009c2c:	459c      	cmp	ip, r3
 8009c2e:	d8f9      	bhi.n	8009c24 <__lshift+0xc0>
 8009c30:	e7ea      	b.n	8009c08 <__lshift+0xa4>
 8009c32:	bf00      	nop
 8009c34:	0802be2c 	.word	0x0802be2c
 8009c38:	0802be3d 	.word	0x0802be3d

08009c3c <__mcmp>:
 8009c3c:	b530      	push	{r4, r5, lr}
 8009c3e:	6902      	ldr	r2, [r0, #16]
 8009c40:	690c      	ldr	r4, [r1, #16]
 8009c42:	1b12      	subs	r2, r2, r4
 8009c44:	d10e      	bne.n	8009c64 <__mcmp+0x28>
 8009c46:	f100 0314 	add.w	r3, r0, #20
 8009c4a:	3114      	adds	r1, #20
 8009c4c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009c50:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009c54:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009c58:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009c5c:	42a5      	cmp	r5, r4
 8009c5e:	d003      	beq.n	8009c68 <__mcmp+0x2c>
 8009c60:	d305      	bcc.n	8009c6e <__mcmp+0x32>
 8009c62:	2201      	movs	r2, #1
 8009c64:	4610      	mov	r0, r2
 8009c66:	bd30      	pop	{r4, r5, pc}
 8009c68:	4283      	cmp	r3, r0
 8009c6a:	d3f3      	bcc.n	8009c54 <__mcmp+0x18>
 8009c6c:	e7fa      	b.n	8009c64 <__mcmp+0x28>
 8009c6e:	f04f 32ff 	mov.w	r2, #4294967295
 8009c72:	e7f7      	b.n	8009c64 <__mcmp+0x28>

08009c74 <__mdiff>:
 8009c74:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c78:	460c      	mov	r4, r1
 8009c7a:	4606      	mov	r6, r0
 8009c7c:	4611      	mov	r1, r2
 8009c7e:	4620      	mov	r0, r4
 8009c80:	4690      	mov	r8, r2
 8009c82:	f7ff ffdb 	bl	8009c3c <__mcmp>
 8009c86:	1e05      	subs	r5, r0, #0
 8009c88:	d110      	bne.n	8009cac <__mdiff+0x38>
 8009c8a:	4629      	mov	r1, r5
 8009c8c:	4630      	mov	r0, r6
 8009c8e:	f7ff fd59 	bl	8009744 <_Balloc>
 8009c92:	b930      	cbnz	r0, 8009ca2 <__mdiff+0x2e>
 8009c94:	4b3a      	ldr	r3, [pc, #232]	; (8009d80 <__mdiff+0x10c>)
 8009c96:	4602      	mov	r2, r0
 8009c98:	f240 2137 	movw	r1, #567	; 0x237
 8009c9c:	4839      	ldr	r0, [pc, #228]	; (8009d84 <__mdiff+0x110>)
 8009c9e:	f000 fcc5 	bl	800a62c <__assert_func>
 8009ca2:	2301      	movs	r3, #1
 8009ca4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009ca8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cac:	bfa4      	itt	ge
 8009cae:	4643      	movge	r3, r8
 8009cb0:	46a0      	movge	r8, r4
 8009cb2:	4630      	mov	r0, r6
 8009cb4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009cb8:	bfa6      	itte	ge
 8009cba:	461c      	movge	r4, r3
 8009cbc:	2500      	movge	r5, #0
 8009cbe:	2501      	movlt	r5, #1
 8009cc0:	f7ff fd40 	bl	8009744 <_Balloc>
 8009cc4:	b920      	cbnz	r0, 8009cd0 <__mdiff+0x5c>
 8009cc6:	4b2e      	ldr	r3, [pc, #184]	; (8009d80 <__mdiff+0x10c>)
 8009cc8:	4602      	mov	r2, r0
 8009cca:	f240 2145 	movw	r1, #581	; 0x245
 8009cce:	e7e5      	b.n	8009c9c <__mdiff+0x28>
 8009cd0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009cd4:	6926      	ldr	r6, [r4, #16]
 8009cd6:	60c5      	str	r5, [r0, #12]
 8009cd8:	f104 0914 	add.w	r9, r4, #20
 8009cdc:	f108 0514 	add.w	r5, r8, #20
 8009ce0:	f100 0e14 	add.w	lr, r0, #20
 8009ce4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009ce8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009cec:	f108 0210 	add.w	r2, r8, #16
 8009cf0:	46f2      	mov	sl, lr
 8009cf2:	2100      	movs	r1, #0
 8009cf4:	f859 3b04 	ldr.w	r3, [r9], #4
 8009cf8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009cfc:	fa11 f88b 	uxtah	r8, r1, fp
 8009d00:	b299      	uxth	r1, r3
 8009d02:	0c1b      	lsrs	r3, r3, #16
 8009d04:	eba8 0801 	sub.w	r8, r8, r1
 8009d08:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009d0c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009d10:	fa1f f888 	uxth.w	r8, r8
 8009d14:	1419      	asrs	r1, r3, #16
 8009d16:	454e      	cmp	r6, r9
 8009d18:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009d1c:	f84a 3b04 	str.w	r3, [sl], #4
 8009d20:	d8e8      	bhi.n	8009cf4 <__mdiff+0x80>
 8009d22:	1b33      	subs	r3, r6, r4
 8009d24:	3b15      	subs	r3, #21
 8009d26:	f023 0303 	bic.w	r3, r3, #3
 8009d2a:	3304      	adds	r3, #4
 8009d2c:	3415      	adds	r4, #21
 8009d2e:	42a6      	cmp	r6, r4
 8009d30:	bf38      	it	cc
 8009d32:	2304      	movcc	r3, #4
 8009d34:	441d      	add	r5, r3
 8009d36:	4473      	add	r3, lr
 8009d38:	469e      	mov	lr, r3
 8009d3a:	462e      	mov	r6, r5
 8009d3c:	4566      	cmp	r6, ip
 8009d3e:	d30e      	bcc.n	8009d5e <__mdiff+0xea>
 8009d40:	f10c 0203 	add.w	r2, ip, #3
 8009d44:	1b52      	subs	r2, r2, r5
 8009d46:	f022 0203 	bic.w	r2, r2, #3
 8009d4a:	3d03      	subs	r5, #3
 8009d4c:	45ac      	cmp	ip, r5
 8009d4e:	bf38      	it	cc
 8009d50:	2200      	movcc	r2, #0
 8009d52:	4413      	add	r3, r2
 8009d54:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009d58:	b17a      	cbz	r2, 8009d7a <__mdiff+0x106>
 8009d5a:	6107      	str	r7, [r0, #16]
 8009d5c:	e7a4      	b.n	8009ca8 <__mdiff+0x34>
 8009d5e:	f856 8b04 	ldr.w	r8, [r6], #4
 8009d62:	fa11 f288 	uxtah	r2, r1, r8
 8009d66:	1414      	asrs	r4, r2, #16
 8009d68:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009d6c:	b292      	uxth	r2, r2
 8009d6e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009d72:	f84e 2b04 	str.w	r2, [lr], #4
 8009d76:	1421      	asrs	r1, r4, #16
 8009d78:	e7e0      	b.n	8009d3c <__mdiff+0xc8>
 8009d7a:	3f01      	subs	r7, #1
 8009d7c:	e7ea      	b.n	8009d54 <__mdiff+0xe0>
 8009d7e:	bf00      	nop
 8009d80:	0802be2c 	.word	0x0802be2c
 8009d84:	0802be3d 	.word	0x0802be3d

08009d88 <__d2b>:
 8009d88:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009d8c:	460f      	mov	r7, r1
 8009d8e:	2101      	movs	r1, #1
 8009d90:	ec59 8b10 	vmov	r8, r9, d0
 8009d94:	4616      	mov	r6, r2
 8009d96:	f7ff fcd5 	bl	8009744 <_Balloc>
 8009d9a:	4604      	mov	r4, r0
 8009d9c:	b930      	cbnz	r0, 8009dac <__d2b+0x24>
 8009d9e:	4602      	mov	r2, r0
 8009da0:	4b24      	ldr	r3, [pc, #144]	; (8009e34 <__d2b+0xac>)
 8009da2:	4825      	ldr	r0, [pc, #148]	; (8009e38 <__d2b+0xb0>)
 8009da4:	f240 310f 	movw	r1, #783	; 0x30f
 8009da8:	f000 fc40 	bl	800a62c <__assert_func>
 8009dac:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009db0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009db4:	bb2d      	cbnz	r5, 8009e02 <__d2b+0x7a>
 8009db6:	9301      	str	r3, [sp, #4]
 8009db8:	f1b8 0300 	subs.w	r3, r8, #0
 8009dbc:	d026      	beq.n	8009e0c <__d2b+0x84>
 8009dbe:	4668      	mov	r0, sp
 8009dc0:	9300      	str	r3, [sp, #0]
 8009dc2:	f7ff fd87 	bl	80098d4 <__lo0bits>
 8009dc6:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009dca:	b1e8      	cbz	r0, 8009e08 <__d2b+0x80>
 8009dcc:	f1c0 0320 	rsb	r3, r0, #32
 8009dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8009dd4:	430b      	orrs	r3, r1
 8009dd6:	40c2      	lsrs	r2, r0
 8009dd8:	6163      	str	r3, [r4, #20]
 8009dda:	9201      	str	r2, [sp, #4]
 8009ddc:	9b01      	ldr	r3, [sp, #4]
 8009dde:	61a3      	str	r3, [r4, #24]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	bf14      	ite	ne
 8009de4:	2202      	movne	r2, #2
 8009de6:	2201      	moveq	r2, #1
 8009de8:	6122      	str	r2, [r4, #16]
 8009dea:	b1bd      	cbz	r5, 8009e1c <__d2b+0x94>
 8009dec:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009df0:	4405      	add	r5, r0
 8009df2:	603d      	str	r5, [r7, #0]
 8009df4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009df8:	6030      	str	r0, [r6, #0]
 8009dfa:	4620      	mov	r0, r4
 8009dfc:	b003      	add	sp, #12
 8009dfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009e02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009e06:	e7d6      	b.n	8009db6 <__d2b+0x2e>
 8009e08:	6161      	str	r1, [r4, #20]
 8009e0a:	e7e7      	b.n	8009ddc <__d2b+0x54>
 8009e0c:	a801      	add	r0, sp, #4
 8009e0e:	f7ff fd61 	bl	80098d4 <__lo0bits>
 8009e12:	9b01      	ldr	r3, [sp, #4]
 8009e14:	6163      	str	r3, [r4, #20]
 8009e16:	3020      	adds	r0, #32
 8009e18:	2201      	movs	r2, #1
 8009e1a:	e7e5      	b.n	8009de8 <__d2b+0x60>
 8009e1c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009e20:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009e24:	6038      	str	r0, [r7, #0]
 8009e26:	6918      	ldr	r0, [r3, #16]
 8009e28:	f7ff fd34 	bl	8009894 <__hi0bits>
 8009e2c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009e30:	e7e2      	b.n	8009df8 <__d2b+0x70>
 8009e32:	bf00      	nop
 8009e34:	0802be2c 	.word	0x0802be2c
 8009e38:	0802be3d 	.word	0x0802be3d

08009e3c <__ssputs_r>:
 8009e3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e40:	688e      	ldr	r6, [r1, #8]
 8009e42:	461f      	mov	r7, r3
 8009e44:	42be      	cmp	r6, r7
 8009e46:	680b      	ldr	r3, [r1, #0]
 8009e48:	4682      	mov	sl, r0
 8009e4a:	460c      	mov	r4, r1
 8009e4c:	4690      	mov	r8, r2
 8009e4e:	d82c      	bhi.n	8009eaa <__ssputs_r+0x6e>
 8009e50:	898a      	ldrh	r2, [r1, #12]
 8009e52:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009e56:	d026      	beq.n	8009ea6 <__ssputs_r+0x6a>
 8009e58:	6965      	ldr	r5, [r4, #20]
 8009e5a:	6909      	ldr	r1, [r1, #16]
 8009e5c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009e60:	eba3 0901 	sub.w	r9, r3, r1
 8009e64:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009e68:	1c7b      	adds	r3, r7, #1
 8009e6a:	444b      	add	r3, r9
 8009e6c:	106d      	asrs	r5, r5, #1
 8009e6e:	429d      	cmp	r5, r3
 8009e70:	bf38      	it	cc
 8009e72:	461d      	movcc	r5, r3
 8009e74:	0553      	lsls	r3, r2, #21
 8009e76:	d527      	bpl.n	8009ec8 <__ssputs_r+0x8c>
 8009e78:	4629      	mov	r1, r5
 8009e7a:	f7ff fbd7 	bl	800962c <_malloc_r>
 8009e7e:	4606      	mov	r6, r0
 8009e80:	b360      	cbz	r0, 8009edc <__ssputs_r+0xa0>
 8009e82:	6921      	ldr	r1, [r4, #16]
 8009e84:	464a      	mov	r2, r9
 8009e86:	f7fe fcd4 	bl	8008832 <memcpy>
 8009e8a:	89a3      	ldrh	r3, [r4, #12]
 8009e8c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009e90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e94:	81a3      	strh	r3, [r4, #12]
 8009e96:	6126      	str	r6, [r4, #16]
 8009e98:	6165      	str	r5, [r4, #20]
 8009e9a:	444e      	add	r6, r9
 8009e9c:	eba5 0509 	sub.w	r5, r5, r9
 8009ea0:	6026      	str	r6, [r4, #0]
 8009ea2:	60a5      	str	r5, [r4, #8]
 8009ea4:	463e      	mov	r6, r7
 8009ea6:	42be      	cmp	r6, r7
 8009ea8:	d900      	bls.n	8009eac <__ssputs_r+0x70>
 8009eaa:	463e      	mov	r6, r7
 8009eac:	6820      	ldr	r0, [r4, #0]
 8009eae:	4632      	mov	r2, r6
 8009eb0:	4641      	mov	r1, r8
 8009eb2:	f000 fb6f 	bl	800a594 <memmove>
 8009eb6:	68a3      	ldr	r3, [r4, #8]
 8009eb8:	1b9b      	subs	r3, r3, r6
 8009eba:	60a3      	str	r3, [r4, #8]
 8009ebc:	6823      	ldr	r3, [r4, #0]
 8009ebe:	4433      	add	r3, r6
 8009ec0:	6023      	str	r3, [r4, #0]
 8009ec2:	2000      	movs	r0, #0
 8009ec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ec8:	462a      	mov	r2, r5
 8009eca:	f000 fbf5 	bl	800a6b8 <_realloc_r>
 8009ece:	4606      	mov	r6, r0
 8009ed0:	2800      	cmp	r0, #0
 8009ed2:	d1e0      	bne.n	8009e96 <__ssputs_r+0x5a>
 8009ed4:	6921      	ldr	r1, [r4, #16]
 8009ed6:	4650      	mov	r0, sl
 8009ed8:	f7ff fb34 	bl	8009544 <_free_r>
 8009edc:	230c      	movs	r3, #12
 8009ede:	f8ca 3000 	str.w	r3, [sl]
 8009ee2:	89a3      	ldrh	r3, [r4, #12]
 8009ee4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ee8:	81a3      	strh	r3, [r4, #12]
 8009eea:	f04f 30ff 	mov.w	r0, #4294967295
 8009eee:	e7e9      	b.n	8009ec4 <__ssputs_r+0x88>

08009ef0 <_svfiprintf_r>:
 8009ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ef4:	4698      	mov	r8, r3
 8009ef6:	898b      	ldrh	r3, [r1, #12]
 8009ef8:	061b      	lsls	r3, r3, #24
 8009efa:	b09d      	sub	sp, #116	; 0x74
 8009efc:	4607      	mov	r7, r0
 8009efe:	460d      	mov	r5, r1
 8009f00:	4614      	mov	r4, r2
 8009f02:	d50e      	bpl.n	8009f22 <_svfiprintf_r+0x32>
 8009f04:	690b      	ldr	r3, [r1, #16]
 8009f06:	b963      	cbnz	r3, 8009f22 <_svfiprintf_r+0x32>
 8009f08:	2140      	movs	r1, #64	; 0x40
 8009f0a:	f7ff fb8f 	bl	800962c <_malloc_r>
 8009f0e:	6028      	str	r0, [r5, #0]
 8009f10:	6128      	str	r0, [r5, #16]
 8009f12:	b920      	cbnz	r0, 8009f1e <_svfiprintf_r+0x2e>
 8009f14:	230c      	movs	r3, #12
 8009f16:	603b      	str	r3, [r7, #0]
 8009f18:	f04f 30ff 	mov.w	r0, #4294967295
 8009f1c:	e0d0      	b.n	800a0c0 <_svfiprintf_r+0x1d0>
 8009f1e:	2340      	movs	r3, #64	; 0x40
 8009f20:	616b      	str	r3, [r5, #20]
 8009f22:	2300      	movs	r3, #0
 8009f24:	9309      	str	r3, [sp, #36]	; 0x24
 8009f26:	2320      	movs	r3, #32
 8009f28:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009f2c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009f30:	2330      	movs	r3, #48	; 0x30
 8009f32:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a0d8 <_svfiprintf_r+0x1e8>
 8009f36:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009f3a:	f04f 0901 	mov.w	r9, #1
 8009f3e:	4623      	mov	r3, r4
 8009f40:	469a      	mov	sl, r3
 8009f42:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f46:	b10a      	cbz	r2, 8009f4c <_svfiprintf_r+0x5c>
 8009f48:	2a25      	cmp	r2, #37	; 0x25
 8009f4a:	d1f9      	bne.n	8009f40 <_svfiprintf_r+0x50>
 8009f4c:	ebba 0b04 	subs.w	fp, sl, r4
 8009f50:	d00b      	beq.n	8009f6a <_svfiprintf_r+0x7a>
 8009f52:	465b      	mov	r3, fp
 8009f54:	4622      	mov	r2, r4
 8009f56:	4629      	mov	r1, r5
 8009f58:	4638      	mov	r0, r7
 8009f5a:	f7ff ff6f 	bl	8009e3c <__ssputs_r>
 8009f5e:	3001      	adds	r0, #1
 8009f60:	f000 80a9 	beq.w	800a0b6 <_svfiprintf_r+0x1c6>
 8009f64:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f66:	445a      	add	r2, fp
 8009f68:	9209      	str	r2, [sp, #36]	; 0x24
 8009f6a:	f89a 3000 	ldrb.w	r3, [sl]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	f000 80a1 	beq.w	800a0b6 <_svfiprintf_r+0x1c6>
 8009f74:	2300      	movs	r3, #0
 8009f76:	f04f 32ff 	mov.w	r2, #4294967295
 8009f7a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009f7e:	f10a 0a01 	add.w	sl, sl, #1
 8009f82:	9304      	str	r3, [sp, #16]
 8009f84:	9307      	str	r3, [sp, #28]
 8009f86:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009f8a:	931a      	str	r3, [sp, #104]	; 0x68
 8009f8c:	4654      	mov	r4, sl
 8009f8e:	2205      	movs	r2, #5
 8009f90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f94:	4850      	ldr	r0, [pc, #320]	; (800a0d8 <_svfiprintf_r+0x1e8>)
 8009f96:	f7f6 f91b 	bl	80001d0 <memchr>
 8009f9a:	9a04      	ldr	r2, [sp, #16]
 8009f9c:	b9d8      	cbnz	r0, 8009fd6 <_svfiprintf_r+0xe6>
 8009f9e:	06d0      	lsls	r0, r2, #27
 8009fa0:	bf44      	itt	mi
 8009fa2:	2320      	movmi	r3, #32
 8009fa4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009fa8:	0711      	lsls	r1, r2, #28
 8009faa:	bf44      	itt	mi
 8009fac:	232b      	movmi	r3, #43	; 0x2b
 8009fae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009fb2:	f89a 3000 	ldrb.w	r3, [sl]
 8009fb6:	2b2a      	cmp	r3, #42	; 0x2a
 8009fb8:	d015      	beq.n	8009fe6 <_svfiprintf_r+0xf6>
 8009fba:	9a07      	ldr	r2, [sp, #28]
 8009fbc:	4654      	mov	r4, sl
 8009fbe:	2000      	movs	r0, #0
 8009fc0:	f04f 0c0a 	mov.w	ip, #10
 8009fc4:	4621      	mov	r1, r4
 8009fc6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009fca:	3b30      	subs	r3, #48	; 0x30
 8009fcc:	2b09      	cmp	r3, #9
 8009fce:	d94d      	bls.n	800a06c <_svfiprintf_r+0x17c>
 8009fd0:	b1b0      	cbz	r0, 800a000 <_svfiprintf_r+0x110>
 8009fd2:	9207      	str	r2, [sp, #28]
 8009fd4:	e014      	b.n	800a000 <_svfiprintf_r+0x110>
 8009fd6:	eba0 0308 	sub.w	r3, r0, r8
 8009fda:	fa09 f303 	lsl.w	r3, r9, r3
 8009fde:	4313      	orrs	r3, r2
 8009fe0:	9304      	str	r3, [sp, #16]
 8009fe2:	46a2      	mov	sl, r4
 8009fe4:	e7d2      	b.n	8009f8c <_svfiprintf_r+0x9c>
 8009fe6:	9b03      	ldr	r3, [sp, #12]
 8009fe8:	1d19      	adds	r1, r3, #4
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	9103      	str	r1, [sp, #12]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	bfbb      	ittet	lt
 8009ff2:	425b      	neglt	r3, r3
 8009ff4:	f042 0202 	orrlt.w	r2, r2, #2
 8009ff8:	9307      	strge	r3, [sp, #28]
 8009ffa:	9307      	strlt	r3, [sp, #28]
 8009ffc:	bfb8      	it	lt
 8009ffe:	9204      	strlt	r2, [sp, #16]
 800a000:	7823      	ldrb	r3, [r4, #0]
 800a002:	2b2e      	cmp	r3, #46	; 0x2e
 800a004:	d10c      	bne.n	800a020 <_svfiprintf_r+0x130>
 800a006:	7863      	ldrb	r3, [r4, #1]
 800a008:	2b2a      	cmp	r3, #42	; 0x2a
 800a00a:	d134      	bne.n	800a076 <_svfiprintf_r+0x186>
 800a00c:	9b03      	ldr	r3, [sp, #12]
 800a00e:	1d1a      	adds	r2, r3, #4
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	9203      	str	r2, [sp, #12]
 800a014:	2b00      	cmp	r3, #0
 800a016:	bfb8      	it	lt
 800a018:	f04f 33ff 	movlt.w	r3, #4294967295
 800a01c:	3402      	adds	r4, #2
 800a01e:	9305      	str	r3, [sp, #20]
 800a020:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800a0e8 <_svfiprintf_r+0x1f8>
 800a024:	7821      	ldrb	r1, [r4, #0]
 800a026:	2203      	movs	r2, #3
 800a028:	4650      	mov	r0, sl
 800a02a:	f7f6 f8d1 	bl	80001d0 <memchr>
 800a02e:	b138      	cbz	r0, 800a040 <_svfiprintf_r+0x150>
 800a030:	9b04      	ldr	r3, [sp, #16]
 800a032:	eba0 000a 	sub.w	r0, r0, sl
 800a036:	2240      	movs	r2, #64	; 0x40
 800a038:	4082      	lsls	r2, r0
 800a03a:	4313      	orrs	r3, r2
 800a03c:	3401      	adds	r4, #1
 800a03e:	9304      	str	r3, [sp, #16]
 800a040:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a044:	4825      	ldr	r0, [pc, #148]	; (800a0dc <_svfiprintf_r+0x1ec>)
 800a046:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a04a:	2206      	movs	r2, #6
 800a04c:	f7f6 f8c0 	bl	80001d0 <memchr>
 800a050:	2800      	cmp	r0, #0
 800a052:	d038      	beq.n	800a0c6 <_svfiprintf_r+0x1d6>
 800a054:	4b22      	ldr	r3, [pc, #136]	; (800a0e0 <_svfiprintf_r+0x1f0>)
 800a056:	bb1b      	cbnz	r3, 800a0a0 <_svfiprintf_r+0x1b0>
 800a058:	9b03      	ldr	r3, [sp, #12]
 800a05a:	3307      	adds	r3, #7
 800a05c:	f023 0307 	bic.w	r3, r3, #7
 800a060:	3308      	adds	r3, #8
 800a062:	9303      	str	r3, [sp, #12]
 800a064:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a066:	4433      	add	r3, r6
 800a068:	9309      	str	r3, [sp, #36]	; 0x24
 800a06a:	e768      	b.n	8009f3e <_svfiprintf_r+0x4e>
 800a06c:	fb0c 3202 	mla	r2, ip, r2, r3
 800a070:	460c      	mov	r4, r1
 800a072:	2001      	movs	r0, #1
 800a074:	e7a6      	b.n	8009fc4 <_svfiprintf_r+0xd4>
 800a076:	2300      	movs	r3, #0
 800a078:	3401      	adds	r4, #1
 800a07a:	9305      	str	r3, [sp, #20]
 800a07c:	4619      	mov	r1, r3
 800a07e:	f04f 0c0a 	mov.w	ip, #10
 800a082:	4620      	mov	r0, r4
 800a084:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a088:	3a30      	subs	r2, #48	; 0x30
 800a08a:	2a09      	cmp	r2, #9
 800a08c:	d903      	bls.n	800a096 <_svfiprintf_r+0x1a6>
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d0c6      	beq.n	800a020 <_svfiprintf_r+0x130>
 800a092:	9105      	str	r1, [sp, #20]
 800a094:	e7c4      	b.n	800a020 <_svfiprintf_r+0x130>
 800a096:	fb0c 2101 	mla	r1, ip, r1, r2
 800a09a:	4604      	mov	r4, r0
 800a09c:	2301      	movs	r3, #1
 800a09e:	e7f0      	b.n	800a082 <_svfiprintf_r+0x192>
 800a0a0:	ab03      	add	r3, sp, #12
 800a0a2:	9300      	str	r3, [sp, #0]
 800a0a4:	462a      	mov	r2, r5
 800a0a6:	4b0f      	ldr	r3, [pc, #60]	; (800a0e4 <_svfiprintf_r+0x1f4>)
 800a0a8:	a904      	add	r1, sp, #16
 800a0aa:	4638      	mov	r0, r7
 800a0ac:	f7fd fdc2 	bl	8007c34 <_printf_float>
 800a0b0:	1c42      	adds	r2, r0, #1
 800a0b2:	4606      	mov	r6, r0
 800a0b4:	d1d6      	bne.n	800a064 <_svfiprintf_r+0x174>
 800a0b6:	89ab      	ldrh	r3, [r5, #12]
 800a0b8:	065b      	lsls	r3, r3, #25
 800a0ba:	f53f af2d 	bmi.w	8009f18 <_svfiprintf_r+0x28>
 800a0be:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a0c0:	b01d      	add	sp, #116	; 0x74
 800a0c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0c6:	ab03      	add	r3, sp, #12
 800a0c8:	9300      	str	r3, [sp, #0]
 800a0ca:	462a      	mov	r2, r5
 800a0cc:	4b05      	ldr	r3, [pc, #20]	; (800a0e4 <_svfiprintf_r+0x1f4>)
 800a0ce:	a904      	add	r1, sp, #16
 800a0d0:	4638      	mov	r0, r7
 800a0d2:	f7fe f853 	bl	800817c <_printf_i>
 800a0d6:	e7eb      	b.n	800a0b0 <_svfiprintf_r+0x1c0>
 800a0d8:	0802bf94 	.word	0x0802bf94
 800a0dc:	0802bf9e 	.word	0x0802bf9e
 800a0e0:	08007c35 	.word	0x08007c35
 800a0e4:	08009e3d 	.word	0x08009e3d
 800a0e8:	0802bf9a 	.word	0x0802bf9a

0800a0ec <__sfputc_r>:
 800a0ec:	6893      	ldr	r3, [r2, #8]
 800a0ee:	3b01      	subs	r3, #1
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	b410      	push	{r4}
 800a0f4:	6093      	str	r3, [r2, #8]
 800a0f6:	da08      	bge.n	800a10a <__sfputc_r+0x1e>
 800a0f8:	6994      	ldr	r4, [r2, #24]
 800a0fa:	42a3      	cmp	r3, r4
 800a0fc:	db01      	blt.n	800a102 <__sfputc_r+0x16>
 800a0fe:	290a      	cmp	r1, #10
 800a100:	d103      	bne.n	800a10a <__sfputc_r+0x1e>
 800a102:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a106:	f7fe ba80 	b.w	800860a <__swbuf_r>
 800a10a:	6813      	ldr	r3, [r2, #0]
 800a10c:	1c58      	adds	r0, r3, #1
 800a10e:	6010      	str	r0, [r2, #0]
 800a110:	7019      	strb	r1, [r3, #0]
 800a112:	4608      	mov	r0, r1
 800a114:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a118:	4770      	bx	lr

0800a11a <__sfputs_r>:
 800a11a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a11c:	4606      	mov	r6, r0
 800a11e:	460f      	mov	r7, r1
 800a120:	4614      	mov	r4, r2
 800a122:	18d5      	adds	r5, r2, r3
 800a124:	42ac      	cmp	r4, r5
 800a126:	d101      	bne.n	800a12c <__sfputs_r+0x12>
 800a128:	2000      	movs	r0, #0
 800a12a:	e007      	b.n	800a13c <__sfputs_r+0x22>
 800a12c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a130:	463a      	mov	r2, r7
 800a132:	4630      	mov	r0, r6
 800a134:	f7ff ffda 	bl	800a0ec <__sfputc_r>
 800a138:	1c43      	adds	r3, r0, #1
 800a13a:	d1f3      	bne.n	800a124 <__sfputs_r+0xa>
 800a13c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a140 <_vfiprintf_r>:
 800a140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a144:	460d      	mov	r5, r1
 800a146:	b09d      	sub	sp, #116	; 0x74
 800a148:	4614      	mov	r4, r2
 800a14a:	4698      	mov	r8, r3
 800a14c:	4606      	mov	r6, r0
 800a14e:	b118      	cbz	r0, 800a158 <_vfiprintf_r+0x18>
 800a150:	6a03      	ldr	r3, [r0, #32]
 800a152:	b90b      	cbnz	r3, 800a158 <_vfiprintf_r+0x18>
 800a154:	f7fe f9c0 	bl	80084d8 <__sinit>
 800a158:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a15a:	07d9      	lsls	r1, r3, #31
 800a15c:	d405      	bmi.n	800a16a <_vfiprintf_r+0x2a>
 800a15e:	89ab      	ldrh	r3, [r5, #12]
 800a160:	059a      	lsls	r2, r3, #22
 800a162:	d402      	bmi.n	800a16a <_vfiprintf_r+0x2a>
 800a164:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a166:	f7fe fb62 	bl	800882e <__retarget_lock_acquire_recursive>
 800a16a:	89ab      	ldrh	r3, [r5, #12]
 800a16c:	071b      	lsls	r3, r3, #28
 800a16e:	d501      	bpl.n	800a174 <_vfiprintf_r+0x34>
 800a170:	692b      	ldr	r3, [r5, #16]
 800a172:	b99b      	cbnz	r3, 800a19c <_vfiprintf_r+0x5c>
 800a174:	4629      	mov	r1, r5
 800a176:	4630      	mov	r0, r6
 800a178:	f7fe fa84 	bl	8008684 <__swsetup_r>
 800a17c:	b170      	cbz	r0, 800a19c <_vfiprintf_r+0x5c>
 800a17e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a180:	07dc      	lsls	r4, r3, #31
 800a182:	d504      	bpl.n	800a18e <_vfiprintf_r+0x4e>
 800a184:	f04f 30ff 	mov.w	r0, #4294967295
 800a188:	b01d      	add	sp, #116	; 0x74
 800a18a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a18e:	89ab      	ldrh	r3, [r5, #12]
 800a190:	0598      	lsls	r0, r3, #22
 800a192:	d4f7      	bmi.n	800a184 <_vfiprintf_r+0x44>
 800a194:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a196:	f7fe fb4b 	bl	8008830 <__retarget_lock_release_recursive>
 800a19a:	e7f3      	b.n	800a184 <_vfiprintf_r+0x44>
 800a19c:	2300      	movs	r3, #0
 800a19e:	9309      	str	r3, [sp, #36]	; 0x24
 800a1a0:	2320      	movs	r3, #32
 800a1a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a1a6:	f8cd 800c 	str.w	r8, [sp, #12]
 800a1aa:	2330      	movs	r3, #48	; 0x30
 800a1ac:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800a360 <_vfiprintf_r+0x220>
 800a1b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a1b4:	f04f 0901 	mov.w	r9, #1
 800a1b8:	4623      	mov	r3, r4
 800a1ba:	469a      	mov	sl, r3
 800a1bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a1c0:	b10a      	cbz	r2, 800a1c6 <_vfiprintf_r+0x86>
 800a1c2:	2a25      	cmp	r2, #37	; 0x25
 800a1c4:	d1f9      	bne.n	800a1ba <_vfiprintf_r+0x7a>
 800a1c6:	ebba 0b04 	subs.w	fp, sl, r4
 800a1ca:	d00b      	beq.n	800a1e4 <_vfiprintf_r+0xa4>
 800a1cc:	465b      	mov	r3, fp
 800a1ce:	4622      	mov	r2, r4
 800a1d0:	4629      	mov	r1, r5
 800a1d2:	4630      	mov	r0, r6
 800a1d4:	f7ff ffa1 	bl	800a11a <__sfputs_r>
 800a1d8:	3001      	adds	r0, #1
 800a1da:	f000 80a9 	beq.w	800a330 <_vfiprintf_r+0x1f0>
 800a1de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a1e0:	445a      	add	r2, fp
 800a1e2:	9209      	str	r2, [sp, #36]	; 0x24
 800a1e4:	f89a 3000 	ldrb.w	r3, [sl]
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	f000 80a1 	beq.w	800a330 <_vfiprintf_r+0x1f0>
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	f04f 32ff 	mov.w	r2, #4294967295
 800a1f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a1f8:	f10a 0a01 	add.w	sl, sl, #1
 800a1fc:	9304      	str	r3, [sp, #16]
 800a1fe:	9307      	str	r3, [sp, #28]
 800a200:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a204:	931a      	str	r3, [sp, #104]	; 0x68
 800a206:	4654      	mov	r4, sl
 800a208:	2205      	movs	r2, #5
 800a20a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a20e:	4854      	ldr	r0, [pc, #336]	; (800a360 <_vfiprintf_r+0x220>)
 800a210:	f7f5 ffde 	bl	80001d0 <memchr>
 800a214:	9a04      	ldr	r2, [sp, #16]
 800a216:	b9d8      	cbnz	r0, 800a250 <_vfiprintf_r+0x110>
 800a218:	06d1      	lsls	r1, r2, #27
 800a21a:	bf44      	itt	mi
 800a21c:	2320      	movmi	r3, #32
 800a21e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a222:	0713      	lsls	r3, r2, #28
 800a224:	bf44      	itt	mi
 800a226:	232b      	movmi	r3, #43	; 0x2b
 800a228:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a22c:	f89a 3000 	ldrb.w	r3, [sl]
 800a230:	2b2a      	cmp	r3, #42	; 0x2a
 800a232:	d015      	beq.n	800a260 <_vfiprintf_r+0x120>
 800a234:	9a07      	ldr	r2, [sp, #28]
 800a236:	4654      	mov	r4, sl
 800a238:	2000      	movs	r0, #0
 800a23a:	f04f 0c0a 	mov.w	ip, #10
 800a23e:	4621      	mov	r1, r4
 800a240:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a244:	3b30      	subs	r3, #48	; 0x30
 800a246:	2b09      	cmp	r3, #9
 800a248:	d94d      	bls.n	800a2e6 <_vfiprintf_r+0x1a6>
 800a24a:	b1b0      	cbz	r0, 800a27a <_vfiprintf_r+0x13a>
 800a24c:	9207      	str	r2, [sp, #28]
 800a24e:	e014      	b.n	800a27a <_vfiprintf_r+0x13a>
 800a250:	eba0 0308 	sub.w	r3, r0, r8
 800a254:	fa09 f303 	lsl.w	r3, r9, r3
 800a258:	4313      	orrs	r3, r2
 800a25a:	9304      	str	r3, [sp, #16]
 800a25c:	46a2      	mov	sl, r4
 800a25e:	e7d2      	b.n	800a206 <_vfiprintf_r+0xc6>
 800a260:	9b03      	ldr	r3, [sp, #12]
 800a262:	1d19      	adds	r1, r3, #4
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	9103      	str	r1, [sp, #12]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	bfbb      	ittet	lt
 800a26c:	425b      	neglt	r3, r3
 800a26e:	f042 0202 	orrlt.w	r2, r2, #2
 800a272:	9307      	strge	r3, [sp, #28]
 800a274:	9307      	strlt	r3, [sp, #28]
 800a276:	bfb8      	it	lt
 800a278:	9204      	strlt	r2, [sp, #16]
 800a27a:	7823      	ldrb	r3, [r4, #0]
 800a27c:	2b2e      	cmp	r3, #46	; 0x2e
 800a27e:	d10c      	bne.n	800a29a <_vfiprintf_r+0x15a>
 800a280:	7863      	ldrb	r3, [r4, #1]
 800a282:	2b2a      	cmp	r3, #42	; 0x2a
 800a284:	d134      	bne.n	800a2f0 <_vfiprintf_r+0x1b0>
 800a286:	9b03      	ldr	r3, [sp, #12]
 800a288:	1d1a      	adds	r2, r3, #4
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	9203      	str	r2, [sp, #12]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	bfb8      	it	lt
 800a292:	f04f 33ff 	movlt.w	r3, #4294967295
 800a296:	3402      	adds	r4, #2
 800a298:	9305      	str	r3, [sp, #20]
 800a29a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800a370 <_vfiprintf_r+0x230>
 800a29e:	7821      	ldrb	r1, [r4, #0]
 800a2a0:	2203      	movs	r2, #3
 800a2a2:	4650      	mov	r0, sl
 800a2a4:	f7f5 ff94 	bl	80001d0 <memchr>
 800a2a8:	b138      	cbz	r0, 800a2ba <_vfiprintf_r+0x17a>
 800a2aa:	9b04      	ldr	r3, [sp, #16]
 800a2ac:	eba0 000a 	sub.w	r0, r0, sl
 800a2b0:	2240      	movs	r2, #64	; 0x40
 800a2b2:	4082      	lsls	r2, r0
 800a2b4:	4313      	orrs	r3, r2
 800a2b6:	3401      	adds	r4, #1
 800a2b8:	9304      	str	r3, [sp, #16]
 800a2ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2be:	4829      	ldr	r0, [pc, #164]	; (800a364 <_vfiprintf_r+0x224>)
 800a2c0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a2c4:	2206      	movs	r2, #6
 800a2c6:	f7f5 ff83 	bl	80001d0 <memchr>
 800a2ca:	2800      	cmp	r0, #0
 800a2cc:	d03f      	beq.n	800a34e <_vfiprintf_r+0x20e>
 800a2ce:	4b26      	ldr	r3, [pc, #152]	; (800a368 <_vfiprintf_r+0x228>)
 800a2d0:	bb1b      	cbnz	r3, 800a31a <_vfiprintf_r+0x1da>
 800a2d2:	9b03      	ldr	r3, [sp, #12]
 800a2d4:	3307      	adds	r3, #7
 800a2d6:	f023 0307 	bic.w	r3, r3, #7
 800a2da:	3308      	adds	r3, #8
 800a2dc:	9303      	str	r3, [sp, #12]
 800a2de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2e0:	443b      	add	r3, r7
 800a2e2:	9309      	str	r3, [sp, #36]	; 0x24
 800a2e4:	e768      	b.n	800a1b8 <_vfiprintf_r+0x78>
 800a2e6:	fb0c 3202 	mla	r2, ip, r2, r3
 800a2ea:	460c      	mov	r4, r1
 800a2ec:	2001      	movs	r0, #1
 800a2ee:	e7a6      	b.n	800a23e <_vfiprintf_r+0xfe>
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	3401      	adds	r4, #1
 800a2f4:	9305      	str	r3, [sp, #20]
 800a2f6:	4619      	mov	r1, r3
 800a2f8:	f04f 0c0a 	mov.w	ip, #10
 800a2fc:	4620      	mov	r0, r4
 800a2fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a302:	3a30      	subs	r2, #48	; 0x30
 800a304:	2a09      	cmp	r2, #9
 800a306:	d903      	bls.n	800a310 <_vfiprintf_r+0x1d0>
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d0c6      	beq.n	800a29a <_vfiprintf_r+0x15a>
 800a30c:	9105      	str	r1, [sp, #20]
 800a30e:	e7c4      	b.n	800a29a <_vfiprintf_r+0x15a>
 800a310:	fb0c 2101 	mla	r1, ip, r1, r2
 800a314:	4604      	mov	r4, r0
 800a316:	2301      	movs	r3, #1
 800a318:	e7f0      	b.n	800a2fc <_vfiprintf_r+0x1bc>
 800a31a:	ab03      	add	r3, sp, #12
 800a31c:	9300      	str	r3, [sp, #0]
 800a31e:	462a      	mov	r2, r5
 800a320:	4b12      	ldr	r3, [pc, #72]	; (800a36c <_vfiprintf_r+0x22c>)
 800a322:	a904      	add	r1, sp, #16
 800a324:	4630      	mov	r0, r6
 800a326:	f7fd fc85 	bl	8007c34 <_printf_float>
 800a32a:	4607      	mov	r7, r0
 800a32c:	1c78      	adds	r0, r7, #1
 800a32e:	d1d6      	bne.n	800a2de <_vfiprintf_r+0x19e>
 800a330:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a332:	07d9      	lsls	r1, r3, #31
 800a334:	d405      	bmi.n	800a342 <_vfiprintf_r+0x202>
 800a336:	89ab      	ldrh	r3, [r5, #12]
 800a338:	059a      	lsls	r2, r3, #22
 800a33a:	d402      	bmi.n	800a342 <_vfiprintf_r+0x202>
 800a33c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a33e:	f7fe fa77 	bl	8008830 <__retarget_lock_release_recursive>
 800a342:	89ab      	ldrh	r3, [r5, #12]
 800a344:	065b      	lsls	r3, r3, #25
 800a346:	f53f af1d 	bmi.w	800a184 <_vfiprintf_r+0x44>
 800a34a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a34c:	e71c      	b.n	800a188 <_vfiprintf_r+0x48>
 800a34e:	ab03      	add	r3, sp, #12
 800a350:	9300      	str	r3, [sp, #0]
 800a352:	462a      	mov	r2, r5
 800a354:	4b05      	ldr	r3, [pc, #20]	; (800a36c <_vfiprintf_r+0x22c>)
 800a356:	a904      	add	r1, sp, #16
 800a358:	4630      	mov	r0, r6
 800a35a:	f7fd ff0f 	bl	800817c <_printf_i>
 800a35e:	e7e4      	b.n	800a32a <_vfiprintf_r+0x1ea>
 800a360:	0802bf94 	.word	0x0802bf94
 800a364:	0802bf9e 	.word	0x0802bf9e
 800a368:	08007c35 	.word	0x08007c35
 800a36c:	0800a11b 	.word	0x0800a11b
 800a370:	0802bf9a 	.word	0x0802bf9a

0800a374 <__sflush_r>:
 800a374:	898a      	ldrh	r2, [r1, #12]
 800a376:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a37a:	4605      	mov	r5, r0
 800a37c:	0710      	lsls	r0, r2, #28
 800a37e:	460c      	mov	r4, r1
 800a380:	d458      	bmi.n	800a434 <__sflush_r+0xc0>
 800a382:	684b      	ldr	r3, [r1, #4]
 800a384:	2b00      	cmp	r3, #0
 800a386:	dc05      	bgt.n	800a394 <__sflush_r+0x20>
 800a388:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	dc02      	bgt.n	800a394 <__sflush_r+0x20>
 800a38e:	2000      	movs	r0, #0
 800a390:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a394:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a396:	2e00      	cmp	r6, #0
 800a398:	d0f9      	beq.n	800a38e <__sflush_r+0x1a>
 800a39a:	2300      	movs	r3, #0
 800a39c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a3a0:	682f      	ldr	r7, [r5, #0]
 800a3a2:	6a21      	ldr	r1, [r4, #32]
 800a3a4:	602b      	str	r3, [r5, #0]
 800a3a6:	d032      	beq.n	800a40e <__sflush_r+0x9a>
 800a3a8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a3aa:	89a3      	ldrh	r3, [r4, #12]
 800a3ac:	075a      	lsls	r2, r3, #29
 800a3ae:	d505      	bpl.n	800a3bc <__sflush_r+0x48>
 800a3b0:	6863      	ldr	r3, [r4, #4]
 800a3b2:	1ac0      	subs	r0, r0, r3
 800a3b4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a3b6:	b10b      	cbz	r3, 800a3bc <__sflush_r+0x48>
 800a3b8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a3ba:	1ac0      	subs	r0, r0, r3
 800a3bc:	2300      	movs	r3, #0
 800a3be:	4602      	mov	r2, r0
 800a3c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a3c2:	6a21      	ldr	r1, [r4, #32]
 800a3c4:	4628      	mov	r0, r5
 800a3c6:	47b0      	blx	r6
 800a3c8:	1c43      	adds	r3, r0, #1
 800a3ca:	89a3      	ldrh	r3, [r4, #12]
 800a3cc:	d106      	bne.n	800a3dc <__sflush_r+0x68>
 800a3ce:	6829      	ldr	r1, [r5, #0]
 800a3d0:	291d      	cmp	r1, #29
 800a3d2:	d82b      	bhi.n	800a42c <__sflush_r+0xb8>
 800a3d4:	4a29      	ldr	r2, [pc, #164]	; (800a47c <__sflush_r+0x108>)
 800a3d6:	410a      	asrs	r2, r1
 800a3d8:	07d6      	lsls	r6, r2, #31
 800a3da:	d427      	bmi.n	800a42c <__sflush_r+0xb8>
 800a3dc:	2200      	movs	r2, #0
 800a3de:	6062      	str	r2, [r4, #4]
 800a3e0:	04d9      	lsls	r1, r3, #19
 800a3e2:	6922      	ldr	r2, [r4, #16]
 800a3e4:	6022      	str	r2, [r4, #0]
 800a3e6:	d504      	bpl.n	800a3f2 <__sflush_r+0x7e>
 800a3e8:	1c42      	adds	r2, r0, #1
 800a3ea:	d101      	bne.n	800a3f0 <__sflush_r+0x7c>
 800a3ec:	682b      	ldr	r3, [r5, #0]
 800a3ee:	b903      	cbnz	r3, 800a3f2 <__sflush_r+0x7e>
 800a3f0:	6560      	str	r0, [r4, #84]	; 0x54
 800a3f2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a3f4:	602f      	str	r7, [r5, #0]
 800a3f6:	2900      	cmp	r1, #0
 800a3f8:	d0c9      	beq.n	800a38e <__sflush_r+0x1a>
 800a3fa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a3fe:	4299      	cmp	r1, r3
 800a400:	d002      	beq.n	800a408 <__sflush_r+0x94>
 800a402:	4628      	mov	r0, r5
 800a404:	f7ff f89e 	bl	8009544 <_free_r>
 800a408:	2000      	movs	r0, #0
 800a40a:	6360      	str	r0, [r4, #52]	; 0x34
 800a40c:	e7c0      	b.n	800a390 <__sflush_r+0x1c>
 800a40e:	2301      	movs	r3, #1
 800a410:	4628      	mov	r0, r5
 800a412:	47b0      	blx	r6
 800a414:	1c41      	adds	r1, r0, #1
 800a416:	d1c8      	bne.n	800a3aa <__sflush_r+0x36>
 800a418:	682b      	ldr	r3, [r5, #0]
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d0c5      	beq.n	800a3aa <__sflush_r+0x36>
 800a41e:	2b1d      	cmp	r3, #29
 800a420:	d001      	beq.n	800a426 <__sflush_r+0xb2>
 800a422:	2b16      	cmp	r3, #22
 800a424:	d101      	bne.n	800a42a <__sflush_r+0xb6>
 800a426:	602f      	str	r7, [r5, #0]
 800a428:	e7b1      	b.n	800a38e <__sflush_r+0x1a>
 800a42a:	89a3      	ldrh	r3, [r4, #12]
 800a42c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a430:	81a3      	strh	r3, [r4, #12]
 800a432:	e7ad      	b.n	800a390 <__sflush_r+0x1c>
 800a434:	690f      	ldr	r7, [r1, #16]
 800a436:	2f00      	cmp	r7, #0
 800a438:	d0a9      	beq.n	800a38e <__sflush_r+0x1a>
 800a43a:	0793      	lsls	r3, r2, #30
 800a43c:	680e      	ldr	r6, [r1, #0]
 800a43e:	bf08      	it	eq
 800a440:	694b      	ldreq	r3, [r1, #20]
 800a442:	600f      	str	r7, [r1, #0]
 800a444:	bf18      	it	ne
 800a446:	2300      	movne	r3, #0
 800a448:	eba6 0807 	sub.w	r8, r6, r7
 800a44c:	608b      	str	r3, [r1, #8]
 800a44e:	f1b8 0f00 	cmp.w	r8, #0
 800a452:	dd9c      	ble.n	800a38e <__sflush_r+0x1a>
 800a454:	6a21      	ldr	r1, [r4, #32]
 800a456:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a458:	4643      	mov	r3, r8
 800a45a:	463a      	mov	r2, r7
 800a45c:	4628      	mov	r0, r5
 800a45e:	47b0      	blx	r6
 800a460:	2800      	cmp	r0, #0
 800a462:	dc06      	bgt.n	800a472 <__sflush_r+0xfe>
 800a464:	89a3      	ldrh	r3, [r4, #12]
 800a466:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a46a:	81a3      	strh	r3, [r4, #12]
 800a46c:	f04f 30ff 	mov.w	r0, #4294967295
 800a470:	e78e      	b.n	800a390 <__sflush_r+0x1c>
 800a472:	4407      	add	r7, r0
 800a474:	eba8 0800 	sub.w	r8, r8, r0
 800a478:	e7e9      	b.n	800a44e <__sflush_r+0xda>
 800a47a:	bf00      	nop
 800a47c:	dfbffffe 	.word	0xdfbffffe

0800a480 <_fflush_r>:
 800a480:	b538      	push	{r3, r4, r5, lr}
 800a482:	690b      	ldr	r3, [r1, #16]
 800a484:	4605      	mov	r5, r0
 800a486:	460c      	mov	r4, r1
 800a488:	b913      	cbnz	r3, 800a490 <_fflush_r+0x10>
 800a48a:	2500      	movs	r5, #0
 800a48c:	4628      	mov	r0, r5
 800a48e:	bd38      	pop	{r3, r4, r5, pc}
 800a490:	b118      	cbz	r0, 800a49a <_fflush_r+0x1a>
 800a492:	6a03      	ldr	r3, [r0, #32]
 800a494:	b90b      	cbnz	r3, 800a49a <_fflush_r+0x1a>
 800a496:	f7fe f81f 	bl	80084d8 <__sinit>
 800a49a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d0f3      	beq.n	800a48a <_fflush_r+0xa>
 800a4a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a4a4:	07d0      	lsls	r0, r2, #31
 800a4a6:	d404      	bmi.n	800a4b2 <_fflush_r+0x32>
 800a4a8:	0599      	lsls	r1, r3, #22
 800a4aa:	d402      	bmi.n	800a4b2 <_fflush_r+0x32>
 800a4ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a4ae:	f7fe f9be 	bl	800882e <__retarget_lock_acquire_recursive>
 800a4b2:	4628      	mov	r0, r5
 800a4b4:	4621      	mov	r1, r4
 800a4b6:	f7ff ff5d 	bl	800a374 <__sflush_r>
 800a4ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a4bc:	07da      	lsls	r2, r3, #31
 800a4be:	4605      	mov	r5, r0
 800a4c0:	d4e4      	bmi.n	800a48c <_fflush_r+0xc>
 800a4c2:	89a3      	ldrh	r3, [r4, #12]
 800a4c4:	059b      	lsls	r3, r3, #22
 800a4c6:	d4e1      	bmi.n	800a48c <_fflush_r+0xc>
 800a4c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a4ca:	f7fe f9b1 	bl	8008830 <__retarget_lock_release_recursive>
 800a4ce:	e7dd      	b.n	800a48c <_fflush_r+0xc>

0800a4d0 <__swhatbuf_r>:
 800a4d0:	b570      	push	{r4, r5, r6, lr}
 800a4d2:	460c      	mov	r4, r1
 800a4d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4d8:	2900      	cmp	r1, #0
 800a4da:	b096      	sub	sp, #88	; 0x58
 800a4dc:	4615      	mov	r5, r2
 800a4de:	461e      	mov	r6, r3
 800a4e0:	da0d      	bge.n	800a4fe <__swhatbuf_r+0x2e>
 800a4e2:	89a3      	ldrh	r3, [r4, #12]
 800a4e4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a4e8:	f04f 0100 	mov.w	r1, #0
 800a4ec:	bf0c      	ite	eq
 800a4ee:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a4f2:	2340      	movne	r3, #64	; 0x40
 800a4f4:	2000      	movs	r0, #0
 800a4f6:	6031      	str	r1, [r6, #0]
 800a4f8:	602b      	str	r3, [r5, #0]
 800a4fa:	b016      	add	sp, #88	; 0x58
 800a4fc:	bd70      	pop	{r4, r5, r6, pc}
 800a4fe:	466a      	mov	r2, sp
 800a500:	f000 f862 	bl	800a5c8 <_fstat_r>
 800a504:	2800      	cmp	r0, #0
 800a506:	dbec      	blt.n	800a4e2 <__swhatbuf_r+0x12>
 800a508:	9901      	ldr	r1, [sp, #4]
 800a50a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a50e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a512:	4259      	negs	r1, r3
 800a514:	4159      	adcs	r1, r3
 800a516:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a51a:	e7eb      	b.n	800a4f4 <__swhatbuf_r+0x24>

0800a51c <__smakebuf_r>:
 800a51c:	898b      	ldrh	r3, [r1, #12]
 800a51e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a520:	079d      	lsls	r5, r3, #30
 800a522:	4606      	mov	r6, r0
 800a524:	460c      	mov	r4, r1
 800a526:	d507      	bpl.n	800a538 <__smakebuf_r+0x1c>
 800a528:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a52c:	6023      	str	r3, [r4, #0]
 800a52e:	6123      	str	r3, [r4, #16]
 800a530:	2301      	movs	r3, #1
 800a532:	6163      	str	r3, [r4, #20]
 800a534:	b002      	add	sp, #8
 800a536:	bd70      	pop	{r4, r5, r6, pc}
 800a538:	ab01      	add	r3, sp, #4
 800a53a:	466a      	mov	r2, sp
 800a53c:	f7ff ffc8 	bl	800a4d0 <__swhatbuf_r>
 800a540:	9900      	ldr	r1, [sp, #0]
 800a542:	4605      	mov	r5, r0
 800a544:	4630      	mov	r0, r6
 800a546:	f7ff f871 	bl	800962c <_malloc_r>
 800a54a:	b948      	cbnz	r0, 800a560 <__smakebuf_r+0x44>
 800a54c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a550:	059a      	lsls	r2, r3, #22
 800a552:	d4ef      	bmi.n	800a534 <__smakebuf_r+0x18>
 800a554:	f023 0303 	bic.w	r3, r3, #3
 800a558:	f043 0302 	orr.w	r3, r3, #2
 800a55c:	81a3      	strh	r3, [r4, #12]
 800a55e:	e7e3      	b.n	800a528 <__smakebuf_r+0xc>
 800a560:	89a3      	ldrh	r3, [r4, #12]
 800a562:	6020      	str	r0, [r4, #0]
 800a564:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a568:	81a3      	strh	r3, [r4, #12]
 800a56a:	9b00      	ldr	r3, [sp, #0]
 800a56c:	6163      	str	r3, [r4, #20]
 800a56e:	9b01      	ldr	r3, [sp, #4]
 800a570:	6120      	str	r0, [r4, #16]
 800a572:	b15b      	cbz	r3, 800a58c <__smakebuf_r+0x70>
 800a574:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a578:	4630      	mov	r0, r6
 800a57a:	f000 f837 	bl	800a5ec <_isatty_r>
 800a57e:	b128      	cbz	r0, 800a58c <__smakebuf_r+0x70>
 800a580:	89a3      	ldrh	r3, [r4, #12]
 800a582:	f023 0303 	bic.w	r3, r3, #3
 800a586:	f043 0301 	orr.w	r3, r3, #1
 800a58a:	81a3      	strh	r3, [r4, #12]
 800a58c:	89a3      	ldrh	r3, [r4, #12]
 800a58e:	431d      	orrs	r5, r3
 800a590:	81a5      	strh	r5, [r4, #12]
 800a592:	e7cf      	b.n	800a534 <__smakebuf_r+0x18>

0800a594 <memmove>:
 800a594:	4288      	cmp	r0, r1
 800a596:	b510      	push	{r4, lr}
 800a598:	eb01 0402 	add.w	r4, r1, r2
 800a59c:	d902      	bls.n	800a5a4 <memmove+0x10>
 800a59e:	4284      	cmp	r4, r0
 800a5a0:	4623      	mov	r3, r4
 800a5a2:	d807      	bhi.n	800a5b4 <memmove+0x20>
 800a5a4:	1e43      	subs	r3, r0, #1
 800a5a6:	42a1      	cmp	r1, r4
 800a5a8:	d008      	beq.n	800a5bc <memmove+0x28>
 800a5aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a5ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a5b2:	e7f8      	b.n	800a5a6 <memmove+0x12>
 800a5b4:	4402      	add	r2, r0
 800a5b6:	4601      	mov	r1, r0
 800a5b8:	428a      	cmp	r2, r1
 800a5ba:	d100      	bne.n	800a5be <memmove+0x2a>
 800a5bc:	bd10      	pop	{r4, pc}
 800a5be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a5c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a5c6:	e7f7      	b.n	800a5b8 <memmove+0x24>

0800a5c8 <_fstat_r>:
 800a5c8:	b538      	push	{r3, r4, r5, lr}
 800a5ca:	4d07      	ldr	r5, [pc, #28]	; (800a5e8 <_fstat_r+0x20>)
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	4604      	mov	r4, r0
 800a5d0:	4608      	mov	r0, r1
 800a5d2:	4611      	mov	r1, r2
 800a5d4:	602b      	str	r3, [r5, #0]
 800a5d6:	f7f8 fa9a 	bl	8002b0e <_fstat>
 800a5da:	1c43      	adds	r3, r0, #1
 800a5dc:	d102      	bne.n	800a5e4 <_fstat_r+0x1c>
 800a5de:	682b      	ldr	r3, [r5, #0]
 800a5e0:	b103      	cbz	r3, 800a5e4 <_fstat_r+0x1c>
 800a5e2:	6023      	str	r3, [r4, #0]
 800a5e4:	bd38      	pop	{r3, r4, r5, pc}
 800a5e6:	bf00      	nop
 800a5e8:	200026d4 	.word	0x200026d4

0800a5ec <_isatty_r>:
 800a5ec:	b538      	push	{r3, r4, r5, lr}
 800a5ee:	4d06      	ldr	r5, [pc, #24]	; (800a608 <_isatty_r+0x1c>)
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	4604      	mov	r4, r0
 800a5f4:	4608      	mov	r0, r1
 800a5f6:	602b      	str	r3, [r5, #0]
 800a5f8:	f7f8 fa99 	bl	8002b2e <_isatty>
 800a5fc:	1c43      	adds	r3, r0, #1
 800a5fe:	d102      	bne.n	800a606 <_isatty_r+0x1a>
 800a600:	682b      	ldr	r3, [r5, #0]
 800a602:	b103      	cbz	r3, 800a606 <_isatty_r+0x1a>
 800a604:	6023      	str	r3, [r4, #0]
 800a606:	bd38      	pop	{r3, r4, r5, pc}
 800a608:	200026d4 	.word	0x200026d4

0800a60c <_sbrk_r>:
 800a60c:	b538      	push	{r3, r4, r5, lr}
 800a60e:	4d06      	ldr	r5, [pc, #24]	; (800a628 <_sbrk_r+0x1c>)
 800a610:	2300      	movs	r3, #0
 800a612:	4604      	mov	r4, r0
 800a614:	4608      	mov	r0, r1
 800a616:	602b      	str	r3, [r5, #0]
 800a618:	f7f8 faa2 	bl	8002b60 <_sbrk>
 800a61c:	1c43      	adds	r3, r0, #1
 800a61e:	d102      	bne.n	800a626 <_sbrk_r+0x1a>
 800a620:	682b      	ldr	r3, [r5, #0]
 800a622:	b103      	cbz	r3, 800a626 <_sbrk_r+0x1a>
 800a624:	6023      	str	r3, [r4, #0]
 800a626:	bd38      	pop	{r3, r4, r5, pc}
 800a628:	200026d4 	.word	0x200026d4

0800a62c <__assert_func>:
 800a62c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a62e:	4614      	mov	r4, r2
 800a630:	461a      	mov	r2, r3
 800a632:	4b09      	ldr	r3, [pc, #36]	; (800a658 <__assert_func+0x2c>)
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	4605      	mov	r5, r0
 800a638:	68d8      	ldr	r0, [r3, #12]
 800a63a:	b14c      	cbz	r4, 800a650 <__assert_func+0x24>
 800a63c:	4b07      	ldr	r3, [pc, #28]	; (800a65c <__assert_func+0x30>)
 800a63e:	9100      	str	r1, [sp, #0]
 800a640:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a644:	4906      	ldr	r1, [pc, #24]	; (800a660 <__assert_func+0x34>)
 800a646:	462b      	mov	r3, r5
 800a648:	f000 f872 	bl	800a730 <fiprintf>
 800a64c:	f000 f882 	bl	800a754 <abort>
 800a650:	4b04      	ldr	r3, [pc, #16]	; (800a664 <__assert_func+0x38>)
 800a652:	461c      	mov	r4, r3
 800a654:	e7f3      	b.n	800a63e <__assert_func+0x12>
 800a656:	bf00      	nop
 800a658:	20000070 	.word	0x20000070
 800a65c:	0802bfaf 	.word	0x0802bfaf
 800a660:	0802bfbc 	.word	0x0802bfbc
 800a664:	0802bfea 	.word	0x0802bfea

0800a668 <_calloc_r>:
 800a668:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a66a:	fba1 2402 	umull	r2, r4, r1, r2
 800a66e:	b94c      	cbnz	r4, 800a684 <_calloc_r+0x1c>
 800a670:	4611      	mov	r1, r2
 800a672:	9201      	str	r2, [sp, #4]
 800a674:	f7fe ffda 	bl	800962c <_malloc_r>
 800a678:	9a01      	ldr	r2, [sp, #4]
 800a67a:	4605      	mov	r5, r0
 800a67c:	b930      	cbnz	r0, 800a68c <_calloc_r+0x24>
 800a67e:	4628      	mov	r0, r5
 800a680:	b003      	add	sp, #12
 800a682:	bd30      	pop	{r4, r5, pc}
 800a684:	220c      	movs	r2, #12
 800a686:	6002      	str	r2, [r0, #0]
 800a688:	2500      	movs	r5, #0
 800a68a:	e7f8      	b.n	800a67e <_calloc_r+0x16>
 800a68c:	4621      	mov	r1, r4
 800a68e:	f7fe f851 	bl	8008734 <memset>
 800a692:	e7f4      	b.n	800a67e <_calloc_r+0x16>

0800a694 <__ascii_mbtowc>:
 800a694:	b082      	sub	sp, #8
 800a696:	b901      	cbnz	r1, 800a69a <__ascii_mbtowc+0x6>
 800a698:	a901      	add	r1, sp, #4
 800a69a:	b142      	cbz	r2, 800a6ae <__ascii_mbtowc+0x1a>
 800a69c:	b14b      	cbz	r3, 800a6b2 <__ascii_mbtowc+0x1e>
 800a69e:	7813      	ldrb	r3, [r2, #0]
 800a6a0:	600b      	str	r3, [r1, #0]
 800a6a2:	7812      	ldrb	r2, [r2, #0]
 800a6a4:	1e10      	subs	r0, r2, #0
 800a6a6:	bf18      	it	ne
 800a6a8:	2001      	movne	r0, #1
 800a6aa:	b002      	add	sp, #8
 800a6ac:	4770      	bx	lr
 800a6ae:	4610      	mov	r0, r2
 800a6b0:	e7fb      	b.n	800a6aa <__ascii_mbtowc+0x16>
 800a6b2:	f06f 0001 	mvn.w	r0, #1
 800a6b6:	e7f8      	b.n	800a6aa <__ascii_mbtowc+0x16>

0800a6b8 <_realloc_r>:
 800a6b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6bc:	4680      	mov	r8, r0
 800a6be:	4614      	mov	r4, r2
 800a6c0:	460e      	mov	r6, r1
 800a6c2:	b921      	cbnz	r1, 800a6ce <_realloc_r+0x16>
 800a6c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a6c8:	4611      	mov	r1, r2
 800a6ca:	f7fe bfaf 	b.w	800962c <_malloc_r>
 800a6ce:	b92a      	cbnz	r2, 800a6dc <_realloc_r+0x24>
 800a6d0:	f7fe ff38 	bl	8009544 <_free_r>
 800a6d4:	4625      	mov	r5, r4
 800a6d6:	4628      	mov	r0, r5
 800a6d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a6dc:	f000 f841 	bl	800a762 <_malloc_usable_size_r>
 800a6e0:	4284      	cmp	r4, r0
 800a6e2:	4607      	mov	r7, r0
 800a6e4:	d802      	bhi.n	800a6ec <_realloc_r+0x34>
 800a6e6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a6ea:	d812      	bhi.n	800a712 <_realloc_r+0x5a>
 800a6ec:	4621      	mov	r1, r4
 800a6ee:	4640      	mov	r0, r8
 800a6f0:	f7fe ff9c 	bl	800962c <_malloc_r>
 800a6f4:	4605      	mov	r5, r0
 800a6f6:	2800      	cmp	r0, #0
 800a6f8:	d0ed      	beq.n	800a6d6 <_realloc_r+0x1e>
 800a6fa:	42bc      	cmp	r4, r7
 800a6fc:	4622      	mov	r2, r4
 800a6fe:	4631      	mov	r1, r6
 800a700:	bf28      	it	cs
 800a702:	463a      	movcs	r2, r7
 800a704:	f7fe f895 	bl	8008832 <memcpy>
 800a708:	4631      	mov	r1, r6
 800a70a:	4640      	mov	r0, r8
 800a70c:	f7fe ff1a 	bl	8009544 <_free_r>
 800a710:	e7e1      	b.n	800a6d6 <_realloc_r+0x1e>
 800a712:	4635      	mov	r5, r6
 800a714:	e7df      	b.n	800a6d6 <_realloc_r+0x1e>

0800a716 <__ascii_wctomb>:
 800a716:	b149      	cbz	r1, 800a72c <__ascii_wctomb+0x16>
 800a718:	2aff      	cmp	r2, #255	; 0xff
 800a71a:	bf85      	ittet	hi
 800a71c:	238a      	movhi	r3, #138	; 0x8a
 800a71e:	6003      	strhi	r3, [r0, #0]
 800a720:	700a      	strbls	r2, [r1, #0]
 800a722:	f04f 30ff 	movhi.w	r0, #4294967295
 800a726:	bf98      	it	ls
 800a728:	2001      	movls	r0, #1
 800a72a:	4770      	bx	lr
 800a72c:	4608      	mov	r0, r1
 800a72e:	4770      	bx	lr

0800a730 <fiprintf>:
 800a730:	b40e      	push	{r1, r2, r3}
 800a732:	b503      	push	{r0, r1, lr}
 800a734:	4601      	mov	r1, r0
 800a736:	ab03      	add	r3, sp, #12
 800a738:	4805      	ldr	r0, [pc, #20]	; (800a750 <fiprintf+0x20>)
 800a73a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a73e:	6800      	ldr	r0, [r0, #0]
 800a740:	9301      	str	r3, [sp, #4]
 800a742:	f7ff fcfd 	bl	800a140 <_vfiprintf_r>
 800a746:	b002      	add	sp, #8
 800a748:	f85d eb04 	ldr.w	lr, [sp], #4
 800a74c:	b003      	add	sp, #12
 800a74e:	4770      	bx	lr
 800a750:	20000070 	.word	0x20000070

0800a754 <abort>:
 800a754:	b508      	push	{r3, lr}
 800a756:	2006      	movs	r0, #6
 800a758:	f000 f834 	bl	800a7c4 <raise>
 800a75c:	2001      	movs	r0, #1
 800a75e:	f7f8 f987 	bl	8002a70 <_exit>

0800a762 <_malloc_usable_size_r>:
 800a762:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a766:	1f18      	subs	r0, r3, #4
 800a768:	2b00      	cmp	r3, #0
 800a76a:	bfbc      	itt	lt
 800a76c:	580b      	ldrlt	r3, [r1, r0]
 800a76e:	18c0      	addlt	r0, r0, r3
 800a770:	4770      	bx	lr

0800a772 <_raise_r>:
 800a772:	291f      	cmp	r1, #31
 800a774:	b538      	push	{r3, r4, r5, lr}
 800a776:	4604      	mov	r4, r0
 800a778:	460d      	mov	r5, r1
 800a77a:	d904      	bls.n	800a786 <_raise_r+0x14>
 800a77c:	2316      	movs	r3, #22
 800a77e:	6003      	str	r3, [r0, #0]
 800a780:	f04f 30ff 	mov.w	r0, #4294967295
 800a784:	bd38      	pop	{r3, r4, r5, pc}
 800a786:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a788:	b112      	cbz	r2, 800a790 <_raise_r+0x1e>
 800a78a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a78e:	b94b      	cbnz	r3, 800a7a4 <_raise_r+0x32>
 800a790:	4620      	mov	r0, r4
 800a792:	f000 f831 	bl	800a7f8 <_getpid_r>
 800a796:	462a      	mov	r2, r5
 800a798:	4601      	mov	r1, r0
 800a79a:	4620      	mov	r0, r4
 800a79c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a7a0:	f000 b818 	b.w	800a7d4 <_kill_r>
 800a7a4:	2b01      	cmp	r3, #1
 800a7a6:	d00a      	beq.n	800a7be <_raise_r+0x4c>
 800a7a8:	1c59      	adds	r1, r3, #1
 800a7aa:	d103      	bne.n	800a7b4 <_raise_r+0x42>
 800a7ac:	2316      	movs	r3, #22
 800a7ae:	6003      	str	r3, [r0, #0]
 800a7b0:	2001      	movs	r0, #1
 800a7b2:	e7e7      	b.n	800a784 <_raise_r+0x12>
 800a7b4:	2400      	movs	r4, #0
 800a7b6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a7ba:	4628      	mov	r0, r5
 800a7bc:	4798      	blx	r3
 800a7be:	2000      	movs	r0, #0
 800a7c0:	e7e0      	b.n	800a784 <_raise_r+0x12>
	...

0800a7c4 <raise>:
 800a7c4:	4b02      	ldr	r3, [pc, #8]	; (800a7d0 <raise+0xc>)
 800a7c6:	4601      	mov	r1, r0
 800a7c8:	6818      	ldr	r0, [r3, #0]
 800a7ca:	f7ff bfd2 	b.w	800a772 <_raise_r>
 800a7ce:	bf00      	nop
 800a7d0:	20000070 	.word	0x20000070

0800a7d4 <_kill_r>:
 800a7d4:	b538      	push	{r3, r4, r5, lr}
 800a7d6:	4d07      	ldr	r5, [pc, #28]	; (800a7f4 <_kill_r+0x20>)
 800a7d8:	2300      	movs	r3, #0
 800a7da:	4604      	mov	r4, r0
 800a7dc:	4608      	mov	r0, r1
 800a7de:	4611      	mov	r1, r2
 800a7e0:	602b      	str	r3, [r5, #0]
 800a7e2:	f7f8 f935 	bl	8002a50 <_kill>
 800a7e6:	1c43      	adds	r3, r0, #1
 800a7e8:	d102      	bne.n	800a7f0 <_kill_r+0x1c>
 800a7ea:	682b      	ldr	r3, [r5, #0]
 800a7ec:	b103      	cbz	r3, 800a7f0 <_kill_r+0x1c>
 800a7ee:	6023      	str	r3, [r4, #0]
 800a7f0:	bd38      	pop	{r3, r4, r5, pc}
 800a7f2:	bf00      	nop
 800a7f4:	200026d4 	.word	0x200026d4

0800a7f8 <_getpid_r>:
 800a7f8:	f7f8 b922 	b.w	8002a40 <_getpid>

0800a7fc <_init>:
 800a7fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7fe:	bf00      	nop
 800a800:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a802:	bc08      	pop	{r3}
 800a804:	469e      	mov	lr, r3
 800a806:	4770      	bx	lr

0800a808 <_fini>:
 800a808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a80a:	bf00      	nop
 800a80c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a80e:	bc08      	pop	{r3}
 800a810:	469e      	mov	lr, r3
 800a812:	4770      	bx	lr
