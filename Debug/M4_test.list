
M4_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000033f8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08003580  08003580  00013580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080035cc  080035cc  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  080035cc  080035cc  000135cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080035d4  080035d4  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080035d4  080035d4  000135d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080035d8  080035d8  000135d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  080035dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020018  2**0
                  CONTENTS
 10 .bss          00002234  20000018  20000018  00020018  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000224c  2000224c  00020018  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000b6a1  00000000  00000000  0002008b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002538  00000000  00000000  0002b72c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000a28  00000000  00000000  0002dc68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000078d  00000000  00000000  0002e690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00022e89  00000000  00000000  0002ee1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000ff39  00000000  00000000  00051ca6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c8329  00000000  00000000  00061bdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002604  00000000  00000000  00129f08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000044  00000000  00000000  0012c50c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000018 	.word	0x20000018
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003568 	.word	0x08003568

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000001c 	.word	0x2000001c
 80001c4:	08003568 	.word	0x08003568

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b970 	b.w	80004d0 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	460f      	mov	r7, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4694      	mov	ip, r2
 800021c:	d965      	bls.n	80002ea <__udivmoddi4+0xe2>
 800021e:	fab2 f382 	clz	r3, r2
 8000222:	b143      	cbz	r3, 8000236 <__udivmoddi4+0x2e>
 8000224:	fa02 fc03 	lsl.w	ip, r2, r3
 8000228:	f1c3 0220 	rsb	r2, r3, #32
 800022c:	409f      	lsls	r7, r3
 800022e:	fa20 f202 	lsr.w	r2, r0, r2
 8000232:	4317      	orrs	r7, r2
 8000234:	409c      	lsls	r4, r3
 8000236:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023a:	fa1f f58c 	uxth.w	r5, ip
 800023e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000242:	0c22      	lsrs	r2, r4, #16
 8000244:	fb0e 7711 	mls	r7, lr, r1, r7
 8000248:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800024c:	fb01 f005 	mul.w	r0, r1, r5
 8000250:	4290      	cmp	r0, r2
 8000252:	d90a      	bls.n	800026a <__udivmoddi4+0x62>
 8000254:	eb1c 0202 	adds.w	r2, ip, r2
 8000258:	f101 37ff 	add.w	r7, r1, #4294967295
 800025c:	f080 811c 	bcs.w	8000498 <__udivmoddi4+0x290>
 8000260:	4290      	cmp	r0, r2
 8000262:	f240 8119 	bls.w	8000498 <__udivmoddi4+0x290>
 8000266:	3902      	subs	r1, #2
 8000268:	4462      	add	r2, ip
 800026a:	1a12      	subs	r2, r2, r0
 800026c:	b2a4      	uxth	r4, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027a:	fb00 f505 	mul.w	r5, r0, r5
 800027e:	42a5      	cmp	r5, r4
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x90>
 8000282:	eb1c 0404 	adds.w	r4, ip, r4
 8000286:	f100 32ff 	add.w	r2, r0, #4294967295
 800028a:	f080 8107 	bcs.w	800049c <__udivmoddi4+0x294>
 800028e:	42a5      	cmp	r5, r4
 8000290:	f240 8104 	bls.w	800049c <__udivmoddi4+0x294>
 8000294:	4464      	add	r4, ip
 8000296:	3802      	subs	r0, #2
 8000298:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029c:	1b64      	subs	r4, r4, r5
 800029e:	2100      	movs	r1, #0
 80002a0:	b11e      	cbz	r6, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40dc      	lsrs	r4, r3
 80002a4:	2300      	movs	r3, #0
 80002a6:	e9c6 4300 	strd	r4, r3, [r6]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d908      	bls.n	80002c4 <__udivmoddi4+0xbc>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80ed 	beq.w	8000492 <__udivmoddi4+0x28a>
 80002b8:	2100      	movs	r1, #0
 80002ba:	e9c6 0500 	strd	r0, r5, [r6]
 80002be:	4608      	mov	r0, r1
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	fab3 f183 	clz	r1, r3
 80002c8:	2900      	cmp	r1, #0
 80002ca:	d149      	bne.n	8000360 <__udivmoddi4+0x158>
 80002cc:	42ab      	cmp	r3, r5
 80002ce:	d302      	bcc.n	80002d6 <__udivmoddi4+0xce>
 80002d0:	4282      	cmp	r2, r0
 80002d2:	f200 80f8 	bhi.w	80004c6 <__udivmoddi4+0x2be>
 80002d6:	1a84      	subs	r4, r0, r2
 80002d8:	eb65 0203 	sbc.w	r2, r5, r3
 80002dc:	2001      	movs	r0, #1
 80002de:	4617      	mov	r7, r2
 80002e0:	2e00      	cmp	r6, #0
 80002e2:	d0e2      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	e9c6 4700 	strd	r4, r7, [r6]
 80002e8:	e7df      	b.n	80002aa <__udivmoddi4+0xa2>
 80002ea:	b902      	cbnz	r2, 80002ee <__udivmoddi4+0xe6>
 80002ec:	deff      	udf	#255	; 0xff
 80002ee:	fab2 f382 	clz	r3, r2
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	f040 8090 	bne.w	8000418 <__udivmoddi4+0x210>
 80002f8:	1a8a      	subs	r2, r1, r2
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2101      	movs	r1, #1
 8000304:	fbb2 f5f7 	udiv	r5, r2, r7
 8000308:	fb07 2015 	mls	r0, r7, r5, r2
 800030c:	0c22      	lsrs	r2, r4, #16
 800030e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000312:	fb0e f005 	mul.w	r0, lr, r5
 8000316:	4290      	cmp	r0, r2
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x124>
 800031a:	eb1c 0202 	adds.w	r2, ip, r2
 800031e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4290      	cmp	r0, r2
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2b8>
 800032a:	4645      	mov	r5, r8
 800032c:	1a12      	subs	r2, r2, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb2 f0f7 	udiv	r0, r2, r7
 8000334:	fb07 2210 	mls	r2, r7, r0, r2
 8000338:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x14e>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 32ff 	add.w	r2, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x14c>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2c2>
 8000354:	4610      	mov	r0, r2
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035e:	e79f      	b.n	80002a0 <__udivmoddi4+0x98>
 8000360:	f1c1 0720 	rsb	r7, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa05 f401 	lsl.w	r4, r5, r1
 8000372:	fa20 f307 	lsr.w	r3, r0, r7
 8000376:	40fd      	lsrs	r5, r7
 8000378:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037c:	4323      	orrs	r3, r4
 800037e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000382:	fa1f fe8c 	uxth.w	lr, ip
 8000386:	fb09 5518 	mls	r5, r9, r8, r5
 800038a:	0c1c      	lsrs	r4, r3, #16
 800038c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000390:	fb08 f50e 	mul.w	r5, r8, lr
 8000394:	42a5      	cmp	r5, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	fa00 f001 	lsl.w	r0, r0, r1
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2b4>
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2b4>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4464      	add	r4, ip
 80003b8:	1b64      	subs	r4, r4, r5
 80003ba:	b29d      	uxth	r5, r3
 80003bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c0:	fb09 4413 	mls	r4, r9, r3, r4
 80003c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2ac>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2ac>
 80003de:	3b02      	subs	r3, #2
 80003e0:	4464      	add	r4, ip
 80003e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e6:	fba3 9502 	umull	r9, r5, r3, r2
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	42ac      	cmp	r4, r5
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46ae      	mov	lr, r5
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x29c>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x298>
 80003f8:	b156      	cbz	r6, 8000410 <__udivmoddi4+0x208>
 80003fa:	ebb0 0208 	subs.w	r2, r0, r8
 80003fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000402:	fa04 f707 	lsl.w	r7, r4, r7
 8000406:	40ca      	lsrs	r2, r1
 8000408:	40cc      	lsrs	r4, r1
 800040a:	4317      	orrs	r7, r2
 800040c:	e9c6 7400 	strd	r7, r4, [r6]
 8000410:	4618      	mov	r0, r3
 8000412:	2100      	movs	r1, #0
 8000414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000418:	f1c3 0120 	rsb	r1, r3, #32
 800041c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000420:	fa20 f201 	lsr.w	r2, r0, r1
 8000424:	fa25 f101 	lsr.w	r1, r5, r1
 8000428:	409d      	lsls	r5, r3
 800042a:	432a      	orrs	r2, r5
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb1 f0f7 	udiv	r0, r1, r7
 8000438:	fb07 1510 	mls	r5, r7, r0, r1
 800043c:	0c11      	lsrs	r1, r2, #16
 800043e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000442:	fb00 f50e 	mul.w	r5, r0, lr
 8000446:	428d      	cmp	r5, r1
 8000448:	fa04 f403 	lsl.w	r4, r4, r3
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x258>
 800044e:	eb1c 0101 	adds.w	r1, ip, r1
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 8000458:	428d      	cmp	r5, r1
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800045c:	3802      	subs	r0, #2
 800045e:	4461      	add	r1, ip
 8000460:	1b49      	subs	r1, r1, r5
 8000462:	b292      	uxth	r2, r2
 8000464:	fbb1 f5f7 	udiv	r5, r1, r7
 8000468:	fb07 1115 	mls	r1, r7, r5, r1
 800046c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000470:	fb05 f10e 	mul.w	r1, r5, lr
 8000474:	4291      	cmp	r1, r2
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x282>
 8000478:	eb1c 0202 	adds.w	r2, ip, r2
 800047c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 8000482:	4291      	cmp	r1, r2
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000486:	3d02      	subs	r5, #2
 8000488:	4462      	add	r2, ip
 800048a:	1a52      	subs	r2, r2, r1
 800048c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0xfc>
 8000492:	4631      	mov	r1, r6
 8000494:	4630      	mov	r0, r6
 8000496:	e708      	b.n	80002aa <__udivmoddi4+0xa2>
 8000498:	4639      	mov	r1, r7
 800049a:	e6e6      	b.n	800026a <__udivmoddi4+0x62>
 800049c:	4610      	mov	r0, r2
 800049e:	e6fb      	b.n	8000298 <__udivmoddi4+0x90>
 80004a0:	4548      	cmp	r0, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ac:	3b01      	subs	r3, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004b0:	4645      	mov	r5, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x282>
 80004b4:	462b      	mov	r3, r5
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x258>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004c0:	3d02      	subs	r5, #2
 80004c2:	4462      	add	r2, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x124>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e70a      	b.n	80002e0 <__udivmoddi4+0xd8>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x14e>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <main>:
void SystemInit_clk(void);
void SystemClock_Config(void);
void Delay_ms(uint32_t ms);

int main(void)
{
 80004d4:	b590      	push	{r4, r7, lr}
 80004d6:	b085      	sub	sp, #20
 80004d8:	af00      	add	r7, sp, #0
  HAL_Init();
 80004da:	f002 f863 	bl	80025a4 <HAL_Init>
  SystemInit_clk();
 80004de:	f000 f80d 	bl	80004fc <SystemInit_clk>
  bsp_Init();
 80004e2:	f002 f84d 	bl	8002580 <bsp_Init>

  LCD_InitHard();
 80004e6:	f001 fc4b 	bl	8001d80 <LCD_InitHard>

  // 변수 선언
  char message[] = "Hello, UART1!\r\n";
 80004ea:	4b03      	ldr	r3, [pc, #12]	; (80004f8 <main+0x24>)
 80004ec:	463c      	mov	r4, r7
 80004ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80004f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  HAL_StatusTypeDef status;

  while (1)
 80004f4:	e7fe      	b.n	80004f4 <main+0x20>
 80004f6:	bf00      	nop
 80004f8:	08003580 	.word	0x08003580

080004fc <SystemInit_clk>:
{
  HAL_Delay(ms);
}

void SystemInit_clk(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
	SystemClock_Config();
 8000500:	f000 f816 	bl	8000530 <SystemClock_Config>

	FLASH->ACR |= FLASH_ACR_LATENCY_5WS;
 8000504:	4b09      	ldr	r3, [pc, #36]	; (800052c <SystemInit_clk+0x30>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	4a08      	ldr	r2, [pc, #32]	; (800052c <SystemInit_clk+0x30>)
 800050a:	f043 0305 	orr.w	r3, r3, #5
 800050e:	6013      	str	r3, [r2, #0]

	FLASH->ACR |= FLASH_ACR_ICEN | FLASH_ACR_DCEN;
 8000510:	4b06      	ldr	r3, [pc, #24]	; (800052c <SystemInit_clk+0x30>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	4a05      	ldr	r2, [pc, #20]	; (800052c <SystemInit_clk+0x30>)
 8000516:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800051a:	6013      	str	r3, [r2, #0]

	/* Set the VDD voltage to 3.3V (Main regulator output voltage scale 1) */
	// STM32F4의 경우 디폴트 설정이 scale1 모드임.

	/* Enable the Prefetch buffer (already disabled in the original config) */
	FLASH->ACR |= FLASH_ACR_PRFTEN;
 800051c:	4b03      	ldr	r3, [pc, #12]	; (800052c <SystemInit_clk+0x30>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	4a02      	ldr	r2, [pc, #8]	; (800052c <SystemInit_clk+0x30>)
 8000522:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000526:	6013      	str	r3, [r2, #0]
}
 8000528:	bf00      	nop
 800052a:	bd80      	pop	{r7, pc}
 800052c:	40023c00 	.word	0x40023c00

08000530 <SystemClock_Config>:


void SystemClock_Config(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b094      	sub	sp, #80	; 0x50
 8000534:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000536:	f107 0320 	add.w	r3, r7, #32
 800053a:	2230      	movs	r2, #48	; 0x30
 800053c:	2100      	movs	r1, #0
 800053e:	4618      	mov	r0, r3
 8000540:	f002 ffe6 	bl	8003510 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000544:	f107 030c 	add.w	r3, r7, #12
 8000548:	2200      	movs	r2, #0
 800054a:	601a      	str	r2, [r3, #0]
 800054c:	605a      	str	r2, [r3, #4]
 800054e:	609a      	str	r2, [r3, #8]
 8000550:	60da      	str	r2, [r3, #12]
 8000552:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000554:	2300      	movs	r3, #0
 8000556:	60bb      	str	r3, [r7, #8]
 8000558:	4b28      	ldr	r3, [pc, #160]	; (80005fc <SystemClock_Config+0xcc>)
 800055a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800055c:	4a27      	ldr	r2, [pc, #156]	; (80005fc <SystemClock_Config+0xcc>)
 800055e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000562:	6413      	str	r3, [r2, #64]	; 0x40
 8000564:	4b25      	ldr	r3, [pc, #148]	; (80005fc <SystemClock_Config+0xcc>)
 8000566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000568:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800056c:	60bb      	str	r3, [r7, #8]
 800056e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000570:	2300      	movs	r3, #0
 8000572:	607b      	str	r3, [r7, #4]
 8000574:	4b22      	ldr	r3, [pc, #136]	; (8000600 <SystemClock_Config+0xd0>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a21      	ldr	r2, [pc, #132]	; (8000600 <SystemClock_Config+0xd0>)
 800057a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800057e:	6013      	str	r3, [r2, #0]
 8000580:	4b1f      	ldr	r3, [pc, #124]	; (8000600 <SystemClock_Config+0xd0>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000588:	607b      	str	r3, [r7, #4]
 800058a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800058c:	2301      	movs	r3, #1
 800058e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000590:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000594:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000596:	2302      	movs	r3, #2
 8000598:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800059a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800059e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80005a0:	2319      	movs	r3, #25
 80005a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005a4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005a8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005aa:	2302      	movs	r3, #2
 80005ac:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;                                  // 4
 80005ae:	2307      	movs	r3, #7
 80005b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b2:	f107 0320 	add.w	r3, r7, #32
 80005b6:	4618      	mov	r0, r3
 80005b8:	f002 fb52 	bl	8002c60 <HAL_RCC_OscConfig>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d001      	beq.n	80005c6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005c2:	f000 f81f 	bl	8000604 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c6:	230f      	movs	r3, #15
 80005c8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ca:	2302      	movs	r3, #2
 80005cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ce:	2300      	movs	r3, #0
 80005d0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005d2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005d6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005dc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005de:	f107 030c 	add.w	r3, r7, #12
 80005e2:	2105      	movs	r1, #5
 80005e4:	4618      	mov	r0, r3
 80005e6:	f002 fdb3 	bl	8003150 <HAL_RCC_ClockConfig>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005f0:	f000 f808 	bl	8000604 <Error_Handler>
  }
}
 80005f4:	bf00      	nop
 80005f6:	3750      	adds	r7, #80	; 0x50
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	40023800 	.word	0x40023800
 8000600:	40007000 	.word	0x40007000

08000604 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000608:	b672      	cpsid	i
}
 800060a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800060c:	e7fe      	b.n	800060c <Error_Handler+0x8>
	...

08000610 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000610:	b480      	push	{r7}
 8000612:	b083      	sub	sp, #12
 8000614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000616:	2300      	movs	r3, #0
 8000618:	607b      	str	r3, [r7, #4]
 800061a:	4b10      	ldr	r3, [pc, #64]	; (800065c <HAL_MspInit+0x4c>)
 800061c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800061e:	4a0f      	ldr	r2, [pc, #60]	; (800065c <HAL_MspInit+0x4c>)
 8000620:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000624:	6453      	str	r3, [r2, #68]	; 0x44
 8000626:	4b0d      	ldr	r3, [pc, #52]	; (800065c <HAL_MspInit+0x4c>)
 8000628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800062a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800062e:	607b      	str	r3, [r7, #4]
 8000630:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000632:	2300      	movs	r3, #0
 8000634:	603b      	str	r3, [r7, #0]
 8000636:	4b09      	ldr	r3, [pc, #36]	; (800065c <HAL_MspInit+0x4c>)
 8000638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800063a:	4a08      	ldr	r2, [pc, #32]	; (800065c <HAL_MspInit+0x4c>)
 800063c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000640:	6413      	str	r3, [r2, #64]	; 0x40
 8000642:	4b06      	ldr	r3, [pc, #24]	; (800065c <HAL_MspInit+0x4c>)
 8000644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000646:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800064a:	603b      	str	r3, [r7, #0]
 800064c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800064e:	bf00      	nop
 8000650:	370c      	adds	r7, #12
 8000652:	46bd      	mov	sp, r7
 8000654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop
 800065c:	40023800 	.word	0x40023800

08000660 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b084      	sub	sp, #16
 8000664:	af00      	add	r7, sp, #0
 8000666:	60f8      	str	r0, [r7, #12]
 8000668:	60b9      	str	r1, [r7, #8]
 800066a:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	2b00      	cmp	r3, #0
 8000670:	d101      	bne.n	8000676 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8000672:	2301      	movs	r3, #1
 8000674:	e038      	b.n	80006e8 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8000676:	68fb      	ldr	r3, [r7, #12]
 8000678:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800067c:	b2db      	uxtb	r3, r3
 800067e:	2b00      	cmp	r3, #0
 8000680:	d106      	bne.n	8000690 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	2200      	movs	r2, #0
 8000686:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800068a:	68f8      	ldr	r0, [r7, #12]
 800068c:	f000 f830 	bl	80006f0 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	681a      	ldr	r2, [r3, #0]
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	3308      	adds	r3, #8
 8000698:	4619      	mov	r1, r3
 800069a:	4610      	mov	r0, r2
 800069c:	f000 fc28 	bl	8000ef0 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	6818      	ldr	r0, [r3, #0]
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	689b      	ldr	r3, [r3, #8]
 80006a8:	461a      	mov	r2, r3
 80006aa:	68b9      	ldr	r1, [r7, #8]
 80006ac:	f000 fc8a 	bl	8000fc4 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	6858      	ldr	r0, [r3, #4]
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	689a      	ldr	r2, [r3, #8]
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006bc:	6879      	ldr	r1, [r7, #4]
 80006be:	f000 fcb7 	bl	8001030 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	68fa      	ldr	r2, [r7, #12]
 80006c8:	6892      	ldr	r2, [r2, #8]
 80006ca:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80006ce:	68fb      	ldr	r3, [r7, #12]
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	68fa      	ldr	r2, [r7, #12]
 80006d4:	6892      	ldr	r2, [r2, #8]
 80006d6:	f041 0101 	orr.w	r1, r1, #1
 80006da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 80006de:	68fb      	ldr	r3, [r7, #12]
 80006e0:	2201      	movs	r2, #1
 80006e2:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 80006e6:	2300      	movs	r3, #0
}
 80006e8:	4618      	mov	r0, r3
 80006ea:	3710      	adds	r7, #16
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}

080006f0 <HAL_SRAM_MspInit>:
  * @param  hsram pointer to a SRAM_HandleTypeDef structure that contains
  *                the configuration information for SRAM module.
  * @retval None
  */
__weak void HAL_SRAM_MspInit(SRAM_HandleTypeDef *hsram)
{
 80006f0:	b480      	push	{r7}
 80006f2:	b083      	sub	sp, #12
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
  UNUSED(hsram);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SRAM_MspInit could be implemented in the user file
   */
}
 80006f8:	bf00      	nop
 80006fa:	370c      	adds	r7, #12
 80006fc:	46bd      	mov	sp, r7
 80006fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000702:	4770      	bx	lr

08000704 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	2b00      	cmp	r3, #0
 8000710:	d101      	bne.n	8000716 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8000712:	2301      	movs	r3, #1
 8000714:	e03f      	b.n	8000796 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800071c:	b2db      	uxtb	r3, r3
 800071e:	2b00      	cmp	r3, #0
 8000720:	d106      	bne.n	8000730 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	2200      	movs	r2, #0
 8000726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800072a:	6878      	ldr	r0, [r7, #4]
 800072c:	f000 f837 	bl	800079e <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	2224      	movs	r2, #36	; 0x24
 8000734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	68da      	ldr	r2, [r3, #12]
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000746:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8000748:	6878      	ldr	r0, [r7, #4]
 800074a:	f000 f933 	bl	80009b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	691a      	ldr	r2, [r3, #16]
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800075c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	695a      	ldr	r2, [r3, #20]
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800076c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	68da      	ldr	r2, [r3, #12]
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800077c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	2200      	movs	r2, #0
 8000782:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	2220      	movs	r2, #32
 8000788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	2220      	movs	r2, #32
 8000790:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8000794:	2300      	movs	r3, #0
}
 8000796:	4618      	mov	r0, r3
 8000798:	3708      	adds	r7, #8
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}

0800079e <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800079e:	b480      	push	{r7}
 80007a0:	b083      	sub	sp, #12
 80007a2:	af00      	add	r7, sp, #0
 80007a4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 80007a6:	bf00      	nop
 80007a8:	370c      	adds	r7, #12
 80007aa:	46bd      	mov	sp, r7
 80007ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b0:	4770      	bx	lr

080007b2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80007b2:	b580      	push	{r7, lr}
 80007b4:	b08a      	sub	sp, #40	; 0x28
 80007b6:	af02      	add	r7, sp, #8
 80007b8:	60f8      	str	r0, [r7, #12]
 80007ba:	60b9      	str	r1, [r7, #8]
 80007bc:	603b      	str	r3, [r7, #0]
 80007be:	4613      	mov	r3, r2
 80007c0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80007c2:	2300      	movs	r3, #0
 80007c4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80007cc:	b2db      	uxtb	r3, r3
 80007ce:	2b20      	cmp	r3, #32
 80007d0:	d17c      	bne.n	80008cc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80007d2:	68bb      	ldr	r3, [r7, #8]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d002      	beq.n	80007de <HAL_UART_Transmit+0x2c>
 80007d8:	88fb      	ldrh	r3, [r7, #6]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d101      	bne.n	80007e2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80007de:	2301      	movs	r3, #1
 80007e0:	e075      	b.n	80008ce <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80007e8:	2b01      	cmp	r3, #1
 80007ea:	d101      	bne.n	80007f0 <HAL_UART_Transmit+0x3e>
 80007ec:	2302      	movs	r3, #2
 80007ee:	e06e      	b.n	80008ce <HAL_UART_Transmit+0x11c>
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	2201      	movs	r2, #1
 80007f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	2200      	movs	r2, #0
 80007fc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	2221      	movs	r2, #33	; 0x21
 8000802:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8000806:	f001 ff33 	bl	8002670 <HAL_GetTick>
 800080a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	88fa      	ldrh	r2, [r7, #6]
 8000810:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	88fa      	ldrh	r2, [r7, #6]
 8000816:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	689b      	ldr	r3, [r3, #8]
 800081c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000820:	d108      	bne.n	8000834 <HAL_UART_Transmit+0x82>
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	691b      	ldr	r3, [r3, #16]
 8000826:	2b00      	cmp	r3, #0
 8000828:	d104      	bne.n	8000834 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800082a:	2300      	movs	r3, #0
 800082c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800082e:	68bb      	ldr	r3, [r7, #8]
 8000830:	61bb      	str	r3, [r7, #24]
 8000832:	e003      	b.n	800083c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8000834:	68bb      	ldr	r3, [r7, #8]
 8000836:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8000838:	2300      	movs	r3, #0
 800083a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	2200      	movs	r2, #0
 8000840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8000844:	e02a      	b.n	800089c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000846:	683b      	ldr	r3, [r7, #0]
 8000848:	9300      	str	r3, [sp, #0]
 800084a:	697b      	ldr	r3, [r7, #20]
 800084c:	2200      	movs	r2, #0
 800084e:	2180      	movs	r1, #128	; 0x80
 8000850:	68f8      	ldr	r0, [r7, #12]
 8000852:	f000 f840 	bl	80008d6 <UART_WaitOnFlagUntilTimeout>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800085c:	2303      	movs	r3, #3
 800085e:	e036      	b.n	80008ce <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8000860:	69fb      	ldr	r3, [r7, #28]
 8000862:	2b00      	cmp	r3, #0
 8000864:	d10b      	bne.n	800087e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8000866:	69bb      	ldr	r3, [r7, #24]
 8000868:	881b      	ldrh	r3, [r3, #0]
 800086a:	461a      	mov	r2, r3
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000874:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8000876:	69bb      	ldr	r3, [r7, #24]
 8000878:	3302      	adds	r3, #2
 800087a:	61bb      	str	r3, [r7, #24]
 800087c:	e007      	b.n	800088e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800087e:	69fb      	ldr	r3, [r7, #28]
 8000880:	781a      	ldrb	r2, [r3, #0]
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8000888:	69fb      	ldr	r3, [r7, #28]
 800088a:	3301      	adds	r3, #1
 800088c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800088e:	68fb      	ldr	r3, [r7, #12]
 8000890:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8000892:	b29b      	uxth	r3, r3
 8000894:	3b01      	subs	r3, #1
 8000896:	b29a      	uxth	r2, r3
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80008a0:	b29b      	uxth	r3, r3
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d1cf      	bne.n	8000846 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80008a6:	683b      	ldr	r3, [r7, #0]
 80008a8:	9300      	str	r3, [sp, #0]
 80008aa:	697b      	ldr	r3, [r7, #20]
 80008ac:	2200      	movs	r2, #0
 80008ae:	2140      	movs	r1, #64	; 0x40
 80008b0:	68f8      	ldr	r0, [r7, #12]
 80008b2:	f000 f810 	bl	80008d6 <UART_WaitOnFlagUntilTimeout>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80008bc:	2303      	movs	r3, #3
 80008be:	e006      	b.n	80008ce <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	2220      	movs	r2, #32
 80008c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80008c8:	2300      	movs	r3, #0
 80008ca:	e000      	b.n	80008ce <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80008cc:	2302      	movs	r3, #2
  }
}
 80008ce:	4618      	mov	r0, r3
 80008d0:	3720      	adds	r7, #32
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}

080008d6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80008d6:	b580      	push	{r7, lr}
 80008d8:	b090      	sub	sp, #64	; 0x40
 80008da:	af00      	add	r7, sp, #0
 80008dc:	60f8      	str	r0, [r7, #12]
 80008de:	60b9      	str	r1, [r7, #8]
 80008e0:	603b      	str	r3, [r7, #0]
 80008e2:	4613      	mov	r3, r2
 80008e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80008e6:	e050      	b.n	800098a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80008e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80008ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008ee:	d04c      	beq.n	800098a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80008f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d007      	beq.n	8000906 <UART_WaitOnFlagUntilTimeout+0x30>
 80008f6:	f001 febb 	bl	8002670 <HAL_GetTick>
 80008fa:	4602      	mov	r2, r0
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	1ad3      	subs	r3, r2, r3
 8000900:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000902:	429a      	cmp	r2, r3
 8000904:	d241      	bcs.n	800098a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	330c      	adds	r3, #12
 800090c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800090e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000910:	e853 3f00 	ldrex	r3, [r3]
 8000914:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8000916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000918:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800091c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	330c      	adds	r3, #12
 8000924:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000926:	637a      	str	r2, [r7, #52]	; 0x34
 8000928:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800092a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800092c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800092e:	e841 2300 	strex	r3, r2, [r1]
 8000932:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8000934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000936:	2b00      	cmp	r3, #0
 8000938:	d1e5      	bne.n	8000906 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	3314      	adds	r3, #20
 8000940:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000942:	697b      	ldr	r3, [r7, #20]
 8000944:	e853 3f00 	ldrex	r3, [r3]
 8000948:	613b      	str	r3, [r7, #16]
   return(result);
 800094a:	693b      	ldr	r3, [r7, #16]
 800094c:	f023 0301 	bic.w	r3, r3, #1
 8000950:	63bb      	str	r3, [r7, #56]	; 0x38
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	3314      	adds	r3, #20
 8000958:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800095a:	623a      	str	r2, [r7, #32]
 800095c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800095e:	69f9      	ldr	r1, [r7, #28]
 8000960:	6a3a      	ldr	r2, [r7, #32]
 8000962:	e841 2300 	strex	r3, r2, [r1]
 8000966:	61bb      	str	r3, [r7, #24]
   return(result);
 8000968:	69bb      	ldr	r3, [r7, #24]
 800096a:	2b00      	cmp	r3, #0
 800096c:	d1e5      	bne.n	800093a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	2220      	movs	r2, #32
 8000972:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	2220      	movs	r2, #32
 800097a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	2200      	movs	r2, #0
 8000982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8000986:	2303      	movs	r3, #3
 8000988:	e00f      	b.n	80009aa <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	681a      	ldr	r2, [r3, #0]
 8000990:	68bb      	ldr	r3, [r7, #8]
 8000992:	4013      	ands	r3, r2
 8000994:	68ba      	ldr	r2, [r7, #8]
 8000996:	429a      	cmp	r2, r3
 8000998:	bf0c      	ite	eq
 800099a:	2301      	moveq	r3, #1
 800099c:	2300      	movne	r3, #0
 800099e:	b2db      	uxtb	r3, r3
 80009a0:	461a      	mov	r2, r3
 80009a2:	79fb      	ldrb	r3, [r7, #7]
 80009a4:	429a      	cmp	r2, r3
 80009a6:	d09f      	beq.n	80008e8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80009a8:	2300      	movs	r3, #0
}
 80009aa:	4618      	mov	r0, r3
 80009ac:	3740      	adds	r7, #64	; 0x40
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
	...

080009b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80009b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80009b8:	b0c0      	sub	sp, #256	; 0x100
 80009ba:	af00      	add	r7, sp, #0
 80009bc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80009c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	691b      	ldr	r3, [r3, #16]
 80009c8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80009cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80009d0:	68d9      	ldr	r1, [r3, #12]
 80009d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80009d6:	681a      	ldr	r2, [r3, #0]
 80009d8:	ea40 0301 	orr.w	r3, r0, r1
 80009dc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80009de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80009e2:	689a      	ldr	r2, [r3, #8]
 80009e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80009e8:	691b      	ldr	r3, [r3, #16]
 80009ea:	431a      	orrs	r2, r3
 80009ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80009f0:	695b      	ldr	r3, [r3, #20]
 80009f2:	431a      	orrs	r2, r3
 80009f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80009f8:	69db      	ldr	r3, [r3, #28]
 80009fa:	4313      	orrs	r3, r2
 80009fc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8000a00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	68db      	ldr	r3, [r3, #12]
 8000a08:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8000a0c:	f021 010c 	bic.w	r1, r1, #12
 8000a10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000a14:	681a      	ldr	r2, [r3, #0]
 8000a16:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8000a1a:	430b      	orrs	r3, r1
 8000a1c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8000a1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	695b      	ldr	r3, [r3, #20]
 8000a26:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8000a2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000a2e:	6999      	ldr	r1, [r3, #24]
 8000a30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000a34:	681a      	ldr	r2, [r3, #0]
 8000a36:	ea40 0301 	orr.w	r3, r0, r1
 8000a3a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8000a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000a40:	681a      	ldr	r2, [r3, #0]
 8000a42:	4b8f      	ldr	r3, [pc, #572]	; (8000c80 <UART_SetConfig+0x2cc>)
 8000a44:	429a      	cmp	r2, r3
 8000a46:	d005      	beq.n	8000a54 <UART_SetConfig+0xa0>
 8000a48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000a4c:	681a      	ldr	r2, [r3, #0]
 8000a4e:	4b8d      	ldr	r3, [pc, #564]	; (8000c84 <UART_SetConfig+0x2d0>)
 8000a50:	429a      	cmp	r2, r3
 8000a52:	d104      	bne.n	8000a5e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8000a54:	f002 fd48 	bl	80034e8 <HAL_RCC_GetPCLK2Freq>
 8000a58:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8000a5c:	e003      	b.n	8000a66 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8000a5e:	f002 fd2f 	bl	80034c0 <HAL_RCC_GetPCLK1Freq>
 8000a62:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000a66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000a6a:	69db      	ldr	r3, [r3, #28]
 8000a6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000a70:	f040 810c 	bne.w	8000c8c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8000a74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8000a78:	2200      	movs	r2, #0
 8000a7a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8000a7e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8000a82:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8000a86:	4622      	mov	r2, r4
 8000a88:	462b      	mov	r3, r5
 8000a8a:	1891      	adds	r1, r2, r2
 8000a8c:	65b9      	str	r1, [r7, #88]	; 0x58
 8000a8e:	415b      	adcs	r3, r3
 8000a90:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000a92:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8000a96:	4621      	mov	r1, r4
 8000a98:	eb12 0801 	adds.w	r8, r2, r1
 8000a9c:	4629      	mov	r1, r5
 8000a9e:	eb43 0901 	adc.w	r9, r3, r1
 8000aa2:	f04f 0200 	mov.w	r2, #0
 8000aa6:	f04f 0300 	mov.w	r3, #0
 8000aaa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000aae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000ab2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000ab6:	4690      	mov	r8, r2
 8000ab8:	4699      	mov	r9, r3
 8000aba:	4623      	mov	r3, r4
 8000abc:	eb18 0303 	adds.w	r3, r8, r3
 8000ac0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8000ac4:	462b      	mov	r3, r5
 8000ac6:	eb49 0303 	adc.w	r3, r9, r3
 8000aca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8000ace:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000ad2:	685b      	ldr	r3, [r3, #4]
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8000ada:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8000ade:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8000ae2:	460b      	mov	r3, r1
 8000ae4:	18db      	adds	r3, r3, r3
 8000ae6:	653b      	str	r3, [r7, #80]	; 0x50
 8000ae8:	4613      	mov	r3, r2
 8000aea:	eb42 0303 	adc.w	r3, r2, r3
 8000aee:	657b      	str	r3, [r7, #84]	; 0x54
 8000af0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8000af4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8000af8:	f7ff fb6e 	bl	80001d8 <__aeabi_uldivmod>
 8000afc:	4602      	mov	r2, r0
 8000afe:	460b      	mov	r3, r1
 8000b00:	4b61      	ldr	r3, [pc, #388]	; (8000c88 <UART_SetConfig+0x2d4>)
 8000b02:	fba3 2302 	umull	r2, r3, r3, r2
 8000b06:	095b      	lsrs	r3, r3, #5
 8000b08:	011c      	lsls	r4, r3, #4
 8000b0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8000b0e:	2200      	movs	r2, #0
 8000b10:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8000b14:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8000b18:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8000b1c:	4642      	mov	r2, r8
 8000b1e:	464b      	mov	r3, r9
 8000b20:	1891      	adds	r1, r2, r2
 8000b22:	64b9      	str	r1, [r7, #72]	; 0x48
 8000b24:	415b      	adcs	r3, r3
 8000b26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000b28:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8000b2c:	4641      	mov	r1, r8
 8000b2e:	eb12 0a01 	adds.w	sl, r2, r1
 8000b32:	4649      	mov	r1, r9
 8000b34:	eb43 0b01 	adc.w	fp, r3, r1
 8000b38:	f04f 0200 	mov.w	r2, #0
 8000b3c:	f04f 0300 	mov.w	r3, #0
 8000b40:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8000b44:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8000b48:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8000b4c:	4692      	mov	sl, r2
 8000b4e:	469b      	mov	fp, r3
 8000b50:	4643      	mov	r3, r8
 8000b52:	eb1a 0303 	adds.w	r3, sl, r3
 8000b56:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8000b5a:	464b      	mov	r3, r9
 8000b5c:	eb4b 0303 	adc.w	r3, fp, r3
 8000b60:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8000b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000b68:	685b      	ldr	r3, [r3, #4]
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8000b70:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8000b74:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8000b78:	460b      	mov	r3, r1
 8000b7a:	18db      	adds	r3, r3, r3
 8000b7c:	643b      	str	r3, [r7, #64]	; 0x40
 8000b7e:	4613      	mov	r3, r2
 8000b80:	eb42 0303 	adc.w	r3, r2, r3
 8000b84:	647b      	str	r3, [r7, #68]	; 0x44
 8000b86:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8000b8a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8000b8e:	f7ff fb23 	bl	80001d8 <__aeabi_uldivmod>
 8000b92:	4602      	mov	r2, r0
 8000b94:	460b      	mov	r3, r1
 8000b96:	4611      	mov	r1, r2
 8000b98:	4b3b      	ldr	r3, [pc, #236]	; (8000c88 <UART_SetConfig+0x2d4>)
 8000b9a:	fba3 2301 	umull	r2, r3, r3, r1
 8000b9e:	095b      	lsrs	r3, r3, #5
 8000ba0:	2264      	movs	r2, #100	; 0x64
 8000ba2:	fb02 f303 	mul.w	r3, r2, r3
 8000ba6:	1acb      	subs	r3, r1, r3
 8000ba8:	00db      	lsls	r3, r3, #3
 8000baa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8000bae:	4b36      	ldr	r3, [pc, #216]	; (8000c88 <UART_SetConfig+0x2d4>)
 8000bb0:	fba3 2302 	umull	r2, r3, r3, r2
 8000bb4:	095b      	lsrs	r3, r3, #5
 8000bb6:	005b      	lsls	r3, r3, #1
 8000bb8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8000bbc:	441c      	add	r4, r3
 8000bbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8000bc8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8000bcc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8000bd0:	4642      	mov	r2, r8
 8000bd2:	464b      	mov	r3, r9
 8000bd4:	1891      	adds	r1, r2, r2
 8000bd6:	63b9      	str	r1, [r7, #56]	; 0x38
 8000bd8:	415b      	adcs	r3, r3
 8000bda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000bdc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8000be0:	4641      	mov	r1, r8
 8000be2:	1851      	adds	r1, r2, r1
 8000be4:	6339      	str	r1, [r7, #48]	; 0x30
 8000be6:	4649      	mov	r1, r9
 8000be8:	414b      	adcs	r3, r1
 8000bea:	637b      	str	r3, [r7, #52]	; 0x34
 8000bec:	f04f 0200 	mov.w	r2, #0
 8000bf0:	f04f 0300 	mov.w	r3, #0
 8000bf4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8000bf8:	4659      	mov	r1, fp
 8000bfa:	00cb      	lsls	r3, r1, #3
 8000bfc:	4651      	mov	r1, sl
 8000bfe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8000c02:	4651      	mov	r1, sl
 8000c04:	00ca      	lsls	r2, r1, #3
 8000c06:	4610      	mov	r0, r2
 8000c08:	4619      	mov	r1, r3
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	4642      	mov	r2, r8
 8000c0e:	189b      	adds	r3, r3, r2
 8000c10:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8000c14:	464b      	mov	r3, r9
 8000c16:	460a      	mov	r2, r1
 8000c18:	eb42 0303 	adc.w	r3, r2, r3
 8000c1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8000c20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	2200      	movs	r2, #0
 8000c28:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8000c2c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8000c30:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8000c34:	460b      	mov	r3, r1
 8000c36:	18db      	adds	r3, r3, r3
 8000c38:	62bb      	str	r3, [r7, #40]	; 0x28
 8000c3a:	4613      	mov	r3, r2
 8000c3c:	eb42 0303 	adc.w	r3, r2, r3
 8000c40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000c42:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8000c46:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8000c4a:	f7ff fac5 	bl	80001d8 <__aeabi_uldivmod>
 8000c4e:	4602      	mov	r2, r0
 8000c50:	460b      	mov	r3, r1
 8000c52:	4b0d      	ldr	r3, [pc, #52]	; (8000c88 <UART_SetConfig+0x2d4>)
 8000c54:	fba3 1302 	umull	r1, r3, r3, r2
 8000c58:	095b      	lsrs	r3, r3, #5
 8000c5a:	2164      	movs	r1, #100	; 0x64
 8000c5c:	fb01 f303 	mul.w	r3, r1, r3
 8000c60:	1ad3      	subs	r3, r2, r3
 8000c62:	00db      	lsls	r3, r3, #3
 8000c64:	3332      	adds	r3, #50	; 0x32
 8000c66:	4a08      	ldr	r2, [pc, #32]	; (8000c88 <UART_SetConfig+0x2d4>)
 8000c68:	fba2 2303 	umull	r2, r3, r2, r3
 8000c6c:	095b      	lsrs	r3, r3, #5
 8000c6e:	f003 0207 	and.w	r2, r3, #7
 8000c72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4422      	add	r2, r4
 8000c7a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8000c7c:	e106      	b.n	8000e8c <UART_SetConfig+0x4d8>
 8000c7e:	bf00      	nop
 8000c80:	40011000 	.word	0x40011000
 8000c84:	40011400 	.word	0x40011400
 8000c88:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8000c8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8000c90:	2200      	movs	r2, #0
 8000c92:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8000c96:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8000c9a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8000c9e:	4642      	mov	r2, r8
 8000ca0:	464b      	mov	r3, r9
 8000ca2:	1891      	adds	r1, r2, r2
 8000ca4:	6239      	str	r1, [r7, #32]
 8000ca6:	415b      	adcs	r3, r3
 8000ca8:	627b      	str	r3, [r7, #36]	; 0x24
 8000caa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000cae:	4641      	mov	r1, r8
 8000cb0:	1854      	adds	r4, r2, r1
 8000cb2:	4649      	mov	r1, r9
 8000cb4:	eb43 0501 	adc.w	r5, r3, r1
 8000cb8:	f04f 0200 	mov.w	r2, #0
 8000cbc:	f04f 0300 	mov.w	r3, #0
 8000cc0:	00eb      	lsls	r3, r5, #3
 8000cc2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000cc6:	00e2      	lsls	r2, r4, #3
 8000cc8:	4614      	mov	r4, r2
 8000cca:	461d      	mov	r5, r3
 8000ccc:	4643      	mov	r3, r8
 8000cce:	18e3      	adds	r3, r4, r3
 8000cd0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8000cd4:	464b      	mov	r3, r9
 8000cd6:	eb45 0303 	adc.w	r3, r5, r3
 8000cda:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8000cde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8000cea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8000cee:	f04f 0200 	mov.w	r2, #0
 8000cf2:	f04f 0300 	mov.w	r3, #0
 8000cf6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	008b      	lsls	r3, r1, #2
 8000cfe:	4621      	mov	r1, r4
 8000d00:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8000d04:	4621      	mov	r1, r4
 8000d06:	008a      	lsls	r2, r1, #2
 8000d08:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8000d0c:	f7ff fa64 	bl	80001d8 <__aeabi_uldivmod>
 8000d10:	4602      	mov	r2, r0
 8000d12:	460b      	mov	r3, r1
 8000d14:	4b60      	ldr	r3, [pc, #384]	; (8000e98 <UART_SetConfig+0x4e4>)
 8000d16:	fba3 2302 	umull	r2, r3, r3, r2
 8000d1a:	095b      	lsrs	r3, r3, #5
 8000d1c:	011c      	lsls	r4, r3, #4
 8000d1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8000d22:	2200      	movs	r2, #0
 8000d24:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8000d28:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8000d2c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8000d30:	4642      	mov	r2, r8
 8000d32:	464b      	mov	r3, r9
 8000d34:	1891      	adds	r1, r2, r2
 8000d36:	61b9      	str	r1, [r7, #24]
 8000d38:	415b      	adcs	r3, r3
 8000d3a:	61fb      	str	r3, [r7, #28]
 8000d3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000d40:	4641      	mov	r1, r8
 8000d42:	1851      	adds	r1, r2, r1
 8000d44:	6139      	str	r1, [r7, #16]
 8000d46:	4649      	mov	r1, r9
 8000d48:	414b      	adcs	r3, r1
 8000d4a:	617b      	str	r3, [r7, #20]
 8000d4c:	f04f 0200 	mov.w	r2, #0
 8000d50:	f04f 0300 	mov.w	r3, #0
 8000d54:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8000d58:	4659      	mov	r1, fp
 8000d5a:	00cb      	lsls	r3, r1, #3
 8000d5c:	4651      	mov	r1, sl
 8000d5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8000d62:	4651      	mov	r1, sl
 8000d64:	00ca      	lsls	r2, r1, #3
 8000d66:	4610      	mov	r0, r2
 8000d68:	4619      	mov	r1, r3
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	4642      	mov	r2, r8
 8000d6e:	189b      	adds	r3, r3, r2
 8000d70:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8000d74:	464b      	mov	r3, r9
 8000d76:	460a      	mov	r2, r1
 8000d78:	eb42 0303 	adc.w	r3, r2, r3
 8000d7c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000d80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	2200      	movs	r2, #0
 8000d88:	67bb      	str	r3, [r7, #120]	; 0x78
 8000d8a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8000d8c:	f04f 0200 	mov.w	r2, #0
 8000d90:	f04f 0300 	mov.w	r3, #0
 8000d94:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8000d98:	4649      	mov	r1, r9
 8000d9a:	008b      	lsls	r3, r1, #2
 8000d9c:	4641      	mov	r1, r8
 8000d9e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8000da2:	4641      	mov	r1, r8
 8000da4:	008a      	lsls	r2, r1, #2
 8000da6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8000daa:	f7ff fa15 	bl	80001d8 <__aeabi_uldivmod>
 8000dae:	4602      	mov	r2, r0
 8000db0:	460b      	mov	r3, r1
 8000db2:	4611      	mov	r1, r2
 8000db4:	4b38      	ldr	r3, [pc, #224]	; (8000e98 <UART_SetConfig+0x4e4>)
 8000db6:	fba3 2301 	umull	r2, r3, r3, r1
 8000dba:	095b      	lsrs	r3, r3, #5
 8000dbc:	2264      	movs	r2, #100	; 0x64
 8000dbe:	fb02 f303 	mul.w	r3, r2, r3
 8000dc2:	1acb      	subs	r3, r1, r3
 8000dc4:	011b      	lsls	r3, r3, #4
 8000dc6:	3332      	adds	r3, #50	; 0x32
 8000dc8:	4a33      	ldr	r2, [pc, #204]	; (8000e98 <UART_SetConfig+0x4e4>)
 8000dca:	fba2 2303 	umull	r2, r3, r2, r3
 8000dce:	095b      	lsrs	r3, r3, #5
 8000dd0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000dd4:	441c      	add	r4, r3
 8000dd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8000dda:	2200      	movs	r2, #0
 8000ddc:	673b      	str	r3, [r7, #112]	; 0x70
 8000dde:	677a      	str	r2, [r7, #116]	; 0x74
 8000de0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8000de4:	4642      	mov	r2, r8
 8000de6:	464b      	mov	r3, r9
 8000de8:	1891      	adds	r1, r2, r2
 8000dea:	60b9      	str	r1, [r7, #8]
 8000dec:	415b      	adcs	r3, r3
 8000dee:	60fb      	str	r3, [r7, #12]
 8000df0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000df4:	4641      	mov	r1, r8
 8000df6:	1851      	adds	r1, r2, r1
 8000df8:	6039      	str	r1, [r7, #0]
 8000dfa:	4649      	mov	r1, r9
 8000dfc:	414b      	adcs	r3, r1
 8000dfe:	607b      	str	r3, [r7, #4]
 8000e00:	f04f 0200 	mov.w	r2, #0
 8000e04:	f04f 0300 	mov.w	r3, #0
 8000e08:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8000e0c:	4659      	mov	r1, fp
 8000e0e:	00cb      	lsls	r3, r1, #3
 8000e10:	4651      	mov	r1, sl
 8000e12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8000e16:	4651      	mov	r1, sl
 8000e18:	00ca      	lsls	r2, r1, #3
 8000e1a:	4610      	mov	r0, r2
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	4603      	mov	r3, r0
 8000e20:	4642      	mov	r2, r8
 8000e22:	189b      	adds	r3, r3, r2
 8000e24:	66bb      	str	r3, [r7, #104]	; 0x68
 8000e26:	464b      	mov	r3, r9
 8000e28:	460a      	mov	r2, r1
 8000e2a:	eb42 0303 	adc.w	r3, r2, r3
 8000e2e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	2200      	movs	r2, #0
 8000e38:	663b      	str	r3, [r7, #96]	; 0x60
 8000e3a:	667a      	str	r2, [r7, #100]	; 0x64
 8000e3c:	f04f 0200 	mov.w	r2, #0
 8000e40:	f04f 0300 	mov.w	r3, #0
 8000e44:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8000e48:	4649      	mov	r1, r9
 8000e4a:	008b      	lsls	r3, r1, #2
 8000e4c:	4641      	mov	r1, r8
 8000e4e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8000e52:	4641      	mov	r1, r8
 8000e54:	008a      	lsls	r2, r1, #2
 8000e56:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8000e5a:	f7ff f9bd 	bl	80001d8 <__aeabi_uldivmod>
 8000e5e:	4602      	mov	r2, r0
 8000e60:	460b      	mov	r3, r1
 8000e62:	4b0d      	ldr	r3, [pc, #52]	; (8000e98 <UART_SetConfig+0x4e4>)
 8000e64:	fba3 1302 	umull	r1, r3, r3, r2
 8000e68:	095b      	lsrs	r3, r3, #5
 8000e6a:	2164      	movs	r1, #100	; 0x64
 8000e6c:	fb01 f303 	mul.w	r3, r1, r3
 8000e70:	1ad3      	subs	r3, r2, r3
 8000e72:	011b      	lsls	r3, r3, #4
 8000e74:	3332      	adds	r3, #50	; 0x32
 8000e76:	4a08      	ldr	r2, [pc, #32]	; (8000e98 <UART_SetConfig+0x4e4>)
 8000e78:	fba2 2303 	umull	r2, r3, r2, r3
 8000e7c:	095b      	lsrs	r3, r3, #5
 8000e7e:	f003 020f 	and.w	r2, r3, #15
 8000e82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4422      	add	r2, r4
 8000e8a:	609a      	str	r2, [r3, #8]
}
 8000e8c:	bf00      	nop
 8000e8e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8000e92:	46bd      	mov	sp, r7
 8000e94:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000e98:	51eb851f 	.word	0x51eb851f

08000e9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ea0:	e7fe      	b.n	8000ea0 <NMI_Handler+0x4>

08000ea2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ea2:	b480      	push	{r7}
 8000ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ea6:	e7fe      	b.n	8000ea6 <HardFault_Handler+0x4>

08000ea8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eac:	e7fe      	b.n	8000eac <MemManage_Handler+0x4>

08000eae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eb2:	e7fe      	b.n	8000eb2 <BusFault_Handler+0x4>

08000eb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000eb8:	e7fe      	b.n	8000eb8 <UsageFault_Handler+0x4>

08000eba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eba:	b480      	push	{r7}
 8000ebc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ebe:	bf00      	nop
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr

08000ec8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ecc:	bf00      	nop
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr

08000ed6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eda:	bf00      	nop
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr

08000ee4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ee8:	f001 fbae 	bl	8002648 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eec:	bf00      	nop
 8000eee:	bd80      	pop	{r7, pc}

08000ef0 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b087      	sub	sp, #28
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
 8000ef8:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	681a      	ldr	r2, [r3, #0]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f04:	683a      	ldr	r2, [r7, #0]
 8000f06:	6812      	ldr	r2, [r2, #0]
 8000f08:	f023 0101 	bic.w	r1, r3, #1
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	689b      	ldr	r3, [r3, #8]
 8000f16:	2b08      	cmp	r3, #8
 8000f18:	d102      	bne.n	8000f20 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8000f1a:	2340      	movs	r3, #64	; 0x40
 8000f1c:	617b      	str	r3, [r7, #20]
 8000f1e:	e001      	b.n	8000f24 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8000f20:	2300      	movs	r3, #0
 8000f22:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8000f30:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8000f36:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8000f3c:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8000f42:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8000f48:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8000f4e:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 8000f54:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 8000f5a:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 8000f60:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 8000f66:	4313      	orrs	r3, r2
 8000f68:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	699b      	ldr	r3, [r3, #24]
 8000f6e:	693a      	ldr	r2, [r7, #16]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f78:	693a      	ldr	r2, [r7, #16]
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 8000f7e:	4b10      	ldr	r3, [pc, #64]	; (8000fc0 <FSMC_NORSRAM_Init+0xd0>)
 8000f80:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f88:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8000f90:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	681a      	ldr	r2, [r3, #0]
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	43db      	mvns	r3, r3
 8000fa0:	ea02 0103 	and.w	r1, r2, r3
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	693b      	ldr	r3, [r7, #16]
 8000faa:	4319      	orrs	r1, r3
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 8000fb2:	2300      	movs	r3, #0
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	371c      	adds	r7, #28
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr
 8000fc0:	0008fb7f 	.word	0x0008fb7f

08000fc4 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b085      	sub	sp, #20
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	60f8      	str	r0, [r7, #12]
 8000fcc:	60b9      	str	r1, [r7, #8]
 8000fce:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	1c5a      	adds	r2, r3, #1
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fda:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8000fde:	68bb      	ldr	r3, [r7, #8]
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	68bb      	ldr	r3, [r7, #8]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	011b      	lsls	r3, r3, #4
 8000fe8:	431a      	orrs	r2, r3
 8000fea:	68bb      	ldr	r3, [r7, #8]
 8000fec:	689b      	ldr	r3, [r3, #8]
 8000fee:	021b      	lsls	r3, r3, #8
 8000ff0:	431a      	orrs	r2, r3
 8000ff2:	68bb      	ldr	r3, [r7, #8]
 8000ff4:	68db      	ldr	r3, [r3, #12]
 8000ff6:	041b      	lsls	r3, r3, #16
 8000ff8:	431a      	orrs	r2, r3
 8000ffa:	68bb      	ldr	r3, [r7, #8]
 8000ffc:	691b      	ldr	r3, [r3, #16]
 8000ffe:	3b01      	subs	r3, #1
 8001000:	051b      	lsls	r3, r3, #20
 8001002:	431a      	orrs	r2, r3
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	695b      	ldr	r3, [r3, #20]
 8001008:	3b02      	subs	r3, #2
 800100a:	061b      	lsls	r3, r3, #24
 800100c:	431a      	orrs	r2, r3
 800100e:	68bb      	ldr	r3, [r7, #8]
 8001010:	699b      	ldr	r3, [r3, #24]
 8001012:	4313      	orrs	r3, r2
 8001014:	687a      	ldr	r2, [r7, #4]
 8001016:	3201      	adds	r2, #1
 8001018:	4319      	orrs	r1, r3
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif
  return HAL_OK;
 8001020:	2300      	movs	r3, #0
}
 8001022:	4618      	mov	r0, r3
 8001024:	3714      	adds	r7, #20
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
	...

08001030 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8001030:	b480      	push	{r7}
 8001032:	b085      	sub	sp, #20
 8001034:	af00      	add	r7, sp, #0
 8001036:	60f8      	str	r0, [r7, #12]
 8001038:	60b9      	str	r1, [r7, #8]
 800103a:	607a      	str	r2, [r7, #4]
 800103c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001044:	d11d      	bne.n	8001082 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	687a      	ldr	r2, [r7, #4]
 800104a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800104e:	4b13      	ldr	r3, [pc, #76]	; (800109c <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8001050:	4013      	ands	r3, r2
 8001052:	68ba      	ldr	r2, [r7, #8]
 8001054:	6811      	ldr	r1, [r2, #0]
 8001056:	68ba      	ldr	r2, [r7, #8]
 8001058:	6852      	ldr	r2, [r2, #4]
 800105a:	0112      	lsls	r2, r2, #4
 800105c:	4311      	orrs	r1, r2
 800105e:	68ba      	ldr	r2, [r7, #8]
 8001060:	6892      	ldr	r2, [r2, #8]
 8001062:	0212      	lsls	r2, r2, #8
 8001064:	4311      	orrs	r1, r2
 8001066:	68ba      	ldr	r2, [r7, #8]
 8001068:	6992      	ldr	r2, [r2, #24]
 800106a:	4311      	orrs	r1, r2
 800106c:	68ba      	ldr	r2, [r7, #8]
 800106e:	68d2      	ldr	r2, [r2, #12]
 8001070:	0412      	lsls	r2, r2, #16
 8001072:	430a      	orrs	r2, r1
 8001074:	ea43 0102 	orr.w	r1, r3, r2
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	687a      	ldr	r2, [r7, #4]
 800107c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8001080:	e005      	b.n	800108e <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	687a      	ldr	r2, [r7, #4]
 8001086:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800108a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800108e:	2300      	movs	r3, #0
}
 8001090:	4618      	mov	r0, r3
 8001092:	3714      	adds	r7, #20
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr
 800109c:	cff00000 	.word	0xcff00000

080010a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010a4:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <SystemInit+0x20>)
 80010a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010aa:	4a05      	ldr	r2, [pc, #20]	; (80010c0 <SystemInit+0x20>)
 80010ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010b4:	bf00      	nop
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	e000ed00 	.word	0xe000ed00

080010c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80010c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010fc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010c8:	480d      	ldr	r0, [pc, #52]	; (8001100 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80010ca:	490e      	ldr	r1, [pc, #56]	; (8001104 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80010cc:	4a0e      	ldr	r2, [pc, #56]	; (8001108 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010d0:	e002      	b.n	80010d8 <LoopCopyDataInit>

080010d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010d6:	3304      	adds	r3, #4

080010d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010dc:	d3f9      	bcc.n	80010d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010de:	4a0b      	ldr	r2, [pc, #44]	; (800110c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80010e0:	4c0b      	ldr	r4, [pc, #44]	; (8001110 <LoopFillZerobss+0x26>)
  movs r3, #0
 80010e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010e4:	e001      	b.n	80010ea <LoopFillZerobss>

080010e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010e8:	3204      	adds	r2, #4

080010ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010ec:	d3fb      	bcc.n	80010e6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80010ee:	f7ff ffd7 	bl	80010a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010f2:	f002 fa15 	bl	8003520 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010f6:	f7ff f9ed 	bl	80004d4 <main>
  bx  lr    
 80010fa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80010fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001100:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001104:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8001108:	080035dc 	.word	0x080035dc
  ldr r2, =_sbss
 800110c:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8001110:	2000224c 	.word	0x2000224c

08001114 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001114:	e7fe      	b.n	8001114 <ADC_IRQHandler>

08001116 <RA8875_ReadID>:
*********************************************************************************************************
*	Func name: RA8875_ReadID
*********************************************************************************************************
*/
uint16_t RA8875_ReadID(void)
{
 8001116:	b580      	push	{r7, lr}
 8001118:	af00      	add	r7, sp, #0
	return RA8875_ReadReg(0x00);
 800111a:	2000      	movs	r0, #0
 800111c:	f000 f804 	bl	8001128 <RA8875_ReadReg>
 8001120:	4603      	mov	r3, r0
 8001122:	b29b      	uxth	r3, r3
}
 8001124:	4618      	mov	r0, r3
 8001126:	bd80      	pop	{r7, pc}

08001128 <RA8875_ReadReg>:
*********************************************************************************************************
*	Func name: RA8875_WriteReg
*********************************************************************************************************
*/
static uint8_t RA8875_ReadReg(uint8_t _ucRegAddr)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	4603      	mov	r3, r0
 8001130:	71fb      	strb	r3, [r7, #7]
	RA8875_WriteCmd(_ucRegAddr);
 8001132:	79fb      	ldrb	r3, [r7, #7]
 8001134:	4618      	mov	r0, r3
 8001136:	f000 fdb9 	bl	8001cac <RA8875_WriteCmd>
	return RA8875_ReadData();
 800113a:	f000 fdc9 	bl	8001cd0 <RA8875_ReadData>
 800113e:	4603      	mov	r3, r0
}
 8001140:	4618      	mov	r0, r3
 8001142:	3708      	adds	r7, #8
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}

08001148 <RA8875_WriteReg>:
*********************************************************************************************************
*	Func name: RA8875_WriteReg
*********************************************************************************************************
*/
static void RA8875_WriteReg(uint8_t _ucRegAddr, uint8_t _ucRegValue)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	4603      	mov	r3, r0
 8001150:	460a      	mov	r2, r1
 8001152:	71fb      	strb	r3, [r7, #7]
 8001154:	4613      	mov	r3, r2
 8001156:	71bb      	strb	r3, [r7, #6]
	s_ucRA8875Busy = 1;
 8001158:	4b08      	ldr	r3, [pc, #32]	; (800117c <RA8875_WriteReg+0x34>)
 800115a:	2201      	movs	r2, #1
 800115c:	701a      	strb	r2, [r3, #0]

	RA8875_WriteCmd(_ucRegAddr);
 800115e:	79fb      	ldrb	r3, [r7, #7]
 8001160:	4618      	mov	r0, r3
 8001162:	f000 fda3 	bl	8001cac <RA8875_WriteCmd>
	RA8875_WriteData(_ucRegValue);
 8001166:	79bb      	ldrb	r3, [r7, #6]
 8001168:	4618      	mov	r0, r3
 800116a:	f000 fdc0 	bl	8001cee <RA8875_WriteData>

	s_ucRA8875Busy = 0;
 800116e:	4b03      	ldr	r3, [pc, #12]	; (800117c <RA8875_WriteReg+0x34>)
 8001170:	2200      	movs	r2, #0
 8001172:	701a      	strb	r2, [r3, #0]
}
 8001174:	bf00      	nop
 8001176:	3708      	adds	r7, #8
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	20000034 	.word	0x20000034

08001180 <RA8875_InitHard>:
*********************************************************************************************************
*	Func name: RA8875_InitHard
*********************************************************************************************************
*/
void RA8875_InitHard(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
#endif

	/* ¶ÁÈ¡ RA8875 Ð¾Æ¬¶îGPIXÒý½ÅµÄµçÆ½×´Ì¬£»1±íÊ¾4.3´çÆÁ£»0±íÊ¾7´çÆÁ
	¡¾±¸×¢¡¿ÕâÊÇ°²¸»À³µç×ÓÎªÁË±ãÓÚÍ³Ò»²âÊÔÀý³Ì£¬ÔÚLCDÄ£¿éÉÏ×öµÄÓ²¼þ±êÊ¶¡£ÔÚ×ö²úÆ·Ê±£¬²»±Ø×Ô¶¯Ê¶±ð¡£
	*/
	ucGPIX = RA8875_ReadReg(0xC7);
 8001186:	20c7      	movs	r0, #199	; 0xc7
 8001188:	f7ff ffce 	bl	8001128 <RA8875_ReadReg>
 800118c:	4603      	mov	r3, r0
 800118e:	71fb      	strb	r3, [r7, #7]

	if (ucGPIX == 1)	/* 	GPIX = 1 ±íÊ¾ 4.3 ´çÆÁ 480x272 */
 8001190:	79fb      	ldrb	r3, [r7, #7]
 8001192:	2b01      	cmp	r3, #1
 8001194:	d156      	bne.n	8001244 <RA8875_InitHard+0xc4>
	{
		/* ³õÊ¼»¯PLL.  ¾§ÕñÆµÂÊÎª25M */
		RA8875_WriteCmd(0x88);
 8001196:	2088      	movs	r0, #136	; 0x88
 8001198:	f000 fd88 	bl	8001cac <RA8875_WriteCmd>
		RA8875_Delaly1us();		/* ÑÓ³Ù1us */
 800119c:	f000 fdc8 	bl	8001d30 <RA8875_Delaly1us>
		RA8875_WriteData(10);	/* PLLDIVM [7] = 0 ;  PLLDIVN [4:0] = 10 */
 80011a0:	200a      	movs	r0, #10
 80011a2:	f000 fda4 	bl	8001cee <RA8875_WriteData>

	    RA8875_Delaly1ms();
 80011a6:	f000 fdd6 	bl	8001d56 <RA8875_Delaly1ms>

		RA8875_WriteCmd(0x89);
 80011aa:	2089      	movs	r0, #137	; 0x89
 80011ac:	f000 fd7e 	bl	8001cac <RA8875_WriteCmd>
		RA8875_Delaly1us();		/* ÑÓ³Ù1us */
 80011b0:	f000 fdbe 	bl	8001d30 <RA8875_Delaly1us>
		RA8875_WriteData(2);		/* PLLDIVK[2:0] = 2, ³ýÒÔ4 */
 80011b4:	2002      	movs	r0, #2
 80011b6:	f000 fd9a 	bl	8001cee <RA8875_WriteData>
		          = 25M * (10 + 1) / ((0 + 1) * (2 ^ 2))
				  = 68.75MHz
		*/

		/* REG[88h]»òREG[89h]±»Éè¶¨ºó£¬Îª±£Ö¤PLL Êä³öÎÈ¶¨£¬ÐëµÈ´ýÒ»¶Î¡¸ËøÆµÊ±¼ä¡¹(< 100us)¡£*/
	    RA8875_Delaly1ms();
 80011ba:	f000 fdcc 	bl	8001d56 <RA8875_Delaly1ms>
				1xb : 16-Î»MCU ½Ó¿Ú¡£ ¡¾Ñ¡Õâ¸ö¡¿
		*/
		#ifdef IF_SPI_EN
			RA8875_WriteReg(0x10, (1 <<3 ) | (0 << 1));	/* SPI½Ó¿ÚÊ±£¬ÅäÖÃ8Î»£¬65KÉ« */
		#else
			RA8875_WriteReg(0x10, (1 <<3 ) | (1 << 1));	/* ÅäÖÃ16Î»MCU²¢¿Ú£¬65KÉ« */
 80011be:	210a      	movs	r1, #10
 80011c0:	2010      	movs	r0, #16
 80011c2:	f7ff ffc1 	bl	8001148 <RA8875_WriteReg>
				00b: PCLK ÆµÂÊÖÜÆÚ= ÏµÍ³ÆµÂÊÖÜÆÚ¡£
				01b: PCLK ÆµÂÊÖÜÆÚ= 2 ±¶µÄÏµÍ³ÆµÂÊÖÜÆÚ¡£
				10b: PCLK ÆµÂÊÖÜÆÚ= 4 ±¶µÄÏµÍ³ÆµÂÊÖÜÆÚ¡£
				11b: PCLK ÆµÂÊÖÜÆÚ= 8 ±¶µÄÏµÍ³ÆµÂÊÖÜÆÚ¡£
		*/
	    RA8875_WriteReg(0x04, 0x82);    /* ÉèÖÃPCLK·´Ïà */
 80011c6:	2182      	movs	r1, #130	; 0x82
 80011c8:	2004      	movs	r0, #4
 80011ca:	f7ff ffbd 	bl	8001148 <RA8875_WriteReg>
	    RA8875_Delaly1ms();
 80011ce:	f000 fdc2 	bl	8001d56 <RA8875_Delaly1ms>

	    //Horizontal set
	    //HDWR//Horizontal Display Width Setting Bit[6:0]
	 	//Horizontal display width(pixels) = (HDWR + 1)*8
	    RA8875_WriteReg(0x14, 0x3B);
 80011d2:	213b      	movs	r1, #59	; 0x3b
 80011d4:	2014      	movs	r0, #20
 80011d6:	f7ff ffb7 	bl	8001148 <RA8875_WriteReg>
	    RA8875_WriteReg(0x15, 0x00);
 80011da:	2100      	movs	r1, #0
 80011dc:	2015      	movs	r0, #21
 80011de:	f7ff ffb3 	bl	8001148 <RA8875_WriteReg>

	    //HNDR//Horizontal Non-Display Period Bit[4:0]
	    //Horizontal Non-Display Period (pixels) = (HNDR + 1)*8
		RA8875_WriteReg(0x16, 0x01);
 80011e2:	2101      	movs	r1, #1
 80011e4:	2016      	movs	r0, #22
 80011e6:	f7ff ffaf 	bl	8001148 <RA8875_WriteReg>

	    //HSTR//HSYNC Start Position[4:0]
	    //HSYNC Start Position(PCLK) = (HSTR + 1)*8
		RA8875_WriteReg(0x17, 0x00);
 80011ea:	2100      	movs	r1, #0
 80011ec:	2017      	movs	r0, #23
 80011ee:	f7ff ffab 	bl	8001148 <RA8875_WriteReg>

	    //HPWR//HSYNC Polarity ,The period width of HSYNC.
	    //HSYNC Width [4:0]   HSYNC Pulse width(PCLK) = (HPWR + 1)*8
		RA8875_WriteReg(0x18, 0x05);
 80011f2:	2105      	movs	r1, #5
 80011f4:	2018      	movs	r0, #24
 80011f6:	f7ff ffa7 	bl	8001148 <RA8875_WriteReg>

	    //Vertical set
	    //VDHR0 //Vertical Display Height Bit [7:0]
	    //Vertical pixels = VDHR + 1
		RA8875_WriteReg(0x19, 0x0F);
 80011fa:	210f      	movs	r1, #15
 80011fc:	2019      	movs	r0, #25
 80011fe:	f7ff ffa3 	bl	8001148 <RA8875_WriteReg>

	    //VDHR1 //Vertical Display Height Bit [8]
	    //Vertical pixels = VDHR + 1
		RA8875_WriteReg(0x1A, 0x01);
 8001202:	2101      	movs	r1, #1
 8001204:	201a      	movs	r0, #26
 8001206:	f7ff ff9f 	bl	8001148 <RA8875_WriteReg>

	    //VNDR0 //Vertical Non-Display Period Bit [7:0]
	    //Vertical Non-Display area = (VNDR + 1)
		RA8875_WriteReg(0x1B, 0x02);
 800120a:	2102      	movs	r1, #2
 800120c:	201b      	movs	r0, #27
 800120e:	f7ff ff9b 	bl	8001148 <RA8875_WriteReg>

	    //VNDR1 //Vertical Non-Display Period Bit [8]
	    //Vertical Non-Display area = (VNDR + 1)
		RA8875_WriteReg(0x1C, 0x00);
 8001212:	2100      	movs	r1, #0
 8001214:	201c      	movs	r0, #28
 8001216:	f7ff ff97 	bl	8001148 <RA8875_WriteReg>

	    //VSTR0 //VSYNC Start Position[7:0]
	    //VSYNC Start Position(PCLK) = (VSTR + 1)
		RA8875_WriteReg(0x1D, 0x07);
 800121a:	2107      	movs	r1, #7
 800121c:	201d      	movs	r0, #29
 800121e:	f7ff ff93 	bl	8001148 <RA8875_WriteReg>

	    //VSTR1 //VSYNC Start Position[8]
	    //VSYNC Start Position(PCLK) = (VSTR + 1)
		RA8875_WriteReg(0x1E, 0x00);
 8001222:	2100      	movs	r1, #0
 8001224:	201e      	movs	r0, #30
 8001226:	f7ff ff8f 	bl	8001148 <RA8875_WriteReg>

	    //VPWR //VSYNC Polarity ,VSYNC Pulse Width[6:0]
	    //VSYNC Pulse Width(PCLK) = (VPWR + 1)
	    RA8875_WriteReg(0x1F, 0x09);
 800122a:	2109      	movs	r1, #9
 800122c:	201f      	movs	r0, #31
 800122e:	f7ff ff8b 	bl	8001148 <RA8875_WriteReg>


	    g_LcdHeight = LCD_43_HEIGHT;
 8001232:	4b3d      	ldr	r3, [pc, #244]	; (8001328 <RA8875_InitHard+0x1a8>)
 8001234:	f44f 7288 	mov.w	r2, #272	; 0x110
 8001238:	801a      	strh	r2, [r3, #0]
		g_LcdWidth = LCD_43_WIDTH;
 800123a:	4b3c      	ldr	r3, [pc, #240]	; (800132c <RA8875_InitHard+0x1ac>)
 800123c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001240:	801a      	strh	r2, [r3, #0]
 8001242:	e055      	b.n	80012f0 <RA8875_InitHard+0x170>
	}
	else	/* GPIX = 0 ±íÊ¾7´çÆÁ(800x480) */
	{
	    g_LcdHeight = LCD_70_HEIGHT;
 8001244:	4b38      	ldr	r3, [pc, #224]	; (8001328 <RA8875_InitHard+0x1a8>)
 8001246:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800124a:	801a      	strh	r2, [r3, #0]
		g_LcdWidth = LCD_70_WIDTH;
 800124c:	4b37      	ldr	r3, [pc, #220]	; (800132c <RA8875_InitHard+0x1ac>)
 800124e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001252:	801a      	strh	r2, [r3, #0]

		/* ³õÊ¼»¯PLL.  ¾§ÕñÆµÂÊÎª25M */
		RA8875_WriteCmd(0x88);
 8001254:	2088      	movs	r0, #136	; 0x88
 8001256:	f000 fd29 	bl	8001cac <RA8875_WriteCmd>
		RA8875_Delaly1us();		/* ÑÓ³Ù1us */
 800125a:	f000 fd69 	bl	8001d30 <RA8875_Delaly1us>
		RA8875_WriteData(12);	/* PLLDIVM [7] = 0 ;  PLLDIVN [4:0] = 10 */
 800125e:	200c      	movs	r0, #12
 8001260:	f000 fd45 	bl	8001cee <RA8875_WriteData>

	    RA8875_Delaly1ms();
 8001264:	f000 fd77 	bl	8001d56 <RA8875_Delaly1ms>

		RA8875_WriteCmd(0x89);
 8001268:	2089      	movs	r0, #137	; 0x89
 800126a:	f000 fd1f 	bl	8001cac <RA8875_WriteCmd>
		RA8875_Delaly1us();		/* ÑÓ³Ù1us */
 800126e:	f000 fd5f 	bl	8001d30 <RA8875_Delaly1us>
		RA8875_WriteData(2);	/* PLLDIVK[2:0] = 2, ³ýÒÔ4 */
 8001272:	2002      	movs	r0, #2
 8001274:	f000 fd3b 	bl	8001cee <RA8875_WriteData>
		          = 25M * (12 + 1) / ((0 + 1) * (2 ^ 2))
				  = 81.25MHz
		*/

		/* REG[88h]»òREG[89h]±»Éè¶¨ºó£¬Îª±£Ö¤PLL Êä³öÎÈ¶¨£¬ÐëµÈ´ýÒ»¶Î¡¸ËøÆµÊ±¼ä¡¹(< 100us)¡£*/
	    RA8875_Delaly1ms();
 8001278:	f000 fd6d 	bl	8001d56 <RA8875_Delaly1ms>
				1xb : 16-Î»MCU ½Ó¿Ú¡£ ¡¾Ñ¡Õâ¸ö¡¿
		*/
		#ifdef IF_SPI_EN
			RA8875_WriteReg(0x10, (1 <<3 ) | (0 << 1));	/* SPI½Ó¿ÚÊ±£¬ÅäÖÃ8Î»£¬65KÉ« */
		#else
			RA8875_WriteReg(0x10, (1 <<3 ) | (1 << 1));	/* ÅäÖÃ16Î»MCU²¢¿Ú£¬65KÉ« */
 800127c:	210a      	movs	r1, #10
 800127e:	2010      	movs	r0, #16
 8001280:	f7ff ff62 	bl	8001148 <RA8875_WriteReg>
				00b: PCLK ÆµÂÊÖÜÆÚ= ÏµÍ³ÆµÂÊÖÜÆÚ¡£
				01b: PCLK ÆµÂÊÖÜÆÚ= 2 ±¶µÄÏµÍ³ÆµÂÊÖÜÆÚ¡£
				10b: PCLK ÆµÂÊÖÜÆÚ= 4 ±¶µÄÏµÍ³ÆµÂÊÖÜÆÚ¡£
				11b: PCLK ÆµÂÊÖÜÆÚ= 8 ±¶µÄÏµÍ³ÆµÂÊÖÜÆÚ¡£
		*/
	    RA8875_WriteReg(0x04, 0x81);
 8001284:	2181      	movs	r1, #129	; 0x81
 8001286:	2004      	movs	r0, #4
 8001288:	f7ff ff5e 	bl	8001148 <RA8875_WriteReg>
	    RA8875_Delaly1ms();
 800128c:	f000 fd63 	bl	8001d56 <RA8875_Delaly1ms>

	#if 1
		/* OTD9960 & OTA7001 ÉèÖÃ */
		RA8875_WriteReg(0x14, 0x63);
 8001290:	2163      	movs	r1, #99	; 0x63
 8001292:	2014      	movs	r0, #20
 8001294:	f7ff ff58 	bl	8001148 <RA8875_WriteReg>
		RA8875_WriteReg(0x15, 0x00);
 8001298:	2100      	movs	r1, #0
 800129a:	2015      	movs	r0, #21
 800129c:	f7ff ff54 	bl	8001148 <RA8875_WriteReg>
		RA8875_WriteReg(0x16, 0x03);
 80012a0:	2103      	movs	r1, #3
 80012a2:	2016      	movs	r0, #22
 80012a4:	f7ff ff50 	bl	8001148 <RA8875_WriteReg>
		RA8875_WriteReg(0x17, 0x03);
 80012a8:	2103      	movs	r1, #3
 80012aa:	2017      	movs	r0, #23
 80012ac:	f7ff ff4c 	bl	8001148 <RA8875_WriteReg>
		RA8875_WriteReg(0x18, 0x0B);
 80012b0:	210b      	movs	r1, #11
 80012b2:	2018      	movs	r0, #24
 80012b4:	f7ff ff48 	bl	8001148 <RA8875_WriteReg>
		RA8875_WriteReg(0x19, 0xDF);
 80012b8:	21df      	movs	r1, #223	; 0xdf
 80012ba:	2019      	movs	r0, #25
 80012bc:	f7ff ff44 	bl	8001148 <RA8875_WriteReg>
		RA8875_WriteReg(0x1A, 0x01);
 80012c0:	2101      	movs	r1, #1
 80012c2:	201a      	movs	r0, #26
 80012c4:	f7ff ff40 	bl	8001148 <RA8875_WriteReg>
		RA8875_WriteReg(0x1B, 0x1F);
 80012c8:	211f      	movs	r1, #31
 80012ca:	201b      	movs	r0, #27
 80012cc:	f7ff ff3c 	bl	8001148 <RA8875_WriteReg>
		RA8875_WriteReg(0x1C, 0x00);
 80012d0:	2100      	movs	r1, #0
 80012d2:	201c      	movs	r0, #28
 80012d4:	f7ff ff38 	bl	8001148 <RA8875_WriteReg>
		RA8875_WriteReg(0x1D, 0x16);
 80012d8:	2116      	movs	r1, #22
 80012da:	201d      	movs	r0, #29
 80012dc:	f7ff ff34 	bl	8001148 <RA8875_WriteReg>
		RA8875_WriteReg(0x1E, 0x00);
 80012e0:	2100      	movs	r1, #0
 80012e2:	201e      	movs	r0, #30
 80012e4:	f7ff ff30 	bl	8001148 <RA8875_WriteReg>
		RA8875_WriteReg(0x1F, 0x01);
 80012e8:	2101      	movs	r1, #1
 80012ea:	201f      	movs	r0, #31
 80012ec:	f7ff ff2c 	bl	8001148 <RA8875_WriteReg>
	    RA8875_WriteReg(0x1F, 0x01);
	#endif
	}

	/* ÉèÖÃTFTÃæ°åµÄ DISP  Òý½ÅÎª¸ß£¬Ê¹ÄÜÃæ°å. °²¸»À³TFTÄ£¿éµÄDISPÒý½ÅÁ¬½Óµ½RA8875Ð¾Æ¬µÄGP0X½Å */
	RA8875_WriteReg(0xC7, 0x01);	/* DISP = 1 */
 80012f0:	2101      	movs	r1, #1
 80012f2:	20c7      	movs	r0, #199	; 0xc7
 80012f4:	f7ff ff28 	bl	8001148 <RA8875_WriteReg>

	/* LCD ÏÔÊ¾/¹Ø±ÕÑ¶ºÅ (LCD Display on) */
	RA8875_WriteReg(0x01, 0x80);
 80012f8:	2180      	movs	r1, #128	; 0x80
 80012fa:	2001      	movs	r0, #1
 80012fc:	f7ff ff24 	bl	8001148 <RA8875_WriteReg>

		Bit 0 ÄÚ´æ¶ÁÈ¡¹â±ê×Ô¶¯Ôö¼Ó¹¦ÄÜÉè¶¨
			0 : µ±ÄÚ´æ¶ÁÈ¡Ê±¹â±êÎ»ÖÃ×Ô¶¯¼ÓÒ»¡£
			1 : µ±ÄÚ´æ¶ÁÈ¡Ê±¹â±êÎ»ÖÃ²»»á×Ô¶¯¼ÓÒ»¡£
	*/
	RA8875_WriteReg(0x40, 0x00);	/* Ñ¡Ôñ»æÍ¼Ä£Ê½ */
 8001300:	2100      	movs	r1, #0
 8001302:	2040      	movs	r0, #64	; 0x40
 8001304:	f7ff ff20 	bl	8001148 <RA8875_WriteReg>


	/* 	REG[41h] Memory Write Control Register1 (MWCR1)
		Ð´ÈëÄ¿µÄÎ»ÖÃ£¬Ñ¡ÔñÍ¼²ã1
	*/
	RA8875_WriteReg(0x41, 0x00);	/* Ñ¡Ôñ»æÍ¼Ä£Ê½, Ä¿µÄÎªCGRAM */
 8001308:	2100      	movs	r1, #0
 800130a:	2041      	movs	r0, #65	; 0x41
 800130c:	f7ff ff1c 	bl	8001148 <RA8875_WriteReg>

	RA8875_SetDispWin(0, 0, g_LcdHeight, g_LcdWidth);
 8001310:	4b05      	ldr	r3, [pc, #20]	; (8001328 <RA8875_InitHard+0x1a8>)
 8001312:	881a      	ldrh	r2, [r3, #0]
 8001314:	4b05      	ldr	r3, [pc, #20]	; (800132c <RA8875_InitHard+0x1ac>)
 8001316:	881b      	ldrh	r3, [r3, #0]
 8001318:	2100      	movs	r1, #0
 800131a:	2000      	movs	r0, #0
 800131c:	f000 f808 	bl	8001330 <RA8875_SetDispWin>

#ifdef IF_SPI_EN
	RA8875_HighSpeedSPI();		/* ÅäÖÃÍê±Ïºó£¬ÇÐ»»SPIµ½¸ßËÙÄ£Ê½ */
#endif
}
 8001320:	bf00      	nop
 8001322:	3708      	adds	r7, #8
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	2000000a 	.word	0x2000000a
 800132c:	2000000c 	.word	0x2000000c

08001330 <RA8875_SetDispWin>:
*********************************************************************************************************
*	Func name: RA8875_SetDispWin
*********************************************************************************************************
*/
void RA8875_SetDispWin(uint16_t _usX, uint16_t _usY, uint16_t _usHeight, uint16_t _usWidth)
{
 8001330:	b590      	push	{r4, r7, lr}
 8001332:	b085      	sub	sp, #20
 8001334:	af00      	add	r7, sp, #0
 8001336:	4604      	mov	r4, r0
 8001338:	4608      	mov	r0, r1
 800133a:	4611      	mov	r1, r2
 800133c:	461a      	mov	r2, r3
 800133e:	4623      	mov	r3, r4
 8001340:	80fb      	strh	r3, [r7, #6]
 8001342:	4603      	mov	r3, r0
 8001344:	80bb      	strh	r3, [r7, #4]
 8001346:	460b      	mov	r3, r1
 8001348:	807b      	strh	r3, [r7, #2]
 800134a:	4613      	mov	r3, r2
 800134c:	803b      	strh	r3, [r7, #0]
		×óÉÏ½ÇÊÇ×ø±êÁãµã, É¨Ãè·½Ïò£¬ÏÈ´Ó×óµ½ÓÒ£¬ÔÙ´ÓÉÏµ½ÏÂ¡£

		Èç¹ûÐèÒª×öÊúÆÁ·½Ê½£¬ÄãÐèÒª½øÐÐÎïÀí×ø±êºÍÂß¼­×ø±êµÄ×ª»»
	*/

	RA8875_WriteReg(0x30, _usX);
 800134e:	88fb      	ldrh	r3, [r7, #6]
 8001350:	b2db      	uxtb	r3, r3
 8001352:	4619      	mov	r1, r3
 8001354:	2030      	movs	r0, #48	; 0x30
 8001356:	f7ff fef7 	bl	8001148 <RA8875_WriteReg>
    RA8875_WriteReg(0x31, _usX >> 8);
 800135a:	88fb      	ldrh	r3, [r7, #6]
 800135c:	0a1b      	lsrs	r3, r3, #8
 800135e:	b29b      	uxth	r3, r3
 8001360:	b2db      	uxtb	r3, r3
 8001362:	4619      	mov	r1, r3
 8001364:	2031      	movs	r0, #49	; 0x31
 8001366:	f7ff feef 	bl	8001148 <RA8875_WriteReg>

	RA8875_WriteReg(0x32, _usY);
 800136a:	88bb      	ldrh	r3, [r7, #4]
 800136c:	b2db      	uxtb	r3, r3
 800136e:	4619      	mov	r1, r3
 8001370:	2032      	movs	r0, #50	; 0x32
 8001372:	f7ff fee9 	bl	8001148 <RA8875_WriteReg>
    RA8875_WriteReg(0x33, _usY >> 8);
 8001376:	88bb      	ldrh	r3, [r7, #4]
 8001378:	0a1b      	lsrs	r3, r3, #8
 800137a:	b29b      	uxth	r3, r3
 800137c:	b2db      	uxtb	r3, r3
 800137e:	4619      	mov	r1, r3
 8001380:	2033      	movs	r0, #51	; 0x33
 8001382:	f7ff fee1 	bl	8001148 <RA8875_WriteReg>

	usTemp = _usWidth + _usX - 1;
 8001386:	883a      	ldrh	r2, [r7, #0]
 8001388:	88fb      	ldrh	r3, [r7, #6]
 800138a:	4413      	add	r3, r2
 800138c:	b29b      	uxth	r3, r3
 800138e:	3b01      	subs	r3, #1
 8001390:	81fb      	strh	r3, [r7, #14]
	RA8875_WriteReg(0x34, usTemp);
 8001392:	89fb      	ldrh	r3, [r7, #14]
 8001394:	b2db      	uxtb	r3, r3
 8001396:	4619      	mov	r1, r3
 8001398:	2034      	movs	r0, #52	; 0x34
 800139a:	f7ff fed5 	bl	8001148 <RA8875_WriteReg>
    RA8875_WriteReg(0x35, usTemp >> 8);
 800139e:	89fb      	ldrh	r3, [r7, #14]
 80013a0:	0a1b      	lsrs	r3, r3, #8
 80013a2:	b29b      	uxth	r3, r3
 80013a4:	b2db      	uxtb	r3, r3
 80013a6:	4619      	mov	r1, r3
 80013a8:	2035      	movs	r0, #53	; 0x35
 80013aa:	f7ff fecd 	bl	8001148 <RA8875_WriteReg>

	usTemp = _usHeight + _usY - 1;
 80013ae:	887a      	ldrh	r2, [r7, #2]
 80013b0:	88bb      	ldrh	r3, [r7, #4]
 80013b2:	4413      	add	r3, r2
 80013b4:	b29b      	uxth	r3, r3
 80013b6:	3b01      	subs	r3, #1
 80013b8:	81fb      	strh	r3, [r7, #14]
	RA8875_WriteReg(0x36, usTemp);
 80013ba:	89fb      	ldrh	r3, [r7, #14]
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	4619      	mov	r1, r3
 80013c0:	2036      	movs	r0, #54	; 0x36
 80013c2:	f7ff fec1 	bl	8001148 <RA8875_WriteReg>
    RA8875_WriteReg(0x37, usTemp >> 8);
 80013c6:	89fb      	ldrh	r3, [r7, #14]
 80013c8:	0a1b      	lsrs	r3, r3, #8
 80013ca:	b29b      	uxth	r3, r3
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	4619      	mov	r1, r3
 80013d0:	2037      	movs	r0, #55	; 0x37
 80013d2:	f7ff feb9 	bl	8001148 <RA8875_WriteReg>

	RA8875_SetCursor(_usX, _usY);
 80013d6:	88ba      	ldrh	r2, [r7, #4]
 80013d8:	88fb      	ldrh	r3, [r7, #6]
 80013da:	4611      	mov	r1, r2
 80013dc:	4618      	mov	r0, r3
 80013de:	f000 f819 	bl	8001414 <RA8875_SetCursor>

	/* ±£´æµ±Ç°´°¿ÚÐÅÏ¢£¬Ìá¸ßÒÔºóµ¥É«Ìî³ä²Ù×÷µÄÐ§ÂÊ.
	ÁíÍâÒ»ÖÖ×ö·¨ÊÇÍ¨¹ý¶ÁÈ¡0x30-0x37¼Ä´æÆ÷»ñµÃµ±Ç°´°¿Ú£¬²»¹ýÐ§ÂÊ½ÏµÍ */
	s_WinX = _usX;
 80013e2:	4a08      	ldr	r2, [pc, #32]	; (8001404 <RA8875_SetDispWin+0xd4>)
 80013e4:	88fb      	ldrh	r3, [r7, #6]
 80013e6:	8013      	strh	r3, [r2, #0]
	s_WinY = _usY;
 80013e8:	4a07      	ldr	r2, [pc, #28]	; (8001408 <RA8875_SetDispWin+0xd8>)
 80013ea:	88bb      	ldrh	r3, [r7, #4]
 80013ec:	8013      	strh	r3, [r2, #0]
	s_WinHeight = _usHeight;
 80013ee:	4a07      	ldr	r2, [pc, #28]	; (800140c <RA8875_SetDispWin+0xdc>)
 80013f0:	887b      	ldrh	r3, [r7, #2]
 80013f2:	8013      	strh	r3, [r2, #0]
	s_WinWidth = _usWidth;
 80013f4:	4a06      	ldr	r2, [pc, #24]	; (8001410 <RA8875_SetDispWin+0xe0>)
 80013f6:	883b      	ldrh	r3, [r7, #0]
 80013f8:	8013      	strh	r3, [r2, #0]
}
 80013fa:	bf00      	nop
 80013fc:	3714      	adds	r7, #20
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd90      	pop	{r4, r7, pc}
 8001402:	bf00      	nop
 8001404:	20000036 	.word	0x20000036
 8001408:	20000038 	.word	0x20000038
 800140c:	20000004 	.word	0x20000004
 8001410:	20000006 	.word	0x20000006

08001414 <RA8875_SetCursor>:
*********************************************************************************************************
*	Funa name: RA8875_SetCursor
*********************************************************************************************************
*/
static void RA8875_SetCursor(uint16_t _usX, uint16_t _usY)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	4603      	mov	r3, r0
 800141c:	460a      	mov	r2, r1
 800141e:	80fb      	strh	r3, [r7, #6]
 8001420:	4613      	mov	r3, r2
 8001422:	80bb      	strh	r3, [r7, #4]
	/* ÉèÖÃÄÚ´æÐ´¹â±êµÄ×ø±ê ¡¾×¢Òâ0x80-83 ÊÇ¹â±êÍ¼ÐÎµÄ×ø±ê¡¿ */
	RA8875_WriteReg(0x46, _usX);
 8001424:	88fb      	ldrh	r3, [r7, #6]
 8001426:	b2db      	uxtb	r3, r3
 8001428:	4619      	mov	r1, r3
 800142a:	2046      	movs	r0, #70	; 0x46
 800142c:	f7ff fe8c 	bl	8001148 <RA8875_WriteReg>
	RA8875_WriteReg(0x47, _usX >> 8);
 8001430:	88fb      	ldrh	r3, [r7, #6]
 8001432:	0a1b      	lsrs	r3, r3, #8
 8001434:	b29b      	uxth	r3, r3
 8001436:	b2db      	uxtb	r3, r3
 8001438:	4619      	mov	r1, r3
 800143a:	2047      	movs	r0, #71	; 0x47
 800143c:	f7ff fe84 	bl	8001148 <RA8875_WriteReg>
	RA8875_WriteReg(0x48, _usY);
 8001440:	88bb      	ldrh	r3, [r7, #4]
 8001442:	b2db      	uxtb	r3, r3
 8001444:	4619      	mov	r1, r3
 8001446:	2048      	movs	r0, #72	; 0x48
 8001448:	f7ff fe7e 	bl	8001148 <RA8875_WriteReg>
	RA8875_WriteReg(0x49, _usY >> 8);
 800144c:	88bb      	ldrh	r3, [r7, #4]
 800144e:	0a1b      	lsrs	r3, r3, #8
 8001450:	b29b      	uxth	r3, r3
 8001452:	b2db      	uxtb	r3, r3
 8001454:	4619      	mov	r1, r3
 8001456:	2049      	movs	r0, #73	; 0x49
 8001458:	f7ff fe76 	bl	8001148 <RA8875_WriteReg>
}
 800145c:	bf00      	nop
 800145e:	3708      	adds	r7, #8
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}

08001464 <RA8875_ClrScr>:
*********************************************************************************************************
*	Func name: RA8875_ClrScr
*********************************************************************************************************
*/
void RA8875_ClrScr(uint16_t _usColor)
{
 8001464:	b590      	push	{r4, r7, lr}
 8001466:	b085      	sub	sp, #20
 8001468:	af02      	add	r7, sp, #8
 800146a:	4603      	mov	r3, r0
 800146c:	80fb      	strh	r3, [r7, #6]
	BTE_SetTarBlock(s_WinX, s_WinY, s_WinHeight, s_WinWidth, 0);	/* ÉèÖÃBTEÎ»ÖÃºÍ¿í¶È¸ß¶ÈÒÔ¼°Ä¿±êÍ¼²ã£¨0»ò1£© */
 800146e:	4b0d      	ldr	r3, [pc, #52]	; (80014a4 <RA8875_ClrScr+0x40>)
 8001470:	8818      	ldrh	r0, [r3, #0]
 8001472:	4b0d      	ldr	r3, [pc, #52]	; (80014a8 <RA8875_ClrScr+0x44>)
 8001474:	8819      	ldrh	r1, [r3, #0]
 8001476:	4b0d      	ldr	r3, [pc, #52]	; (80014ac <RA8875_ClrScr+0x48>)
 8001478:	881a      	ldrh	r2, [r3, #0]
 800147a:	4b0d      	ldr	r3, [pc, #52]	; (80014b0 <RA8875_ClrScr+0x4c>)
 800147c:	881b      	ldrh	r3, [r3, #0]
 800147e:	2400      	movs	r4, #0
 8001480:	9400      	str	r4, [sp, #0]
 8001482:	f000 f817 	bl	80014b4 <BTE_SetTarBlock>
	BTE_SetOperateCode(0x0C);		/* Éè¶¨BTE ²Ù×÷ÂëºÍ¹âÕ¤ÔËËãÂë  REG[51h] Bit[3:0] = 0Ch */
 8001486:	200c      	movs	r0, #12
 8001488:	f000 f86e 	bl	8001568 <BTE_SetOperateCode>
	RA8875_SetFrontColor(_usColor);	/* ÉèÖÃBTEÇ°¾°É« */
 800148c:	88fb      	ldrh	r3, [r7, #6]
 800148e:	4618      	mov	r0, r3
 8001490:	f000 f878 	bl	8001584 <RA8875_SetFrontColor>
	BTE_Start();					/* ¿ªÆôBTE ¹¦ÄÜ */
 8001494:	f000 f89a 	bl	80015cc <BTE_Start>
	BTE_Wait();
 8001498:	f000 f8a8 	bl	80015ec <BTE_Wait>
}
 800149c:	bf00      	nop
 800149e:	370c      	adds	r7, #12
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd90      	pop	{r4, r7, pc}
 80014a4:	20000036 	.word	0x20000036
 80014a8:	20000038 	.word	0x20000038
 80014ac:	20000004 	.word	0x20000004
 80014b0:	20000006 	.word	0x20000006

080014b4 <BTE_SetTarBlock>:
*********************************************************************************************************
*	Func name: BTE_SetTarBlock
*********************************************************************************************************
*/
static void BTE_SetTarBlock(uint16_t _usX, uint16_t _usY, uint16_t _usHeight, uint16_t _usWidth, uint8_t _ucLayer)
{
 80014b4:	b590      	push	{r4, r7, lr}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	4604      	mov	r4, r0
 80014bc:	4608      	mov	r0, r1
 80014be:	4611      	mov	r1, r2
 80014c0:	461a      	mov	r2, r3
 80014c2:	4623      	mov	r3, r4
 80014c4:	80fb      	strh	r3, [r7, #6]
 80014c6:	4603      	mov	r3, r0
 80014c8:	80bb      	strh	r3, [r7, #4]
 80014ca:	460b      	mov	r3, r1
 80014cc:	807b      	strh	r3, [r7, #2]
 80014ce:	4613      	mov	r3, r2
 80014d0:	803b      	strh	r3, [r7, #0]
	/* ÉèÖÃÆðµã×ø±ê */
	RA8875_WriteReg(0x58, _usX);
 80014d2:	88fb      	ldrh	r3, [r7, #6]
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	4619      	mov	r1, r3
 80014d8:	2058      	movs	r0, #88	; 0x58
 80014da:	f7ff fe35 	bl	8001148 <RA8875_WriteReg>
	RA8875_WriteReg(0x59, _usX >> 8);
 80014de:	88fb      	ldrh	r3, [r7, #6]
 80014e0:	0a1b      	lsrs	r3, r3, #8
 80014e2:	b29b      	uxth	r3, r3
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	4619      	mov	r1, r3
 80014e8:	2059      	movs	r0, #89	; 0x59
 80014ea:	f7ff fe2d 	bl	8001148 <RA8875_WriteReg>

	RA8875_WriteReg(0x5A, _usY);
 80014ee:	88bb      	ldrh	r3, [r7, #4]
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	4619      	mov	r1, r3
 80014f4:	205a      	movs	r0, #90	; 0x5a
 80014f6:	f7ff fe27 	bl	8001148 <RA8875_WriteReg>
	if (_ucLayer == 0)	/* Í¼²ã2 */
 80014fa:	7e3b      	ldrb	r3, [r7, #24]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d108      	bne.n	8001512 <BTE_SetTarBlock+0x5e>
	{
		RA8875_WriteReg(0x5B, _usY >> 8);
 8001500:	88bb      	ldrh	r3, [r7, #4]
 8001502:	0a1b      	lsrs	r3, r3, #8
 8001504:	b29b      	uxth	r3, r3
 8001506:	b2db      	uxtb	r3, r3
 8001508:	4619      	mov	r1, r3
 800150a:	205b      	movs	r0, #91	; 0x5b
 800150c:	f7ff fe1c 	bl	8001148 <RA8875_WriteReg>
 8001510:	e00a      	b.n	8001528 <BTE_SetTarBlock+0x74>
	}
	else
	{
		RA8875_WriteReg(0x5B, (1 << 7) | (_usY >> 8));	/* Bit7 ±íÊ¾Í¼²ã£¬ 0 Í¼²ã1£» 1 Í¼²ã2*/
 8001512:	88bb      	ldrh	r3, [r7, #4]
 8001514:	0a1b      	lsrs	r3, r3, #8
 8001516:	b29b      	uxth	r3, r3
 8001518:	b2db      	uxtb	r3, r3
 800151a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800151e:	b2db      	uxtb	r3, r3
 8001520:	4619      	mov	r1, r3
 8001522:	205b      	movs	r0, #91	; 0x5b
 8001524:	f7ff fe10 	bl	8001148 <RA8875_WriteReg>
	}

	/* ÉèÖÃÇø¿é¿í¶È */
	RA8875_WriteReg(0x5C, _usWidth);
 8001528:	883b      	ldrh	r3, [r7, #0]
 800152a:	b2db      	uxtb	r3, r3
 800152c:	4619      	mov	r1, r3
 800152e:	205c      	movs	r0, #92	; 0x5c
 8001530:	f7ff fe0a 	bl	8001148 <RA8875_WriteReg>
	RA8875_WriteReg(0x5D, _usWidth >> 8);
 8001534:	883b      	ldrh	r3, [r7, #0]
 8001536:	0a1b      	lsrs	r3, r3, #8
 8001538:	b29b      	uxth	r3, r3
 800153a:	b2db      	uxtb	r3, r3
 800153c:	4619      	mov	r1, r3
 800153e:	205d      	movs	r0, #93	; 0x5d
 8001540:	f7ff fe02 	bl	8001148 <RA8875_WriteReg>

	/* ÉèÖÃÇø¿é¸ß¶È */
	RA8875_WriteReg(0x5E, _usHeight);
 8001544:	887b      	ldrh	r3, [r7, #2]
 8001546:	b2db      	uxtb	r3, r3
 8001548:	4619      	mov	r1, r3
 800154a:	205e      	movs	r0, #94	; 0x5e
 800154c:	f7ff fdfc 	bl	8001148 <RA8875_WriteReg>
	RA8875_WriteReg(0x5F, _usHeight >> 8);
 8001550:	887b      	ldrh	r3, [r7, #2]
 8001552:	0a1b      	lsrs	r3, r3, #8
 8001554:	b29b      	uxth	r3, r3
 8001556:	b2db      	uxtb	r3, r3
 8001558:	4619      	mov	r1, r3
 800155a:	205f      	movs	r0, #95	; 0x5f
 800155c:	f7ff fdf4 	bl	8001148 <RA8875_WriteReg>
}
 8001560:	bf00      	nop
 8001562:	370c      	adds	r7, #12
 8001564:	46bd      	mov	sp, r7
 8001566:	bd90      	pop	{r4, r7, pc}

08001568 <BTE_SetOperateCode>:
*********************************************************************************************************
*	Func name: BTE_SetOperateCode
*********************************************************************************************************
*/
static void BTE_SetOperateCode(uint8_t _ucOperate)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
 800156e:	4603      	mov	r3, r0
 8001570:	71fb      	strb	r3, [r7, #7]
	RA8875_WriteReg(0x51, _ucOperate);
 8001572:	79fb      	ldrb	r3, [r7, #7]
 8001574:	4619      	mov	r1, r3
 8001576:	2051      	movs	r0, #81	; 0x51
 8001578:	f7ff fde6 	bl	8001148 <RA8875_WriteReg>
}
 800157c:	bf00      	nop
 800157e:	3708      	adds	r7, #8
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}

08001584 <RA8875_SetFrontColor>:
*********************************************************************************************************
* Func name: RA8875_SetFrontColor
*********************************************************************************************************
*/
void RA8875_SetFrontColor(uint16_t _usColor)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	4603      	mov	r3, r0
 800158c:	80fb      	strh	r3, [r7, #6]
	RA8875_WriteReg(0x63, (_usColor & 0xF800) >> 11);	/* R5  */
 800158e:	88fb      	ldrh	r3, [r7, #6]
 8001590:	0adb      	lsrs	r3, r3, #11
 8001592:	b29b      	uxth	r3, r3
 8001594:	b2db      	uxtb	r3, r3
 8001596:	4619      	mov	r1, r3
 8001598:	2063      	movs	r0, #99	; 0x63
 800159a:	f7ff fdd5 	bl	8001148 <RA8875_WriteReg>
	RA8875_WriteReg(0x64, (_usColor & 0x07E0) >> 5);	/* G6 */
 800159e:	88fb      	ldrh	r3, [r7, #6]
 80015a0:	115b      	asrs	r3, r3, #5
 80015a2:	b2db      	uxtb	r3, r3
 80015a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	4619      	mov	r1, r3
 80015ac:	2064      	movs	r0, #100	; 0x64
 80015ae:	f7ff fdcb 	bl	8001148 <RA8875_WriteReg>
	RA8875_WriteReg(0x65, (_usColor & 0x001F));			/* B5 */
 80015b2:	88fb      	ldrh	r3, [r7, #6]
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	f003 031f 	and.w	r3, r3, #31
 80015ba:	b2db      	uxtb	r3, r3
 80015bc:	4619      	mov	r1, r3
 80015be:	2065      	movs	r0, #101	; 0x65
 80015c0:	f7ff fdc2 	bl	8001148 <RA8875_WriteReg>
}
 80015c4:	bf00      	nop
 80015c6:	3708      	adds	r7, #8
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}

080015cc <BTE_Start>:
*********************************************************************************************************
*	Func name: BTE_Start
*********************************************************************************************************
*/
static void BTE_Start(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
	s_ucRA8875Busy = 1;
 80015d0:	4b05      	ldr	r3, [pc, #20]	; (80015e8 <BTE_Start+0x1c>)
 80015d2:	2201      	movs	r2, #1
 80015d4:	701a      	strb	r2, [r3, #0]
	/* RA8875_WriteReg(0x50, 0x80);  ²»ÄÜÊ¹ÓÃÕâ¸öº¯Êý£¬ÒòÎªÄÚ²¿ÒÑ¾­²Ù×÷ÁË s_ucRA8875Busy ±êÖ¾ */
	RA8875_WriteCmd(0x50);	/* ÉèÖÃ¼Ä´æÆ÷µØÖ· */
 80015d6:	2050      	movs	r0, #80	; 0x50
 80015d8:	f000 fb68 	bl	8001cac <RA8875_WriteCmd>
	RA8875_WriteData(0x80);	/* Ð´Èë¼Ä´æÆ÷Öµ */
 80015dc:	2080      	movs	r0, #128	; 0x80
 80015de:	f000 fb86 	bl	8001cee <RA8875_WriteData>
}
 80015e2:	bf00      	nop
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	20000034 	.word	0x20000034

080015ec <BTE_Wait>:
*********************************************************************************************************
*	Func name: BTE_Wait
*********************************************************************************************************
*/
static void BTE_Wait(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
	while ((RA8875_ReadStatus() & 0x40) == 0x40);
 80015f0:	bf00      	nop
 80015f2:	f000 fb8d 	bl	8001d10 <RA8875_ReadStatus>
 80015f6:	4603      	mov	r3, r0
 80015f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015fc:	2b40      	cmp	r3, #64	; 0x40
 80015fe:	d0f8      	beq.n	80015f2 <BTE_Wait+0x6>
	s_ucRA8875Busy = 0;
 8001600:	4b02      	ldr	r3, [pc, #8]	; (800160c <BTE_Wait+0x20>)
 8001602:	2200      	movs	r2, #0
 8001604:	701a      	strb	r2, [r3, #0]
}
 8001606:	bf00      	nop
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	20000034 	.word	0x20000034

08001610 <RA8875_SetBackLight>:
*	ÐÎ    ²Î:  _bright ÁÁ¶È£¬0ÊÇÃð£¬255ÊÇ×îÁÁ
*	·µ »Ø Öµ: ÎÞ
*********************************************************************************************************
*/
void RA8875_SetBackLight(uint8_t _bright)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	4603      	mov	r3, r0
 8001618:	71fb      	strb	r3, [r7, #7]
	if (_bright == 0)
 800161a:	79fb      	ldrb	r3, [r7, #7]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d104      	bne.n	800162a <RA8875_SetBackLight+0x1a>
	{
		/* ¹Ø±ÕPWM, PWM1Òý½ÅÈ±Ê¡Êä³öLOW  */
		RA8875_WriteReg(0x8A, 0 << 6);
 8001620:	2100      	movs	r1, #0
 8001622:	208a      	movs	r0, #138	; 0x8a
 8001624:	f7ff fd90 	bl	8001148 <RA8875_WriteReg>
		RA8875_WriteReg(0x8A, (1 << 7) | 12);

		/* REG[8Bh] PWM1 Duty Cycle Register (P1DCR) */
		RA8875_WriteReg(0x8B, _bright);
	}
}
 8001628:	e010      	b.n	800164c <RA8875_SetBackLight+0x3c>
	else if (_bright == BRIGHT_MAX)	/* ×î´óÁÁ¶È */
 800162a:	79fb      	ldrb	r3, [r7, #7]
 800162c:	2bff      	cmp	r3, #255	; 0xff
 800162e:	d104      	bne.n	800163a <RA8875_SetBackLight+0x2a>
		RA8875_WriteReg(0x8A, 1 << 6);
 8001630:	2140      	movs	r1, #64	; 0x40
 8001632:	208a      	movs	r0, #138	; 0x8a
 8001634:	f7ff fd88 	bl	8001148 <RA8875_WriteReg>
}
 8001638:	e008      	b.n	800164c <RA8875_SetBackLight+0x3c>
		RA8875_WriteReg(0x8A, (1 << 7) | 12);
 800163a:	218c      	movs	r1, #140	; 0x8c
 800163c:	208a      	movs	r0, #138	; 0x8a
 800163e:	f7ff fd83 	bl	8001148 <RA8875_WriteReg>
		RA8875_WriteReg(0x8B, _bright);
 8001642:	79fb      	ldrb	r3, [r7, #7]
 8001644:	4619      	mov	r1, r3
 8001646:	208b      	movs	r0, #139	; 0x8b
 8001648:	f7ff fd7e 	bl	8001148 <RA8875_WriteReg>
}
 800164c:	bf00      	nop
 800164e:	3708      	adds	r7, #8
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}

08001654 <SPFD5420_ReadID>:
*********************************************************************************************************
*	Func name: SPFD5420_ReadID
*********************************************************************************************************
*/
uint16_t SPFD5420_ReadID(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
	return SPFD5420_ReadReg(0x0000);
 8001658:	2000      	movs	r0, #0
 800165a:	f000 f803 	bl	8001664 <SPFD5420_ReadReg>
 800165e:	4603      	mov	r3, r0
}
 8001660:	4618      	mov	r0, r3
 8001662:	bd80      	pop	{r7, pc}

08001664 <SPFD5420_ReadReg>:
*			SPFD5420_RegValue : ¼Ä´æÆ÷Öµ
*	·µ »Ø Öµ: ÎÞ
*********************************************************************************************************
*/
static uint16_t SPFD5420_ReadReg(__IO uint16_t _usAddr)
{
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	4603      	mov	r3, r0
 800166c:	80fb      	strh	r3, [r7, #6]
	/* Write 16-bit Index (then Read Reg) */
	SPFD5420_REG = _usAddr;
 800166e:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8001672:	88fa      	ldrh	r2, [r7, #6]
 8001674:	b292      	uxth	r2, r2
 8001676:	801a      	strh	r2, [r3, #0]
	/* Read 16-bit Reg */
	return (SPFD5420_RAM);
 8001678:	4b04      	ldr	r3, [pc, #16]	; (800168c <SPFD5420_ReadReg+0x28>)
 800167a:	881b      	ldrh	r3, [r3, #0]
 800167c:	b29b      	uxth	r3, r3
}
 800167e:	4618      	mov	r0, r3
 8001680:	370c      	adds	r7, #12
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	60080000 	.word	0x60080000

08001690 <i2c_Delay>:
*********************************************************************************************************
*	Func name: i2c_Delay
*********************************************************************************************************
*/
void i2c_Delay(void)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < 30; i++);
 8001696:	2300      	movs	r3, #0
 8001698:	71fb      	strb	r3, [r7, #7]
 800169a:	e002      	b.n	80016a2 <i2c_Delay+0x12>
 800169c:	79fb      	ldrb	r3, [r7, #7]
 800169e:	3301      	adds	r3, #1
 80016a0:	71fb      	strb	r3, [r7, #7]
 80016a2:	79fb      	ldrb	r3, [r7, #7]
 80016a4:	2b1d      	cmp	r3, #29
 80016a6:	d9f9      	bls.n	800169c <i2c_Delay+0xc>
}
 80016a8:	bf00      	nop
 80016aa:	bf00      	nop
 80016ac:	370c      	adds	r7, #12
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
	...

080016b8 <i2c_Stop>:
*********************************************************************************************************
*	Func name: i2c_Start
*********************************************************************************************************
*/
void i2c_Stop(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
	I2C_SDA_0();
 80016bc:	2200      	movs	r2, #0
 80016be:	2120      	movs	r1, #32
 80016c0:	4808      	ldr	r0, [pc, #32]	; (80016e4 <i2c_Stop+0x2c>)
 80016c2:	f001 fab3 	bl	8002c2c <HAL_GPIO_WritePin>
	I2C_SCL_1();
 80016c6:	2201      	movs	r2, #1
 80016c8:	2110      	movs	r1, #16
 80016ca:	4806      	ldr	r0, [pc, #24]	; (80016e4 <i2c_Stop+0x2c>)
 80016cc:	f001 faae 	bl	8002c2c <HAL_GPIO_WritePin>
	i2c_Delay();
 80016d0:	f7ff ffde 	bl	8001690 <i2c_Delay>
	I2C_SDA_1();
 80016d4:	2201      	movs	r2, #1
 80016d6:	2120      	movs	r1, #32
 80016d8:	4802      	ldr	r0, [pc, #8]	; (80016e4 <i2c_Stop+0x2c>)
 80016da:	f001 faa7 	bl	8002c2c <HAL_GPIO_WritePin>
}
 80016de:	bf00      	nop
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	40021c00 	.word	0x40021c00

080016e8 <bsp_InitI2C>:
*********************************************************************************************************
*	Func name: bsp_InitI2C
*********************************************************************************************************
*/
void bsp_InitI2C(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b086      	sub	sp, #24
 80016ec:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	__HAL_RCC_GPIOH_CLK_ENABLE();
 80016ee:	2300      	movs	r3, #0
 80016f0:	603b      	str	r3, [r7, #0]
 80016f2:	4b0f      	ldr	r3, [pc, #60]	; (8001730 <bsp_InitI2C+0x48>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f6:	4a0e      	ldr	r2, [pc, #56]	; (8001730 <bsp_InitI2C+0x48>)
 80016f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016fc:	6313      	str	r3, [r2, #48]	; 0x30
 80016fe:	4b0c      	ldr	r3, [pc, #48]	; (8001730 <bsp_InitI2C+0x48>)
 8001700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001702:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001706:	603b      	str	r3, [r7, #0]
 8001708:	683b      	ldr	r3, [r7, #0]

	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_OD;
 800170a:	2311      	movs	r3, #17
 800170c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructure.Pull = GPIO_NOPULL;
 800170e:	2300      	movs	r3, #0
 8001710:	60fb      	str	r3, [r7, #12]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001712:	2303      	movs	r3, #3
 8001714:	613b      	str	r3, [r7, #16]

	GPIO_InitStructure.Pin = I2C_SCL_PIN | I2C_SDA_PIN;
 8001716:	2330      	movs	r3, #48	; 0x30
 8001718:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIO_PORT_I2C, &GPIO_InitStructure);
 800171a:	1d3b      	adds	r3, r7, #4
 800171c:	4619      	mov	r1, r3
 800171e:	4805      	ldr	r0, [pc, #20]	; (8001734 <bsp_InitI2C+0x4c>)
 8001720:	f001 f8e8 	bl	80028f4 <HAL_GPIO_Init>

	i2c_Stop();
 8001724:	f7ff ffc8 	bl	80016b8 <i2c_Stop>
}
 8001728:	bf00      	nop
 800172a:	3718      	adds	r7, #24
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	40023800 	.word	0x40023800
 8001734:	40021c00 	.word	0x40021c00

08001738 <IsKeyDown1>:
	static uint8_t IsKeyDown5(void) {if ((GPIO_PORT_K5->IDR & GPIO_PIN_K5) == 0) return 1;else return 0;}
	static uint8_t IsKeyDown6(void) {if ((GPIO_PORT_K6->IDR & GPIO_PIN_K6) == 0) return 1;else return 0;}
	static uint8_t IsKeyDown7(void) {if ((GPIO_PORT_K7->IDR & GPIO_PIN_K7) == 0) return 1;else return 0;}
	static uint8_t IsKeyDown8(void) {if ((GPIO_PORT_K8->IDR & GPIO_PIN_K8) == 0) return 1;else return 0;}
#else				/* °²¸»À³ STM32-V5 ¿ª·¢°å */
	static uint8_t IsKeyDown1(void) {if ((GPIO_PORT_K1->IDR & GPIO_PIN_K1) == 0) return 1;else return 0;}
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
 800173c:	4b06      	ldr	r3, [pc, #24]	; (8001758 <IsKeyDown1+0x20>)
 800173e:	691b      	ldr	r3, [r3, #16]
 8001740:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001744:	2b00      	cmp	r3, #0
 8001746:	d101      	bne.n	800174c <IsKeyDown1+0x14>
 8001748:	2301      	movs	r3, #1
 800174a:	e000      	b.n	800174e <IsKeyDown1+0x16>
 800174c:	2300      	movs	r3, #0
 800174e:	4618      	mov	r0, r3
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr
 8001758:	40022000 	.word	0x40022000

0800175c <IsKeyDown2>:
	static uint8_t IsKeyDown2(void) {if ((GPIO_PORT_K2->IDR & GPIO_PIN_K2) == 0) return 1;else return 0;}
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
 8001760:	4b06      	ldr	r3, [pc, #24]	; (800177c <IsKeyDown2+0x20>)
 8001762:	691b      	ldr	r3, [r3, #16]
 8001764:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001768:	2b00      	cmp	r3, #0
 800176a:	d101      	bne.n	8001770 <IsKeyDown2+0x14>
 800176c:	2301      	movs	r3, #1
 800176e:	e000      	b.n	8001772 <IsKeyDown2+0x16>
 8001770:	2300      	movs	r3, #0
 8001772:	4618      	mov	r0, r3
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr
 800177c:	40020800 	.word	0x40020800

08001780 <IsKeyDown3>:
	static uint8_t IsKeyDown3(void) {if ((GPIO_PORT_K3->IDR & GPIO_PIN_K3) == 0) return 1;else return 0;}
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
 8001784:	4b06      	ldr	r3, [pc, #24]	; (80017a0 <IsKeyDown3+0x20>)
 8001786:	691b      	ldr	r3, [r3, #16]
 8001788:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800178c:	2b00      	cmp	r3, #0
 800178e:	d101      	bne.n	8001794 <IsKeyDown3+0x14>
 8001790:	2301      	movs	r3, #1
 8001792:	e000      	b.n	8001796 <IsKeyDown3+0x16>
 8001794:	2300      	movs	r3, #0
 8001796:	4618      	mov	r0, r3
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr
 80017a0:	40022000 	.word	0x40022000

080017a4 <IsKeyDown4>:
	static uint8_t IsKeyDown4(void) {if ((GPIO_PORT_K4->IDR & GPIO_PIN_K4) == 0) return 1;else return 0;}
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	4b06      	ldr	r3, [pc, #24]	; (80017c4 <IsKeyDown4+0x20>)
 80017aa:	691b      	ldr	r3, [r3, #16]
 80017ac:	f003 0304 	and.w	r3, r3, #4
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d101      	bne.n	80017b8 <IsKeyDown4+0x14>
 80017b4:	2301      	movs	r3, #1
 80017b6:	e000      	b.n	80017ba <IsKeyDown4+0x16>
 80017b8:	2300      	movs	r3, #0
 80017ba:	4618      	mov	r0, r3
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr
 80017c4:	40021c00 	.word	0x40021c00

080017c8 <IsKeyDown5>:
	static uint8_t IsKeyDown5(void) {if ((GPIO_PORT_K5->IDR & GPIO_PIN_K5) == 0) return 1;else return 0;}
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	4b06      	ldr	r3, [pc, #24]	; (80017e8 <IsKeyDown5+0x20>)
 80017ce:	691b      	ldr	r3, [r3, #16]
 80017d0:	f003 0308 	and.w	r3, r3, #8
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d101      	bne.n	80017dc <IsKeyDown5+0x14>
 80017d8:	2301      	movs	r3, #1
 80017da:	e000      	b.n	80017de <IsKeyDown5+0x16>
 80017dc:	2300      	movs	r3, #0
 80017de:	4618      	mov	r0, r3
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr
 80017e8:	40021c00 	.word	0x40021c00

080017ec <IsKeyDown6>:
	static uint8_t IsKeyDown6(void) {if ((GPIO_PORT_K6->IDR & GPIO_PIN_K6) == 0) return 1;else return 0;}
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	4b06      	ldr	r3, [pc, #24]	; (800180c <IsKeyDown6+0x20>)
 80017f2:	691b      	ldr	r3, [r3, #16]
 80017f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d101      	bne.n	8001800 <IsKeyDown6+0x14>
 80017fc:	2301      	movs	r3, #1
 80017fe:	e000      	b.n	8001802 <IsKeyDown6+0x16>
 8001800:	2300      	movs	r3, #0
 8001802:	4618      	mov	r0, r3
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr
 800180c:	40021400 	.word	0x40021400

08001810 <IsKeyDown7>:
	static uint8_t IsKeyDown7(void) {if ((GPIO_PORT_K7->IDR & GPIO_PIN_K7) == 0) return 1;else return 0;}
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
 8001814:	4b06      	ldr	r3, [pc, #24]	; (8001830 <IsKeyDown7+0x20>)
 8001816:	691b      	ldr	r3, [r3, #16]
 8001818:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800181c:	2b00      	cmp	r3, #0
 800181e:	d101      	bne.n	8001824 <IsKeyDown7+0x14>
 8001820:	2301      	movs	r3, #1
 8001822:	e000      	b.n	8001826 <IsKeyDown7+0x16>
 8001824:	2300      	movs	r3, #0
 8001826:	4618      	mov	r0, r3
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr
 8001830:	40021800 	.word	0x40021800

08001834 <IsKeyDown8>:
	static uint8_t IsKeyDown8(void) {if ((GPIO_PORT_K8->IDR & GPIO_PIN_K8) == 0) return 1;else return 0;}
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
 8001838:	4b06      	ldr	r3, [pc, #24]	; (8001854 <IsKeyDown8+0x20>)
 800183a:	691b      	ldr	r3, [r3, #16]
 800183c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001840:	2b00      	cmp	r3, #0
 8001842:	d101      	bne.n	8001848 <IsKeyDown8+0x14>
 8001844:	2301      	movs	r3, #1
 8001846:	e000      	b.n	800184a <IsKeyDown8+0x16>
 8001848:	2300      	movs	r3, #0
 800184a:	4618      	mov	r0, r3
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr
 8001854:	40021c00 	.word	0x40021c00

08001858 <IsKeyDown9>:
#endif
	static uint8_t IsKeyDown9(void) {if (IsKeyDown1() && IsKeyDown2()) return 1;else return 0;}
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
 800185c:	f7ff ff6c 	bl	8001738 <IsKeyDown1>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d006      	beq.n	8001874 <IsKeyDown9+0x1c>
 8001866:	f7ff ff79 	bl	800175c <IsKeyDown2>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d001      	beq.n	8001874 <IsKeyDown9+0x1c>
 8001870:	2301      	movs	r3, #1
 8001872:	e000      	b.n	8001876 <IsKeyDown9+0x1e>
 8001874:	2300      	movs	r3, #0
 8001876:	4618      	mov	r0, r3
 8001878:	bd80      	pop	{r7, pc}

0800187a <IsKeyDown10>:
	static uint8_t IsKeyDown10(void) {if (IsKeyDown1() && IsKeyDown2()) return 1;else return 0;}
 800187a:	b580      	push	{r7, lr}
 800187c:	af00      	add	r7, sp, #0
 800187e:	f7ff ff5b 	bl	8001738 <IsKeyDown1>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d006      	beq.n	8001896 <IsKeyDown10+0x1c>
 8001888:	f7ff ff68 	bl	800175c <IsKeyDown2>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <IsKeyDown10+0x1c>
 8001892:	2301      	movs	r3, #1
 8001894:	e000      	b.n	8001898 <IsKeyDown10+0x1e>
 8001896:	2300      	movs	r3, #0
 8001898:	4618      	mov	r0, r3
 800189a:	bd80      	pop	{r7, pc}

0800189c <bsp_InitKey>:
*********************************************************************************************************
* Func name: bsp_InitKey
*********************************************************************************************************
*/
void bsp_InitKey(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
	bsp_InitKeyVar();
 80018a0:	f000 f804 	bl	80018ac <bsp_InitKeyVar>
	bsp_InitKeyHard();
 80018a4:	f000 f898 	bl	80019d8 <bsp_InitKeyHard>
}
 80018a8:	bf00      	nop
 80018aa:	bd80      	pop	{r7, pc}

080018ac <bsp_InitKeyVar>:
*********************************************************************************************************
*	Func name: bsp_InitKeyVar
*********************************************************************************************************
*/
static void bsp_InitKeyVar(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
	uint8_t i;

	/* ¶Ô°´¼üFIFO¶ÁÐ´Ö¸ÕëÇåÁã */
	s_tKey.Read = 0;
 80018b2:	4b3d      	ldr	r3, [pc, #244]	; (80019a8 <bsp_InitKeyVar+0xfc>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	729a      	strb	r2, [r3, #10]
	s_tKey.Write = 0;
 80018b8:	4b3b      	ldr	r3, [pc, #236]	; (80019a8 <bsp_InitKeyVar+0xfc>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	72da      	strb	r2, [r3, #11]
	s_tKey.Read2 = 0;
 80018be:	4b3a      	ldr	r3, [pc, #232]	; (80019a8 <bsp_InitKeyVar+0xfc>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	731a      	strb	r2, [r3, #12]

	/* ¸øÃ¿¸ö°´¼ü½á¹¹Ìå³ÉÔ±±äÁ¿¸³Ò»×éÈ±Ê¡Öµ */
	for (i = 0; i < KEY_COUNT; i++)
 80018c4:	2300      	movs	r3, #0
 80018c6:	71fb      	strb	r3, [r7, #7]
 80018c8:	e025      	b.n	8001916 <bsp_InitKeyVar+0x6a>
	{
		s_tBtn[i].LongTime = KEY_LONG_TIME;			/* ³¤°´Ê±¼ä 0 ±íÊ¾²»¼ì²â³¤°´¼üÊÂ¼þ */
 80018ca:	79fb      	ldrb	r3, [r7, #7]
 80018cc:	4a37      	ldr	r2, [pc, #220]	; (80019ac <bsp_InitKeyVar+0x100>)
 80018ce:	011b      	lsls	r3, r3, #4
 80018d0:	4413      	add	r3, r2
 80018d2:	3308      	adds	r3, #8
 80018d4:	2264      	movs	r2, #100	; 0x64
 80018d6:	801a      	strh	r2, [r3, #0]
		s_tBtn[i].Count = KEY_FILTER_TIME / 2;		/* ¼ÆÊýÆ÷ÉèÖÃÎªÂË²¨Ê±¼äµÄÒ»°ë */
 80018d8:	79fb      	ldrb	r3, [r7, #7]
 80018da:	4a34      	ldr	r2, [pc, #208]	; (80019ac <bsp_InitKeyVar+0x100>)
 80018dc:	011b      	lsls	r3, r3, #4
 80018de:	4413      	add	r3, r2
 80018e0:	3304      	adds	r3, #4
 80018e2:	2202      	movs	r2, #2
 80018e4:	701a      	strb	r2, [r3, #0]
		s_tBtn[i].State = 0;							/* °´¼üÈ±Ê¡×´Ì¬£¬0ÎªÎ´°´ÏÂ */
 80018e6:	79fb      	ldrb	r3, [r7, #7]
 80018e8:	4a30      	ldr	r2, [pc, #192]	; (80019ac <bsp_InitKeyVar+0x100>)
 80018ea:	011b      	lsls	r3, r3, #4
 80018ec:	4413      	add	r3, r2
 80018ee:	330a      	adds	r3, #10
 80018f0:	2200      	movs	r2, #0
 80018f2:	701a      	strb	r2, [r3, #0]
		//s_tBtn[i].KeyCodeDown = 3 * i + 1;				/* °´¼ü°´ÏÂµÄ¼üÖµ´úÂë */
		//s_tBtn[i].KeyCodeUp   = 3 * i + 2;				/* °´¼üµ¯ÆðµÄ¼üÖµ´úÂë */
		//s_tBtn[i].KeyCodeLong = 3 * i + 3;				/* °´¼ü±»³ÖÐø°´ÏÂµÄ¼üÖµ´úÂë */
		s_tBtn[i].RepeatSpeed = 0;						/* °´¼üÁ¬·¢µÄËÙ¶È£¬0±íÊ¾²»Ö§³ÖÁ¬·¢ */
 80018f4:	79fb      	ldrb	r3, [r7, #7]
 80018f6:	4a2d      	ldr	r2, [pc, #180]	; (80019ac <bsp_InitKeyVar+0x100>)
 80018f8:	011b      	lsls	r3, r3, #4
 80018fa:	4413      	add	r3, r2
 80018fc:	330b      	adds	r3, #11
 80018fe:	2200      	movs	r2, #0
 8001900:	701a      	strb	r2, [r3, #0]
		s_tBtn[i].RepeatCount = 0;						/* Á¬·¢¼ÆÊýÆ÷ */
 8001902:	79fb      	ldrb	r3, [r7, #7]
 8001904:	4a29      	ldr	r2, [pc, #164]	; (80019ac <bsp_InitKeyVar+0x100>)
 8001906:	011b      	lsls	r3, r3, #4
 8001908:	4413      	add	r3, r2
 800190a:	330c      	adds	r3, #12
 800190c:	2200      	movs	r2, #0
 800190e:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < KEY_COUNT; i++)
 8001910:	79fb      	ldrb	r3, [r7, #7]
 8001912:	3301      	adds	r3, #1
 8001914:	71fb      	strb	r3, [r7, #7]
 8001916:	79fb      	ldrb	r3, [r7, #7]
 8001918:	2b09      	cmp	r3, #9
 800191a:	d9d6      	bls.n	80018ca <bsp_InitKeyVar+0x1e>
	}
	/* Èç¹ûÐèÒªµ¥¶À¸ü¸ÄÄ³¸ö°´¼üµÄ²ÎÊý£¬¿ÉÒÔÔÚ´Ëµ¥¶ÀÖØÐÂ¸³Öµ */
	/* ±ÈÈç£¬ÎÒÃÇÏ£Íû°´¼ü1°´ÏÂ³¬¹ý1Ãëºó£¬×Ô¶¯ÖØ·¢ÏàÍ¬¼üÖµ */
	s_tBtn[KID_JOY_U].LongTime = 100;
 800191c:	4b23      	ldr	r3, [pc, #140]	; (80019ac <bsp_InitKeyVar+0x100>)
 800191e:	2264      	movs	r2, #100	; 0x64
 8001920:	871a      	strh	r2, [r3, #56]	; 0x38
	s_tBtn[KID_JOY_U].RepeatSpeed = 5;	/* Ã¿¸ô50ms×Ô¶¯·¢ËÍ¼üÖµ */
 8001922:	4b22      	ldr	r3, [pc, #136]	; (80019ac <bsp_InitKeyVar+0x100>)
 8001924:	2205      	movs	r2, #5
 8001926:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b

	s_tBtn[KID_JOY_D].LongTime = 100;
 800192a:	4b20      	ldr	r3, [pc, #128]	; (80019ac <bsp_InitKeyVar+0x100>)
 800192c:	2264      	movs	r2, #100	; 0x64
 800192e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
	s_tBtn[KID_JOY_D].RepeatSpeed = 5;	/* Ã¿¸ô50ms×Ô¶¯·¢ËÍ¼üÖµ */
 8001932:	4b1e      	ldr	r3, [pc, #120]	; (80019ac <bsp_InitKeyVar+0x100>)
 8001934:	2205      	movs	r2, #5
 8001936:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b

	s_tBtn[KID_JOY_L].LongTime = 100;
 800193a:	4b1c      	ldr	r3, [pc, #112]	; (80019ac <bsp_InitKeyVar+0x100>)
 800193c:	2264      	movs	r2, #100	; 0x64
 800193e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
	s_tBtn[KID_JOY_L].RepeatSpeed = 5;	/* Ã¿¸ô50ms×Ô¶¯·¢ËÍ¼üÖµ */
 8001942:	4b1a      	ldr	r3, [pc, #104]	; (80019ac <bsp_InitKeyVar+0x100>)
 8001944:	2205      	movs	r2, #5
 8001946:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b

	s_tBtn[KID_JOY_R].LongTime = 100;
 800194a:	4b18      	ldr	r3, [pc, #96]	; (80019ac <bsp_InitKeyVar+0x100>)
 800194c:	2264      	movs	r2, #100	; 0x64
 800194e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
	s_tBtn[KID_JOY_R].RepeatSpeed = 5;	/* Ã¿¸ô50ms×Ô¶¯·¢ËÍ¼üÖµ */
 8001952:	4b16      	ldr	r3, [pc, #88]	; (80019ac <bsp_InitKeyVar+0x100>)
 8001954:	2205      	movs	r2, #5
 8001956:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b

	/* ÅÐ¶Ï°´¼ü°´ÏÂµÄº¯Êý */
	s_tBtn[0].IsKeyDownFunc = IsKeyDown1;
 800195a:	4b14      	ldr	r3, [pc, #80]	; (80019ac <bsp_InitKeyVar+0x100>)
 800195c:	4a14      	ldr	r2, [pc, #80]	; (80019b0 <bsp_InitKeyVar+0x104>)
 800195e:	601a      	str	r2, [r3, #0]
	s_tBtn[1].IsKeyDownFunc = IsKeyDown2;
 8001960:	4b12      	ldr	r3, [pc, #72]	; (80019ac <bsp_InitKeyVar+0x100>)
 8001962:	4a14      	ldr	r2, [pc, #80]	; (80019b4 <bsp_InitKeyVar+0x108>)
 8001964:	611a      	str	r2, [r3, #16]
	s_tBtn[2].IsKeyDownFunc = IsKeyDown3;
 8001966:	4b11      	ldr	r3, [pc, #68]	; (80019ac <bsp_InitKeyVar+0x100>)
 8001968:	4a13      	ldr	r2, [pc, #76]	; (80019b8 <bsp_InitKeyVar+0x10c>)
 800196a:	621a      	str	r2, [r3, #32]
	s_tBtn[3].IsKeyDownFunc = IsKeyDown4;
 800196c:	4b0f      	ldr	r3, [pc, #60]	; (80019ac <bsp_InitKeyVar+0x100>)
 800196e:	4a13      	ldr	r2, [pc, #76]	; (80019bc <bsp_InitKeyVar+0x110>)
 8001970:	631a      	str	r2, [r3, #48]	; 0x30
	s_tBtn[4].IsKeyDownFunc = IsKeyDown5;
 8001972:	4b0e      	ldr	r3, [pc, #56]	; (80019ac <bsp_InitKeyVar+0x100>)
 8001974:	4a12      	ldr	r2, [pc, #72]	; (80019c0 <bsp_InitKeyVar+0x114>)
 8001976:	641a      	str	r2, [r3, #64]	; 0x40
	s_tBtn[5].IsKeyDownFunc = IsKeyDown6;
 8001978:	4b0c      	ldr	r3, [pc, #48]	; (80019ac <bsp_InitKeyVar+0x100>)
 800197a:	4a12      	ldr	r2, [pc, #72]	; (80019c4 <bsp_InitKeyVar+0x118>)
 800197c:	651a      	str	r2, [r3, #80]	; 0x50
	s_tBtn[6].IsKeyDownFunc = IsKeyDown7;
 800197e:	4b0b      	ldr	r3, [pc, #44]	; (80019ac <bsp_InitKeyVar+0x100>)
 8001980:	4a11      	ldr	r2, [pc, #68]	; (80019c8 <bsp_InitKeyVar+0x11c>)
 8001982:	661a      	str	r2, [r3, #96]	; 0x60
	s_tBtn[7].IsKeyDownFunc = IsKeyDown8;
 8001984:	4b09      	ldr	r3, [pc, #36]	; (80019ac <bsp_InitKeyVar+0x100>)
 8001986:	4a11      	ldr	r2, [pc, #68]	; (80019cc <bsp_InitKeyVar+0x120>)
 8001988:	671a      	str	r2, [r3, #112]	; 0x70

	/* ×éºÏ¼ü */
	s_tBtn[8].IsKeyDownFunc = IsKeyDown9;
 800198a:	4b08      	ldr	r3, [pc, #32]	; (80019ac <bsp_InitKeyVar+0x100>)
 800198c:	4a10      	ldr	r2, [pc, #64]	; (80019d0 <bsp_InitKeyVar+0x124>)
 800198e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	s_tBtn[9].IsKeyDownFunc = IsKeyDown10;
 8001992:	4b06      	ldr	r3, [pc, #24]	; (80019ac <bsp_InitKeyVar+0x100>)
 8001994:	4a0f      	ldr	r2, [pc, #60]	; (80019d4 <bsp_InitKeyVar+0x128>)
 8001996:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
}
 800199a:	bf00      	nop
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	200000dc 	.word	0x200000dc
 80019ac:	2000003c 	.word	0x2000003c
 80019b0:	08001739 	.word	0x08001739
 80019b4:	0800175d 	.word	0x0800175d
 80019b8:	08001781 	.word	0x08001781
 80019bc:	080017a5 	.word	0x080017a5
 80019c0:	080017c9 	.word	0x080017c9
 80019c4:	080017ed 	.word	0x080017ed
 80019c8:	08001811 	.word	0x08001811
 80019cc:	08001835 	.word	0x08001835
 80019d0:	08001859 	.word	0x08001859
 80019d4:	0800187b 	.word	0x0800187b

080019d8 <bsp_InitKeyHard>:
*********************************************************************************************************
* Func name: bsp_InitKeyHard
*********************************************************************************************************
*/
static void bsp_InitKeyHard(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b08a      	sub	sp, #40	; 0x28
 80019dc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	// #define RCC_ALL_KEY 	(RCC_AHB1Periph_GPIOC | RCC_AHB1Periph_GPIOF | RCC_AHB1Periph_GPIOH | RCC_AHB1Periph_GPIOI | RCC_AHB1Periph_GPIOG)
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80019de:	2300      	movs	r3, #0
 80019e0:	613b      	str	r3, [r7, #16]
 80019e2:	4b49      	ldr	r3, [pc, #292]	; (8001b08 <bsp_InitKeyHard+0x130>)
 80019e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e6:	4a48      	ldr	r2, [pc, #288]	; (8001b08 <bsp_InitKeyHard+0x130>)
 80019e8:	f043 0304 	orr.w	r3, r3, #4
 80019ec:	6313      	str	r3, [r2, #48]	; 0x30
 80019ee:	4b46      	ldr	r3, [pc, #280]	; (8001b08 <bsp_InitKeyHard+0x130>)
 80019f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f2:	f003 0304 	and.w	r3, r3, #4
 80019f6:	613b      	str	r3, [r7, #16]
 80019f8:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 80019fa:	2300      	movs	r3, #0
 80019fc:	60fb      	str	r3, [r7, #12]
 80019fe:	4b42      	ldr	r3, [pc, #264]	; (8001b08 <bsp_InitKeyHard+0x130>)
 8001a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a02:	4a41      	ldr	r2, [pc, #260]	; (8001b08 <bsp_InitKeyHard+0x130>)
 8001a04:	f043 0320 	orr.w	r3, r3, #32
 8001a08:	6313      	str	r3, [r2, #48]	; 0x30
 8001a0a:	4b3f      	ldr	r3, [pc, #252]	; (8001b08 <bsp_InitKeyHard+0x130>)
 8001a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0e:	f003 0320 	and.w	r3, r3, #32
 8001a12:	60fb      	str	r3, [r7, #12]
 8001a14:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001a16:	2300      	movs	r3, #0
 8001a18:	60bb      	str	r3, [r7, #8]
 8001a1a:	4b3b      	ldr	r3, [pc, #236]	; (8001b08 <bsp_InitKeyHard+0x130>)
 8001a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1e:	4a3a      	ldr	r2, [pc, #232]	; (8001b08 <bsp_InitKeyHard+0x130>)
 8001a20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a24:	6313      	str	r3, [r2, #48]	; 0x30
 8001a26:	4b38      	ldr	r3, [pc, #224]	; (8001b08 <bsp_InitKeyHard+0x130>)
 8001a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a2e:	60bb      	str	r3, [r7, #8]
 8001a30:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOI_CLK_ENABLE();
 8001a32:	2300      	movs	r3, #0
 8001a34:	607b      	str	r3, [r7, #4]
 8001a36:	4b34      	ldr	r3, [pc, #208]	; (8001b08 <bsp_InitKeyHard+0x130>)
 8001a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3a:	4a33      	ldr	r2, [pc, #204]	; (8001b08 <bsp_InitKeyHard+0x130>)
 8001a3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a40:	6313      	str	r3, [r2, #48]	; 0x30
 8001a42:	4b31      	ldr	r3, [pc, #196]	; (8001b08 <bsp_InitKeyHard+0x130>)
 8001a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a4a:	607b      	str	r3, [r7, #4]
 8001a4c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8001a4e:	2300      	movs	r3, #0
 8001a50:	603b      	str	r3, [r7, #0]
 8001a52:	4b2d      	ldr	r3, [pc, #180]	; (8001b08 <bsp_InitKeyHard+0x130>)
 8001a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a56:	4a2c      	ldr	r2, [pc, #176]	; (8001b08 <bsp_InitKeyHard+0x130>)
 8001a58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a5e:	4b2a      	ldr	r3, [pc, #168]	; (8001b08 <bsp_InitKeyHard+0x130>)
 8001a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a66:	603b      	str	r3, [r7, #0]
 8001a68:	683b      	ldr	r3, [r7, #0]


	GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStructure.Pull = GPIO_NOPULL;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	61fb      	str	r3, [r7, #28]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a72:	2302      	movs	r3, #2
 8001a74:	623b      	str	r3, [r7, #32]
	GPIO_InitStructure.Pin = GPIO_PIN_K1;
 8001a76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a7a:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_PORT_K1, &GPIO_InitStructure);
 8001a7c:	f107 0314 	add.w	r3, r7, #20
 8001a80:	4619      	mov	r1, r3
 8001a82:	4822      	ldr	r0, [pc, #136]	; (8001b0c <bsp_InitKeyHard+0x134>)
 8001a84:	f000 ff36 	bl	80028f4 <HAL_GPIO_Init>

	GPIO_InitStructure.Pin = GPIO_PIN_K2;
 8001a88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a8c:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_PORT_K2, &GPIO_InitStructure);
 8001a8e:	f107 0314 	add.w	r3, r7, #20
 8001a92:	4619      	mov	r1, r3
 8001a94:	481e      	ldr	r0, [pc, #120]	; (8001b10 <bsp_InitKeyHard+0x138>)
 8001a96:	f000 ff2d 	bl	80028f4 <HAL_GPIO_Init>

	GPIO_InitStructure.Pin = GPIO_PIN_K3;
 8001a9a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001a9e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_PORT_K3, &GPIO_InitStructure);
 8001aa0:	f107 0314 	add.w	r3, r7, #20
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	4819      	ldr	r0, [pc, #100]	; (8001b0c <bsp_InitKeyHard+0x134>)
 8001aa8:	f000 ff24 	bl	80028f4 <HAL_GPIO_Init>

	GPIO_InitStructure.Pin = GPIO_PIN_K4;
 8001aac:	2304      	movs	r3, #4
 8001aae:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_PORT_K4, &GPIO_InitStructure);
 8001ab0:	f107 0314 	add.w	r3, r7, #20
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	4817      	ldr	r0, [pc, #92]	; (8001b14 <bsp_InitKeyHard+0x13c>)
 8001ab8:	f000 ff1c 	bl	80028f4 <HAL_GPIO_Init>

	GPIO_InitStructure.Pin = GPIO_PIN_K5;
 8001abc:	2308      	movs	r3, #8
 8001abe:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_PORT_K5, &GPIO_InitStructure);
 8001ac0:	f107 0314 	add.w	r3, r7, #20
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	4813      	ldr	r0, [pc, #76]	; (8001b14 <bsp_InitKeyHard+0x13c>)
 8001ac8:	f000 ff14 	bl	80028f4 <HAL_GPIO_Init>

	GPIO_InitStructure.Pin = GPIO_PIN_K6;
 8001acc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001ad0:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_PORT_K6, &GPIO_InitStructure);
 8001ad2:	f107 0314 	add.w	r3, r7, #20
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	480f      	ldr	r0, [pc, #60]	; (8001b18 <bsp_InitKeyHard+0x140>)
 8001ada:	f000 ff0b 	bl	80028f4 <HAL_GPIO_Init>

	GPIO_InitStructure.Pin = GPIO_PIN_K7;
 8001ade:	2380      	movs	r3, #128	; 0x80
 8001ae0:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_PORT_K7, &GPIO_InitStructure);
 8001ae2:	f107 0314 	add.w	r3, r7, #20
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	480c      	ldr	r0, [pc, #48]	; (8001b1c <bsp_InitKeyHard+0x144>)
 8001aea:	f000 ff03 	bl	80028f4 <HAL_GPIO_Init>

	GPIO_InitStructure.Pin = GPIO_PIN_K8;
 8001aee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001af2:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_PORT_K8, &GPIO_InitStructure);
 8001af4:	f107 0314 	add.w	r3, r7, #20
 8001af8:	4619      	mov	r1, r3
 8001afa:	4806      	ldr	r0, [pc, #24]	; (8001b14 <bsp_InitKeyHard+0x13c>)
 8001afc:	f000 fefa 	bl	80028f4 <HAL_GPIO_Init>
}
 8001b00:	bf00      	nop
 8001b02:	3728      	adds	r7, #40	; 0x28
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	40023800 	.word	0x40023800
 8001b0c:	40022000 	.word	0x40022000
 8001b10:	40020800 	.word	0x40020800
 8001b14:	40021c00 	.word	0x40021c00
 8001b18:	40021400 	.word	0x40021400
 8001b1c:	40021800 	.word	0x40021800

08001b20 <bsp_InitLed>:
*********************************************************************************************************
*	Func name: bsp_InitLed
*********************************************************************************************************
*/
void bsp_InitLed(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b08a      	sub	sp, #40	; 0x28
 8001b24:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;
	// #define RCC_ALL_LED 	(RCC_AHB1Periph_GPIOC | RCC_AHB1Periph_GPIOF | RCC_AHB1Periph_GPIOI)
	__HAL_RCC_GPIOI_CLK_ENABLE();
 8001b26:	2300      	movs	r3, #0
 8001b28:	613b      	str	r3, [r7, #16]
 8001b2a:	4b40      	ldr	r3, [pc, #256]	; (8001c2c <bsp_InitLed+0x10c>)
 8001b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2e:	4a3f      	ldr	r2, [pc, #252]	; (8001c2c <bsp_InitLed+0x10c>)
 8001b30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b34:	6313      	str	r3, [r2, #48]	; 0x30
 8001b36:	4b3d      	ldr	r3, [pc, #244]	; (8001c2c <bsp_InitLed+0x10c>)
 8001b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b3e:	613b      	str	r3, [r7, #16]
 8001b40:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001b42:	2300      	movs	r3, #0
 8001b44:	60fb      	str	r3, [r7, #12]
 8001b46:	4b39      	ldr	r3, [pc, #228]	; (8001c2c <bsp_InitLed+0x10c>)
 8001b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4a:	4a38      	ldr	r2, [pc, #224]	; (8001c2c <bsp_InitLed+0x10c>)
 8001b4c:	f043 0304 	orr.w	r3, r3, #4
 8001b50:	6313      	str	r3, [r2, #48]	; 0x30
 8001b52:	4b36      	ldr	r3, [pc, #216]	; (8001c2c <bsp_InitLed+0x10c>)
 8001b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b56:	f003 0304 	and.w	r3, r3, #4
 8001b5a:	60fb      	str	r3, [r7, #12]
 8001b5c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8001b5e:	2300      	movs	r3, #0
 8001b60:	60bb      	str	r3, [r7, #8]
 8001b62:	4b32      	ldr	r3, [pc, #200]	; (8001c2c <bsp_InitLed+0x10c>)
 8001b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b66:	4a31      	ldr	r2, [pc, #196]	; (8001c2c <bsp_InitLed+0x10c>)
 8001b68:	f043 0320 	orr.w	r3, r3, #32
 8001b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b6e:	4b2f      	ldr	r3, [pc, #188]	; (8001c2c <bsp_InitLed+0x10c>)
 8001b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b72:	f003 0320 	and.w	r3, r3, #32
 8001b76:	60bb      	str	r3, [r7, #8]
 8001b78:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	607b      	str	r3, [r7, #4]
 8001b7e:	4b2b      	ldr	r3, [pc, #172]	; (8001c2c <bsp_InitLed+0x10c>)
 8001b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b82:	4a2a      	ldr	r2, [pc, #168]	; (8001c2c <bsp_InitLed+0x10c>)
 8001b84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b88:	6313      	str	r3, [r2, #48]	; 0x30
 8001b8a:	4b28      	ldr	r3, [pc, #160]	; (8001c2c <bsp_InitLed+0x10c>)
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b92:	607b      	str	r3, [r7, #4]
 8001b94:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001b96:	2300      	movs	r3, #0
 8001b98:	603b      	str	r3, [r7, #0]
 8001b9a:	4b24      	ldr	r3, [pc, #144]	; (8001c2c <bsp_InitLed+0x10c>)
 8001b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9e:	4a23      	ldr	r2, [pc, #140]	; (8001c2c <bsp_InitLed+0x10c>)
 8001ba0:	f043 0301 	orr.w	r3, r3, #1
 8001ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ba6:	4b21      	ldr	r3, [pc, #132]	; (8001c2c <bsp_InitLed+0x10c>)
 8001ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001baa:	f003 0301 	and.w	r3, r3, #1
 8001bae:	603b      	str	r3, [r7, #0]
 8001bb0:	683b      	ldr	r3, [r7, #0]

	bsp_LedOff(1);
 8001bb2:	2001      	movs	r0, #1
 8001bb4:	f000 f842 	bl	8001c3c <bsp_LedOff>
	bsp_LedOff(2);
 8001bb8:	2002      	movs	r0, #2
 8001bba:	f000 f83f 	bl	8001c3c <bsp_LedOff>
	bsp_LedOff(3);
 8001bbe:	2003      	movs	r0, #3
 8001bc0:	f000 f83c 	bl	8001c3c <bsp_LedOff>
	bsp_LedOff(4);
 8001bc4:	2004      	movs	r0, #4
 8001bc6:	f000 f839 	bl	8001c3c <bsp_LedOff>

	GPIO_InitStructure.Pin = GPIO_PIN_LED1;
 8001bca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bce:	617b      	str	r3, [r7, #20]
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStructure.Pull = GPIO_NOPULL;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bd8:	2302      	movs	r3, #2
 8001bda:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOI, &GPIO_InitStructure);
 8001bdc:	f107 0314 	add.w	r3, r7, #20
 8001be0:	4619      	mov	r1, r3
 8001be2:	4813      	ldr	r0, [pc, #76]	; (8001c30 <bsp_InitLed+0x110>)
 8001be4:	f000 fe86 	bl	80028f4 <HAL_GPIO_Init>

	GPIO_InitStructure.Pin = GPIO_PIN_LED2|GPIO_PIN_LED3;
 8001be8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001bec:	617b      	str	r3, [r7, #20]
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStructure.Pull = GPIO_NOPULL;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bf6:	2302      	movs	r3, #2
 8001bf8:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8001bfa:	f107 0314 	add.w	r3, r7, #20
 8001bfe:	4619      	mov	r1, r3
 8001c00:	480c      	ldr	r0, [pc, #48]	; (8001c34 <bsp_InitLed+0x114>)
 8001c02:	f000 fe77 	bl	80028f4 <HAL_GPIO_Init>

	GPIO_InitStructure.Pin = GPIO_PIN_LED4;
 8001c06:	2304      	movs	r3, #4
 8001c08:	617b      	str	r3, [r7, #20]
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStructure.Pull = GPIO_NOPULL;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	61fb      	str	r3, [r7, #28]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c12:	2302      	movs	r3, #2
 8001c14:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8001c16:	f107 0314 	add.w	r3, r7, #20
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	4806      	ldr	r0, [pc, #24]	; (8001c38 <bsp_InitLed+0x118>)
 8001c1e:	f000 fe69 	bl	80028f4 <HAL_GPIO_Init>
}
 8001c22:	bf00      	nop
 8001c24:	3728      	adds	r7, #40	; 0x28
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	40023800 	.word	0x40023800
 8001c30:	40022000 	.word	0x40022000
 8001c34:	40021400 	.word	0x40021400
 8001c38:	40020800 	.word	0x40020800

08001c3c <bsp_LedOff>:
*********************************************************************************************************
*	Func name: bsp_LedOff
*********************************************************************************************************
*/
void bsp_LedOff(uint8_t _no)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	4603      	mov	r3, r0
 8001c44:	71fb      	strb	r3, [r7, #7]
	_no--;
 8001c46:	79fb      	ldrb	r3, [r7, #7]
 8001c48:	3b01      	subs	r3, #1
 8001c4a:	71fb      	strb	r3, [r7, #7]

	if (_no == 0)
 8001c4c:	79fb      	ldrb	r3, [r7, #7]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d106      	bne.n	8001c60 <bsp_LedOff+0x24>
	{
		HAL_GPIO_WritePin(GPIOI, GPIO_PIN_LED1, GPIO_PIN_SET);
 8001c52:	2201      	movs	r2, #1
 8001c54:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c58:	4811      	ldr	r0, [pc, #68]	; (8001ca0 <bsp_LedOff+0x64>)
 8001c5a:	f000 ffe7 	bl	8002c2c <HAL_GPIO_WritePin>
	}
	else if (_no == 3)
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_LED4, GPIO_PIN_SET);
	}
}
 8001c5e:	e01a      	b.n	8001c96 <bsp_LedOff+0x5a>
	else if (_no == 1)
 8001c60:	79fb      	ldrb	r3, [r7, #7]
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d105      	bne.n	8001c72 <bsp_LedOff+0x36>
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_LED2, GPIO_PIN_SET);
 8001c66:	2201      	movs	r2, #1
 8001c68:	2180      	movs	r1, #128	; 0x80
 8001c6a:	480e      	ldr	r0, [pc, #56]	; (8001ca4 <bsp_LedOff+0x68>)
 8001c6c:	f000 ffde 	bl	8002c2c <HAL_GPIO_WritePin>
}
 8001c70:	e011      	b.n	8001c96 <bsp_LedOff+0x5a>
	else if (_no == 2)
 8001c72:	79fb      	ldrb	r3, [r7, #7]
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d106      	bne.n	8001c86 <bsp_LedOff+0x4a>
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_LED3, GPIO_PIN_SET);
 8001c78:	2201      	movs	r2, #1
 8001c7a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c7e:	4809      	ldr	r0, [pc, #36]	; (8001ca4 <bsp_LedOff+0x68>)
 8001c80:	f000 ffd4 	bl	8002c2c <HAL_GPIO_WritePin>
}
 8001c84:	e007      	b.n	8001c96 <bsp_LedOff+0x5a>
	else if (_no == 3)
 8001c86:	79fb      	ldrb	r3, [r7, #7]
 8001c88:	2b03      	cmp	r3, #3
 8001c8a:	d104      	bne.n	8001c96 <bsp_LedOff+0x5a>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_LED4, GPIO_PIN_SET);
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	2104      	movs	r1, #4
 8001c90:	4805      	ldr	r0, [pc, #20]	; (8001ca8 <bsp_LedOff+0x6c>)
 8001c92:	f000 ffcb 	bl	8002c2c <HAL_GPIO_WritePin>
}
 8001c96:	bf00      	nop
 8001c98:	3708      	adds	r7, #8
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	40022000 	.word	0x40022000
 8001ca4:	40021400 	.word	0x40021400
 8001ca8:	40020800 	.word	0x40020800

08001cac <RA8875_WriteCmd>:
*********************************************************************************************************
*	Func name: RA8875_WriteCmd
*********************************************************************************************************
*/
void RA8875_WriteCmd(uint8_t _ucRegAddr)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	71fb      	strb	r3, [r7, #7]
	SPI_ShiftByte(_ucRegAddr);
	RA8875_CS_1();
#endif

#ifdef RA_HARD_8080_16			/* 8080Ó²¼þ×ÜÏß */
	RA8875_REG = _ucRegAddr;	/* ÉèÖÃ¼Ä´æÆ÷µØÖ· */
 8001cb6:	4b05      	ldr	r3, [pc, #20]	; (8001ccc <RA8875_WriteCmd+0x20>)
 8001cb8:	79fa      	ldrb	r2, [r7, #7]
 8001cba:	b292      	uxth	r2, r2
 8001cbc:	801a      	strh	r2, [r3, #0]
#endif
}
 8001cbe:	bf00      	nop
 8001cc0:	370c      	adds	r7, #12
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	6c080000 	.word	0x6c080000

08001cd0 <RA8875_ReadData>:
*********************************************************************************************************
*	Func name: RA8875_ReadData
*********************************************************************************************************
*/
uint8_t RA8875_ReadData(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
#endif

#ifdef RA_HARD_8080_16			/* 8080Ó²¼þ×ÜÏß */
	uint8_t value;

	value = RA8875_RAM;		/* ¶ÁÈ¡¼Ä´æÆ÷Öµ */
 8001cd6:	f04f 43d8 	mov.w	r3, #1811939328	; 0x6c000000
 8001cda:	881b      	ldrh	r3, [r3, #0]
 8001cdc:	b29b      	uxth	r3, r3
 8001cde:	71fb      	strb	r3, [r7, #7]

	return value;
 8001ce0:	79fb      	ldrb	r3, [r7, #7]
#endif
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	370c      	adds	r7, #12
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr

08001cee <RA8875_WriteData>:
*********************************************************************************************************
*	Func name: RA8875_WriteData
*********************************************************************************************************
*/
void RA8875_WriteData(uint8_t _ucRegValue)
{
 8001cee:	b480      	push	{r7}
 8001cf0:	b083      	sub	sp, #12
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	71fb      	strb	r3, [r7, #7]
	SPI_ShiftByte(_ucRegValue);
	RA8875_CS_1();
#endif

#ifdef RA_HARD_8080_16			/* 8080Ó²¼þ×ÜÏß */
	RA8875_RAM = _ucRegValue;	/* ÉèÖÃ¼Ä´æÆ÷µØÖ· */
 8001cf8:	f04f 43d8 	mov.w	r3, #1811939328	; 0x6c000000
 8001cfc:	79fa      	ldrb	r2, [r7, #7]
 8001cfe:	b292      	uxth	r2, r2
 8001d00:	801a      	strh	r2, [r3, #0]
#endif
}
 8001d02:	bf00      	nop
 8001d04:	370c      	adds	r7, #12
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
	...

08001d10 <RA8875_ReadStatus>:
*********************************************************************************************************
*	Func name: RA8875_ReadStatus
*********************************************************************************************************
*/
uint8_t RA8875_ReadStatus(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
#endif

#ifdef RA_HARD_8080_16			/* 8080Ó²¼þ×ÜÏß */
	uint8_t value;

	value = RA8875_REG;
 8001d16:	4b05      	ldr	r3, [pc, #20]	; (8001d2c <RA8875_ReadStatus+0x1c>)
 8001d18:	881b      	ldrh	r3, [r3, #0]
 8001d1a:	b29b      	uxth	r3, r3
 8001d1c:	71fb      	strb	r3, [r7, #7]

	return value;
 8001d1e:	79fb      	ldrb	r3, [r7, #7]
#endif
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	370c      	adds	r7, #12
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr
 8001d2c:	6c080000 	.word	0x6c080000

08001d30 <RA8875_Delaly1us>:
*********************************************************************************************************
*	Func name: RA8875_Delaly1us
*********************************************************************************************************
*/
void RA8875_Delaly1us(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < 10; i++);
 8001d36:	2300      	movs	r3, #0
 8001d38:	71fb      	strb	r3, [r7, #7]
 8001d3a:	e002      	b.n	8001d42 <RA8875_Delaly1us+0x12>
 8001d3c:	79fb      	ldrb	r3, [r7, #7]
 8001d3e:	3301      	adds	r3, #1
 8001d40:	71fb      	strb	r3, [r7, #7]
 8001d42:	79fb      	ldrb	r3, [r7, #7]
 8001d44:	2b09      	cmp	r3, #9
 8001d46:	d9f9      	bls.n	8001d3c <RA8875_Delaly1us+0xc>
}
 8001d48:	bf00      	nop
 8001d4a:	bf00      	nop
 8001d4c:	370c      	adds	r7, #12
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr

08001d56 <RA8875_Delaly1ms>:
*********************************************************************************************************
*	Func name: RA8875_Delaly1ms
*********************************************************************************************************
*/
void RA8875_Delaly1ms(void)
{
 8001d56:	b480      	push	{r7}
 8001d58:	b083      	sub	sp, #12
 8001d5a:	af00      	add	r7, sp, #0
	uint16_t i;
	for (i = 0; i < 5000; i++);
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	80fb      	strh	r3, [r7, #6]
 8001d60:	e002      	b.n	8001d68 <RA8875_Delaly1ms+0x12>
 8001d62:	88fb      	ldrh	r3, [r7, #6]
 8001d64:	3301      	adds	r3, #1
 8001d66:	80fb      	strh	r3, [r7, #6]
 8001d68:	88fb      	ldrh	r3, [r7, #6]
 8001d6a:	f241 3287 	movw	r2, #4999	; 0x1387
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d9f7      	bls.n	8001d62 <RA8875_Delaly1ms+0xc>
}
 8001d72:	bf00      	nop
 8001d74:	bf00      	nop
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr

08001d80 <LCD_InitHard>:
*********************************************************************************************************
*	Func name: LCD_InitHard
*********************************************************************************************************
*/
void LCD_InitHard(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
	uint16_t id;

	LCD_CtrlLinesConfig();
 8001d86:	f000 f83f 	bl	8001e08 <LCD_CtrlLinesConfig>

	LCD_FSMCConfig();
 8001d8a:	f000 f8b5 	bl	8001ef8 <LCD_FSMCConfig>

	HAL_Delay(20);
 8001d8e:	2014      	movs	r0, #20
 8001d90:	f000 fc7a 	bl	8002688 <HAL_Delay>

	id = SPFD5420_ReadID();
 8001d94:	f7ff fc5e 	bl	8001654 <SPFD5420_ReadID>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	80fb      	strh	r3, [r7, #6]
	if ((id == 0x5420) || (id ==  0xB509) || (id == 0x5520))
 8001d9c:	88fb      	ldrh	r3, [r7, #6]
 8001d9e:	f245 4220 	movw	r2, #21536	; 0x5420
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d01f      	beq.n	8001de6 <LCD_InitHard+0x66>
 8001da6:	88fb      	ldrh	r3, [r7, #6]
 8001da8:	f24b 5209 	movw	r2, #46345	; 0xb509
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d01a      	beq.n	8001de6 <LCD_InitHard+0x66>
 8001db0:	88fb      	ldrh	r3, [r7, #6]
 8001db2:	f245 5220 	movw	r2, #21792	; 0x5520
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d015      	beq.n	8001de6 <LCD_InitHard+0x66>
	{
		//SPFD5420_InitHard();
	}
	else
	{
		if (RA8875_ReadID() == 0x75)
 8001dba:	f7ff f9ac 	bl	8001116 <RA8875_ReadID>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b75      	cmp	r3, #117	; 0x75
 8001dc2:	d105      	bne.n	8001dd0 <LCD_InitHard+0x50>
		{
			//UART1_Transmit_String("LCD Controller is RA8875 or compatible\r\n");
			g_ChipID = IC_8875;
 8001dc4:	4b0d      	ldr	r3, [pc, #52]	; (8001dfc <LCD_InitHard+0x7c>)
 8001dc6:	2275      	movs	r2, #117	; 0x75
 8001dc8:	801a      	strh	r2, [r3, #0]
			RA8875_InitHard();
 8001dca:	f7ff f9d9 	bl	8001180 <RA8875_InitHard>
 8001dce:	e00a      	b.n	8001de6 <LCD_InitHard+0x66>
		}
		else
		{
			g_ChipID = IC_4001;
 8001dd0:	4b0a      	ldr	r3, [pc, #40]	; (8001dfc <LCD_InitHard+0x7c>)
 8001dd2:	f244 0201 	movw	r2, #16385	; 0x4001
 8001dd6:	801a      	strh	r2, [r3, #0]
			g_LcdHeight = LCD_30_HEIGHT;
 8001dd8:	4b09      	ldr	r3, [pc, #36]	; (8001e00 <LCD_InitHard+0x80>)
 8001dda:	22f0      	movs	r2, #240	; 0xf0
 8001ddc:	801a      	strh	r2, [r3, #0]
			g_LcdWidth = LCD_30_WIDTH;
 8001dde:	4b09      	ldr	r3, [pc, #36]	; (8001e04 <LCD_InitHard+0x84>)
 8001de0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001de4:	801a      	strh	r2, [r3, #0]
		}
	}
	LCD_ClrScr(CL_BLUE);
 8001de6:	201f      	movs	r0, #31
 8001de8:	f000 f8d2 	bl	8001f90 <LCD_ClrScr>

	LCD_SetBackLight(BRIGHT_DEFAULT);
 8001dec:	20c8      	movs	r0, #200	; 0xc8
 8001dee:	f000 f8e9 	bl	8001fc4 <LCD_SetBackLight>
}
 8001df2:	bf00      	nop
 8001df4:	3708      	adds	r7, #8
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	20000008 	.word	0x20000008
 8001e00:	2000000a 	.word	0x2000000a
 8001e04:	2000000c 	.word	0x2000000c

08001e08 <LCD_CtrlLinesConfig>:


static void LCD_CtrlLinesConfig(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b08a      	sub	sp, #40	; 0x28
 8001e0c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	__HAL_RCC_FSMC_CLK_ENABLE();
 8001e0e:	2300      	movs	r3, #0
 8001e10:	613b      	str	r3, [r7, #16]
 8001e12:	4b35      	ldr	r3, [pc, #212]	; (8001ee8 <LCD_CtrlLinesConfig+0xe0>)
 8001e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e16:	4a34      	ldr	r2, [pc, #208]	; (8001ee8 <LCD_CtrlLinesConfig+0xe0>)
 8001e18:	f043 0301 	orr.w	r3, r3, #1
 8001e1c:	6393      	str	r3, [r2, #56]	; 0x38
 8001e1e:	4b32      	ldr	r3, [pc, #200]	; (8001ee8 <LCD_CtrlLinesConfig+0xe0>)
 8001e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e22:	f003 0301 	and.w	r3, r3, #1
 8001e26:	613b      	str	r3, [r7, #16]
 8001e28:	693b      	ldr	r3, [r7, #16]

	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	60fb      	str	r3, [r7, #12]
 8001e2e:	4b2e      	ldr	r3, [pc, #184]	; (8001ee8 <LCD_CtrlLinesConfig+0xe0>)
 8001e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e32:	4a2d      	ldr	r2, [pc, #180]	; (8001ee8 <LCD_CtrlLinesConfig+0xe0>)
 8001e34:	f043 0308 	orr.w	r3, r3, #8
 8001e38:	6313      	str	r3, [r2, #48]	; 0x30
 8001e3a:	4b2b      	ldr	r3, [pc, #172]	; (8001ee8 <LCD_CtrlLinesConfig+0xe0>)
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3e:	f003 0308 	and.w	r3, r3, #8
 8001e42:	60fb      	str	r3, [r7, #12]
 8001e44:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001e46:	2300      	movs	r3, #0
 8001e48:	60bb      	str	r3, [r7, #8]
 8001e4a:	4b27      	ldr	r3, [pc, #156]	; (8001ee8 <LCD_CtrlLinesConfig+0xe0>)
 8001e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4e:	4a26      	ldr	r2, [pc, #152]	; (8001ee8 <LCD_CtrlLinesConfig+0xe0>)
 8001e50:	f043 0310 	orr.w	r3, r3, #16
 8001e54:	6313      	str	r3, [r2, #48]	; 0x30
 8001e56:	4b24      	ldr	r3, [pc, #144]	; (8001ee8 <LCD_CtrlLinesConfig+0xe0>)
 8001e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5a:	f003 0310 	and.w	r3, r3, #16
 8001e5e:	60bb      	str	r3, [r7, #8]
 8001e60:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8001e62:	2300      	movs	r3, #0
 8001e64:	607b      	str	r3, [r7, #4]
 8001e66:	4b20      	ldr	r3, [pc, #128]	; (8001ee8 <LCD_CtrlLinesConfig+0xe0>)
 8001e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6a:	4a1f      	ldr	r2, [pc, #124]	; (8001ee8 <LCD_CtrlLinesConfig+0xe0>)
 8001e6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e70:	6313      	str	r3, [r2, #48]	; 0x30
 8001e72:	4b1d      	ldr	r3, [pc, #116]	; (8001ee8 <LCD_CtrlLinesConfig+0xe0>)
 8001e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e7a:	607b      	str	r3, [r7, #4]
 8001e7c:	687b      	ldr	r3, [r7, #4]

	GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 |
 8001e7e:	f24c 7333 	movw	r3, #50995	; 0xc733
 8001e82:	617b      	str	r3, [r7, #20]
		                     GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
		                     GPIO_PIN_15;
	GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8001e84:	2302      	movs	r3, #2
 8001e86:	61bb      	str	r3, [r7, #24]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e88:	2303      	movs	r3, #3
 8001e8a:	623b      	str	r3, [r7, #32]
	GPIO_InitStructure.Pull = GPIO_NOPULL;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStructure.Alternate = GPIO_AF12_FSMC;
 8001e90:	230c      	movs	r3, #12
 8001e92:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOD,&GPIO_InitStructure);
 8001e94:	f107 0314 	add.w	r3, r7, #20
 8001e98:	4619      	mov	r1, r3
 8001e9a:	4814      	ldr	r0, [pc, #80]	; (8001eec <LCD_CtrlLinesConfig+0xe4>)
 8001e9c:	f000 fd2a 	bl	80028f4 <HAL_GPIO_Init>

	GPIO_InitStructure.Pin = GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 |
 8001ea0:	f64f 73b0 	movw	r3, #65456	; 0xffb0
 8001ea4:	617b      	str	r3, [r7, #20]
		                     GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |
							 GPIO_PIN_15;
	HAL_GPIO_Init(GPIOE,&GPIO_InitStructure);
 8001ea6:	f107 0314 	add.w	r3, r7, #20
 8001eaa:	4619      	mov	r1, r3
 8001eac:	4810      	ldr	r0, [pc, #64]	; (8001ef0 <LCD_CtrlLinesConfig+0xe8>)
 8001eae:	f000 fd21 	bl	80028f4 <HAL_GPIO_Init>

	GPIO_InitStructure.Pin = GPIO_PIN_13;
 8001eb2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001eb6:	617b      	str	r3, [r7, #20]
	GPIO_InitStructure.Alternate = GPIO_AF12_FSMC;
 8001eb8:	230c      	movs	r3, #12
 8001eba:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOD,&GPIO_InitStructure);
 8001ebc:	f107 0314 	add.w	r3, r7, #20
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	480a      	ldr	r0, [pc, #40]	; (8001eec <LCD_CtrlLinesConfig+0xe4>)
 8001ec4:	f000 fd16 	bl	80028f4 <HAL_GPIO_Init>

	GPIO_InitStructure.Pin = GPIO_PIN_12;
 8001ec8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ecc:	617b      	str	r3, [r7, #20]
	GPIO_InitStructure.Alternate = GPIO_AF12_FSMC;
 8001ece:	230c      	movs	r3, #12
 8001ed0:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOG,&GPIO_InitStructure);
 8001ed2:	f107 0314 	add.w	r3, r7, #20
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	4806      	ldr	r0, [pc, #24]	; (8001ef4 <LCD_CtrlLinesConfig+0xec>)
 8001eda:	f000 fd0b 	bl	80028f4 <HAL_GPIO_Init>
}
 8001ede:	bf00      	nop
 8001ee0:	3728      	adds	r7, #40	; 0x28
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	40023800 	.word	0x40023800
 8001eec:	40020c00 	.word	0x40020c00
 8001ef0:	40021000 	.word	0x40021000
 8001ef4:	40021800 	.word	0x40021800

08001ef8 <LCD_FSMCConfig>:

static void LCD_FSMCConfig(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b0a2      	sub	sp, #136	; 0x88
 8001efc:	af00      	add	r7, sp, #0
	//FSMC_NORSRAM_InitTypeDef  init;
	SRAM_HandleTypeDef hsram;
	FSMC_NORSRAM_TimingTypeDef  timingWrite;
	FSMC_NORSRAM_TimingTypeDef  timingRead;

	timingWrite.AddressSetupTime = 4;
 8001efe:	2304      	movs	r3, #4
 8001f00:	61fb      	str	r3, [r7, #28]
	timingWrite.AddressHoldTime = 0;
 8001f02:	2300      	movs	r3, #0
 8001f04:	623b      	str	r3, [r7, #32]
	timingWrite.DataSetupTime = 6;
 8001f06:	2306      	movs	r3, #6
 8001f08:	627b      	str	r3, [r7, #36]	; 0x24
	timingWrite.BusTurnAroundDuration = 1;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	62bb      	str	r3, [r7, #40]	; 0x28
	timingWrite.CLKDivision = 0;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	62fb      	str	r3, [r7, #44]	; 0x2c
	timingWrite.DataLatency = 0;
 8001f12:	2300      	movs	r3, #0
 8001f14:	633b      	str	r3, [r7, #48]	; 0x30
	timingWrite.AccessMode = FSMC_ACCESS_MODE_A;
 8001f16:	2300      	movs	r3, #0
 8001f18:	637b      	str	r3, [r7, #52]	; 0x34

	timingRead.AddressSetupTime = 4;
 8001f1a:	2304      	movs	r3, #4
 8001f1c:	603b      	str	r3, [r7, #0]
	timingRead.AddressHoldTime = 0;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	607b      	str	r3, [r7, #4]
	timingRead.DataSetupTime = 8;
 8001f22:	2308      	movs	r3, #8
 8001f24:	60bb      	str	r3, [r7, #8]
	timingRead.BusTurnAroundDuration = 0;
 8001f26:	2300      	movs	r3, #0
 8001f28:	60fb      	str	r3, [r7, #12]
	timingRead.CLKDivision = 0;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	613b      	str	r3, [r7, #16]
	timingRead.DataLatency = 0;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	617b      	str	r3, [r7, #20]
	timingRead.AccessMode = FSMC_ACCESS_MODE_A;
 8001f32:	2300      	movs	r3, #0
 8001f34:	61bb      	str	r3, [r7, #24]

	hsram.Instance = FSMC_NORSRAM_DEVICE;
 8001f36:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8001f3a:	63bb      	str	r3, [r7, #56]	; 0x38
	hsram.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001f3c:	4b13      	ldr	r3, [pc, #76]	; (8001f8c <LCD_FSMCConfig+0x94>)
 8001f3e:	63fb      	str	r3, [r7, #60]	; 0x3c
	hsram.Init.NSBank = FSMC_NORSRAM_BANK4;
 8001f40:	2306      	movs	r3, #6
 8001f42:	643b      	str	r3, [r7, #64]	; 0x40
	hsram.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001f44:	2300      	movs	r3, #0
 8001f46:	647b      	str	r3, [r7, #68]	; 0x44
	hsram.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001f48:	2310      	movs	r3, #16
 8001f4a:	64fb      	str	r3, [r7, #76]	; 0x4c
	hsram.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	653b      	str	r3, [r7, #80]	; 0x50
	hsram.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001f50:	2300      	movs	r3, #0
 8001f52:	66fb      	str	r3, [r7, #108]	; 0x6c
	hsram.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001f54:	2300      	movs	r3, #0
 8001f56:	657b      	str	r3, [r7, #84]	; 0x54
	hsram.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	65bb      	str	r3, [r7, #88]	; 0x58
	hsram.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	65fb      	str	r3, [r7, #92]	; 0x5c
	hsram.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8001f60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f64:	663b      	str	r3, [r7, #96]	; 0x60
	hsram.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8001f66:	2300      	movs	r3, #0
 8001f68:	667b      	str	r3, [r7, #100]	; 0x64
	hsram.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	66bb      	str	r3, [r7, #104]	; 0x68
	hsram.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	673b      	str	r3, [r7, #112]	; 0x70
	//hsram.Init.ContinuousClock = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY; /* 새로운 파라미터 */

	HAL_SRAM_Init(&hsram, &timingRead, &timingWrite);
 8001f72:	f107 021c 	add.w	r2, r7, #28
 8001f76:	4639      	mov	r1, r7
 8001f78:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f7fe fb6f 	bl	8000660 <HAL_SRAM_Init>
}
 8001f82:	bf00      	nop
 8001f84:	3788      	adds	r7, #136	; 0x88
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	a0000104 	.word	0xa0000104

08001f90 <LCD_ClrScr>:
*********************************************************************************************************
*	Func name: LCD_ClrScr
*********************************************************************************************************
*/
void LCD_ClrScr(uint16_t _usColor)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	4603      	mov	r3, r0
 8001f98:	80fb      	strh	r3, [r7, #6]
	if (g_ChipID == IC_8875)	/* RA8875 ·ÖÖ§ */
 8001f9a:	4b08      	ldr	r3, [pc, #32]	; (8001fbc <LCD_ClrScr+0x2c>)
 8001f9c:	881b      	ldrh	r3, [r3, #0]
 8001f9e:	2b75      	cmp	r3, #117	; 0x75
 8001fa0:	d104      	bne.n	8001fac <LCD_ClrScr+0x1c>
	{
		//UART1_Transmit_String("LCD Controller is RA8875 color\r\n");
		RA8875_ClrScr(_usColor);
 8001fa2:	88fb      	ldrh	r3, [r7, #6]
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f7ff fa5d 	bl	8001464 <RA8875_ClrScr>
	else	/* 5420£¬4001£¬61509 ·ÖÖ§ */
	{
		UART1_Transmit_String("LCD Controller is SFD5420 color\r\n");
		//SPFD5420_ClrScr(_usColor);
	}
}
 8001faa:	e002      	b.n	8001fb2 <LCD_ClrScr+0x22>
		UART1_Transmit_String("LCD Controller is SFD5420 color\r\n");
 8001fac:	4804      	ldr	r0, [pc, #16]	; (8001fc0 <LCD_ClrScr+0x30>)
 8001fae:	f000 fad5 	bl	800255c <UART1_Transmit_String>
}
 8001fb2:	bf00      	nop
 8001fb4:	3708      	adds	r7, #8
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	20000008 	.word	0x20000008
 8001fc0:	08003590 	.word	0x08003590

08001fc4 <LCD_SetBackLight>:
*********************************************************************************************************
* 	Func name: LCD_SetBackLight
*********************************************************************************************************
*/
void LCD_SetBackLight(uint8_t _bright)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	4603      	mov	r3, r0
 8001fcc:	71fb      	strb	r3, [r7, #7]
	s_ucBright =  _bright;	/* ±£´æ±³¹âÖµ */
 8001fce:	4a07      	ldr	r2, [pc, #28]	; (8001fec <LCD_SetBackLight+0x28>)
 8001fd0:	79fb      	ldrb	r3, [r7, #7]
 8001fd2:	7013      	strb	r3, [r2, #0]

	if (g_ChipID == IC_8875)
 8001fd4:	4b06      	ldr	r3, [pc, #24]	; (8001ff0 <LCD_SetBackLight+0x2c>)
 8001fd6:	881b      	ldrh	r3, [r3, #0]
 8001fd8:	2b75      	cmp	r3, #117	; 0x75
 8001fda:	d103      	bne.n	8001fe4 <LCD_SetBackLight+0x20>
	{
		RA8875_SetBackLight(_bright);
 8001fdc:	79fb      	ldrb	r3, [r7, #7]
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f7ff fb16 	bl	8001610 <RA8875_SetBackLight>
	}
	else
	{
		//SPFD5420_SetBackLight(_bright);
	}
}
 8001fe4:	bf00      	nop
 8001fe6:	3708      	adds	r7, #8
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	200000e9 	.word	0x200000e9
 8001ff0:	20000008 	.word	0x20000008

08001ff4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	6039      	str	r1, [r7, #0]
 8001ffe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002000:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002004:	2b00      	cmp	r3, #0
 8002006:	db0a      	blt.n	800201e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	b2da      	uxtb	r2, r3
 800200c:	490c      	ldr	r1, [pc, #48]	; (8002040 <__NVIC_SetPriority+0x4c>)
 800200e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002012:	0112      	lsls	r2, r2, #4
 8002014:	b2d2      	uxtb	r2, r2
 8002016:	440b      	add	r3, r1
 8002018:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800201c:	e00a      	b.n	8002034 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	b2da      	uxtb	r2, r3
 8002022:	4908      	ldr	r1, [pc, #32]	; (8002044 <__NVIC_SetPriority+0x50>)
 8002024:	79fb      	ldrb	r3, [r7, #7]
 8002026:	f003 030f 	and.w	r3, r3, #15
 800202a:	3b04      	subs	r3, #4
 800202c:	0112      	lsls	r2, r2, #4
 800202e:	b2d2      	uxtb	r2, r2
 8002030:	440b      	add	r3, r1
 8002032:	761a      	strb	r2, [r3, #24]
}
 8002034:	bf00      	nop
 8002036:	370c      	adds	r7, #12
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr
 8002040:	e000e100 	.word	0xe000e100
 8002044:	e000ed00 	.word	0xe000ed00

08002048 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	3b01      	subs	r3, #1
 8002054:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002058:	d301      	bcc.n	800205e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800205a:	2301      	movs	r3, #1
 800205c:	e00f      	b.n	800207e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800205e:	4a0a      	ldr	r2, [pc, #40]	; (8002088 <SysTick_Config+0x40>)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	3b01      	subs	r3, #1
 8002064:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002066:	210f      	movs	r1, #15
 8002068:	f04f 30ff 	mov.w	r0, #4294967295
 800206c:	f7ff ffc2 	bl	8001ff4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002070:	4b05      	ldr	r3, [pc, #20]	; (8002088 <SysTick_Config+0x40>)
 8002072:	2200      	movs	r2, #0
 8002074:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002076:	4b04      	ldr	r3, [pc, #16]	; (8002088 <SysTick_Config+0x40>)
 8002078:	2207      	movs	r2, #7
 800207a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800207c:	2300      	movs	r3, #0
}
 800207e:	4618      	mov	r0, r3
 8002080:	3708      	adds	r7, #8
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	e000e010 	.word	0xe000e010

0800208c <bsp_InitTimer>:
*********************************************************************************************************
*	Func name: bsp_InitTimer
*********************************************************************************************************
*/
void bsp_InitTimer(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
	uint8_t i;

	for (i = 0; i < TMR_COUNT; i++)
 8002092:	2300      	movs	r3, #0
 8002094:	71fb      	strb	r3, [r7, #7]
 8002096:	e029      	b.n	80020ec <bsp_InitTimer+0x60>
	{
		s_tTmr[i].Count = 0;
 8002098:	79fa      	ldrb	r2, [r7, #7]
 800209a:	491c      	ldr	r1, [pc, #112]	; (800210c <bsp_InitTimer+0x80>)
 800209c:	4613      	mov	r3, r2
 800209e:	005b      	lsls	r3, r3, #1
 80020a0:	4413      	add	r3, r2
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	440b      	add	r3, r1
 80020a6:	3304      	adds	r3, #4
 80020a8:	2200      	movs	r2, #0
 80020aa:	601a      	str	r2, [r3, #0]
		s_tTmr[i].PreLoad = 0;
 80020ac:	79fa      	ldrb	r2, [r7, #7]
 80020ae:	4917      	ldr	r1, [pc, #92]	; (800210c <bsp_InitTimer+0x80>)
 80020b0:	4613      	mov	r3, r2
 80020b2:	005b      	lsls	r3, r3, #1
 80020b4:	4413      	add	r3, r2
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	440b      	add	r3, r1
 80020ba:	3308      	adds	r3, #8
 80020bc:	2200      	movs	r2, #0
 80020be:	601a      	str	r2, [r3, #0]
		s_tTmr[i].Flag = 0;
 80020c0:	79fa      	ldrb	r2, [r7, #7]
 80020c2:	4912      	ldr	r1, [pc, #72]	; (800210c <bsp_InitTimer+0x80>)
 80020c4:	4613      	mov	r3, r2
 80020c6:	005b      	lsls	r3, r3, #1
 80020c8:	4413      	add	r3, r2
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	440b      	add	r3, r1
 80020ce:	3301      	adds	r3, #1
 80020d0:	2200      	movs	r2, #0
 80020d2:	701a      	strb	r2, [r3, #0]
		s_tTmr[i].Mode = TMR_ONCE_MODE;
 80020d4:	79fa      	ldrb	r2, [r7, #7]
 80020d6:	490d      	ldr	r1, [pc, #52]	; (800210c <bsp_InitTimer+0x80>)
 80020d8:	4613      	mov	r3, r2
 80020da:	005b      	lsls	r3, r3, #1
 80020dc:	4413      	add	r3, r2
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	440b      	add	r3, r1
 80020e2:	2200      	movs	r2, #0
 80020e4:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TMR_COUNT; i++)
 80020e6:	79fb      	ldrb	r3, [r7, #7]
 80020e8:	3301      	adds	r3, #1
 80020ea:	71fb      	strb	r3, [r7, #7]
 80020ec:	79fb      	ldrb	r3, [r7, #7]
 80020ee:	2b03      	cmp	r3, #3
 80020f0:	d9d2      	bls.n	8002098 <bsp_InitTimer+0xc>
	}
	SysTick_Config(SystemCoreClock / 1000);
 80020f2:	4b07      	ldr	r3, [pc, #28]	; (8002110 <bsp_InitTimer+0x84>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a07      	ldr	r2, [pc, #28]	; (8002114 <bsp_InitTimer+0x88>)
 80020f8:	fba2 2303 	umull	r2, r3, r2, r3
 80020fc:	099b      	lsrs	r3, r3, #6
 80020fe:	4618      	mov	r0, r3
 8002100:	f7ff ffa2 	bl	8002048 <SysTick_Config>
}
 8002104:	bf00      	nop
 8002106:	3708      	adds	r7, #8
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	200000ec 	.word	0x200000ec
 8002110:	20000000 	.word	0x20000000
 8002114:	10624dd3 	.word	0x10624dd3

08002118 <bsp_InitUart>:
*********************************************************************************************************
*	Func name: bsp_InitUart
*********************************************************************************************************
*/
void bsp_InitUart(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0
	UartVarInit();		/* ±ØÐëÏÈ³õÊ¼»¯È«¾Ö±äÁ¿,ÔÙÅäÖÃÓ²¼þ */
 800211c:	f000 f81e 	bl	800215c <UartVarInit>

	InitHardUart();		/* ÅäÖÃ´®¿ÚµÄÓ²¼þ²ÎÊý(²¨ÌØÂÊµÈ) */
 8002120:	f000 f8f6 	bl	8002310 <InitHardUart>

	ConfigUartNVIC();	/* ÅäÖÃ´®¿ÚÖÐ¶Ï */
 8002124:	f000 f9d6 	bl	80024d4 <ConfigUartNVIC>
}
 8002128:	bf00      	nop
 800212a:	bd80      	pop	{r7, pc}

0800212c <USART3_SendBefor>:
*********************************************************************************************************
*	Func name: USART3_SendBefor
*********************************************************************************************************
*/
void USART3_SendBefor(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0
	RS485_TX_EN();	/* ÇÐ»»RS485ÊÕ·¢Ð¾Æ¬Îª·¢ËÍÄ£Ê½ */
 8002130:	2201      	movs	r2, #1
 8002132:	2104      	movs	r1, #4
 8002134:	4802      	ldr	r0, [pc, #8]	; (8002140 <USART3_SendBefor+0x14>)
 8002136:	f000 fd79 	bl	8002c2c <HAL_GPIO_WritePin>
}
 800213a:	bf00      	nop
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	40020400 	.word	0x40020400

08002144 <USART3_SendOver>:
*********************************************************************************************************
*	Func name: USART3_SendOver
*********************************************************************************************************
*/
void USART3_SendOver(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	af00      	add	r7, sp, #0
	RS485_RX_EN();	/* ÇÐ»»RS485ÊÕ·¢Ð¾Æ¬Îª½ÓÊÕÄ£Ê½ */
 8002148:	2200      	movs	r2, #0
 800214a:	2104      	movs	r1, #4
 800214c:	4802      	ldr	r0, [pc, #8]	; (8002158 <USART3_SendOver+0x14>)
 800214e:	f000 fd6d 	bl	8002c2c <HAL_GPIO_WritePin>
}
 8002152:	bf00      	nop
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	40020400 	.word	0x40020400

0800215c <UartVarInit>:
*********************************************************************************************************
*	Func name: UartVarInit
*********************************************************************************************************
*/
static void UartVarInit(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
#if UART1_FIFO_EN == 1
	g_tUart1.uart = USART1;						/* STM32 ´®¿ÚÉè±¸ */
 8002160:	4b59      	ldr	r3, [pc, #356]	; (80022c8 <UartVarInit+0x16c>)
 8002162:	4a5a      	ldr	r2, [pc, #360]	; (80022cc <UartVarInit+0x170>)
 8002164:	601a      	str	r2, [r3, #0]
	g_tUart1.pTxBuf = g_TxBuf1;					/* ·¢ËÍ»º³åÇøÖ¸Õë */
 8002166:	4b58      	ldr	r3, [pc, #352]	; (80022c8 <UartVarInit+0x16c>)
 8002168:	4a59      	ldr	r2, [pc, #356]	; (80022d0 <UartVarInit+0x174>)
 800216a:	605a      	str	r2, [r3, #4]
	g_tUart1.pRxBuf = g_RxBuf1;					/* ½ÓÊÕ»º³åÇøÖ¸Õë */
 800216c:	4b56      	ldr	r3, [pc, #344]	; (80022c8 <UartVarInit+0x16c>)
 800216e:	4a59      	ldr	r2, [pc, #356]	; (80022d4 <UartVarInit+0x178>)
 8002170:	609a      	str	r2, [r3, #8]
	g_tUart1.usTxBufSize = UART1_TX_BUF_SIZE;	/* ·¢ËÍ»º³åÇø´óÐ¡ */
 8002172:	4b55      	ldr	r3, [pc, #340]	; (80022c8 <UartVarInit+0x16c>)
 8002174:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002178:	819a      	strh	r2, [r3, #12]
	g_tUart1.usRxBufSize = UART1_RX_BUF_SIZE;	/* ½ÓÊÕ»º³åÇø´óÐ¡ */
 800217a:	4b53      	ldr	r3, [pc, #332]	; (80022c8 <UartVarInit+0x16c>)
 800217c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002180:	81da      	strh	r2, [r3, #14]
	g_tUart1.usTxWrite = 0;						/* ·¢ËÍFIFOÐ´Ë÷Òý */
 8002182:	4b51      	ldr	r3, [pc, #324]	; (80022c8 <UartVarInit+0x16c>)
 8002184:	2200      	movs	r2, #0
 8002186:	821a      	strh	r2, [r3, #16]
	g_tUart1.usTxRead = 0;						/* ·¢ËÍFIFO¶ÁË÷Òý */
 8002188:	4b4f      	ldr	r3, [pc, #316]	; (80022c8 <UartVarInit+0x16c>)
 800218a:	2200      	movs	r2, #0
 800218c:	825a      	strh	r2, [r3, #18]
	g_tUart1.usRxWrite = 0;						/* ½ÓÊÕFIFOÐ´Ë÷Òý */
 800218e:	4b4e      	ldr	r3, [pc, #312]	; (80022c8 <UartVarInit+0x16c>)
 8002190:	2200      	movs	r2, #0
 8002192:	82da      	strh	r2, [r3, #22]
	g_tUart1.usRxRead = 0;						/* ½ÓÊÕFIFO¶ÁË÷Òý */
 8002194:	4b4c      	ldr	r3, [pc, #304]	; (80022c8 <UartVarInit+0x16c>)
 8002196:	2200      	movs	r2, #0
 8002198:	831a      	strh	r2, [r3, #24]
	g_tUart1.usRxCount = 0;						/* ½ÓÊÕµ½µÄÐÂÊý¾Ý¸öÊý */
 800219a:	4b4b      	ldr	r3, [pc, #300]	; (80022c8 <UartVarInit+0x16c>)
 800219c:	2200      	movs	r2, #0
 800219e:	835a      	strh	r2, [r3, #26]
	g_tUart1.usTxCount = 0;						/* ´ý·¢ËÍµÄÊý¾Ý¸öÊý */
 80021a0:	4b49      	ldr	r3, [pc, #292]	; (80022c8 <UartVarInit+0x16c>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	829a      	strh	r2, [r3, #20]
	g_tUart1.SendBefor = 0;						/* ·¢ËÍÊý¾ÝÇ°µÄ»Øµ÷º¯Êý */
 80021a6:	4b48      	ldr	r3, [pc, #288]	; (80022c8 <UartVarInit+0x16c>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	61da      	str	r2, [r3, #28]
	g_tUart1.SendOver = 0;						/* ·¢ËÍÍê±ÏºóµÄ»Øµ÷º¯Êý */
 80021ac:	4b46      	ldr	r3, [pc, #280]	; (80022c8 <UartVarInit+0x16c>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	621a      	str	r2, [r3, #32]
	g_tUart1.ReciveNew = 0;						/* ½ÓÊÕµ½ÐÂÊý¾ÝºóµÄ»Øµ÷º¯Êý */
 80021b2:	4b45      	ldr	r3, [pc, #276]	; (80022c8 <UartVarInit+0x16c>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	625a      	str	r2, [r3, #36]	; 0x24
#endif

#if UART2_FIFO_EN == 1
	g_tUart2.uart = USART2;						/* STM32 ´®¿ÚÉè±¸ */
 80021b8:	4b47      	ldr	r3, [pc, #284]	; (80022d8 <UartVarInit+0x17c>)
 80021ba:	4a48      	ldr	r2, [pc, #288]	; (80022dc <UartVarInit+0x180>)
 80021bc:	601a      	str	r2, [r3, #0]
	g_tUart2.pTxBuf = g_TxBuf2;					/* ·¢ËÍ»º³åÇøÖ¸Õë */
 80021be:	4b46      	ldr	r3, [pc, #280]	; (80022d8 <UartVarInit+0x17c>)
 80021c0:	4a47      	ldr	r2, [pc, #284]	; (80022e0 <UartVarInit+0x184>)
 80021c2:	605a      	str	r2, [r3, #4]
	g_tUart2.pRxBuf = g_RxBuf2;					/* ½ÓÊÕ»º³åÇøÖ¸Õë */
 80021c4:	4b44      	ldr	r3, [pc, #272]	; (80022d8 <UartVarInit+0x17c>)
 80021c6:	4a47      	ldr	r2, [pc, #284]	; (80022e4 <UartVarInit+0x188>)
 80021c8:	609a      	str	r2, [r3, #8]
	g_tUart2.usTxBufSize = UART2_TX_BUF_SIZE;	/* ·¢ËÍ»º³åÇø´óÐ¡ */
 80021ca:	4b43      	ldr	r3, [pc, #268]	; (80022d8 <UartVarInit+0x17c>)
 80021cc:	2201      	movs	r2, #1
 80021ce:	819a      	strh	r2, [r3, #12]
	g_tUart2.usRxBufSize = UART2_RX_BUF_SIZE;	/* ½ÓÊÕ»º³åÇø´óÐ¡ */
 80021d0:	4b41      	ldr	r3, [pc, #260]	; (80022d8 <UartVarInit+0x17c>)
 80021d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80021d6:	81da      	strh	r2, [r3, #14]
	g_tUart2.usTxWrite = 0;						/* ·¢ËÍFIFOÐ´Ë÷Òý */
 80021d8:	4b3f      	ldr	r3, [pc, #252]	; (80022d8 <UartVarInit+0x17c>)
 80021da:	2200      	movs	r2, #0
 80021dc:	821a      	strh	r2, [r3, #16]
	g_tUart2.usTxRead = 0;						/* ·¢ËÍFIFO¶ÁË÷Òý */
 80021de:	4b3e      	ldr	r3, [pc, #248]	; (80022d8 <UartVarInit+0x17c>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	825a      	strh	r2, [r3, #18]
	g_tUart2.usRxWrite = 0;						/* ½ÓÊÕFIFOÐ´Ë÷Òý */
 80021e4:	4b3c      	ldr	r3, [pc, #240]	; (80022d8 <UartVarInit+0x17c>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	82da      	strh	r2, [r3, #22]
	g_tUart2.usRxRead = 0;						/* ½ÓÊÕFIFO¶ÁË÷Òý */
 80021ea:	4b3b      	ldr	r3, [pc, #236]	; (80022d8 <UartVarInit+0x17c>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	831a      	strh	r2, [r3, #24]
	g_tUart2.usRxCount = 0;						/* ½ÓÊÕµ½µÄÐÂÊý¾Ý¸öÊý */
 80021f0:	4b39      	ldr	r3, [pc, #228]	; (80022d8 <UartVarInit+0x17c>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	835a      	strh	r2, [r3, #26]
	g_tUart2.usTxCount = 0;						/* ´ý·¢ËÍµÄÊý¾Ý¸öÊý */
 80021f6:	4b38      	ldr	r3, [pc, #224]	; (80022d8 <UartVarInit+0x17c>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	829a      	strh	r2, [r3, #20]
	g_tUart2.SendBefor = 0;						/* ·¢ËÍÊý¾ÝÇ°µÄ»Øµ÷º¯Êý */
 80021fc:	4b36      	ldr	r3, [pc, #216]	; (80022d8 <UartVarInit+0x17c>)
 80021fe:	2200      	movs	r2, #0
 8002200:	61da      	str	r2, [r3, #28]
	g_tUart2.SendOver = 0;						/* ·¢ËÍÍê±ÏºóµÄ»Øµ÷º¯Êý */
 8002202:	4b35      	ldr	r3, [pc, #212]	; (80022d8 <UartVarInit+0x17c>)
 8002204:	2200      	movs	r2, #0
 8002206:	621a      	str	r2, [r3, #32]
	g_tUart2.ReciveNew = 0;						/* ½ÓÊÕµ½ÐÂÊý¾ÝºóµÄ»Øµ÷º¯Êý */
 8002208:	4b33      	ldr	r3, [pc, #204]	; (80022d8 <UartVarInit+0x17c>)
 800220a:	2200      	movs	r2, #0
 800220c:	625a      	str	r2, [r3, #36]	; 0x24
#endif

#if UART3_FIFO_EN == 1
	g_tUart3.uart = USART3;						/* STM32 ´®¿ÚÉè±¸ */
 800220e:	4b36      	ldr	r3, [pc, #216]	; (80022e8 <UartVarInit+0x18c>)
 8002210:	4a36      	ldr	r2, [pc, #216]	; (80022ec <UartVarInit+0x190>)
 8002212:	601a      	str	r2, [r3, #0]
	g_tUart3.pTxBuf = g_TxBuf3;					/* ·¢ËÍ»º³åÇøÖ¸Õë */
 8002214:	4b34      	ldr	r3, [pc, #208]	; (80022e8 <UartVarInit+0x18c>)
 8002216:	4a36      	ldr	r2, [pc, #216]	; (80022f0 <UartVarInit+0x194>)
 8002218:	605a      	str	r2, [r3, #4]
	g_tUart3.pRxBuf = g_RxBuf3;					/* ½ÓÊÕ»º³åÇøÖ¸Õë */
 800221a:	4b33      	ldr	r3, [pc, #204]	; (80022e8 <UartVarInit+0x18c>)
 800221c:	4a35      	ldr	r2, [pc, #212]	; (80022f4 <UartVarInit+0x198>)
 800221e:	609a      	str	r2, [r3, #8]
	g_tUart3.usTxBufSize = UART3_TX_BUF_SIZE;	/* ·¢ËÍ»º³åÇø´óÐ¡ */
 8002220:	4b31      	ldr	r3, [pc, #196]	; (80022e8 <UartVarInit+0x18c>)
 8002222:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002226:	819a      	strh	r2, [r3, #12]
	g_tUart3.usRxBufSize = UART3_RX_BUF_SIZE;	/* ½ÓÊÕ»º³åÇø´óÐ¡ */
 8002228:	4b2f      	ldr	r3, [pc, #188]	; (80022e8 <UartVarInit+0x18c>)
 800222a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800222e:	81da      	strh	r2, [r3, #14]
	g_tUart3.usTxWrite = 0;						/* ·¢ËÍFIFOÐ´Ë÷Òý */
 8002230:	4b2d      	ldr	r3, [pc, #180]	; (80022e8 <UartVarInit+0x18c>)
 8002232:	2200      	movs	r2, #0
 8002234:	821a      	strh	r2, [r3, #16]
	g_tUart3.usTxRead = 0;						/* ·¢ËÍFIFO¶ÁË÷Òý */
 8002236:	4b2c      	ldr	r3, [pc, #176]	; (80022e8 <UartVarInit+0x18c>)
 8002238:	2200      	movs	r2, #0
 800223a:	825a      	strh	r2, [r3, #18]
	g_tUart3.usRxWrite = 0;						/* ½ÓÊÕFIFOÐ´Ë÷Òý */
 800223c:	4b2a      	ldr	r3, [pc, #168]	; (80022e8 <UartVarInit+0x18c>)
 800223e:	2200      	movs	r2, #0
 8002240:	82da      	strh	r2, [r3, #22]
	g_tUart3.usRxRead = 0;						/* ½ÓÊÕFIFO¶ÁË÷Òý */
 8002242:	4b29      	ldr	r3, [pc, #164]	; (80022e8 <UartVarInit+0x18c>)
 8002244:	2200      	movs	r2, #0
 8002246:	831a      	strh	r2, [r3, #24]
	g_tUart3.usRxCount = 0;						/* ½ÓÊÕµ½µÄÐÂÊý¾Ý¸öÊý */
 8002248:	4b27      	ldr	r3, [pc, #156]	; (80022e8 <UartVarInit+0x18c>)
 800224a:	2200      	movs	r2, #0
 800224c:	835a      	strh	r2, [r3, #26]
	g_tUart3.usTxCount = 0;						/* ´ý·¢ËÍµÄÊý¾Ý¸öÊý */
 800224e:	4b26      	ldr	r3, [pc, #152]	; (80022e8 <UartVarInit+0x18c>)
 8002250:	2200      	movs	r2, #0
 8002252:	829a      	strh	r2, [r3, #20]
	g_tUart3.SendBefor = USART3_SendBefor;		/* ·¢ËÍÊý¾ÝÇ°µÄ»Øµ÷º¯Êý */
 8002254:	4b24      	ldr	r3, [pc, #144]	; (80022e8 <UartVarInit+0x18c>)
 8002256:	4a28      	ldr	r2, [pc, #160]	; (80022f8 <UartVarInit+0x19c>)
 8002258:	61da      	str	r2, [r3, #28]
	g_tUart3.SendOver = USART3_SendOver;		/* ·¢ËÍÍê±ÏºóµÄ»Øµ÷º¯Êý */
 800225a:	4b23      	ldr	r3, [pc, #140]	; (80022e8 <UartVarInit+0x18c>)
 800225c:	4a27      	ldr	r2, [pc, #156]	; (80022fc <UartVarInit+0x1a0>)
 800225e:	621a      	str	r2, [r3, #32]
	g_tUart3.ReciveNew = 0;						/* ½ÓÊÕµ½ÐÂÊý¾ÝºóµÄ»Øµ÷º¯Êý */
 8002260:	4b21      	ldr	r3, [pc, #132]	; (80022e8 <UartVarInit+0x18c>)
 8002262:	2200      	movs	r2, #0
 8002264:	625a      	str	r2, [r3, #36]	; 0x24
	g_tUart5.ReciveNew = 0;						/* ½ÓÊÕµ½ÐÂÊý¾ÝºóµÄ»Øµ÷º¯Êý */
#endif


#if UART6_FIFO_EN == 1
	g_tUart6.uart = USART6;						/* STM32 ´®¿ÚÉè±¸ */
 8002266:	4b26      	ldr	r3, [pc, #152]	; (8002300 <UartVarInit+0x1a4>)
 8002268:	4a26      	ldr	r2, [pc, #152]	; (8002304 <UartVarInit+0x1a8>)
 800226a:	601a      	str	r2, [r3, #0]
	g_tUart6.pTxBuf = g_TxBuf6;					/* ·¢ËÍ»º³åÇøÖ¸Õë */
 800226c:	4b24      	ldr	r3, [pc, #144]	; (8002300 <UartVarInit+0x1a4>)
 800226e:	4a26      	ldr	r2, [pc, #152]	; (8002308 <UartVarInit+0x1ac>)
 8002270:	605a      	str	r2, [r3, #4]
	g_tUart6.pRxBuf = g_RxBuf6;					/* ½ÓÊÕ»º³åÇøÖ¸Õë */
 8002272:	4b23      	ldr	r3, [pc, #140]	; (8002300 <UartVarInit+0x1a4>)
 8002274:	4a25      	ldr	r2, [pc, #148]	; (800230c <UartVarInit+0x1b0>)
 8002276:	609a      	str	r2, [r3, #8]
	g_tUart6.usTxBufSize = UART6_TX_BUF_SIZE;	/* ·¢ËÍ»º³åÇø´óÐ¡ */
 8002278:	4b21      	ldr	r3, [pc, #132]	; (8002300 <UartVarInit+0x1a4>)
 800227a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800227e:	819a      	strh	r2, [r3, #12]
	g_tUart6.usRxBufSize = UART6_RX_BUF_SIZE;	/* ½ÓÊÕ»º³åÇø´óÐ¡ */
 8002280:	4b1f      	ldr	r3, [pc, #124]	; (8002300 <UartVarInit+0x1a4>)
 8002282:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002286:	81da      	strh	r2, [r3, #14]
	g_tUart6.usTxWrite = 0;						/* ·¢ËÍFIFOÐ´Ë÷Òý */
 8002288:	4b1d      	ldr	r3, [pc, #116]	; (8002300 <UartVarInit+0x1a4>)
 800228a:	2200      	movs	r2, #0
 800228c:	821a      	strh	r2, [r3, #16]
	g_tUart6.usTxRead = 0;						/* ·¢ËÍFIFO¶ÁË÷Òý */
 800228e:	4b1c      	ldr	r3, [pc, #112]	; (8002300 <UartVarInit+0x1a4>)
 8002290:	2200      	movs	r2, #0
 8002292:	825a      	strh	r2, [r3, #18]
	g_tUart6.usRxWrite = 0;						/* ½ÓÊÕFIFOÐ´Ë÷Òý */
 8002294:	4b1a      	ldr	r3, [pc, #104]	; (8002300 <UartVarInit+0x1a4>)
 8002296:	2200      	movs	r2, #0
 8002298:	82da      	strh	r2, [r3, #22]
	g_tUart6.usRxRead = 0;						/* ½ÓÊÕFIFO¶ÁË÷Òý */
 800229a:	4b19      	ldr	r3, [pc, #100]	; (8002300 <UartVarInit+0x1a4>)
 800229c:	2200      	movs	r2, #0
 800229e:	831a      	strh	r2, [r3, #24]
	g_tUart6.usRxCount = 0;						/* ½ÓÊÕµ½µÄÐÂÊý¾Ý¸öÊý */
 80022a0:	4b17      	ldr	r3, [pc, #92]	; (8002300 <UartVarInit+0x1a4>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	835a      	strh	r2, [r3, #26]
	g_tUart6.usTxCount = 0;						/* ´ý·¢ËÍµÄÊý¾Ý¸öÊý */
 80022a6:	4b16      	ldr	r3, [pc, #88]	; (8002300 <UartVarInit+0x1a4>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	829a      	strh	r2, [r3, #20]
	g_tUart6.SendBefor = 0;						/* ·¢ËÍÊý¾ÝÇ°µÄ»Øµ÷º¯Êý */
 80022ac:	4b14      	ldr	r3, [pc, #80]	; (8002300 <UartVarInit+0x1a4>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	61da      	str	r2, [r3, #28]
	g_tUart6.SendOver = 0;						/* ·¢ËÍÍê±ÏºóµÄ»Øµ÷º¯Êý */
 80022b2:	4b13      	ldr	r3, [pc, #76]	; (8002300 <UartVarInit+0x1a4>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	621a      	str	r2, [r3, #32]
	g_tUart6.ReciveNew = 0;						/* ½ÓÊÕµ½ÐÂÊý¾ÝºóµÄ»Øµ÷º¯Êý */
 80022b8:	4b11      	ldr	r3, [pc, #68]	; (8002300 <UartVarInit+0x1a4>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	625a      	str	r2, [r3, #36]	; 0x24
#endif
}
 80022be:	bf00      	nop
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr
 80022c8:	2000011c 	.word	0x2000011c
 80022cc:	40011000 	.word	0x40011000
 80022d0:	20000144 	.word	0x20000144
 80022d4:	20000544 	.word	0x20000544
 80022d8:	20000944 	.word	0x20000944
 80022dc:	40004400 	.word	0x40004400
 80022e0:	2000096c 	.word	0x2000096c
 80022e4:	20000970 	.word	0x20000970
 80022e8:	20001170 	.word	0x20001170
 80022ec:	40004800 	.word	0x40004800
 80022f0:	20001198 	.word	0x20001198
 80022f4:	20001598 	.word	0x20001598
 80022f8:	0800212d 	.word	0x0800212d
 80022fc:	08002145 	.word	0x08002145
 8002300:	20001998 	.word	0x20001998
 8002304:	40011400 	.word	0x40011400
 8002308:	200019c0 	.word	0x200019c0
 800230c:	20001dc0 	.word	0x20001dc0

08002310 <InitHardUart>:
*********************************************************************************************************
*	Func name: InitHardUart
*********************************************************************************************************
*/
static void InitHardUart(void)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b08a      	sub	sp, #40	; 0x28
 8002314:	af00      	add	r7, sp, #0
	//UART_HandleTypeDef USART_InitStructure2;
	//UART_HandleTypeDef USART_InitStructure3;
	//UART_HandleTypeDef USART_InitStructure6;

#if UART1_FIFO_EN == 1		/* TX = PA9   RX = PA10  TX = PB6   RX = PB7*/
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002316:	2300      	movs	r3, #0
 8002318:	613b      	str	r3, [r7, #16]
 800231a:	4b68      	ldr	r3, [pc, #416]	; (80024bc <InitHardUart+0x1ac>)
 800231c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231e:	4a67      	ldr	r2, [pc, #412]	; (80024bc <InitHardUart+0x1ac>)
 8002320:	f043 0301 	orr.w	r3, r3, #1
 8002324:	6313      	str	r3, [r2, #48]	; 0x30
 8002326:	4b65      	ldr	r3, [pc, #404]	; (80024bc <InitHardUart+0x1ac>)
 8002328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232a:	f003 0301 	and.w	r3, r3, #1
 800232e:	613b      	str	r3, [r7, #16]
 8002330:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_USART1_CLK_ENABLE();
 8002332:	2300      	movs	r3, #0
 8002334:	60fb      	str	r3, [r7, #12]
 8002336:	4b61      	ldr	r3, [pc, #388]	; (80024bc <InitHardUart+0x1ac>)
 8002338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800233a:	4a60      	ldr	r2, [pc, #384]	; (80024bc <InitHardUart+0x1ac>)
 800233c:	f043 0310 	orr.w	r3, r3, #16
 8002340:	6453      	str	r3, [r2, #68]	; 0x44
 8002342:	4b5e      	ldr	r3, [pc, #376]	; (80024bc <InitHardUart+0x1ac>)
 8002344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002346:	f003 0310 	and.w	r3, r3, #16
 800234a:	60fb      	str	r3, [r7, #12]
 800234c:	68fb      	ldr	r3, [r7, #12]
#if	1
	// TX
	GPIO_InitStructure.Pin = GPIO_PIN_9;
 800234e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002352:	617b      	str	r3, [r7, #20]
	GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8002354:	2302      	movs	r3, #2
 8002356:	61bb      	str	r3, [r7, #24]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002358:	2302      	movs	r3, #2
 800235a:	623b      	str	r3, [r7, #32]
	GPIO_InitStructure.Pull = GPIO_NOPULL;
 800235c:	2300      	movs	r3, #0
 800235e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStructure.Alternate = GPIO_AF7_USART1;
 8002360:	2307      	movs	r3, #7
 8002362:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002364:	f107 0314 	add.w	r3, r7, #20
 8002368:	4619      	mov	r1, r3
 800236a:	4855      	ldr	r0, [pc, #340]	; (80024c0 <InitHardUart+0x1b0>)
 800236c:	f000 fac2 	bl	80028f4 <HAL_GPIO_Init>
	// RX
	GPIO_InitStructure.Pin = GPIO_PIN_10;
 8002370:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002374:	617b      	str	r3, [r7, #20]
	GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8002376:	2302      	movs	r3, #2
 8002378:	61bb      	str	r3, [r7, #24]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 800237a:	2302      	movs	r3, #2
 800237c:	623b      	str	r3, [r7, #32]
	GPIO_InitStructure.Pull = GPIO_NOPULL;
 800237e:	2300      	movs	r3, #0
 8002380:	61fb      	str	r3, [r7, #28]
	GPIO_InitStructure.Alternate = GPIO_AF7_USART1;
 8002382:	2307      	movs	r3, #7
 8002384:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002386:	f107 0314 	add.w	r3, r7, #20
 800238a:	4619      	mov	r1, r3
 800238c:	484c      	ldr	r0, [pc, #304]	; (80024c0 <InitHardUart+0x1b0>)
 800238e:	f000 fab1 	bl	80028f4 <HAL_GPIO_Init>
#endif
	USART_InitStructure1.Instance = USART1;
 8002392:	4b4c      	ldr	r3, [pc, #304]	; (80024c4 <InitHardUart+0x1b4>)
 8002394:	4a4c      	ldr	r2, [pc, #304]	; (80024c8 <InitHardUart+0x1b8>)
 8002396:	601a      	str	r2, [r3, #0]
	USART_InitStructure1.Init.BaudRate = UART1_BAUD;
 8002398:	4b4a      	ldr	r3, [pc, #296]	; (80024c4 <InitHardUart+0x1b4>)
 800239a:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800239e:	605a      	str	r2, [r3, #4]
	USART_InitStructure1.Init.WordLength = UART_WORDLENGTH_8B;
 80023a0:	4b48      	ldr	r3, [pc, #288]	; (80024c4 <InitHardUart+0x1b4>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	609a      	str	r2, [r3, #8]
	USART_InitStructure1.Init.StopBits = UART_STOPBITS_1;
 80023a6:	4b47      	ldr	r3, [pc, #284]	; (80024c4 <InitHardUart+0x1b4>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	60da      	str	r2, [r3, #12]
	USART_InitStructure1.Init.Parity = UART_PARITY_NONE;
 80023ac:	4b45      	ldr	r3, [pc, #276]	; (80024c4 <InitHardUart+0x1b4>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	611a      	str	r2, [r3, #16]
	USART_InitStructure1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023b2:	4b44      	ldr	r3, [pc, #272]	; (80024c4 <InitHardUart+0x1b4>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	619a      	str	r2, [r3, #24]
	USART_InitStructure1.Init.Mode = UART_MODE_TX_RX;
 80023b8:	4b42      	ldr	r3, [pc, #264]	; (80024c4 <InitHardUart+0x1b4>)
 80023ba:	220c      	movs	r2, #12
 80023bc:	615a      	str	r2, [r3, #20]
	HAL_UART_Init(&USART_InitStructure1);
 80023be:	4841      	ldr	r0, [pc, #260]	; (80024c4 <InitHardUart+0x1b4>)
 80023c0:	f7fe f9a0 	bl	8000704 <HAL_UART_Init>

	__HAL_UART_ENABLE_IT(&USART_InitStructure1,UART_IT_RXNE);
 80023c4:	4b3f      	ldr	r3, [pc, #252]	; (80024c4 <InitHardUart+0x1b4>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	68da      	ldr	r2, [r3, #12]
 80023ca:	4b3e      	ldr	r3, [pc, #248]	; (80024c4 <InitHardUart+0x1b4>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f042 0220 	orr.w	r2, r2, #32
 80023d2:	60da      	str	r2, [r3, #12]
	__HAL_UART_ENABLE(&USART_InitStructure1);
 80023d4:	4b3b      	ldr	r3, [pc, #236]	; (80024c4 <InitHardUart+0x1b4>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	68da      	ldr	r2, [r3, #12]
 80023da:	4b3a      	ldr	r3, [pc, #232]	; (80024c4 <InitHardUart+0x1b4>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80023e2:	60da      	str	r2, [r3, #12]
	__HAL_UART_CLEAR_FLAG(&USART_InitStructure1, UART_FLAG_TC);
 80023e4:	4b37      	ldr	r3, [pc, #220]	; (80024c4 <InitHardUart+0x1b4>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80023ec:	601a      	str	r2, [r3, #0]
#endif

#if UART2_FIFO_EN == 1		/* TX = PD5   RX = PD6 TX = PA2 RX = PA3  */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80023ee:	2300      	movs	r3, #0
 80023f0:	60bb      	str	r3, [r7, #8]
 80023f2:	4b32      	ldr	r3, [pc, #200]	; (80024bc <InitHardUart+0x1ac>)
 80023f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f6:	4a31      	ldr	r2, [pc, #196]	; (80024bc <InitHardUart+0x1ac>)
 80023f8:	f043 0301 	orr.w	r3, r3, #1
 80023fc:	6313      	str	r3, [r2, #48]	; 0x30
 80023fe:	4b2f      	ldr	r3, [pc, #188]	; (80024bc <InitHardUart+0x1ac>)
 8002400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002402:	f003 0301 	and.w	r3, r3, #1
 8002406:	60bb      	str	r3, [r7, #8]
 8002408:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_USART2_CLK_ENABLE();
 800240a:	2300      	movs	r3, #0
 800240c:	607b      	str	r3, [r7, #4]
 800240e:	4b2b      	ldr	r3, [pc, #172]	; (80024bc <InitHardUart+0x1ac>)
 8002410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002412:	4a2a      	ldr	r2, [pc, #168]	; (80024bc <InitHardUart+0x1ac>)
 8002414:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002418:	6413      	str	r3, [r2, #64]	; 0x40
 800241a:	4b28      	ldr	r3, [pc, #160]	; (80024bc <InitHardUart+0x1ac>)
 800241c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002422:	607b      	str	r3, [r7, #4]
 8002424:	687b      	ldr	r3, [r7, #4]

	// TX
	GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8002426:	2302      	movs	r3, #2
 8002428:	61bb      	str	r3, [r7, #24]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 800242a:	2302      	movs	r3, #2
 800242c:	623b      	str	r3, [r7, #32]
	GPIO_InitStructure.Pull = GPIO_NOPULL;
 800242e:	2300      	movs	r3, #0
 8002430:	61fb      	str	r3, [r7, #28]
	GPIO_InitStructure.Alternate = GPIO_AF7_USART2;
 8002432:	2307      	movs	r3, #7
 8002434:	627b      	str	r3, [r7, #36]	; 0x24
	// RX
	GPIO_InitStructure.Pin = GPIO_PIN_3;
 8002436:	2308      	movs	r3, #8
 8002438:	617b      	str	r3, [r7, #20]
	GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 800243a:	2302      	movs	r3, #2
 800243c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 800243e:	2302      	movs	r3, #2
 8002440:	623b      	str	r3, [r7, #32]
	GPIO_InitStructure.Pull = GPIO_NOPULL;
 8002442:	2300      	movs	r3, #0
 8002444:	61fb      	str	r3, [r7, #28]
	GPIO_InitStructure.Alternate = GPIO_AF7_USART2;
 8002446:	2307      	movs	r3, #7
 8002448:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 800244a:	f107 0314 	add.w	r3, r7, #20
 800244e:	4619      	mov	r1, r3
 8002450:	481b      	ldr	r0, [pc, #108]	; (80024c0 <InitHardUart+0x1b0>)
 8002452:	f000 fa4f 	bl	80028f4 <HAL_GPIO_Init>

	USART_InitStructure2.Instance = USART2;
 8002456:	4b1d      	ldr	r3, [pc, #116]	; (80024cc <InitHardUart+0x1bc>)
 8002458:	4a1d      	ldr	r2, [pc, #116]	; (80024d0 <InitHardUart+0x1c0>)
 800245a:	601a      	str	r2, [r3, #0]
	USART_InitStructure2.Init.BaudRate = UART2_BAUD;
 800245c:	4b1b      	ldr	r3, [pc, #108]	; (80024cc <InitHardUart+0x1bc>)
 800245e:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002462:	605a      	str	r2, [r3, #4]
	USART_InitStructure2.Init.WordLength = UART_WORDLENGTH_8B;
 8002464:	4b19      	ldr	r3, [pc, #100]	; (80024cc <InitHardUart+0x1bc>)
 8002466:	2200      	movs	r2, #0
 8002468:	609a      	str	r2, [r3, #8]
	USART_InitStructure2.Init.StopBits = UART_STOPBITS_1;
 800246a:	4b18      	ldr	r3, [pc, #96]	; (80024cc <InitHardUart+0x1bc>)
 800246c:	2200      	movs	r2, #0
 800246e:	60da      	str	r2, [r3, #12]
	USART_InitStructure2.Init.Parity = UART_PARITY_NONE;
 8002470:	4b16      	ldr	r3, [pc, #88]	; (80024cc <InitHardUart+0x1bc>)
 8002472:	2200      	movs	r2, #0
 8002474:	611a      	str	r2, [r3, #16]
	USART_InitStructure2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002476:	4b15      	ldr	r3, [pc, #84]	; (80024cc <InitHardUart+0x1bc>)
 8002478:	2200      	movs	r2, #0
 800247a:	619a      	str	r2, [r3, #24]
	USART_InitStructure2.Init.Mode = UART_MODE_RX;
 800247c:	4b13      	ldr	r3, [pc, #76]	; (80024cc <InitHardUart+0x1bc>)
 800247e:	2204      	movs	r2, #4
 8002480:	615a      	str	r2, [r3, #20]
	HAL_UART_Init(&USART_InitStructure2);
 8002482:	4812      	ldr	r0, [pc, #72]	; (80024cc <InitHardUart+0x1bc>)
 8002484:	f7fe f93e 	bl	8000704 <HAL_UART_Init>

	__HAL_UART_ENABLE_IT(&USART_InitStructure2,UART_IT_RXNE);
 8002488:	4b10      	ldr	r3, [pc, #64]	; (80024cc <InitHardUart+0x1bc>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	68da      	ldr	r2, [r3, #12]
 800248e:	4b0f      	ldr	r3, [pc, #60]	; (80024cc <InitHardUart+0x1bc>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f042 0220 	orr.w	r2, r2, #32
 8002496:	60da      	str	r2, [r3, #12]
	__HAL_UART_ENABLE(&USART_InitStructure2);
 8002498:	4b0c      	ldr	r3, [pc, #48]	; (80024cc <InitHardUart+0x1bc>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	68da      	ldr	r2, [r3, #12]
 800249e:	4b0b      	ldr	r3, [pc, #44]	; (80024cc <InitHardUart+0x1bc>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80024a6:	60da      	str	r2, [r3, #12]
	__HAL_UART_CLEAR_FLAG(&USART_InitStructure2, UART_FLAG_TC);
 80024a8:	4b08      	ldr	r3, [pc, #32]	; (80024cc <InitHardUart+0x1bc>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80024b0:	601a      	str	r2, [r3, #0]
	__HAL_UART_ENABLE_IT(&USART_InitStructure6,UART_IT_RXNE);
	__HAL_UART_ENABLE(&USART_InitStructure6);
	__HAL_UART_CLEAR_FLAG(&USART_InitStructure6, UART_FLAG_TC);
#endif
#endif
}
 80024b2:	bf00      	nop
 80024b4:	3728      	adds	r7, #40	; 0x28
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	40023800 	.word	0x40023800
 80024c0:	40020000 	.word	0x40020000
 80024c4:	200021c0 	.word	0x200021c0
 80024c8:	40011000 	.word	0x40011000
 80024cc:	20002204 	.word	0x20002204
 80024d0:	40004400 	.word	0x40004400

080024d4 <ConfigUartNVIC>:

static void ConfigUartNVIC(void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	af00      	add	r7, sp, #0
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80024d8:	2007      	movs	r0, #7
 80024da:	f000 f9c9 	bl	8002870 <HAL_NVIC_SetPriorityGrouping>

#if UART1_FIFO_EN == 1
	  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80024de:	2200      	movs	r2, #0
 80024e0:	2100      	movs	r1, #0
 80024e2:	2025      	movs	r0, #37	; 0x25
 80024e4:	f000 f9cf 	bl	8002886 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(USART1_IRQn);
 80024e8:	2025      	movs	r0, #37	; 0x25
 80024ea:	f000 f9e8 	bl	80028be <HAL_NVIC_EnableIRQ>
#endif

#if UART2_FIFO_EN == 1
	  HAL_NVIC_SetPriority(USART2_IRQn, 0, 1);
 80024ee:	2201      	movs	r2, #1
 80024f0:	2100      	movs	r1, #0
 80024f2:	2026      	movs	r0, #38	; 0x26
 80024f4:	f000 f9c7 	bl	8002886 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(USART2_IRQn);
 80024f8:	2026      	movs	r0, #38	; 0x26
 80024fa:	f000 f9e0 	bl	80028be <HAL_NVIC_EnableIRQ>
#endif

#if UART3_FIFO_EN == 1
	  HAL_NVIC_SetPriority(USART3_IRQn, 0, 2);
 80024fe:	2202      	movs	r2, #2
 8002500:	2100      	movs	r1, #0
 8002502:	2027      	movs	r0, #39	; 0x27
 8002504:	f000 f9bf 	bl	8002886 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002508:	2027      	movs	r0, #39	; 0x27
 800250a:	f000 f9d8 	bl	80028be <HAL_NVIC_EnableIRQ>
	  HAL_NVIC_SetPriority(UART5_IRQn, 0, 4);
	  HAL_NVIC_EnableIRQ(UART5_IRQn);
#endif

#if UART6_FIFO_EN == 1
	  HAL_NVIC_SetPriority(USART6_IRQn, 0, 5);
 800250e:	2205      	movs	r2, #5
 8002510:	2100      	movs	r1, #0
 8002512:	2047      	movs	r0, #71	; 0x47
 8002514:	f000 f9b7 	bl	8002886 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002518:	2047      	movs	r0, #71	; 0x47
 800251a:	f000 f9d0 	bl	80028be <HAL_NVIC_EnableIRQ>
#endif
}
 800251e:	bf00      	nop
 8002520:	bd80      	pop	{r7, pc}
	...

08002524 <UART1_Transmit>:
  * @param  data: 송신할 데이터 버퍼의 포인터
  * @param  size: 송신할 데이터 크기
  * @retval HAL 상태 (HAL_OK, HAL_ERROR, HAL_BUSY, HAL_TIMEOUT)
 */
HAL_StatusTypeDef UART1_Transmit(uint8_t *data, uint16_t size)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b084      	sub	sp, #16
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	460b      	mov	r3, r1
 800252e:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status;

  // 폴링 방식으로 데이터 송신
  status = HAL_UART_Transmit(&USART_InitStructure1, data, size, 1000); // 타임아웃 1000ms
 8002530:	887a      	ldrh	r2, [r7, #2]
 8002532:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002536:	6879      	ldr	r1, [r7, #4]
 8002538:	4807      	ldr	r0, [pc, #28]	; (8002558 <UART1_Transmit+0x34>)
 800253a:	f7fe f93a 	bl	80007b2 <HAL_UART_Transmit>
 800253e:	4603      	mov	r3, r0
 8002540:	73fb      	strb	r3, [r7, #15]

  // 송신 완료 플래그 클리어
  __HAL_UART_CLEAR_FLAG(&USART_InitStructure1, UART_FLAG_TC);
 8002542:	4b05      	ldr	r3, [pc, #20]	; (8002558 <UART1_Transmit+0x34>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800254a:	601a      	str	r2, [r3, #0]

  return status;
 800254c:	7bfb      	ldrb	r3, [r7, #15]
}
 800254e:	4618      	mov	r0, r3
 8002550:	3710      	adds	r7, #16
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	200021c0 	.word	0x200021c0

0800255c <UART1_Transmit_String>:
  * @brief  UART1을 통해 문자열을 송신하는 함수
  * @param  str: 송신할 문자열
  * @retval HAL 상태 (HAL_OK, HAL_ERROR, HAL_BUSY, HAL_TIMEOUT)
  */
HAL_StatusTypeDef UART1_Transmit_String(char *str)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  return UART1_Transmit((uint8_t*)str, strlen(str));
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	f7fd fe2f 	bl	80001c8 <strlen>
 800256a:	4603      	mov	r3, r0
 800256c:	b29b      	uxth	r3, r3
 800256e:	4619      	mov	r1, r3
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	f7ff ffd7 	bl	8002524 <UART1_Transmit>
 8002576:	4603      	mov	r3, r0
}
 8002578:	4618      	mov	r0, r3
 800257a:	3708      	adds	r7, #8
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}

08002580 <bsp_Init>:
 *      Author: compro
 */
#include "bsp.h"

void bsp_Init(void)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	af00      	add	r7, sp, #0
	bsp_InitUart();
 8002584:	f7ff fdc8 	bl	8002118 <bsp_InitUart>

	bsp_InitLed();
 8002588:	f7ff faca 	bl	8001b20 <bsp_InitLed>

	bsp_InitKey();
 800258c:	f7ff f986 	bl	800189c <bsp_InitKey>

	bsp_InitI2C();
 8002590:	f7ff f8aa 	bl	80016e8 <bsp_InitI2C>

	bsp_InitTimer();
 8002594:	f7ff fd7a 	bl	800208c <bsp_InitTimer>

	//bsp_DelayMS(20);
	HAL_Delay(20);
 8002598:	2014      	movs	r0, #20
 800259a:	f000 f875 	bl	8002688 <HAL_Delay>
}
 800259e:	bf00      	nop
 80025a0:	bd80      	pop	{r7, pc}
	...

080025a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80025a8:	4b0e      	ldr	r3, [pc, #56]	; (80025e4 <HAL_Init+0x40>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a0d      	ldr	r2, [pc, #52]	; (80025e4 <HAL_Init+0x40>)
 80025ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80025b4:	4b0b      	ldr	r3, [pc, #44]	; (80025e4 <HAL_Init+0x40>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a0a      	ldr	r2, [pc, #40]	; (80025e4 <HAL_Init+0x40>)
 80025ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025c0:	4b08      	ldr	r3, [pc, #32]	; (80025e4 <HAL_Init+0x40>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a07      	ldr	r2, [pc, #28]	; (80025e4 <HAL_Init+0x40>)
 80025c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025cc:	2003      	movs	r0, #3
 80025ce:	f000 f94f 	bl	8002870 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025d2:	200f      	movs	r0, #15
 80025d4:	f000 f808 	bl	80025e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025d8:	f7fe f81a 	bl	8000610 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025dc:	2300      	movs	r3, #0
}
 80025de:	4618      	mov	r0, r3
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	40023c00 	.word	0x40023c00

080025e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b082      	sub	sp, #8
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80025f0:	4b12      	ldr	r3, [pc, #72]	; (800263c <HAL_InitTick+0x54>)
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	4b12      	ldr	r3, [pc, #72]	; (8002640 <HAL_InitTick+0x58>)
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	4619      	mov	r1, r3
 80025fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002602:	fbb2 f3f3 	udiv	r3, r2, r3
 8002606:	4618      	mov	r0, r3
 8002608:	f000 f967 	bl	80028da <HAL_SYSTICK_Config>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d001      	beq.n	8002616 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e00e      	b.n	8002634 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2b0f      	cmp	r3, #15
 800261a:	d80a      	bhi.n	8002632 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800261c:	2200      	movs	r2, #0
 800261e:	6879      	ldr	r1, [r7, #4]
 8002620:	f04f 30ff 	mov.w	r0, #4294967295
 8002624:	f000 f92f 	bl	8002886 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002628:	4a06      	ldr	r2, [pc, #24]	; (8002644 <HAL_InitTick+0x5c>)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800262e:	2300      	movs	r3, #0
 8002630:	e000      	b.n	8002634 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
}
 8002634:	4618      	mov	r0, r3
 8002636:	3708      	adds	r7, #8
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}
 800263c:	20000000 	.word	0x20000000
 8002640:	20000014 	.word	0x20000014
 8002644:	20000010 	.word	0x20000010

08002648 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002648:	b480      	push	{r7}
 800264a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800264c:	4b06      	ldr	r3, [pc, #24]	; (8002668 <HAL_IncTick+0x20>)
 800264e:	781b      	ldrb	r3, [r3, #0]
 8002650:	461a      	mov	r2, r3
 8002652:	4b06      	ldr	r3, [pc, #24]	; (800266c <HAL_IncTick+0x24>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4413      	add	r3, r2
 8002658:	4a04      	ldr	r2, [pc, #16]	; (800266c <HAL_IncTick+0x24>)
 800265a:	6013      	str	r3, [r2, #0]
}
 800265c:	bf00      	nop
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr
 8002666:	bf00      	nop
 8002668:	20000014 	.word	0x20000014
 800266c:	20002248 	.word	0x20002248

08002670 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002670:	b480      	push	{r7}
 8002672:	af00      	add	r7, sp, #0
  return uwTick;
 8002674:	4b03      	ldr	r3, [pc, #12]	; (8002684 <HAL_GetTick+0x14>)
 8002676:	681b      	ldr	r3, [r3, #0]
}
 8002678:	4618      	mov	r0, r3
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr
 8002682:	bf00      	nop
 8002684:	20002248 	.word	0x20002248

08002688 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b084      	sub	sp, #16
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002690:	f7ff ffee 	bl	8002670 <HAL_GetTick>
 8002694:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026a0:	d005      	beq.n	80026ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026a2:	4b0a      	ldr	r3, [pc, #40]	; (80026cc <HAL_Delay+0x44>)
 80026a4:	781b      	ldrb	r3, [r3, #0]
 80026a6:	461a      	mov	r2, r3
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	4413      	add	r3, r2
 80026ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80026ae:	bf00      	nop
 80026b0:	f7ff ffde 	bl	8002670 <HAL_GetTick>
 80026b4:	4602      	mov	r2, r0
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	68fa      	ldr	r2, [r7, #12]
 80026bc:	429a      	cmp	r2, r3
 80026be:	d8f7      	bhi.n	80026b0 <HAL_Delay+0x28>
  {
  }
}
 80026c0:	bf00      	nop
 80026c2:	bf00      	nop
 80026c4:	3710      	adds	r7, #16
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	20000014 	.word	0x20000014

080026d0 <__NVIC_SetPriorityGrouping>:
{
 80026d0:	b480      	push	{r7}
 80026d2:	b085      	sub	sp, #20
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	f003 0307 	and.w	r3, r3, #7
 80026de:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026e0:	4b0c      	ldr	r3, [pc, #48]	; (8002714 <__NVIC_SetPriorityGrouping+0x44>)
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026e6:	68ba      	ldr	r2, [r7, #8]
 80026e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026ec:	4013      	ands	r3, r2
 80026ee:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002700:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002702:	4a04      	ldr	r2, [pc, #16]	; (8002714 <__NVIC_SetPriorityGrouping+0x44>)
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	60d3      	str	r3, [r2, #12]
}
 8002708:	bf00      	nop
 800270a:	3714      	adds	r7, #20
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr
 8002714:	e000ed00 	.word	0xe000ed00

08002718 <__NVIC_GetPriorityGrouping>:
{
 8002718:	b480      	push	{r7}
 800271a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800271c:	4b04      	ldr	r3, [pc, #16]	; (8002730 <__NVIC_GetPriorityGrouping+0x18>)
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	0a1b      	lsrs	r3, r3, #8
 8002722:	f003 0307 	and.w	r3, r3, #7
}
 8002726:	4618      	mov	r0, r3
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr
 8002730:	e000ed00 	.word	0xe000ed00

08002734 <__NVIC_EnableIRQ>:
{
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	4603      	mov	r3, r0
 800273c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800273e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002742:	2b00      	cmp	r3, #0
 8002744:	db0b      	blt.n	800275e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002746:	79fb      	ldrb	r3, [r7, #7]
 8002748:	f003 021f 	and.w	r2, r3, #31
 800274c:	4907      	ldr	r1, [pc, #28]	; (800276c <__NVIC_EnableIRQ+0x38>)
 800274e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002752:	095b      	lsrs	r3, r3, #5
 8002754:	2001      	movs	r0, #1
 8002756:	fa00 f202 	lsl.w	r2, r0, r2
 800275a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800275e:	bf00      	nop
 8002760:	370c      	adds	r7, #12
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop
 800276c:	e000e100 	.word	0xe000e100

08002770 <__NVIC_SetPriority>:
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	4603      	mov	r3, r0
 8002778:	6039      	str	r1, [r7, #0]
 800277a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800277c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002780:	2b00      	cmp	r3, #0
 8002782:	db0a      	blt.n	800279a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	b2da      	uxtb	r2, r3
 8002788:	490c      	ldr	r1, [pc, #48]	; (80027bc <__NVIC_SetPriority+0x4c>)
 800278a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800278e:	0112      	lsls	r2, r2, #4
 8002790:	b2d2      	uxtb	r2, r2
 8002792:	440b      	add	r3, r1
 8002794:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002798:	e00a      	b.n	80027b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	b2da      	uxtb	r2, r3
 800279e:	4908      	ldr	r1, [pc, #32]	; (80027c0 <__NVIC_SetPriority+0x50>)
 80027a0:	79fb      	ldrb	r3, [r7, #7]
 80027a2:	f003 030f 	and.w	r3, r3, #15
 80027a6:	3b04      	subs	r3, #4
 80027a8:	0112      	lsls	r2, r2, #4
 80027aa:	b2d2      	uxtb	r2, r2
 80027ac:	440b      	add	r3, r1
 80027ae:	761a      	strb	r2, [r3, #24]
}
 80027b0:	bf00      	nop
 80027b2:	370c      	adds	r7, #12
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr
 80027bc:	e000e100 	.word	0xe000e100
 80027c0:	e000ed00 	.word	0xe000ed00

080027c4 <NVIC_EncodePriority>:
{
 80027c4:	b480      	push	{r7}
 80027c6:	b089      	sub	sp, #36	; 0x24
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	60b9      	str	r1, [r7, #8]
 80027ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	f003 0307 	and.w	r3, r3, #7
 80027d6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	f1c3 0307 	rsb	r3, r3, #7
 80027de:	2b04      	cmp	r3, #4
 80027e0:	bf28      	it	cs
 80027e2:	2304      	movcs	r3, #4
 80027e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	3304      	adds	r3, #4
 80027ea:	2b06      	cmp	r3, #6
 80027ec:	d902      	bls.n	80027f4 <NVIC_EncodePriority+0x30>
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	3b03      	subs	r3, #3
 80027f2:	e000      	b.n	80027f6 <NVIC_EncodePriority+0x32>
 80027f4:	2300      	movs	r3, #0
 80027f6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027f8:	f04f 32ff 	mov.w	r2, #4294967295
 80027fc:	69bb      	ldr	r3, [r7, #24]
 80027fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002802:	43da      	mvns	r2, r3
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	401a      	ands	r2, r3
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800280c:	f04f 31ff 	mov.w	r1, #4294967295
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	fa01 f303 	lsl.w	r3, r1, r3
 8002816:	43d9      	mvns	r1, r3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800281c:	4313      	orrs	r3, r2
}
 800281e:	4618      	mov	r0, r3
 8002820:	3724      	adds	r7, #36	; 0x24
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr
	...

0800282c <SysTick_Config>:
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	3b01      	subs	r3, #1
 8002838:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800283c:	d301      	bcc.n	8002842 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800283e:	2301      	movs	r3, #1
 8002840:	e00f      	b.n	8002862 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002842:	4a0a      	ldr	r2, [pc, #40]	; (800286c <SysTick_Config+0x40>)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	3b01      	subs	r3, #1
 8002848:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800284a:	210f      	movs	r1, #15
 800284c:	f04f 30ff 	mov.w	r0, #4294967295
 8002850:	f7ff ff8e 	bl	8002770 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002854:	4b05      	ldr	r3, [pc, #20]	; (800286c <SysTick_Config+0x40>)
 8002856:	2200      	movs	r2, #0
 8002858:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800285a:	4b04      	ldr	r3, [pc, #16]	; (800286c <SysTick_Config+0x40>)
 800285c:	2207      	movs	r2, #7
 800285e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002860:	2300      	movs	r3, #0
}
 8002862:	4618      	mov	r0, r3
 8002864:	3708      	adds	r7, #8
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	e000e010 	.word	0xe000e010

08002870 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	f7ff ff29 	bl	80026d0 <__NVIC_SetPriorityGrouping>
}
 800287e:	bf00      	nop
 8002880:	3708      	adds	r7, #8
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}

08002886 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002886:	b580      	push	{r7, lr}
 8002888:	b086      	sub	sp, #24
 800288a:	af00      	add	r7, sp, #0
 800288c:	4603      	mov	r3, r0
 800288e:	60b9      	str	r1, [r7, #8]
 8002890:	607a      	str	r2, [r7, #4]
 8002892:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002894:	2300      	movs	r3, #0
 8002896:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002898:	f7ff ff3e 	bl	8002718 <__NVIC_GetPriorityGrouping>
 800289c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	68b9      	ldr	r1, [r7, #8]
 80028a2:	6978      	ldr	r0, [r7, #20]
 80028a4:	f7ff ff8e 	bl	80027c4 <NVIC_EncodePriority>
 80028a8:	4602      	mov	r2, r0
 80028aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028ae:	4611      	mov	r1, r2
 80028b0:	4618      	mov	r0, r3
 80028b2:	f7ff ff5d 	bl	8002770 <__NVIC_SetPriority>
}
 80028b6:	bf00      	nop
 80028b8:	3718      	adds	r7, #24
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}

080028be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028be:	b580      	push	{r7, lr}
 80028c0:	b082      	sub	sp, #8
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	4603      	mov	r3, r0
 80028c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028cc:	4618      	mov	r0, r3
 80028ce:	f7ff ff31 	bl	8002734 <__NVIC_EnableIRQ>
}
 80028d2:	bf00      	nop
 80028d4:	3708      	adds	r7, #8
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}

080028da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028da:	b580      	push	{r7, lr}
 80028dc:	b082      	sub	sp, #8
 80028de:	af00      	add	r7, sp, #0
 80028e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f7ff ffa2 	bl	800282c <SysTick_Config>
 80028e8:	4603      	mov	r3, r0
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3708      	adds	r7, #8
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
	...

080028f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b089      	sub	sp, #36	; 0x24
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80028fe:	2300      	movs	r3, #0
 8002900:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002902:	2300      	movs	r3, #0
 8002904:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002906:	2300      	movs	r3, #0
 8002908:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800290a:	2300      	movs	r3, #0
 800290c:	61fb      	str	r3, [r7, #28]
 800290e:	e16b      	b.n	8002be8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002910:	2201      	movs	r2, #1
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	fa02 f303 	lsl.w	r3, r2, r3
 8002918:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	697a      	ldr	r2, [r7, #20]
 8002920:	4013      	ands	r3, r2
 8002922:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002924:	693a      	ldr	r2, [r7, #16]
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	429a      	cmp	r2, r3
 800292a:	f040 815a 	bne.w	8002be2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	f003 0303 	and.w	r3, r3, #3
 8002936:	2b01      	cmp	r3, #1
 8002938:	d005      	beq.n	8002946 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002942:	2b02      	cmp	r3, #2
 8002944:	d130      	bne.n	80029a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	005b      	lsls	r3, r3, #1
 8002950:	2203      	movs	r2, #3
 8002952:	fa02 f303 	lsl.w	r3, r2, r3
 8002956:	43db      	mvns	r3, r3
 8002958:	69ba      	ldr	r2, [r7, #24]
 800295a:	4013      	ands	r3, r2
 800295c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	68da      	ldr	r2, [r3, #12]
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	005b      	lsls	r3, r3, #1
 8002966:	fa02 f303 	lsl.w	r3, r2, r3
 800296a:	69ba      	ldr	r2, [r7, #24]
 800296c:	4313      	orrs	r3, r2
 800296e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	69ba      	ldr	r2, [r7, #24]
 8002974:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800297c:	2201      	movs	r2, #1
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	fa02 f303 	lsl.w	r3, r2, r3
 8002984:	43db      	mvns	r3, r3
 8002986:	69ba      	ldr	r2, [r7, #24]
 8002988:	4013      	ands	r3, r2
 800298a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	091b      	lsrs	r3, r3, #4
 8002992:	f003 0201 	and.w	r2, r3, #1
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	fa02 f303 	lsl.w	r3, r2, r3
 800299c:	69ba      	ldr	r2, [r7, #24]
 800299e:	4313      	orrs	r3, r2
 80029a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	69ba      	ldr	r2, [r7, #24]
 80029a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f003 0303 	and.w	r3, r3, #3
 80029b0:	2b03      	cmp	r3, #3
 80029b2:	d017      	beq.n	80029e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	005b      	lsls	r3, r3, #1
 80029be:	2203      	movs	r2, #3
 80029c0:	fa02 f303 	lsl.w	r3, r2, r3
 80029c4:	43db      	mvns	r3, r3
 80029c6:	69ba      	ldr	r2, [r7, #24]
 80029c8:	4013      	ands	r3, r2
 80029ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	689a      	ldr	r2, [r3, #8]
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	005b      	lsls	r3, r3, #1
 80029d4:	fa02 f303 	lsl.w	r3, r2, r3
 80029d8:	69ba      	ldr	r2, [r7, #24]
 80029da:	4313      	orrs	r3, r2
 80029dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	69ba      	ldr	r2, [r7, #24]
 80029e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f003 0303 	and.w	r3, r3, #3
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	d123      	bne.n	8002a38 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	08da      	lsrs	r2, r3, #3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	3208      	adds	r2, #8
 80029f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	f003 0307 	and.w	r3, r3, #7
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	220f      	movs	r2, #15
 8002a08:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0c:	43db      	mvns	r3, r3
 8002a0e:	69ba      	ldr	r2, [r7, #24]
 8002a10:	4013      	ands	r3, r2
 8002a12:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	691a      	ldr	r2, [r3, #16]
 8002a18:	69fb      	ldr	r3, [r7, #28]
 8002a1a:	f003 0307 	and.w	r3, r3, #7
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	fa02 f303 	lsl.w	r3, r2, r3
 8002a24:	69ba      	ldr	r2, [r7, #24]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	08da      	lsrs	r2, r3, #3
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	3208      	adds	r2, #8
 8002a32:	69b9      	ldr	r1, [r7, #24]
 8002a34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	005b      	lsls	r3, r3, #1
 8002a42:	2203      	movs	r2, #3
 8002a44:	fa02 f303 	lsl.w	r3, r2, r3
 8002a48:	43db      	mvns	r3, r3
 8002a4a:	69ba      	ldr	r2, [r7, #24]
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f003 0203 	and.w	r2, r3, #3
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	005b      	lsls	r3, r3, #1
 8002a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a60:	69ba      	ldr	r2, [r7, #24]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	69ba      	ldr	r2, [r7, #24]
 8002a6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	f000 80b4 	beq.w	8002be2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	60fb      	str	r3, [r7, #12]
 8002a7e:	4b60      	ldr	r3, [pc, #384]	; (8002c00 <HAL_GPIO_Init+0x30c>)
 8002a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a82:	4a5f      	ldr	r2, [pc, #380]	; (8002c00 <HAL_GPIO_Init+0x30c>)
 8002a84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a88:	6453      	str	r3, [r2, #68]	; 0x44
 8002a8a:	4b5d      	ldr	r3, [pc, #372]	; (8002c00 <HAL_GPIO_Init+0x30c>)
 8002a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a92:	60fb      	str	r3, [r7, #12]
 8002a94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a96:	4a5b      	ldr	r2, [pc, #364]	; (8002c04 <HAL_GPIO_Init+0x310>)
 8002a98:	69fb      	ldr	r3, [r7, #28]
 8002a9a:	089b      	lsrs	r3, r3, #2
 8002a9c:	3302      	adds	r3, #2
 8002a9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002aa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	f003 0303 	and.w	r3, r3, #3
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	220f      	movs	r2, #15
 8002aae:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab2:	43db      	mvns	r3, r3
 8002ab4:	69ba      	ldr	r2, [r7, #24]
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	4a52      	ldr	r2, [pc, #328]	; (8002c08 <HAL_GPIO_Init+0x314>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d02b      	beq.n	8002b1a <HAL_GPIO_Init+0x226>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	4a51      	ldr	r2, [pc, #324]	; (8002c0c <HAL_GPIO_Init+0x318>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d025      	beq.n	8002b16 <HAL_GPIO_Init+0x222>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4a50      	ldr	r2, [pc, #320]	; (8002c10 <HAL_GPIO_Init+0x31c>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d01f      	beq.n	8002b12 <HAL_GPIO_Init+0x21e>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4a4f      	ldr	r2, [pc, #316]	; (8002c14 <HAL_GPIO_Init+0x320>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d019      	beq.n	8002b0e <HAL_GPIO_Init+0x21a>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	4a4e      	ldr	r2, [pc, #312]	; (8002c18 <HAL_GPIO_Init+0x324>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d013      	beq.n	8002b0a <HAL_GPIO_Init+0x216>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4a4d      	ldr	r2, [pc, #308]	; (8002c1c <HAL_GPIO_Init+0x328>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d00d      	beq.n	8002b06 <HAL_GPIO_Init+0x212>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4a4c      	ldr	r2, [pc, #304]	; (8002c20 <HAL_GPIO_Init+0x32c>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d007      	beq.n	8002b02 <HAL_GPIO_Init+0x20e>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	4a4b      	ldr	r2, [pc, #300]	; (8002c24 <HAL_GPIO_Init+0x330>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d101      	bne.n	8002afe <HAL_GPIO_Init+0x20a>
 8002afa:	2307      	movs	r3, #7
 8002afc:	e00e      	b.n	8002b1c <HAL_GPIO_Init+0x228>
 8002afe:	2308      	movs	r3, #8
 8002b00:	e00c      	b.n	8002b1c <HAL_GPIO_Init+0x228>
 8002b02:	2306      	movs	r3, #6
 8002b04:	e00a      	b.n	8002b1c <HAL_GPIO_Init+0x228>
 8002b06:	2305      	movs	r3, #5
 8002b08:	e008      	b.n	8002b1c <HAL_GPIO_Init+0x228>
 8002b0a:	2304      	movs	r3, #4
 8002b0c:	e006      	b.n	8002b1c <HAL_GPIO_Init+0x228>
 8002b0e:	2303      	movs	r3, #3
 8002b10:	e004      	b.n	8002b1c <HAL_GPIO_Init+0x228>
 8002b12:	2302      	movs	r3, #2
 8002b14:	e002      	b.n	8002b1c <HAL_GPIO_Init+0x228>
 8002b16:	2301      	movs	r3, #1
 8002b18:	e000      	b.n	8002b1c <HAL_GPIO_Init+0x228>
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	69fa      	ldr	r2, [r7, #28]
 8002b1e:	f002 0203 	and.w	r2, r2, #3
 8002b22:	0092      	lsls	r2, r2, #2
 8002b24:	4093      	lsls	r3, r2
 8002b26:	69ba      	ldr	r2, [r7, #24]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b2c:	4935      	ldr	r1, [pc, #212]	; (8002c04 <HAL_GPIO_Init+0x310>)
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	089b      	lsrs	r3, r3, #2
 8002b32:	3302      	adds	r3, #2
 8002b34:	69ba      	ldr	r2, [r7, #24]
 8002b36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b3a:	4b3b      	ldr	r3, [pc, #236]	; (8002c28 <HAL_GPIO_Init+0x334>)
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	43db      	mvns	r3, r3
 8002b44:	69ba      	ldr	r2, [r7, #24]
 8002b46:	4013      	ands	r3, r2
 8002b48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d003      	beq.n	8002b5e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002b56:	69ba      	ldr	r2, [r7, #24]
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b5e:	4a32      	ldr	r2, [pc, #200]	; (8002c28 <HAL_GPIO_Init+0x334>)
 8002b60:	69bb      	ldr	r3, [r7, #24]
 8002b62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b64:	4b30      	ldr	r3, [pc, #192]	; (8002c28 <HAL_GPIO_Init+0x334>)
 8002b66:	68db      	ldr	r3, [r3, #12]
 8002b68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	43db      	mvns	r3, r3
 8002b6e:	69ba      	ldr	r2, [r7, #24]
 8002b70:	4013      	ands	r3, r2
 8002b72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d003      	beq.n	8002b88 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002b80:	69ba      	ldr	r2, [r7, #24]
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	4313      	orrs	r3, r2
 8002b86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b88:	4a27      	ldr	r2, [pc, #156]	; (8002c28 <HAL_GPIO_Init+0x334>)
 8002b8a:	69bb      	ldr	r3, [r7, #24]
 8002b8c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b8e:	4b26      	ldr	r3, [pc, #152]	; (8002c28 <HAL_GPIO_Init+0x334>)
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	43db      	mvns	r3, r3
 8002b98:	69ba      	ldr	r2, [r7, #24]
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d003      	beq.n	8002bb2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002baa:	69ba      	ldr	r2, [r7, #24]
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002bb2:	4a1d      	ldr	r2, [pc, #116]	; (8002c28 <HAL_GPIO_Init+0x334>)
 8002bb4:	69bb      	ldr	r3, [r7, #24]
 8002bb6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002bb8:	4b1b      	ldr	r3, [pc, #108]	; (8002c28 <HAL_GPIO_Init+0x334>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	43db      	mvns	r3, r3
 8002bc2:	69ba      	ldr	r2, [r7, #24]
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d003      	beq.n	8002bdc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002bd4:	69ba      	ldr	r2, [r7, #24]
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002bdc:	4a12      	ldr	r2, [pc, #72]	; (8002c28 <HAL_GPIO_Init+0x334>)
 8002bde:	69bb      	ldr	r3, [r7, #24]
 8002be0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	3301      	adds	r3, #1
 8002be6:	61fb      	str	r3, [r7, #28]
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	2b0f      	cmp	r3, #15
 8002bec:	f67f ae90 	bls.w	8002910 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002bf0:	bf00      	nop
 8002bf2:	bf00      	nop
 8002bf4:	3724      	adds	r7, #36	; 0x24
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr
 8002bfe:	bf00      	nop
 8002c00:	40023800 	.word	0x40023800
 8002c04:	40013800 	.word	0x40013800
 8002c08:	40020000 	.word	0x40020000
 8002c0c:	40020400 	.word	0x40020400
 8002c10:	40020800 	.word	0x40020800
 8002c14:	40020c00 	.word	0x40020c00
 8002c18:	40021000 	.word	0x40021000
 8002c1c:	40021400 	.word	0x40021400
 8002c20:	40021800 	.word	0x40021800
 8002c24:	40021c00 	.word	0x40021c00
 8002c28:	40013c00 	.word	0x40013c00

08002c2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b083      	sub	sp, #12
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
 8002c34:	460b      	mov	r3, r1
 8002c36:	807b      	strh	r3, [r7, #2]
 8002c38:	4613      	mov	r3, r2
 8002c3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c3c:	787b      	ldrb	r3, [r7, #1]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d003      	beq.n	8002c4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c42:	887a      	ldrh	r2, [r7, #2]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c48:	e003      	b.n	8002c52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c4a:	887b      	ldrh	r3, [r7, #2]
 8002c4c:	041a      	lsls	r2, r3, #16
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	619a      	str	r2, [r3, #24]
}
 8002c52:	bf00      	nop
 8002c54:	370c      	adds	r7, #12
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr
	...

08002c60 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b086      	sub	sp, #24
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d101      	bne.n	8002c72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e267      	b.n	8003142 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 0301 	and.w	r3, r3, #1
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d075      	beq.n	8002d6a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c7e:	4b88      	ldr	r3, [pc, #544]	; (8002ea0 <HAL_RCC_OscConfig+0x240>)
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	f003 030c 	and.w	r3, r3, #12
 8002c86:	2b04      	cmp	r3, #4
 8002c88:	d00c      	beq.n	8002ca4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c8a:	4b85      	ldr	r3, [pc, #532]	; (8002ea0 <HAL_RCC_OscConfig+0x240>)
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c92:	2b08      	cmp	r3, #8
 8002c94:	d112      	bne.n	8002cbc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c96:	4b82      	ldr	r3, [pc, #520]	; (8002ea0 <HAL_RCC_OscConfig+0x240>)
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ca2:	d10b      	bne.n	8002cbc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ca4:	4b7e      	ldr	r3, [pc, #504]	; (8002ea0 <HAL_RCC_OscConfig+0x240>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d05b      	beq.n	8002d68 <HAL_RCC_OscConfig+0x108>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d157      	bne.n	8002d68 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e242      	b.n	8003142 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cc4:	d106      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x74>
 8002cc6:	4b76      	ldr	r3, [pc, #472]	; (8002ea0 <HAL_RCC_OscConfig+0x240>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a75      	ldr	r2, [pc, #468]	; (8002ea0 <HAL_RCC_OscConfig+0x240>)
 8002ccc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cd0:	6013      	str	r3, [r2, #0]
 8002cd2:	e01d      	b.n	8002d10 <HAL_RCC_OscConfig+0xb0>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002cdc:	d10c      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x98>
 8002cde:	4b70      	ldr	r3, [pc, #448]	; (8002ea0 <HAL_RCC_OscConfig+0x240>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a6f      	ldr	r2, [pc, #444]	; (8002ea0 <HAL_RCC_OscConfig+0x240>)
 8002ce4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ce8:	6013      	str	r3, [r2, #0]
 8002cea:	4b6d      	ldr	r3, [pc, #436]	; (8002ea0 <HAL_RCC_OscConfig+0x240>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a6c      	ldr	r2, [pc, #432]	; (8002ea0 <HAL_RCC_OscConfig+0x240>)
 8002cf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cf4:	6013      	str	r3, [r2, #0]
 8002cf6:	e00b      	b.n	8002d10 <HAL_RCC_OscConfig+0xb0>
 8002cf8:	4b69      	ldr	r3, [pc, #420]	; (8002ea0 <HAL_RCC_OscConfig+0x240>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a68      	ldr	r2, [pc, #416]	; (8002ea0 <HAL_RCC_OscConfig+0x240>)
 8002cfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d02:	6013      	str	r3, [r2, #0]
 8002d04:	4b66      	ldr	r3, [pc, #408]	; (8002ea0 <HAL_RCC_OscConfig+0x240>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a65      	ldr	r2, [pc, #404]	; (8002ea0 <HAL_RCC_OscConfig+0x240>)
 8002d0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d013      	beq.n	8002d40 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d18:	f7ff fcaa 	bl	8002670 <HAL_GetTick>
 8002d1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d1e:	e008      	b.n	8002d32 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d20:	f7ff fca6 	bl	8002670 <HAL_GetTick>
 8002d24:	4602      	mov	r2, r0
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	2b64      	cmp	r3, #100	; 0x64
 8002d2c:	d901      	bls.n	8002d32 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	e207      	b.n	8003142 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d32:	4b5b      	ldr	r3, [pc, #364]	; (8002ea0 <HAL_RCC_OscConfig+0x240>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d0f0      	beq.n	8002d20 <HAL_RCC_OscConfig+0xc0>
 8002d3e:	e014      	b.n	8002d6a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d40:	f7ff fc96 	bl	8002670 <HAL_GetTick>
 8002d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d46:	e008      	b.n	8002d5a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d48:	f7ff fc92 	bl	8002670 <HAL_GetTick>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	2b64      	cmp	r3, #100	; 0x64
 8002d54:	d901      	bls.n	8002d5a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d56:	2303      	movs	r3, #3
 8002d58:	e1f3      	b.n	8003142 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d5a:	4b51      	ldr	r3, [pc, #324]	; (8002ea0 <HAL_RCC_OscConfig+0x240>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d1f0      	bne.n	8002d48 <HAL_RCC_OscConfig+0xe8>
 8002d66:	e000      	b.n	8002d6a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0302 	and.w	r3, r3, #2
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d063      	beq.n	8002e3e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d76:	4b4a      	ldr	r3, [pc, #296]	; (8002ea0 <HAL_RCC_OscConfig+0x240>)
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	f003 030c 	and.w	r3, r3, #12
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d00b      	beq.n	8002d9a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d82:	4b47      	ldr	r3, [pc, #284]	; (8002ea0 <HAL_RCC_OscConfig+0x240>)
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d8a:	2b08      	cmp	r3, #8
 8002d8c:	d11c      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d8e:	4b44      	ldr	r3, [pc, #272]	; (8002ea0 <HAL_RCC_OscConfig+0x240>)
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d116      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d9a:	4b41      	ldr	r3, [pc, #260]	; (8002ea0 <HAL_RCC_OscConfig+0x240>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0302 	and.w	r3, r3, #2
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d005      	beq.n	8002db2 <HAL_RCC_OscConfig+0x152>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d001      	beq.n	8002db2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e1c7      	b.n	8003142 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002db2:	4b3b      	ldr	r3, [pc, #236]	; (8002ea0 <HAL_RCC_OscConfig+0x240>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	691b      	ldr	r3, [r3, #16]
 8002dbe:	00db      	lsls	r3, r3, #3
 8002dc0:	4937      	ldr	r1, [pc, #220]	; (8002ea0 <HAL_RCC_OscConfig+0x240>)
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dc6:	e03a      	b.n	8002e3e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d020      	beq.n	8002e12 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002dd0:	4b34      	ldr	r3, [pc, #208]	; (8002ea4 <HAL_RCC_OscConfig+0x244>)
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dd6:	f7ff fc4b 	bl	8002670 <HAL_GetTick>
 8002dda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ddc:	e008      	b.n	8002df0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dde:	f7ff fc47 	bl	8002670 <HAL_GetTick>
 8002de2:	4602      	mov	r2, r0
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	1ad3      	subs	r3, r2, r3
 8002de8:	2b02      	cmp	r3, #2
 8002dea:	d901      	bls.n	8002df0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002dec:	2303      	movs	r3, #3
 8002dee:	e1a8      	b.n	8003142 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002df0:	4b2b      	ldr	r3, [pc, #172]	; (8002ea0 <HAL_RCC_OscConfig+0x240>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 0302 	and.w	r3, r3, #2
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d0f0      	beq.n	8002dde <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dfc:	4b28      	ldr	r3, [pc, #160]	; (8002ea0 <HAL_RCC_OscConfig+0x240>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	691b      	ldr	r3, [r3, #16]
 8002e08:	00db      	lsls	r3, r3, #3
 8002e0a:	4925      	ldr	r1, [pc, #148]	; (8002ea0 <HAL_RCC_OscConfig+0x240>)
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	600b      	str	r3, [r1, #0]
 8002e10:	e015      	b.n	8002e3e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e12:	4b24      	ldr	r3, [pc, #144]	; (8002ea4 <HAL_RCC_OscConfig+0x244>)
 8002e14:	2200      	movs	r2, #0
 8002e16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e18:	f7ff fc2a 	bl	8002670 <HAL_GetTick>
 8002e1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e1e:	e008      	b.n	8002e32 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e20:	f7ff fc26 	bl	8002670 <HAL_GetTick>
 8002e24:	4602      	mov	r2, r0
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	2b02      	cmp	r3, #2
 8002e2c:	d901      	bls.n	8002e32 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	e187      	b.n	8003142 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e32:	4b1b      	ldr	r3, [pc, #108]	; (8002ea0 <HAL_RCC_OscConfig+0x240>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0302 	and.w	r3, r3, #2
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d1f0      	bne.n	8002e20 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 0308 	and.w	r3, r3, #8
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d036      	beq.n	8002eb8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	695b      	ldr	r3, [r3, #20]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d016      	beq.n	8002e80 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e52:	4b15      	ldr	r3, [pc, #84]	; (8002ea8 <HAL_RCC_OscConfig+0x248>)
 8002e54:	2201      	movs	r2, #1
 8002e56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e58:	f7ff fc0a 	bl	8002670 <HAL_GetTick>
 8002e5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e5e:	e008      	b.n	8002e72 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e60:	f7ff fc06 	bl	8002670 <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d901      	bls.n	8002e72 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e167      	b.n	8003142 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e72:	4b0b      	ldr	r3, [pc, #44]	; (8002ea0 <HAL_RCC_OscConfig+0x240>)
 8002e74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e76:	f003 0302 	and.w	r3, r3, #2
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d0f0      	beq.n	8002e60 <HAL_RCC_OscConfig+0x200>
 8002e7e:	e01b      	b.n	8002eb8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e80:	4b09      	ldr	r3, [pc, #36]	; (8002ea8 <HAL_RCC_OscConfig+0x248>)
 8002e82:	2200      	movs	r2, #0
 8002e84:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e86:	f7ff fbf3 	bl	8002670 <HAL_GetTick>
 8002e8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e8c:	e00e      	b.n	8002eac <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e8e:	f7ff fbef 	bl	8002670 <HAL_GetTick>
 8002e92:	4602      	mov	r2, r0
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	2b02      	cmp	r3, #2
 8002e9a:	d907      	bls.n	8002eac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002e9c:	2303      	movs	r3, #3
 8002e9e:	e150      	b.n	8003142 <HAL_RCC_OscConfig+0x4e2>
 8002ea0:	40023800 	.word	0x40023800
 8002ea4:	42470000 	.word	0x42470000
 8002ea8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002eac:	4b88      	ldr	r3, [pc, #544]	; (80030d0 <HAL_RCC_OscConfig+0x470>)
 8002eae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002eb0:	f003 0302 	and.w	r3, r3, #2
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d1ea      	bne.n	8002e8e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 0304 	and.w	r3, r3, #4
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	f000 8097 	beq.w	8002ff4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002eca:	4b81      	ldr	r3, [pc, #516]	; (80030d0 <HAL_RCC_OscConfig+0x470>)
 8002ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d10f      	bne.n	8002ef6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	60bb      	str	r3, [r7, #8]
 8002eda:	4b7d      	ldr	r3, [pc, #500]	; (80030d0 <HAL_RCC_OscConfig+0x470>)
 8002edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ede:	4a7c      	ldr	r2, [pc, #496]	; (80030d0 <HAL_RCC_OscConfig+0x470>)
 8002ee0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ee4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ee6:	4b7a      	ldr	r3, [pc, #488]	; (80030d0 <HAL_RCC_OscConfig+0x470>)
 8002ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eee:	60bb      	str	r3, [r7, #8]
 8002ef0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ef6:	4b77      	ldr	r3, [pc, #476]	; (80030d4 <HAL_RCC_OscConfig+0x474>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d118      	bne.n	8002f34 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f02:	4b74      	ldr	r3, [pc, #464]	; (80030d4 <HAL_RCC_OscConfig+0x474>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a73      	ldr	r2, [pc, #460]	; (80030d4 <HAL_RCC_OscConfig+0x474>)
 8002f08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f0e:	f7ff fbaf 	bl	8002670 <HAL_GetTick>
 8002f12:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f14:	e008      	b.n	8002f28 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f16:	f7ff fbab 	bl	8002670 <HAL_GetTick>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	1ad3      	subs	r3, r2, r3
 8002f20:	2b02      	cmp	r3, #2
 8002f22:	d901      	bls.n	8002f28 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002f24:	2303      	movs	r3, #3
 8002f26:	e10c      	b.n	8003142 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f28:	4b6a      	ldr	r3, [pc, #424]	; (80030d4 <HAL_RCC_OscConfig+0x474>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d0f0      	beq.n	8002f16 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d106      	bne.n	8002f4a <HAL_RCC_OscConfig+0x2ea>
 8002f3c:	4b64      	ldr	r3, [pc, #400]	; (80030d0 <HAL_RCC_OscConfig+0x470>)
 8002f3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f40:	4a63      	ldr	r2, [pc, #396]	; (80030d0 <HAL_RCC_OscConfig+0x470>)
 8002f42:	f043 0301 	orr.w	r3, r3, #1
 8002f46:	6713      	str	r3, [r2, #112]	; 0x70
 8002f48:	e01c      	b.n	8002f84 <HAL_RCC_OscConfig+0x324>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	2b05      	cmp	r3, #5
 8002f50:	d10c      	bne.n	8002f6c <HAL_RCC_OscConfig+0x30c>
 8002f52:	4b5f      	ldr	r3, [pc, #380]	; (80030d0 <HAL_RCC_OscConfig+0x470>)
 8002f54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f56:	4a5e      	ldr	r2, [pc, #376]	; (80030d0 <HAL_RCC_OscConfig+0x470>)
 8002f58:	f043 0304 	orr.w	r3, r3, #4
 8002f5c:	6713      	str	r3, [r2, #112]	; 0x70
 8002f5e:	4b5c      	ldr	r3, [pc, #368]	; (80030d0 <HAL_RCC_OscConfig+0x470>)
 8002f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f62:	4a5b      	ldr	r2, [pc, #364]	; (80030d0 <HAL_RCC_OscConfig+0x470>)
 8002f64:	f043 0301 	orr.w	r3, r3, #1
 8002f68:	6713      	str	r3, [r2, #112]	; 0x70
 8002f6a:	e00b      	b.n	8002f84 <HAL_RCC_OscConfig+0x324>
 8002f6c:	4b58      	ldr	r3, [pc, #352]	; (80030d0 <HAL_RCC_OscConfig+0x470>)
 8002f6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f70:	4a57      	ldr	r2, [pc, #348]	; (80030d0 <HAL_RCC_OscConfig+0x470>)
 8002f72:	f023 0301 	bic.w	r3, r3, #1
 8002f76:	6713      	str	r3, [r2, #112]	; 0x70
 8002f78:	4b55      	ldr	r3, [pc, #340]	; (80030d0 <HAL_RCC_OscConfig+0x470>)
 8002f7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f7c:	4a54      	ldr	r2, [pc, #336]	; (80030d0 <HAL_RCC_OscConfig+0x470>)
 8002f7e:	f023 0304 	bic.w	r3, r3, #4
 8002f82:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d015      	beq.n	8002fb8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f8c:	f7ff fb70 	bl	8002670 <HAL_GetTick>
 8002f90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f92:	e00a      	b.n	8002faa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f94:	f7ff fb6c 	bl	8002670 <HAL_GetTick>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d901      	bls.n	8002faa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	e0cb      	b.n	8003142 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002faa:	4b49      	ldr	r3, [pc, #292]	; (80030d0 <HAL_RCC_OscConfig+0x470>)
 8002fac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fae:	f003 0302 	and.w	r3, r3, #2
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d0ee      	beq.n	8002f94 <HAL_RCC_OscConfig+0x334>
 8002fb6:	e014      	b.n	8002fe2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fb8:	f7ff fb5a 	bl	8002670 <HAL_GetTick>
 8002fbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fbe:	e00a      	b.n	8002fd6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fc0:	f7ff fb56 	bl	8002670 <HAL_GetTick>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d901      	bls.n	8002fd6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	e0b5      	b.n	8003142 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fd6:	4b3e      	ldr	r3, [pc, #248]	; (80030d0 <HAL_RCC_OscConfig+0x470>)
 8002fd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fda:	f003 0302 	and.w	r3, r3, #2
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d1ee      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002fe2:	7dfb      	ldrb	r3, [r7, #23]
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d105      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fe8:	4b39      	ldr	r3, [pc, #228]	; (80030d0 <HAL_RCC_OscConfig+0x470>)
 8002fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fec:	4a38      	ldr	r2, [pc, #224]	; (80030d0 <HAL_RCC_OscConfig+0x470>)
 8002fee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ff2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	699b      	ldr	r3, [r3, #24]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	f000 80a1 	beq.w	8003140 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ffe:	4b34      	ldr	r3, [pc, #208]	; (80030d0 <HAL_RCC_OscConfig+0x470>)
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	f003 030c 	and.w	r3, r3, #12
 8003006:	2b08      	cmp	r3, #8
 8003008:	d05c      	beq.n	80030c4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	699b      	ldr	r3, [r3, #24]
 800300e:	2b02      	cmp	r3, #2
 8003010:	d141      	bne.n	8003096 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003012:	4b31      	ldr	r3, [pc, #196]	; (80030d8 <HAL_RCC_OscConfig+0x478>)
 8003014:	2200      	movs	r2, #0
 8003016:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003018:	f7ff fb2a 	bl	8002670 <HAL_GetTick>
 800301c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800301e:	e008      	b.n	8003032 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003020:	f7ff fb26 	bl	8002670 <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	2b02      	cmp	r3, #2
 800302c:	d901      	bls.n	8003032 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800302e:	2303      	movs	r3, #3
 8003030:	e087      	b.n	8003142 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003032:	4b27      	ldr	r3, [pc, #156]	; (80030d0 <HAL_RCC_OscConfig+0x470>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d1f0      	bne.n	8003020 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	69da      	ldr	r2, [r3, #28]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6a1b      	ldr	r3, [r3, #32]
 8003046:	431a      	orrs	r2, r3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304c:	019b      	lsls	r3, r3, #6
 800304e:	431a      	orrs	r2, r3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003054:	085b      	lsrs	r3, r3, #1
 8003056:	3b01      	subs	r3, #1
 8003058:	041b      	lsls	r3, r3, #16
 800305a:	431a      	orrs	r2, r3
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003060:	061b      	lsls	r3, r3, #24
 8003062:	491b      	ldr	r1, [pc, #108]	; (80030d0 <HAL_RCC_OscConfig+0x470>)
 8003064:	4313      	orrs	r3, r2
 8003066:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003068:	4b1b      	ldr	r3, [pc, #108]	; (80030d8 <HAL_RCC_OscConfig+0x478>)
 800306a:	2201      	movs	r2, #1
 800306c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800306e:	f7ff faff 	bl	8002670 <HAL_GetTick>
 8003072:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003074:	e008      	b.n	8003088 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003076:	f7ff fafb 	bl	8002670 <HAL_GetTick>
 800307a:	4602      	mov	r2, r0
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	1ad3      	subs	r3, r2, r3
 8003080:	2b02      	cmp	r3, #2
 8003082:	d901      	bls.n	8003088 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003084:	2303      	movs	r3, #3
 8003086:	e05c      	b.n	8003142 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003088:	4b11      	ldr	r3, [pc, #68]	; (80030d0 <HAL_RCC_OscConfig+0x470>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003090:	2b00      	cmp	r3, #0
 8003092:	d0f0      	beq.n	8003076 <HAL_RCC_OscConfig+0x416>
 8003094:	e054      	b.n	8003140 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003096:	4b10      	ldr	r3, [pc, #64]	; (80030d8 <HAL_RCC_OscConfig+0x478>)
 8003098:	2200      	movs	r2, #0
 800309a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800309c:	f7ff fae8 	bl	8002670 <HAL_GetTick>
 80030a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030a2:	e008      	b.n	80030b6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030a4:	f7ff fae4 	bl	8002670 <HAL_GetTick>
 80030a8:	4602      	mov	r2, r0
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	d901      	bls.n	80030b6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80030b2:	2303      	movs	r3, #3
 80030b4:	e045      	b.n	8003142 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030b6:	4b06      	ldr	r3, [pc, #24]	; (80030d0 <HAL_RCC_OscConfig+0x470>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d1f0      	bne.n	80030a4 <HAL_RCC_OscConfig+0x444>
 80030c2:	e03d      	b.n	8003140 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	699b      	ldr	r3, [r3, #24]
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d107      	bne.n	80030dc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e038      	b.n	8003142 <HAL_RCC_OscConfig+0x4e2>
 80030d0:	40023800 	.word	0x40023800
 80030d4:	40007000 	.word	0x40007000
 80030d8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80030dc:	4b1b      	ldr	r3, [pc, #108]	; (800314c <HAL_RCC_OscConfig+0x4ec>)
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	699b      	ldr	r3, [r3, #24]
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d028      	beq.n	800313c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d121      	bne.n	800313c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003102:	429a      	cmp	r2, r3
 8003104:	d11a      	bne.n	800313c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003106:	68fa      	ldr	r2, [r7, #12]
 8003108:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800310c:	4013      	ands	r3, r2
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003112:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003114:	4293      	cmp	r3, r2
 8003116:	d111      	bne.n	800313c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003122:	085b      	lsrs	r3, r3, #1
 8003124:	3b01      	subs	r3, #1
 8003126:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003128:	429a      	cmp	r2, r3
 800312a:	d107      	bne.n	800313c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003136:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003138:	429a      	cmp	r2, r3
 800313a:	d001      	beq.n	8003140 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e000      	b.n	8003142 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003140:	2300      	movs	r3, #0
}
 8003142:	4618      	mov	r0, r3
 8003144:	3718      	adds	r7, #24
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
 800314a:	bf00      	nop
 800314c:	40023800 	.word	0x40023800

08003150 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b084      	sub	sp, #16
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d101      	bne.n	8003164 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	e0cc      	b.n	80032fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003164:	4b68      	ldr	r3, [pc, #416]	; (8003308 <HAL_RCC_ClockConfig+0x1b8>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0307 	and.w	r3, r3, #7
 800316c:	683a      	ldr	r2, [r7, #0]
 800316e:	429a      	cmp	r2, r3
 8003170:	d90c      	bls.n	800318c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003172:	4b65      	ldr	r3, [pc, #404]	; (8003308 <HAL_RCC_ClockConfig+0x1b8>)
 8003174:	683a      	ldr	r2, [r7, #0]
 8003176:	b2d2      	uxtb	r2, r2
 8003178:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800317a:	4b63      	ldr	r3, [pc, #396]	; (8003308 <HAL_RCC_ClockConfig+0x1b8>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0307 	and.w	r3, r3, #7
 8003182:	683a      	ldr	r2, [r7, #0]
 8003184:	429a      	cmp	r2, r3
 8003186:	d001      	beq.n	800318c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e0b8      	b.n	80032fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 0302 	and.w	r3, r3, #2
 8003194:	2b00      	cmp	r3, #0
 8003196:	d020      	beq.n	80031da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 0304 	and.w	r3, r3, #4
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d005      	beq.n	80031b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031a4:	4b59      	ldr	r3, [pc, #356]	; (800330c <HAL_RCC_ClockConfig+0x1bc>)
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	4a58      	ldr	r2, [pc, #352]	; (800330c <HAL_RCC_ClockConfig+0x1bc>)
 80031aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80031ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 0308 	and.w	r3, r3, #8
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d005      	beq.n	80031c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031bc:	4b53      	ldr	r3, [pc, #332]	; (800330c <HAL_RCC_ClockConfig+0x1bc>)
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	4a52      	ldr	r2, [pc, #328]	; (800330c <HAL_RCC_ClockConfig+0x1bc>)
 80031c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80031c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031c8:	4b50      	ldr	r3, [pc, #320]	; (800330c <HAL_RCC_ClockConfig+0x1bc>)
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	494d      	ldr	r1, [pc, #308]	; (800330c <HAL_RCC_ClockConfig+0x1bc>)
 80031d6:	4313      	orrs	r3, r2
 80031d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0301 	and.w	r3, r3, #1
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d044      	beq.n	8003270 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d107      	bne.n	80031fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031ee:	4b47      	ldr	r3, [pc, #284]	; (800330c <HAL_RCC_ClockConfig+0x1bc>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d119      	bne.n	800322e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e07f      	b.n	80032fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	2b02      	cmp	r3, #2
 8003204:	d003      	beq.n	800320e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800320a:	2b03      	cmp	r3, #3
 800320c:	d107      	bne.n	800321e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800320e:	4b3f      	ldr	r3, [pc, #252]	; (800330c <HAL_RCC_ClockConfig+0x1bc>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003216:	2b00      	cmp	r3, #0
 8003218:	d109      	bne.n	800322e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e06f      	b.n	80032fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800321e:	4b3b      	ldr	r3, [pc, #236]	; (800330c <HAL_RCC_ClockConfig+0x1bc>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0302 	and.w	r3, r3, #2
 8003226:	2b00      	cmp	r3, #0
 8003228:	d101      	bne.n	800322e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e067      	b.n	80032fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800322e:	4b37      	ldr	r3, [pc, #220]	; (800330c <HAL_RCC_ClockConfig+0x1bc>)
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	f023 0203 	bic.w	r2, r3, #3
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	4934      	ldr	r1, [pc, #208]	; (800330c <HAL_RCC_ClockConfig+0x1bc>)
 800323c:	4313      	orrs	r3, r2
 800323e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003240:	f7ff fa16 	bl	8002670 <HAL_GetTick>
 8003244:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003246:	e00a      	b.n	800325e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003248:	f7ff fa12 	bl	8002670 <HAL_GetTick>
 800324c:	4602      	mov	r2, r0
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	f241 3288 	movw	r2, #5000	; 0x1388
 8003256:	4293      	cmp	r3, r2
 8003258:	d901      	bls.n	800325e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800325a:	2303      	movs	r3, #3
 800325c:	e04f      	b.n	80032fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800325e:	4b2b      	ldr	r3, [pc, #172]	; (800330c <HAL_RCC_ClockConfig+0x1bc>)
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	f003 020c 	and.w	r2, r3, #12
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	429a      	cmp	r2, r3
 800326e:	d1eb      	bne.n	8003248 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003270:	4b25      	ldr	r3, [pc, #148]	; (8003308 <HAL_RCC_ClockConfig+0x1b8>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0307 	and.w	r3, r3, #7
 8003278:	683a      	ldr	r2, [r7, #0]
 800327a:	429a      	cmp	r2, r3
 800327c:	d20c      	bcs.n	8003298 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800327e:	4b22      	ldr	r3, [pc, #136]	; (8003308 <HAL_RCC_ClockConfig+0x1b8>)
 8003280:	683a      	ldr	r2, [r7, #0]
 8003282:	b2d2      	uxtb	r2, r2
 8003284:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003286:	4b20      	ldr	r3, [pc, #128]	; (8003308 <HAL_RCC_ClockConfig+0x1b8>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 0307 	and.w	r3, r3, #7
 800328e:	683a      	ldr	r2, [r7, #0]
 8003290:	429a      	cmp	r2, r3
 8003292:	d001      	beq.n	8003298 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e032      	b.n	80032fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0304 	and.w	r3, r3, #4
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d008      	beq.n	80032b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032a4:	4b19      	ldr	r3, [pc, #100]	; (800330c <HAL_RCC_ClockConfig+0x1bc>)
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	4916      	ldr	r1, [pc, #88]	; (800330c <HAL_RCC_ClockConfig+0x1bc>)
 80032b2:	4313      	orrs	r3, r2
 80032b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 0308 	and.w	r3, r3, #8
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d009      	beq.n	80032d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032c2:	4b12      	ldr	r3, [pc, #72]	; (800330c <HAL_RCC_ClockConfig+0x1bc>)
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	691b      	ldr	r3, [r3, #16]
 80032ce:	00db      	lsls	r3, r3, #3
 80032d0:	490e      	ldr	r1, [pc, #56]	; (800330c <HAL_RCC_ClockConfig+0x1bc>)
 80032d2:	4313      	orrs	r3, r2
 80032d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80032d6:	f000 f821 	bl	800331c <HAL_RCC_GetSysClockFreq>
 80032da:	4602      	mov	r2, r0
 80032dc:	4b0b      	ldr	r3, [pc, #44]	; (800330c <HAL_RCC_ClockConfig+0x1bc>)
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	091b      	lsrs	r3, r3, #4
 80032e2:	f003 030f 	and.w	r3, r3, #15
 80032e6:	490a      	ldr	r1, [pc, #40]	; (8003310 <HAL_RCC_ClockConfig+0x1c0>)
 80032e8:	5ccb      	ldrb	r3, [r1, r3]
 80032ea:	fa22 f303 	lsr.w	r3, r2, r3
 80032ee:	4a09      	ldr	r2, [pc, #36]	; (8003314 <HAL_RCC_ClockConfig+0x1c4>)
 80032f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80032f2:	4b09      	ldr	r3, [pc, #36]	; (8003318 <HAL_RCC_ClockConfig+0x1c8>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4618      	mov	r0, r3
 80032f8:	f7ff f976 	bl	80025e8 <HAL_InitTick>

  return HAL_OK;
 80032fc:	2300      	movs	r3, #0
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3710      	adds	r7, #16
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop
 8003308:	40023c00 	.word	0x40023c00
 800330c:	40023800 	.word	0x40023800
 8003310:	080035b4 	.word	0x080035b4
 8003314:	20000000 	.word	0x20000000
 8003318:	20000010 	.word	0x20000010

0800331c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800331c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003320:	b090      	sub	sp, #64	; 0x40
 8003322:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003324:	2300      	movs	r3, #0
 8003326:	637b      	str	r3, [r7, #52]	; 0x34
 8003328:	2300      	movs	r3, #0
 800332a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800332c:	2300      	movs	r3, #0
 800332e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003330:	2300      	movs	r3, #0
 8003332:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003334:	4b59      	ldr	r3, [pc, #356]	; (800349c <HAL_RCC_GetSysClockFreq+0x180>)
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	f003 030c 	and.w	r3, r3, #12
 800333c:	2b08      	cmp	r3, #8
 800333e:	d00d      	beq.n	800335c <HAL_RCC_GetSysClockFreq+0x40>
 8003340:	2b08      	cmp	r3, #8
 8003342:	f200 80a1 	bhi.w	8003488 <HAL_RCC_GetSysClockFreq+0x16c>
 8003346:	2b00      	cmp	r3, #0
 8003348:	d002      	beq.n	8003350 <HAL_RCC_GetSysClockFreq+0x34>
 800334a:	2b04      	cmp	r3, #4
 800334c:	d003      	beq.n	8003356 <HAL_RCC_GetSysClockFreq+0x3a>
 800334e:	e09b      	b.n	8003488 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003350:	4b53      	ldr	r3, [pc, #332]	; (80034a0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003352:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003354:	e09b      	b.n	800348e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003356:	4b53      	ldr	r3, [pc, #332]	; (80034a4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003358:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800335a:	e098      	b.n	800348e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800335c:	4b4f      	ldr	r3, [pc, #316]	; (800349c <HAL_RCC_GetSysClockFreq+0x180>)
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003364:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003366:	4b4d      	ldr	r3, [pc, #308]	; (800349c <HAL_RCC_GetSysClockFreq+0x180>)
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800336e:	2b00      	cmp	r3, #0
 8003370:	d028      	beq.n	80033c4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003372:	4b4a      	ldr	r3, [pc, #296]	; (800349c <HAL_RCC_GetSysClockFreq+0x180>)
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	099b      	lsrs	r3, r3, #6
 8003378:	2200      	movs	r2, #0
 800337a:	623b      	str	r3, [r7, #32]
 800337c:	627a      	str	r2, [r7, #36]	; 0x24
 800337e:	6a3b      	ldr	r3, [r7, #32]
 8003380:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003384:	2100      	movs	r1, #0
 8003386:	4b47      	ldr	r3, [pc, #284]	; (80034a4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003388:	fb03 f201 	mul.w	r2, r3, r1
 800338c:	2300      	movs	r3, #0
 800338e:	fb00 f303 	mul.w	r3, r0, r3
 8003392:	4413      	add	r3, r2
 8003394:	4a43      	ldr	r2, [pc, #268]	; (80034a4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003396:	fba0 1202 	umull	r1, r2, r0, r2
 800339a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800339c:	460a      	mov	r2, r1
 800339e:	62ba      	str	r2, [r7, #40]	; 0x28
 80033a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033a2:	4413      	add	r3, r2
 80033a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033a8:	2200      	movs	r2, #0
 80033aa:	61bb      	str	r3, [r7, #24]
 80033ac:	61fa      	str	r2, [r7, #28]
 80033ae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80033b2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80033b6:	f7fc ff0f 	bl	80001d8 <__aeabi_uldivmod>
 80033ba:	4602      	mov	r2, r0
 80033bc:	460b      	mov	r3, r1
 80033be:	4613      	mov	r3, r2
 80033c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033c2:	e053      	b.n	800346c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033c4:	4b35      	ldr	r3, [pc, #212]	; (800349c <HAL_RCC_GetSysClockFreq+0x180>)
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	099b      	lsrs	r3, r3, #6
 80033ca:	2200      	movs	r2, #0
 80033cc:	613b      	str	r3, [r7, #16]
 80033ce:	617a      	str	r2, [r7, #20]
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80033d6:	f04f 0b00 	mov.w	fp, #0
 80033da:	4652      	mov	r2, sl
 80033dc:	465b      	mov	r3, fp
 80033de:	f04f 0000 	mov.w	r0, #0
 80033e2:	f04f 0100 	mov.w	r1, #0
 80033e6:	0159      	lsls	r1, r3, #5
 80033e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033ec:	0150      	lsls	r0, r2, #5
 80033ee:	4602      	mov	r2, r0
 80033f0:	460b      	mov	r3, r1
 80033f2:	ebb2 080a 	subs.w	r8, r2, sl
 80033f6:	eb63 090b 	sbc.w	r9, r3, fp
 80033fa:	f04f 0200 	mov.w	r2, #0
 80033fe:	f04f 0300 	mov.w	r3, #0
 8003402:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003406:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800340a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800340e:	ebb2 0408 	subs.w	r4, r2, r8
 8003412:	eb63 0509 	sbc.w	r5, r3, r9
 8003416:	f04f 0200 	mov.w	r2, #0
 800341a:	f04f 0300 	mov.w	r3, #0
 800341e:	00eb      	lsls	r3, r5, #3
 8003420:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003424:	00e2      	lsls	r2, r4, #3
 8003426:	4614      	mov	r4, r2
 8003428:	461d      	mov	r5, r3
 800342a:	eb14 030a 	adds.w	r3, r4, sl
 800342e:	603b      	str	r3, [r7, #0]
 8003430:	eb45 030b 	adc.w	r3, r5, fp
 8003434:	607b      	str	r3, [r7, #4]
 8003436:	f04f 0200 	mov.w	r2, #0
 800343a:	f04f 0300 	mov.w	r3, #0
 800343e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003442:	4629      	mov	r1, r5
 8003444:	028b      	lsls	r3, r1, #10
 8003446:	4621      	mov	r1, r4
 8003448:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800344c:	4621      	mov	r1, r4
 800344e:	028a      	lsls	r2, r1, #10
 8003450:	4610      	mov	r0, r2
 8003452:	4619      	mov	r1, r3
 8003454:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003456:	2200      	movs	r2, #0
 8003458:	60bb      	str	r3, [r7, #8]
 800345a:	60fa      	str	r2, [r7, #12]
 800345c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003460:	f7fc feba 	bl	80001d8 <__aeabi_uldivmod>
 8003464:	4602      	mov	r2, r0
 8003466:	460b      	mov	r3, r1
 8003468:	4613      	mov	r3, r2
 800346a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800346c:	4b0b      	ldr	r3, [pc, #44]	; (800349c <HAL_RCC_GetSysClockFreq+0x180>)
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	0c1b      	lsrs	r3, r3, #16
 8003472:	f003 0303 	and.w	r3, r3, #3
 8003476:	3301      	adds	r3, #1
 8003478:	005b      	lsls	r3, r3, #1
 800347a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800347c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800347e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003480:	fbb2 f3f3 	udiv	r3, r2, r3
 8003484:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003486:	e002      	b.n	800348e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003488:	4b05      	ldr	r3, [pc, #20]	; (80034a0 <HAL_RCC_GetSysClockFreq+0x184>)
 800348a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800348c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800348e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003490:	4618      	mov	r0, r3
 8003492:	3740      	adds	r7, #64	; 0x40
 8003494:	46bd      	mov	sp, r7
 8003496:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800349a:	bf00      	nop
 800349c:	40023800 	.word	0x40023800
 80034a0:	00f42400 	.word	0x00f42400
 80034a4:	017d7840 	.word	0x017d7840

080034a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034a8:	b480      	push	{r7}
 80034aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034ac:	4b03      	ldr	r3, [pc, #12]	; (80034bc <HAL_RCC_GetHCLKFreq+0x14>)
 80034ae:	681b      	ldr	r3, [r3, #0]
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr
 80034ba:	bf00      	nop
 80034bc:	20000000 	.word	0x20000000

080034c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80034c4:	f7ff fff0 	bl	80034a8 <HAL_RCC_GetHCLKFreq>
 80034c8:	4602      	mov	r2, r0
 80034ca:	4b05      	ldr	r3, [pc, #20]	; (80034e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	0a9b      	lsrs	r3, r3, #10
 80034d0:	f003 0307 	and.w	r3, r3, #7
 80034d4:	4903      	ldr	r1, [pc, #12]	; (80034e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034d6:	5ccb      	ldrb	r3, [r1, r3]
 80034d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034dc:	4618      	mov	r0, r3
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	40023800 	.word	0x40023800
 80034e4:	080035c4 	.word	0x080035c4

080034e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80034ec:	f7ff ffdc 	bl	80034a8 <HAL_RCC_GetHCLKFreq>
 80034f0:	4602      	mov	r2, r0
 80034f2:	4b05      	ldr	r3, [pc, #20]	; (8003508 <HAL_RCC_GetPCLK2Freq+0x20>)
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	0b5b      	lsrs	r3, r3, #13
 80034f8:	f003 0307 	and.w	r3, r3, #7
 80034fc:	4903      	ldr	r1, [pc, #12]	; (800350c <HAL_RCC_GetPCLK2Freq+0x24>)
 80034fe:	5ccb      	ldrb	r3, [r1, r3]
 8003500:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003504:	4618      	mov	r0, r3
 8003506:	bd80      	pop	{r7, pc}
 8003508:	40023800 	.word	0x40023800
 800350c:	080035c4 	.word	0x080035c4

08003510 <memset>:
 8003510:	4402      	add	r2, r0
 8003512:	4603      	mov	r3, r0
 8003514:	4293      	cmp	r3, r2
 8003516:	d100      	bne.n	800351a <memset+0xa>
 8003518:	4770      	bx	lr
 800351a:	f803 1b01 	strb.w	r1, [r3], #1
 800351e:	e7f9      	b.n	8003514 <memset+0x4>

08003520 <__libc_init_array>:
 8003520:	b570      	push	{r4, r5, r6, lr}
 8003522:	4d0d      	ldr	r5, [pc, #52]	; (8003558 <__libc_init_array+0x38>)
 8003524:	4c0d      	ldr	r4, [pc, #52]	; (800355c <__libc_init_array+0x3c>)
 8003526:	1b64      	subs	r4, r4, r5
 8003528:	10a4      	asrs	r4, r4, #2
 800352a:	2600      	movs	r6, #0
 800352c:	42a6      	cmp	r6, r4
 800352e:	d109      	bne.n	8003544 <__libc_init_array+0x24>
 8003530:	4d0b      	ldr	r5, [pc, #44]	; (8003560 <__libc_init_array+0x40>)
 8003532:	4c0c      	ldr	r4, [pc, #48]	; (8003564 <__libc_init_array+0x44>)
 8003534:	f000 f818 	bl	8003568 <_init>
 8003538:	1b64      	subs	r4, r4, r5
 800353a:	10a4      	asrs	r4, r4, #2
 800353c:	2600      	movs	r6, #0
 800353e:	42a6      	cmp	r6, r4
 8003540:	d105      	bne.n	800354e <__libc_init_array+0x2e>
 8003542:	bd70      	pop	{r4, r5, r6, pc}
 8003544:	f855 3b04 	ldr.w	r3, [r5], #4
 8003548:	4798      	blx	r3
 800354a:	3601      	adds	r6, #1
 800354c:	e7ee      	b.n	800352c <__libc_init_array+0xc>
 800354e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003552:	4798      	blx	r3
 8003554:	3601      	adds	r6, #1
 8003556:	e7f2      	b.n	800353e <__libc_init_array+0x1e>
 8003558:	080035d4 	.word	0x080035d4
 800355c:	080035d4 	.word	0x080035d4
 8003560:	080035d4 	.word	0x080035d4
 8003564:	080035d8 	.word	0x080035d8

08003568 <_init>:
 8003568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800356a:	bf00      	nop
 800356c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800356e:	bc08      	pop	{r3}
 8003570:	469e      	mov	lr, r3
 8003572:	4770      	bx	lr

08003574 <_fini>:
 8003574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003576:	bf00      	nop
 8003578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800357a:	bc08      	pop	{r3}
 800357c:	469e      	mov	lr, r3
 800357e:	4770      	bx	lr
