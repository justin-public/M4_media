
M4_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b20c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00021afc  0800b3a0  0800b3a0  0001b3a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802ce9c  0802ce9c  000401e0  2**0
                  CONTENTS
  4 .ARM          00000008  0802ce9c  0802ce9c  0003ce9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802cea4  0802cea4  000401e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802cea4  0802cea4  0003cea4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802cea8  0802cea8  0003cea8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0802ceac  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000401e0  2**0
                  CONTENTS
 10 .bss          00002d08  200001e0  200001e0  000401e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002ee8  20002ee8  000401e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000401e0  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00040210  2**0
                  CONTENTS, READONLY
 14 .debug_info   000160a8  00000000  00000000  00040253  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000049a1  00000000  00000000  000562fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001370  00000000  00000000  0005aca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00007f81  00000000  00000000  0005c010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f0f9  00000000  00000000  00063f91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d0c16  00000000  00000000  0008308a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_rnglists 00000d6f  00000000  00000000  00153ca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005660  00000000  00000000  00154a10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000044  00000000  00000000  0015a070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b384 	.word	0x0800b384

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800b384 	.word	0x0800b384

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b970 	b.w	8000ea0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	460d      	mov	r5, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	460f      	mov	r7, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4694      	mov	ip, r2
 8000bec:	d965      	bls.n	8000cba <__udivmoddi4+0xe2>
 8000bee:	fab2 f382 	clz	r3, r2
 8000bf2:	b143      	cbz	r3, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf8:	f1c3 0220 	rsb	r2, r3, #32
 8000bfc:	409f      	lsls	r7, r3
 8000bfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000c02:	4317      	orrs	r7, r2
 8000c04:	409c      	lsls	r4, r3
 8000c06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c0a:	fa1f f58c 	uxth.w	r5, ip
 8000c0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c12:	0c22      	lsrs	r2, r4, #16
 8000c14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c1c:	fb01 f005 	mul.w	r0, r1, r5
 8000c20:	4290      	cmp	r0, r2
 8000c22:	d90a      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c24:	eb1c 0202 	adds.w	r2, ip, r2
 8000c28:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c2c:	f080 811c 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c30:	4290      	cmp	r0, r2
 8000c32:	f240 8119 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c36:	3902      	subs	r1, #2
 8000c38:	4462      	add	r2, ip
 8000c3a:	1a12      	subs	r2, r2, r0
 8000c3c:	b2a4      	uxth	r4, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c4a:	fb00 f505 	mul.w	r5, r0, r5
 8000c4e:	42a5      	cmp	r5, r4
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x90>
 8000c52:	eb1c 0404 	adds.w	r4, ip, r4
 8000c56:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c5a:	f080 8107 	bcs.w	8000e6c <__udivmoddi4+0x294>
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	f240 8104 	bls.w	8000e6c <__udivmoddi4+0x294>
 8000c64:	4464      	add	r4, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11e      	cbz	r6, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40dc      	lsrs	r4, r3
 8000c74:	2300      	movs	r3, #0
 8000c76:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0xbc>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80ed 	beq.w	8000e62 <__udivmoddi4+0x28a>
 8000c88:	2100      	movs	r1, #0
 8000c8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	fab3 f183 	clz	r1, r3
 8000c98:	2900      	cmp	r1, #0
 8000c9a:	d149      	bne.n	8000d30 <__udivmoddi4+0x158>
 8000c9c:	42ab      	cmp	r3, r5
 8000c9e:	d302      	bcc.n	8000ca6 <__udivmoddi4+0xce>
 8000ca0:	4282      	cmp	r2, r0
 8000ca2:	f200 80f8 	bhi.w	8000e96 <__udivmoddi4+0x2be>
 8000ca6:	1a84      	subs	r4, r0, r2
 8000ca8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cac:	2001      	movs	r0, #1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	2e00      	cmp	r6, #0
 8000cb2:	d0e2      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb8:	e7df      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cba:	b902      	cbnz	r2, 8000cbe <__udivmoddi4+0xe6>
 8000cbc:	deff      	udf	#255	; 0xff
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8090 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cc8:	1a8a      	subs	r2, r1, r2
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cdc:	0c22      	lsrs	r2, r4, #16
 8000cde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ce2:	fb0e f005 	mul.w	r0, lr, r5
 8000ce6:	4290      	cmp	r0, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cea:	eb1c 0202 	adds.w	r2, ip, r2
 8000cee:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4290      	cmp	r0, r2
 8000cf6:	f200 80cb 	bhi.w	8000e90 <__udivmoddi4+0x2b8>
 8000cfa:	4645      	mov	r5, r8
 8000cfc:	1a12      	subs	r2, r2, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d04:	fb07 2210 	mls	r2, r7, r0, r2
 8000d08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x14e>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x14c>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80bb 	bhi.w	8000e9a <__udivmoddi4+0x2c2>
 8000d24:	4610      	mov	r0, r2
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d2e:	e79f      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d30:	f1c1 0720 	rsb	r7, r1, #32
 8000d34:	408b      	lsls	r3, r1
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d42:	fa20 f307 	lsr.w	r3, r0, r7
 8000d46:	40fd      	lsrs	r5, r7
 8000d48:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4c:	4323      	orrs	r3, r4
 8000d4e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d52:	fa1f fe8c 	uxth.w	lr, ip
 8000d56:	fb09 5518 	mls	r5, r9, r8, r5
 8000d5a:	0c1c      	lsrs	r4, r3, #16
 8000d5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d60:	fb08 f50e 	mul.w	r5, r8, lr
 8000d64:	42a5      	cmp	r5, r4
 8000d66:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2b4>
 8000d7c:	42a5      	cmp	r5, r4
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2b4>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4464      	add	r4, ip
 8000d88:	1b64      	subs	r4, r4, r5
 8000d8a:	b29d      	uxth	r5, r3
 8000d8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d90:	fb09 4413 	mls	r4, r9, r3, r4
 8000d94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2ac>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2ac>
 8000dae:	3b02      	subs	r3, #2
 8000db0:	4464      	add	r4, ip
 8000db2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000db6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dba:	eba4 040e 	sub.w	r4, r4, lr
 8000dbe:	42ac      	cmp	r4, r5
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46ae      	mov	lr, r5
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x29c>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x298>
 8000dc8:	b156      	cbz	r6, 8000de0 <__udivmoddi4+0x208>
 8000dca:	ebb0 0208 	subs.w	r2, r0, r8
 8000dce:	eb64 040e 	sbc.w	r4, r4, lr
 8000dd2:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd6:	40ca      	lsrs	r2, r1
 8000dd8:	40cc      	lsrs	r4, r1
 8000dda:	4317      	orrs	r7, r2
 8000ddc:	e9c6 7400 	strd	r7, r4, [r6]
 8000de0:	4618      	mov	r0, r3
 8000de2:	2100      	movs	r1, #0
 8000de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de8:	f1c3 0120 	rsb	r1, r3, #32
 8000dec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df0:	fa20 f201 	lsr.w	r2, r0, r1
 8000df4:	fa25 f101 	lsr.w	r1, r5, r1
 8000df8:	409d      	lsls	r5, r3
 8000dfa:	432a      	orrs	r2, r5
 8000dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e08:	fb07 1510 	mls	r5, r7, r0, r1
 8000e0c:	0c11      	lsrs	r1, r2, #16
 8000e0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e12:	fb00 f50e 	mul.w	r5, r0, lr
 8000e16:	428d      	cmp	r5, r1
 8000e18:	fa04 f403 	lsl.w	r4, r4, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x258>
 8000e1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e28:	428d      	cmp	r5, r1
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1b49      	subs	r1, r1, r5
 8000e32:	b292      	uxth	r2, r2
 8000e34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e38:	fb07 1115 	mls	r1, r7, r5, r1
 8000e3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e40:	fb05 f10e 	mul.w	r1, r5, lr
 8000e44:	4291      	cmp	r1, r2
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x282>
 8000e48:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000e52:	4291      	cmp	r1, r2
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000e56:	3d02      	subs	r5, #2
 8000e58:	4462      	add	r2, ip
 8000e5a:	1a52      	subs	r2, r2, r1
 8000e5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0xfc>
 8000e62:	4631      	mov	r1, r6
 8000e64:	4630      	mov	r0, r6
 8000e66:	e708      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000e68:	4639      	mov	r1, r7
 8000e6a:	e6e6      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	e6fb      	b.n	8000c68 <__udivmoddi4+0x90>
 8000e70:	4548      	cmp	r0, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e80:	4645      	mov	r5, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x282>
 8000e84:	462b      	mov	r3, r5
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x258>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e90:	3d02      	subs	r5, #2
 8000e92:	4462      	add	r2, ip
 8000e94:	e732      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e96:	4608      	mov	r0, r1
 8000e98:	e70a      	b.n	8000cb0 <__udivmoddi4+0xd8>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e742      	b.n	8000d26 <__udivmoddi4+0x14e>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <MakeBmpHeader>:
*********************************************************************************************************
*	Func name: MakeBmpHeader
*********************************************************************************************************
*/
static void MakeBmpHeader(__packed BMP_T *_pBmp, uint16_t _Width, uint16_t _Height)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	460b      	mov	r3, r1
 8000eae:	807b      	strh	r3, [r7, #2]
 8000eb0:	4613      	mov	r3, r2
 8000eb2:	803b      	strh	r3, [r7, #0]
	/* 14×Ö½Ú Î»Í¼ÎÄ¼þÍ· */
	_pBmp->bfType = 0x4D42;	/* 2×Ö½Ú Î»Í¼Àà±ð£¬ ÔÚWindowsÖÐ£¬´Ë×Ö¶ÎµÄÖµ×ÜÎª'BM'*/
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	f644 5242 	movw	r2, #19778	; 0x4d42
 8000eba:	801a      	strh	r2, [r3, #0]
	_pBmp->bfSize = (_Height * _Width * 3) + 54;	/* bmpÎÄ¼þ´óÐ¡ 4×Ö½Ú */
 8000ebc:	883b      	ldrh	r3, [r7, #0]
 8000ebe:	887a      	ldrh	r2, [r7, #2]
 8000ec0:	fb03 f202 	mul.w	r2, r3, r2
 8000ec4:	4613      	mov	r3, r2
 8000ec6:	005b      	lsls	r3, r3, #1
 8000ec8:	4413      	add	r3, r2
 8000eca:	3336      	adds	r3, #54	; 0x36
 8000ecc:	461a      	mov	r2, r3
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	605a      	str	r2, [r3, #4]
	_pBmp->bfReserved1 = 0;	/* ±£Áô£¬Ã¿×Ö½ÚÒÔ"00"ÌîÐ´ 2×Ö½Ú */
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	811a      	strh	r2, [r3, #8]
	_pBmp->bfReserved2 = 0; /* Í¬ÉÏ 2×Ö½Ú */
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2200      	movs	r2, #0
 8000edc:	815a      	strh	r2, [r3, #10]
	_pBmp->bfOffBits = 54;	/* ¼ÇÂ¼Í¼ÏñÊý¾ÝÇøµÄÆðÊ¼Î»ÖÃ(Í¼ÏóÊý¾ÝÏà¶ÔÓÚÎÄ¼þÍ·×Ö½ÚµÄÆ«ÒÆÁ¿)¡£ 4×Ö½Ú */
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	2236      	movs	r2, #54	; 0x36
 8000ee2:	60da      	str	r2, [r3, #12]

	/* 40×Ö½Ú Î»Í¼ÐÅÏ¢Í· */
	_pBmp->biSize = 40;		/* 4×Ö½Ú ±¾½á¹¹µÄ´óÐ¡£¬ÔÚWindowsÖÐ£¬×ÜÎª28h£¬40×Ö½Ú */
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2228      	movs	r2, #40	; 0x28
 8000ee8:	611a      	str	r2, [r3, #16]
	_pBmp->biWidth = _Width;/* 4×Ö½Ú BMPÍ¼ÏñµÄ¿í¶È£¬µ¥Î»ÏñËØ */
 8000eea:	887a      	ldrh	r2, [r7, #2]
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	615a      	str	r2, [r3, #20]
	_pBmp->biHeight = _Height;		/* 4×Ö½Ú BMPÍ¼ÏñµÄ¸ß¶È£¬µ¥Î»ÏñËØ */
 8000ef0:	883a      	ldrh	r2, [r7, #0]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	619a      	str	r2, [r3, #24]
	_pBmp->biPlanes = 1;			/* 2×Ö½Ú Ä¿±êÉè±¸µÄ¼¶±ð(É«²ÊÆ½ÃæÊý)£¬¹Ì¶¨Îª1 */
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	2201      	movs	r2, #1
 8000efa:	839a      	strh	r2, [r3, #28]
	_pBmp->biBitCount = 24;			/* 2×Ö½Ú BMPÍ¼ÏñµÄÉ«Éî£¬¼´Ò»¸öÏñËØÓÃ¶àÉÙÎ»±íÊ¾¡£³£¼ûµÄÓÐ 1 4 8 16 24 32 */
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2218      	movs	r2, #24
 8000f00:	83da      	strh	r2, [r3, #30]
	_pBmp->biCompression = 0;		/* 4×Ö½Ú Ñ¹ËõÀàÐÍ£¬0(²»Ñ¹Ëõ), 1(BI_RLE8), 2(BI_RLE4) */
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	2200      	movs	r2, #0
 8000f06:	621a      	str	r2, [r3, #32]
	_pBmp->biSizeImage = (_Height * _Width * 3);	/* 4×Ö½Ú ±íÊ¾Î»Í¼Êý¾ÝÇøÓòµÄ´óÐ¡ÒÔ×Ö½ÚÎªµ¥Î» */
 8000f08:	883b      	ldrh	r3, [r7, #0]
 8000f0a:	887a      	ldrh	r2, [r7, #2]
 8000f0c:	fb03 f202 	mul.w	r2, r3, r2
 8000f10:	4613      	mov	r3, r2
 8000f12:	005b      	lsls	r3, r3, #1
 8000f14:	4413      	add	r3, r2
 8000f16:	461a      	mov	r2, r3
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	625a      	str	r2, [r3, #36]	; 0x24
	_pBmp->biXPelsPerMeter = 0;	/* 4×Ö½Ú ÓÃÏóËØ/Ã×±íÊ¾µÄË®Æ½·Ö±æÂÊ */
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2200      	movs	r2, #0
 8000f20:	629a      	str	r2, [r3, #40]	; 0x28
	_pBmp->biYPelsPerMeter = 0;	/* 4×Ö½Ú ÓÃÏóËØ/Ã×±íÊ¾µÄ´¹Ö±·Ö±æÂÊ */
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2200      	movs	r2, #0
 8000f26:	62da      	str	r2, [r3, #44]	; 0x2c
	_pBmp->biClrUsed = 0;		/* 4×Ö½Ú Êµ¼ÊÊ¹ÓÃÉ«²ÊÊýÄ¿£¬0ÔòÓÉÎ»Êý¶¨ */
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	631a      	str	r2, [r3, #48]	; 0x30
	_pBmp->biClrImportant = 0;	/* 4×Ö½Ú Í¼ÏñÖÐÖØÒªµÄÉ«²ÊÊýÄ¿¡£0±íÊ¾µ÷É«°åÄÚËùÓÐµÄÑÕÉ«¶¼ÊÇÖØÒªµÄ  */
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2200      	movs	r2, #0
 8000f32:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000f34:	bf00      	nop
 8000f36:	370c      	adds	r7, #12
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr

08000f40 <SaveScreenToBmp>:
*********************************************************************************************************
*	Funa name: SaveScreenToBmp
*********************************************************************************************************
*/
void SaveScreenToBmp(uint16_t _index)
{
 8000f40:	b590      	push	{r4, r7, lr}
 8000f42:	f6ad 6d24 	subw	sp, sp, #3620	; 0xe24
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	4602      	mov	r2, r0
 8000f4a:	f507 6362 	add.w	r3, r7, #3616	; 0xe20
 8000f4e:	f6a3 631a 	subw	r3, r3, #3610	; 0xe1a
 8000f52:	801a      	strh	r2, [r3, #0]
	FRESULT result;
	FATFS fs;
	FIL file;
	uint32_t bw;
	char path[32];
	uint8_t ucVolume = FS_SD;
 8000f54:	2300      	movs	r3, #0
 8000f56:	f887 3e1f 	strb.w	r3, [r7, #3615]	; 0xe1f

	bsp_LedOn(1);
 8000f5a:	2001      	movs	r0, #1
 8000f5c:	f003 fe5e 	bl	8004c1c <bsp_LedOn>

	MakeBmpHeader(&tBmpHead, LCD_GetWidth(), LCD_GetHeight());	/* ¹¹½¨BMPÎÄ¼þÍ· */
 8000f60:	f005 f8a6 	bl	80060b0 <LCD_GetWidth>
 8000f64:	4603      	mov	r3, r0
 8000f66:	461c      	mov	r4, r3
 8000f68:	f005 f896 	bl	8006098 <LCD_GetHeight>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	461a      	mov	r2, r3
 8000f70:	f607 53e4 	addw	r3, r7, #3556	; 0xde4
 8000f74:	4621      	mov	r1, r4
 8000f76:	4618      	mov	r0, r3
 8000f78:	f7ff ff94 	bl	8000ea4 <MakeBmpHeader>
}
 8000f7c:	bf00      	nop
 8000f7e:	f607 6724 	addw	r7, r7, #3620	; 0xe24
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd90      	pop	{r4, r7, pc}
	...

08000f88 <HardInfo>:
*	Func name: HardInfo
*********************************************************************************************************
*/

void HardInfo(void)
{
 8000f88:	b5b0      	push	{r4, r5, r7, lr}
 8000f8a:	b0b6      	sub	sp, #216	; 0xd8
 8000f8c:	af02      	add	r7, sp, #8
	uint8_t ucTouch;		/* ´¥ÃþÊÂ¼þ */
	uint8_t fRefresh;		/* Ë¢ÆÁÇëÇó±êÖ¾,1±íÊ¾ÐèÒªË¢ÐÂ */
	FONT_T tFont, tFontBtn;	/* ¶¨ÒåÒ»¸ö×ÖÌå½á¹¹Ìå±äÁ¿£¬ÓÃÓÚÉèÖÃ×ÖÌå²ÎÊý */
	char buf[128];
	uint16_t x, y;
	uint16_t usLineCap = 18;
 8000f8e:	2312      	movs	r3, #18
 8000f90:	f8a7 30cc 	strh.w	r3, [r7, #204]	; 0xcc

	int16_t tpX, tpY;
	BUTTON_T tBtn;

	LCD_ClrScr(CL_BLUE);  	/* ÇåÆÁ£¬±³¾°À¶É« */
 8000f94:	201f      	movs	r0, #31
 8000f96:	f004 fd45 	bl	8005a24 <LCD_ClrScr>

	{
		tFont.FontCode = FC_ST_16;	/* ×ÖÌå´úÂë 16µãÕó */
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
		tFont.FrontColor = CL_WHITE;	/* ×ÖÌåÑÕÉ« */
 8000fa0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fa4:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
		tFont.BackColor = CL_BLUE;	/* ÎÄ×Ö±³¾°ÑÕÉ« */
 8000fa8:	231f      	movs	r3, #31
 8000faa:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
		tFont.Space = 0;				/* ÎÄ×Ö¼ä¾à£¬µ¥Î» = ÏñËØ */
 8000fae:	2300      	movs	r3, #0
 8000fb0:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae

		/* °´Å¥×ÖÌå */
		tFontBtn.FontCode = FC_ST_16;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
		tFontBtn.BackColor = CL_MASK;	/* Í¸Ã÷É« */
 8000fba:	f649 1399 	movw	r3, #39321	; 0x9999
 8000fbe:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
		tFontBtn.FrontColor = CL_BLACK;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
		tFontBtn.Space = 0;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
	}
	x = 5;
 8000fce:	2305      	movs	r3, #5
 8000fd0:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
	y = 3;
 8000fd4:	2303      	movs	r3, #3
 8000fd6:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
	LCD_DispStr(x, y, "STM32-V5", &tFont);			/* ÔÚ(8,3)×ø±ê´¦ÏÔÊ¾Ò»´®ºº×Ö */
 8000fda:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8000fde:	f8b7 10c8 	ldrh.w	r1, [r7, #200]	; 0xc8
 8000fe2:	f8b7 00ca 	ldrh.w	r0, [r7, #202]	; 0xca
 8000fe6:	4adf      	ldr	r2, [pc, #892]	; (8001364 <HardInfo+0x3dc>)
 8000fe8:	f004 fd6a 	bl	8005ac0 <LCD_DispStr>
	y += usLineCap;
 8000fec:	f8b7 20c8 	ldrh.w	r2, [r7, #200]	; 0xc8
 8000ff0:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	; 0xcc
 8000ff4:	4413      	add	r3, r2
 8000ff6:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8

	{
		uint32_t CPU_Sn0, CPU_Sn1, CPU_Sn2;

		CPU_Sn0 = *(__IO uint32_t*)(0x1FFF7A10);
 8000ffa:	4bdb      	ldr	r3, [pc, #876]	; (8001368 <HardInfo+0x3e0>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
		CPU_Sn1 = *(__IO uint32_t*)(0x1FFF7A10 + 4);
 8001002:	4bda      	ldr	r3, [pc, #872]	; (800136c <HardInfo+0x3e4>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
		CPU_Sn2 = *(__IO uint32_t*)(0x1FFF7A10 + 8);
 800100a:	4bd9      	ldr	r3, [pc, #868]	; (8001370 <HardInfo+0x3e8>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		LCD_DispStr(x, y, "CPU : STM32F407IGT6, LQFP176", &tFont);
 8001012:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001016:	f8b7 10c8 	ldrh.w	r1, [r7, #200]	; 0xc8
 800101a:	f8b7 00ca 	ldrh.w	r0, [r7, #202]	; 0xca
 800101e:	4ad5      	ldr	r2, [pc, #852]	; (8001374 <HardInfo+0x3ec>)
 8001020:	f004 fd4e 	bl	8005ac0 <LCD_DispStr>
		y += usLineCap;
 8001024:	f8b7 20c8 	ldrh.w	r2, [r7, #200]	; 0xc8
 8001028:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	; 0xcc
 800102c:	4413      	add	r3, r2
 800102e:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8

		sprintf(buf, " UID = %08X %08X %08X", CPU_Sn2, CPU_Sn1, CPU_Sn0);
 8001032:	f107 0020 	add.w	r0, r7, #32
 8001036:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800103a:	9300      	str	r3, [sp, #0]
 800103c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001040:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001044:	49cc      	ldr	r1, [pc, #816]	; (8001378 <HardInfo+0x3f0>)
 8001046:	f008 f83f 	bl	80090c8 <siprintf>
		LCD_DispStr(x, y, buf, &tFont);
 800104a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800104e:	f107 0220 	add.w	r2, r7, #32
 8001052:	f8b7 10c8 	ldrh.w	r1, [r7, #200]	; 0xc8
 8001056:	f8b7 00ca 	ldrh.w	r0, [r7, #202]	; 0xca
 800105a:	f004 fd31 	bl	8005ac0 <LCD_DispStr>
		y += usLineCap;
 800105e:	f8b7 20c8 	ldrh.w	r2, [r7, #200]	; 0xc8
 8001062:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	; 0xcc
 8001066:	4413      	add	r3, r2
 8001068:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
	}
	{
		strcpy(buf, "TFT Driver : ");
 800106c:	f107 0320 	add.w	r3, r7, #32
 8001070:	4ac2      	ldr	r2, [pc, #776]	; (800137c <HardInfo+0x3f4>)
 8001072:	461c      	mov	r4, r3
 8001074:	4613      	mov	r3, r2
 8001076:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001078:	c407      	stmia	r4!, {r0, r1, r2}
 800107a:	8023      	strh	r3, [r4, #0]
		LCD_GetChipDescribe(&buf[strlen(buf)]);
 800107c:	f107 0320 	add.w	r3, r7, #32
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff f8f5 	bl	8000270 <strlen>
 8001086:	4602      	mov	r2, r0
 8001088:	f107 0320 	add.w	r3, r7, #32
 800108c:	4413      	add	r3, r2
 800108e:	4618      	mov	r0, r3
 8001090:	f005 f85c 	bl	800614c <LCD_GetChipDescribe>
		sprintf(&buf[strlen(buf)], "   %d x %d", LCD_GetWidth(), LCD_GetHeight());
 8001094:	f107 0320 	add.w	r3, r7, #32
 8001098:	4618      	mov	r0, r3
 800109a:	f7ff f8e9 	bl	8000270 <strlen>
 800109e:	4602      	mov	r2, r0
 80010a0:	f107 0320 	add.w	r3, r7, #32
 80010a4:	189c      	adds	r4, r3, r2
 80010a6:	f005 f803 	bl	80060b0 <LCD_GetWidth>
 80010aa:	4603      	mov	r3, r0
 80010ac:	461d      	mov	r5, r3
 80010ae:	f004 fff3 	bl	8006098 <LCD_GetHeight>
 80010b2:	4603      	mov	r3, r0
 80010b4:	462a      	mov	r2, r5
 80010b6:	49b2      	ldr	r1, [pc, #712]	; (8001380 <HardInfo+0x3f8>)
 80010b8:	4620      	mov	r0, r4
 80010ba:	f008 f805 	bl	80090c8 <siprintf>
		LCD_DispStr(x, y, buf, &tFont);
 80010be:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80010c2:	f107 0220 	add.w	r2, r7, #32
 80010c6:	f8b7 10c8 	ldrh.w	r1, [r7, #200]	; 0xc8
 80010ca:	f8b7 00ca 	ldrh.w	r0, [r7, #202]	; 0xca
 80010ce:	f004 fcf7 	bl	8005ac0 <LCD_DispStr>
		y += usLineCap;
 80010d2:	f8b7 20c8 	ldrh.w	r2, [r7, #200]	; 0xc8
 80010d6:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	; 0xcc
 80010da:	4413      	add	r3, r2
 80010dc:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
	}
	/* SRAM */
	{
		if (bsp_TestExtSRAM() == 0)
 80010e0:	f002 ffd4 	bl	800408c <bsp_TestExtSRAM>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d110      	bne.n	800110c <HardInfo+0x184>
		{
			sprintf(buf, "SRAM Model : IS61WV102416BLL-10TL, Test OK");
 80010ea:	f107 0320 	add.w	r3, r7, #32
 80010ee:	49a5      	ldr	r1, [pc, #660]	; (8001384 <HardInfo+0x3fc>)
 80010f0:	4618      	mov	r0, r3
 80010f2:	f007 ffe9 	bl	80090c8 <siprintf>
			LCD_DispStr(x, y, buf, &tFont);
 80010f6:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80010fa:	f107 0220 	add.w	r2, r7, #32
 80010fe:	f8b7 10c8 	ldrh.w	r1, [r7, #200]	; 0xc8
 8001102:	f8b7 00ca 	ldrh.w	r0, [r7, #202]	; 0xca
 8001106:	f004 fcdb 	bl	8005ac0 <LCD_DispStr>
 800110a:	e017      	b.n	800113c <HardInfo+0x1b4>
		}
		else
		{
			sprintf(buf, "SRAM Model: IS61WV102416BLL-10TL, Test Err");
 800110c:	f107 0320 	add.w	r3, r7, #32
 8001110:	499d      	ldr	r1, [pc, #628]	; (8001388 <HardInfo+0x400>)
 8001112:	4618      	mov	r0, r3
 8001114:	f007 ffd8 	bl	80090c8 <siprintf>

			tFont.FrontColor = CL_RED;
 8001118:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800111c:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
			LCD_DispStr(x, y, buf, &tFont);
 8001120:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001124:	f107 0220 	add.w	r2, r7, #32
 8001128:	f8b7 10c8 	ldrh.w	r1, [r7, #200]	; 0xc8
 800112c:	f8b7 00ca 	ldrh.w	r0, [r7, #202]	; 0xca
 8001130:	f004 fcc6 	bl	8005ac0 <LCD_DispStr>
			tFont.FrontColor = CL_WHITE;
 8001134:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001138:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
		}
		y += usLineCap;
 800113c:	f8b7 20c8 	ldrh.w	r2, [r7, #200]	; 0xc8
 8001140:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	; 0xcc
 8001144:	4413      	add	r3, r2
 8001146:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
	}
	{
		uint32_t id;
		id = NOR_ReadID();
 800114a:	f004 f8e1 	bl	8005310 <NOR_ReadID>
 800114e:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8

		if (id == S29GL128P)
 8001152:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001156:	4a8d      	ldr	r2, [pc, #564]	; (800138c <HardInfo+0x404>)
 8001158:	4293      	cmp	r3, r2
 800115a:	d112      	bne.n	8001182 <HardInfo+0x1fa>
		{
			sprintf(buf, "NOR Flash ID = 0x%08X, Model = S29GL128P, OK", id);
 800115c:	f107 0320 	add.w	r3, r7, #32
 8001160:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8001164:	498a      	ldr	r1, [pc, #552]	; (8001390 <HardInfo+0x408>)
 8001166:	4618      	mov	r0, r3
 8001168:	f007 ffae 	bl	80090c8 <siprintf>
			LCD_DispStr(x, y, buf, &tFont);
 800116c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001170:	f107 0220 	add.w	r2, r7, #32
 8001174:	f8b7 10c8 	ldrh.w	r1, [r7, #200]	; 0xc8
 8001178:	f8b7 00ca 	ldrh.w	r0, [r7, #202]	; 0xca
 800117c:	f004 fca0 	bl	8005ac0 <LCD_DispStr>
 8001180:	e019      	b.n	80011b6 <HardInfo+0x22e>
		}
		else
		{
			sprintf(buf, "NOR Flash ID = 0x%08X, Model = xxxx, Err", id);
 8001182:	f107 0320 	add.w	r3, r7, #32
 8001186:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800118a:	4982      	ldr	r1, [pc, #520]	; (8001394 <HardInfo+0x40c>)
 800118c:	4618      	mov	r0, r3
 800118e:	f007 ff9b 	bl	80090c8 <siprintf>

			tFont.FrontColor = CL_RED;
 8001192:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001196:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
			LCD_DispStr(x, y, buf, &tFont);
 800119a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800119e:	f107 0220 	add.w	r2, r7, #32
 80011a2:	f8b7 10c8 	ldrh.w	r1, [r7, #200]	; 0xc8
 80011a6:	f8b7 00ca 	ldrh.w	r0, [r7, #202]	; 0xca
 80011aa:	f004 fc89 	bl	8005ac0 <LCD_DispStr>
			tFont.FrontColor = CL_WHITE;
 80011ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011b2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
		}
		y += usLineCap;
 80011b6:	f8b7 20c8 	ldrh.w	r2, [r7, #200]	; 0xc8
 80011ba:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	; 0xcc
 80011be:	4413      	add	r3, r2
 80011c0:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
	}
	{
		uint32_t id;

		NAND_Init();
 80011c4:	f003 ff98 	bl	80050f8 <NAND_Init>

		id = NAND_ReadID();
 80011c8:	f003 ffa6 	bl	8005118 <NAND_ReadID>
 80011cc:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
		sprintf(buf, "NAND Flash ID = 0x%04X, Type = ", id);
 80011d0:	f107 0320 	add.w	r3, r7, #32
 80011d4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80011d8:	496f      	ldr	r1, [pc, #444]	; (8001398 <HardInfo+0x410>)
 80011da:	4618      	mov	r0, r3
 80011dc:	f007 ff74 	bl	80090c8 <siprintf>
		//UART1_Transmit_String(buf);
		if (id == HY27UF081G2A)
 80011e0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80011e4:	4a6d      	ldr	r2, [pc, #436]	; (800139c <HardInfo+0x414>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d112      	bne.n	8001210 <HardInfo+0x288>
		{
			sprintf(buf, "NAND Flash ID = 0x%04X, Model = HY27UF081G2A, OK", id);
 80011ea:	f107 0320 	add.w	r3, r7, #32
 80011ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80011f2:	496b      	ldr	r1, [pc, #428]	; (80013a0 <HardInfo+0x418>)
 80011f4:	4618      	mov	r0, r3
 80011f6:	f007 ff67 	bl	80090c8 <siprintf>
			LCD_DispStr(x, y, buf, &tFont);
 80011fa:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80011fe:	f107 0220 	add.w	r2, r7, #32
 8001202:	f8b7 10c8 	ldrh.w	r1, [r7, #200]	; 0xc8
 8001206:	f8b7 00ca 	ldrh.w	r0, [r7, #202]	; 0xca
 800120a:	f004 fc59 	bl	8005ac0 <LCD_DispStr>
 800120e:	e019      	b.n	8001244 <HardInfo+0x2bc>
		}
		else
		{
			sprintf(buf, "NAND Flash ID = 0x%04X, Model = Unknow, Err", id);
 8001210:	f107 0320 	add.w	r3, r7, #32
 8001214:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001218:	4962      	ldr	r1, [pc, #392]	; (80013a4 <HardInfo+0x41c>)
 800121a:	4618      	mov	r0, r3
 800121c:	f007 ff54 	bl	80090c8 <siprintf>
			tFont.FrontColor = CL_RED;
 8001220:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001224:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
			LCD_DispStr(x, y, buf, &tFont);
 8001228:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800122c:	f107 0220 	add.w	r2, r7, #32
 8001230:	f8b7 10c8 	ldrh.w	r1, [r7, #200]	; 0xc8
 8001234:	f8b7 00ca 	ldrh.w	r0, [r7, #202]	; 0xca
 8001238:	f004 fc42 	bl	8005ac0 <LCD_DispStr>
			tFont.FrontColor = CL_WHITE;
 800123c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001240:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
		}
		y += usLineCap;
 8001244:	f8b7 20c8 	ldrh.w	r2, [r7, #200]	; 0xc8
 8001248:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	; 0xcc
 800124c:	4413      	add	r3, r2
 800124e:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
	}

	/* I2c */
	{
		if (i2c_CheckDevice(EE_DEV_ADDR) == 0)
 8001252:	20a0      	movs	r0, #160	; 0xa0
 8001254:	f003 f914 	bl	8004480 <i2c_CheckDevice>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d111      	bne.n	8001282 <HardInfo+0x2fa>
		{
			sprintf(buf, "AT24C128 Ok (0x%02X)", EE_DEV_ADDR);
 800125e:	f107 0320 	add.w	r3, r7, #32
 8001262:	22a0      	movs	r2, #160	; 0xa0
 8001264:	4950      	ldr	r1, [pc, #320]	; (80013a8 <HardInfo+0x420>)
 8001266:	4618      	mov	r0, r3
 8001268:	f007 ff2e 	bl	80090c8 <siprintf>
			LCD_DispStr(x, y, buf, &tFont);
 800126c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001270:	f107 0220 	add.w	r2, r7, #32
 8001274:	f8b7 10c8 	ldrh.w	r1, [r7, #200]	; 0xc8
 8001278:	f8b7 00ca 	ldrh.w	r0, [r7, #202]	; 0xca
 800127c:	f004 fc20 	bl	8005ac0 <LCD_DispStr>
 8001280:	e018      	b.n	80012b4 <HardInfo+0x32c>
		}
		else
		{
			sprintf(buf, "AT24C128 Err (0x%02X)", EE_DEV_ADDR);
 8001282:	f107 0320 	add.w	r3, r7, #32
 8001286:	22a0      	movs	r2, #160	; 0xa0
 8001288:	4948      	ldr	r1, [pc, #288]	; (80013ac <HardInfo+0x424>)
 800128a:	4618      	mov	r0, r3
 800128c:	f007 ff1c 	bl	80090c8 <siprintf>
			tFont.FrontColor = CL_RED;
 8001290:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001294:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
			LCD_DispStr(x, y, buf, &tFont);
 8001298:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800129c:	f107 0220 	add.w	r2, r7, #32
 80012a0:	f8b7 10c8 	ldrh.w	r1, [r7, #200]	; 0xc8
 80012a4:	f8b7 00ca 	ldrh.w	r0, [r7, #202]	; 0xca
 80012a8:	f004 fc0a 	bl	8005ac0 <LCD_DispStr>
			tFont.FrontColor = CL_WHITE;
 80012ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012b0:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
		}
		y += usLineCap;
 80012b4:	f8b7 20c8 	ldrh.w	r2, [r7, #200]	; 0xc8
 80012b8:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	; 0xcc
 80012bc:	4413      	add	r3, r2
 80012be:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8

		if (i2c_CheckDevice(I2C_ADDR_SI4730_W) == 0)
 80012c2:	2022      	movs	r0, #34	; 0x22
 80012c4:	f003 f8dc 	bl	8004480 <i2c_CheckDevice>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d111      	bne.n	80012f2 <HardInfo+0x36a>
		{
			sprintf(buf, "Si4730 Ok (0x%02X)", I2C_ADDR_SI4730_W);
 80012ce:	f107 0320 	add.w	r3, r7, #32
 80012d2:	2222      	movs	r2, #34	; 0x22
 80012d4:	4936      	ldr	r1, [pc, #216]	; (80013b0 <HardInfo+0x428>)
 80012d6:	4618      	mov	r0, r3
 80012d8:	f007 fef6 	bl	80090c8 <siprintf>
			LCD_DispStr(x, y, buf, &tFont);
 80012dc:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80012e0:	f107 0220 	add.w	r2, r7, #32
 80012e4:	f8b7 10c8 	ldrh.w	r1, [r7, #200]	; 0xc8
 80012e8:	f8b7 00ca 	ldrh.w	r0, [r7, #202]	; 0xca
 80012ec:	f004 fbe8 	bl	8005ac0 <LCD_DispStr>
 80012f0:	e018      	b.n	8001324 <HardInfo+0x39c>
		}
		else
		{
			sprintf(buf, "Si4730 Err (0x%02X)", I2C_ADDR_SI4730_W);
 80012f2:	f107 0320 	add.w	r3, r7, #32
 80012f6:	2222      	movs	r2, #34	; 0x22
 80012f8:	492e      	ldr	r1, [pc, #184]	; (80013b4 <HardInfo+0x42c>)
 80012fa:	4618      	mov	r0, r3
 80012fc:	f007 fee4 	bl	80090c8 <siprintf>
			tFont.FrontColor = CL_RED;
 8001300:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001304:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
			LCD_DispStr(x, y, buf, &tFont);
 8001308:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800130c:	f107 0220 	add.w	r2, r7, #32
 8001310:	f8b7 10c8 	ldrh.w	r1, [r7, #200]	; 0xc8
 8001314:	f8b7 00ca 	ldrh.w	r0, [r7, #202]	; 0xca
 8001318:	f004 fbd2 	bl	8005ac0 <LCD_DispStr>
			tFont.FrontColor = CL_WHITE;
 800131c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001320:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
		}
		y += usLineCap;
 8001324:	f8b7 20c8 	ldrh.w	r2, [r7, #200]	; 0xc8
 8001328:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	; 0xcc
 800132c:	4413      	add	r3, r2
 800132e:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8

		if (i2c_CheckDevice(HMC5883L_SLAVE_ADDRESS) == 0)
 8001332:	203c      	movs	r0, #60	; 0x3c
 8001334:	f003 f8a4 	bl	8004480 <i2c_CheckDevice>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d13e      	bne.n	80013bc <HardInfo+0x434>
		{
			sprintf(buf, "HMC5883L Ok (0x%02X)", HMC5883L_SLAVE_ADDRESS);
 800133e:	f107 0320 	add.w	r3, r7, #32
 8001342:	223c      	movs	r2, #60	; 0x3c
 8001344:	491c      	ldr	r1, [pc, #112]	; (80013b8 <HardInfo+0x430>)
 8001346:	4618      	mov	r0, r3
 8001348:	f007 febe 	bl	80090c8 <siprintf>
			LCD_DispStr(x, y, buf, &tFont);
 800134c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001350:	f107 0220 	add.w	r2, r7, #32
 8001354:	f8b7 10c8 	ldrh.w	r1, [r7, #200]	; 0xc8
 8001358:	f8b7 00ca 	ldrh.w	r0, [r7, #202]	; 0xca
 800135c:	f004 fbb0 	bl	8005ac0 <LCD_DispStr>
 8001360:	e045      	b.n	80013ee <HardInfo+0x466>
 8001362:	bf00      	nop
 8001364:	0800b3a0 	.word	0x0800b3a0
 8001368:	1fff7a10 	.word	0x1fff7a10
 800136c:	1fff7a14 	.word	0x1fff7a14
 8001370:	1fff7a18 	.word	0x1fff7a18
 8001374:	0800b3ac 	.word	0x0800b3ac
 8001378:	0800b3cc 	.word	0x0800b3cc
 800137c:	0800b3e4 	.word	0x0800b3e4
 8001380:	0800b3f4 	.word	0x0800b3f4
 8001384:	0800b400 	.word	0x0800b400
 8001388:	0800b42c 	.word	0x0800b42c
 800138c:	017e2101 	.word	0x017e2101
 8001390:	0800b458 	.word	0x0800b458
 8001394:	0800b488 	.word	0x0800b488
 8001398:	0800b4b4 	.word	0x0800b4b4
 800139c:	adf1801d 	.word	0xadf1801d
 80013a0:	0800b4d4 	.word	0x0800b4d4
 80013a4:	0800b508 	.word	0x0800b508
 80013a8:	0800b534 	.word	0x0800b534
 80013ac:	0800b54c 	.word	0x0800b54c
 80013b0:	0800b564 	.word	0x0800b564
 80013b4:	0800b578 	.word	0x0800b578
 80013b8:	0800b58c 	.word	0x0800b58c
		}
		else
		{
			sprintf(buf, "HMC5883L Err (0x%02X)", HMC5883L_SLAVE_ADDRESS);
 80013bc:	f107 0320 	add.w	r3, r7, #32
 80013c0:	223c      	movs	r2, #60	; 0x3c
 80013c2:	49ca      	ldr	r1, [pc, #808]	; (80016ec <HardInfo+0x764>)
 80013c4:	4618      	mov	r0, r3
 80013c6:	f007 fe7f 	bl	80090c8 <siprintf>
			tFont.FrontColor = CL_RED;
 80013ca:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80013ce:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
			LCD_DispStr(x, y, buf, &tFont);
 80013d2:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80013d6:	f107 0220 	add.w	r2, r7, #32
 80013da:	f8b7 10c8 	ldrh.w	r1, [r7, #200]	; 0xc8
 80013de:	f8b7 00ca 	ldrh.w	r0, [r7, #202]	; 0xca
 80013e2:	f004 fb6d 	bl	8005ac0 <LCD_DispStr>
			tFont.FrontColor = CL_WHITE;
 80013e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013ea:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
		}
		y += usLineCap;
 80013ee:	f8b7 20c8 	ldrh.w	r2, [r7, #200]	; 0xc8
 80013f2:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	; 0xcc
 80013f6:	4413      	add	r3, r2
 80013f8:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8

		if (i2c_CheckDevice(MPU6050_SLAVE_ADDRESS) == 0)
 80013fc:	20d0      	movs	r0, #208	; 0xd0
 80013fe:	f003 f83f 	bl	8004480 <i2c_CheckDevice>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d111      	bne.n	800142c <HardInfo+0x4a4>
		{
			sprintf(buf, "MPU6050 Ok (0x%02X)", MPU6050_SLAVE_ADDRESS);
 8001408:	f107 0320 	add.w	r3, r7, #32
 800140c:	22d0      	movs	r2, #208	; 0xd0
 800140e:	49b8      	ldr	r1, [pc, #736]	; (80016f0 <HardInfo+0x768>)
 8001410:	4618      	mov	r0, r3
 8001412:	f007 fe59 	bl	80090c8 <siprintf>
			LCD_DispStr(x, y, buf, &tFont);
 8001416:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800141a:	f107 0220 	add.w	r2, r7, #32
 800141e:	f8b7 10c8 	ldrh.w	r1, [r7, #200]	; 0xc8
 8001422:	f8b7 00ca 	ldrh.w	r0, [r7, #202]	; 0xca
 8001426:	f004 fb4b 	bl	8005ac0 <LCD_DispStr>
 800142a:	e018      	b.n	800145e <HardInfo+0x4d6>
		}
		else
		{
			sprintf(buf, "MPU6050 Err (0x%02X)", MPU6050_SLAVE_ADDRESS);
 800142c:	f107 0320 	add.w	r3, r7, #32
 8001430:	22d0      	movs	r2, #208	; 0xd0
 8001432:	49b0      	ldr	r1, [pc, #704]	; (80016f4 <HardInfo+0x76c>)
 8001434:	4618      	mov	r0, r3
 8001436:	f007 fe47 	bl	80090c8 <siprintf>
			tFont.FrontColor = CL_RED;
 800143a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800143e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
			LCD_DispStr(x, y, buf, &tFont);
 8001442:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001446:	f107 0220 	add.w	r2, r7, #32
 800144a:	f8b7 10c8 	ldrh.w	r1, [r7, #200]	; 0xc8
 800144e:	f8b7 00ca 	ldrh.w	r0, [r7, #202]	; 0xca
 8001452:	f004 fb35 	bl	8005ac0 <LCD_DispStr>
			tFont.FrontColor = CL_WHITE;
 8001456:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800145a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
		}
		y += usLineCap;
 800145e:	f8b7 20c8 	ldrh.w	r2, [r7, #200]	; 0xc8
 8001462:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	; 0xcc
 8001466:	4413      	add	r3, r2
 8001468:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8

		if (i2c_CheckDevice(BMP085_SLAVE_ADDRESS) == 0)
 800146c:	20ee      	movs	r0, #238	; 0xee
 800146e:	f003 f807 	bl	8004480 <i2c_CheckDevice>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d111      	bne.n	800149c <HardInfo+0x514>
		{
			sprintf(buf, "BMP085 Ok (0x%02X)", BMP085_SLAVE_ADDRESS);
 8001478:	f107 0320 	add.w	r3, r7, #32
 800147c:	22ee      	movs	r2, #238	; 0xee
 800147e:	499e      	ldr	r1, [pc, #632]	; (80016f8 <HardInfo+0x770>)
 8001480:	4618      	mov	r0, r3
 8001482:	f007 fe21 	bl	80090c8 <siprintf>
			LCD_DispStr(x, y, buf, &tFont);
 8001486:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800148a:	f107 0220 	add.w	r2, r7, #32
 800148e:	f8b7 10c8 	ldrh.w	r1, [r7, #200]	; 0xc8
 8001492:	f8b7 00ca 	ldrh.w	r0, [r7, #202]	; 0xca
 8001496:	f004 fb13 	bl	8005ac0 <LCD_DispStr>
 800149a:	e018      	b.n	80014ce <HardInfo+0x546>
		}
		else
		{
			sprintf(buf, "BMP085 Err (0x%02X)", BMP085_SLAVE_ADDRESS);
 800149c:	f107 0320 	add.w	r3, r7, #32
 80014a0:	22ee      	movs	r2, #238	; 0xee
 80014a2:	4996      	ldr	r1, [pc, #600]	; (80016fc <HardInfo+0x774>)
 80014a4:	4618      	mov	r0, r3
 80014a6:	f007 fe0f 	bl	80090c8 <siprintf>
			tFont.FrontColor = CL_RED;
 80014aa:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80014ae:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
			LCD_DispStr(x, y, buf, &tFont);
 80014b2:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80014b6:	f107 0220 	add.w	r2, r7, #32
 80014ba:	f8b7 10c8 	ldrh.w	r1, [r7, #200]	; 0xc8
 80014be:	f8b7 00ca 	ldrh.w	r0, [r7, #202]	; 0xca
 80014c2:	f004 fafd 	bl	8005ac0 <LCD_DispStr>
			tFont.FrontColor = CL_WHITE;
 80014c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014ca:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
		}
		y += usLineCap;
 80014ce:	f8b7 20c8 	ldrh.w	r2, [r7, #200]	; 0xc8
 80014d2:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	; 0xcc
 80014d6:	4413      	add	r3, r2
 80014d8:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8

		if (i2c_CheckDevice(WM8978_SLAVE_ADDRESS) == 0)
 80014dc:	2034      	movs	r0, #52	; 0x34
 80014de:	f002 ffcf 	bl	8004480 <i2c_CheckDevice>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d111      	bne.n	800150c <HardInfo+0x584>
		{
			sprintf(buf, "WM8978 Ok (0x%02X)", WM8978_SLAVE_ADDRESS);
 80014e8:	f107 0320 	add.w	r3, r7, #32
 80014ec:	2234      	movs	r2, #52	; 0x34
 80014ee:	4984      	ldr	r1, [pc, #528]	; (8001700 <HardInfo+0x778>)
 80014f0:	4618      	mov	r0, r3
 80014f2:	f007 fde9 	bl	80090c8 <siprintf>
			LCD_DispStr(x, y, buf, &tFont);
 80014f6:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80014fa:	f107 0220 	add.w	r2, r7, #32
 80014fe:	f8b7 10c8 	ldrh.w	r1, [r7, #200]	; 0xc8
 8001502:	f8b7 00ca 	ldrh.w	r0, [r7, #202]	; 0xca
 8001506:	f004 fadb 	bl	8005ac0 <LCD_DispStr>
 800150a:	e018      	b.n	800153e <HardInfo+0x5b6>
		}
		else
		{
			sprintf(buf, "WM8978 Err (0x%02X)", WM8978_SLAVE_ADDRESS);
 800150c:	f107 0320 	add.w	r3, r7, #32
 8001510:	2234      	movs	r2, #52	; 0x34
 8001512:	497c      	ldr	r1, [pc, #496]	; (8001704 <HardInfo+0x77c>)
 8001514:	4618      	mov	r0, r3
 8001516:	f007 fdd7 	bl	80090c8 <siprintf>
			tFont.FrontColor = CL_RED;
 800151a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800151e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
			LCD_DispStr(x, y, buf, &tFont);
 8001522:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001526:	f107 0220 	add.w	r2, r7, #32
 800152a:	f8b7 10c8 	ldrh.w	r1, [r7, #200]	; 0xc8
 800152e:	f8b7 00ca 	ldrh.w	r0, [r7, #202]	; 0xca
 8001532:	f004 fac5 	bl	8005ac0 <LCD_DispStr>
			tFont.FrontColor = CL_WHITE;
 8001536:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800153a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
		}
		y += usLineCap;
 800153e:	f8b7 20c8 	ldrh.w	r2, [r7, #200]	; 0xc8
 8001542:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	; 0xcc
 8001546:	4413      	add	r3, r2
 8001548:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8

		if (i2c_CheckDevice(BH1750_SLAVE_ADDRESS) == 0)
 800154c:	2046      	movs	r0, #70	; 0x46
 800154e:	f002 ff97 	bl	8004480 <i2c_CheckDevice>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d111      	bne.n	800157c <HardInfo+0x5f4>
		{
			sprintf(buf, "BH1750 Ok (0x%02X)", BH1750_SLAVE_ADDRESS);
 8001558:	f107 0320 	add.w	r3, r7, #32
 800155c:	2246      	movs	r2, #70	; 0x46
 800155e:	496a      	ldr	r1, [pc, #424]	; (8001708 <HardInfo+0x780>)
 8001560:	4618      	mov	r0, r3
 8001562:	f007 fdb1 	bl	80090c8 <siprintf>
			LCD_DispStr(x, y, buf, &tFont);
 8001566:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800156a:	f107 0220 	add.w	r2, r7, #32
 800156e:	f8b7 10c8 	ldrh.w	r1, [r7, #200]	; 0xc8
 8001572:	f8b7 00ca 	ldrh.w	r0, [r7, #202]	; 0xca
 8001576:	f004 faa3 	bl	8005ac0 <LCD_DispStr>
 800157a:	e018      	b.n	80015ae <HardInfo+0x626>
		}
		else
		{
			sprintf(buf, "BH1750 Err (0x%02X)", BH1750_SLAVE_ADDRESS);
 800157c:	f107 0320 	add.w	r3, r7, #32
 8001580:	2246      	movs	r2, #70	; 0x46
 8001582:	4962      	ldr	r1, [pc, #392]	; (800170c <HardInfo+0x784>)
 8001584:	4618      	mov	r0, r3
 8001586:	f007 fd9f 	bl	80090c8 <siprintf>
			tFont.FrontColor = CL_RED;
 800158a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800158e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
			LCD_DispStr(x, y, buf, &tFont);
 8001592:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001596:	f107 0220 	add.w	r2, r7, #32
 800159a:	f8b7 10c8 	ldrh.w	r1, [r7, #200]	; 0xc8
 800159e:	f8b7 00ca 	ldrh.w	r0, [r7, #202]	; 0xca
 80015a2:	f004 fa8d 	bl	8005ac0 <LCD_DispStr>
			tFont.FrontColor = CL_WHITE;
 80015a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015aa:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
		}
		y += usLineCap;
 80015ae:	f8b7 20c8 	ldrh.w	r2, [r7, #200]	; 0xc8
 80015b2:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	; 0xcc
 80015b6:	4413      	add	r3, r2
 80015b8:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8

		{
			sprintf(buf, "SPI Flash ID= = %08X, Model = %s",g_tSF.ChipID , g_tSF.ChipName);
 80015bc:	4b54      	ldr	r3, [pc, #336]	; (8001710 <HardInfo+0x788>)
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	f107 0020 	add.w	r0, r7, #32
 80015c4:	4b53      	ldr	r3, [pc, #332]	; (8001714 <HardInfo+0x78c>)
 80015c6:	4954      	ldr	r1, [pc, #336]	; (8001718 <HardInfo+0x790>)
 80015c8:	f007 fd7e 	bl	80090c8 <siprintf>
			if (g_tSF.ChipID == W25Q64BV_ID)
 80015cc:	4b50      	ldr	r3, [pc, #320]	; (8001710 <HardInfo+0x788>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a52      	ldr	r2, [pc, #328]	; (800171c <HardInfo+0x794>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d10a      	bne.n	80015ec <HardInfo+0x664>
			{
				LCD_DispStr(x, y, buf, &tFont);
 80015d6:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80015da:	f107 0220 	add.w	r2, r7, #32
 80015de:	f8b7 10c8 	ldrh.w	r1, [r7, #200]	; 0xc8
 80015e2:	f8b7 00ca 	ldrh.w	r0, [r7, #202]	; 0xca
 80015e6:	f004 fa6b 	bl	8005ac0 <LCD_DispStr>
 80015ea:	e011      	b.n	8001610 <HardInfo+0x688>
			}
			else
			{
				tFont.FrontColor = CL_RED;
 80015ec:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80015f0:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
				LCD_DispStr(x, y, buf, &tFont);
 80015f4:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80015f8:	f107 0220 	add.w	r2, r7, #32
 80015fc:	f8b7 10c8 	ldrh.w	r1, [r7, #200]	; 0xc8
 8001600:	f8b7 00ca 	ldrh.w	r0, [r7, #202]	; 0xca
 8001604:	f004 fa5c 	bl	8005ac0 <LCD_DispStr>
				tFont.FrontColor = CL_WHITE;
 8001608:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800160c:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
			}
		}
	}

	fRefresh = 1;
 8001610:	2301      	movs	r3, #1
 8001612:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
	while(1)
	{
		bsp_Idle();
 8001616:	f005 ffef 	bl	80075f8 <bsp_Idle>

		if (fRefresh)
 800161a:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 800161e:	2b00      	cmp	r3, #0
 8001620:	d01b      	beq.n	800165a <HardInfo+0x6d2>
		{
			fRefresh = 0;
 8001622:	2300      	movs	r3, #0
 8001624:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
			{
				tBtn.Font = &tFontBtn;
 8001628:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800162c:	613b      	str	r3, [r7, #16]
				tBtn.Left = BUTTON_RET_X;
 800162e:	4b3c      	ldr	r3, [pc, #240]	; (8001720 <HardInfo+0x798>)
 8001630:	881b      	ldrh	r3, [r3, #0]
 8001632:	3b40      	subs	r3, #64	; 0x40
 8001634:	b29b      	uxth	r3, r3
 8001636:	80fb      	strh	r3, [r7, #6]
				tBtn.Top = BUTTON_RET_Y;
 8001638:	4b3a      	ldr	r3, [pc, #232]	; (8001724 <HardInfo+0x79c>)
 800163a:	881b      	ldrh	r3, [r3, #0]
 800163c:	3b24      	subs	r3, #36	; 0x24
 800163e:	b29b      	uxth	r3, r3
 8001640:	813b      	strh	r3, [r7, #8]
				tBtn.Height = BUTTON_RET_H;
 8001642:	2320      	movs	r3, #32
 8001644:	817b      	strh	r3, [r7, #10]
				tBtn.Width = BUTTON_RET_W;
 8001646:	233c      	movs	r3, #60	; 0x3c
 8001648:	81bb      	strh	r3, [r7, #12]
				tBtn.Focus = 0;	/* Ê§È¥½¹µã */
 800164a:	2300      	movs	r3, #0
 800164c:	763b      	strb	r3, [r7, #24]
				tBtn.pCaption = "BACK";
 800164e:	4b36      	ldr	r3, [pc, #216]	; (8001728 <HardInfo+0x7a0>)
 8001650:	617b      	str	r3, [r7, #20]
				LCD_DrawButton(&tBtn);
 8001652:	1d3b      	adds	r3, r7, #4
 8001654:	4618      	mov	r0, r3
 8001656:	f004 fdf9 	bl	800624c <LCD_DrawButton>
			}
		}
		ucTouch = TOUCH_GetKey(&tpX, &tpY);
 800165a:	f107 021c 	add.w	r2, r7, #28
 800165e:	f107 031e 	add.w	r3, r7, #30
 8001662:	4611      	mov	r1, r2
 8001664:	4618      	mov	r0, r3
 8001666:	f005 f859 	bl	800671c <TOUCH_GetKey>
 800166a:	4603      	mov	r3, r0
 800166c:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
		if (ucTouch != TOUCH_NONE)
 8001670:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 8001674:	2b00      	cmp	r3, #0
 8001676:	f000 80a5 	beq.w	80017c4 <HardInfo+0x83c>
		{
			switch (ucTouch)
 800167a:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 800167e:	2b01      	cmp	r3, #1
 8001680:	d002      	beq.n	8001688 <HardInfo+0x700>
 8001682:	2b03      	cmp	r3, #3
 8001684:	d052      	beq.n	800172c <HardInfo+0x7a4>
 8001686:	e09d      	b.n	80017c4 <HardInfo+0x83c>
			{
				case TOUCH_DOWN:
					if (TOUCH_InRect(tpX, tpY, BUTTON_RET_X, BUTTON_RET_Y, BUTTON_RET_H, BUTTON_RET_W))
 8001688:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800168c:	b298      	uxth	r0, r3
 800168e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001692:	b299      	uxth	r1, r3
 8001694:	4b22      	ldr	r3, [pc, #136]	; (8001720 <HardInfo+0x798>)
 8001696:	881b      	ldrh	r3, [r3, #0]
 8001698:	3b40      	subs	r3, #64	; 0x40
 800169a:	b29a      	uxth	r2, r3
 800169c:	4b21      	ldr	r3, [pc, #132]	; (8001724 <HardInfo+0x79c>)
 800169e:	881b      	ldrh	r3, [r3, #0]
 80016a0:	3b24      	subs	r3, #36	; 0x24
 80016a2:	b29b      	uxth	r3, r3
 80016a4:	243c      	movs	r4, #60	; 0x3c
 80016a6:	9401      	str	r4, [sp, #4]
 80016a8:	2420      	movs	r4, #32
 80016aa:	9400      	str	r4, [sp, #0]
 80016ac:	f005 f87e 	bl	80067ac <TOUCH_InRect>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	f000 8085 	beq.w	80017c2 <HardInfo+0x83a>
					{
						tBtn.Font = &tFontBtn;
 80016b8:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80016bc:	613b      	str	r3, [r7, #16]
						tBtn.Left = BUTTON_RET_X;
 80016be:	4b18      	ldr	r3, [pc, #96]	; (8001720 <HardInfo+0x798>)
 80016c0:	881b      	ldrh	r3, [r3, #0]
 80016c2:	3b40      	subs	r3, #64	; 0x40
 80016c4:	b29b      	uxth	r3, r3
 80016c6:	80fb      	strh	r3, [r7, #6]
						tBtn.Top = BUTTON_RET_Y;
 80016c8:	4b16      	ldr	r3, [pc, #88]	; (8001724 <HardInfo+0x79c>)
 80016ca:	881b      	ldrh	r3, [r3, #0]
 80016cc:	3b24      	subs	r3, #36	; 0x24
 80016ce:	b29b      	uxth	r3, r3
 80016d0:	813b      	strh	r3, [r7, #8]
						tBtn.Height = BUTTON_RET_H;
 80016d2:	2320      	movs	r3, #32
 80016d4:	817b      	strh	r3, [r7, #10]
						tBtn.Width = BUTTON_RET_W;
 80016d6:	233c      	movs	r3, #60	; 0x3c
 80016d8:	81bb      	strh	r3, [r7, #12]
						tBtn.Focus = 1;	/* ½¹µã */
 80016da:	2301      	movs	r3, #1
 80016dc:	763b      	strb	r3, [r7, #24]
						tBtn.pCaption = "BACK";
 80016de:	4b12      	ldr	r3, [pc, #72]	; (8001728 <HardInfo+0x7a0>)
 80016e0:	617b      	str	r3, [r7, #20]
						LCD_DrawButton(&tBtn);
 80016e2:	1d3b      	adds	r3, r7, #4
 80016e4:	4618      	mov	r0, r3
 80016e6:	f004 fdb1 	bl	800624c <LCD_DrawButton>
					}
				break;
 80016ea:	e06a      	b.n	80017c2 <HardInfo+0x83a>
 80016ec:	0800b5a4 	.word	0x0800b5a4
 80016f0:	0800b5bc 	.word	0x0800b5bc
 80016f4:	0800b5d0 	.word	0x0800b5d0
 80016f8:	0800b5e8 	.word	0x0800b5e8
 80016fc:	0800b5fc 	.word	0x0800b5fc
 8001700:	0800b610 	.word	0x0800b610
 8001704:	0800b624 	.word	0x0800b624
 8001708:	0800b638 	.word	0x0800b638
 800170c:	0800b64c 	.word	0x0800b64c
 8001710:	20000b54 	.word	0x20000b54
 8001714:	20000b58 	.word	0x20000b58
 8001718:	0800b660 	.word	0x0800b660
 800171c:	00ef4017 	.word	0x00ef4017
 8001720:	2000000c 	.word	0x2000000c
 8001724:	2000000a 	.word	0x2000000a
 8001728:	0800b684 	.word	0x0800b684
				case TOUCH_RELEASE:
					if (TOUCH_InRect(tpX, tpY, BUTTON_RET_X, BUTTON_RET_Y, BUTTON_RET_H, BUTTON_RET_W))
 800172c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001730:	b298      	uxth	r0, r3
 8001732:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001736:	b299      	uxth	r1, r3
 8001738:	4b2c      	ldr	r3, [pc, #176]	; (80017ec <HardInfo+0x864>)
 800173a:	881b      	ldrh	r3, [r3, #0]
 800173c:	3b40      	subs	r3, #64	; 0x40
 800173e:	b29a      	uxth	r2, r3
 8001740:	4b2b      	ldr	r3, [pc, #172]	; (80017f0 <HardInfo+0x868>)
 8001742:	881b      	ldrh	r3, [r3, #0]
 8001744:	3b24      	subs	r3, #36	; 0x24
 8001746:	b29b      	uxth	r3, r3
 8001748:	243c      	movs	r4, #60	; 0x3c
 800174a:	9401      	str	r4, [sp, #4]
 800174c:	2420      	movs	r4, #32
 800174e:	9400      	str	r4, [sp, #0]
 8001750:	f005 f82c 	bl	80067ac <TOUCH_InRect>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d019      	beq.n	800178e <HardInfo+0x806>
					{
						tBtn.Font = &tFontBtn;
 800175a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800175e:	613b      	str	r3, [r7, #16]
						tBtn.Left = BUTTON_RET_X;
 8001760:	4b22      	ldr	r3, [pc, #136]	; (80017ec <HardInfo+0x864>)
 8001762:	881b      	ldrh	r3, [r3, #0]
 8001764:	3b40      	subs	r3, #64	; 0x40
 8001766:	b29b      	uxth	r3, r3
 8001768:	80fb      	strh	r3, [r7, #6]
						tBtn.Top = BUTTON_RET_Y;
 800176a:	4b21      	ldr	r3, [pc, #132]	; (80017f0 <HardInfo+0x868>)
 800176c:	881b      	ldrh	r3, [r3, #0]
 800176e:	3b24      	subs	r3, #36	; 0x24
 8001770:	b29b      	uxth	r3, r3
 8001772:	813b      	strh	r3, [r7, #8]
						tBtn.Height = BUTTON_RET_H;
 8001774:	2320      	movs	r3, #32
 8001776:	817b      	strh	r3, [r7, #10]
						tBtn.Width = BUTTON_RET_W;
 8001778:	233c      	movs	r3, #60	; 0x3c
 800177a:	81bb      	strh	r3, [r7, #12]
						tBtn.Focus = 1;	/* ½¹µã */
 800177c:	2301      	movs	r3, #1
 800177e:	763b      	strb	r3, [r7, #24]
						tBtn.pCaption = "BACK";
 8001780:	4b1c      	ldr	r3, [pc, #112]	; (80017f4 <HardInfo+0x86c>)
 8001782:	617b      	str	r3, [r7, #20]
						LCD_DrawButton(&tBtn);
 8001784:	1d3b      	adds	r3, r7, #4
 8001786:	4618      	mov	r0, r3
 8001788:	f004 fd60 	bl	800624c <LCD_DrawButton>
						return;
 800178c:	e02b      	b.n	80017e6 <HardInfo+0x85e>
					}
					else
					{
						tBtn.Font = &tFontBtn;
 800178e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001792:	613b      	str	r3, [r7, #16]
						tBtn.Left = BUTTON_RET_X;
 8001794:	4b15      	ldr	r3, [pc, #84]	; (80017ec <HardInfo+0x864>)
 8001796:	881b      	ldrh	r3, [r3, #0]
 8001798:	3b40      	subs	r3, #64	; 0x40
 800179a:	b29b      	uxth	r3, r3
 800179c:	80fb      	strh	r3, [r7, #6]
						tBtn.Top = BUTTON_RET_Y;
 800179e:	4b14      	ldr	r3, [pc, #80]	; (80017f0 <HardInfo+0x868>)
 80017a0:	881b      	ldrh	r3, [r3, #0]
 80017a2:	3b24      	subs	r3, #36	; 0x24
 80017a4:	b29b      	uxth	r3, r3
 80017a6:	813b      	strh	r3, [r7, #8]
						tBtn.Height = BUTTON_RET_H;
 80017a8:	2320      	movs	r3, #32
 80017aa:	817b      	strh	r3, [r7, #10]
						tBtn.Width = BUTTON_RET_W;
 80017ac:	233c      	movs	r3, #60	; 0x3c
 80017ae:	81bb      	strh	r3, [r7, #12]
						tBtn.Focus = 0;	/* ½¹µã */
 80017b0:	2300      	movs	r3, #0
 80017b2:	763b      	strb	r3, [r7, #24]
						tBtn.pCaption = "BACK";
 80017b4:	4b0f      	ldr	r3, [pc, #60]	; (80017f4 <HardInfo+0x86c>)
 80017b6:	617b      	str	r3, [r7, #20]
						LCD_DrawButton(&tBtn);
 80017b8:	1d3b      	adds	r3, r7, #4
 80017ba:	4618      	mov	r0, r3
 80017bc:	f004 fd46 	bl	800624c <LCD_DrawButton>
 80017c0:	e000      	b.n	80017c4 <HardInfo+0x83c>
				break;
 80017c2:	bf00      	nop
					}
			}
		}
		ucKeyCode = bsp_GetKey();
 80017c4:	f003 f974 	bl	8004ab0 <bsp_GetKey>
 80017c8:	4603      	mov	r3, r0
 80017ca:	f887 30b2 	strb.w	r3, [r7, #178]	; 0xb2
		if (ucKeyCode != KEY_NONE)
 80017ce:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	f43f af1f 	beq.w	8001616 <HardInfo+0x68e>
		{
			switch (ucKeyCode)
 80017d8:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
 80017dc:	2b16      	cmp	r3, #22
 80017de:	d001      	beq.n	80017e4 <HardInfo+0x85c>
			{
				case  JOY_DOWN_OK:		/* Ò¡¸ËOK¼ü */
					return;		/* ·µ»Ø */

				default:
					break;
 80017e0:	bf00      	nop
		bsp_Idle();
 80017e2:	e718      	b.n	8001616 <HardInfo+0x68e>
					return;		/* ·µ»Ø */
 80017e4:	bf00      	nop
			}
		}
	}
}
 80017e6:	37d0      	adds	r7, #208	; 0xd0
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bdb0      	pop	{r4, r5, r7, pc}
 80017ec:	2000000c 	.word	0x2000000c
 80017f0:	2000000a 	.word	0x2000000a
 80017f4:	0800b684 	.word	0x0800b684

080017f8 <main>:

IWDG_HandleTypeDef hiwdg;
HAL_StatusTypeDef status;

int main(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
	uint16_t ucStatus;

	HAL_Init();
 80017fe:	f005 ff15 	bl	800762c <HAL_Init>

	SystemClock_Config();
 8001802:	f000 f831 	bl	8001868 <SystemClock_Config>
	//SystemInit_clk();
	//IWDG_Init();

	bsp_Init();
 8001806:	f005 fedf 	bl	80075c8 <bsp_Init>

	LoadParam();
 800180a:	f000 fa85 	bl	8001d18 <LoadParam>

	LCD_InitHard();
 800180e:	f004 f807 	bl	8005820 <LCD_InitHard>

	TOUCH_InitHard();
 8001812:	f004 ff31 	bl	8006678 <TOUCH_InitHard>

	LCD_ClrScr(CL_YELLOW);
 8001816:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 800181a:	f004 f903 	bl	8005a24 <LCD_ClrScr>
	LCD_SetBackLight(g_tParam.ucBackLight);
 800181e:	4b11      	ldr	r3, [pc, #68]	; (8001864 <main+0x6c>)
 8001820:	791b      	ldrb	r3, [r3, #4]
 8001822:	4618      	mov	r0, r3
 8001824:	f004 f912 	bl	8005a4c <LCD_SetBackLight>

	ucStatus = MS_MAIN_MENU;
 8001828:	2300      	movs	r3, #0
 800182a:	80fb      	strh	r3, [r7, #6]
		sprintf(msg,"%f\n",usAdcX);
		UART1_Transmit_String(msg);
		bsp_DelayMS(500);
#endif
#if 1
		switch (ucStatus)
 800182c:	88fb      	ldrh	r3, [r7, #6]
 800182e:	2b13      	cmp	r3, #19
 8001830:	d006      	beq.n	8001840 <main+0x48>
 8001832:	2b13      	cmp	r3, #19
 8001834:	dc13      	bgt.n	800185e <main+0x66>
 8001836:	2b00      	cmp	r3, #0
 8001838:	d007      	beq.n	800184a <main+0x52>
 800183a:	2b01      	cmp	r3, #1
 800183c:	d00a      	beq.n	8001854 <main+0x5c>
				HardInfo();
				ucStatus = MS_MAIN_MENU;
			break;

			default:
			break;
 800183e:	e00e      	b.n	800185e <main+0x66>
			 	TOUCH_Calibration();		/* Ð£×¼´¥Ãþ, ¸Ã½çÃæÊµÏÖÔÚbsp_touch.c */
 8001840:	f005 f9fa 	bl	8006c38 <TOUCH_Calibration>
			 	ucStatus = MS_MAIN_MENU; 	/* Ð£×¼Íê±Ïºó£¬·µ»Øµ½Ö÷½çÃæ */
 8001844:	2300      	movs	r3, #0
 8001846:	80fb      	strh	r3, [r7, #6]
			break;
 8001848:	e00a      	b.n	8001860 <main+0x68>
				ucStatus = MainMenu();
 800184a:	f000 f87d 	bl	8001948 <MainMenu>
 800184e:	4603      	mov	r3, r0
 8001850:	80fb      	strh	r3, [r7, #6]
			break;
 8001852:	e005      	b.n	8001860 <main+0x68>
				HardInfo();
 8001854:	f7ff fb98 	bl	8000f88 <HardInfo>
				ucStatus = MS_MAIN_MENU;
 8001858:	2300      	movs	r3, #0
 800185a:	80fb      	strh	r3, [r7, #6]
			break;
 800185c:	e000      	b.n	8001860 <main+0x68>
			break;
 800185e:	bf00      	nop
		switch (ucStatus)
 8001860:	e7e4      	b.n	800182c <main+0x34>
 8001862:	bf00      	nop
 8001864:	20000200 	.word	0x20000200

08001868 <SystemClock_Config>:
	hiwdg.Init.Reload = 4095;  // 최대값 (약 26초 타임아웃)
	HAL_IWDG_Init(&hiwdg);
}

void SystemClock_Config(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b094      	sub	sp, #80	; 0x50
 800186c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800186e:	f107 0320 	add.w	r3, r7, #32
 8001872:	2230      	movs	r2, #48	; 0x30
 8001874:	2100      	movs	r1, #0
 8001876:	4618      	mov	r0, r3
 8001878:	f007 fd1e 	bl	80092b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800187c:	f107 030c 	add.w	r3, r7, #12
 8001880:	2200      	movs	r2, #0
 8001882:	601a      	str	r2, [r3, #0]
 8001884:	605a      	str	r2, [r3, #4]
 8001886:	609a      	str	r2, [r3, #8]
 8001888:	60da      	str	r2, [r3, #12]
 800188a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800188c:	2300      	movs	r3, #0
 800188e:	60bb      	str	r3, [r7, #8]
 8001890:	4b28      	ldr	r3, [pc, #160]	; (8001934 <SystemClock_Config+0xcc>)
 8001892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001894:	4a27      	ldr	r2, [pc, #156]	; (8001934 <SystemClock_Config+0xcc>)
 8001896:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800189a:	6413      	str	r3, [r2, #64]	; 0x40
 800189c:	4b25      	ldr	r3, [pc, #148]	; (8001934 <SystemClock_Config+0xcc>)
 800189e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018a4:	60bb      	str	r3, [r7, #8]
 80018a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018a8:	2300      	movs	r3, #0
 80018aa:	607b      	str	r3, [r7, #4]
 80018ac:	4b22      	ldr	r3, [pc, #136]	; (8001938 <SystemClock_Config+0xd0>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a21      	ldr	r2, [pc, #132]	; (8001938 <SystemClock_Config+0xd0>)
 80018b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018b6:	6013      	str	r3, [r2, #0]
 80018b8:	4b1f      	ldr	r3, [pc, #124]	; (8001938 <SystemClock_Config+0xd0>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018c0:	607b      	str	r3, [r7, #4]
 80018c2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80018c4:	2301      	movs	r3, #1
 80018c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018cc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018ce:	2302      	movs	r3, #2
 80018d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80018d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80018d8:	2319      	movs	r3, #25
 80018da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80018dc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80018e0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018e2:	2302      	movs	r3, #2
 80018e4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;                                  // 4
 80018e6:	2307      	movs	r3, #7
 80018e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018ea:	f107 0320 	add.w	r3, r7, #32
 80018ee:	4618      	mov	r0, r3
 80018f0:	f006 fa6a 	bl	8007dc8 <HAL_RCC_OscConfig>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <SystemClock_Config+0x96>
  {
    Error_Handler();
 80018fa:	f000 f81f 	bl	800193c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018fe:	230f      	movs	r3, #15
 8001900:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001902:	2302      	movs	r3, #2
 8001904:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001906:	2300      	movs	r3, #0
 8001908:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800190a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800190e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001910:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001914:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001916:	f107 030c 	add.w	r3, r7, #12
 800191a:	2105      	movs	r1, #5
 800191c:	4618      	mov	r0, r3
 800191e:	f006 fccb 	bl	80082b8 <HAL_RCC_ClockConfig>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d001      	beq.n	800192c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001928:	f000 f808 	bl	800193c <Error_Handler>
  }
}
 800192c:	bf00      	nop
 800192e:	3750      	adds	r7, #80	; 0x50
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	40023800 	.word	0x40023800
 8001938:	40007000 	.word	0x40007000

0800193c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001940:	b672      	cpsid	i
}
 8001942:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001944:	e7fe      	b.n	8001944 <Error_Handler+0x8>
	...

08001948 <MainMenu>:
*********************************************************************************************************
*	Func name: MainMenu
*********************************************************************************************************
*/
uint8_t MainMenu(void)
{
 8001948:	b5f0      	push	{r4, r5, r6, r7, lr}
 800194a:	b08b      	sub	sp, #44	; 0x2c
 800194c:	af02      	add	r7, sp, #8
	FONT_T tIconFont;		

	int16_t tpX, tpY;
	uint16_t i;

	DispBackground();
 800194e:	f000 f989 	bl	8001c64 <DispBackground>

	{
		tFont.FontCode = FC_ST_16;	/* ×ÖÌå´úÂë 16µãÕó */
 8001952:	2300      	movs	r3, #0
 8001954:	823b      	strh	r3, [r7, #16]
		tFont.FrontColor = MAIN_TEXT_COLOR;	/* ×ÖÌåÑÕÉ« */
 8001956:	4ba2      	ldr	r3, [pc, #648]	; (8001be0 <MainMenu+0x298>)
 8001958:	881b      	ldrh	r3, [r3, #0]
 800195a:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 800195e:	d106      	bne.n	800196e <MainMenu+0x26>
 8001960:	4ba0      	ldr	r3, [pc, #640]	; (8001be4 <MainMenu+0x29c>)
 8001962:	881b      	ldrh	r3, [r3, #0]
 8001964:	4aa0      	ldr	r2, [pc, #640]	; (8001be8 <MainMenu+0x2a0>)
 8001966:	00db      	lsls	r3, r3, #3
 8001968:	4413      	add	r3, r2
 800196a:	88db      	ldrh	r3, [r3, #6]
 800196c:	e005      	b.n	800197a <MainMenu+0x32>
 800196e:	4b9d      	ldr	r3, [pc, #628]	; (8001be4 <MainMenu+0x29c>)
 8001970:	881b      	ldrh	r3, [r3, #0]
 8001972:	4a9e      	ldr	r2, [pc, #632]	; (8001bec <MainMenu+0x2a4>)
 8001974:	00db      	lsls	r3, r3, #3
 8001976:	4413      	add	r3, r2
 8001978:	88db      	ldrh	r3, [r3, #6]
 800197a:	827b      	strh	r3, [r7, #18]
		tFont.BackColor = CL_MASK;	/* ÎÄ×Ö±³¾°ÑÕÉ« */
 800197c:	f649 1399 	movw	r3, #39321	; 0x9999
 8001980:	82bb      	strh	r3, [r7, #20]
		tFont.Space = 0;				/* ÎÄ×Ö¼ä¾à£¬µ¥Î» = ÏñËØ */
 8001982:	2300      	movs	r3, #0
 8001984:	82fb      	strh	r3, [r7, #22]

		tIconFont.FontCode = FC_ST_12;		/* ×ÖÌå´úÂë 16µãÕó */
 8001986:	2301      	movs	r3, #1
 8001988:	813b      	strh	r3, [r7, #8]
		tIconFont.FrontColor = MAIN_TEXT_COLOR;	/* ×ÖÌåÑÕÉ« */
 800198a:	4b95      	ldr	r3, [pc, #596]	; (8001be0 <MainMenu+0x298>)
 800198c:	881b      	ldrh	r3, [r3, #0]
 800198e:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8001992:	d106      	bne.n	80019a2 <MainMenu+0x5a>
 8001994:	4b93      	ldr	r3, [pc, #588]	; (8001be4 <MainMenu+0x29c>)
 8001996:	881b      	ldrh	r3, [r3, #0]
 8001998:	4a93      	ldr	r2, [pc, #588]	; (8001be8 <MainMenu+0x2a0>)
 800199a:	00db      	lsls	r3, r3, #3
 800199c:	4413      	add	r3, r2
 800199e:	88db      	ldrh	r3, [r3, #6]
 80019a0:	e005      	b.n	80019ae <MainMenu+0x66>
 80019a2:	4b90      	ldr	r3, [pc, #576]	; (8001be4 <MainMenu+0x29c>)
 80019a4:	881b      	ldrh	r3, [r3, #0]
 80019a6:	4a91      	ldr	r2, [pc, #580]	; (8001bec <MainMenu+0x2a4>)
 80019a8:	00db      	lsls	r3, r3, #3
 80019aa:	4413      	add	r3, r2
 80019ac:	88db      	ldrh	r3, [r3, #6]
 80019ae:	817b      	strh	r3, [r7, #10]
		tIconFont.BackColor = CL_MASK;		/* ÎÄ×Ö±³¾°ÑÕÉ« */
 80019b0:	f649 1399 	movw	r3, #39321	; 0x9999
 80019b4:	81bb      	strh	r3, [r7, #12]
		tIconFont.Space = 1;				/* ÎÄ×Ö¼ä¾à£¬µ¥Î» = ÏñËØ */
 80019b6:	2301      	movs	r3, #1
 80019b8:	81fb      	strh	r3, [r7, #14]
	}
	LCD_DispStr(5, 3, VER_INFO, &tFont);			/* ÔÚ(8,3)×ø±ê´¦ÏÔÊ¾Ò»´®ºº×Ö */
 80019ba:	f107 0310 	add.w	r3, r7, #16
 80019be:	4a8c      	ldr	r2, [pc, #560]	; (8001bf0 <MainMenu+0x2a8>)
 80019c0:	2103      	movs	r1, #3
 80019c2:	2005      	movs	r0, #5
 80019c4:	f004 f87c 	bl	8005ac0 <LCD_DispStr>
	LCD_DispStr(5, g_LcdHeight - 13, KEY_INFO, &tIconFont);			/* ÔÚ(8,3)×ø±ê´¦ÏÔÊ¾Ò»´®ºº×Ö */
 80019c8:	4b8a      	ldr	r3, [pc, #552]	; (8001bf4 <MainMenu+0x2ac>)
 80019ca:	881b      	ldrh	r3, [r3, #0]
 80019cc:	3b0d      	subs	r3, #13
 80019ce:	b299      	uxth	r1, r3
 80019d0:	f107 0308 	add.w	r3, r7, #8
 80019d4:	4a88      	ldr	r2, [pc, #544]	; (8001bf8 <MainMenu+0x2b0>)
 80019d6:	2005      	movs	r0, #5
 80019d8:	f004 f872 	bl	8005ac0 <LCD_DispStr>

	fRefresh = 1;
 80019dc:	2301      	movs	r3, #1
 80019de:	77fb      	strb	r3, [r7, #31]

	while(1)
	{
		bsp_Idle();
 80019e0:	f005 fe0a 	bl	80075f8 <bsp_Idle>
		if (fRefresh)
 80019e4:	7ffb      	ldrb	r3, [r7, #31]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d014      	beq.n	8001a14 <MainMenu+0xcc>
		{
			fRefresh = 0;
 80019ea:	2300      	movs	r3, #0
 80019ec:	77fb      	strb	r3, [r7, #31]
			{
				for (i = 0; i < ICONS_COUNT; i++)
 80019ee:	2300      	movs	r3, #0
 80019f0:	83bb      	strh	r3, [r7, #28]
 80019f2:	e00c      	b.n	8001a0e <MainMenu+0xc6>
				{
					LCD_DrawIcon32(&s_tMainIcons[i], &tIconFont, 0);
 80019f4:	8bbb      	ldrh	r3, [r7, #28]
 80019f6:	015b      	lsls	r3, r3, #5
 80019f8:	4a80      	ldr	r2, [pc, #512]	; (8001bfc <MainMenu+0x2b4>)
 80019fa:	4413      	add	r3, r2
 80019fc:	f107 0108 	add.w	r1, r7, #8
 8001a00:	2200      	movs	r2, #0
 8001a02:	4618      	mov	r0, r3
 8001a04:	f004 f99a 	bl	8005d3c <LCD_DrawIcon32>
				for (i = 0; i < ICONS_COUNT; i++)
 8001a08:	8bbb      	ldrh	r3, [r7, #28]
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	83bb      	strh	r3, [r7, #28]
 8001a0e:	8bbb      	ldrh	r3, [r7, #28]
 8001a10:	2b11      	cmp	r3, #17
 8001a12:	d9ef      	bls.n	80019f4 <MainMenu+0xac>
				}
			}
		}
#if 1
		ucTouch = TOUCH_GetKey(&tpX, &tpY);
 8001a14:	1d3a      	adds	r2, r7, #4
 8001a16:	1dbb      	adds	r3, r7, #6
 8001a18:	4611      	mov	r1, r2
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f004 fe7e 	bl	800671c <TOUCH_GetKey>
 8001a20:	4603      	mov	r3, r0
 8001a22:	76fb      	strb	r3, [r7, #27]
		if(ucTouch != TOUCH_NONE)
 8001a24:	7efb      	ldrb	r3, [r7, #27]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	f000 8092 	beq.w	8001b50 <MainMenu+0x208>
		{
			switch (ucTouch)
 8001a2c:	7efb      	ldrb	r3, [r7, #27]
 8001a2e:	2b03      	cmp	r3, #3
 8001a30:	d043      	beq.n	8001aba <MainMenu+0x172>
 8001a32:	2b03      	cmp	r3, #3
 8001a34:	f300 8089 	bgt.w	8001b4a <MainMenu+0x202>
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d003      	beq.n	8001a44 <MainMenu+0xfc>
 8001a3c:	2b02      	cmp	r3, #2
 8001a3e:	f000 8086 	beq.w	8001b4e <MainMenu+0x206>
							LCD_DrawIcon32(&s_tMainIcons[i], &tIconFont, 0);
						}
					}
					break;
				default:
					break;
 8001a42:	e082      	b.n	8001b4a <MainMenu+0x202>
					for (i = 0; i < ICONS_COUNT; i++)
 8001a44:	2300      	movs	r3, #0
 8001a46:	83bb      	strh	r3, [r7, #28]
 8001a48:	e033      	b.n	8001ab2 <MainMenu+0x16a>
						if (TOUCH_InRect(tpX, tpY, s_tMainIcons[i].Left, s_tMainIcons[i].Top,
 8001a4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a4e:	b298      	uxth	r0, r3
 8001a50:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001a54:	b299      	uxth	r1, r3
 8001a56:	8bbb      	ldrh	r3, [r7, #28]
 8001a58:	4a68      	ldr	r2, [pc, #416]	; (8001bfc <MainMenu+0x2b4>)
 8001a5a:	015b      	lsls	r3, r3, #5
 8001a5c:	4413      	add	r3, r2
 8001a5e:	3302      	adds	r3, #2
 8001a60:	881c      	ldrh	r4, [r3, #0]
 8001a62:	8bbb      	ldrh	r3, [r7, #28]
 8001a64:	4a65      	ldr	r2, [pc, #404]	; (8001bfc <MainMenu+0x2b4>)
 8001a66:	015b      	lsls	r3, r3, #5
 8001a68:	4413      	add	r3, r2
 8001a6a:	3304      	adds	r3, #4
 8001a6c:	881d      	ldrh	r5, [r3, #0]
 8001a6e:	8bbb      	ldrh	r3, [r7, #28]
							s_tMainIcons[i].Height, s_tMainIcons[i].Width))
 8001a70:	4a62      	ldr	r2, [pc, #392]	; (8001bfc <MainMenu+0x2b4>)
 8001a72:	015b      	lsls	r3, r3, #5
 8001a74:	4413      	add	r3, r2
 8001a76:	3306      	adds	r3, #6
 8001a78:	881b      	ldrh	r3, [r3, #0]
						if (TOUCH_InRect(tpX, tpY, s_tMainIcons[i].Left, s_tMainIcons[i].Top,
 8001a7a:	8bba      	ldrh	r2, [r7, #28]
							s_tMainIcons[i].Height, s_tMainIcons[i].Width))
 8001a7c:	4e5f      	ldr	r6, [pc, #380]	; (8001bfc <MainMenu+0x2b4>)
 8001a7e:	0152      	lsls	r2, r2, #5
 8001a80:	4432      	add	r2, r6
 8001a82:	3208      	adds	r2, #8
 8001a84:	8812      	ldrh	r2, [r2, #0]
						if (TOUCH_InRect(tpX, tpY, s_tMainIcons[i].Left, s_tMainIcons[i].Top,
 8001a86:	9201      	str	r2, [sp, #4]
 8001a88:	9300      	str	r3, [sp, #0]
 8001a8a:	462b      	mov	r3, r5
 8001a8c:	4622      	mov	r2, r4
 8001a8e:	f004 fe8d 	bl	80067ac <TOUCH_InRect>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d009      	beq.n	8001aac <MainMenu+0x164>
							LCD_DrawIcon32(&s_tMainIcons[i], &tIconFont, 1);
 8001a98:	8bbb      	ldrh	r3, [r7, #28]
 8001a9a:	015b      	lsls	r3, r3, #5
 8001a9c:	4a57      	ldr	r2, [pc, #348]	; (8001bfc <MainMenu+0x2b4>)
 8001a9e:	4413      	add	r3, r2
 8001aa0:	f107 0108 	add.w	r1, r7, #8
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f004 f948 	bl	8005d3c <LCD_DrawIcon32>
					for (i = 0; i < ICONS_COUNT; i++)
 8001aac:	8bbb      	ldrh	r3, [r7, #28]
 8001aae:	3301      	adds	r3, #1
 8001ab0:	83bb      	strh	r3, [r7, #28]
 8001ab2:	8bbb      	ldrh	r3, [r7, #28]
 8001ab4:	2b11      	cmp	r3, #17
 8001ab6:	d9c8      	bls.n	8001a4a <MainMenu+0x102>
				break;
 8001ab8:	e04a      	b.n	8001b50 <MainMenu+0x208>
					for (i = 0; i < ICONS_COUNT; i++)
 8001aba:	2300      	movs	r3, #0
 8001abc:	83bb      	strh	r3, [r7, #28]
 8001abe:	e02d      	b.n	8001b1c <MainMenu+0x1d4>
						if (TOUCH_InRect(tpX, tpY, s_tMainIcons[i].Left, s_tMainIcons[i].Top,
 8001ac0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ac4:	b298      	uxth	r0, r3
 8001ac6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001aca:	b299      	uxth	r1, r3
 8001acc:	8bbb      	ldrh	r3, [r7, #28]
 8001ace:	4a4b      	ldr	r2, [pc, #300]	; (8001bfc <MainMenu+0x2b4>)
 8001ad0:	015b      	lsls	r3, r3, #5
 8001ad2:	4413      	add	r3, r2
 8001ad4:	3302      	adds	r3, #2
 8001ad6:	881c      	ldrh	r4, [r3, #0]
 8001ad8:	8bbb      	ldrh	r3, [r7, #28]
 8001ada:	4a48      	ldr	r2, [pc, #288]	; (8001bfc <MainMenu+0x2b4>)
 8001adc:	015b      	lsls	r3, r3, #5
 8001ade:	4413      	add	r3, r2
 8001ae0:	3304      	adds	r3, #4
 8001ae2:	881d      	ldrh	r5, [r3, #0]
 8001ae4:	8bbb      	ldrh	r3, [r7, #28]
							s_tMainIcons[i].Height, s_tMainIcons[i].Width))
 8001ae6:	4a45      	ldr	r2, [pc, #276]	; (8001bfc <MainMenu+0x2b4>)
 8001ae8:	015b      	lsls	r3, r3, #5
 8001aea:	4413      	add	r3, r2
 8001aec:	3306      	adds	r3, #6
 8001aee:	881b      	ldrh	r3, [r3, #0]
						if (TOUCH_InRect(tpX, tpY, s_tMainIcons[i].Left, s_tMainIcons[i].Top,
 8001af0:	8bba      	ldrh	r2, [r7, #28]
							s_tMainIcons[i].Height, s_tMainIcons[i].Width))
 8001af2:	4e42      	ldr	r6, [pc, #264]	; (8001bfc <MainMenu+0x2b4>)
 8001af4:	0152      	lsls	r2, r2, #5
 8001af6:	4432      	add	r2, r6
 8001af8:	3208      	adds	r2, #8
 8001afa:	8812      	ldrh	r2, [r2, #0]
						if (TOUCH_InRect(tpX, tpY, s_tMainIcons[i].Left, s_tMainIcons[i].Top,
 8001afc:	9201      	str	r2, [sp, #4]
 8001afe:	9300      	str	r3, [sp, #0]
 8001b00:	462b      	mov	r3, r5
 8001b02:	4622      	mov	r2, r4
 8001b04:	f004 fe52 	bl	80067ac <TOUCH_InRect>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d003      	beq.n	8001b16 <MainMenu+0x1ce>
							return s_RetStatus[i];
 8001b0e:	8bbb      	ldrh	r3, [r7, #28]
 8001b10:	4a3b      	ldr	r2, [pc, #236]	; (8001c00 <MainMenu+0x2b8>)
 8001b12:	5cd3      	ldrb	r3, [r2, r3]
 8001b14:	e098      	b.n	8001c48 <MainMenu+0x300>
					for (i = 0; i < ICONS_COUNT; i++)
 8001b16:	8bbb      	ldrh	r3, [r7, #28]
 8001b18:	3301      	adds	r3, #1
 8001b1a:	83bb      	strh	r3, [r7, #28]
 8001b1c:	8bbb      	ldrh	r3, [r7, #28]
 8001b1e:	2b11      	cmp	r3, #17
 8001b20:	d9ce      	bls.n	8001ac0 <MainMenu+0x178>
						for (i = 0; i < ICONS_COUNT; i++)
 8001b22:	2300      	movs	r3, #0
 8001b24:	83bb      	strh	r3, [r7, #28]
 8001b26:	e00c      	b.n	8001b42 <MainMenu+0x1fa>
							LCD_DrawIcon32(&s_tMainIcons[i], &tIconFont, 0);
 8001b28:	8bbb      	ldrh	r3, [r7, #28]
 8001b2a:	015b      	lsls	r3, r3, #5
 8001b2c:	4a33      	ldr	r2, [pc, #204]	; (8001bfc <MainMenu+0x2b4>)
 8001b2e:	4413      	add	r3, r2
 8001b30:	f107 0108 	add.w	r1, r7, #8
 8001b34:	2200      	movs	r2, #0
 8001b36:	4618      	mov	r0, r3
 8001b38:	f004 f900 	bl	8005d3c <LCD_DrawIcon32>
						for (i = 0; i < ICONS_COUNT; i++)
 8001b3c:	8bbb      	ldrh	r3, [r7, #28]
 8001b3e:	3301      	adds	r3, #1
 8001b40:	83bb      	strh	r3, [r7, #28]
 8001b42:	8bbb      	ldrh	r3, [r7, #28]
 8001b44:	2b11      	cmp	r3, #17
 8001b46:	d9ef      	bls.n	8001b28 <MainMenu+0x1e0>
					break;
 8001b48:	e002      	b.n	8001b50 <MainMenu+0x208>
					break;
 8001b4a:	bf00      	nop
 8001b4c:	e000      	b.n	8001b50 <MainMenu+0x208>
					break;
 8001b4e:	bf00      	nop
			}
		}
#endif
		bsp_KeyScan();  // 키 상태 스캔
 8001b50:	f002 ff70 	bl	8004a34 <bsp_KeyScan>
		ucKeyCode = bsp_GetKey();	/* ¶ÁÈ¡¼üÖµ, ÎÞ¼ü°´ÏÂÊ±·µ»Ø KEY_NONE = 0 */
 8001b54:	f002 ffac 	bl	8004ab0 <bsp_GetKey>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	76bb      	strb	r3, [r7, #26]

		if (ucKeyCode != KEY_NONE)
 8001b5c:	7ebb      	ldrb	r3, [r7, #26]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	f43f af3e 	beq.w	80019e0 <MainMenu+0x98>
		{
			switch (ucKeyCode)
 8001b64:	7ebb      	ldrb	r3, [r7, #26]
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d003      	beq.n	8001b72 <MainMenu+0x22a>
 8001b6a:	2b07      	cmp	r3, #7
 8001b6c:	d16a      	bne.n	8001c44 <MainMenu+0x2fc>
			{
				case  KEY_DOWN_K3:	/* K3¼ü */
					//bsp_LedOn(1);
					return MS_CALIBRATION;	/* ½øÈë´¥Ãþ½çÃæ */
 8001b6e:	2313      	movs	r3, #19
 8001b70:	e06a      	b.n	8001c48 <MainMenu+0x300>
					//break;
				case  KEY_DOWN_K1:	/* K1¼ü */
					if (++s_ColorIndex >= STYLE_COUNT)
 8001b72:	4b1c      	ldr	r3, [pc, #112]	; (8001be4 <MainMenu+0x29c>)
 8001b74:	881b      	ldrh	r3, [r3, #0]
 8001b76:	3301      	adds	r3, #1
 8001b78:	b29a      	uxth	r2, r3
 8001b7a:	4b1a      	ldr	r3, [pc, #104]	; (8001be4 <MainMenu+0x29c>)
 8001b7c:	801a      	strh	r2, [r3, #0]
 8001b7e:	4b19      	ldr	r3, [pc, #100]	; (8001be4 <MainMenu+0x29c>)
 8001b80:	881b      	ldrh	r3, [r3, #0]
 8001b82:	2b06      	cmp	r3, #6
 8001b84:	d902      	bls.n	8001b8c <MainMenu+0x244>
					{
						s_ColorIndex = 0;
 8001b86:	4b17      	ldr	r3, [pc, #92]	; (8001be4 <MainMenu+0x29c>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	801a      	strh	r2, [r3, #0]
					}
					{
						DispBackground();
 8001b8c:	f000 f86a 	bl	8001c64 <DispBackground>
						{
							tFont.FontCode = FC_ST_16;	/* ×ÖÌå´úÂë 16µãÕó */
 8001b90:	2300      	movs	r3, #0
 8001b92:	823b      	strh	r3, [r7, #16]
							tFont.FrontColor = MAIN_TEXT_COLOR;	/* ×ÖÌåÑÕÉ« */
 8001b94:	4b12      	ldr	r3, [pc, #72]	; (8001be0 <MainMenu+0x298>)
 8001b96:	881b      	ldrh	r3, [r3, #0]
 8001b98:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8001b9c:	d106      	bne.n	8001bac <MainMenu+0x264>
 8001b9e:	4b11      	ldr	r3, [pc, #68]	; (8001be4 <MainMenu+0x29c>)
 8001ba0:	881b      	ldrh	r3, [r3, #0]
 8001ba2:	4a11      	ldr	r2, [pc, #68]	; (8001be8 <MainMenu+0x2a0>)
 8001ba4:	00db      	lsls	r3, r3, #3
 8001ba6:	4413      	add	r3, r2
 8001ba8:	88db      	ldrh	r3, [r3, #6]
 8001baa:	e005      	b.n	8001bb8 <MainMenu+0x270>
 8001bac:	4b0d      	ldr	r3, [pc, #52]	; (8001be4 <MainMenu+0x29c>)
 8001bae:	881b      	ldrh	r3, [r3, #0]
 8001bb0:	4a0e      	ldr	r2, [pc, #56]	; (8001bec <MainMenu+0x2a4>)
 8001bb2:	00db      	lsls	r3, r3, #3
 8001bb4:	4413      	add	r3, r2
 8001bb6:	88db      	ldrh	r3, [r3, #6]
 8001bb8:	827b      	strh	r3, [r7, #18]
							tFont.BackColor = CL_MASK;	/* ÎÄ×Ö±³¾°ÑÕÉ« */
 8001bba:	f649 1399 	movw	r3, #39321	; 0x9999
 8001bbe:	82bb      	strh	r3, [r7, #20]
							tFont.Space = 0;				/* ÎÄ×Ö¼ä¾à£¬µ¥Î» = ÏñËØ */
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	82fb      	strh	r3, [r7, #22]

							tIconFont.FontCode = FC_ST_12;		/* ×ÖÌå´úÂë 16µãÕó */
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	813b      	strh	r3, [r7, #8]
							tIconFont.FrontColor = MAIN_TEXT_COLOR;	/* ×ÖÌåÑÕÉ« */
 8001bc8:	4b05      	ldr	r3, [pc, #20]	; (8001be0 <MainMenu+0x298>)
 8001bca:	881b      	ldrh	r3, [r3, #0]
 8001bcc:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8001bd0:	d118      	bne.n	8001c04 <MainMenu+0x2bc>
 8001bd2:	4b04      	ldr	r3, [pc, #16]	; (8001be4 <MainMenu+0x29c>)
 8001bd4:	881b      	ldrh	r3, [r3, #0]
 8001bd6:	4a04      	ldr	r2, [pc, #16]	; (8001be8 <MainMenu+0x2a0>)
 8001bd8:	00db      	lsls	r3, r3, #3
 8001bda:	4413      	add	r3, r2
 8001bdc:	88db      	ldrh	r3, [r3, #6]
 8001bde:	e017      	b.n	8001c10 <MainMenu+0x2c8>
 8001be0:	2000000c 	.word	0x2000000c
 8001be4:	200001fc 	.word	0x200001fc
 8001be8:	0802caa4 	.word	0x0802caa4
 8001bec:	0802cadc 	.word	0x0802cadc
 8001bf0:	0800b68c 	.word	0x0800b68c
 8001bf4:	2000000a 	.word	0x2000000a
 8001bf8:	0800b69c 	.word	0x0800b69c
 8001bfc:	0802c850 	.word	0x0802c850
 8001c00:	0802ca90 	.word	0x0802ca90
 8001c04:	4b12      	ldr	r3, [pc, #72]	; (8001c50 <MainMenu+0x308>)
 8001c06:	881b      	ldrh	r3, [r3, #0]
 8001c08:	4a12      	ldr	r2, [pc, #72]	; (8001c54 <MainMenu+0x30c>)
 8001c0a:	00db      	lsls	r3, r3, #3
 8001c0c:	4413      	add	r3, r2
 8001c0e:	88db      	ldrh	r3, [r3, #6]
 8001c10:	817b      	strh	r3, [r7, #10]
							tIconFont.BackColor = CL_MASK;		/* ÎÄ×Ö±³¾°ÑÕÉ« */
 8001c12:	f649 1399 	movw	r3, #39321	; 0x9999
 8001c16:	81bb      	strh	r3, [r7, #12]
							tIconFont.Space = 1;				/* ÎÄ×Ö¼ä¾à£¬µ¥Î» = ÏñËØ */
 8001c18:	2301      	movs	r3, #1
 8001c1a:	81fb      	strh	r3, [r7, #14]
						}
						LCD_DispStr(5, 3, VER_INFO, &tFont);			/* ÔÚ(8,3)×ø±ê´¦ÏÔÊ¾Ò»´®ºº×Ö */
 8001c1c:	f107 0310 	add.w	r3, r7, #16
 8001c20:	4a0d      	ldr	r2, [pc, #52]	; (8001c58 <MainMenu+0x310>)
 8001c22:	2103      	movs	r1, #3
 8001c24:	2005      	movs	r0, #5
 8001c26:	f003 ff4b 	bl	8005ac0 <LCD_DispStr>
						LCD_DispStr(5, g_LcdHeight - 13, KEY_INFO, &tIconFont);			/* ÔÚ(8,3)×ø±ê´¦ÏÔÊ¾Ò»´®ºº×Ö */
 8001c2a:	4b0c      	ldr	r3, [pc, #48]	; (8001c5c <MainMenu+0x314>)
 8001c2c:	881b      	ldrh	r3, [r3, #0]
 8001c2e:	3b0d      	subs	r3, #13
 8001c30:	b299      	uxth	r1, r3
 8001c32:	f107 0308 	add.w	r3, r7, #8
 8001c36:	4a0a      	ldr	r2, [pc, #40]	; (8001c60 <MainMenu+0x318>)
 8001c38:	2005      	movs	r0, #5
 8001c3a:	f003 ff41 	bl	8005ac0 <LCD_DispStr>
					}
					fRefresh = 1;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	77fb      	strb	r3, [r7, #31]
					break;
 8001c42:	e000      	b.n	8001c46 <MainMenu+0x2fe>
				default:
					break;
 8001c44:	bf00      	nop
		bsp_Idle();
 8001c46:	e6cb      	b.n	80019e0 <MainMenu+0x98>
			}
		}
	}
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3724      	adds	r7, #36	; 0x24
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c50:	200001fc 	.word	0x200001fc
 8001c54:	0802cadc 	.word	0x0802cadc
 8001c58:	0800b68c 	.word	0x0800b68c
 8001c5c:	2000000a 	.word	0x2000000a
 8001c60:	0800b69c 	.word	0x0800b69c

08001c64 <DispBackground>:
*********************************************************************************************************
*	Func name: DispBackground
*********************************************************************************************************
*/
static void DispBackground(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af02      	add	r7, sp, #8
	if (g_LcdWidth == 480)	/* 480 x 272 */
 8001c6a:	4b26      	ldr	r3, [pc, #152]	; (8001d04 <DispBackground+0xa0>)
 8001c6c:	881b      	ldrh	r3, [r3, #0]
 8001c6e:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8001c72:	d122      	bne.n	8001cba <DispBackground+0x56>
	{
		if (s_UI480[s_ColorIndex].pBmp == 0)
 8001c74:	4b24      	ldr	r3, [pc, #144]	; (8001d08 <DispBackground+0xa4>)
 8001c76:	881b      	ldrh	r3, [r3, #0]
 8001c78:	461a      	mov	r2, r3
 8001c7a:	4b24      	ldr	r3, [pc, #144]	; (8001d0c <DispBackground+0xa8>)
 8001c7c:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d109      	bne.n	8001c98 <DispBackground+0x34>
		{
			LCD_ClrScr(s_UI480[s_ColorIndex].BackColor);  	/* ÇåÆÁ, Ìî³äµ¥É« */
 8001c84:	4b20      	ldr	r3, [pc, #128]	; (8001d08 <DispBackground+0xa4>)
 8001c86:	881b      	ldrh	r3, [r3, #0]
 8001c88:	4a20      	ldr	r2, [pc, #128]	; (8001d0c <DispBackground+0xa8>)
 8001c8a:	00db      	lsls	r3, r3, #3
 8001c8c:	4413      	add	r3, r2
 8001c8e:	889b      	ldrh	r3, [r3, #4]
 8001c90:	4618      	mov	r0, r3
 8001c92:	f003 fec7 	bl	8005a24 <LCD_ClrScr>
		else
		{
			LCD_DrawBMP(0, 0, g_LcdHeight, g_LcdWidth, s_UI800[s_ColorIndex].pBmp);
		}
	}	
}
 8001c96:	e032      	b.n	8001cfe <DispBackground+0x9a>
			LCD_DrawBMP(0, 0, g_LcdHeight, g_LcdWidth, s_UI480[s_ColorIndex].pBmp);
 8001c98:	4b1d      	ldr	r3, [pc, #116]	; (8001d10 <DispBackground+0xac>)
 8001c9a:	881a      	ldrh	r2, [r3, #0]
 8001c9c:	4b19      	ldr	r3, [pc, #100]	; (8001d04 <DispBackground+0xa0>)
 8001c9e:	8819      	ldrh	r1, [r3, #0]
 8001ca0:	4b19      	ldr	r3, [pc, #100]	; (8001d08 <DispBackground+0xa4>)
 8001ca2:	881b      	ldrh	r3, [r3, #0]
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	4b19      	ldr	r3, [pc, #100]	; (8001d0c <DispBackground+0xa8>)
 8001ca8:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
 8001cac:	9300      	str	r3, [sp, #0]
 8001cae:	460b      	mov	r3, r1
 8001cb0:	2100      	movs	r1, #0
 8001cb2:	2000      	movs	r0, #0
 8001cb4:	f003 fee2 	bl	8005a7c <LCD_DrawBMP>
}
 8001cb8:	e021      	b.n	8001cfe <DispBackground+0x9a>
		if (s_UI800[s_ColorIndex].pBmp == 0)
 8001cba:	4b13      	ldr	r3, [pc, #76]	; (8001d08 <DispBackground+0xa4>)
 8001cbc:	881b      	ldrh	r3, [r3, #0]
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	4b14      	ldr	r3, [pc, #80]	; (8001d14 <DispBackground+0xb0>)
 8001cc2:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d109      	bne.n	8001cde <DispBackground+0x7a>
			LCD_ClrScr(s_UI800[s_ColorIndex].BackColor);  	/* ÇåÆÁ, Ìî³äµ¥É« */
 8001cca:	4b0f      	ldr	r3, [pc, #60]	; (8001d08 <DispBackground+0xa4>)
 8001ccc:	881b      	ldrh	r3, [r3, #0]
 8001cce:	4a11      	ldr	r2, [pc, #68]	; (8001d14 <DispBackground+0xb0>)
 8001cd0:	00db      	lsls	r3, r3, #3
 8001cd2:	4413      	add	r3, r2
 8001cd4:	889b      	ldrh	r3, [r3, #4]
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f003 fea4 	bl	8005a24 <LCD_ClrScr>
}
 8001cdc:	e00f      	b.n	8001cfe <DispBackground+0x9a>
			LCD_DrawBMP(0, 0, g_LcdHeight, g_LcdWidth, s_UI800[s_ColorIndex].pBmp);
 8001cde:	4b0c      	ldr	r3, [pc, #48]	; (8001d10 <DispBackground+0xac>)
 8001ce0:	881a      	ldrh	r2, [r3, #0]
 8001ce2:	4b08      	ldr	r3, [pc, #32]	; (8001d04 <DispBackground+0xa0>)
 8001ce4:	8819      	ldrh	r1, [r3, #0]
 8001ce6:	4b08      	ldr	r3, [pc, #32]	; (8001d08 <DispBackground+0xa4>)
 8001ce8:	881b      	ldrh	r3, [r3, #0]
 8001cea:	4618      	mov	r0, r3
 8001cec:	4b09      	ldr	r3, [pc, #36]	; (8001d14 <DispBackground+0xb0>)
 8001cee:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
 8001cf2:	9300      	str	r3, [sp, #0]
 8001cf4:	460b      	mov	r3, r1
 8001cf6:	2100      	movs	r1, #0
 8001cf8:	2000      	movs	r0, #0
 8001cfa:	f003 febf 	bl	8005a7c <LCD_DrawBMP>
}
 8001cfe:	bf00      	nop
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	2000000c 	.word	0x2000000c
 8001d08:	200001fc 	.word	0x200001fc
 8001d0c:	0802caa4 	.word	0x0802caa4
 8001d10:	2000000a 	.word	0x2000000a
 8001d14:	0802cadc 	.word	0x0802cadc

08001d18 <LoadParam>:
#include "param.h"

PARAM_T g_tParam;

void LoadParam(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
	bsp_ReadCpuFlash(PARAM_ADDR, (uint8_t *)&g_tParam, sizeof(PARAM_T));
#endif

#ifdef PARAM_SAVE_TO_EEPROM
	/* ¶ÁÈ¡EEPROMÖÐµÄ²ÎÊý */
	ee_ReadBytes((uint8_t *)&g_tParam, PARAM_ADDR, sizeof(PARAM_T));
 8001d1c:	2238      	movs	r2, #56	; 0x38
 8001d1e:	2100      	movs	r1, #0
 8001d20:	4841      	ldr	r0, [pc, #260]	; (8001e28 <LoadParam+0x110>)
 8001d22:	f002 f80d 	bl	8003d40 <ee_ReadBytes>
#endif

	/* Ìî³äÈ±Ê¡²ÎÊý */
	if (g_tParam.ParamVer != PARAM_VER)
 8001d26:	4b40      	ldr	r3, [pc, #256]	; (8001e28 <LoadParam+0x110>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 8001d2e:	d078      	beq.n	8001e22 <LoadParam+0x10a>
	{
		g_tParam.ParamVer = PARAM_VER;
 8001d30:	4b3d      	ldr	r3, [pc, #244]	; (8001e28 <LoadParam+0x110>)
 8001d32:	f44f 7281 	mov.w	r2, #258	; 0x102
 8001d36:	601a      	str	r2, [r3, #0]

		g_tParam.ucBackLight = 200;
 8001d38:	4b3b      	ldr	r3, [pc, #236]	; (8001e28 <LoadParam+0x110>)
 8001d3a:	22c8      	movs	r2, #200	; 0xc8
 8001d3c:	711a      	strb	r2, [r3, #4]

		/* uip  ±¾»úIPµØÖ· */
		g_tParam.uip_ip[0] = 192;
 8001d3e:	4b3a      	ldr	r3, [pc, #232]	; (8001e28 <LoadParam+0x110>)
 8001d40:	22c0      	movs	r2, #192	; 0xc0
 8001d42:	761a      	strb	r2, [r3, #24]
		g_tParam.uip_ip[1] = 168;
 8001d44:	4b38      	ldr	r3, [pc, #224]	; (8001e28 <LoadParam+0x110>)
 8001d46:	22a8      	movs	r2, #168	; 0xa8
 8001d48:	765a      	strb	r2, [r3, #25]
		g_tParam.uip_ip[2] = 1;
 8001d4a:	4b37      	ldr	r3, [pc, #220]	; (8001e28 <LoadParam+0x110>)
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	769a      	strb	r2, [r3, #26]
		g_tParam.uip_ip[3] = 11;
 8001d50:	4b35      	ldr	r3, [pc, #212]	; (8001e28 <LoadParam+0x110>)
 8001d52:	220b      	movs	r2, #11
 8001d54:	76da      	strb	r2, [r3, #27]

		/* uip  ×ÓÍøÑÚÂë */
		g_tParam.uip_net_mask[0] = 255;
 8001d56:	4b34      	ldr	r3, [pc, #208]	; (8001e28 <LoadParam+0x110>)
 8001d58:	22ff      	movs	r2, #255	; 0xff
 8001d5a:	771a      	strb	r2, [r3, #28]
		g_tParam.uip_net_mask[1] = 255;
 8001d5c:	4b32      	ldr	r3, [pc, #200]	; (8001e28 <LoadParam+0x110>)
 8001d5e:	22ff      	movs	r2, #255	; 0xff
 8001d60:	775a      	strb	r2, [r3, #29]
		g_tParam.uip_net_mask[2] = 255;
 8001d62:	4b31      	ldr	r3, [pc, #196]	; (8001e28 <LoadParam+0x110>)
 8001d64:	22ff      	movs	r2, #255	; 0xff
 8001d66:	779a      	strb	r2, [r3, #30]
		g_tParam.uip_net_mask[3] = 0;
 8001d68:	4b2f      	ldr	r3, [pc, #188]	; (8001e28 <LoadParam+0x110>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	77da      	strb	r2, [r3, #31]

		/* uip  Ä¬ÈÏÍø¹Ø */
		g_tParam.uip_net_gate[0] = 192;
 8001d6e:	4b2e      	ldr	r3, [pc, #184]	; (8001e28 <LoadParam+0x110>)
 8001d70:	22c0      	movs	r2, #192	; 0xc0
 8001d72:	f883 2020 	strb.w	r2, [r3, #32]
		g_tParam.uip_net_gate[1] = 168;
 8001d76:	4b2c      	ldr	r3, [pc, #176]	; (8001e28 <LoadParam+0x110>)
 8001d78:	22a8      	movs	r2, #168	; 0xa8
 8001d7a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		g_tParam.uip_net_gate[2] = 1;
 8001d7e:	4b2a      	ldr	r3, [pc, #168]	; (8001e28 <LoadParam+0x110>)
 8001d80:	2201      	movs	r2, #1
 8001d82:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		g_tParam.uip_net_gate[3] = 1;
 8001d86:	4b28      	ldr	r3, [pc, #160]	; (8001e28 <LoadParam+0x110>)
 8001d88:	2201      	movs	r2, #1
 8001d8a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

		/* lwip  ±¾»úIPµØÖ· */
		g_tParam.lwip_ip[0] = 192;
 8001d8e:	4b26      	ldr	r3, [pc, #152]	; (8001e28 <LoadParam+0x110>)
 8001d90:	22c0      	movs	r2, #192	; 0xc0
 8001d92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		g_tParam.lwip_ip[1] = 168;
 8001d96:	4b24      	ldr	r3, [pc, #144]	; (8001e28 <LoadParam+0x110>)
 8001d98:	22a8      	movs	r2, #168	; 0xa8
 8001d9a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		g_tParam.lwip_ip[2] = 1;
 8001d9e:	4b22      	ldr	r3, [pc, #136]	; (8001e28 <LoadParam+0x110>)
 8001da0:	2201      	movs	r2, #1
 8001da2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		g_tParam.lwip_ip[3] = 12;
 8001da6:	4b20      	ldr	r3, [pc, #128]	; (8001e28 <LoadParam+0x110>)
 8001da8:	220c      	movs	r2, #12
 8001daa:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

		/* lwip  ×ÓÍøÑÚÂë */
		g_tParam.lwip_net_mask[0] = 255;
 8001dae:	4b1e      	ldr	r3, [pc, #120]	; (8001e28 <LoadParam+0x110>)
 8001db0:	22ff      	movs	r2, #255	; 0xff
 8001db2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		g_tParam.lwip_net_mask[1] = 255;
 8001db6:	4b1c      	ldr	r3, [pc, #112]	; (8001e28 <LoadParam+0x110>)
 8001db8:	22ff      	movs	r2, #255	; 0xff
 8001dba:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		g_tParam.lwip_net_mask[2] = 255;
 8001dbe:	4b1a      	ldr	r3, [pc, #104]	; (8001e28 <LoadParam+0x110>)
 8001dc0:	22ff      	movs	r2, #255	; 0xff
 8001dc2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		g_tParam.lwip_net_mask[3] = 0;
 8001dc6:	4b18      	ldr	r3, [pc, #96]	; (8001e28 <LoadParam+0x110>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

		/* lwip  Ä¬ÈÏÍø¹Ø */
		g_tParam.lwip_net_gate[0] = 192;
 8001dce:	4b16      	ldr	r3, [pc, #88]	; (8001e28 <LoadParam+0x110>)
 8001dd0:	22c0      	movs	r2, #192	; 0xc0
 8001dd2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		g_tParam.lwip_net_gate[1] = 168;
 8001dd6:	4b14      	ldr	r3, [pc, #80]	; (8001e28 <LoadParam+0x110>)
 8001dd8:	22a8      	movs	r2, #168	; 0xa8
 8001dda:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		g_tParam.lwip_net_gate[2] = 1;
 8001dde:	4b12      	ldr	r3, [pc, #72]	; (8001e28 <LoadParam+0x110>)
 8001de0:	2201      	movs	r2, #1
 8001de2:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
		g_tParam.lwip_net_gate[3] = 1;
 8001de6:	4b10      	ldr	r3, [pc, #64]	; (8001e28 <LoadParam+0x110>)
 8001de8:	2201      	movs	r2, #1
 8001dea:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

		g_tParam.ucRadioMode     = 0;				/* 1 = AM »ò 0 = FM */
 8001dee:	4b0e      	ldr	r3, [pc, #56]	; (8001e28 <LoadParam+0x110>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		g_tParam.ucRadioListType = 0;				/* µçÌ¨ÁÐ±íÀàÐÍ¡£0ÎäººµØÇø»ò1È«¹ú */
 8001df6:	4b0c      	ldr	r3, [pc, #48]	; (8001e28 <LoadParam+0x110>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
		g_tParam.ucIndexFM       = 0;				/* µ±Ç°FMµçÌ¨Ë÷Òý */
 8001dfe:	4b0a      	ldr	r3, [pc, #40]	; (8001e28 <LoadParam+0x110>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
		g_tParam.ucIndexAM       = 0;				/* µ±Ç°µçÌ¨Ë÷Òý */
 8001e06:	4b08      	ldr	r3, [pc, #32]	; (8001e28 <LoadParam+0x110>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
		g_tParam.ucRadioVolume   = 36;				/* ÒôÁ¿ */
 8001e0e:	4b06      	ldr	r3, [pc, #24]	; (8001e28 <LoadParam+0x110>)
 8001e10:	2224      	movs	r2, #36	; 0x24
 8001e12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		g_tParam.ucSpkOutEn      = 1;				/* ÑïÉùÆ÷Êä³öÊ¹ÄÜ */
 8001e16:	4b04      	ldr	r3, [pc, #16]	; (8001e28 <LoadParam+0x110>)
 8001e18:	2201      	movs	r2, #1
 8001e1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

		SaveParam();							/* ½«ÐÂ²ÎÊýÐ´ÈëFlash */
 8001e1e:	f000 f805 	bl	8001e2c <SaveParam>
	}
}
 8001e22:	bf00      	nop
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	20000200 	.word	0x20000200

08001e2c <SaveParam>:

void SaveParam(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
#ifdef PARAM_SAVE_TO_FLASH
	bsp_WriteCpuFlash(PARAM_ADDR, (unsigned char *)&g_tParam, sizeof(PARAM_T));
#endif

#ifdef PARAM_SAVE_TO_EEPROM
	ee_WriteBytes((uint8_t *)&g_tParam, PARAM_ADDR, sizeof(PARAM_T));
 8001e30:	2238      	movs	r2, #56	; 0x38
 8001e32:	2100      	movs	r1, #0
 8001e34:	4802      	ldr	r0, [pc, #8]	; (8001e40 <SaveParam+0x14>)
 8001e36:	f001 ffe2 	bl	8003dfe <ee_WriteBytes>
#endif
}
 8001e3a:	bf00      	nop
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	20000200 	.word	0x20000200

08001e44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	607b      	str	r3, [r7, #4]
 8001e4e:	4b10      	ldr	r3, [pc, #64]	; (8001e90 <HAL_MspInit+0x4c>)
 8001e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e52:	4a0f      	ldr	r2, [pc, #60]	; (8001e90 <HAL_MspInit+0x4c>)
 8001e54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e58:	6453      	str	r3, [r2, #68]	; 0x44
 8001e5a:	4b0d      	ldr	r3, [pc, #52]	; (8001e90 <HAL_MspInit+0x4c>)
 8001e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e62:	607b      	str	r3, [r7, #4]
 8001e64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e66:	2300      	movs	r3, #0
 8001e68:	603b      	str	r3, [r7, #0]
 8001e6a:	4b09      	ldr	r3, [pc, #36]	; (8001e90 <HAL_MspInit+0x4c>)
 8001e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6e:	4a08      	ldr	r2, [pc, #32]	; (8001e90 <HAL_MspInit+0x4c>)
 8001e70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e74:	6413      	str	r3, [r2, #64]	; 0x40
 8001e76:	4b06      	ldr	r3, [pc, #24]	; (8001e90 <HAL_MspInit+0x4c>)
 8001e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e7e:	603b      	str	r3, [r7, #0]
 8001e80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e82:	bf00      	nop
 8001e84:	370c      	adds	r7, #12
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	40023800 	.word	0x40023800

08001e94 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d101      	bne.n	8001ea6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e07b      	b.n	8001f9e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d108      	bne.n	8001ec0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001eb6:	d009      	beq.n	8001ecc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	61da      	str	r2, [r3, #28]
 8001ebe:	e005      	b.n	8001ecc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d106      	bne.n	8001eec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f000 f85d 	bl	8001fa6 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2202      	movs	r2, #2
 8001ef0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f02:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001f14:	431a      	orrs	r2, r3
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	68db      	ldr	r3, [r3, #12]
 8001f1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f1e:	431a      	orrs	r2, r3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	691b      	ldr	r3, [r3, #16]
 8001f24:	f003 0302 	and.w	r3, r3, #2
 8001f28:	431a      	orrs	r2, r3
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	695b      	ldr	r3, [r3, #20]
 8001f2e:	f003 0301 	and.w	r3, r3, #1
 8001f32:	431a      	orrs	r2, r3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	699b      	ldr	r3, [r3, #24]
 8001f38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f3c:	431a      	orrs	r2, r3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	69db      	ldr	r3, [r3, #28]
 8001f42:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001f46:	431a      	orrs	r2, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6a1b      	ldr	r3, [r3, #32]
 8001f4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f50:	ea42 0103 	orr.w	r1, r2, r3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f58:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	430a      	orrs	r2, r1
 8001f62:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	699b      	ldr	r3, [r3, #24]
 8001f68:	0c1b      	lsrs	r3, r3, #16
 8001f6a:	f003 0104 	and.w	r1, r3, #4
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f72:	f003 0210 	and.w	r2, r3, #16
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	430a      	orrs	r2, r1
 8001f7c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	69da      	ldr	r2, [r3, #28]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f8c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2200      	movs	r2, #0
 8001f92:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2201      	movs	r2, #1
 8001f98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001f9c:	2300      	movs	r3, #0
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3708      	adds	r7, #8
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}

08001fa6 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8001fa6:	b480      	push	{r7}
 8001fa8:	b083      	sub	sp, #12
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8001fae:	bf00      	nop
 8001fb0:	370c      	adds	r7, #12
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr

08001fba <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001fba:	b580      	push	{r7, lr}
 8001fbc:	b08c      	sub	sp, #48	; 0x30
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	60f8      	str	r0, [r7, #12]
 8001fc2:	60b9      	str	r1, [r7, #8]
 8001fc4:	607a      	str	r2, [r7, #4]
 8001fc6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d101      	bne.n	8001fe0 <HAL_SPI_TransmitReceive+0x26>
 8001fdc:	2302      	movs	r3, #2
 8001fde:	e18a      	b.n	80022f6 <HAL_SPI_TransmitReceive+0x33c>
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001fe8:	f005 fb86 	bl	80076f8 <HAL_GetTick>
 8001fec:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001ff4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8001ffe:	887b      	ldrh	r3, [r7, #2]
 8002000:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002002:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002006:	2b01      	cmp	r3, #1
 8002008:	d00f      	beq.n	800202a <HAL_SPI_TransmitReceive+0x70>
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002010:	d107      	bne.n	8002022 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d103      	bne.n	8002022 <HAL_SPI_TransmitReceive+0x68>
 800201a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800201e:	2b04      	cmp	r3, #4
 8002020:	d003      	beq.n	800202a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002022:	2302      	movs	r3, #2
 8002024:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002028:	e15b      	b.n	80022e2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d005      	beq.n	800203c <HAL_SPI_TransmitReceive+0x82>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d002      	beq.n	800203c <HAL_SPI_TransmitReceive+0x82>
 8002036:	887b      	ldrh	r3, [r7, #2]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d103      	bne.n	8002044 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002042:	e14e      	b.n	80022e2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800204a:	b2db      	uxtb	r3, r3
 800204c:	2b04      	cmp	r3, #4
 800204e:	d003      	beq.n	8002058 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2205      	movs	r2, #5
 8002054:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	2200      	movs	r2, #0
 800205c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	687a      	ldr	r2, [r7, #4]
 8002062:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	887a      	ldrh	r2, [r7, #2]
 8002068:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	887a      	ldrh	r2, [r7, #2]
 800206e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	68ba      	ldr	r2, [r7, #8]
 8002074:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	887a      	ldrh	r2, [r7, #2]
 800207a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	887a      	ldrh	r2, [r7, #2]
 8002080:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	2200      	movs	r2, #0
 8002086:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2200      	movs	r2, #0
 800208c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002098:	2b40      	cmp	r3, #64	; 0x40
 800209a:	d007      	beq.n	80020ac <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80020aa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80020b4:	d178      	bne.n	80021a8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d002      	beq.n	80020c4 <HAL_SPI_TransmitReceive+0x10a>
 80020be:	8b7b      	ldrh	r3, [r7, #26]
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d166      	bne.n	8002192 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c8:	881a      	ldrh	r2, [r3, #0]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d4:	1c9a      	adds	r2, r3, #2
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020de:	b29b      	uxth	r3, r3
 80020e0:	3b01      	subs	r3, #1
 80020e2:	b29a      	uxth	r2, r3
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80020e8:	e053      	b.n	8002192 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	f003 0302 	and.w	r3, r3, #2
 80020f4:	2b02      	cmp	r3, #2
 80020f6:	d11b      	bne.n	8002130 <HAL_SPI_TransmitReceive+0x176>
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020fc:	b29b      	uxth	r3, r3
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d016      	beq.n	8002130 <HAL_SPI_TransmitReceive+0x176>
 8002102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002104:	2b01      	cmp	r3, #1
 8002106:	d113      	bne.n	8002130 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210c:	881a      	ldrh	r2, [r3, #0]
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002118:	1c9a      	adds	r2, r3, #2
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002122:	b29b      	uxth	r3, r3
 8002124:	3b01      	subs	r3, #1
 8002126:	b29a      	uxth	r2, r3
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800212c:	2300      	movs	r3, #0
 800212e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	f003 0301 	and.w	r3, r3, #1
 800213a:	2b01      	cmp	r3, #1
 800213c:	d119      	bne.n	8002172 <HAL_SPI_TransmitReceive+0x1b8>
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002142:	b29b      	uxth	r3, r3
 8002144:	2b00      	cmp	r3, #0
 8002146:	d014      	beq.n	8002172 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	68da      	ldr	r2, [r3, #12]
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002152:	b292      	uxth	r2, r2
 8002154:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800215a:	1c9a      	adds	r2, r3, #2
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002164:	b29b      	uxth	r3, r3
 8002166:	3b01      	subs	r3, #1
 8002168:	b29a      	uxth	r2, r3
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800216e:	2301      	movs	r3, #1
 8002170:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002172:	f005 fac1 	bl	80076f8 <HAL_GetTick>
 8002176:	4602      	mov	r2, r0
 8002178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217a:	1ad3      	subs	r3, r2, r3
 800217c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800217e:	429a      	cmp	r2, r3
 8002180:	d807      	bhi.n	8002192 <HAL_SPI_TransmitReceive+0x1d8>
 8002182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002188:	d003      	beq.n	8002192 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800218a:	2303      	movs	r3, #3
 800218c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002190:	e0a7      	b.n	80022e2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002196:	b29b      	uxth	r3, r3
 8002198:	2b00      	cmp	r3, #0
 800219a:	d1a6      	bne.n	80020ea <HAL_SPI_TransmitReceive+0x130>
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021a0:	b29b      	uxth	r3, r3
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d1a1      	bne.n	80020ea <HAL_SPI_TransmitReceive+0x130>
 80021a6:	e07c      	b.n	80022a2 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d002      	beq.n	80021b6 <HAL_SPI_TransmitReceive+0x1fc>
 80021b0:	8b7b      	ldrh	r3, [r7, #26]
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d16b      	bne.n	800228e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	330c      	adds	r3, #12
 80021c0:	7812      	ldrb	r2, [r2, #0]
 80021c2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c8:	1c5a      	adds	r2, r3, #1
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021d2:	b29b      	uxth	r3, r3
 80021d4:	3b01      	subs	r3, #1
 80021d6:	b29a      	uxth	r2, r3
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80021dc:	e057      	b.n	800228e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	f003 0302 	and.w	r3, r3, #2
 80021e8:	2b02      	cmp	r3, #2
 80021ea:	d11c      	bne.n	8002226 <HAL_SPI_TransmitReceive+0x26c>
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021f0:	b29b      	uxth	r3, r3
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d017      	beq.n	8002226 <HAL_SPI_TransmitReceive+0x26c>
 80021f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d114      	bne.n	8002226 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	330c      	adds	r3, #12
 8002206:	7812      	ldrb	r2, [r2, #0]
 8002208:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220e:	1c5a      	adds	r2, r3, #1
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002218:	b29b      	uxth	r3, r3
 800221a:	3b01      	subs	r3, #1
 800221c:	b29a      	uxth	r2, r3
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002222:	2300      	movs	r3, #0
 8002224:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	f003 0301 	and.w	r3, r3, #1
 8002230:	2b01      	cmp	r3, #1
 8002232:	d119      	bne.n	8002268 <HAL_SPI_TransmitReceive+0x2ae>
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002238:	b29b      	uxth	r3, r3
 800223a:	2b00      	cmp	r3, #0
 800223c:	d014      	beq.n	8002268 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	68da      	ldr	r2, [r3, #12]
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002248:	b2d2      	uxtb	r2, r2
 800224a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002250:	1c5a      	adds	r2, r3, #1
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800225a:	b29b      	uxth	r3, r3
 800225c:	3b01      	subs	r3, #1
 800225e:	b29a      	uxth	r2, r3
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002264:	2301      	movs	r3, #1
 8002266:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002268:	f005 fa46 	bl	80076f8 <HAL_GetTick>
 800226c:	4602      	mov	r2, r0
 800226e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002274:	429a      	cmp	r2, r3
 8002276:	d803      	bhi.n	8002280 <HAL_SPI_TransmitReceive+0x2c6>
 8002278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800227a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800227e:	d102      	bne.n	8002286 <HAL_SPI_TransmitReceive+0x2cc>
 8002280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002282:	2b00      	cmp	r3, #0
 8002284:	d103      	bne.n	800228e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800228c:	e029      	b.n	80022e2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002292:	b29b      	uxth	r3, r3
 8002294:	2b00      	cmp	r3, #0
 8002296:	d1a2      	bne.n	80021de <HAL_SPI_TransmitReceive+0x224>
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800229c:	b29b      	uxth	r3, r3
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d19d      	bne.n	80021de <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80022a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022a4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80022a6:	68f8      	ldr	r0, [r7, #12]
 80022a8:	f000 f8b2 	bl	8002410 <SPI_EndRxTxTransaction>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d006      	beq.n	80022c0 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2220      	movs	r2, #32
 80022bc:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80022be:	e010      	b.n	80022e2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d10b      	bne.n	80022e0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80022c8:	2300      	movs	r3, #0
 80022ca:	617b      	str	r3, [r7, #20]
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	68db      	ldr	r3, [r3, #12]
 80022d2:	617b      	str	r3, [r7, #20]
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	617b      	str	r3, [r7, #20]
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	e000      	b.n	80022e2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80022e0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	2201      	movs	r2, #1
 80022e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2200      	movs	r2, #0
 80022ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80022f2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3730      	adds	r7, #48	; 0x30
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
	...

08002300 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b088      	sub	sp, #32
 8002304:	af00      	add	r7, sp, #0
 8002306:	60f8      	str	r0, [r7, #12]
 8002308:	60b9      	str	r1, [r7, #8]
 800230a:	603b      	str	r3, [r7, #0]
 800230c:	4613      	mov	r3, r2
 800230e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002310:	f005 f9f2 	bl	80076f8 <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002318:	1a9b      	subs	r3, r3, r2
 800231a:	683a      	ldr	r2, [r7, #0]
 800231c:	4413      	add	r3, r2
 800231e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002320:	f005 f9ea 	bl	80076f8 <HAL_GetTick>
 8002324:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002326:	4b39      	ldr	r3, [pc, #228]	; (800240c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	015b      	lsls	r3, r3, #5
 800232c:	0d1b      	lsrs	r3, r3, #20
 800232e:	69fa      	ldr	r2, [r7, #28]
 8002330:	fb02 f303 	mul.w	r3, r2, r3
 8002334:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002336:	e054      	b.n	80023e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800233e:	d050      	beq.n	80023e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002340:	f005 f9da 	bl	80076f8 <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	69bb      	ldr	r3, [r7, #24]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	69fa      	ldr	r2, [r7, #28]
 800234c:	429a      	cmp	r2, r3
 800234e:	d902      	bls.n	8002356 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d13d      	bne.n	80023d2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	685a      	ldr	r2, [r3, #4]
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002364:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800236e:	d111      	bne.n	8002394 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002378:	d004      	beq.n	8002384 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002382:	d107      	bne.n	8002394 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002392:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002398:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800239c:	d10f      	bne.n	80023be <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80023ac:	601a      	str	r2, [r3, #0]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80023bc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2201      	movs	r2, #1
 80023c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2200      	movs	r2, #0
 80023ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80023ce:	2303      	movs	r3, #3
 80023d0:	e017      	b.n	8002402 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d101      	bne.n	80023dc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80023d8:	2300      	movs	r3, #0
 80023da:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	3b01      	subs	r3, #1
 80023e0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	689a      	ldr	r2, [r3, #8]
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	4013      	ands	r3, r2
 80023ec:	68ba      	ldr	r2, [r7, #8]
 80023ee:	429a      	cmp	r2, r3
 80023f0:	bf0c      	ite	eq
 80023f2:	2301      	moveq	r3, #1
 80023f4:	2300      	movne	r3, #0
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	461a      	mov	r2, r3
 80023fa:	79fb      	ldrb	r3, [r7, #7]
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d19b      	bne.n	8002338 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002400:	2300      	movs	r3, #0
}
 8002402:	4618      	mov	r0, r3
 8002404:	3720      	adds	r7, #32
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	20000000 	.word	0x20000000

08002410 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b088      	sub	sp, #32
 8002414:	af02      	add	r7, sp, #8
 8002416:	60f8      	str	r0, [r7, #12]
 8002418:	60b9      	str	r1, [r7, #8]
 800241a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800241c:	4b1b      	ldr	r3, [pc, #108]	; (800248c <SPI_EndRxTxTransaction+0x7c>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a1b      	ldr	r2, [pc, #108]	; (8002490 <SPI_EndRxTxTransaction+0x80>)
 8002422:	fba2 2303 	umull	r2, r3, r2, r3
 8002426:	0d5b      	lsrs	r3, r3, #21
 8002428:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800242c:	fb02 f303 	mul.w	r3, r2, r3
 8002430:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800243a:	d112      	bne.n	8002462 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	9300      	str	r3, [sp, #0]
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	2200      	movs	r2, #0
 8002444:	2180      	movs	r1, #128	; 0x80
 8002446:	68f8      	ldr	r0, [r7, #12]
 8002448:	f7ff ff5a 	bl	8002300 <SPI_WaitFlagStateUntilTimeout>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d016      	beq.n	8002480 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002456:	f043 0220 	orr.w	r2, r3, #32
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	e00f      	b.n	8002482 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d00a      	beq.n	800247e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	3b01      	subs	r3, #1
 800246c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002478:	2b80      	cmp	r3, #128	; 0x80
 800247a:	d0f2      	beq.n	8002462 <SPI_EndRxTxTransaction+0x52>
 800247c:	e000      	b.n	8002480 <SPI_EndRxTxTransaction+0x70>
        break;
 800247e:	bf00      	nop
  }

  return HAL_OK;
 8002480:	2300      	movs	r3, #0
}
 8002482:	4618      	mov	r0, r3
 8002484:	3718      	adds	r7, #24
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	20000000 	.word	0x20000000
 8002490:	165e9f81 	.word	0x165e9f81

08002494 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b084      	sub	sp, #16
 8002498:	af00      	add	r7, sp, #0
 800249a:	60f8      	str	r0, [r7, #12]
 800249c:	60b9      	str	r1, [r7, #8]
 800249e:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d101      	bne.n	80024aa <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e038      	b.n	800251c <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d106      	bne.n	80024c4 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2200      	movs	r2, #0
 80024ba:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80024be:	68f8      	ldr	r0, [r7, #12]
 80024c0:	f000 f830 	bl	8002524 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	3308      	adds	r3, #8
 80024cc:	4619      	mov	r1, r3
 80024ce:	4610      	mov	r0, r2
 80024d0:	f000 fc2a 	bl	8002d28 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	6818      	ldr	r0, [r3, #0]
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	461a      	mov	r2, r3
 80024de:	68b9      	ldr	r1, [r7, #8]
 80024e0:	f000 fc8c 	bl	8002dfc <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	6858      	ldr	r0, [r3, #4]
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	689a      	ldr	r2, [r3, #8]
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f0:	6879      	ldr	r1, [r7, #4]
 80024f2:	f000 fcb9 	bl	8002e68 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	68fa      	ldr	r2, [r7, #12]
 80024fc:	6892      	ldr	r2, [r2, #8]
 80024fe:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	68fa      	ldr	r2, [r7, #12]
 8002508:	6892      	ldr	r2, [r2, #8]
 800250a:	f041 0101 	orr.w	r1, r1, #1
 800250e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2201      	movs	r2, #1
 8002516:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 800251a:	2300      	movs	r3, #0
}
 800251c:	4618      	mov	r0, r3
 800251e:	3710      	adds	r7, #16
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}

08002524 <HAL_SRAM_MspInit>:
  * @param  hsram pointer to a SRAM_HandleTypeDef structure that contains
  *                the configuration information for SRAM module.
  * @retval None
  */
__weak void HAL_SRAM_MspInit(SRAM_HandleTypeDef *hsram)
{
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  UNUSED(hsram);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SRAM_MspInit could be implemented in the user file
   */
}
 800252c:	bf00      	nop
 800252e:	370c      	adds	r7, #12
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr

08002538 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d101      	bne.n	800254a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e03f      	b.n	80025ca <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002550:	b2db      	uxtb	r3, r3
 8002552:	2b00      	cmp	r3, #0
 8002554:	d106      	bne.n	8002564 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2200      	movs	r2, #0
 800255a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f000 f837 	bl	80025d2 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2224      	movs	r2, #36	; 0x24
 8002568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	68da      	ldr	r2, [r3, #12]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800257a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	f000 f933 	bl	80027e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	691a      	ldr	r2, [r3, #16]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002590:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	695a      	ldr	r2, [r3, #20]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80025a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	68da      	ldr	r2, [r3, #12]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80025b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2200      	movs	r2, #0
 80025b6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2220      	movs	r2, #32
 80025bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2220      	movs	r2, #32
 80025c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80025c8:	2300      	movs	r3, #0
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3708      	adds	r7, #8
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}

080025d2 <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80025d2:	b480      	push	{r7}
 80025d4:	b083      	sub	sp, #12
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 80025da:	bf00      	nop
 80025dc:	370c      	adds	r7, #12
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr

080025e6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025e6:	b580      	push	{r7, lr}
 80025e8:	b08a      	sub	sp, #40	; 0x28
 80025ea:	af02      	add	r7, sp, #8
 80025ec:	60f8      	str	r0, [r7, #12]
 80025ee:	60b9      	str	r1, [r7, #8]
 80025f0:	603b      	str	r3, [r7, #0]
 80025f2:	4613      	mov	r3, r2
 80025f4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80025f6:	2300      	movs	r3, #0
 80025f8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002600:	b2db      	uxtb	r3, r3
 8002602:	2b20      	cmp	r3, #32
 8002604:	d17c      	bne.n	8002700 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d002      	beq.n	8002612 <HAL_UART_Transmit+0x2c>
 800260c:	88fb      	ldrh	r3, [r7, #6]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d101      	bne.n	8002616 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e075      	b.n	8002702 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800261c:	2b01      	cmp	r3, #1
 800261e:	d101      	bne.n	8002624 <HAL_UART_Transmit+0x3e>
 8002620:	2302      	movs	r3, #2
 8002622:	e06e      	b.n	8002702 <HAL_UART_Transmit+0x11c>
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2201      	movs	r2, #1
 8002628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2200      	movs	r2, #0
 8002630:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2221      	movs	r2, #33	; 0x21
 8002636:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800263a:	f005 f85d 	bl	80076f8 <HAL_GetTick>
 800263e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	88fa      	ldrh	r2, [r7, #6]
 8002644:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	88fa      	ldrh	r2, [r7, #6]
 800264a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002654:	d108      	bne.n	8002668 <HAL_UART_Transmit+0x82>
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	691b      	ldr	r3, [r3, #16]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d104      	bne.n	8002668 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800265e:	2300      	movs	r3, #0
 8002660:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	61bb      	str	r3, [r7, #24]
 8002666:	e003      	b.n	8002670 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800266c:	2300      	movs	r3, #0
 800266e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2200      	movs	r2, #0
 8002674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002678:	e02a      	b.n	80026d0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	9300      	str	r3, [sp, #0]
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	2200      	movs	r2, #0
 8002682:	2180      	movs	r1, #128	; 0x80
 8002684:	68f8      	ldr	r0, [r7, #12]
 8002686:	f000 f840 	bl	800270a <UART_WaitOnFlagUntilTimeout>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d001      	beq.n	8002694 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002690:	2303      	movs	r3, #3
 8002692:	e036      	b.n	8002702 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d10b      	bne.n	80026b2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800269a:	69bb      	ldr	r3, [r7, #24]
 800269c:	881b      	ldrh	r3, [r3, #0]
 800269e:	461a      	mov	r2, r3
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80026a8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80026aa:	69bb      	ldr	r3, [r7, #24]
 80026ac:	3302      	adds	r3, #2
 80026ae:	61bb      	str	r3, [r7, #24]
 80026b0:	e007      	b.n	80026c2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	781a      	ldrb	r2, [r3, #0]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	3301      	adds	r3, #1
 80026c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80026c6:	b29b      	uxth	r3, r3
 80026c8:	3b01      	subs	r3, #1
 80026ca:	b29a      	uxth	r2, r3
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80026d4:	b29b      	uxth	r3, r3
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d1cf      	bne.n	800267a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	9300      	str	r3, [sp, #0]
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	2200      	movs	r2, #0
 80026e2:	2140      	movs	r1, #64	; 0x40
 80026e4:	68f8      	ldr	r0, [r7, #12]
 80026e6:	f000 f810 	bl	800270a <UART_WaitOnFlagUntilTimeout>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d001      	beq.n	80026f4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80026f0:	2303      	movs	r3, #3
 80026f2:	e006      	b.n	8002702 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2220      	movs	r2, #32
 80026f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80026fc:	2300      	movs	r3, #0
 80026fe:	e000      	b.n	8002702 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002700:	2302      	movs	r3, #2
  }
}
 8002702:	4618      	mov	r0, r3
 8002704:	3720      	adds	r7, #32
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}

0800270a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800270a:	b580      	push	{r7, lr}
 800270c:	b090      	sub	sp, #64	; 0x40
 800270e:	af00      	add	r7, sp, #0
 8002710:	60f8      	str	r0, [r7, #12]
 8002712:	60b9      	str	r1, [r7, #8]
 8002714:	603b      	str	r3, [r7, #0]
 8002716:	4613      	mov	r3, r2
 8002718:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800271a:	e050      	b.n	80027be <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800271c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800271e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002722:	d04c      	beq.n	80027be <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002724:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002726:	2b00      	cmp	r3, #0
 8002728:	d007      	beq.n	800273a <UART_WaitOnFlagUntilTimeout+0x30>
 800272a:	f004 ffe5 	bl	80076f8 <HAL_GetTick>
 800272e:	4602      	mov	r2, r0
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002736:	429a      	cmp	r2, r3
 8002738:	d241      	bcs.n	80027be <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	330c      	adds	r3, #12
 8002740:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002744:	e853 3f00 	ldrex	r3, [r3]
 8002748:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800274a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002750:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	330c      	adds	r3, #12
 8002758:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800275a:	637a      	str	r2, [r7, #52]	; 0x34
 800275c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800275e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002760:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002762:	e841 2300 	strex	r3, r2, [r1]
 8002766:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800276a:	2b00      	cmp	r3, #0
 800276c:	d1e5      	bne.n	800273a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	3314      	adds	r3, #20
 8002774:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	e853 3f00 	ldrex	r3, [r3]
 800277c:	613b      	str	r3, [r7, #16]
   return(result);
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	f023 0301 	bic.w	r3, r3, #1
 8002784:	63bb      	str	r3, [r7, #56]	; 0x38
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	3314      	adds	r3, #20
 800278c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800278e:	623a      	str	r2, [r7, #32]
 8002790:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002792:	69f9      	ldr	r1, [r7, #28]
 8002794:	6a3a      	ldr	r2, [r7, #32]
 8002796:	e841 2300 	strex	r3, r2, [r1]
 800279a:	61bb      	str	r3, [r7, #24]
   return(result);
 800279c:	69bb      	ldr	r3, [r7, #24]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d1e5      	bne.n	800276e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2220      	movs	r2, #32
 80027a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2220      	movs	r2, #32
 80027ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2200      	movs	r2, #0
 80027b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e00f      	b.n	80027de <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	4013      	ands	r3, r2
 80027c8:	68ba      	ldr	r2, [r7, #8]
 80027ca:	429a      	cmp	r2, r3
 80027cc:	bf0c      	ite	eq
 80027ce:	2301      	moveq	r3, #1
 80027d0:	2300      	movne	r3, #0
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	461a      	mov	r2, r3
 80027d6:	79fb      	ldrb	r3, [r7, #7]
 80027d8:	429a      	cmp	r2, r3
 80027da:	d09f      	beq.n	800271c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80027dc:	2300      	movs	r3, #0
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3740      	adds	r7, #64	; 0x40
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
	...

080027e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80027e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027ec:	b0c0      	sub	sp, #256	; 0x100
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80027f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	691b      	ldr	r3, [r3, #16]
 80027fc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002800:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002804:	68d9      	ldr	r1, [r3, #12]
 8002806:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	ea40 0301 	orr.w	r3, r0, r1
 8002810:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002812:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002816:	689a      	ldr	r2, [r3, #8]
 8002818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800281c:	691b      	ldr	r3, [r3, #16]
 800281e:	431a      	orrs	r2, r3
 8002820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002824:	695b      	ldr	r3, [r3, #20]
 8002826:	431a      	orrs	r2, r3
 8002828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800282c:	69db      	ldr	r3, [r3, #28]
 800282e:	4313      	orrs	r3, r2
 8002830:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002840:	f021 010c 	bic.w	r1, r1, #12
 8002844:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800284e:	430b      	orrs	r3, r1
 8002850:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002852:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	695b      	ldr	r3, [r3, #20]
 800285a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800285e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002862:	6999      	ldr	r1, [r3, #24]
 8002864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	ea40 0301 	orr.w	r3, r0, r1
 800286e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002870:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	4b8f      	ldr	r3, [pc, #572]	; (8002ab4 <UART_SetConfig+0x2cc>)
 8002878:	429a      	cmp	r2, r3
 800287a:	d005      	beq.n	8002888 <UART_SetConfig+0xa0>
 800287c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	4b8d      	ldr	r3, [pc, #564]	; (8002ab8 <UART_SetConfig+0x2d0>)
 8002884:	429a      	cmp	r2, r3
 8002886:	d104      	bne.n	8002892 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002888:	f005 fee2 	bl	8008650 <HAL_RCC_GetPCLK2Freq>
 800288c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002890:	e003      	b.n	800289a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002892:	f005 fec9 	bl	8008628 <HAL_RCC_GetPCLK1Freq>
 8002896:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800289a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800289e:	69db      	ldr	r3, [r3, #28]
 80028a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028a4:	f040 810c 	bne.w	8002ac0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80028a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80028ac:	2200      	movs	r2, #0
 80028ae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80028b2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80028b6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80028ba:	4622      	mov	r2, r4
 80028bc:	462b      	mov	r3, r5
 80028be:	1891      	adds	r1, r2, r2
 80028c0:	65b9      	str	r1, [r7, #88]	; 0x58
 80028c2:	415b      	adcs	r3, r3
 80028c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80028c6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80028ca:	4621      	mov	r1, r4
 80028cc:	eb12 0801 	adds.w	r8, r2, r1
 80028d0:	4629      	mov	r1, r5
 80028d2:	eb43 0901 	adc.w	r9, r3, r1
 80028d6:	f04f 0200 	mov.w	r2, #0
 80028da:	f04f 0300 	mov.w	r3, #0
 80028de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80028e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80028e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80028ea:	4690      	mov	r8, r2
 80028ec:	4699      	mov	r9, r3
 80028ee:	4623      	mov	r3, r4
 80028f0:	eb18 0303 	adds.w	r3, r8, r3
 80028f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80028f8:	462b      	mov	r3, r5
 80028fa:	eb49 0303 	adc.w	r3, r9, r3
 80028fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002902:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	2200      	movs	r2, #0
 800290a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800290e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002912:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002916:	460b      	mov	r3, r1
 8002918:	18db      	adds	r3, r3, r3
 800291a:	653b      	str	r3, [r7, #80]	; 0x50
 800291c:	4613      	mov	r3, r2
 800291e:	eb42 0303 	adc.w	r3, r2, r3
 8002922:	657b      	str	r3, [r7, #84]	; 0x54
 8002924:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002928:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800292c:	f7fe f93c 	bl	8000ba8 <__aeabi_uldivmod>
 8002930:	4602      	mov	r2, r0
 8002932:	460b      	mov	r3, r1
 8002934:	4b61      	ldr	r3, [pc, #388]	; (8002abc <UART_SetConfig+0x2d4>)
 8002936:	fba3 2302 	umull	r2, r3, r3, r2
 800293a:	095b      	lsrs	r3, r3, #5
 800293c:	011c      	lsls	r4, r3, #4
 800293e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002942:	2200      	movs	r2, #0
 8002944:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002948:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800294c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002950:	4642      	mov	r2, r8
 8002952:	464b      	mov	r3, r9
 8002954:	1891      	adds	r1, r2, r2
 8002956:	64b9      	str	r1, [r7, #72]	; 0x48
 8002958:	415b      	adcs	r3, r3
 800295a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800295c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002960:	4641      	mov	r1, r8
 8002962:	eb12 0a01 	adds.w	sl, r2, r1
 8002966:	4649      	mov	r1, r9
 8002968:	eb43 0b01 	adc.w	fp, r3, r1
 800296c:	f04f 0200 	mov.w	r2, #0
 8002970:	f04f 0300 	mov.w	r3, #0
 8002974:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002978:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800297c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002980:	4692      	mov	sl, r2
 8002982:	469b      	mov	fp, r3
 8002984:	4643      	mov	r3, r8
 8002986:	eb1a 0303 	adds.w	r3, sl, r3
 800298a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800298e:	464b      	mov	r3, r9
 8002990:	eb4b 0303 	adc.w	r3, fp, r3
 8002994:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	2200      	movs	r2, #0
 80029a0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80029a4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80029a8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80029ac:	460b      	mov	r3, r1
 80029ae:	18db      	adds	r3, r3, r3
 80029b0:	643b      	str	r3, [r7, #64]	; 0x40
 80029b2:	4613      	mov	r3, r2
 80029b4:	eb42 0303 	adc.w	r3, r2, r3
 80029b8:	647b      	str	r3, [r7, #68]	; 0x44
 80029ba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80029be:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80029c2:	f7fe f8f1 	bl	8000ba8 <__aeabi_uldivmod>
 80029c6:	4602      	mov	r2, r0
 80029c8:	460b      	mov	r3, r1
 80029ca:	4611      	mov	r1, r2
 80029cc:	4b3b      	ldr	r3, [pc, #236]	; (8002abc <UART_SetConfig+0x2d4>)
 80029ce:	fba3 2301 	umull	r2, r3, r3, r1
 80029d2:	095b      	lsrs	r3, r3, #5
 80029d4:	2264      	movs	r2, #100	; 0x64
 80029d6:	fb02 f303 	mul.w	r3, r2, r3
 80029da:	1acb      	subs	r3, r1, r3
 80029dc:	00db      	lsls	r3, r3, #3
 80029de:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80029e2:	4b36      	ldr	r3, [pc, #216]	; (8002abc <UART_SetConfig+0x2d4>)
 80029e4:	fba3 2302 	umull	r2, r3, r3, r2
 80029e8:	095b      	lsrs	r3, r3, #5
 80029ea:	005b      	lsls	r3, r3, #1
 80029ec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80029f0:	441c      	add	r4, r3
 80029f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80029f6:	2200      	movs	r2, #0
 80029f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80029fc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002a00:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002a04:	4642      	mov	r2, r8
 8002a06:	464b      	mov	r3, r9
 8002a08:	1891      	adds	r1, r2, r2
 8002a0a:	63b9      	str	r1, [r7, #56]	; 0x38
 8002a0c:	415b      	adcs	r3, r3
 8002a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a10:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002a14:	4641      	mov	r1, r8
 8002a16:	1851      	adds	r1, r2, r1
 8002a18:	6339      	str	r1, [r7, #48]	; 0x30
 8002a1a:	4649      	mov	r1, r9
 8002a1c:	414b      	adcs	r3, r1
 8002a1e:	637b      	str	r3, [r7, #52]	; 0x34
 8002a20:	f04f 0200 	mov.w	r2, #0
 8002a24:	f04f 0300 	mov.w	r3, #0
 8002a28:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002a2c:	4659      	mov	r1, fp
 8002a2e:	00cb      	lsls	r3, r1, #3
 8002a30:	4651      	mov	r1, sl
 8002a32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a36:	4651      	mov	r1, sl
 8002a38:	00ca      	lsls	r2, r1, #3
 8002a3a:	4610      	mov	r0, r2
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	4603      	mov	r3, r0
 8002a40:	4642      	mov	r2, r8
 8002a42:	189b      	adds	r3, r3, r2
 8002a44:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002a48:	464b      	mov	r3, r9
 8002a4a:	460a      	mov	r2, r1
 8002a4c:	eb42 0303 	adc.w	r3, r2, r3
 8002a50:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002a54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002a60:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002a64:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002a68:	460b      	mov	r3, r1
 8002a6a:	18db      	adds	r3, r3, r3
 8002a6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a6e:	4613      	mov	r3, r2
 8002a70:	eb42 0303 	adc.w	r3, r2, r3
 8002a74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a76:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002a7a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002a7e:	f7fe f893 	bl	8000ba8 <__aeabi_uldivmod>
 8002a82:	4602      	mov	r2, r0
 8002a84:	460b      	mov	r3, r1
 8002a86:	4b0d      	ldr	r3, [pc, #52]	; (8002abc <UART_SetConfig+0x2d4>)
 8002a88:	fba3 1302 	umull	r1, r3, r3, r2
 8002a8c:	095b      	lsrs	r3, r3, #5
 8002a8e:	2164      	movs	r1, #100	; 0x64
 8002a90:	fb01 f303 	mul.w	r3, r1, r3
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	00db      	lsls	r3, r3, #3
 8002a98:	3332      	adds	r3, #50	; 0x32
 8002a9a:	4a08      	ldr	r2, [pc, #32]	; (8002abc <UART_SetConfig+0x2d4>)
 8002a9c:	fba2 2303 	umull	r2, r3, r2, r3
 8002aa0:	095b      	lsrs	r3, r3, #5
 8002aa2:	f003 0207 	and.w	r2, r3, #7
 8002aa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4422      	add	r2, r4
 8002aae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002ab0:	e106      	b.n	8002cc0 <UART_SetConfig+0x4d8>
 8002ab2:	bf00      	nop
 8002ab4:	40011000 	.word	0x40011000
 8002ab8:	40011400 	.word	0x40011400
 8002abc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002ac0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002aca:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002ace:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002ad2:	4642      	mov	r2, r8
 8002ad4:	464b      	mov	r3, r9
 8002ad6:	1891      	adds	r1, r2, r2
 8002ad8:	6239      	str	r1, [r7, #32]
 8002ada:	415b      	adcs	r3, r3
 8002adc:	627b      	str	r3, [r7, #36]	; 0x24
 8002ade:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002ae2:	4641      	mov	r1, r8
 8002ae4:	1854      	adds	r4, r2, r1
 8002ae6:	4649      	mov	r1, r9
 8002ae8:	eb43 0501 	adc.w	r5, r3, r1
 8002aec:	f04f 0200 	mov.w	r2, #0
 8002af0:	f04f 0300 	mov.w	r3, #0
 8002af4:	00eb      	lsls	r3, r5, #3
 8002af6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002afa:	00e2      	lsls	r2, r4, #3
 8002afc:	4614      	mov	r4, r2
 8002afe:	461d      	mov	r5, r3
 8002b00:	4643      	mov	r3, r8
 8002b02:	18e3      	adds	r3, r4, r3
 8002b04:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002b08:	464b      	mov	r3, r9
 8002b0a:	eb45 0303 	adc.w	r3, r5, r3
 8002b0e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002b12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002b1e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002b22:	f04f 0200 	mov.w	r2, #0
 8002b26:	f04f 0300 	mov.w	r3, #0
 8002b2a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002b2e:	4629      	mov	r1, r5
 8002b30:	008b      	lsls	r3, r1, #2
 8002b32:	4621      	mov	r1, r4
 8002b34:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002b38:	4621      	mov	r1, r4
 8002b3a:	008a      	lsls	r2, r1, #2
 8002b3c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002b40:	f7fe f832 	bl	8000ba8 <__aeabi_uldivmod>
 8002b44:	4602      	mov	r2, r0
 8002b46:	460b      	mov	r3, r1
 8002b48:	4b60      	ldr	r3, [pc, #384]	; (8002ccc <UART_SetConfig+0x4e4>)
 8002b4a:	fba3 2302 	umull	r2, r3, r3, r2
 8002b4e:	095b      	lsrs	r3, r3, #5
 8002b50:	011c      	lsls	r4, r3, #4
 8002b52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b56:	2200      	movs	r2, #0
 8002b58:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002b5c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002b60:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002b64:	4642      	mov	r2, r8
 8002b66:	464b      	mov	r3, r9
 8002b68:	1891      	adds	r1, r2, r2
 8002b6a:	61b9      	str	r1, [r7, #24]
 8002b6c:	415b      	adcs	r3, r3
 8002b6e:	61fb      	str	r3, [r7, #28]
 8002b70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b74:	4641      	mov	r1, r8
 8002b76:	1851      	adds	r1, r2, r1
 8002b78:	6139      	str	r1, [r7, #16]
 8002b7a:	4649      	mov	r1, r9
 8002b7c:	414b      	adcs	r3, r1
 8002b7e:	617b      	str	r3, [r7, #20]
 8002b80:	f04f 0200 	mov.w	r2, #0
 8002b84:	f04f 0300 	mov.w	r3, #0
 8002b88:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002b8c:	4659      	mov	r1, fp
 8002b8e:	00cb      	lsls	r3, r1, #3
 8002b90:	4651      	mov	r1, sl
 8002b92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b96:	4651      	mov	r1, sl
 8002b98:	00ca      	lsls	r2, r1, #3
 8002b9a:	4610      	mov	r0, r2
 8002b9c:	4619      	mov	r1, r3
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	4642      	mov	r2, r8
 8002ba2:	189b      	adds	r3, r3, r2
 8002ba4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002ba8:	464b      	mov	r3, r9
 8002baa:	460a      	mov	r2, r1
 8002bac:	eb42 0303 	adc.w	r3, r2, r3
 8002bb0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002bb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	67bb      	str	r3, [r7, #120]	; 0x78
 8002bbe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002bc0:	f04f 0200 	mov.w	r2, #0
 8002bc4:	f04f 0300 	mov.w	r3, #0
 8002bc8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002bcc:	4649      	mov	r1, r9
 8002bce:	008b      	lsls	r3, r1, #2
 8002bd0:	4641      	mov	r1, r8
 8002bd2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002bd6:	4641      	mov	r1, r8
 8002bd8:	008a      	lsls	r2, r1, #2
 8002bda:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002bde:	f7fd ffe3 	bl	8000ba8 <__aeabi_uldivmod>
 8002be2:	4602      	mov	r2, r0
 8002be4:	460b      	mov	r3, r1
 8002be6:	4611      	mov	r1, r2
 8002be8:	4b38      	ldr	r3, [pc, #224]	; (8002ccc <UART_SetConfig+0x4e4>)
 8002bea:	fba3 2301 	umull	r2, r3, r3, r1
 8002bee:	095b      	lsrs	r3, r3, #5
 8002bf0:	2264      	movs	r2, #100	; 0x64
 8002bf2:	fb02 f303 	mul.w	r3, r2, r3
 8002bf6:	1acb      	subs	r3, r1, r3
 8002bf8:	011b      	lsls	r3, r3, #4
 8002bfa:	3332      	adds	r3, #50	; 0x32
 8002bfc:	4a33      	ldr	r2, [pc, #204]	; (8002ccc <UART_SetConfig+0x4e4>)
 8002bfe:	fba2 2303 	umull	r2, r3, r2, r3
 8002c02:	095b      	lsrs	r3, r3, #5
 8002c04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c08:	441c      	add	r4, r3
 8002c0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c0e:	2200      	movs	r2, #0
 8002c10:	673b      	str	r3, [r7, #112]	; 0x70
 8002c12:	677a      	str	r2, [r7, #116]	; 0x74
 8002c14:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002c18:	4642      	mov	r2, r8
 8002c1a:	464b      	mov	r3, r9
 8002c1c:	1891      	adds	r1, r2, r2
 8002c1e:	60b9      	str	r1, [r7, #8]
 8002c20:	415b      	adcs	r3, r3
 8002c22:	60fb      	str	r3, [r7, #12]
 8002c24:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002c28:	4641      	mov	r1, r8
 8002c2a:	1851      	adds	r1, r2, r1
 8002c2c:	6039      	str	r1, [r7, #0]
 8002c2e:	4649      	mov	r1, r9
 8002c30:	414b      	adcs	r3, r1
 8002c32:	607b      	str	r3, [r7, #4]
 8002c34:	f04f 0200 	mov.w	r2, #0
 8002c38:	f04f 0300 	mov.w	r3, #0
 8002c3c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002c40:	4659      	mov	r1, fp
 8002c42:	00cb      	lsls	r3, r1, #3
 8002c44:	4651      	mov	r1, sl
 8002c46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c4a:	4651      	mov	r1, sl
 8002c4c:	00ca      	lsls	r2, r1, #3
 8002c4e:	4610      	mov	r0, r2
 8002c50:	4619      	mov	r1, r3
 8002c52:	4603      	mov	r3, r0
 8002c54:	4642      	mov	r2, r8
 8002c56:	189b      	adds	r3, r3, r2
 8002c58:	66bb      	str	r3, [r7, #104]	; 0x68
 8002c5a:	464b      	mov	r3, r9
 8002c5c:	460a      	mov	r2, r1
 8002c5e:	eb42 0303 	adc.w	r3, r2, r3
 8002c62:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002c64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	663b      	str	r3, [r7, #96]	; 0x60
 8002c6e:	667a      	str	r2, [r7, #100]	; 0x64
 8002c70:	f04f 0200 	mov.w	r2, #0
 8002c74:	f04f 0300 	mov.w	r3, #0
 8002c78:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002c7c:	4649      	mov	r1, r9
 8002c7e:	008b      	lsls	r3, r1, #2
 8002c80:	4641      	mov	r1, r8
 8002c82:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c86:	4641      	mov	r1, r8
 8002c88:	008a      	lsls	r2, r1, #2
 8002c8a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002c8e:	f7fd ff8b 	bl	8000ba8 <__aeabi_uldivmod>
 8002c92:	4602      	mov	r2, r0
 8002c94:	460b      	mov	r3, r1
 8002c96:	4b0d      	ldr	r3, [pc, #52]	; (8002ccc <UART_SetConfig+0x4e4>)
 8002c98:	fba3 1302 	umull	r1, r3, r3, r2
 8002c9c:	095b      	lsrs	r3, r3, #5
 8002c9e:	2164      	movs	r1, #100	; 0x64
 8002ca0:	fb01 f303 	mul.w	r3, r1, r3
 8002ca4:	1ad3      	subs	r3, r2, r3
 8002ca6:	011b      	lsls	r3, r3, #4
 8002ca8:	3332      	adds	r3, #50	; 0x32
 8002caa:	4a08      	ldr	r2, [pc, #32]	; (8002ccc <UART_SetConfig+0x4e4>)
 8002cac:	fba2 2303 	umull	r2, r3, r2, r3
 8002cb0:	095b      	lsrs	r3, r3, #5
 8002cb2:	f003 020f 	and.w	r2, r3, #15
 8002cb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4422      	add	r2, r4
 8002cbe:	609a      	str	r2, [r3, #8]
}
 8002cc0:	bf00      	nop
 8002cc2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ccc:	51eb851f 	.word	0x51eb851f

08002cd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002cd4:	e7fe      	b.n	8002cd4 <NMI_Handler+0x4>

08002cd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002cd6:	b480      	push	{r7}
 8002cd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002cda:	e7fe      	b.n	8002cda <HardFault_Handler+0x4>

08002cdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ce0:	e7fe      	b.n	8002ce0 <MemManage_Handler+0x4>

08002ce2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ce2:	b480      	push	{r7}
 8002ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ce6:	e7fe      	b.n	8002ce6 <BusFault_Handler+0x4>

08002ce8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002cec:	e7fe      	b.n	8002cec <UsageFault_Handler+0x4>

08002cee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002cee:	b480      	push	{r7}
 8002cf0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002cf2:	bf00      	nop
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr

08002cfc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d00:	bf00      	nop
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr

08002d0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d0a:	b480      	push	{r7}
 8002d0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d0e:	bf00      	nop
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr

08002d18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d1c:	f004 fcd8 	bl	80076d0 <HAL_IncTick>
  SysTick_ISR();
 8002d20:	f003 fc08 	bl	8006534 <SysTick_ISR>
  //SysTick_ISR_Handler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d24:	bf00      	nop
 8002d26:	bd80      	pop	{r7, pc}

08002d28 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b087      	sub	sp, #28
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d3c:	683a      	ldr	r2, [r7, #0]
 8002d3e:	6812      	ldr	r2, [r2, #0]
 8002d40:	f023 0101 	bic.w	r1, r3, #1
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	2b08      	cmp	r3, #8
 8002d50:	d102      	bne.n	8002d58 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8002d52:	2340      	movs	r3, #64	; 0x40
 8002d54:	617b      	str	r3, [r7, #20]
 8002d56:	e001      	b.n	8002d5c <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8002d68:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8002d6e:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8002d74:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8002d7a:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8002d80:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8002d86:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 8002d8c:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 8002d92:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 8002d98:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	699b      	ldr	r3, [r3, #24]
 8002da6:	693a      	ldr	r2, [r7, #16]
 8002da8:	4313      	orrs	r3, r2
 8002daa:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002db0:	693a      	ldr	r2, [r7, #16]
 8002db2:	4313      	orrs	r3, r2
 8002db4:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 8002db6:	4b10      	ldr	r3, [pc, #64]	; (8002df8 <FSMC_NORSRAM_Init+0xd0>)
 8002db8:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002dc0:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8002dc8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	43db      	mvns	r3, r3
 8002dd8:	ea02 0103 	and.w	r1, r2, r3
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	4319      	orrs	r1, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 8002dea:	2300      	movs	r3, #0
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	371c      	adds	r7, #28
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr
 8002df8:	0008fb7f 	.word	0x0008fb7f

08002dfc <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b085      	sub	sp, #20
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	60f8      	str	r0, [r7, #12]
 8002e04:	60b9      	str	r1, [r7, #8]
 8002e06:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	1c5a      	adds	r2, r3, #1
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e12:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	011b      	lsls	r3, r3, #4
 8002e20:	431a      	orrs	r2, r3
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	021b      	lsls	r3, r3, #8
 8002e28:	431a      	orrs	r2, r3
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	68db      	ldr	r3, [r3, #12]
 8002e2e:	041b      	lsls	r3, r3, #16
 8002e30:	431a      	orrs	r2, r3
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	691b      	ldr	r3, [r3, #16]
 8002e36:	3b01      	subs	r3, #1
 8002e38:	051b      	lsls	r3, r3, #20
 8002e3a:	431a      	orrs	r2, r3
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	695b      	ldr	r3, [r3, #20]
 8002e40:	3b02      	subs	r3, #2
 8002e42:	061b      	lsls	r3, r3, #24
 8002e44:	431a      	orrs	r2, r3
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	699b      	ldr	r3, [r3, #24]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	3201      	adds	r2, #1
 8002e50:	4319      	orrs	r1, r3
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif
  return HAL_OK;
 8002e58:	2300      	movs	r3, #0
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3714      	adds	r7, #20
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr
	...

08002e68 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b085      	sub	sp, #20
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	60f8      	str	r0, [r7, #12]
 8002e70:	60b9      	str	r1, [r7, #8]
 8002e72:	607a      	str	r2, [r7, #4]
 8002e74:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e7c:	d11d      	bne.n	8002eba <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002e86:	4b13      	ldr	r3, [pc, #76]	; (8002ed4 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8002e88:	4013      	ands	r3, r2
 8002e8a:	68ba      	ldr	r2, [r7, #8]
 8002e8c:	6811      	ldr	r1, [r2, #0]
 8002e8e:	68ba      	ldr	r2, [r7, #8]
 8002e90:	6852      	ldr	r2, [r2, #4]
 8002e92:	0112      	lsls	r2, r2, #4
 8002e94:	4311      	orrs	r1, r2
 8002e96:	68ba      	ldr	r2, [r7, #8]
 8002e98:	6892      	ldr	r2, [r2, #8]
 8002e9a:	0212      	lsls	r2, r2, #8
 8002e9c:	4311      	orrs	r1, r2
 8002e9e:	68ba      	ldr	r2, [r7, #8]
 8002ea0:	6992      	ldr	r2, [r2, #24]
 8002ea2:	4311      	orrs	r1, r2
 8002ea4:	68ba      	ldr	r2, [r7, #8]
 8002ea6:	68d2      	ldr	r2, [r2, #12]
 8002ea8:	0412      	lsls	r2, r2, #16
 8002eaa:	430a      	orrs	r2, r1
 8002eac:	ea43 0102 	orr.w	r1, r3, r2
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8002eb8:	e005      	b.n	8002ec6 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	687a      	ldr	r2, [r7, #4]
 8002ebe:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8002ec2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8002ec6:	2300      	movs	r3, #0
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	3714      	adds	r7, #20
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr
 8002ed4:	cff00000 	.word	0xcff00000

08002ed8 <FSMC_NAND_Init>:
  * @param  Device Pointer to NAND device instance
  * @param  Init Pointer to NAND Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_Init(FSMC_NAND_TypeDef *Device, FSMC_NAND_InitTypeDef *Init)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b083      	sub	sp, #12
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_ECCPAGE_SIZE(Init->ECCPageSize));
  assert_param(IS_FSMC_TCLR_TIME(Init->TCLRSetupTime));
  assert_param(IS_FSMC_TAR_TIME(Init->TARSetupTime));

  /* Set NAND device control parameters */
  if (Init->NandBank == FSMC_NAND_BANK2)
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	2b10      	cmp	r3, #16
 8002ee8:	d11c      	bne.n	8002f24 <FSMC_NAND_Init+0x4c>
  {
    /* NAND bank 2 registers configuration */
    MODIFY_REG(Device->PCR2, PCR_CLEAR_MASK, (Init->Waitfeature                                      |
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	4b1f      	ldr	r3, [pc, #124]	; (8002f6c <FSMC_NAND_Init+0x94>)
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	683a      	ldr	r2, [r7, #0]
 8002ef4:	6851      	ldr	r1, [r2, #4]
 8002ef6:	683a      	ldr	r2, [r7, #0]
 8002ef8:	6892      	ldr	r2, [r2, #8]
 8002efa:	4311      	orrs	r1, r2
 8002efc:	683a      	ldr	r2, [r7, #0]
 8002efe:	68d2      	ldr	r2, [r2, #12]
 8002f00:	4311      	orrs	r1, r2
 8002f02:	683a      	ldr	r2, [r7, #0]
 8002f04:	6912      	ldr	r2, [r2, #16]
 8002f06:	4311      	orrs	r1, r2
 8002f08:	683a      	ldr	r2, [r7, #0]
 8002f0a:	6952      	ldr	r2, [r2, #20]
 8002f0c:	0252      	lsls	r2, r2, #9
 8002f0e:	4311      	orrs	r1, r2
 8002f10:	683a      	ldr	r2, [r7, #0]
 8002f12:	6992      	ldr	r2, [r2, #24]
 8002f14:	0352      	lsls	r2, r2, #13
 8002f16:	430a      	orrs	r2, r1
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	f043 0208 	orr.w	r2, r3, #8
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	601a      	str	r2, [r3, #0]
 8002f22:	e01b      	b.n	8002f5c <FSMC_NAND_Init+0x84>
                                              ((Init->TARSetupTime)  << FSMC_PCR2_TAR_Pos)));
  }
  else
  {
    /* NAND bank 3 registers configuration */
    MODIFY_REG(Device->PCR3, PCR_CLEAR_MASK, (Init->Waitfeature                                      |
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6a1a      	ldr	r2, [r3, #32]
 8002f28:	4b10      	ldr	r3, [pc, #64]	; (8002f6c <FSMC_NAND_Init+0x94>)
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	683a      	ldr	r2, [r7, #0]
 8002f2e:	6851      	ldr	r1, [r2, #4]
 8002f30:	683a      	ldr	r2, [r7, #0]
 8002f32:	6892      	ldr	r2, [r2, #8]
 8002f34:	4311      	orrs	r1, r2
 8002f36:	683a      	ldr	r2, [r7, #0]
 8002f38:	68d2      	ldr	r2, [r2, #12]
 8002f3a:	4311      	orrs	r1, r2
 8002f3c:	683a      	ldr	r2, [r7, #0]
 8002f3e:	6912      	ldr	r2, [r2, #16]
 8002f40:	4311      	orrs	r1, r2
 8002f42:	683a      	ldr	r2, [r7, #0]
 8002f44:	6952      	ldr	r2, [r2, #20]
 8002f46:	0252      	lsls	r2, r2, #9
 8002f48:	4311      	orrs	r1, r2
 8002f4a:	683a      	ldr	r2, [r7, #0]
 8002f4c:	6992      	ldr	r2, [r2, #24]
 8002f4e:	0352      	lsls	r2, r2, #13
 8002f50:	430a      	orrs	r2, r1
 8002f52:	4313      	orrs	r3, r2
 8002f54:	f043 0208 	orr.w	r2, r3, #8
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	621a      	str	r2, [r3, #32]
                                              Init->ECCPageSize                                      |
                                              ((Init->TCLRSetupTime) << FSMC_PCR2_TCLR_Pos)  |
                                              ((Init->TARSetupTime)  << FSMC_PCR2_TAR_Pos)));
  }

  return HAL_OK;
 8002f5c:	2300      	movs	r3, #0
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	370c      	adds	r7, #12
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr
 8002f6a:	bf00      	nop
 8002f6c:	fff00181 	.word	0xfff00181

08002f70 <FSMC_NAND_CommonSpace_Timing_Init>:
  * @param  Bank NAND bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_CommonSpace_Timing_Init(FSMC_NAND_TypeDef *Device,
                                                   FSMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b085      	sub	sp, #20
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	60f8      	str	r0, [r7, #12]
 8002f78:	60b9      	str	r1, [r7, #8]
 8002f7a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_HOLD_TIME(Timing->HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(Timing->HiZSetupTime));
  assert_param(IS_FSMC_NAND_BANK(Bank));

  /* Set FSMC_NAND device timing parameters */
  if (Bank == FSMC_NAND_BANK2)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2b10      	cmp	r3, #16
 8002f80:	d112      	bne.n	8002fa8 <FSMC_NAND_CommonSpace_Timing_Init+0x38>
  {
    /* NAND bank 2 registers configuration */
    MODIFY_REG(Device->PMEM2, PMEM_CLEAR_MASK, (Timing->SetupTime                                             |
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	021b      	lsls	r3, r3, #8
 8002f90:	431a      	orrs	r2, r3
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	041b      	lsls	r3, r3, #16
 8002f98:	431a      	orrs	r2, r3
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	061b      	lsls	r3, r3, #24
 8002fa0:	431a      	orrs	r2, r3
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	609a      	str	r2, [r3, #8]
 8002fa6:	e011      	b.n	8002fcc <FSMC_NAND_CommonSpace_Timing_Init+0x5c>
                                                ((Timing->HiZSetupTime)  << FSMC_PMEM2_MEMHIZ2_Pos)));
  }
  else
  {
    /* NAND bank 3 registers configuration */
    MODIFY_REG(Device->PMEM3, PMEM_CLEAR_MASK, (Timing->SetupTime                                             |
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	021b      	lsls	r3, r3, #8
 8002fb6:	431a      	orrs	r2, r3
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	041b      	lsls	r3, r3, #16
 8002fbe:	431a      	orrs	r2, r3
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	061b      	lsls	r3, r3, #24
 8002fc6:	431a      	orrs	r2, r3
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	629a      	str	r2, [r3, #40]	; 0x28
                                                ((Timing->WaitSetupTime) << FSMC_PMEM2_MEMWAIT2_Pos) |
                                                ((Timing->HoldSetupTime) << FSMC_PMEM2_MEMHOLD2_Pos) |
                                                ((Timing->HiZSetupTime)  << FSMC_PMEM2_MEMHIZ2_Pos)));
  }

  return HAL_OK;
 8002fcc:	2300      	movs	r3, #0
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3714      	adds	r7, #20
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr

08002fda <FSMC_NAND_AttributeSpace_Timing_Init>:
  * @param  Bank NAND bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_AttributeSpace_Timing_Init(FSMC_NAND_TypeDef *Device,
                                                      FSMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 8002fda:	b480      	push	{r7}
 8002fdc:	b085      	sub	sp, #20
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	60f8      	str	r0, [r7, #12]
 8002fe2:	60b9      	str	r1, [r7, #8]
 8002fe4:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_HOLD_TIME(Timing->HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(Timing->HiZSetupTime));
  assert_param(IS_FSMC_NAND_BANK(Bank));

  /* Set FSMC_NAND device timing parameters */
  if (Bank == FSMC_NAND_BANK2)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2b10      	cmp	r3, #16
 8002fea:	d112      	bne.n	8003012 <FSMC_NAND_AttributeSpace_Timing_Init+0x38>
  {
    /* NAND bank 2 registers configuration */
    MODIFY_REG(Device->PATT2, PATT_CLEAR_MASK, (Timing->SetupTime                                             |
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	021b      	lsls	r3, r3, #8
 8002ffa:	431a      	orrs	r2, r3
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	041b      	lsls	r3, r3, #16
 8003002:	431a      	orrs	r2, r3
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	061b      	lsls	r3, r3, #24
 800300a:	431a      	orrs	r2, r3
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	60da      	str	r2, [r3, #12]
 8003010:	e011      	b.n	8003036 <FSMC_NAND_AttributeSpace_Timing_Init+0x5c>
                                                ((Timing->HiZSetupTime)  << FSMC_PATT2_ATTHIZ2_Pos)));
  }
  else
  {
    /* NAND bank 3 registers configuration */
    MODIFY_REG(Device->PATT3, PATT_CLEAR_MASK, (Timing->SetupTime                                             |
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	021b      	lsls	r3, r3, #8
 8003020:	431a      	orrs	r2, r3
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	041b      	lsls	r3, r3, #16
 8003028:	431a      	orrs	r2, r3
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	68db      	ldr	r3, [r3, #12]
 800302e:	061b      	lsls	r3, r3, #24
 8003030:	431a      	orrs	r2, r3
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	62da      	str	r2, [r3, #44]	; 0x2c
                                                ((Timing->WaitSetupTime) << FSMC_PATT2_ATTWAIT2_Pos) |
                                                ((Timing->HoldSetupTime) << FSMC_PATT2_ATTHOLD2_Pos) |
                                                ((Timing->HiZSetupTime)  << FSMC_PATT2_ATTHIZ2_Pos)));
  }

  return HAL_OK;
 8003036:	2300      	movs	r3, #0
}
 8003038:	4618      	mov	r0, r3
 800303a:	3714      	adds	r7, #20
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr

08003044 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003044:	b480      	push	{r7}
 8003046:	af00      	add	r7, sp, #0
  return 1;
 8003048:	2301      	movs	r3, #1
}
 800304a:	4618      	mov	r0, r3
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr

08003054 <_kill>:

int _kill(int pid, int sig)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b082      	sub	sp, #8
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800305e:	f006 f97d 	bl	800935c <__errno>
 8003062:	4603      	mov	r3, r0
 8003064:	2216      	movs	r2, #22
 8003066:	601a      	str	r2, [r3, #0]
  return -1;
 8003068:	f04f 33ff 	mov.w	r3, #4294967295
}
 800306c:	4618      	mov	r0, r3
 800306e:	3708      	adds	r7, #8
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}

08003074 <_exit>:

void _exit (int status)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b082      	sub	sp, #8
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800307c:	f04f 31ff 	mov.w	r1, #4294967295
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	f7ff ffe7 	bl	8003054 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003086:	e7fe      	b.n	8003086 <_exit+0x12>

08003088 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b086      	sub	sp, #24
 800308c:	af00      	add	r7, sp, #0
 800308e:	60f8      	str	r0, [r7, #12]
 8003090:	60b9      	str	r1, [r7, #8]
 8003092:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003094:	2300      	movs	r3, #0
 8003096:	617b      	str	r3, [r7, #20]
 8003098:	e00a      	b.n	80030b0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800309a:	f3af 8000 	nop.w
 800309e:	4601      	mov	r1, r0
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	1c5a      	adds	r2, r3, #1
 80030a4:	60ba      	str	r2, [r7, #8]
 80030a6:	b2ca      	uxtb	r2, r1
 80030a8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	3301      	adds	r3, #1
 80030ae:	617b      	str	r3, [r7, #20]
 80030b0:	697a      	ldr	r2, [r7, #20]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	429a      	cmp	r2, r3
 80030b6:	dbf0      	blt.n	800309a <_read+0x12>
  }

  return len;
 80030b8:	687b      	ldr	r3, [r7, #4]
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3718      	adds	r7, #24
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}

080030c2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80030c2:	b580      	push	{r7, lr}
 80030c4:	b086      	sub	sp, #24
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	60f8      	str	r0, [r7, #12]
 80030ca:	60b9      	str	r1, [r7, #8]
 80030cc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030ce:	2300      	movs	r3, #0
 80030d0:	617b      	str	r3, [r7, #20]
 80030d2:	e009      	b.n	80030e8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	1c5a      	adds	r2, r3, #1
 80030d8:	60ba      	str	r2, [r7, #8]
 80030da:	781b      	ldrb	r3, [r3, #0]
 80030dc:	4618      	mov	r0, r3
 80030de:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	3301      	adds	r3, #1
 80030e6:	617b      	str	r3, [r7, #20]
 80030e8:	697a      	ldr	r2, [r7, #20]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	429a      	cmp	r2, r3
 80030ee:	dbf1      	blt.n	80030d4 <_write+0x12>
  }
  return len;
 80030f0:	687b      	ldr	r3, [r7, #4]
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3718      	adds	r7, #24
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}

080030fa <_close>:

int _close(int file)
{
 80030fa:	b480      	push	{r7}
 80030fc:	b083      	sub	sp, #12
 80030fe:	af00      	add	r7, sp, #0
 8003100:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003102:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003106:	4618      	mov	r0, r3
 8003108:	370c      	adds	r7, #12
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr

08003112 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003112:	b480      	push	{r7}
 8003114:	b083      	sub	sp, #12
 8003116:	af00      	add	r7, sp, #0
 8003118:	6078      	str	r0, [r7, #4]
 800311a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003122:	605a      	str	r2, [r3, #4]
  return 0;
 8003124:	2300      	movs	r3, #0
}
 8003126:	4618      	mov	r0, r3
 8003128:	370c      	adds	r7, #12
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr

08003132 <_isatty>:

int _isatty(int file)
{
 8003132:	b480      	push	{r7}
 8003134:	b083      	sub	sp, #12
 8003136:	af00      	add	r7, sp, #0
 8003138:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800313a:	2301      	movs	r3, #1
}
 800313c:	4618      	mov	r0, r3
 800313e:	370c      	adds	r7, #12
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr

08003148 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003148:	b480      	push	{r7}
 800314a:	b085      	sub	sp, #20
 800314c:	af00      	add	r7, sp, #0
 800314e:	60f8      	str	r0, [r7, #12]
 8003150:	60b9      	str	r1, [r7, #8]
 8003152:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003154:	2300      	movs	r3, #0
}
 8003156:	4618      	mov	r0, r3
 8003158:	3714      	adds	r7, #20
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr
	...

08003164 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b086      	sub	sp, #24
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800316c:	4a14      	ldr	r2, [pc, #80]	; (80031c0 <_sbrk+0x5c>)
 800316e:	4b15      	ldr	r3, [pc, #84]	; (80031c4 <_sbrk+0x60>)
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003178:	4b13      	ldr	r3, [pc, #76]	; (80031c8 <_sbrk+0x64>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d102      	bne.n	8003186 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003180:	4b11      	ldr	r3, [pc, #68]	; (80031c8 <_sbrk+0x64>)
 8003182:	4a12      	ldr	r2, [pc, #72]	; (80031cc <_sbrk+0x68>)
 8003184:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003186:	4b10      	ldr	r3, [pc, #64]	; (80031c8 <_sbrk+0x64>)
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4413      	add	r3, r2
 800318e:	693a      	ldr	r2, [r7, #16]
 8003190:	429a      	cmp	r2, r3
 8003192:	d207      	bcs.n	80031a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003194:	f006 f8e2 	bl	800935c <__errno>
 8003198:	4603      	mov	r3, r0
 800319a:	220c      	movs	r2, #12
 800319c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800319e:	f04f 33ff 	mov.w	r3, #4294967295
 80031a2:	e009      	b.n	80031b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80031a4:	4b08      	ldr	r3, [pc, #32]	; (80031c8 <_sbrk+0x64>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80031aa:	4b07      	ldr	r3, [pc, #28]	; (80031c8 <_sbrk+0x64>)
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4413      	add	r3, r2
 80031b2:	4a05      	ldr	r2, [pc, #20]	; (80031c8 <_sbrk+0x64>)
 80031b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80031b6:	68fb      	ldr	r3, [r7, #12]
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3718      	adds	r7, #24
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}
 80031c0:	20020000 	.word	0x20020000
 80031c4:	00000400 	.word	0x00000400
 80031c8:	20000238 	.word	0x20000238
 80031cc:	20002ee8 	.word	0x20002ee8

080031d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80031d0:	b480      	push	{r7}
 80031d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80031d4:	4b06      	ldr	r3, [pc, #24]	; (80031f0 <SystemInit+0x20>)
 80031d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031da:	4a05      	ldr	r2, [pc, #20]	; (80031f0 <SystemInit+0x20>)
 80031dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80031e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80031e4:	bf00      	nop
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr
 80031ee:	bf00      	nop
 80031f0:	e000ed00 	.word	0xe000ed00

080031f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80031f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800322c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80031f8:	480d      	ldr	r0, [pc, #52]	; (8003230 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80031fa:	490e      	ldr	r1, [pc, #56]	; (8003234 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80031fc:	4a0e      	ldr	r2, [pc, #56]	; (8003238 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80031fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003200:	e002      	b.n	8003208 <LoopCopyDataInit>

08003202 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003202:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003204:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003206:	3304      	adds	r3, #4

08003208 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003208:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800320a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800320c:	d3f9      	bcc.n	8003202 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800320e:	4a0b      	ldr	r2, [pc, #44]	; (800323c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003210:	4c0b      	ldr	r4, [pc, #44]	; (8003240 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003212:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003214:	e001      	b.n	800321a <LoopFillZerobss>

08003216 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003216:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003218:	3204      	adds	r2, #4

0800321a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800321a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800321c:	d3fb      	bcc.n	8003216 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800321e:	f7ff ffd7 	bl	80031d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003222:	f006 f8a1 	bl	8009368 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003226:	f7fe fae7 	bl	80017f8 <main>
  bx  lr    
 800322a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800322c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003230:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003234:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8003238:	0802ceac 	.word	0x0802ceac
  ldr r2, =_sbss
 800323c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8003240:	20002ee8 	.word	0x20002ee8

08003244 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003244:	e7fe      	b.n	8003244 <ADC_IRQHandler>

08003246 <RA8875_ReadID>:
*********************************************************************************************************
*	Func name: RA8875_ReadID
*********************************************************************************************************
*/
uint16_t RA8875_ReadID(void)
{
 8003246:	b580      	push	{r7, lr}
 8003248:	af00      	add	r7, sp, #0
	return RA8875_ReadReg(0x00);
 800324a:	2000      	movs	r0, #0
 800324c:	f000 f804 	bl	8003258 <RA8875_ReadReg>
 8003250:	4603      	mov	r3, r0
 8003252:	b29b      	uxth	r3, r3
}
 8003254:	4618      	mov	r0, r3
 8003256:	bd80      	pop	{r7, pc}

08003258 <RA8875_ReadReg>:
*********************************************************************************************************
*	Func name: RA8875_WriteReg
*********************************************************************************************************
*/
static uint8_t RA8875_ReadReg(uint8_t _ucRegAddr)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b082      	sub	sp, #8
 800325c:	af00      	add	r7, sp, #0
 800325e:	4603      	mov	r3, r0
 8003260:	71fb      	strb	r3, [r7, #7]
	RA8875_WriteCmd(_ucRegAddr);
 8003262:	79fb      	ldrb	r3, [r7, #7]
 8003264:	4618      	mov	r0, r3
 8003266:	f002 f891 	bl	800538c <RA8875_WriteCmd>
	return RA8875_ReadData();
 800326a:	f002 f8a1 	bl	80053b0 <RA8875_ReadData>
 800326e:	4603      	mov	r3, r0
}
 8003270:	4618      	mov	r0, r3
 8003272:	3708      	adds	r7, #8
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}

08003278 <RA8875_WriteReg>:
*********************************************************************************************************
*	Func name: RA8875_WriteReg
*********************************************************************************************************
*/
static void RA8875_WriteReg(uint8_t _ucRegAddr, uint8_t _ucRegValue)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b082      	sub	sp, #8
 800327c:	af00      	add	r7, sp, #0
 800327e:	4603      	mov	r3, r0
 8003280:	460a      	mov	r2, r1
 8003282:	71fb      	strb	r3, [r7, #7]
 8003284:	4613      	mov	r3, r2
 8003286:	71bb      	strb	r3, [r7, #6]
	s_ucRA8875Busy = 1;
 8003288:	4b08      	ldr	r3, [pc, #32]	; (80032ac <RA8875_WriteReg+0x34>)
 800328a:	2201      	movs	r2, #1
 800328c:	701a      	strb	r2, [r3, #0]

	RA8875_WriteCmd(_ucRegAddr);
 800328e:	79fb      	ldrb	r3, [r7, #7]
 8003290:	4618      	mov	r0, r3
 8003292:	f002 f87b 	bl	800538c <RA8875_WriteCmd>
	RA8875_WriteData(_ucRegValue);
 8003296:	79bb      	ldrb	r3, [r7, #6]
 8003298:	4618      	mov	r0, r3
 800329a:	f002 f898 	bl	80053ce <RA8875_WriteData>

	s_ucRA8875Busy = 0;
 800329e:	4b03      	ldr	r3, [pc, #12]	; (80032ac <RA8875_WriteReg+0x34>)
 80032a0:	2200      	movs	r2, #0
 80032a2:	701a      	strb	r2, [r3, #0]
}
 80032a4:	bf00      	nop
 80032a6:	3708      	adds	r7, #8
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}
 80032ac:	20000240 	.word	0x20000240

080032b0 <RA8875_InitHard>:
*********************************************************************************************************
*	Func name: RA8875_InitHard
*********************************************************************************************************
*/
void RA8875_InitHard(void)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b082      	sub	sp, #8
 80032b4:	af00      	add	r7, sp, #0
#endif

	/* ¶ÁÈ¡ RA8875 Ð¾Æ¬¶îGPIXÒý½ÅµÄµçÆ½×´Ì¬£»1±íÊ¾4.3´çÆÁ£»0±íÊ¾7´çÆÁ
	¡¾±¸×¢¡¿ÕâÊÇ°²¸»À³µç×ÓÎªÁË±ãÓÚÍ³Ò»²âÊÔÀý³Ì£¬ÔÚLCDÄ£¿éÉÏ×öµÄÓ²¼þ±êÊ¶¡£ÔÚ×ö²úÆ·Ê±£¬²»±Ø×Ô¶¯Ê¶±ð¡£
	*/
	ucGPIX = RA8875_ReadReg(0xC7);
 80032b6:	20c7      	movs	r0, #199	; 0xc7
 80032b8:	f7ff ffce 	bl	8003258 <RA8875_ReadReg>
 80032bc:	4603      	mov	r3, r0
 80032be:	71fb      	strb	r3, [r7, #7]

	if (ucGPIX == 1)	/* 	GPIX = 1 ±íÊ¾ 4.3 ´çÆÁ 480x272 */
 80032c0:	79fb      	ldrb	r3, [r7, #7]
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d156      	bne.n	8003374 <RA8875_InitHard+0xc4>
	{
		/* ³õÊ¼»¯PLL.  ¾§ÕñÆµÂÊÎª25M */
		RA8875_WriteCmd(0x88);
 80032c6:	2088      	movs	r0, #136	; 0x88
 80032c8:	f002 f860 	bl	800538c <RA8875_WriteCmd>
		RA8875_Delaly1us();		/* ÑÓ³Ù1us */
 80032cc:	f002 f8a0 	bl	8005410 <RA8875_Delaly1us>
		RA8875_WriteData(10);	/* PLLDIVM [7] = 0 ;  PLLDIVN [4:0] = 10 */
 80032d0:	200a      	movs	r0, #10
 80032d2:	f002 f87c 	bl	80053ce <RA8875_WriteData>

	    RA8875_Delaly1ms();
 80032d6:	f002 f8ae 	bl	8005436 <RA8875_Delaly1ms>

		RA8875_WriteCmd(0x89);
 80032da:	2089      	movs	r0, #137	; 0x89
 80032dc:	f002 f856 	bl	800538c <RA8875_WriteCmd>
		RA8875_Delaly1us();		/* ÑÓ³Ù1us */
 80032e0:	f002 f896 	bl	8005410 <RA8875_Delaly1us>
		RA8875_WriteData(2);		/* PLLDIVK[2:0] = 2, ³ýÒÔ4 */
 80032e4:	2002      	movs	r0, #2
 80032e6:	f002 f872 	bl	80053ce <RA8875_WriteData>
		          = 25M * (10 + 1) / ((0 + 1) * (2 ^ 2))
				  = 68.75MHz
		*/

		/* REG[88h]»òREG[89h]±»Éè¶¨ºó£¬Îª±£Ö¤PLL Êä³öÎÈ¶¨£¬ÐëµÈ´ýÒ»¶Î¡¸ËøÆµÊ±¼ä¡¹(< 100us)¡£*/
	    RA8875_Delaly1ms();
 80032ea:	f002 f8a4 	bl	8005436 <RA8875_Delaly1ms>
				1xb : 16-Î»MCU ½Ó¿Ú¡£ ¡¾Ñ¡Õâ¸ö¡¿
		*/
		#ifdef IF_SPI_EN
			RA8875_WriteReg(0x10, (1 <<3 ) | (0 << 1));	/* SPI½Ó¿ÚÊ±£¬ÅäÖÃ8Î»£¬65KÉ« */
		#else
			RA8875_WriteReg(0x10, (1 <<3 ) | (1 << 1));	/* ÅäÖÃ16Î»MCU²¢¿Ú£¬65KÉ« */
 80032ee:	210a      	movs	r1, #10
 80032f0:	2010      	movs	r0, #16
 80032f2:	f7ff ffc1 	bl	8003278 <RA8875_WriteReg>
				00b: PCLK ÆµÂÊÖÜÆÚ= ÏµÍ³ÆµÂÊÖÜÆÚ¡£
				01b: PCLK ÆµÂÊÖÜÆÚ= 2 ±¶µÄÏµÍ³ÆµÂÊÖÜÆÚ¡£
				10b: PCLK ÆµÂÊÖÜÆÚ= 4 ±¶µÄÏµÍ³ÆµÂÊÖÜÆÚ¡£
				11b: PCLK ÆµÂÊÖÜÆÚ= 8 ±¶µÄÏµÍ³ÆµÂÊÖÜÆÚ¡£
		*/
	    RA8875_WriteReg(0x04, 0x82);    /* ÉèÖÃPCLK·´Ïà */
 80032f6:	2182      	movs	r1, #130	; 0x82
 80032f8:	2004      	movs	r0, #4
 80032fa:	f7ff ffbd 	bl	8003278 <RA8875_WriteReg>
	    RA8875_Delaly1ms();
 80032fe:	f002 f89a 	bl	8005436 <RA8875_Delaly1ms>

	    //Horizontal set
	    //HDWR//Horizontal Display Width Setting Bit[6:0]
	 	//Horizontal display width(pixels) = (HDWR + 1)*8
	    RA8875_WriteReg(0x14, 0x3B);
 8003302:	213b      	movs	r1, #59	; 0x3b
 8003304:	2014      	movs	r0, #20
 8003306:	f7ff ffb7 	bl	8003278 <RA8875_WriteReg>
	    RA8875_WriteReg(0x15, 0x00);
 800330a:	2100      	movs	r1, #0
 800330c:	2015      	movs	r0, #21
 800330e:	f7ff ffb3 	bl	8003278 <RA8875_WriteReg>

	    //HNDR//Horizontal Non-Display Period Bit[4:0]
	    //Horizontal Non-Display Period (pixels) = (HNDR + 1)*8
		RA8875_WriteReg(0x16, 0x01);
 8003312:	2101      	movs	r1, #1
 8003314:	2016      	movs	r0, #22
 8003316:	f7ff ffaf 	bl	8003278 <RA8875_WriteReg>

	    //HSTR//HSYNC Start Position[4:0]
	    //HSYNC Start Position(PCLK) = (HSTR + 1)*8
		RA8875_WriteReg(0x17, 0x00);
 800331a:	2100      	movs	r1, #0
 800331c:	2017      	movs	r0, #23
 800331e:	f7ff ffab 	bl	8003278 <RA8875_WriteReg>

	    //HPWR//HSYNC Polarity ,The period width of HSYNC.
	    //HSYNC Width [4:0]   HSYNC Pulse width(PCLK) = (HPWR + 1)*8
		RA8875_WriteReg(0x18, 0x05);
 8003322:	2105      	movs	r1, #5
 8003324:	2018      	movs	r0, #24
 8003326:	f7ff ffa7 	bl	8003278 <RA8875_WriteReg>

	    //Vertical set
	    //VDHR0 //Vertical Display Height Bit [7:0]
	    //Vertical pixels = VDHR + 1
		RA8875_WriteReg(0x19, 0x0F);
 800332a:	210f      	movs	r1, #15
 800332c:	2019      	movs	r0, #25
 800332e:	f7ff ffa3 	bl	8003278 <RA8875_WriteReg>

	    //VDHR1 //Vertical Display Height Bit [8]
	    //Vertical pixels = VDHR + 1
		RA8875_WriteReg(0x1A, 0x01);
 8003332:	2101      	movs	r1, #1
 8003334:	201a      	movs	r0, #26
 8003336:	f7ff ff9f 	bl	8003278 <RA8875_WriteReg>

	    //VNDR0 //Vertical Non-Display Period Bit [7:0]
	    //Vertical Non-Display area = (VNDR + 1)
		RA8875_WriteReg(0x1B, 0x02);
 800333a:	2102      	movs	r1, #2
 800333c:	201b      	movs	r0, #27
 800333e:	f7ff ff9b 	bl	8003278 <RA8875_WriteReg>

	    //VNDR1 //Vertical Non-Display Period Bit [8]
	    //Vertical Non-Display area = (VNDR + 1)
		RA8875_WriteReg(0x1C, 0x00);
 8003342:	2100      	movs	r1, #0
 8003344:	201c      	movs	r0, #28
 8003346:	f7ff ff97 	bl	8003278 <RA8875_WriteReg>

	    //VSTR0 //VSYNC Start Position[7:0]
	    //VSYNC Start Position(PCLK) = (VSTR + 1)
		RA8875_WriteReg(0x1D, 0x07);
 800334a:	2107      	movs	r1, #7
 800334c:	201d      	movs	r0, #29
 800334e:	f7ff ff93 	bl	8003278 <RA8875_WriteReg>

	    //VSTR1 //VSYNC Start Position[8]
	    //VSYNC Start Position(PCLK) = (VSTR + 1)
		RA8875_WriteReg(0x1E, 0x00);
 8003352:	2100      	movs	r1, #0
 8003354:	201e      	movs	r0, #30
 8003356:	f7ff ff8f 	bl	8003278 <RA8875_WriteReg>

	    //VPWR //VSYNC Polarity ,VSYNC Pulse Width[6:0]
	    //VSYNC Pulse Width(PCLK) = (VPWR + 1)
	    RA8875_WriteReg(0x1F, 0x09);
 800335a:	2109      	movs	r1, #9
 800335c:	201f      	movs	r0, #31
 800335e:	f7ff ff8b 	bl	8003278 <RA8875_WriteReg>


	    g_LcdHeight = LCD_43_HEIGHT;
 8003362:	4b3d      	ldr	r3, [pc, #244]	; (8003458 <RA8875_InitHard+0x1a8>)
 8003364:	f44f 7288 	mov.w	r2, #272	; 0x110
 8003368:	801a      	strh	r2, [r3, #0]
		g_LcdWidth = LCD_43_WIDTH;
 800336a:	4b3c      	ldr	r3, [pc, #240]	; (800345c <RA8875_InitHard+0x1ac>)
 800336c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003370:	801a      	strh	r2, [r3, #0]
 8003372:	e055      	b.n	8003420 <RA8875_InitHard+0x170>
	}
	else	/* GPIX = 0 ±íÊ¾7´çÆÁ(800x480) */
	{
	    g_LcdHeight = LCD_70_HEIGHT;
 8003374:	4b38      	ldr	r3, [pc, #224]	; (8003458 <RA8875_InitHard+0x1a8>)
 8003376:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800337a:	801a      	strh	r2, [r3, #0]
		g_LcdWidth = LCD_70_WIDTH;
 800337c:	4b37      	ldr	r3, [pc, #220]	; (800345c <RA8875_InitHard+0x1ac>)
 800337e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003382:	801a      	strh	r2, [r3, #0]

		/* ³õÊ¼»¯PLL.  ¾§ÕñÆµÂÊÎª25M */
		RA8875_WriteCmd(0x88);
 8003384:	2088      	movs	r0, #136	; 0x88
 8003386:	f002 f801 	bl	800538c <RA8875_WriteCmd>
		RA8875_Delaly1us();		/* ÑÓ³Ù1us */
 800338a:	f002 f841 	bl	8005410 <RA8875_Delaly1us>
		RA8875_WriteData(12);	/* PLLDIVM [7] = 0 ;  PLLDIVN [4:0] = 10 */
 800338e:	200c      	movs	r0, #12
 8003390:	f002 f81d 	bl	80053ce <RA8875_WriteData>

	    RA8875_Delaly1ms();
 8003394:	f002 f84f 	bl	8005436 <RA8875_Delaly1ms>

		RA8875_WriteCmd(0x89);
 8003398:	2089      	movs	r0, #137	; 0x89
 800339a:	f001 fff7 	bl	800538c <RA8875_WriteCmd>
		RA8875_Delaly1us();		/* ÑÓ³Ù1us */
 800339e:	f002 f837 	bl	8005410 <RA8875_Delaly1us>
		RA8875_WriteData(2);	/* PLLDIVK[2:0] = 2, ³ýÒÔ4 */
 80033a2:	2002      	movs	r0, #2
 80033a4:	f002 f813 	bl	80053ce <RA8875_WriteData>
		          = 25M * (12 + 1) / ((0 + 1) * (2 ^ 2))
				  = 81.25MHz
		*/

		/* REG[88h]»òREG[89h]±»Éè¶¨ºó£¬Îª±£Ö¤PLL Êä³öÎÈ¶¨£¬ÐëµÈ´ýÒ»¶Î¡¸ËøÆµÊ±¼ä¡¹(< 100us)¡£*/
	    RA8875_Delaly1ms();
 80033a8:	f002 f845 	bl	8005436 <RA8875_Delaly1ms>
				1xb : 16-Î»MCU ½Ó¿Ú¡£ ¡¾Ñ¡Õâ¸ö¡¿
		*/
		#ifdef IF_SPI_EN
			RA8875_WriteReg(0x10, (1 <<3 ) | (0 << 1));	/* SPI½Ó¿ÚÊ±£¬ÅäÖÃ8Î»£¬65KÉ« */
		#else
			RA8875_WriteReg(0x10, (1 <<3 ) | (1 << 1));	/* ÅäÖÃ16Î»MCU²¢¿Ú£¬65KÉ« */
 80033ac:	210a      	movs	r1, #10
 80033ae:	2010      	movs	r0, #16
 80033b0:	f7ff ff62 	bl	8003278 <RA8875_WriteReg>
				00b: PCLK ÆµÂÊÖÜÆÚ= ÏµÍ³ÆµÂÊÖÜÆÚ¡£
				01b: PCLK ÆµÂÊÖÜÆÚ= 2 ±¶µÄÏµÍ³ÆµÂÊÖÜÆÚ¡£
				10b: PCLK ÆµÂÊÖÜÆÚ= 4 ±¶µÄÏµÍ³ÆµÂÊÖÜÆÚ¡£
				11b: PCLK ÆµÂÊÖÜÆÚ= 8 ±¶µÄÏµÍ³ÆµÂÊÖÜÆÚ¡£
		*/
	    RA8875_WriteReg(0x04, 0x81);
 80033b4:	2181      	movs	r1, #129	; 0x81
 80033b6:	2004      	movs	r0, #4
 80033b8:	f7ff ff5e 	bl	8003278 <RA8875_WriteReg>
	    RA8875_Delaly1ms();
 80033bc:	f002 f83b 	bl	8005436 <RA8875_Delaly1ms>

	#if 1
		/* OTD9960 & OTA7001 ÉèÖÃ */
		RA8875_WriteReg(0x14, 0x63);
 80033c0:	2163      	movs	r1, #99	; 0x63
 80033c2:	2014      	movs	r0, #20
 80033c4:	f7ff ff58 	bl	8003278 <RA8875_WriteReg>
		RA8875_WriteReg(0x15, 0x00);
 80033c8:	2100      	movs	r1, #0
 80033ca:	2015      	movs	r0, #21
 80033cc:	f7ff ff54 	bl	8003278 <RA8875_WriteReg>
		RA8875_WriteReg(0x16, 0x03);
 80033d0:	2103      	movs	r1, #3
 80033d2:	2016      	movs	r0, #22
 80033d4:	f7ff ff50 	bl	8003278 <RA8875_WriteReg>
		RA8875_WriteReg(0x17, 0x03);
 80033d8:	2103      	movs	r1, #3
 80033da:	2017      	movs	r0, #23
 80033dc:	f7ff ff4c 	bl	8003278 <RA8875_WriteReg>
		RA8875_WriteReg(0x18, 0x0B);
 80033e0:	210b      	movs	r1, #11
 80033e2:	2018      	movs	r0, #24
 80033e4:	f7ff ff48 	bl	8003278 <RA8875_WriteReg>
		RA8875_WriteReg(0x19, 0xDF);
 80033e8:	21df      	movs	r1, #223	; 0xdf
 80033ea:	2019      	movs	r0, #25
 80033ec:	f7ff ff44 	bl	8003278 <RA8875_WriteReg>
		RA8875_WriteReg(0x1A, 0x01);
 80033f0:	2101      	movs	r1, #1
 80033f2:	201a      	movs	r0, #26
 80033f4:	f7ff ff40 	bl	8003278 <RA8875_WriteReg>
		RA8875_WriteReg(0x1B, 0x1F);
 80033f8:	211f      	movs	r1, #31
 80033fa:	201b      	movs	r0, #27
 80033fc:	f7ff ff3c 	bl	8003278 <RA8875_WriteReg>
		RA8875_WriteReg(0x1C, 0x00);
 8003400:	2100      	movs	r1, #0
 8003402:	201c      	movs	r0, #28
 8003404:	f7ff ff38 	bl	8003278 <RA8875_WriteReg>
		RA8875_WriteReg(0x1D, 0x16);
 8003408:	2116      	movs	r1, #22
 800340a:	201d      	movs	r0, #29
 800340c:	f7ff ff34 	bl	8003278 <RA8875_WriteReg>
		RA8875_WriteReg(0x1E, 0x00);
 8003410:	2100      	movs	r1, #0
 8003412:	201e      	movs	r0, #30
 8003414:	f7ff ff30 	bl	8003278 <RA8875_WriteReg>
		RA8875_WriteReg(0x1F, 0x01);
 8003418:	2101      	movs	r1, #1
 800341a:	201f      	movs	r0, #31
 800341c:	f7ff ff2c 	bl	8003278 <RA8875_WriteReg>
	    RA8875_WriteReg(0x1F, 0x01);
	#endif
	}

	/* ÉèÖÃTFTÃæ°åµÄ DISP  Òý½ÅÎª¸ß£¬Ê¹ÄÜÃæ°å. °²¸»À³TFTÄ£¿éµÄDISPÒý½ÅÁ¬½Óµ½RA8875Ð¾Æ¬µÄGP0X½Å */
	RA8875_WriteReg(0xC7, 0x01);	/* DISP = 1 */
 8003420:	2101      	movs	r1, #1
 8003422:	20c7      	movs	r0, #199	; 0xc7
 8003424:	f7ff ff28 	bl	8003278 <RA8875_WriteReg>

	/* LCD ÏÔÊ¾/¹Ø±ÕÑ¶ºÅ (LCD Display on) */
	RA8875_WriteReg(0x01, 0x80);
 8003428:	2180      	movs	r1, #128	; 0x80
 800342a:	2001      	movs	r0, #1
 800342c:	f7ff ff24 	bl	8003278 <RA8875_WriteReg>

		Bit 0 ÄÚ´æ¶ÁÈ¡¹â±ê×Ô¶¯Ôö¼Ó¹¦ÄÜÉè¶¨
			0 : µ±ÄÚ´æ¶ÁÈ¡Ê±¹â±êÎ»ÖÃ×Ô¶¯¼ÓÒ»¡£
			1 : µ±ÄÚ´æ¶ÁÈ¡Ê±¹â±êÎ»ÖÃ²»»á×Ô¶¯¼ÓÒ»¡£
	*/
	RA8875_WriteReg(0x40, 0x00);	/* Ñ¡Ôñ»æÍ¼Ä£Ê½ */
 8003430:	2100      	movs	r1, #0
 8003432:	2040      	movs	r0, #64	; 0x40
 8003434:	f7ff ff20 	bl	8003278 <RA8875_WriteReg>


	/* 	REG[41h] Memory Write Control Register1 (MWCR1)
		Ð´ÈëÄ¿µÄÎ»ÖÃ£¬Ñ¡ÔñÍ¼²ã1
	*/
	RA8875_WriteReg(0x41, 0x00);	/* Ñ¡Ôñ»æÍ¼Ä£Ê½, Ä¿µÄÎªCGRAM */
 8003438:	2100      	movs	r1, #0
 800343a:	2041      	movs	r0, #65	; 0x41
 800343c:	f7ff ff1c 	bl	8003278 <RA8875_WriteReg>

	RA8875_SetDispWin(0, 0, g_LcdHeight, g_LcdWidth);
 8003440:	4b05      	ldr	r3, [pc, #20]	; (8003458 <RA8875_InitHard+0x1a8>)
 8003442:	881a      	ldrh	r2, [r3, #0]
 8003444:	4b05      	ldr	r3, [pc, #20]	; (800345c <RA8875_InitHard+0x1ac>)
 8003446:	881b      	ldrh	r3, [r3, #0]
 8003448:	2100      	movs	r1, #0
 800344a:	2000      	movs	r0, #0
 800344c:	f000 f808 	bl	8003460 <RA8875_SetDispWin>

#ifdef IF_SPI_EN
	RA8875_HighSpeedSPI();		/* ÅäÖÃÍê±Ïºó£¬ÇÐ»»SPIµ½¸ßËÙÄ£Ê½ */
#endif
}
 8003450:	bf00      	nop
 8003452:	3708      	adds	r7, #8
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}
 8003458:	2000000a 	.word	0x2000000a
 800345c:	2000000c 	.word	0x2000000c

08003460 <RA8875_SetDispWin>:
*********************************************************************************************************
*	Func name: RA8875_SetDispWin
*********************************************************************************************************
*/
void RA8875_SetDispWin(uint16_t _usX, uint16_t _usY, uint16_t _usHeight, uint16_t _usWidth)
{
 8003460:	b590      	push	{r4, r7, lr}
 8003462:	b085      	sub	sp, #20
 8003464:	af00      	add	r7, sp, #0
 8003466:	4604      	mov	r4, r0
 8003468:	4608      	mov	r0, r1
 800346a:	4611      	mov	r1, r2
 800346c:	461a      	mov	r2, r3
 800346e:	4623      	mov	r3, r4
 8003470:	80fb      	strh	r3, [r7, #6]
 8003472:	4603      	mov	r3, r0
 8003474:	80bb      	strh	r3, [r7, #4]
 8003476:	460b      	mov	r3, r1
 8003478:	807b      	strh	r3, [r7, #2]
 800347a:	4613      	mov	r3, r2
 800347c:	803b      	strh	r3, [r7, #0]
		×óÉÏ½ÇÊÇ×ø±êÁãµã, É¨Ãè·½Ïò£¬ÏÈ´Ó×óµ½ÓÒ£¬ÔÙ´ÓÉÏµ½ÏÂ¡£

		Èç¹ûÐèÒª×öÊúÆÁ·½Ê½£¬ÄãÐèÒª½øÐÐÎïÀí×ø±êºÍÂß¼­×ø±êµÄ×ª»»
	*/

	RA8875_WriteReg(0x30, _usX);
 800347e:	88fb      	ldrh	r3, [r7, #6]
 8003480:	b2db      	uxtb	r3, r3
 8003482:	4619      	mov	r1, r3
 8003484:	2030      	movs	r0, #48	; 0x30
 8003486:	f7ff fef7 	bl	8003278 <RA8875_WriteReg>
    RA8875_WriteReg(0x31, _usX >> 8);
 800348a:	88fb      	ldrh	r3, [r7, #6]
 800348c:	0a1b      	lsrs	r3, r3, #8
 800348e:	b29b      	uxth	r3, r3
 8003490:	b2db      	uxtb	r3, r3
 8003492:	4619      	mov	r1, r3
 8003494:	2031      	movs	r0, #49	; 0x31
 8003496:	f7ff feef 	bl	8003278 <RA8875_WriteReg>

	RA8875_WriteReg(0x32, _usY);
 800349a:	88bb      	ldrh	r3, [r7, #4]
 800349c:	b2db      	uxtb	r3, r3
 800349e:	4619      	mov	r1, r3
 80034a0:	2032      	movs	r0, #50	; 0x32
 80034a2:	f7ff fee9 	bl	8003278 <RA8875_WriteReg>
    RA8875_WriteReg(0x33, _usY >> 8);
 80034a6:	88bb      	ldrh	r3, [r7, #4]
 80034a8:	0a1b      	lsrs	r3, r3, #8
 80034aa:	b29b      	uxth	r3, r3
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	4619      	mov	r1, r3
 80034b0:	2033      	movs	r0, #51	; 0x33
 80034b2:	f7ff fee1 	bl	8003278 <RA8875_WriteReg>

	usTemp = _usWidth + _usX - 1;
 80034b6:	883a      	ldrh	r2, [r7, #0]
 80034b8:	88fb      	ldrh	r3, [r7, #6]
 80034ba:	4413      	add	r3, r2
 80034bc:	b29b      	uxth	r3, r3
 80034be:	3b01      	subs	r3, #1
 80034c0:	81fb      	strh	r3, [r7, #14]
	RA8875_WriteReg(0x34, usTemp);
 80034c2:	89fb      	ldrh	r3, [r7, #14]
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	4619      	mov	r1, r3
 80034c8:	2034      	movs	r0, #52	; 0x34
 80034ca:	f7ff fed5 	bl	8003278 <RA8875_WriteReg>
    RA8875_WriteReg(0x35, usTemp >> 8);
 80034ce:	89fb      	ldrh	r3, [r7, #14]
 80034d0:	0a1b      	lsrs	r3, r3, #8
 80034d2:	b29b      	uxth	r3, r3
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	4619      	mov	r1, r3
 80034d8:	2035      	movs	r0, #53	; 0x35
 80034da:	f7ff fecd 	bl	8003278 <RA8875_WriteReg>

	usTemp = _usHeight + _usY - 1;
 80034de:	887a      	ldrh	r2, [r7, #2]
 80034e0:	88bb      	ldrh	r3, [r7, #4]
 80034e2:	4413      	add	r3, r2
 80034e4:	b29b      	uxth	r3, r3
 80034e6:	3b01      	subs	r3, #1
 80034e8:	81fb      	strh	r3, [r7, #14]
	RA8875_WriteReg(0x36, usTemp);
 80034ea:	89fb      	ldrh	r3, [r7, #14]
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	4619      	mov	r1, r3
 80034f0:	2036      	movs	r0, #54	; 0x36
 80034f2:	f7ff fec1 	bl	8003278 <RA8875_WriteReg>
    RA8875_WriteReg(0x37, usTemp >> 8);
 80034f6:	89fb      	ldrh	r3, [r7, #14]
 80034f8:	0a1b      	lsrs	r3, r3, #8
 80034fa:	b29b      	uxth	r3, r3
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	4619      	mov	r1, r3
 8003500:	2037      	movs	r0, #55	; 0x37
 8003502:	f7ff feb9 	bl	8003278 <RA8875_WriteReg>

	RA8875_SetCursor(_usX, _usY);
 8003506:	88ba      	ldrh	r2, [r7, #4]
 8003508:	88fb      	ldrh	r3, [r7, #6]
 800350a:	4611      	mov	r1, r2
 800350c:	4618      	mov	r0, r3
 800350e:	f000 f819 	bl	8003544 <RA8875_SetCursor>

	/* ±£´æµ±Ç°´°¿ÚÐÅÏ¢£¬Ìá¸ßÒÔºóµ¥É«Ìî³ä²Ù×÷µÄÐ§ÂÊ.
	ÁíÍâÒ»ÖÖ×ö·¨ÊÇÍ¨¹ý¶ÁÈ¡0x30-0x37¼Ä´æÆ÷»ñµÃµ±Ç°´°¿Ú£¬²»¹ýÐ§ÂÊ½ÏµÍ */
	s_WinX = _usX;
 8003512:	4a08      	ldr	r2, [pc, #32]	; (8003534 <RA8875_SetDispWin+0xd4>)
 8003514:	88fb      	ldrh	r3, [r7, #6]
 8003516:	8013      	strh	r3, [r2, #0]
	s_WinY = _usY;
 8003518:	4a07      	ldr	r2, [pc, #28]	; (8003538 <RA8875_SetDispWin+0xd8>)
 800351a:	88bb      	ldrh	r3, [r7, #4]
 800351c:	8013      	strh	r3, [r2, #0]
	s_WinHeight = _usHeight;
 800351e:	4a07      	ldr	r2, [pc, #28]	; (800353c <RA8875_SetDispWin+0xdc>)
 8003520:	887b      	ldrh	r3, [r7, #2]
 8003522:	8013      	strh	r3, [r2, #0]
	s_WinWidth = _usWidth;
 8003524:	4a06      	ldr	r2, [pc, #24]	; (8003540 <RA8875_SetDispWin+0xe0>)
 8003526:	883b      	ldrh	r3, [r7, #0]
 8003528:	8013      	strh	r3, [r2, #0]
}
 800352a:	bf00      	nop
 800352c:	3714      	adds	r7, #20
 800352e:	46bd      	mov	sp, r7
 8003530:	bd90      	pop	{r4, r7, pc}
 8003532:	bf00      	nop
 8003534:	20000242 	.word	0x20000242
 8003538:	20000244 	.word	0x20000244
 800353c:	20000004 	.word	0x20000004
 8003540:	20000006 	.word	0x20000006

08003544 <RA8875_SetCursor>:
*********************************************************************************************************
*	Funa name: RA8875_SetCursor
*********************************************************************************************************
*/
static void RA8875_SetCursor(uint16_t _usX, uint16_t _usY)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b082      	sub	sp, #8
 8003548:	af00      	add	r7, sp, #0
 800354a:	4603      	mov	r3, r0
 800354c:	460a      	mov	r2, r1
 800354e:	80fb      	strh	r3, [r7, #6]
 8003550:	4613      	mov	r3, r2
 8003552:	80bb      	strh	r3, [r7, #4]
	/* ÉèÖÃÄÚ´æÐ´¹â±êµÄ×ø±ê ¡¾×¢Òâ0x80-83 ÊÇ¹â±êÍ¼ÐÎµÄ×ø±ê¡¿ */
	RA8875_WriteReg(0x46, _usX);
 8003554:	88fb      	ldrh	r3, [r7, #6]
 8003556:	b2db      	uxtb	r3, r3
 8003558:	4619      	mov	r1, r3
 800355a:	2046      	movs	r0, #70	; 0x46
 800355c:	f7ff fe8c 	bl	8003278 <RA8875_WriteReg>
	RA8875_WriteReg(0x47, _usX >> 8);
 8003560:	88fb      	ldrh	r3, [r7, #6]
 8003562:	0a1b      	lsrs	r3, r3, #8
 8003564:	b29b      	uxth	r3, r3
 8003566:	b2db      	uxtb	r3, r3
 8003568:	4619      	mov	r1, r3
 800356a:	2047      	movs	r0, #71	; 0x47
 800356c:	f7ff fe84 	bl	8003278 <RA8875_WriteReg>
	RA8875_WriteReg(0x48, _usY);
 8003570:	88bb      	ldrh	r3, [r7, #4]
 8003572:	b2db      	uxtb	r3, r3
 8003574:	4619      	mov	r1, r3
 8003576:	2048      	movs	r0, #72	; 0x48
 8003578:	f7ff fe7e 	bl	8003278 <RA8875_WriteReg>
	RA8875_WriteReg(0x49, _usY >> 8);
 800357c:	88bb      	ldrh	r3, [r7, #4]
 800357e:	0a1b      	lsrs	r3, r3, #8
 8003580:	b29b      	uxth	r3, r3
 8003582:	b2db      	uxtb	r3, r3
 8003584:	4619      	mov	r1, r3
 8003586:	2049      	movs	r0, #73	; 0x49
 8003588:	f7ff fe76 	bl	8003278 <RA8875_WriteReg>
}
 800358c:	bf00      	nop
 800358e:	3708      	adds	r7, #8
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}

08003594 <RA8875_ClrScr>:
*********************************************************************************************************
*	Func name: RA8875_ClrScr
*********************************************************************************************************
*/
void RA8875_ClrScr(uint16_t _usColor)
{
 8003594:	b590      	push	{r4, r7, lr}
 8003596:	b085      	sub	sp, #20
 8003598:	af02      	add	r7, sp, #8
 800359a:	4603      	mov	r3, r0
 800359c:	80fb      	strh	r3, [r7, #6]
	BTE_SetTarBlock(s_WinX, s_WinY, s_WinHeight, s_WinWidth, 0);	/* ÉèÖÃBTEÎ»ÖÃºÍ¿í¶È¸ß¶ÈÒÔ¼°Ä¿±êÍ¼²ã£¨0»ò1£© */
 800359e:	4b0d      	ldr	r3, [pc, #52]	; (80035d4 <RA8875_ClrScr+0x40>)
 80035a0:	8818      	ldrh	r0, [r3, #0]
 80035a2:	4b0d      	ldr	r3, [pc, #52]	; (80035d8 <RA8875_ClrScr+0x44>)
 80035a4:	8819      	ldrh	r1, [r3, #0]
 80035a6:	4b0d      	ldr	r3, [pc, #52]	; (80035dc <RA8875_ClrScr+0x48>)
 80035a8:	881a      	ldrh	r2, [r3, #0]
 80035aa:	4b0d      	ldr	r3, [pc, #52]	; (80035e0 <RA8875_ClrScr+0x4c>)
 80035ac:	881b      	ldrh	r3, [r3, #0]
 80035ae:	2400      	movs	r4, #0
 80035b0:	9400      	str	r4, [sp, #0]
 80035b2:	f000 f857 	bl	8003664 <BTE_SetTarBlock>
	BTE_SetOperateCode(0x0C);		/* Éè¶¨BTE ²Ù×÷ÂëºÍ¹âÕ¤ÔËËãÂë  REG[51h] Bit[3:0] = 0Ch */
 80035b6:	200c      	movs	r0, #12
 80035b8:	f000 f8ae 	bl	8003718 <BTE_SetOperateCode>
	RA8875_SetFrontColor(_usColor);	/* ÉèÖÃBTEÇ°¾°É« */
 80035bc:	88fb      	ldrh	r3, [r7, #6]
 80035be:	4618      	mov	r0, r3
 80035c0:	f000 f8b8 	bl	8003734 <RA8875_SetFrontColor>
	BTE_Start();					/* ¿ªÆôBTE ¹¦ÄÜ */
 80035c4:	f000 f93a 	bl	800383c <BTE_Start>
	BTE_Wait();
 80035c8:	f000 f948 	bl	800385c <BTE_Wait>
}
 80035cc:	bf00      	nop
 80035ce:	370c      	adds	r7, #12
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd90      	pop	{r4, r7, pc}
 80035d4:	20000242 	.word	0x20000242
 80035d8:	20000244 	.word	0x20000244
 80035dc:	20000004 	.word	0x20000004
 80035e0:	20000006 	.word	0x20000006

080035e4 <RA8875_PutPixel>:
*********************************************************************************************************
*	Func name: RA8875_PutPixel
*********************************************************************************************************
*/
void RA8875_PutPixel(uint16_t _usX, uint16_t _usY, uint16_t _usColor)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b082      	sub	sp, #8
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	4603      	mov	r3, r0
 80035ec:	80fb      	strh	r3, [r7, #6]
 80035ee:	460b      	mov	r3, r1
 80035f0:	80bb      	strh	r3, [r7, #4]
 80035f2:	4613      	mov	r3, r2
 80035f4:	807b      	strh	r3, [r7, #2]
	s_ucRA8875Busy = 1;
 80035f6:	4b1a      	ldr	r3, [pc, #104]	; (8003660 <RA8875_PutPixel+0x7c>)
 80035f8:	2201      	movs	r2, #1
 80035fa:	701a      	strb	r2, [r3, #0]

	RA8875_WriteCmd(0x46); RA8875_WriteData(_usX);
 80035fc:	2046      	movs	r0, #70	; 0x46
 80035fe:	f001 fec5 	bl	800538c <RA8875_WriteCmd>
 8003602:	88fb      	ldrh	r3, [r7, #6]
 8003604:	b2db      	uxtb	r3, r3
 8003606:	4618      	mov	r0, r3
 8003608:	f001 fee1 	bl	80053ce <RA8875_WriteData>
	RA8875_WriteCmd(0x47); RA8875_WriteData(_usX >> 8);
 800360c:	2047      	movs	r0, #71	; 0x47
 800360e:	f001 febd 	bl	800538c <RA8875_WriteCmd>
 8003612:	88fb      	ldrh	r3, [r7, #6]
 8003614:	0a1b      	lsrs	r3, r3, #8
 8003616:	b29b      	uxth	r3, r3
 8003618:	b2db      	uxtb	r3, r3
 800361a:	4618      	mov	r0, r3
 800361c:	f001 fed7 	bl	80053ce <RA8875_WriteData>
	RA8875_WriteCmd(0x48); RA8875_WriteData(_usY);
 8003620:	2048      	movs	r0, #72	; 0x48
 8003622:	f001 feb3 	bl	800538c <RA8875_WriteCmd>
 8003626:	88bb      	ldrh	r3, [r7, #4]
 8003628:	b2db      	uxtb	r3, r3
 800362a:	4618      	mov	r0, r3
 800362c:	f001 fecf 	bl	80053ce <RA8875_WriteData>
	RA8875_WriteCmd(0x49); RA8875_WriteData(_usY >> 8);
 8003630:	2049      	movs	r0, #73	; 0x49
 8003632:	f001 feab 	bl	800538c <RA8875_WriteCmd>
 8003636:	88bb      	ldrh	r3, [r7, #4]
 8003638:	0a1b      	lsrs	r3, r3, #8
 800363a:	b29b      	uxth	r3, r3
 800363c:	b2db      	uxtb	r3, r3
 800363e:	4618      	mov	r0, r3
 8003640:	f001 fec5 	bl	80053ce <RA8875_WriteData>

	RA8875_WriteCmd(0x02); 		/* ÓÃÓÚÉè¶¨RA8875 ½øÈëÄÚ´æ(DDRAM»òCGRAM)¶ÁÈ¡/Ð´ÈëÄ£Ê½ */
 8003644:	2002      	movs	r0, #2
 8003646:	f001 fea1 	bl	800538c <RA8875_WriteCmd>
	RA8875_WriteData16(_usColor);
 800364a:	887b      	ldrh	r3, [r7, #2]
 800364c:	4618      	mov	r0, r3
 800364e:	f000 f8e5 	bl	800381c <RA8875_WriteData16>

	s_ucRA8875Busy = 0;
 8003652:	4b03      	ldr	r3, [pc, #12]	; (8003660 <RA8875_PutPixel+0x7c>)
 8003654:	2200      	movs	r2, #0
 8003656:	701a      	strb	r2, [r3, #0]
}
 8003658:	bf00      	nop
 800365a:	3708      	adds	r7, #8
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}
 8003660:	20000240 	.word	0x20000240

08003664 <BTE_SetTarBlock>:
*********************************************************************************************************
*	Func name: BTE_SetTarBlock
*********************************************************************************************************
*/
static void BTE_SetTarBlock(uint16_t _usX, uint16_t _usY, uint16_t _usHeight, uint16_t _usWidth, uint8_t _ucLayer)
{
 8003664:	b590      	push	{r4, r7, lr}
 8003666:	b083      	sub	sp, #12
 8003668:	af00      	add	r7, sp, #0
 800366a:	4604      	mov	r4, r0
 800366c:	4608      	mov	r0, r1
 800366e:	4611      	mov	r1, r2
 8003670:	461a      	mov	r2, r3
 8003672:	4623      	mov	r3, r4
 8003674:	80fb      	strh	r3, [r7, #6]
 8003676:	4603      	mov	r3, r0
 8003678:	80bb      	strh	r3, [r7, #4]
 800367a:	460b      	mov	r3, r1
 800367c:	807b      	strh	r3, [r7, #2]
 800367e:	4613      	mov	r3, r2
 8003680:	803b      	strh	r3, [r7, #0]
	/* ÉèÖÃÆðµã×ø±ê */
	RA8875_WriteReg(0x58, _usX);
 8003682:	88fb      	ldrh	r3, [r7, #6]
 8003684:	b2db      	uxtb	r3, r3
 8003686:	4619      	mov	r1, r3
 8003688:	2058      	movs	r0, #88	; 0x58
 800368a:	f7ff fdf5 	bl	8003278 <RA8875_WriteReg>
	RA8875_WriteReg(0x59, _usX >> 8);
 800368e:	88fb      	ldrh	r3, [r7, #6]
 8003690:	0a1b      	lsrs	r3, r3, #8
 8003692:	b29b      	uxth	r3, r3
 8003694:	b2db      	uxtb	r3, r3
 8003696:	4619      	mov	r1, r3
 8003698:	2059      	movs	r0, #89	; 0x59
 800369a:	f7ff fded 	bl	8003278 <RA8875_WriteReg>

	RA8875_WriteReg(0x5A, _usY);
 800369e:	88bb      	ldrh	r3, [r7, #4]
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	4619      	mov	r1, r3
 80036a4:	205a      	movs	r0, #90	; 0x5a
 80036a6:	f7ff fde7 	bl	8003278 <RA8875_WriteReg>
	if (_ucLayer == 0)	/* Í¼²ã2 */
 80036aa:	7e3b      	ldrb	r3, [r7, #24]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d108      	bne.n	80036c2 <BTE_SetTarBlock+0x5e>
	{
		RA8875_WriteReg(0x5B, _usY >> 8);
 80036b0:	88bb      	ldrh	r3, [r7, #4]
 80036b2:	0a1b      	lsrs	r3, r3, #8
 80036b4:	b29b      	uxth	r3, r3
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	4619      	mov	r1, r3
 80036ba:	205b      	movs	r0, #91	; 0x5b
 80036bc:	f7ff fddc 	bl	8003278 <RA8875_WriteReg>
 80036c0:	e00a      	b.n	80036d8 <BTE_SetTarBlock+0x74>
	}
	else
	{
		RA8875_WriteReg(0x5B, (1 << 7) | (_usY >> 8));	/* Bit7 ±íÊ¾Í¼²ã£¬ 0 Í¼²ã1£» 1 Í¼²ã2*/
 80036c2:	88bb      	ldrh	r3, [r7, #4]
 80036c4:	0a1b      	lsrs	r3, r3, #8
 80036c6:	b29b      	uxth	r3, r3
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	4619      	mov	r1, r3
 80036d2:	205b      	movs	r0, #91	; 0x5b
 80036d4:	f7ff fdd0 	bl	8003278 <RA8875_WriteReg>
	}

	/* ÉèÖÃÇø¿é¿í¶È */
	RA8875_WriteReg(0x5C, _usWidth);
 80036d8:	883b      	ldrh	r3, [r7, #0]
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	4619      	mov	r1, r3
 80036de:	205c      	movs	r0, #92	; 0x5c
 80036e0:	f7ff fdca 	bl	8003278 <RA8875_WriteReg>
	RA8875_WriteReg(0x5D, _usWidth >> 8);
 80036e4:	883b      	ldrh	r3, [r7, #0]
 80036e6:	0a1b      	lsrs	r3, r3, #8
 80036e8:	b29b      	uxth	r3, r3
 80036ea:	b2db      	uxtb	r3, r3
 80036ec:	4619      	mov	r1, r3
 80036ee:	205d      	movs	r0, #93	; 0x5d
 80036f0:	f7ff fdc2 	bl	8003278 <RA8875_WriteReg>

	/* ÉèÖÃÇø¿é¸ß¶È */
	RA8875_WriteReg(0x5E, _usHeight);
 80036f4:	887b      	ldrh	r3, [r7, #2]
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	4619      	mov	r1, r3
 80036fa:	205e      	movs	r0, #94	; 0x5e
 80036fc:	f7ff fdbc 	bl	8003278 <RA8875_WriteReg>
	RA8875_WriteReg(0x5F, _usHeight >> 8);
 8003700:	887b      	ldrh	r3, [r7, #2]
 8003702:	0a1b      	lsrs	r3, r3, #8
 8003704:	b29b      	uxth	r3, r3
 8003706:	b2db      	uxtb	r3, r3
 8003708:	4619      	mov	r1, r3
 800370a:	205f      	movs	r0, #95	; 0x5f
 800370c:	f7ff fdb4 	bl	8003278 <RA8875_WriteReg>
}
 8003710:	bf00      	nop
 8003712:	370c      	adds	r7, #12
 8003714:	46bd      	mov	sp, r7
 8003716:	bd90      	pop	{r4, r7, pc}

08003718 <BTE_SetOperateCode>:
*********************************************************************************************************
*	Func name: BTE_SetOperateCode
*********************************************************************************************************
*/
static void BTE_SetOperateCode(uint8_t _ucOperate)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b082      	sub	sp, #8
 800371c:	af00      	add	r7, sp, #0
 800371e:	4603      	mov	r3, r0
 8003720:	71fb      	strb	r3, [r7, #7]
	RA8875_WriteReg(0x51, _ucOperate);
 8003722:	79fb      	ldrb	r3, [r7, #7]
 8003724:	4619      	mov	r1, r3
 8003726:	2051      	movs	r0, #81	; 0x51
 8003728:	f7ff fda6 	bl	8003278 <RA8875_WriteReg>
}
 800372c:	bf00      	nop
 800372e:	3708      	adds	r7, #8
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}

08003734 <RA8875_SetFrontColor>:
*********************************************************************************************************
* Func name: RA8875_SetFrontColor
*********************************************************************************************************
*/
void RA8875_SetFrontColor(uint16_t _usColor)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b082      	sub	sp, #8
 8003738:	af00      	add	r7, sp, #0
 800373a:	4603      	mov	r3, r0
 800373c:	80fb      	strh	r3, [r7, #6]
	RA8875_WriteReg(0x63, (_usColor & 0xF800) >> 11);	/* R5  */
 800373e:	88fb      	ldrh	r3, [r7, #6]
 8003740:	0adb      	lsrs	r3, r3, #11
 8003742:	b29b      	uxth	r3, r3
 8003744:	b2db      	uxtb	r3, r3
 8003746:	4619      	mov	r1, r3
 8003748:	2063      	movs	r0, #99	; 0x63
 800374a:	f7ff fd95 	bl	8003278 <RA8875_WriteReg>
	RA8875_WriteReg(0x64, (_usColor & 0x07E0) >> 5);	/* G6 */
 800374e:	88fb      	ldrh	r3, [r7, #6]
 8003750:	115b      	asrs	r3, r3, #5
 8003752:	b2db      	uxtb	r3, r3
 8003754:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003758:	b2db      	uxtb	r3, r3
 800375a:	4619      	mov	r1, r3
 800375c:	2064      	movs	r0, #100	; 0x64
 800375e:	f7ff fd8b 	bl	8003278 <RA8875_WriteReg>
	RA8875_WriteReg(0x65, (_usColor & 0x001F));			/* B5 */
 8003762:	88fb      	ldrh	r3, [r7, #6]
 8003764:	b2db      	uxtb	r3, r3
 8003766:	f003 031f 	and.w	r3, r3, #31
 800376a:	b2db      	uxtb	r3, r3
 800376c:	4619      	mov	r1, r3
 800376e:	2065      	movs	r0, #101	; 0x65
 8003770:	f7ff fd82 	bl	8003278 <RA8875_WriteReg>
}
 8003774:	bf00      	nop
 8003776:	3708      	adds	r7, #8
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}

0800377c <RA8875_DrawBMP>:
*********************************************************************************************************
*	Func name: RA8875_DrawBMP
*********************************************************************************************************
*/
void RA8875_DrawBMP(uint16_t _usX, uint16_t _usY, uint16_t _usHeight, uint16_t _usWidth, uint16_t *_ptr)
{
 800377c:	b590      	push	{r4, r7, lr}
 800377e:	b085      	sub	sp, #20
 8003780:	af00      	add	r7, sp, #0
 8003782:	4604      	mov	r4, r0
 8003784:	4608      	mov	r0, r1
 8003786:	4611      	mov	r1, r2
 8003788:	461a      	mov	r2, r3
 800378a:	4623      	mov	r3, r4
 800378c:	80fb      	strh	r3, [r7, #6]
 800378e:	4603      	mov	r3, r0
 8003790:	80bb      	strh	r3, [r7, #4]
 8003792:	460b      	mov	r3, r1
 8003794:	807b      	strh	r3, [r7, #2]
 8003796:	4613      	mov	r3, r2
 8003798:	803b      	strh	r3, [r7, #0]
	uint32_t index = 0;
 800379a:	2300      	movs	r3, #0
 800379c:	60fb      	str	r3, [r7, #12]
	const uint16_t *p;

	RA8875_SetDispWin(_usX, _usY, _usHeight, _usWidth);
 800379e:	883b      	ldrh	r3, [r7, #0]
 80037a0:	887a      	ldrh	r2, [r7, #2]
 80037a2:	88b9      	ldrh	r1, [r7, #4]
 80037a4:	88f8      	ldrh	r0, [r7, #6]
 80037a6:	f7ff fe5b 	bl	8003460 <RA8875_SetDispWin>

	s_ucRA8875Busy = 1;
 80037aa:	4b13      	ldr	r3, [pc, #76]	; (80037f8 <RA8875_DrawBMP+0x7c>)
 80037ac:	2201      	movs	r2, #1
 80037ae:	701a      	strb	r2, [r3, #0]

	RA8875_WriteCmd(0x02); 		
 80037b0:	2002      	movs	r0, #2
 80037b2:	f001 fdeb 	bl	800538c <RA8875_WriteCmd>

	p = _ptr;
 80037b6:	6a3b      	ldr	r3, [r7, #32]
 80037b8:	60bb      	str	r3, [r7, #8]
	for (index = 0; index < _usHeight * _usWidth; index++)
 80037ba:	2300      	movs	r3, #0
 80037bc:	60fb      	str	r3, [r7, #12]
 80037be:	e009      	b.n	80037d4 <RA8875_DrawBMP+0x58>
	{
		RA8875_WriteData16(*p++);
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	1c9a      	adds	r2, r3, #2
 80037c4:	60ba      	str	r2, [r7, #8]
 80037c6:	881b      	ldrh	r3, [r3, #0]
 80037c8:	4618      	mov	r0, r3
 80037ca:	f000 f827 	bl	800381c <RA8875_WriteData16>
	for (index = 0; index < _usHeight * _usWidth; index++)
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	3301      	adds	r3, #1
 80037d2:	60fb      	str	r3, [r7, #12]
 80037d4:	887b      	ldrh	r3, [r7, #2]
 80037d6:	883a      	ldrh	r2, [r7, #0]
 80037d8:	fb02 f303 	mul.w	r3, r2, r3
 80037dc:	461a      	mov	r2, r3
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d3ed      	bcc.n	80037c0 <RA8875_DrawBMP+0x44>
	}
	s_ucRA8875Busy = 0;
 80037e4:	4b04      	ldr	r3, [pc, #16]	; (80037f8 <RA8875_DrawBMP+0x7c>)
 80037e6:	2200      	movs	r2, #0
 80037e8:	701a      	strb	r2, [r3, #0]

	RA8875_QuitWinMode();
 80037ea:	f000 f807 	bl	80037fc <RA8875_QuitWinMode>
}
 80037ee:	bf00      	nop
 80037f0:	3714      	adds	r7, #20
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd90      	pop	{r4, r7, pc}
 80037f6:	bf00      	nop
 80037f8:	20000240 	.word	0x20000240

080037fc <RA8875_QuitWinMode>:
*********************************************************************************************************
*	Funa name: RA8875_QuitWinMode
*********************************************************************************************************
*/
void RA8875_QuitWinMode(void)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	af00      	add	r7, sp, #0
	RA8875_SetDispWin(0, 0, g_LcdHeight, g_LcdWidth);
 8003800:	4b04      	ldr	r3, [pc, #16]	; (8003814 <RA8875_QuitWinMode+0x18>)
 8003802:	881a      	ldrh	r2, [r3, #0]
 8003804:	4b04      	ldr	r3, [pc, #16]	; (8003818 <RA8875_QuitWinMode+0x1c>)
 8003806:	881b      	ldrh	r3, [r3, #0]
 8003808:	2100      	movs	r1, #0
 800380a:	2000      	movs	r0, #0
 800380c:	f7ff fe28 	bl	8003460 <RA8875_SetDispWin>
}
 8003810:	bf00      	nop
 8003812:	bd80      	pop	{r7, pc}
 8003814:	2000000a 	.word	0x2000000a
 8003818:	2000000c 	.word	0x2000000c

0800381c <RA8875_WriteData16>:
*********************************************************************************************************
*	Func name: RA8875_WriteData16
*********************************************************************************************************
*/
void RA8875_WriteData16(uint16_t _usRGB)
{
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
 8003822:	4603      	mov	r3, r0
 8003824:	80fb      	strh	r3, [r7, #6]
	SPI_ShiftByte(_usRGB);
	RA8875_CS_1();
#endif

#ifdef RA_HARD_8080_16
	RA8875_RAM = _usRGB;
 8003826:	f04f 42d8 	mov.w	r2, #1811939328	; 0x6c000000
 800382a:	88fb      	ldrh	r3, [r7, #6]
 800382c:	8013      	strh	r3, [r2, #0]
#endif	
}
 800382e:	bf00      	nop
 8003830:	370c      	adds	r7, #12
 8003832:	46bd      	mov	sp, r7
 8003834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003838:	4770      	bx	lr
	...

0800383c <BTE_Start>:
*********************************************************************************************************
*	Func name: BTE_Start
*********************************************************************************************************
*/
static void BTE_Start(void)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	af00      	add	r7, sp, #0
	s_ucRA8875Busy = 1;
 8003840:	4b05      	ldr	r3, [pc, #20]	; (8003858 <BTE_Start+0x1c>)
 8003842:	2201      	movs	r2, #1
 8003844:	701a      	strb	r2, [r3, #0]
	/* RA8875_WriteReg(0x50, 0x80);  ²»ÄÜÊ¹ÓÃÕâ¸öº¯Êý£¬ÒòÎªÄÚ²¿ÒÑ¾­²Ù×÷ÁË s_ucRA8875Busy ±êÖ¾ */
	RA8875_WriteCmd(0x50);	/* ÉèÖÃ¼Ä´æÆ÷µØÖ· */
 8003846:	2050      	movs	r0, #80	; 0x50
 8003848:	f001 fda0 	bl	800538c <RA8875_WriteCmd>
	RA8875_WriteData(0x80);	/* Ð´Èë¼Ä´æÆ÷Öµ */
 800384c:	2080      	movs	r0, #128	; 0x80
 800384e:	f001 fdbe 	bl	80053ce <RA8875_WriteData>
}
 8003852:	bf00      	nop
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	20000240 	.word	0x20000240

0800385c <BTE_Wait>:
*********************************************************************************************************
*	Func name: BTE_Wait
*********************************************************************************************************
*/
static void BTE_Wait(void)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	af00      	add	r7, sp, #0
	while ((RA8875_ReadStatus() & 0x40) == 0x40);
 8003860:	bf00      	nop
 8003862:	f001 fdc5 	bl	80053f0 <RA8875_ReadStatus>
 8003866:	4603      	mov	r3, r0
 8003868:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800386c:	2b40      	cmp	r3, #64	; 0x40
 800386e:	d0f8      	beq.n	8003862 <BTE_Wait+0x6>
	s_ucRA8875Busy = 0;
 8003870:	4b02      	ldr	r3, [pc, #8]	; (800387c <BTE_Wait+0x20>)
 8003872:	2200      	movs	r2, #0
 8003874:	701a      	strb	r2, [r3, #0]
}
 8003876:	bf00      	nop
 8003878:	bd80      	pop	{r7, pc}
 800387a:	bf00      	nop
 800387c:	20000240 	.word	0x20000240

08003880 <RA8875_SetBackLight>:
*	ÐÎ    ²Î:  _bright ÁÁ¶È£¬0ÊÇÃð£¬255ÊÇ×îÁÁ
*	·µ »Ø Öµ: ÎÞ
*********************************************************************************************************
*/
void RA8875_SetBackLight(uint8_t _bright)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b082      	sub	sp, #8
 8003884:	af00      	add	r7, sp, #0
 8003886:	4603      	mov	r3, r0
 8003888:	71fb      	strb	r3, [r7, #7]
	if (_bright == 0)
 800388a:	79fb      	ldrb	r3, [r7, #7]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d104      	bne.n	800389a <RA8875_SetBackLight+0x1a>
	{
		/* ¹Ø±ÕPWM, PWM1Òý½ÅÈ±Ê¡Êä³öLOW  */
		RA8875_WriteReg(0x8A, 0 << 6);
 8003890:	2100      	movs	r1, #0
 8003892:	208a      	movs	r0, #138	; 0x8a
 8003894:	f7ff fcf0 	bl	8003278 <RA8875_WriteReg>
		RA8875_WriteReg(0x8A, (1 << 7) | 12);

		/* REG[8Bh] PWM1 Duty Cycle Register (P1DCR) */
		RA8875_WriteReg(0x8B, _bright);
	}
}
 8003898:	e010      	b.n	80038bc <RA8875_SetBackLight+0x3c>
	else if (_bright == BRIGHT_MAX)	/* ×î´óÁÁ¶È */
 800389a:	79fb      	ldrb	r3, [r7, #7]
 800389c:	2bff      	cmp	r3, #255	; 0xff
 800389e:	d104      	bne.n	80038aa <RA8875_SetBackLight+0x2a>
		RA8875_WriteReg(0x8A, 1 << 6);
 80038a0:	2140      	movs	r1, #64	; 0x40
 80038a2:	208a      	movs	r0, #138	; 0x8a
 80038a4:	f7ff fce8 	bl	8003278 <RA8875_WriteReg>
}
 80038a8:	e008      	b.n	80038bc <RA8875_SetBackLight+0x3c>
		RA8875_WriteReg(0x8A, (1 << 7) | 12);
 80038aa:	218c      	movs	r1, #140	; 0x8c
 80038ac:	208a      	movs	r0, #138	; 0x8a
 80038ae:	f7ff fce3 	bl	8003278 <RA8875_WriteReg>
		RA8875_WriteReg(0x8B, _bright);
 80038b2:	79fb      	ldrb	r3, [r7, #7]
 80038b4:	4619      	mov	r1, r3
 80038b6:	208b      	movs	r0, #139	; 0x8b
 80038b8:	f7ff fcde 	bl	8003278 <RA8875_WriteReg>
}
 80038bc:	bf00      	nop
 80038be:	3708      	adds	r7, #8
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}

080038c4 <RA8875_GetPixel>:
*********************************************************************************************************
*	Func name: RA8875_GetPixel
*********************************************************************************************************
*/
uint16_t RA8875_GetPixel(uint16_t _usX, uint16_t _usY)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b084      	sub	sp, #16
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	4603      	mov	r3, r0
 80038cc:	460a      	mov	r2, r1
 80038ce:	80fb      	strh	r3, [r7, #6]
 80038d0:	4613      	mov	r3, r2
 80038d2:	80bb      	strh	r3, [r7, #4]
	uint16_t usRGB;

	RA8875_WriteReg(0x40, (1 << 0));
 80038d4:	2101      	movs	r1, #1
 80038d6:	2040      	movs	r0, #64	; 0x40
 80038d8:	f7ff fcce 	bl	8003278 <RA8875_WriteReg>

	RA8875_SetReadCursor(_usX, _usY);	/* ÉèÖÃ¶ÁÈ¡¹â±êÎ»ÖÃ */
 80038dc:	88ba      	ldrh	r2, [r7, #4]
 80038de:	88fb      	ldrh	r3, [r7, #6]
 80038e0:	4611      	mov	r1, r2
 80038e2:	4618      	mov	r0, r3
 80038e4:	f000 f81c 	bl	8003920 <RA8875_SetReadCursor>

	s_ucRA8875Busy = 1;
 80038e8:	4b0c      	ldr	r3, [pc, #48]	; (800391c <RA8875_GetPixel+0x58>)
 80038ea:	2201      	movs	r2, #1
 80038ec:	701a      	strb	r2, [r3, #0]

	RA8875_WriteCmd(0x02);
 80038ee:	2002      	movs	r0, #2
 80038f0:	f001 fd4c 	bl	800538c <RA8875_WriteCmd>
	usRGB = RA8875_ReadData16();	/* µÚ1´Î¶ÁÈ¡Êý¾Ý¶ªÆú */
 80038f4:	f000 f83c 	bl	8003970 <RA8875_ReadData16>
 80038f8:	4603      	mov	r3, r0
 80038fa:	81fb      	strh	r3, [r7, #14]
	usRGB = RA8875_ReadData16();
 80038fc:	f000 f838 	bl	8003970 <RA8875_ReadData16>
 8003900:	4603      	mov	r3, r0
 8003902:	81fb      	strh	r3, [r7, #14]
	usRGB = RA8875_ReadData16();
 8003904:	f000 f834 	bl	8003970 <RA8875_ReadData16>
 8003908:	4603      	mov	r3, r0
 800390a:	81fb      	strh	r3, [r7, #14]

	s_ucRA8875Busy = 0;
 800390c:	4b03      	ldr	r3, [pc, #12]	; (800391c <RA8875_GetPixel+0x58>)
 800390e:	2200      	movs	r2, #0
 8003910:	701a      	strb	r2, [r3, #0]

	return usRGB;
 8003912:	89fb      	ldrh	r3, [r7, #14]
}
 8003914:	4618      	mov	r0, r3
 8003916:	3710      	adds	r7, #16
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}
 800391c:	20000240 	.word	0x20000240

08003920 <RA8875_SetReadCursor>:
*********************************************************************************************************
*	Func name: RA8875_SetCursor
*********************************************************************************************************
*/
static void RA8875_SetReadCursor(uint16_t _usX, uint16_t _usY)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b082      	sub	sp, #8
 8003924:	af00      	add	r7, sp, #0
 8003926:	4603      	mov	r3, r0
 8003928:	460a      	mov	r2, r1
 800392a:	80fb      	strh	r3, [r7, #6]
 800392c:	4613      	mov	r3, r2
 800392e:	80bb      	strh	r3, [r7, #4]
	RA8875_WriteReg(0x4A, _usX);
 8003930:	88fb      	ldrh	r3, [r7, #6]
 8003932:	b2db      	uxtb	r3, r3
 8003934:	4619      	mov	r1, r3
 8003936:	204a      	movs	r0, #74	; 0x4a
 8003938:	f7ff fc9e 	bl	8003278 <RA8875_WriteReg>
	RA8875_WriteReg(0x4B, _usX >> 8);
 800393c:	88fb      	ldrh	r3, [r7, #6]
 800393e:	0a1b      	lsrs	r3, r3, #8
 8003940:	b29b      	uxth	r3, r3
 8003942:	b2db      	uxtb	r3, r3
 8003944:	4619      	mov	r1, r3
 8003946:	204b      	movs	r0, #75	; 0x4b
 8003948:	f7ff fc96 	bl	8003278 <RA8875_WriteReg>
	RA8875_WriteReg(0x4C, _usY);
 800394c:	88bb      	ldrh	r3, [r7, #4]
 800394e:	b2db      	uxtb	r3, r3
 8003950:	4619      	mov	r1, r3
 8003952:	204c      	movs	r0, #76	; 0x4c
 8003954:	f7ff fc90 	bl	8003278 <RA8875_WriteReg>
	RA8875_WriteReg(0x4D, _usY >> 8);
 8003958:	88bb      	ldrh	r3, [r7, #4]
 800395a:	0a1b      	lsrs	r3, r3, #8
 800395c:	b29b      	uxth	r3, r3
 800395e:	b2db      	uxtb	r3, r3
 8003960:	4619      	mov	r1, r3
 8003962:	204d      	movs	r0, #77	; 0x4d
 8003964:	f7ff fc88 	bl	8003278 <RA8875_WriteReg>
}
 8003968:	bf00      	nop
 800396a:	3708      	adds	r7, #8
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}

08003970 <RA8875_ReadData16>:
*********************************************************************************************************
*	Func name: RA8875_ReadData16
*********************************************************************************************************
*/
uint16_t RA8875_ReadData16(void)
{
 8003970:	b480      	push	{r7}
 8003972:	b083      	sub	sp, #12
 8003974:	af00      	add	r7, sp, #0
#endif

#ifdef RA_HARD_8080_16			/* 8080Ó²¼þ×ÜÏß */
	uint16_t value;

	value = RA8875_RAM;		/* ¶ÁÈ¡¼Ä´æÆ÷Öµ */
 8003976:	f04f 43d8 	mov.w	r3, #1811939328	; 0x6c000000
 800397a:	881b      	ldrh	r3, [r3, #0]
 800397c:	80fb      	strh	r3, [r7, #6]

	return value;
 800397e:	88fb      	ldrh	r3, [r7, #6]
#endif
}
 8003980:	4618      	mov	r0, r3
 8003982:	370c      	adds	r7, #12
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr

0800398c <RA8875_TouchInit>:
*********************************************************************************************************
*	Func name: RA8875_TouchInit
*********************************************************************************************************
*/
void RA8875_TouchInit(void)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	af00      	add	r7, sp, #0
	// 터치 인터럽트 활성화 (0xF0 레지스터의 비트 2 설정)
	RA8875_WriteReg(0xF0, (1 << 2));
 8003990:	2104      	movs	r1, #4
 8003992:	20f0      	movs	r0, #240	; 0xf0
 8003994:	f7ff fc70 	bl	8003278 <RA8875_WriteReg>

	// TPCR1 설정: 자동 모드, 내부 참조 전압, 디바운스 활성화
	RA8875_WriteReg(0x71, (0 << 6) | (0 << 5) | (1 << 2));
 8003998:	2104      	movs	r1, #4
 800399a:	2071      	movs	r0, #113	; 0x71
 800399c:	f7ff fc6c 	bl	8003278 <RA8875_WriteReg>

	// TPCR0 설정: 터치 활성화, ADC 샘플링 = 4096, X축 데이터 획득 모드
	RA8875_WriteReg(0x70, (1 << 7) | (3 << 4) | (0 << 3) | (2 << 0));
 80039a0:	21b2      	movs	r1, #178	; 0xb2
 80039a2:	2070      	movs	r0, #112	; 0x70
 80039a4:	f7ff fc68 	bl	8003278 <RA8875_WriteReg>

}
 80039a8:	bf00      	nop
 80039aa:	bd80      	pop	{r7, pc}

080039ac <RA8875_DrawRect>:
*********************************************************************************************************
* Func name: RA8875_DrawRect
*********************************************************************************************************
*/
void RA8875_DrawRect(uint16_t _usX, uint16_t _usY, uint16_t _usHeight, uint16_t _usWidth, uint16_t _usColor)
{
 80039ac:	b590      	push	{r4, r7, lr}
 80039ae:	b083      	sub	sp, #12
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	4604      	mov	r4, r0
 80039b4:	4608      	mov	r0, r1
 80039b6:	4611      	mov	r1, r2
 80039b8:	461a      	mov	r2, r3
 80039ba:	4623      	mov	r3, r4
 80039bc:	80fb      	strh	r3, [r7, #6]
 80039be:	4603      	mov	r3, r0
 80039c0:	80bb      	strh	r3, [r7, #4]
 80039c2:	460b      	mov	r3, r1
 80039c4:	807b      	strh	r3, [r7, #2]
 80039c6:	4613      	mov	r3, r2
 80039c8:	803b      	strh	r3, [r7, #0]
	RA8875_WriteReg(0x91, _usX);
 80039ca:	88fb      	ldrh	r3, [r7, #6]
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	4619      	mov	r1, r3
 80039d0:	2091      	movs	r0, #145	; 0x91
 80039d2:	f7ff fc51 	bl	8003278 <RA8875_WriteReg>
	RA8875_WriteReg(0x92, _usX >> 8);
 80039d6:	88fb      	ldrh	r3, [r7, #6]
 80039d8:	0a1b      	lsrs	r3, r3, #8
 80039da:	b29b      	uxth	r3, r3
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	4619      	mov	r1, r3
 80039e0:	2092      	movs	r0, #146	; 0x92
 80039e2:	f7ff fc49 	bl	8003278 <RA8875_WriteReg>
	RA8875_WriteReg(0x93, _usY);
 80039e6:	88bb      	ldrh	r3, [r7, #4]
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	4619      	mov	r1, r3
 80039ec:	2093      	movs	r0, #147	; 0x93
 80039ee:	f7ff fc43 	bl	8003278 <RA8875_WriteReg>
	RA8875_WriteReg(0x94, _usY >> 8);
 80039f2:	88bb      	ldrh	r3, [r7, #4]
 80039f4:	0a1b      	lsrs	r3, r3, #8
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	4619      	mov	r1, r3
 80039fc:	2094      	movs	r0, #148	; 0x94
 80039fe:	f7ff fc3b 	bl	8003278 <RA8875_WriteReg>

	/* ÉèÖÃÖÕµã×ø±ê */
	RA8875_WriteReg(0x95, _usX + _usWidth - 1);
 8003a02:	88fb      	ldrh	r3, [r7, #6]
 8003a04:	b2da      	uxtb	r2, r3
 8003a06:	883b      	ldrh	r3, [r7, #0]
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	4413      	add	r3, r2
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	3b01      	subs	r3, #1
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	4619      	mov	r1, r3
 8003a14:	2095      	movs	r0, #149	; 0x95
 8003a16:	f7ff fc2f 	bl	8003278 <RA8875_WriteReg>
	RA8875_WriteReg(0x96, (_usX + _usWidth - 1) >> 8);
 8003a1a:	88fa      	ldrh	r2, [r7, #6]
 8003a1c:	883b      	ldrh	r3, [r7, #0]
 8003a1e:	4413      	add	r3, r2
 8003a20:	3b01      	subs	r3, #1
 8003a22:	121b      	asrs	r3, r3, #8
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	4619      	mov	r1, r3
 8003a28:	2096      	movs	r0, #150	; 0x96
 8003a2a:	f7ff fc25 	bl	8003278 <RA8875_WriteReg>
	RA8875_WriteReg(0x97, _usY + _usHeight - 1);
 8003a2e:	88bb      	ldrh	r3, [r7, #4]
 8003a30:	b2da      	uxtb	r2, r3
 8003a32:	887b      	ldrh	r3, [r7, #2]
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	4413      	add	r3, r2
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	3b01      	subs	r3, #1
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	4619      	mov	r1, r3
 8003a40:	2097      	movs	r0, #151	; 0x97
 8003a42:	f7ff fc19 	bl	8003278 <RA8875_WriteReg>
	RA8875_WriteReg(0x98, (_usY + _usHeight - 1) >> 8);
 8003a46:	88ba      	ldrh	r2, [r7, #4]
 8003a48:	887b      	ldrh	r3, [r7, #2]
 8003a4a:	4413      	add	r3, r2
 8003a4c:	3b01      	subs	r3, #1
 8003a4e:	121b      	asrs	r3, r3, #8
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	4619      	mov	r1, r3
 8003a54:	2098      	movs	r0, #152	; 0x98
 8003a56:	f7ff fc0f 	bl	8003278 <RA8875_WriteReg>

	RA8875_SetFrontColor(_usColor);	/* ÉèÖÃÑÕÉ« */
 8003a5a:	8b3b      	ldrh	r3, [r7, #24]
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f7ff fe69 	bl	8003734 <RA8875_SetFrontColor>

	s_ucRA8875Busy = 1;
 8003a62:	4b09      	ldr	r3, [pc, #36]	; (8003a88 <RA8875_DrawRect+0xdc>)
 8003a64:	2201      	movs	r2, #1
 8003a66:	701a      	strb	r2, [r3, #0]
	//	RA8875_WriteReg(0x90, (1 << 7) | (0 << 5) | (1 << 4) | (0 << 0));	/* ¿ªÊ¼»­¾ØÐÎ  */
	RA8875_WriteCmd(0x90);
 8003a68:	2090      	movs	r0, #144	; 0x90
 8003a6a:	f001 fc8f 	bl	800538c <RA8875_WriteCmd>
	RA8875_WriteData((1 << 7) | (0 << 5) | (1 << 4) | (0 << 0));
 8003a6e:	2090      	movs	r0, #144	; 0x90
 8003a70:	f001 fcad 	bl	80053ce <RA8875_WriteData>
	//	while (RA8875_ReadReg(0x90) & (1 << 7));							/* µÈ´ý½áÊø */
	RA8875_WaitBusy();
 8003a74:	f000 f80a 	bl	8003a8c <RA8875_WaitBusy>
	s_ucRA8875Busy = 0;
 8003a78:	4b03      	ldr	r3, [pc, #12]	; (8003a88 <RA8875_DrawRect+0xdc>)
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	701a      	strb	r2, [r3, #0]
}
 8003a7e:	bf00      	nop
 8003a80:	370c      	adds	r7, #12
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd90      	pop	{r4, r7, pc}
 8003a86:	bf00      	nop
 8003a88:	20000240 	.word	0x20000240

08003a8c <RA8875_WaitBusy>:
*********************************************************************************************************
* Func name: RA8875_WaitBusy
*********************************************************************************************************
*/
void RA8875_WaitBusy(void)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	af00      	add	r7, sp, #0
	while ((RA8875_ReadStatus() & 0x80) == 0x80);
 8003a90:	bf00      	nop
 8003a92:	f001 fcad 	bl	80053f0 <RA8875_ReadStatus>
 8003a96:	4603      	mov	r3, r0
 8003a98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a9c:	2b80      	cmp	r3, #128	; 0x80
 8003a9e:	d0f8      	beq.n	8003a92 <RA8875_WaitBusy+0x6>
}
 8003aa0:	bf00      	nop
 8003aa2:	bf00      	nop
 8003aa4:	bd80      	pop	{r7, pc}
	...

08003aa8 <RA8875_DrawCircle>:
*********************************************************************************************************
*	Func name: RA8875_DrawCircle
*********************************************************************************************************
*/
void RA8875_DrawCircle(uint16_t _usX, uint16_t _usY, uint16_t _usRadius, uint16_t _usColor)
{
 8003aa8:	b590      	push	{r4, r7, lr}
 8003aaa:	b083      	sub	sp, #12
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	4604      	mov	r4, r0
 8003ab0:	4608      	mov	r0, r1
 8003ab2:	4611      	mov	r1, r2
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	4623      	mov	r3, r4
 8003ab8:	80fb      	strh	r3, [r7, #6]
 8003aba:	4603      	mov	r3, r0
 8003abc:	80bb      	strh	r3, [r7, #4]
 8003abe:	460b      	mov	r3, r1
 8003ac0:	807b      	strh	r3, [r7, #2]
 8003ac2:	4613      	mov	r3, r2
 8003ac4:	803b      	strh	r3, [r7, #0]
	if (_usRadius > 255)
 8003ac6:	887b      	ldrh	r3, [r7, #2]
 8003ac8:	2bff      	cmp	r3, #255	; 0xff
 8003aca:	d834      	bhi.n	8003b36 <RA8875_DrawCircle+0x8e>
	{
		return;
	}
	RA8875_WriteReg(0x99, _usX);
 8003acc:	88fb      	ldrh	r3, [r7, #6]
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	4619      	mov	r1, r3
 8003ad2:	2099      	movs	r0, #153	; 0x99
 8003ad4:	f7ff fbd0 	bl	8003278 <RA8875_WriteReg>
	RA8875_WriteReg(0x9A, _usX >> 8);
 8003ad8:	88fb      	ldrh	r3, [r7, #6]
 8003ada:	0a1b      	lsrs	r3, r3, #8
 8003adc:	b29b      	uxth	r3, r3
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	4619      	mov	r1, r3
 8003ae2:	209a      	movs	r0, #154	; 0x9a
 8003ae4:	f7ff fbc8 	bl	8003278 <RA8875_WriteReg>
	RA8875_WriteReg(0x9B, _usY);
 8003ae8:	88bb      	ldrh	r3, [r7, #4]
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	4619      	mov	r1, r3
 8003aee:	209b      	movs	r0, #155	; 0x9b
 8003af0:	f7ff fbc2 	bl	8003278 <RA8875_WriteReg>
	RA8875_WriteReg(0x9C, _usY >> 8);
 8003af4:	88bb      	ldrh	r3, [r7, #4]
 8003af6:	0a1b      	lsrs	r3, r3, #8
 8003af8:	b29b      	uxth	r3, r3
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	4619      	mov	r1, r3
 8003afe:	209c      	movs	r0, #156	; 0x9c
 8003b00:	f7ff fbba 	bl	8003278 <RA8875_WriteReg>

	RA8875_WriteReg(0x9D, _usRadius);	/* ÉèÖÃÔ²µÄ°ë¾¶ */
 8003b04:	887b      	ldrh	r3, [r7, #2]
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	4619      	mov	r1, r3
 8003b0a:	209d      	movs	r0, #157	; 0x9d
 8003b0c:	f7ff fbb4 	bl	8003278 <RA8875_WriteReg>

	RA8875_SetFrontColor(_usColor);	/* ÉèÖÃÑÕÉ« */
 8003b10:	883b      	ldrh	r3, [r7, #0]
 8003b12:	4618      	mov	r0, r3
 8003b14:	f7ff fe0e 	bl	8003734 <RA8875_SetFrontColor>

	s_ucRA8875Busy = 1;
 8003b18:	4b09      	ldr	r3, [pc, #36]	; (8003b40 <RA8875_DrawCircle+0x98>)
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	701a      	strb	r2, [r3, #0]
	//	RA8875_WriteReg(0x90, (1 << 6) | (0 << 5));				/* ¿ªÊ¼»­Ô², ²»Ìî³ä  */
	RA8875_WriteCmd(0x90);
 8003b1e:	2090      	movs	r0, #144	; 0x90
 8003b20:	f001 fc34 	bl	800538c <RA8875_WriteCmd>
	RA8875_WriteData( (1 << 6) | (0 << 5));
 8003b24:	2040      	movs	r0, #64	; 0x40
 8003b26:	f001 fc52 	bl	80053ce <RA8875_WriteData>
	//	while (RA8875_ReadReg(0x90) & (1 << 6));				/* µÈ´ý½áÊø */
	RA8875_WaitBusy();
 8003b2a:	f7ff ffaf 	bl	8003a8c <RA8875_WaitBusy>
	s_ucRA8875Busy = 0;
 8003b2e:	4b04      	ldr	r3, [pc, #16]	; (8003b40 <RA8875_DrawCircle+0x98>)
 8003b30:	2200      	movs	r2, #0
 8003b32:	701a      	strb	r2, [r3, #0]
 8003b34:	e000      	b.n	8003b38 <RA8875_DrawCircle+0x90>
		return;
 8003b36:	bf00      	nop
}
 8003b38:	370c      	adds	r7, #12
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd90      	pop	{r4, r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	20000240 	.word	0x20000240

08003b44 <RA8875_IsBusy>:
*********************************************************************************************************
*  Func name: RA8875_IsBusy
*********************************************************************************************************
*/
uint8_t RA8875_IsBusy(void)
{
 8003b44:	b480      	push	{r7}
 8003b46:	af00      	add	r7, sp, #0
	if (s_ucRA8875Busy == 0)
 8003b48:	4b06      	ldr	r3, [pc, #24]	; (8003b64 <RA8875_IsBusy+0x20>)
 8003b4a:	781b      	ldrb	r3, [r3, #0]
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d101      	bne.n	8003b56 <RA8875_IsBusy+0x12>
	{
		return 0;
 8003b52:	2300      	movs	r3, #0
 8003b54:	e000      	b.n	8003b58 <RA8875_IsBusy+0x14>
	}
	return 1;
 8003b56:	2301      	movs	r3, #1
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr
 8003b62:	bf00      	nop
 8003b64:	20000240 	.word	0x20000240

08003b68 <RA8875_TouchReadX>:
*********************************************************************************************************
* Func name: RA8875_TouchReadX
*********************************************************************************************************
*/
uint16_t RA8875_TouchReadX(void)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b082      	sub	sp, #8
 8003b6c:	af00      	add	r7, sp, #0
	uint16_t usAdc;
	uint8_t ucRegValue;
	uint8_t ucReg74;

	ucRegValue = RA8875_ReadReg(0xF1);
 8003b6e:	20f1      	movs	r0, #241	; 0xf1
 8003b70:	f7ff fb72 	bl	8003258 <RA8875_ReadReg>
 8003b74:	4603      	mov	r3, r0
 8003b76:	71fb      	strb	r3, [r7, #7]
	if (ucRegValue & (1 << 2))
 8003b78:	79fb      	ldrb	r3, [r7, #7]
 8003b7a:	f003 0304 	and.w	r3, r3, #4
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d02c      	beq.n	8003bdc <RA8875_TouchReadX+0x74>
	{
		ucReg74 = RA8875_ReadReg(0x74);
 8003b82:	2074      	movs	r0, #116	; 0x74
 8003b84:	f7ff fb68 	bl	8003258 <RA8875_ReadReg>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	71bb      	strb	r3, [r7, #6]
		usAdc = RA8875_ReadReg(0x72);
 8003b8c:	2072      	movs	r0, #114	; 0x72
 8003b8e:	f7ff fb63 	bl	8003258 <RA8875_ReadReg>
 8003b92:	4603      	mov	r3, r0
 8003b94:	80bb      	strh	r3, [r7, #4]
		usAdc <<= 2;
 8003b96:	88bb      	ldrh	r3, [r7, #4]
 8003b98:	009b      	lsls	r3, r3, #2
 8003b9a:	80bb      	strh	r3, [r7, #4]
		usAdc += (ucReg74 & 0x03);
 8003b9c:	79bb      	ldrb	r3, [r7, #6]
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	f003 0303 	and.w	r3, r3, #3
 8003ba4:	b29a      	uxth	r2, r3
 8003ba6:	88bb      	ldrh	r3, [r7, #4]
 8003ba8:	4413      	add	r3, r2
 8003baa:	80bb      	strh	r3, [r7, #4]

		s_usTouchX = usAdc;
 8003bac:	4a15      	ldr	r2, [pc, #84]	; (8003c04 <RA8875_TouchReadX+0x9c>)
 8003bae:	88bb      	ldrh	r3, [r7, #4]
 8003bb0:	8013      	strh	r3, [r2, #0]

		usAdc = RA8875_ReadReg(0x73);	/* Bit9-2 */
 8003bb2:	2073      	movs	r0, #115	; 0x73
 8003bb4:	f7ff fb50 	bl	8003258 <RA8875_ReadReg>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	80bb      	strh	r3, [r7, #4]
		usAdc <<= 2;
 8003bbc:	88bb      	ldrh	r3, [r7, #4]
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	80bb      	strh	r3, [r7, #4]
		usAdc += ((ucReg74 & 0x0C) >> 2);
 8003bc2:	79bb      	ldrb	r3, [r7, #6]
 8003bc4:	109b      	asrs	r3, r3, #2
 8003bc6:	b29b      	uxth	r3, r3
 8003bc8:	f003 0303 	and.w	r3, r3, #3
 8003bcc:	b29a      	uxth	r2, r3
 8003bce:	88bb      	ldrh	r3, [r7, #4]
 8003bd0:	4413      	add	r3, r2
 8003bd2:	80bb      	strh	r3, [r7, #4]

		s_usTouchY = usAdc;
 8003bd4:	4a0c      	ldr	r2, [pc, #48]	; (8003c08 <RA8875_TouchReadX+0xa0>)
 8003bd6:	88bb      	ldrh	r3, [r7, #4]
 8003bd8:	8013      	strh	r3, [r2, #0]
 8003bda:	e005      	b.n	8003be8 <RA8875_TouchReadX+0x80>
	}
	else
	{
		s_usTouchX = 0;
 8003bdc:	4b09      	ldr	r3, [pc, #36]	; (8003c04 <RA8875_TouchReadX+0x9c>)
 8003bde:	2200      	movs	r2, #0
 8003be0:	801a      	strh	r2, [r3, #0]
		s_usTouchY = 0;
 8003be2:	4b09      	ldr	r3, [pc, #36]	; (8003c08 <RA8875_TouchReadX+0xa0>)
 8003be4:	2200      	movs	r2, #0
 8003be6:	801a      	strh	r2, [r3, #0]
	}

	RA8875_WriteCmd(0xF1);
 8003be8:	20f1      	movs	r0, #241	; 0xf1
 8003bea:	f001 fbcf 	bl	800538c <RA8875_WriteCmd>
	RA8875_WriteData(1 << 2);
 8003bee:	2004      	movs	r0, #4
 8003bf0:	f001 fbed 	bl	80053ce <RA8875_WriteData>

	return s_usTouchX;
 8003bf4:	4b03      	ldr	r3, [pc, #12]	; (8003c04 <RA8875_TouchReadX+0x9c>)
 8003bf6:	881b      	ldrh	r3, [r3, #0]
 8003bf8:	b29b      	uxth	r3, r3
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3708      	adds	r7, #8
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	bf00      	nop
 8003c04:	2000023c 	.word	0x2000023c
 8003c08:	2000023e 	.word	0x2000023e

08003c0c <RA8875_TouchReadY>:
*********************************************************************************************************
* Func name: RA8875_TouchReadY
*********************************************************************************************************
*/
uint16_t RA8875_TouchReadY(void)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	af00      	add	r7, sp, #0
	return s_usTouchY;
 8003c10:	4b03      	ldr	r3, [pc, #12]	; (8003c20 <RA8875_TouchReadY+0x14>)
 8003c12:	881b      	ldrh	r3, [r3, #0]
 8003c14:	b29b      	uxth	r3, r3
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr
 8003c20:	2000023e 	.word	0x2000023e

08003c24 <RA8875_FillRect>:
*********************************************************************************************************
* Func name: RA8875_FillRect
*********************************************************************************************************
*/
void RA8875_FillRect(uint16_t _usX, uint16_t _usY, uint16_t _usHeight, uint16_t _usWidth, uint16_t _usColor)
{
 8003c24:	b590      	push	{r4, r7, lr}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	4604      	mov	r4, r0
 8003c2c:	4608      	mov	r0, r1
 8003c2e:	4611      	mov	r1, r2
 8003c30:	461a      	mov	r2, r3
 8003c32:	4623      	mov	r3, r4
 8003c34:	80fb      	strh	r3, [r7, #6]
 8003c36:	4603      	mov	r3, r0
 8003c38:	80bb      	strh	r3, [r7, #4]
 8003c3a:	460b      	mov	r3, r1
 8003c3c:	807b      	strh	r3, [r7, #2]
 8003c3e:	4613      	mov	r3, r2
 8003c40:	803b      	strh	r3, [r7, #0]
	RA8875_WriteReg(0x91, _usX);
 8003c42:	88fb      	ldrh	r3, [r7, #6]
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	4619      	mov	r1, r3
 8003c48:	2091      	movs	r0, #145	; 0x91
 8003c4a:	f7ff fb15 	bl	8003278 <RA8875_WriteReg>
	RA8875_WriteReg(0x92, _usX >> 8);
 8003c4e:	88fb      	ldrh	r3, [r7, #6]
 8003c50:	0a1b      	lsrs	r3, r3, #8
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	4619      	mov	r1, r3
 8003c58:	2092      	movs	r0, #146	; 0x92
 8003c5a:	f7ff fb0d 	bl	8003278 <RA8875_WriteReg>
	RA8875_WriteReg(0x93, _usY);
 8003c5e:	88bb      	ldrh	r3, [r7, #4]
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	4619      	mov	r1, r3
 8003c64:	2093      	movs	r0, #147	; 0x93
 8003c66:	f7ff fb07 	bl	8003278 <RA8875_WriteReg>
	RA8875_WriteReg(0x94, _usY >> 8);
 8003c6a:	88bb      	ldrh	r3, [r7, #4]
 8003c6c:	0a1b      	lsrs	r3, r3, #8
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	4619      	mov	r1, r3
 8003c74:	2094      	movs	r0, #148	; 0x94
 8003c76:	f7ff faff 	bl	8003278 <RA8875_WriteReg>

	RA8875_WriteReg(0x95, _usX + _usWidth - 1);
 8003c7a:	88fb      	ldrh	r3, [r7, #6]
 8003c7c:	b2da      	uxtb	r2, r3
 8003c7e:	883b      	ldrh	r3, [r7, #0]
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	4413      	add	r3, r2
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	3b01      	subs	r3, #1
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	4619      	mov	r1, r3
 8003c8c:	2095      	movs	r0, #149	; 0x95
 8003c8e:	f7ff faf3 	bl	8003278 <RA8875_WriteReg>
	RA8875_WriteReg(0x96, (_usX + _usWidth - 1) >> 8);
 8003c92:	88fa      	ldrh	r2, [r7, #6]
 8003c94:	883b      	ldrh	r3, [r7, #0]
 8003c96:	4413      	add	r3, r2
 8003c98:	3b01      	subs	r3, #1
 8003c9a:	121b      	asrs	r3, r3, #8
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	4619      	mov	r1, r3
 8003ca0:	2096      	movs	r0, #150	; 0x96
 8003ca2:	f7ff fae9 	bl	8003278 <RA8875_WriteReg>
	RA8875_WriteReg(0x97, _usY + _usHeight - 1);
 8003ca6:	88bb      	ldrh	r3, [r7, #4]
 8003ca8:	b2da      	uxtb	r2, r3
 8003caa:	887b      	ldrh	r3, [r7, #2]
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	4413      	add	r3, r2
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	3b01      	subs	r3, #1
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	4619      	mov	r1, r3
 8003cb8:	2097      	movs	r0, #151	; 0x97
 8003cba:	f7ff fadd 	bl	8003278 <RA8875_WriteReg>
	RA8875_WriteReg(0x98, (_usY + _usHeight - 1) >> 8);
 8003cbe:	88ba      	ldrh	r2, [r7, #4]
 8003cc0:	887b      	ldrh	r3, [r7, #2]
 8003cc2:	4413      	add	r3, r2
 8003cc4:	3b01      	subs	r3, #1
 8003cc6:	121b      	asrs	r3, r3, #8
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	4619      	mov	r1, r3
 8003ccc:	2098      	movs	r0, #152	; 0x98
 8003cce:	f7ff fad3 	bl	8003278 <RA8875_WriteReg>

	RA8875_SetFrontColor(_usColor);	/* ÉèÖÃÑÕÉ« */
 8003cd2:	8b3b      	ldrh	r3, [r7, #24]
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f7ff fd2d 	bl	8003734 <RA8875_SetFrontColor>

	s_ucRA8875Busy = 1;
 8003cda:	4b09      	ldr	r3, [pc, #36]	; (8003d00 <RA8875_FillRect+0xdc>)
 8003cdc:	2201      	movs	r2, #1
 8003cde:	701a      	strb	r2, [r3, #0]
	//	RA8875_WriteReg(0x90, (1 << 7) | (1 << 5) | (1 << 4) | (0 << 0));	/* ¿ªÊ¼Ìî³ä¾ØÐÎ  */
	RA8875_WriteCmd(0x90);
 8003ce0:	2090      	movs	r0, #144	; 0x90
 8003ce2:	f001 fb53 	bl	800538c <RA8875_WriteCmd>
	RA8875_WriteData((1 << 7) | (1 << 5) | (1 << 4) | (0 << 0));
 8003ce6:	20b0      	movs	r0, #176	; 0xb0
 8003ce8:	f001 fb71 	bl	80053ce <RA8875_WriteData>
	//	while (RA8875_ReadReg(0x90) & (1 << 7));							/* µÈ´ý½áÊø */
	RA8875_WaitBusy();
 8003cec:	f7ff fece 	bl	8003a8c <RA8875_WaitBusy>
	s_ucRA8875Busy = 0;
 8003cf0:	4b03      	ldr	r3, [pc, #12]	; (8003d00 <RA8875_FillRect+0xdc>)
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	701a      	strb	r2, [r3, #0]
}
 8003cf6:	bf00      	nop
 8003cf8:	370c      	adds	r7, #12
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd90      	pop	{r4, r7, pc}
 8003cfe:	bf00      	nop
 8003d00:	20000240 	.word	0x20000240

08003d04 <SPFD5420_ReadID>:
*********************************************************************************************************
*	Func name: SPFD5420_ReadID
*********************************************************************************************************
*/
uint16_t SPFD5420_ReadID(void)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	af00      	add	r7, sp, #0
	return SPFD5420_ReadReg(0x0000);
 8003d08:	2000      	movs	r0, #0
 8003d0a:	f000 f803 	bl	8003d14 <SPFD5420_ReadReg>
 8003d0e:	4603      	mov	r3, r0
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	bd80      	pop	{r7, pc}

08003d14 <SPFD5420_ReadReg>:
*			SPFD5420_RegValue : ¼Ä´æÆ÷Öµ
*	·µ »Ø Öµ: ÎÞ
*********************************************************************************************************
*/
static uint16_t SPFD5420_ReadReg(__IO uint16_t _usAddr)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b083      	sub	sp, #12
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	80fb      	strh	r3, [r7, #6]
	/* Write 16-bit Index (then Read Reg) */
	SPFD5420_REG = _usAddr;
 8003d1e:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8003d22:	88fa      	ldrh	r2, [r7, #6]
 8003d24:	b292      	uxth	r2, r2
 8003d26:	801a      	strh	r2, [r3, #0]
	/* Read 16-bit Reg */
	return (SPFD5420_RAM);
 8003d28:	4b04      	ldr	r3, [pc, #16]	; (8003d3c <SPFD5420_ReadReg+0x28>)
 8003d2a:	881b      	ldrh	r3, [r3, #0]
 8003d2c:	b29b      	uxth	r3, r3
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	370c      	adds	r7, #12
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr
 8003d3a:	bf00      	nop
 8003d3c:	60080000 	.word	0x60080000

08003d40 <ee_ReadBytes>:
*********************************************************************************************************
*	Func name: ee_ReadBytes
*********************************************************************************************************
*/
uint8_t ee_ReadBytes(uint8_t *_pReadBuf, uint16_t _usAddress, uint16_t _usSize)
{
 8003d40:	b590      	push	{r4, r7, lr}
 8003d42:	b085      	sub	sp, #20
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	460b      	mov	r3, r1
 8003d4a:	807b      	strh	r3, [r7, #2]
 8003d4c:	4613      	mov	r3, r2
 8003d4e:	803b      	strh	r3, [r7, #0]
	uint16_t i;

	i2c_Start();
 8003d50:	f000 fa5e 	bl	8004210 <i2c_Start>

	i2c_SendByte(EE_DEV_ADDR | I2C_WR);	/* ´Ë´¦ÊÇÐ´Ö¸Áî */
 8003d54:	20a0      	movs	r0, #160	; 0xa0
 8003d56:	f000 fa7b 	bl	8004250 <i2c_SendByte>

	if (i2c_WaitAck() != 0)
 8003d5a:	f000 fae9 	bl	8004330 <i2c_WaitAck>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d13e      	bne.n	8003de2 <ee_ReadBytes+0xa2>
			goto cmd_fail;	/* EEPROMÆ÷¼þÎÞÓ¦´ð */
		}
	}
	else
	{
		i2c_SendByte(_usAddress >> 8);
 8003d64:	887b      	ldrh	r3, [r7, #2]
 8003d66:	0a1b      	lsrs	r3, r3, #8
 8003d68:	b29b      	uxth	r3, r3
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f000 fa6f 	bl	8004250 <i2c_SendByte>
		if (i2c_WaitAck() != 0)
 8003d72:	f000 fadd 	bl	8004330 <i2c_WaitAck>
 8003d76:	4603      	mov	r3, r0
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d134      	bne.n	8003de6 <ee_ReadBytes+0xa6>
		{
			goto cmd_fail;	/* EEPROMÆ÷¼þÎÞÓ¦´ð */
		}
		i2c_SendByte(_usAddress);
 8003d7c:	887b      	ldrh	r3, [r7, #2]
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	4618      	mov	r0, r3
 8003d82:	f000 fa65 	bl	8004250 <i2c_SendByte>
		if (i2c_WaitAck() != 0)
 8003d86:	f000 fad3 	bl	8004330 <i2c_WaitAck>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d12c      	bne.n	8003dea <ee_ReadBytes+0xaa>
		{
			goto cmd_fail;	/* EEPROMÆ÷¼þÎÞÓ¦´ð */
		}
	}
	i2c_Start();
 8003d90:	f000 fa3e 	bl	8004210 <i2c_Start>
	i2c_SendByte(EE_DEV_ADDR | I2C_RD);
 8003d94:	20a1      	movs	r0, #161	; 0xa1
 8003d96:	f000 fa5b 	bl	8004250 <i2c_SendByte>

	if (i2c_WaitAck() != 0)
 8003d9a:	f000 fac9 	bl	8004330 <i2c_WaitAck>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d124      	bne.n	8003dee <ee_ReadBytes+0xae>
	{
		goto cmd_fail;	/* EEPROMÆ÷¼þÎÞÓ¦´ð */
	}
	for (i = 0; i < _usSize; i++)
 8003da4:	2300      	movs	r3, #0
 8003da6:	81fb      	strh	r3, [r7, #14]
 8003da8:	e013      	b.n	8003dd2 <ee_ReadBytes+0x92>
	{
		_pReadBuf[i] = i2c_ReadByte();	/* ¶Á1¸ö×Ö½Ú */
 8003daa:	89fb      	ldrh	r3, [r7, #14]
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	18d4      	adds	r4, r2, r3
 8003db0:	f000 fa8e 	bl	80042d0 <i2c_ReadByte>
 8003db4:	4603      	mov	r3, r0
 8003db6:	7023      	strb	r3, [r4, #0]

		if (i != _usSize - 1)
 8003db8:	89fa      	ldrh	r2, [r7, #14]
 8003dba:	883b      	ldrh	r3, [r7, #0]
 8003dbc:	3b01      	subs	r3, #1
 8003dbe:	429a      	cmp	r2, r3
 8003dc0:	d002      	beq.n	8003dc8 <ee_ReadBytes+0x88>
		{
			i2c_Ack();
 8003dc2:	f000 fae1 	bl	8004388 <i2c_Ack>
 8003dc6:	e001      	b.n	8003dcc <ee_ReadBytes+0x8c>
		}
		else
		{
			i2c_NAck();	/* ×îºó1¸ö×Ö½Ú¶ÁÍêºó£¬CPU²úÉúNACKÐÅºÅ(Çý¶¯SDA = 1) */
 8003dc8:	f000 fafe 	bl	80043c8 <i2c_NAck>
	for (i = 0; i < _usSize; i++)
 8003dcc:	89fb      	ldrh	r3, [r7, #14]
 8003dce:	3301      	adds	r3, #1
 8003dd0:	81fb      	strh	r3, [r7, #14]
 8003dd2:	89fa      	ldrh	r2, [r7, #14]
 8003dd4:	883b      	ldrh	r3, [r7, #0]
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	d3e7      	bcc.n	8003daa <ee_ReadBytes+0x6a>
		}
	}
	i2c_Stop();
 8003dda:	f000 fb11 	bl	8004400 <i2c_Stop>
	return 1;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e009      	b.n	8003df6 <ee_ReadBytes+0xb6>
		goto cmd_fail;
 8003de2:	bf00      	nop
 8003de4:	e004      	b.n	8003df0 <ee_ReadBytes+0xb0>
			goto cmd_fail;	/* EEPROMÆ÷¼þÎÞÓ¦´ð */
 8003de6:	bf00      	nop
 8003de8:	e002      	b.n	8003df0 <ee_ReadBytes+0xb0>
			goto cmd_fail;	/* EEPROMÆ÷¼þÎÞÓ¦´ð */
 8003dea:	bf00      	nop
 8003dec:	e000      	b.n	8003df0 <ee_ReadBytes+0xb0>
		goto cmd_fail;	/* EEPROMÆ÷¼þÎÞÓ¦´ð */
 8003dee:	bf00      	nop
cmd_fail:
	i2c_Stop();
 8003df0:	f000 fb06 	bl	8004400 <i2c_Stop>
	return 0;
 8003df4:	2300      	movs	r3, #0
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3714      	adds	r7, #20
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd90      	pop	{r4, r7, pc}

08003dfe <ee_WriteBytes>:
*********************************************************************************************************
*	Func name: ee_WriteBytes
*********************************************************************************************************
*/
uint8_t ee_WriteBytes(uint8_t *_pWriteBuf, uint16_t _usAddress, uint16_t _usSize)
{
 8003dfe:	b580      	push	{r7, lr}
 8003e00:	b084      	sub	sp, #16
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	6078      	str	r0, [r7, #4]
 8003e06:	460b      	mov	r3, r1
 8003e08:	807b      	strh	r3, [r7, #2]
 8003e0a:	4613      	mov	r3, r2
 8003e0c:	803b      	strh	r3, [r7, #0]
	uint16_t i,m;
	uint16_t usAddr;

	usAddr = _usAddress;
 8003e0e:	887b      	ldrh	r3, [r7, #2]
 8003e10:	817b      	strh	r3, [r7, #10]
	for (i = 0; i < _usSize; i++)
 8003e12:	2300      	movs	r3, #0
 8003e14:	81fb      	strh	r3, [r7, #14]
 8003e16:	e04b      	b.n	8003eb0 <ee_WriteBytes+0xb2>
	{

		if ((i == 0) || (usAddr & (EE_PAGE_SIZE - 1)) == 0)
 8003e18:	89fb      	ldrh	r3, [r7, #14]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d004      	beq.n	8003e28 <ee_WriteBytes+0x2a>
 8003e1e:	897b      	ldrh	r3, [r7, #10]
 8003e20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d131      	bne.n	8003e8c <ee_WriteBytes+0x8e>
		{
			i2c_Stop();
 8003e28:	f000 faea 	bl	8004400 <i2c_Stop>

			for (m = 0; m < 1000; m++)
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	81bb      	strh	r3, [r7, #12]
 8003e30:	e00c      	b.n	8003e4c <ee_WriteBytes+0x4e>
			{
				i2c_Start();
 8003e32:	f000 f9ed 	bl	8004210 <i2c_Start>

				i2c_SendByte(EE_DEV_ADDR | I2C_WR);	/* ´Ë´¦ÊÇÐ´Ö¸Áî */
 8003e36:	20a0      	movs	r0, #160	; 0xa0
 8003e38:	f000 fa0a 	bl	8004250 <i2c_SendByte>

				if (i2c_WaitAck() == 0)
 8003e3c:	f000 fa78 	bl	8004330 <i2c_WaitAck>
 8003e40:	4603      	mov	r3, r0
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d007      	beq.n	8003e56 <ee_WriteBytes+0x58>
			for (m = 0; m < 1000; m++)
 8003e46:	89bb      	ldrh	r3, [r7, #12]
 8003e48:	3301      	adds	r3, #1
 8003e4a:	81bb      	strh	r3, [r7, #12]
 8003e4c:	89bb      	ldrh	r3, [r7, #12]
 8003e4e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e52:	d3ee      	bcc.n	8003e32 <ee_WriteBytes+0x34>
 8003e54:	e000      	b.n	8003e58 <ee_WriteBytes+0x5a>
				{
					break;
 8003e56:	bf00      	nop
				}
			}
			if (m  == 1000)
 8003e58:	89bb      	ldrh	r3, [r7, #12]
 8003e5a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e5e:	d02f      	beq.n	8003ec0 <ee_WriteBytes+0xc2>
					goto cmd_fail;
				}
			}
			else
			{
				i2c_SendByte(usAddr >> 8);
 8003e60:	897b      	ldrh	r3, [r7, #10]
 8003e62:	0a1b      	lsrs	r3, r3, #8
 8003e64:	b29b      	uxth	r3, r3
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f000 f9f1 	bl	8004250 <i2c_SendByte>
				if (i2c_WaitAck() != 0)
 8003e6e:	f000 fa5f 	bl	8004330 <i2c_WaitAck>
 8003e72:	4603      	mov	r3, r0
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d125      	bne.n	8003ec4 <ee_WriteBytes+0xc6>
				{
					goto cmd_fail;	/* EEPROMÆ÷¼þÎÞÓ¦´ð */
				}
				i2c_SendByte(usAddr);
 8003e78:	897b      	ldrh	r3, [r7, #10]
 8003e7a:	b2db      	uxtb	r3, r3
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f000 f9e7 	bl	8004250 <i2c_SendByte>
				if (i2c_WaitAck() != 0)
 8003e82:	f000 fa55 	bl	8004330 <i2c_WaitAck>
 8003e86:	4603      	mov	r3, r0
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d11d      	bne.n	8003ec8 <ee_WriteBytes+0xca>
					goto cmd_fail;	/* EEPROMÆ÷¼þÎÞÓ¦´ð */
				}
			}
		}
		/* µÚ6²½£º¿ªÊ¼Ð´ÈëÊý¾Ý */
		i2c_SendByte(_pWriteBuf[i]);
 8003e8c:	89fb      	ldrh	r3, [r7, #14]
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	4413      	add	r3, r2
 8003e92:	781b      	ldrb	r3, [r3, #0]
 8003e94:	4618      	mov	r0, r3
 8003e96:	f000 f9db 	bl	8004250 <i2c_SendByte>
		/* µÚ7²½£º·¢ËÍACK */
		if (i2c_WaitAck() != 0)
 8003e9a:	f000 fa49 	bl	8004330 <i2c_WaitAck>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d113      	bne.n	8003ecc <ee_WriteBytes+0xce>
		{
			goto cmd_fail;	/* EEPROMÆ÷¼þÎÞÓ¦´ð */
		}
		usAddr++;	/* µØÖ·Ôö1 */
 8003ea4:	897b      	ldrh	r3, [r7, #10]
 8003ea6:	3301      	adds	r3, #1
 8003ea8:	817b      	strh	r3, [r7, #10]
	for (i = 0; i < _usSize; i++)
 8003eaa:	89fb      	ldrh	r3, [r7, #14]
 8003eac:	3301      	adds	r3, #1
 8003eae:	81fb      	strh	r3, [r7, #14]
 8003eb0:	89fa      	ldrh	r2, [r7, #14]
 8003eb2:	883b      	ldrh	r3, [r7, #0]
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d3af      	bcc.n	8003e18 <ee_WriteBytes+0x1a>
	}
	/* ÃüÁîÖ´ÐÐ³É¹¦£¬·¢ËÍI2C×ÜÏßÍ£Ö¹ÐÅºÅ */
	i2c_Stop();
 8003eb8:	f000 faa2 	bl	8004400 <i2c_Stop>
	return 1;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	e009      	b.n	8003ed4 <ee_WriteBytes+0xd6>
				goto cmd_fail;	/* EEPROMÆ÷¼þÐ´³¬Ê± */
 8003ec0:	bf00      	nop
 8003ec2:	e004      	b.n	8003ece <ee_WriteBytes+0xd0>
					goto cmd_fail;	/* EEPROMÆ÷¼þÎÞÓ¦´ð */
 8003ec4:	bf00      	nop
 8003ec6:	e002      	b.n	8003ece <ee_WriteBytes+0xd0>
					goto cmd_fail;	/* EEPROMÆ÷¼þÎÞÓ¦´ð */
 8003ec8:	bf00      	nop
 8003eca:	e000      	b.n	8003ece <ee_WriteBytes+0xd0>
			goto cmd_fail;	/* EEPROMÆ÷¼þÎÞÓ¦´ð */
 8003ecc:	bf00      	nop
cmd_fail: /* ÃüÁîÖ´ÐÐÊ§°Üºó£¬ÇÐ¼Ç·¢ËÍÍ£Ö¹ÐÅºÅ£¬±ÜÃâÓ°ÏìI2C×ÜÏßÉÏÆäËûÉè±¸ */
	/* ·¢ËÍI2C×ÜÏßÍ£Ö¹ÐÅºÅ */
	i2c_Stop();
 8003ece:	f000 fa97 	bl	8004400 <i2c_Stop>
	return 0;
 8003ed2:	2300      	movs	r3, #0
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	3710      	adds	r7, #16
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}

08003edc <bsp_InitExtSRAM>:
*	SRAM_HandleTypeDef , FSMC_NORSRAM_TimingTypeDef
*********************************************************************************************************
*/
#if 1
void bsp_InitExtSRAM(void)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b0ac      	sub	sp, #176	; 0xb0
 8003ee0:	af00      	add	r7, sp, #0
	SRAM_HandleTypeDef hnorsram;
	FSMC_NORSRAM_TimingTypeDef  timingWrite;
	FSMC_NORSRAM_TimingTypeDef  timingRead;
	GPIO_InitTypeDef GPIO_InitStructure;

	__HAL_RCC_GPIOD_CLK_ENABLE();
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	613b      	str	r3, [r7, #16]
 8003ee6:	4b63      	ldr	r3, [pc, #396]	; (8004074 <bsp_InitExtSRAM+0x198>)
 8003ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eea:	4a62      	ldr	r2, [pc, #392]	; (8004074 <bsp_InitExtSRAM+0x198>)
 8003eec:	f043 0308 	orr.w	r3, r3, #8
 8003ef0:	6313      	str	r3, [r2, #48]	; 0x30
 8003ef2:	4b60      	ldr	r3, [pc, #384]	; (8004074 <bsp_InitExtSRAM+0x198>)
 8003ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef6:	f003 0308 	and.w	r3, r3, #8
 8003efa:	613b      	str	r3, [r7, #16]
 8003efc:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8003efe:	2300      	movs	r3, #0
 8003f00:	60fb      	str	r3, [r7, #12]
 8003f02:	4b5c      	ldr	r3, [pc, #368]	; (8004074 <bsp_InitExtSRAM+0x198>)
 8003f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f06:	4a5b      	ldr	r2, [pc, #364]	; (8004074 <bsp_InitExtSRAM+0x198>)
 8003f08:	f043 0310 	orr.w	r3, r3, #16
 8003f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8003f0e:	4b59      	ldr	r3, [pc, #356]	; (8004074 <bsp_InitExtSRAM+0x198>)
 8003f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f12:	f003 0310 	and.w	r3, r3, #16
 8003f16:	60fb      	str	r3, [r7, #12]
 8003f18:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	60bb      	str	r3, [r7, #8]
 8003f1e:	4b55      	ldr	r3, [pc, #340]	; (8004074 <bsp_InitExtSRAM+0x198>)
 8003f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f22:	4a54      	ldr	r2, [pc, #336]	; (8004074 <bsp_InitExtSRAM+0x198>)
 8003f24:	f043 0320 	orr.w	r3, r3, #32
 8003f28:	6313      	str	r3, [r2, #48]	; 0x30
 8003f2a:	4b52      	ldr	r3, [pc, #328]	; (8004074 <bsp_InitExtSRAM+0x198>)
 8003f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f2e:	f003 0320 	and.w	r3, r3, #32
 8003f32:	60bb      	str	r3, [r7, #8]
 8003f34:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8003f36:	2300      	movs	r3, #0
 8003f38:	607b      	str	r3, [r7, #4]
 8003f3a:	4b4e      	ldr	r3, [pc, #312]	; (8004074 <bsp_InitExtSRAM+0x198>)
 8003f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f3e:	4a4d      	ldr	r2, [pc, #308]	; (8004074 <bsp_InitExtSRAM+0x198>)
 8003f40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f44:	6313      	str	r3, [r2, #48]	; 0x30
 8003f46:	4b4b      	ldr	r3, [pc, #300]	; (8004074 <bsp_InitExtSRAM+0x198>)
 8003f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f4e:	607b      	str	r3, [r7, #4]
 8003f50:	687b      	ldr	r3, [r7, #4]

	__HAL_RCC_FSMC_CLK_ENABLE();
 8003f52:	2300      	movs	r3, #0
 8003f54:	603b      	str	r3, [r7, #0]
 8003f56:	4b47      	ldr	r3, [pc, #284]	; (8004074 <bsp_InitExtSRAM+0x198>)
 8003f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f5a:	4a46      	ldr	r2, [pc, #280]	; (8004074 <bsp_InitExtSRAM+0x198>)
 8003f5c:	f043 0301 	orr.w	r3, r3, #1
 8003f60:	6393      	str	r3, [r2, #56]	; 0x38
 8003f62:	4b44      	ldr	r3, [pc, #272]	; (8004074 <bsp_InitExtSRAM+0x198>)
 8003f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f66:	f003 0301 	and.w	r3, r3, #1
 8003f6a:	603b      	str	r3, [r7, #0]
 8003f6c:	683b      	ldr	r3, [r7, #0]
		PG5/FSMC_A15
		PG10/FSMC_NE3	--- Æ¬Ñ¡Ö÷ÐÅºÅ
	*/

	/* GPIOD configuration */
	GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_4  | GPIO_PIN_5  |
 8003f6e:	f64f 7333 	movw	r3, #65331	; 0xff33
 8003f72:	617b      	str	r3, [r7, #20]
		                    GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 | GPIO_PIN_11 |
		                    GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
	GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8003f74:	2302      	movs	r3, #2
 8003f76:	61bb      	str	r3, [r7, #24]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f78:	2303      	movs	r3, #3
 8003f7a:	623b      	str	r3, [r7, #32]
	GPIO_InitStructure.Pull = GPIO_NOPULL;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStructure.Alternate = GPIO_AF12_FSMC;
 8003f80:	230c      	movs	r3, #12
 8003f82:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8003f84:	f107 0314 	add.w	r3, r7, #20
 8003f88:	4619      	mov	r1, r3
 8003f8a:	483b      	ldr	r0, [pc, #236]	; (8004078 <bsp_InitExtSRAM+0x19c>)
 8003f8c:	f003 fcf6 	bl	800797c <HAL_GPIO_Init>

	/* GPIOE configuration */
	GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_3 |
 8003f90:	f64f 73bb 	movw	r3, #65467	; 0xffbb
 8003f94:	617b      	str	r3, [r7, #20]
		                    GPIO_PIN_4  | GPIO_PIN_5  | GPIO_PIN_7 |
		                    GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 | GPIO_PIN_11|
		                    GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
	GPIO_InitStructure.Alternate = GPIO_AF12_FSMC;
 8003f96:	230c      	movs	r3, #12
 8003f98:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8003f9a:	f107 0314 	add.w	r3, r7, #20
 8003f9e:	4619      	mov	r1, r3
 8003fa0:	4836      	ldr	r0, [pc, #216]	; (800407c <bsp_InitExtSRAM+0x1a0>)
 8003fa2:	f003 fceb 	bl	800797c <HAL_GPIO_Init>

	/* GPIOF configuration */
	GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_2  | GPIO_PIN_3  |
 8003fa6:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8003faa:	617b      	str	r3, [r7, #20]
		                    GPIO_PIN_4  | GPIO_PIN_5  | GPIO_PIN_12 | GPIO_PIN_13 |
		                    GPIO_PIN_14 | GPIO_PIN_15;
	GPIO_InitStructure.Alternate = GPIO_AF12_FSMC;
 8003fac:	230c      	movs	r3, #12
 8003fae:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8003fb0:	f107 0314 	add.w	r3, r7, #20
 8003fb4:	4619      	mov	r1, r3
 8003fb6:	4832      	ldr	r0, [pc, #200]	; (8004080 <bsp_InitExtSRAM+0x1a4>)
 8003fb8:	f003 fce0 	bl	800797c <HAL_GPIO_Init>

	/* GPIOG configuration */
	GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_2  | GPIO_PIN_3 |
 8003fbc:	f240 433f 	movw	r3, #1087	; 0x43f
 8003fc0:	617b      	str	r3, [r7, #20]
		                    GPIO_PIN_4  | GPIO_PIN_5  |GPIO_PIN_10;
	GPIO_InitStructure.Alternate = GPIO_AF12_FSMC;
 8003fc2:	230c      	movs	r3, #12
 8003fc4:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8003fc6:	f107 0314 	add.w	r3, r7, #20
 8003fca:	4619      	mov	r1, r3
 8003fcc:	482d      	ldr	r0, [pc, #180]	; (8004084 <bsp_InitExtSRAM+0x1a8>)
 8003fce:	f003 fcd5 	bl	800797c <HAL_GPIO_Init>

	/*-- FSMC Configuration ------------------------------------------------------*/
	timingWrite.AddressSetupTime = 3;
 8003fd2:	2303      	movs	r3, #3
 8003fd4:	647b      	str	r3, [r7, #68]	; 0x44
	timingWrite.AddressHoldTime = 0;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	64bb      	str	r3, [r7, #72]	; 0x48
	timingWrite.DataSetupTime = 2;
 8003fda:	2302      	movs	r3, #2
 8003fdc:	64fb      	str	r3, [r7, #76]	; 0x4c
	timingWrite.BusTurnAroundDuration = 1;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	653b      	str	r3, [r7, #80]	; 0x50
	timingWrite.CLKDivision = 0;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	657b      	str	r3, [r7, #84]	; 0x54
	timingWrite.DataLatency = 0;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	65bb      	str	r3, [r7, #88]	; 0x58
	timingWrite.AccessMode = FSMC_ACCESS_MODE_A;
 8003fea:	2300      	movs	r3, #0
 8003fec:	65fb      	str	r3, [r7, #92]	; 0x5c

	timingRead.AddressSetupTime = 3;
 8003fee:	2303      	movs	r3, #3
 8003ff0:	62bb      	str	r3, [r7, #40]	; 0x28
	timingRead.AddressHoldTime = 0;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
	timingRead.DataSetupTime = 2;
 8003ff6:	2302      	movs	r3, #2
 8003ff8:	633b      	str	r3, [r7, #48]	; 0x30
	timingRead.BusTurnAroundDuration = 1;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	637b      	str	r3, [r7, #52]	; 0x34
	timingRead.CLKDivision = 0;
 8003ffe:	2300      	movs	r3, #0
 8004000:	63bb      	str	r3, [r7, #56]	; 0x38
	timingRead.DataLatency = 0;
 8004002:	2300      	movs	r3, #0
 8004004:	63fb      	str	r3, [r7, #60]	; 0x3c
	timingRead.AccessMode = FSMC_ACCESS_MODE_A;
 8004006:	2300      	movs	r3, #0
 8004008:	643b      	str	r3, [r7, #64]	; 0x40

	hnorsram.Instance = FSMC_NORSRAM_DEVICE;
 800400a:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 800400e:	663b      	str	r3, [r7, #96]	; 0x60
	hnorsram.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8004010:	4b1d      	ldr	r3, [pc, #116]	; (8004088 <bsp_InitExtSRAM+0x1ac>)
 8004012:	667b      	str	r3, [r7, #100]	; 0x64
	hnorsram.Init.NSBank = FSMC_NORSRAM_BANK3;
 8004014:	2304      	movs	r3, #4
 8004016:	66bb      	str	r3, [r7, #104]	; 0x68
	hnorsram.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8004018:	2300      	movs	r3, #0
 800401a:	66fb      	str	r3, [r7, #108]	; 0x6c
	hnorsram.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800401c:	2300      	movs	r3, #0
 800401e:	673b      	str	r3, [r7, #112]	; 0x70
	hnorsram.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8004020:	2310      	movs	r3, #16
 8004022:	677b      	str	r3, [r7, #116]	; 0x74
	hnorsram.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8004024:	2300      	movs	r3, #0
 8004026:	67bb      	str	r3, [r7, #120]	; 0x78
	hnorsram.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8004028:	2300      	movs	r3, #0
 800402a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	hnorsram.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 800402e:	2300      	movs	r3, #0
 8004030:	67fb      	str	r3, [r7, #124]	; 0x7c
	hnorsram.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8004032:	2300      	movs	r3, #0
 8004034:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	hnorsram.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8004038:	2300      	movs	r3, #0
 800403a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	hnorsram.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800403e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004042:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	hnorsram.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8004046:	2300      	movs	r3, #0
 8004048:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	hnorsram.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 800404c:	2300      	movs	r3, #0
 800404e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	hnorsram.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8004052:	2300      	movs	r3, #0
 8004054:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

	HAL_SRAM_Init(&hnorsram, &timingRead, &timingWrite);
 8004058:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800405c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8004060:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8004064:	4618      	mov	r0, r3
 8004066:	f7fe fa15 	bl	8002494 <HAL_SRAM_Init>
}
 800406a:	bf00      	nop
 800406c:	37b0      	adds	r7, #176	; 0xb0
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}
 8004072:	bf00      	nop
 8004074:	40023800 	.word	0x40023800
 8004078:	40020c00 	.word	0x40020c00
 800407c:	40021000 	.word	0x40021000
 8004080:	40021400 	.word	0x40021400
 8004084:	40021800 	.word	0x40021800
 8004088:	a0000104 	.word	0xa0000104

0800408c <bsp_TestExtSRAM>:
	//FSMC_NORSRAM_EnableBank(FSMC_NORSRAM_BANK3);
}
#endif

uint8_t bsp_TestExtSRAM(void)
{
 800408c:	b480      	push	{r7}
 800408e:	b087      	sub	sp, #28
 8004090:	af00      	add	r7, sp, #0
	uint32_t i;
	uint32_t *pSRAM;
	uint8_t *pBytes;
	uint32_t err;
	const uint8_t ByteBuf[4] = {0x55, 0xA5, 0x5A, 0xAA};
 8004092:	4b54      	ldr	r3, [pc, #336]	; (80041e4 <bsp_TestExtSRAM+0x158>)
 8004094:	607b      	str	r3, [r7, #4]

	pSRAM = (uint32_t *)EXT_SRAM_ADDR;
 8004096:	f04f 43d0 	mov.w	r3, #1744830464	; 0x68000000
 800409a:	613b      	str	r3, [r7, #16]
	for (i = 0; i < EXT_SRAM_SIZE / 4; i++)
 800409c:	2300      	movs	r3, #0
 800409e:	617b      	str	r3, [r7, #20]
 80040a0:	e007      	b.n	80040b2 <bsp_TestExtSRAM+0x26>
	{
		*pSRAM++ = i;
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	1d1a      	adds	r2, r3, #4
 80040a6:	613a      	str	r2, [r7, #16]
 80040a8:	697a      	ldr	r2, [r7, #20]
 80040aa:	601a      	str	r2, [r3, #0]
	for (i = 0; i < EXT_SRAM_SIZE / 4; i++)
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	3301      	adds	r3, #1
 80040b0:	617b      	str	r3, [r7, #20]
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80040b8:	d3f3      	bcc.n	80040a2 <bsp_TestExtSRAM+0x16>
	}

	err = 0;
 80040ba:	2300      	movs	r3, #0
 80040bc:	60bb      	str	r3, [r7, #8]
	pSRAM = (uint32_t *)EXT_SRAM_ADDR;
 80040be:	f04f 43d0 	mov.w	r3, #1744830464	; 0x68000000
 80040c2:	613b      	str	r3, [r7, #16]
	for (i = 0; i < EXT_SRAM_SIZE / 4; i++)
 80040c4:	2300      	movs	r3, #0
 80040c6:	617b      	str	r3, [r7, #20]
 80040c8:	e00c      	b.n	80040e4 <bsp_TestExtSRAM+0x58>
	{
		if (*pSRAM++ != i)
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	1d1a      	adds	r2, r3, #4
 80040ce:	613a      	str	r2, [r7, #16]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	697a      	ldr	r2, [r7, #20]
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d002      	beq.n	80040de <bsp_TestExtSRAM+0x52>
		{
			err++;
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	3301      	adds	r3, #1
 80040dc:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < EXT_SRAM_SIZE / 4; i++)
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	3301      	adds	r3, #1
 80040e2:	617b      	str	r3, [r7, #20]
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80040ea:	d3ee      	bcc.n	80040ca <bsp_TestExtSRAM+0x3e>
		}
	}

	if (err >  0)
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d004      	beq.n	80040fc <bsp_TestExtSRAM+0x70>
	{
		return  (4 * err);
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	009b      	lsls	r3, r3, #2
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	e06c      	b.n	80041d6 <bsp_TestExtSRAM+0x14a>
	}

	pSRAM = (uint32_t *)EXT_SRAM_ADDR;
 80040fc:	f04f 43d0 	mov.w	r3, #1744830464	; 0x68000000
 8004100:	613b      	str	r3, [r7, #16]
	for (i = 0; i < EXT_SRAM_SIZE / 4; i++)
 8004102:	2300      	movs	r3, #0
 8004104:	617b      	str	r3, [r7, #20]
 8004106:	e00a      	b.n	800411e <bsp_TestExtSRAM+0x92>
	{
		*pSRAM = ~*pSRAM;
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	43da      	mvns	r2, r3
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	601a      	str	r2, [r3, #0]
		pSRAM++;
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	3304      	adds	r3, #4
 8004116:	613b      	str	r3, [r7, #16]
	for (i = 0; i < EXT_SRAM_SIZE / 4; i++)
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	3301      	adds	r3, #1
 800411c:	617b      	str	r3, [r7, #20]
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004124:	d3f0      	bcc.n	8004108 <bsp_TestExtSRAM+0x7c>
	}

	err = 0;
 8004126:	2300      	movs	r3, #0
 8004128:	60bb      	str	r3, [r7, #8]
	pSRAM = (uint32_t *)EXT_SRAM_ADDR;
 800412a:	f04f 43d0 	mov.w	r3, #1744830464	; 0x68000000
 800412e:	613b      	str	r3, [r7, #16]
	for (i = 0; i < EXT_SRAM_SIZE / 4; i++)
 8004130:	2300      	movs	r3, #0
 8004132:	617b      	str	r3, [r7, #20]
 8004134:	e00d      	b.n	8004152 <bsp_TestExtSRAM+0xc6>
	{
		if (*pSRAM++ != (~i))
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	1d1a      	adds	r2, r3, #4
 800413a:	613a      	str	r2, [r7, #16]
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	43db      	mvns	r3, r3
 8004142:	429a      	cmp	r2, r3
 8004144:	d002      	beq.n	800414c <bsp_TestExtSRAM+0xc0>
		{
			err++;
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	3301      	adds	r3, #1
 800414a:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < EXT_SRAM_SIZE / 4; i++)
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	3301      	adds	r3, #1
 8004150:	617b      	str	r3, [r7, #20]
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004158:	d3ed      	bcc.n	8004136 <bsp_TestExtSRAM+0xaa>
		}
	}

	if (err >  0)
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d004      	beq.n	800416a <bsp_TestExtSRAM+0xde>
	{
		return (4 * err);
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	b2db      	uxtb	r3, r3
 8004164:	009b      	lsls	r3, r3, #2
 8004166:	b2db      	uxtb	r3, r3
 8004168:	e035      	b.n	80041d6 <bsp_TestExtSRAM+0x14a>
	}

	pBytes = (uint8_t *)EXT_SRAM_ADDR;
 800416a:	f04f 43d0 	mov.w	r3, #1744830464	; 0x68000000
 800416e:	60fb      	str	r3, [r7, #12]
	for (i = 0; i < sizeof(ByteBuf); i++)
 8004170:	2300      	movs	r3, #0
 8004172:	617b      	str	r3, [r7, #20]
 8004174:	e00a      	b.n	800418c <bsp_TestExtSRAM+0x100>
	{
		*pBytes++ = ByteBuf[i];
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	1c5a      	adds	r2, r3, #1
 800417a:	60fa      	str	r2, [r7, #12]
 800417c:	1d39      	adds	r1, r7, #4
 800417e:	697a      	ldr	r2, [r7, #20]
 8004180:	440a      	add	r2, r1
 8004182:	7812      	ldrb	r2, [r2, #0]
 8004184:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < sizeof(ByteBuf); i++)
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	3301      	adds	r3, #1
 800418a:	617b      	str	r3, [r7, #20]
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	2b03      	cmp	r3, #3
 8004190:	d9f1      	bls.n	8004176 <bsp_TestExtSRAM+0xea>
	}

	err = 0;
 8004192:	2300      	movs	r3, #0
 8004194:	60bb      	str	r3, [r7, #8]
	pBytes = (uint8_t *)EXT_SRAM_ADDR;
 8004196:	f04f 43d0 	mov.w	r3, #1744830464	; 0x68000000
 800419a:	60fb      	str	r3, [r7, #12]
	for (i = 0; i < sizeof(ByteBuf); i++)
 800419c:	2300      	movs	r3, #0
 800419e:	617b      	str	r3, [r7, #20]
 80041a0:	e00f      	b.n	80041c2 <bsp_TestExtSRAM+0x136>
	{
		if (*pBytes++ != ByteBuf[i])
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	1c5a      	adds	r2, r3, #1
 80041a6:	60fa      	str	r2, [r7, #12]
 80041a8:	781a      	ldrb	r2, [r3, #0]
 80041aa:	1d39      	adds	r1, r7, #4
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	440b      	add	r3, r1
 80041b0:	781b      	ldrb	r3, [r3, #0]
 80041b2:	429a      	cmp	r2, r3
 80041b4:	d002      	beq.n	80041bc <bsp_TestExtSRAM+0x130>
		{
			err++;
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	3301      	adds	r3, #1
 80041ba:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < sizeof(ByteBuf); i++)
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	3301      	adds	r3, #1
 80041c0:	617b      	str	r3, [r7, #20]
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	2b03      	cmp	r3, #3
 80041c6:	d9ec      	bls.n	80041a2 <bsp_TestExtSRAM+0x116>
		}
	}
	if (err >  0)
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d002      	beq.n	80041d4 <bsp_TestExtSRAM+0x148>
	{
		return err;
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	e000      	b.n	80041d6 <bsp_TestExtSRAM+0x14a>
	}
	return 0;
 80041d4:	2300      	movs	r3, #0
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	371c      	adds	r7, #28
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr
 80041e2:	bf00      	nop
 80041e4:	aa5aa555 	.word	0xaa5aa555

080041e8 <i2c_Delay>:
*********************************************************************************************************
*	Func name: i2c_Delay
*********************************************************************************************************
*/
void i2c_Delay(void)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b083      	sub	sp, #12
 80041ec:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < 30; i++);
 80041ee:	2300      	movs	r3, #0
 80041f0:	71fb      	strb	r3, [r7, #7]
 80041f2:	e002      	b.n	80041fa <i2c_Delay+0x12>
 80041f4:	79fb      	ldrb	r3, [r7, #7]
 80041f6:	3301      	adds	r3, #1
 80041f8:	71fb      	strb	r3, [r7, #7]
 80041fa:	79fb      	ldrb	r3, [r7, #7]
 80041fc:	2b1d      	cmp	r3, #29
 80041fe:	d9f9      	bls.n	80041f4 <i2c_Delay+0xc>
}
 8004200:	bf00      	nop
 8004202:	bf00      	nop
 8004204:	370c      	adds	r7, #12
 8004206:	46bd      	mov	sp, r7
 8004208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420c:	4770      	bx	lr
	...

08004210 <i2c_Start>:
*********************************************************************************************************
*	Func name: i2c_Start
*********************************************************************************************************
*/
void i2c_Start(void)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	af00      	add	r7, sp, #0
	I2C_SDA_1();
 8004214:	2201      	movs	r2, #1
 8004216:	2120      	movs	r1, #32
 8004218:	480c      	ldr	r0, [pc, #48]	; (800424c <i2c_Start+0x3c>)
 800421a:	f003 fd63 	bl	8007ce4 <HAL_GPIO_WritePin>
	I2C_SCL_1();
 800421e:	2201      	movs	r2, #1
 8004220:	2110      	movs	r1, #16
 8004222:	480a      	ldr	r0, [pc, #40]	; (800424c <i2c_Start+0x3c>)
 8004224:	f003 fd5e 	bl	8007ce4 <HAL_GPIO_WritePin>
	i2c_Delay();
 8004228:	f7ff ffde 	bl	80041e8 <i2c_Delay>
	I2C_SDA_0();
 800422c:	2200      	movs	r2, #0
 800422e:	2120      	movs	r1, #32
 8004230:	4806      	ldr	r0, [pc, #24]	; (800424c <i2c_Start+0x3c>)
 8004232:	f003 fd57 	bl	8007ce4 <HAL_GPIO_WritePin>
	i2c_Delay();
 8004236:	f7ff ffd7 	bl	80041e8 <i2c_Delay>
	I2C_SCL_0();
 800423a:	2200      	movs	r2, #0
 800423c:	2110      	movs	r1, #16
 800423e:	4803      	ldr	r0, [pc, #12]	; (800424c <i2c_Start+0x3c>)
 8004240:	f003 fd50 	bl	8007ce4 <HAL_GPIO_WritePin>
	i2c_Delay();
 8004244:	f7ff ffd0 	bl	80041e8 <i2c_Delay>
}
 8004248:	bf00      	nop
 800424a:	bd80      	pop	{r7, pc}
 800424c:	40021c00 	.word	0x40021c00

08004250 <i2c_SendByte>:
*********************************************************************************************************
*	Func name: i2c_SendByte
*********************************************************************************************************
*/
void i2c_SendByte(uint8_t _ucByte)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b084      	sub	sp, #16
 8004254:	af00      	add	r7, sp, #0
 8004256:	4603      	mov	r3, r0
 8004258:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	for (i = 0; i < 8; i++)
 800425a:	2300      	movs	r3, #0
 800425c:	73fb      	strb	r3, [r7, #15]
 800425e:	e02c      	b.n	80042ba <i2c_SendByte+0x6a>
	{
		if (_ucByte & 0x80)
 8004260:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004264:	2b00      	cmp	r3, #0
 8004266:	da05      	bge.n	8004274 <i2c_SendByte+0x24>
		{
			I2C_SDA_1();
 8004268:	2201      	movs	r2, #1
 800426a:	2120      	movs	r1, #32
 800426c:	4817      	ldr	r0, [pc, #92]	; (80042cc <i2c_SendByte+0x7c>)
 800426e:	f003 fd39 	bl	8007ce4 <HAL_GPIO_WritePin>
 8004272:	e004      	b.n	800427e <i2c_SendByte+0x2e>
		}
		else
		{
			I2C_SDA_0();
 8004274:	2200      	movs	r2, #0
 8004276:	2120      	movs	r1, #32
 8004278:	4814      	ldr	r0, [pc, #80]	; (80042cc <i2c_SendByte+0x7c>)
 800427a:	f003 fd33 	bl	8007ce4 <HAL_GPIO_WritePin>
		}
		i2c_Delay();
 800427e:	f7ff ffb3 	bl	80041e8 <i2c_Delay>
		I2C_SCL_1();
 8004282:	2201      	movs	r2, #1
 8004284:	2110      	movs	r1, #16
 8004286:	4811      	ldr	r0, [pc, #68]	; (80042cc <i2c_SendByte+0x7c>)
 8004288:	f003 fd2c 	bl	8007ce4 <HAL_GPIO_WritePin>
		i2c_Delay();
 800428c:	f7ff ffac 	bl	80041e8 <i2c_Delay>
		I2C_SCL_0();
 8004290:	2200      	movs	r2, #0
 8004292:	2110      	movs	r1, #16
 8004294:	480d      	ldr	r0, [pc, #52]	; (80042cc <i2c_SendByte+0x7c>)
 8004296:	f003 fd25 	bl	8007ce4 <HAL_GPIO_WritePin>
		if (i == 7)
 800429a:	7bfb      	ldrb	r3, [r7, #15]
 800429c:	2b07      	cmp	r3, #7
 800429e:	d104      	bne.n	80042aa <i2c_SendByte+0x5a>
		{
			 I2C_SDA_1(); // ÊÍ·Å×ÜÏß
 80042a0:	2201      	movs	r2, #1
 80042a2:	2120      	movs	r1, #32
 80042a4:	4809      	ldr	r0, [pc, #36]	; (80042cc <i2c_SendByte+0x7c>)
 80042a6:	f003 fd1d 	bl	8007ce4 <HAL_GPIO_WritePin>
		}
		_ucByte <<= 1;	/* ×óÒÆÒ»¸öbit */
 80042aa:	79fb      	ldrb	r3, [r7, #7]
 80042ac:	005b      	lsls	r3, r3, #1
 80042ae:	71fb      	strb	r3, [r7, #7]
		i2c_Delay();
 80042b0:	f7ff ff9a 	bl	80041e8 <i2c_Delay>
	for (i = 0; i < 8; i++)
 80042b4:	7bfb      	ldrb	r3, [r7, #15]
 80042b6:	3301      	adds	r3, #1
 80042b8:	73fb      	strb	r3, [r7, #15]
 80042ba:	7bfb      	ldrb	r3, [r7, #15]
 80042bc:	2b07      	cmp	r3, #7
 80042be:	d9cf      	bls.n	8004260 <i2c_SendByte+0x10>
	}
}
 80042c0:	bf00      	nop
 80042c2:	bf00      	nop
 80042c4:	3710      	adds	r7, #16
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}
 80042ca:	bf00      	nop
 80042cc:	40021c00 	.word	0x40021c00

080042d0 <i2c_ReadByte>:
*********************************************************************************************************
*	Func name: i2c_ReadByte
*********************************************************************************************************
*/
uint8_t i2c_ReadByte(void)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b082      	sub	sp, #8
 80042d4:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t value;

	value = 0;
 80042d6:	2300      	movs	r3, #0
 80042d8:	71bb      	strb	r3, [r7, #6]

	for (i = 0; i < 8; i++)
 80042da:	2300      	movs	r3, #0
 80042dc:	71fb      	strb	r3, [r7, #7]
 80042de:	e01d      	b.n	800431c <i2c_ReadByte+0x4c>
	{
		value <<= 1;
 80042e0:	79bb      	ldrb	r3, [r7, #6]
 80042e2:	005b      	lsls	r3, r3, #1
 80042e4:	71bb      	strb	r3, [r7, #6]
		I2C_SCL_1();
 80042e6:	2201      	movs	r2, #1
 80042e8:	2110      	movs	r1, #16
 80042ea:	4810      	ldr	r0, [pc, #64]	; (800432c <i2c_ReadByte+0x5c>)
 80042ec:	f003 fcfa 	bl	8007ce4 <HAL_GPIO_WritePin>
		i2c_Delay();
 80042f0:	f7ff ff7a 	bl	80041e8 <i2c_Delay>
		if (I2C_SDA_READ())
 80042f4:	2120      	movs	r1, #32
 80042f6:	480d      	ldr	r0, [pc, #52]	; (800432c <i2c_ReadByte+0x5c>)
 80042f8:	f003 fcdc 	bl	8007cb4 <HAL_GPIO_ReadPin>
 80042fc:	4603      	mov	r3, r0
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d102      	bne.n	8004308 <i2c_ReadByte+0x38>
		{
			value++;
 8004302:	79bb      	ldrb	r3, [r7, #6]
 8004304:	3301      	adds	r3, #1
 8004306:	71bb      	strb	r3, [r7, #6]
		}
		I2C_SCL_0();
 8004308:	2200      	movs	r2, #0
 800430a:	2110      	movs	r1, #16
 800430c:	4807      	ldr	r0, [pc, #28]	; (800432c <i2c_ReadByte+0x5c>)
 800430e:	f003 fce9 	bl	8007ce4 <HAL_GPIO_WritePin>
		i2c_Delay();
 8004312:	f7ff ff69 	bl	80041e8 <i2c_Delay>
	for (i = 0; i < 8; i++)
 8004316:	79fb      	ldrb	r3, [r7, #7]
 8004318:	3301      	adds	r3, #1
 800431a:	71fb      	strb	r3, [r7, #7]
 800431c:	79fb      	ldrb	r3, [r7, #7]
 800431e:	2b07      	cmp	r3, #7
 8004320:	d9de      	bls.n	80042e0 <i2c_ReadByte+0x10>
	}
	return value;
 8004322:	79bb      	ldrb	r3, [r7, #6]
}
 8004324:	4618      	mov	r0, r3
 8004326:	3708      	adds	r7, #8
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}
 800432c:	40021c00 	.word	0x40021c00

08004330 <i2c_WaitAck>:
*********************************************************************************************************
*	Func name: i2c_WaitAck
*********************************************************************************************************
*/
uint8_t i2c_WaitAck(void)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b082      	sub	sp, #8
 8004334:	af00      	add	r7, sp, #0
	uint8_t re;

	I2C_SDA_1();	/* CPUÊÍ·ÅSDA×ÜÏß */
 8004336:	2201      	movs	r2, #1
 8004338:	2120      	movs	r1, #32
 800433a:	4812      	ldr	r0, [pc, #72]	; (8004384 <i2c_WaitAck+0x54>)
 800433c:	f003 fcd2 	bl	8007ce4 <HAL_GPIO_WritePin>
	i2c_Delay();
 8004340:	f7ff ff52 	bl	80041e8 <i2c_Delay>
	I2C_SCL_1();	/* CPUÇý¶¯SCL = 1, ´ËÊ±Æ÷¼þ»á·µ»ØACKÓ¦´ð */
 8004344:	2201      	movs	r2, #1
 8004346:	2110      	movs	r1, #16
 8004348:	480e      	ldr	r0, [pc, #56]	; (8004384 <i2c_WaitAck+0x54>)
 800434a:	f003 fccb 	bl	8007ce4 <HAL_GPIO_WritePin>
	i2c_Delay();
 800434e:	f7ff ff4b 	bl	80041e8 <i2c_Delay>
	if (I2C_SDA_READ())	/* CPU¶ÁÈ¡SDA¿ÚÏß×´Ì¬ */
 8004352:	2120      	movs	r1, #32
 8004354:	480b      	ldr	r0, [pc, #44]	; (8004384 <i2c_WaitAck+0x54>)
 8004356:	f003 fcad 	bl	8007cb4 <HAL_GPIO_ReadPin>
 800435a:	4603      	mov	r3, r0
 800435c:	2b01      	cmp	r3, #1
 800435e:	d102      	bne.n	8004366 <i2c_WaitAck+0x36>
	{
		re = 1;
 8004360:	2301      	movs	r3, #1
 8004362:	71fb      	strb	r3, [r7, #7]
 8004364:	e001      	b.n	800436a <i2c_WaitAck+0x3a>
	}
	else
	{
		re = 0;
 8004366:	2300      	movs	r3, #0
 8004368:	71fb      	strb	r3, [r7, #7]
	}
	I2C_SCL_0();
 800436a:	2200      	movs	r2, #0
 800436c:	2110      	movs	r1, #16
 800436e:	4805      	ldr	r0, [pc, #20]	; (8004384 <i2c_WaitAck+0x54>)
 8004370:	f003 fcb8 	bl	8007ce4 <HAL_GPIO_WritePin>
	i2c_Delay();
 8004374:	f7ff ff38 	bl	80041e8 <i2c_Delay>
	return re;
 8004378:	79fb      	ldrb	r3, [r7, #7]
}
 800437a:	4618      	mov	r0, r3
 800437c:	3708      	adds	r7, #8
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}
 8004382:	bf00      	nop
 8004384:	40021c00 	.word	0x40021c00

08004388 <i2c_Ack>:
*********************************************************************************************************
*	Func name: i2c_Ack
*********************************************************************************************************
*/
void i2c_Ack(void)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	af00      	add	r7, sp, #0
	I2C_SDA_0();	/* CPUÇý¶¯SDA = 0 */
 800438c:	2200      	movs	r2, #0
 800438e:	2120      	movs	r1, #32
 8004390:	480c      	ldr	r0, [pc, #48]	; (80043c4 <i2c_Ack+0x3c>)
 8004392:	f003 fca7 	bl	8007ce4 <HAL_GPIO_WritePin>
	i2c_Delay();
 8004396:	f7ff ff27 	bl	80041e8 <i2c_Delay>
	I2C_SCL_1();	/* CPU²úÉú1¸öÊ±ÖÓ */
 800439a:	2201      	movs	r2, #1
 800439c:	2110      	movs	r1, #16
 800439e:	4809      	ldr	r0, [pc, #36]	; (80043c4 <i2c_Ack+0x3c>)
 80043a0:	f003 fca0 	bl	8007ce4 <HAL_GPIO_WritePin>
	i2c_Delay();
 80043a4:	f7ff ff20 	bl	80041e8 <i2c_Delay>
	I2C_SCL_0();
 80043a8:	2200      	movs	r2, #0
 80043aa:	2110      	movs	r1, #16
 80043ac:	4805      	ldr	r0, [pc, #20]	; (80043c4 <i2c_Ack+0x3c>)
 80043ae:	f003 fc99 	bl	8007ce4 <HAL_GPIO_WritePin>
	i2c_Delay();
 80043b2:	f7ff ff19 	bl	80041e8 <i2c_Delay>
	I2C_SDA_1();	/* CPUÊÍ·ÅSDA×ÜÏß */
 80043b6:	2201      	movs	r2, #1
 80043b8:	2120      	movs	r1, #32
 80043ba:	4802      	ldr	r0, [pc, #8]	; (80043c4 <i2c_Ack+0x3c>)
 80043bc:	f003 fc92 	bl	8007ce4 <HAL_GPIO_WritePin>
}
 80043c0:	bf00      	nop
 80043c2:	bd80      	pop	{r7, pc}
 80043c4:	40021c00 	.word	0x40021c00

080043c8 <i2c_NAck>:
*********************************************************************************************************
*	Func name: i2c_NAck
*********************************************************************************************************
*/
void i2c_NAck(void)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	af00      	add	r7, sp, #0
	I2C_SDA_1();	/* CPUÇý¶¯SDA = 1 */
 80043cc:	2201      	movs	r2, #1
 80043ce:	2120      	movs	r1, #32
 80043d0:	480a      	ldr	r0, [pc, #40]	; (80043fc <i2c_NAck+0x34>)
 80043d2:	f003 fc87 	bl	8007ce4 <HAL_GPIO_WritePin>
	i2c_Delay();
 80043d6:	f7ff ff07 	bl	80041e8 <i2c_Delay>
	I2C_SCL_1();	/* CPU²úÉú1¸öÊ±ÖÓ */
 80043da:	2201      	movs	r2, #1
 80043dc:	2110      	movs	r1, #16
 80043de:	4807      	ldr	r0, [pc, #28]	; (80043fc <i2c_NAck+0x34>)
 80043e0:	f003 fc80 	bl	8007ce4 <HAL_GPIO_WritePin>
	i2c_Delay();
 80043e4:	f7ff ff00 	bl	80041e8 <i2c_Delay>
	I2C_SCL_0();
 80043e8:	2200      	movs	r2, #0
 80043ea:	2110      	movs	r1, #16
 80043ec:	4803      	ldr	r0, [pc, #12]	; (80043fc <i2c_NAck+0x34>)
 80043ee:	f003 fc79 	bl	8007ce4 <HAL_GPIO_WritePin>
	i2c_Delay();
 80043f2:	f7ff fef9 	bl	80041e8 <i2c_Delay>
}
 80043f6:	bf00      	nop
 80043f8:	bd80      	pop	{r7, pc}
 80043fa:	bf00      	nop
 80043fc:	40021c00 	.word	0x40021c00

08004400 <i2c_Stop>:
*********************************************************************************************************
*	Func name: i2c_Start
*********************************************************************************************************
*/
void i2c_Stop(void)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	af00      	add	r7, sp, #0
	I2C_SDA_0();
 8004404:	2200      	movs	r2, #0
 8004406:	2120      	movs	r1, #32
 8004408:	4808      	ldr	r0, [pc, #32]	; (800442c <i2c_Stop+0x2c>)
 800440a:	f003 fc6b 	bl	8007ce4 <HAL_GPIO_WritePin>
	I2C_SCL_1();
 800440e:	2201      	movs	r2, #1
 8004410:	2110      	movs	r1, #16
 8004412:	4806      	ldr	r0, [pc, #24]	; (800442c <i2c_Stop+0x2c>)
 8004414:	f003 fc66 	bl	8007ce4 <HAL_GPIO_WritePin>
	i2c_Delay();
 8004418:	f7ff fee6 	bl	80041e8 <i2c_Delay>
	I2C_SDA_1();
 800441c:	2201      	movs	r2, #1
 800441e:	2120      	movs	r1, #32
 8004420:	4802      	ldr	r0, [pc, #8]	; (800442c <i2c_Stop+0x2c>)
 8004422:	f003 fc5f 	bl	8007ce4 <HAL_GPIO_WritePin>
}
 8004426:	bf00      	nop
 8004428:	bd80      	pop	{r7, pc}
 800442a:	bf00      	nop
 800442c:	40021c00 	.word	0x40021c00

08004430 <bsp_InitI2C>:
*********************************************************************************************************
*	Func name: bsp_InitI2C
*********************************************************************************************************
*/
void bsp_InitI2C(void)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b086      	sub	sp, #24
 8004434:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	__HAL_RCC_GPIOH_CLK_ENABLE();
 8004436:	2300      	movs	r3, #0
 8004438:	603b      	str	r3, [r7, #0]
 800443a:	4b0f      	ldr	r3, [pc, #60]	; (8004478 <bsp_InitI2C+0x48>)
 800443c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800443e:	4a0e      	ldr	r2, [pc, #56]	; (8004478 <bsp_InitI2C+0x48>)
 8004440:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004444:	6313      	str	r3, [r2, #48]	; 0x30
 8004446:	4b0c      	ldr	r3, [pc, #48]	; (8004478 <bsp_InitI2C+0x48>)
 8004448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800444a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800444e:	603b      	str	r3, [r7, #0]
 8004450:	683b      	ldr	r3, [r7, #0]

	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_OD;
 8004452:	2311      	movs	r3, #17
 8004454:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructure.Pull = GPIO_NOPULL;
 8004456:	2300      	movs	r3, #0
 8004458:	60fb      	str	r3, [r7, #12]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800445a:	2303      	movs	r3, #3
 800445c:	613b      	str	r3, [r7, #16]
	GPIO_InitStructure.Pin = I2C_SCL_PIN | I2C_SDA_PIN;
 800445e:	2330      	movs	r3, #48	; 0x30
 8004460:	607b      	str	r3, [r7, #4]

	HAL_GPIO_Init(GPIO_PORT_I2C, &GPIO_InitStructure);
 8004462:	1d3b      	adds	r3, r7, #4
 8004464:	4619      	mov	r1, r3
 8004466:	4805      	ldr	r0, [pc, #20]	; (800447c <bsp_InitI2C+0x4c>)
 8004468:	f003 fa88 	bl	800797c <HAL_GPIO_Init>

	i2c_Stop();
 800446c:	f7ff ffc8 	bl	8004400 <i2c_Stop>
}
 8004470:	bf00      	nop
 8004472:	3718      	adds	r7, #24
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}
 8004478:	40023800 	.word	0x40023800
 800447c:	40021c00 	.word	0x40021c00

08004480 <i2c_CheckDevice>:
*********************************************************************************************************
*	Func name: i2c_CheckDevice
*********************************************************************************************************
*/
uint8_t i2c_CheckDevice(uint8_t _Address)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b084      	sub	sp, #16
 8004484:	af00      	add	r7, sp, #0
 8004486:	4603      	mov	r3, r0
 8004488:	71fb      	strb	r3, [r7, #7]
	uint8_t ucAck;

	if (I2C_SDA_READ() && I2C_SCL_READ())
 800448a:	2120      	movs	r1, #32
 800448c:	480f      	ldr	r0, [pc, #60]	; (80044cc <i2c_CheckDevice+0x4c>)
 800448e:	f003 fc11 	bl	8007cb4 <HAL_GPIO_ReadPin>
 8004492:	4603      	mov	r3, r0
 8004494:	2b01      	cmp	r3, #1
 8004496:	d114      	bne.n	80044c2 <i2c_CheckDevice+0x42>
 8004498:	2110      	movs	r1, #16
 800449a:	480c      	ldr	r0, [pc, #48]	; (80044cc <i2c_CheckDevice+0x4c>)
 800449c:	f003 fc0a 	bl	8007cb4 <HAL_GPIO_ReadPin>
 80044a0:	4603      	mov	r3, r0
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	d10d      	bne.n	80044c2 <i2c_CheckDevice+0x42>
	{
		i2c_Start();
 80044a6:	f7ff feb3 	bl	8004210 <i2c_Start>

		i2c_SendByte(_Address | I2C_WR);
 80044aa:	79fb      	ldrb	r3, [r7, #7]
 80044ac:	4618      	mov	r0, r3
 80044ae:	f7ff fecf 	bl	8004250 <i2c_SendByte>
		ucAck = i2c_WaitAck();
 80044b2:	f7ff ff3d 	bl	8004330 <i2c_WaitAck>
 80044b6:	4603      	mov	r3, r0
 80044b8:	73fb      	strb	r3, [r7, #15]

		i2c_Stop();
 80044ba:	f7ff ffa1 	bl	8004400 <i2c_Stop>

		return ucAck;
 80044be:	7bfb      	ldrb	r3, [r7, #15]
 80044c0:	e000      	b.n	80044c4 <i2c_CheckDevice+0x44>
	}
	return 1;
 80044c2:	2301      	movs	r3, #1
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	3710      	adds	r7, #16
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}
 80044cc:	40021c00 	.word	0x40021c00

080044d0 <IsKeyDown1>:
	static uint8_t IsKeyDown5(void) {if ((GPIO_PORT_K5->IDR & GPIO_PIN_K5) == 0) return 1;else return 0;}
	static uint8_t IsKeyDown6(void) {if ((GPIO_PORT_K6->IDR & GPIO_PIN_K6) == 0) return 1;else return 0;}
	static uint8_t IsKeyDown7(void) {if ((GPIO_PORT_K7->IDR & GPIO_PIN_K7) == 0) return 1;else return 0;}
	static uint8_t IsKeyDown8(void) {if ((GPIO_PORT_K8->IDR & GPIO_PIN_K8) == 0) return 1;else return 0;}
#else				/* 안릉란 STM32-V5 개발보드 */
	static uint8_t IsKeyDown1(void){return (HAL_GPIO_ReadPin(GPIO_PORT_K1, GPIO_PIN_K1) == GPIO_PIN_RESET) ? 1 : 0;}
 80044d0:	b580      	push	{r7, lr}
 80044d2:	af00      	add	r7, sp, #0
 80044d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80044d8:	4805      	ldr	r0, [pc, #20]	; (80044f0 <IsKeyDown1+0x20>)
 80044da:	f003 fbeb 	bl	8007cb4 <HAL_GPIO_ReadPin>
 80044de:	4603      	mov	r3, r0
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	bf0c      	ite	eq
 80044e4:	2301      	moveq	r3, #1
 80044e6:	2300      	movne	r3, #0
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	4618      	mov	r0, r3
 80044ec:	bd80      	pop	{r7, pc}
 80044ee:	bf00      	nop
 80044f0:	40022000 	.word	0x40022000

080044f4 <IsKeyDown2>:
	static uint8_t IsKeyDown2(void) {return (HAL_GPIO_ReadPin(GPIO_PORT_K2, GPIO_PIN_K2) == GPIO_PIN_RESET) ? 1 : 0;}
 80044f4:	b580      	push	{r7, lr}
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80044fc:	4805      	ldr	r0, [pc, #20]	; (8004514 <IsKeyDown2+0x20>)
 80044fe:	f003 fbd9 	bl	8007cb4 <HAL_GPIO_ReadPin>
 8004502:	4603      	mov	r3, r0
 8004504:	2b00      	cmp	r3, #0
 8004506:	bf0c      	ite	eq
 8004508:	2301      	moveq	r3, #1
 800450a:	2300      	movne	r3, #0
 800450c:	b2db      	uxtb	r3, r3
 800450e:	4618      	mov	r0, r3
 8004510:	bd80      	pop	{r7, pc}
 8004512:	bf00      	nop
 8004514:	40020800 	.word	0x40020800

08004518 <IsKeyDown3>:
	static uint8_t IsKeyDown3(void){return (HAL_GPIO_ReadPin(GPIO_PORT_K3, GPIO_PIN_K3) == GPIO_PIN_RESET) ? 1 : 0;}
 8004518:	b580      	push	{r7, lr}
 800451a:	af00      	add	r7, sp, #0
 800451c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004520:	4805      	ldr	r0, [pc, #20]	; (8004538 <IsKeyDown3+0x20>)
 8004522:	f003 fbc7 	bl	8007cb4 <HAL_GPIO_ReadPin>
 8004526:	4603      	mov	r3, r0
 8004528:	2b00      	cmp	r3, #0
 800452a:	bf0c      	ite	eq
 800452c:	2301      	moveq	r3, #1
 800452e:	2300      	movne	r3, #0
 8004530:	b2db      	uxtb	r3, r3
 8004532:	4618      	mov	r0, r3
 8004534:	bd80      	pop	{r7, pc}
 8004536:	bf00      	nop
 8004538:	40022000 	.word	0x40022000

0800453c <IsKeyDown4>:
	static uint8_t IsKeyDown4(void) {return (HAL_GPIO_ReadPin(GPIO_PORT_K4, GPIO_PIN_K4) == GPIO_PIN_RESET) ? 1 : 0;}
 800453c:	b580      	push	{r7, lr}
 800453e:	af00      	add	r7, sp, #0
 8004540:	2104      	movs	r1, #4
 8004542:	4805      	ldr	r0, [pc, #20]	; (8004558 <IsKeyDown4+0x1c>)
 8004544:	f003 fbb6 	bl	8007cb4 <HAL_GPIO_ReadPin>
 8004548:	4603      	mov	r3, r0
 800454a:	2b00      	cmp	r3, #0
 800454c:	bf0c      	ite	eq
 800454e:	2301      	moveq	r3, #1
 8004550:	2300      	movne	r3, #0
 8004552:	b2db      	uxtb	r3, r3
 8004554:	4618      	mov	r0, r3
 8004556:	bd80      	pop	{r7, pc}
 8004558:	40021c00 	.word	0x40021c00

0800455c <IsKeyDown5>:
	static uint8_t IsKeyDown5(void) {return (HAL_GPIO_ReadPin(GPIO_PORT_K5, GPIO_PIN_K5) == GPIO_PIN_RESET) ? 1 : 0;}
 800455c:	b580      	push	{r7, lr}
 800455e:	af00      	add	r7, sp, #0
 8004560:	2108      	movs	r1, #8
 8004562:	4805      	ldr	r0, [pc, #20]	; (8004578 <IsKeyDown5+0x1c>)
 8004564:	f003 fba6 	bl	8007cb4 <HAL_GPIO_ReadPin>
 8004568:	4603      	mov	r3, r0
 800456a:	2b00      	cmp	r3, #0
 800456c:	bf0c      	ite	eq
 800456e:	2301      	moveq	r3, #1
 8004570:	2300      	movne	r3, #0
 8004572:	b2db      	uxtb	r3, r3
 8004574:	4618      	mov	r0, r3
 8004576:	bd80      	pop	{r7, pc}
 8004578:	40021c00 	.word	0x40021c00

0800457c <IsKeyDown6>:
	static uint8_t IsKeyDown6(void) {return (HAL_GPIO_ReadPin(GPIO_PORT_K6, GPIO_PIN_K6) == GPIO_PIN_RESET) ? 1 : 0;}
 800457c:	b580      	push	{r7, lr}
 800457e:	af00      	add	r7, sp, #0
 8004580:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004584:	4805      	ldr	r0, [pc, #20]	; (800459c <IsKeyDown6+0x20>)
 8004586:	f003 fb95 	bl	8007cb4 <HAL_GPIO_ReadPin>
 800458a:	4603      	mov	r3, r0
 800458c:	2b00      	cmp	r3, #0
 800458e:	bf0c      	ite	eq
 8004590:	2301      	moveq	r3, #1
 8004592:	2300      	movne	r3, #0
 8004594:	b2db      	uxtb	r3, r3
 8004596:	4618      	mov	r0, r3
 8004598:	bd80      	pop	{r7, pc}
 800459a:	bf00      	nop
 800459c:	40021400 	.word	0x40021400

080045a0 <IsKeyDown7>:
	static uint8_t IsKeyDown7(void) {return (HAL_GPIO_ReadPin(GPIO_PORT_K7, GPIO_PIN_K7) == GPIO_PIN_RESET) ? 1 : 0;}
 80045a0:	b580      	push	{r7, lr}
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	2180      	movs	r1, #128	; 0x80
 80045a6:	4805      	ldr	r0, [pc, #20]	; (80045bc <IsKeyDown7+0x1c>)
 80045a8:	f003 fb84 	bl	8007cb4 <HAL_GPIO_ReadPin>
 80045ac:	4603      	mov	r3, r0
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	bf0c      	ite	eq
 80045b2:	2301      	moveq	r3, #1
 80045b4:	2300      	movne	r3, #0
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	4618      	mov	r0, r3
 80045ba:	bd80      	pop	{r7, pc}
 80045bc:	40021800 	.word	0x40021800

080045c0 <IsKeyDown8>:
	static uint8_t IsKeyDown8(void) {return (HAL_GPIO_ReadPin(GPIO_PORT_K8, GPIO_PIN_K8) == GPIO_PIN_RESET) ? 1 : 0;}
 80045c0:	b580      	push	{r7, lr}
 80045c2:	af00      	add	r7, sp, #0
 80045c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80045c8:	4805      	ldr	r0, [pc, #20]	; (80045e0 <IsKeyDown8+0x20>)
 80045ca:	f003 fb73 	bl	8007cb4 <HAL_GPIO_ReadPin>
 80045ce:	4603      	mov	r3, r0
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	bf0c      	ite	eq
 80045d4:	2301      	moveq	r3, #1
 80045d6:	2300      	movne	r3, #0
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	4618      	mov	r0, r3
 80045dc:	bd80      	pop	{r7, pc}
 80045de:	bf00      	nop
 80045e0:	40021c00 	.word	0x40021c00

080045e4 <IsKeyDown9>:
#endif
	static uint8_t IsKeyDown9(void) {if (IsKeyDown1() && IsKeyDown2()) return 1;else return 0;}
 80045e4:	b580      	push	{r7, lr}
 80045e6:	af00      	add	r7, sp, #0
 80045e8:	f7ff ff72 	bl	80044d0 <IsKeyDown1>
 80045ec:	4603      	mov	r3, r0
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d006      	beq.n	8004600 <IsKeyDown9+0x1c>
 80045f2:	f7ff ff7f 	bl	80044f4 <IsKeyDown2>
 80045f6:	4603      	mov	r3, r0
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d001      	beq.n	8004600 <IsKeyDown9+0x1c>
 80045fc:	2301      	movs	r3, #1
 80045fe:	e000      	b.n	8004602 <IsKeyDown9+0x1e>
 8004600:	2300      	movs	r3, #0
 8004602:	4618      	mov	r0, r3
 8004604:	bd80      	pop	{r7, pc}

08004606 <IsKeyDown10>:
	static uint8_t IsKeyDown10(void) {if (IsKeyDown1() && IsKeyDown2()) return 1;else return 0;}
 8004606:	b580      	push	{r7, lr}
 8004608:	af00      	add	r7, sp, #0
 800460a:	f7ff ff61 	bl	80044d0 <IsKeyDown1>
 800460e:	4603      	mov	r3, r0
 8004610:	2b00      	cmp	r3, #0
 8004612:	d006      	beq.n	8004622 <IsKeyDown10+0x1c>
 8004614:	f7ff ff6e 	bl	80044f4 <IsKeyDown2>
 8004618:	4603      	mov	r3, r0
 800461a:	2b00      	cmp	r3, #0
 800461c:	d001      	beq.n	8004622 <IsKeyDown10+0x1c>
 800461e:	2301      	movs	r3, #1
 8004620:	e000      	b.n	8004624 <IsKeyDown10+0x1e>
 8004622:	2300      	movs	r3, #0
 8004624:	4618      	mov	r0, r3
 8004626:	bd80      	pop	{r7, pc}

08004628 <bsp_InitKey>:
*********************************************************************************************************
* 함수 이름: bsp_InitKey
*********************************************************************************************************
*/
void bsp_InitKey(void)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	af00      	add	r7, sp, #0
	bsp_InitKeyVar();
 800462c:	f000 f8a8 	bl	8004780 <bsp_InitKeyVar>
	bsp_InitKeyHard();
 8004630:	f000 f802 	bl	8004638 <bsp_InitKeyHard>
}
 8004634:	bf00      	nop
 8004636:	bd80      	pop	{r7, pc}

08004638 <bsp_InitKeyHard>:
*********************************************************************************************************
* 함수 이름: bsp_InitKeyHard
*********************************************************************************************************
*/
static void bsp_InitKeyHard(void)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b08a      	sub	sp, #40	; 0x28
 800463c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	// #define RCC_ALL_KEY 	(RCC_AHB1Periph_GPIOC | RCC_AHB1Periph_GPIOF | RCC_AHB1Periph_GPIOH | RCC_AHB1Periph_GPIOI | RCC_AHB1Periph_GPIOG)
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800463e:	2300      	movs	r3, #0
 8004640:	613b      	str	r3, [r7, #16]
 8004642:	4b49      	ldr	r3, [pc, #292]	; (8004768 <bsp_InitKeyHard+0x130>)
 8004644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004646:	4a48      	ldr	r2, [pc, #288]	; (8004768 <bsp_InitKeyHard+0x130>)
 8004648:	f043 0304 	orr.w	r3, r3, #4
 800464c:	6313      	str	r3, [r2, #48]	; 0x30
 800464e:	4b46      	ldr	r3, [pc, #280]	; (8004768 <bsp_InitKeyHard+0x130>)
 8004650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004652:	f003 0304 	and.w	r3, r3, #4
 8004656:	613b      	str	r3, [r7, #16]
 8004658:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 800465a:	2300      	movs	r3, #0
 800465c:	60fb      	str	r3, [r7, #12]
 800465e:	4b42      	ldr	r3, [pc, #264]	; (8004768 <bsp_InitKeyHard+0x130>)
 8004660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004662:	4a41      	ldr	r2, [pc, #260]	; (8004768 <bsp_InitKeyHard+0x130>)
 8004664:	f043 0320 	orr.w	r3, r3, #32
 8004668:	6313      	str	r3, [r2, #48]	; 0x30
 800466a:	4b3f      	ldr	r3, [pc, #252]	; (8004768 <bsp_InitKeyHard+0x130>)
 800466c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800466e:	f003 0320 	and.w	r3, r3, #32
 8004672:	60fb      	str	r3, [r7, #12]
 8004674:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8004676:	2300      	movs	r3, #0
 8004678:	60bb      	str	r3, [r7, #8]
 800467a:	4b3b      	ldr	r3, [pc, #236]	; (8004768 <bsp_InitKeyHard+0x130>)
 800467c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800467e:	4a3a      	ldr	r2, [pc, #232]	; (8004768 <bsp_InitKeyHard+0x130>)
 8004680:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004684:	6313      	str	r3, [r2, #48]	; 0x30
 8004686:	4b38      	ldr	r3, [pc, #224]	; (8004768 <bsp_InitKeyHard+0x130>)
 8004688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800468a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800468e:	60bb      	str	r3, [r7, #8]
 8004690:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOI_CLK_ENABLE();
 8004692:	2300      	movs	r3, #0
 8004694:	607b      	str	r3, [r7, #4]
 8004696:	4b34      	ldr	r3, [pc, #208]	; (8004768 <bsp_InitKeyHard+0x130>)
 8004698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800469a:	4a33      	ldr	r2, [pc, #204]	; (8004768 <bsp_InitKeyHard+0x130>)
 800469c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046a0:	6313      	str	r3, [r2, #48]	; 0x30
 80046a2:	4b31      	ldr	r3, [pc, #196]	; (8004768 <bsp_InitKeyHard+0x130>)
 80046a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046aa:	607b      	str	r3, [r7, #4]
 80046ac:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 80046ae:	2300      	movs	r3, #0
 80046b0:	603b      	str	r3, [r7, #0]
 80046b2:	4b2d      	ldr	r3, [pc, #180]	; (8004768 <bsp_InitKeyHard+0x130>)
 80046b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046b6:	4a2c      	ldr	r2, [pc, #176]	; (8004768 <bsp_InitKeyHard+0x130>)
 80046b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046bc:	6313      	str	r3, [r2, #48]	; 0x30
 80046be:	4b2a      	ldr	r3, [pc, #168]	; (8004768 <bsp_InitKeyHard+0x130>)
 80046c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046c6:	603b      	str	r3, [r7, #0]
 80046c8:	683b      	ldr	r3, [r7, #0]


	GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 80046ca:	2300      	movs	r3, #0
 80046cc:	61bb      	str	r3, [r7, #24]
	GPIO_InitStructure.Pull = GPIO_PULLUP;  // 풀업 저항 사용 (버튼이 GND에 연결되어 있을 경우)
 80046ce:	2301      	movs	r3, #1
 80046d0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 80046d2:	2302      	movs	r3, #2
 80046d4:	623b      	str	r3, [r7, #32]

	GPIO_InitStructure.Pin = GPIO_PIN_K1;
 80046d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80046da:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_PORT_K1, &GPIO_InitStructure);
 80046dc:	f107 0314 	add.w	r3, r7, #20
 80046e0:	4619      	mov	r1, r3
 80046e2:	4822      	ldr	r0, [pc, #136]	; (800476c <bsp_InitKeyHard+0x134>)
 80046e4:	f003 f94a 	bl	800797c <HAL_GPIO_Init>

	GPIO_InitStructure.Pin = GPIO_PIN_K2;
 80046e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80046ec:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_PORT_K2, &GPIO_InitStructure);
 80046ee:	f107 0314 	add.w	r3, r7, #20
 80046f2:	4619      	mov	r1, r3
 80046f4:	481e      	ldr	r0, [pc, #120]	; (8004770 <bsp_InitKeyHard+0x138>)
 80046f6:	f003 f941 	bl	800797c <HAL_GPIO_Init>

	GPIO_InitStructure.Pin = GPIO_PIN_K3;
 80046fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80046fe:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_PORT_K3, &GPIO_InitStructure);
 8004700:	f107 0314 	add.w	r3, r7, #20
 8004704:	4619      	mov	r1, r3
 8004706:	4819      	ldr	r0, [pc, #100]	; (800476c <bsp_InitKeyHard+0x134>)
 8004708:	f003 f938 	bl	800797c <HAL_GPIO_Init>

	GPIO_InitStructure.Pin = GPIO_PIN_K4;
 800470c:	2304      	movs	r3, #4
 800470e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_PORT_K4, &GPIO_InitStructure);
 8004710:	f107 0314 	add.w	r3, r7, #20
 8004714:	4619      	mov	r1, r3
 8004716:	4817      	ldr	r0, [pc, #92]	; (8004774 <bsp_InitKeyHard+0x13c>)
 8004718:	f003 f930 	bl	800797c <HAL_GPIO_Init>

	GPIO_InitStructure.Pin = GPIO_PIN_K5;
 800471c:	2308      	movs	r3, #8
 800471e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_PORT_K5, &GPIO_InitStructure);
 8004720:	f107 0314 	add.w	r3, r7, #20
 8004724:	4619      	mov	r1, r3
 8004726:	4813      	ldr	r0, [pc, #76]	; (8004774 <bsp_InitKeyHard+0x13c>)
 8004728:	f003 f928 	bl	800797c <HAL_GPIO_Init>

	GPIO_InitStructure.Pin = GPIO_PIN_K6;
 800472c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004730:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_PORT_K6, &GPIO_InitStructure);
 8004732:	f107 0314 	add.w	r3, r7, #20
 8004736:	4619      	mov	r1, r3
 8004738:	480f      	ldr	r0, [pc, #60]	; (8004778 <bsp_InitKeyHard+0x140>)
 800473a:	f003 f91f 	bl	800797c <HAL_GPIO_Init>

	GPIO_InitStructure.Pin = GPIO_PIN_K7;
 800473e:	2380      	movs	r3, #128	; 0x80
 8004740:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_PORT_K7, &GPIO_InitStructure);
 8004742:	f107 0314 	add.w	r3, r7, #20
 8004746:	4619      	mov	r1, r3
 8004748:	480c      	ldr	r0, [pc, #48]	; (800477c <bsp_InitKeyHard+0x144>)
 800474a:	f003 f917 	bl	800797c <HAL_GPIO_Init>

	GPIO_InitStructure.Pin = GPIO_PIN_K8;
 800474e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004752:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_PORT_K8, &GPIO_InitStructure);
 8004754:	f107 0314 	add.w	r3, r7, #20
 8004758:	4619      	mov	r1, r3
 800475a:	4806      	ldr	r0, [pc, #24]	; (8004774 <bsp_InitKeyHard+0x13c>)
 800475c:	f003 f90e 	bl	800797c <HAL_GPIO_Init>
}
 8004760:	bf00      	nop
 8004762:	3728      	adds	r7, #40	; 0x28
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}
 8004768:	40023800 	.word	0x40023800
 800476c:	40022000 	.word	0x40022000
 8004770:	40020800 	.word	0x40020800
 8004774:	40021c00 	.word	0x40021c00
 8004778:	40021400 	.word	0x40021400
 800477c:	40021800 	.word	0x40021800

08004780 <bsp_InitKeyVar>:
*********************************************************************************************************
*	함수 이름: bsp_InitKeyVar
*********************************************************************************************************
*/
static void bsp_InitKeyVar(void)
{
 8004780:	b480      	push	{r7}
 8004782:	b083      	sub	sp, #12
 8004784:	af00      	add	r7, sp, #0
	uint8_t i;

	/* 키 FIFO 읽기/쓰기 포인터 초기화 */
	s_tKey.Read = 0;
 8004786:	4b3d      	ldr	r3, [pc, #244]	; (800487c <bsp_InitKeyVar+0xfc>)
 8004788:	2200      	movs	r2, #0
 800478a:	729a      	strb	r2, [r3, #10]
	s_tKey.Write = 0;
 800478c:	4b3b      	ldr	r3, [pc, #236]	; (800487c <bsp_InitKeyVar+0xfc>)
 800478e:	2200      	movs	r2, #0
 8004790:	72da      	strb	r2, [r3, #11]
	s_tKey.Read2 = 0;
 8004792:	4b3a      	ldr	r3, [pc, #232]	; (800487c <bsp_InitKeyVar+0xfc>)
 8004794:	2200      	movs	r2, #0
 8004796:	731a      	strb	r2, [r3, #12]

	/* 각 버튼 구조체 멤버 변수 초기화 */
	for (i = 0; i < KEY_COUNT; i++)
 8004798:	2300      	movs	r3, #0
 800479a:	71fb      	strb	r3, [r7, #7]
 800479c:	e025      	b.n	80047ea <bsp_InitKeyVar+0x6a>
	{
		s_tBtn[i].LongTime = KEY_LONG_TIME;			/* 장시간 누름 시간. 0이면 장시간 누름 이벤트 없음 */
 800479e:	79fb      	ldrb	r3, [r7, #7]
 80047a0:	4a37      	ldr	r2, [pc, #220]	; (8004880 <bsp_InitKeyVar+0x100>)
 80047a2:	011b      	lsls	r3, r3, #4
 80047a4:	4413      	add	r3, r2
 80047a6:	3308      	adds	r3, #8
 80047a8:	2264      	movs	r2, #100	; 0x64
 80047aa:	801a      	strh	r2, [r3, #0]
		s_tBtn[i].Count = KEY_FILTER_TIME / 2;		/* 카운터를 필터링 시간의 절반으로 설정 */
 80047ac:	79fb      	ldrb	r3, [r7, #7]
 80047ae:	4a34      	ldr	r2, [pc, #208]	; (8004880 <bsp_InitKeyVar+0x100>)
 80047b0:	011b      	lsls	r3, r3, #4
 80047b2:	4413      	add	r3, r2
 80047b4:	3304      	adds	r3, #4
 80047b6:	2202      	movs	r2, #2
 80047b8:	701a      	strb	r2, [r3, #0]
		s_tBtn[i].State = 0;							/* 버튼 상태, 0은 누르지 않음 */
 80047ba:	79fb      	ldrb	r3, [r7, #7]
 80047bc:	4a30      	ldr	r2, [pc, #192]	; (8004880 <bsp_InitKeyVar+0x100>)
 80047be:	011b      	lsls	r3, r3, #4
 80047c0:	4413      	add	r3, r2
 80047c2:	330a      	adds	r3, #10
 80047c4:	2200      	movs	r2, #0
 80047c6:	701a      	strb	r2, [r3, #0]
		//s_tBtn[i].KeyCodeDown = 3 * i + 1;				/* 버튼 눌림 키코드 */
		//s_tBtn[i].KeyCodeUp = 3 * i + 2;				/* 버튼 뗌 키코드 */
		//s_tBtn[i].KeyCodeLong = 3 * i + 3;				/* 버튼 장시간 누름 키코드 */
		s_tBtn[i].RepeatSpeed = 0;						/* 연속 입력 속도, 0은 연속 입력 없음 */
 80047c8:	79fb      	ldrb	r3, [r7, #7]
 80047ca:	4a2d      	ldr	r2, [pc, #180]	; (8004880 <bsp_InitKeyVar+0x100>)
 80047cc:	011b      	lsls	r3, r3, #4
 80047ce:	4413      	add	r3, r2
 80047d0:	330b      	adds	r3, #11
 80047d2:	2200      	movs	r2, #0
 80047d4:	701a      	strb	r2, [r3, #0]
		s_tBtn[i].RepeatCount = 0;						/* 연속 입력 카운터 */
 80047d6:	79fb      	ldrb	r3, [r7, #7]
 80047d8:	4a29      	ldr	r2, [pc, #164]	; (8004880 <bsp_InitKeyVar+0x100>)
 80047da:	011b      	lsls	r3, r3, #4
 80047dc:	4413      	add	r3, r2
 80047de:	330c      	adds	r3, #12
 80047e0:	2200      	movs	r2, #0
 80047e2:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < KEY_COUNT; i++)
 80047e4:	79fb      	ldrb	r3, [r7, #7]
 80047e6:	3301      	adds	r3, #1
 80047e8:	71fb      	strb	r3, [r7, #7]
 80047ea:	79fb      	ldrb	r3, [r7, #7]
 80047ec:	2b09      	cmp	r3, #9
 80047ee:	d9d6      	bls.n	800479e <bsp_InitKeyVar+0x1e>
	}

	/* 특정 버튼의 파라미터를 개별적으로 변경할 경우 */
	/* 예를 들어, 버튼 1을 1초 이상 누르면 자동으로 동일한 키코드 발송 */
	s_tBtn[KID_JOY_U].LongTime = 100;
 80047f0:	4b23      	ldr	r3, [pc, #140]	; (8004880 <bsp_InitKeyVar+0x100>)
 80047f2:	2264      	movs	r2, #100	; 0x64
 80047f4:	871a      	strh	r2, [r3, #56]	; 0x38
	s_tBtn[KID_JOY_U].RepeatSpeed = 5;	/* 50ms마다 자동으로 키코드 발송 */
 80047f6:	4b22      	ldr	r3, [pc, #136]	; (8004880 <bsp_InitKeyVar+0x100>)
 80047f8:	2205      	movs	r2, #5
 80047fa:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b

	s_tBtn[KID_JOY_D].LongTime = 100;
 80047fe:	4b20      	ldr	r3, [pc, #128]	; (8004880 <bsp_InitKeyVar+0x100>)
 8004800:	2264      	movs	r2, #100	; 0x64
 8004802:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
	s_tBtn[KID_JOY_D].RepeatSpeed = 5;
 8004806:	4b1e      	ldr	r3, [pc, #120]	; (8004880 <bsp_InitKeyVar+0x100>)
 8004808:	2205      	movs	r2, #5
 800480a:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b

	s_tBtn[KID_JOY_L].LongTime = 100;
 800480e:	4b1c      	ldr	r3, [pc, #112]	; (8004880 <bsp_InitKeyVar+0x100>)
 8004810:	2264      	movs	r2, #100	; 0x64
 8004812:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
	s_tBtn[KID_JOY_L].RepeatSpeed = 5;
 8004816:	4b1a      	ldr	r3, [pc, #104]	; (8004880 <bsp_InitKeyVar+0x100>)
 8004818:	2205      	movs	r2, #5
 800481a:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b

	s_tBtn[KID_JOY_R].LongTime = 100;
 800481e:	4b18      	ldr	r3, [pc, #96]	; (8004880 <bsp_InitKeyVar+0x100>)
 8004820:	2264      	movs	r2, #100	; 0x64
 8004822:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
	s_tBtn[KID_JOY_R].RepeatSpeed = 5;
 8004826:	4b16      	ldr	r3, [pc, #88]	; (8004880 <bsp_InitKeyVar+0x100>)
 8004828:	2205      	movs	r2, #5
 800482a:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b

	/* 버튼 눌림 감지 함수 설정 */
	s_tBtn[0].IsKeyDownFunc = IsKeyDown1;
 800482e:	4b14      	ldr	r3, [pc, #80]	; (8004880 <bsp_InitKeyVar+0x100>)
 8004830:	4a14      	ldr	r2, [pc, #80]	; (8004884 <bsp_InitKeyVar+0x104>)
 8004832:	601a      	str	r2, [r3, #0]
	s_tBtn[1].IsKeyDownFunc = IsKeyDown2;
 8004834:	4b12      	ldr	r3, [pc, #72]	; (8004880 <bsp_InitKeyVar+0x100>)
 8004836:	4a14      	ldr	r2, [pc, #80]	; (8004888 <bsp_InitKeyVar+0x108>)
 8004838:	611a      	str	r2, [r3, #16]
	s_tBtn[2].IsKeyDownFunc = IsKeyDown3;
 800483a:	4b11      	ldr	r3, [pc, #68]	; (8004880 <bsp_InitKeyVar+0x100>)
 800483c:	4a13      	ldr	r2, [pc, #76]	; (800488c <bsp_InitKeyVar+0x10c>)
 800483e:	621a      	str	r2, [r3, #32]
	s_tBtn[3].IsKeyDownFunc = IsKeyDown4;
 8004840:	4b0f      	ldr	r3, [pc, #60]	; (8004880 <bsp_InitKeyVar+0x100>)
 8004842:	4a13      	ldr	r2, [pc, #76]	; (8004890 <bsp_InitKeyVar+0x110>)
 8004844:	631a      	str	r2, [r3, #48]	; 0x30
	s_tBtn[4].IsKeyDownFunc = IsKeyDown5;
 8004846:	4b0e      	ldr	r3, [pc, #56]	; (8004880 <bsp_InitKeyVar+0x100>)
 8004848:	4a12      	ldr	r2, [pc, #72]	; (8004894 <bsp_InitKeyVar+0x114>)
 800484a:	641a      	str	r2, [r3, #64]	; 0x40
	s_tBtn[5].IsKeyDownFunc = IsKeyDown6;
 800484c:	4b0c      	ldr	r3, [pc, #48]	; (8004880 <bsp_InitKeyVar+0x100>)
 800484e:	4a12      	ldr	r2, [pc, #72]	; (8004898 <bsp_InitKeyVar+0x118>)
 8004850:	651a      	str	r2, [r3, #80]	; 0x50
	s_tBtn[6].IsKeyDownFunc = IsKeyDown7;
 8004852:	4b0b      	ldr	r3, [pc, #44]	; (8004880 <bsp_InitKeyVar+0x100>)
 8004854:	4a11      	ldr	r2, [pc, #68]	; (800489c <bsp_InitKeyVar+0x11c>)
 8004856:	661a      	str	r2, [r3, #96]	; 0x60
	s_tBtn[7].IsKeyDownFunc = IsKeyDown8;
 8004858:	4b09      	ldr	r3, [pc, #36]	; (8004880 <bsp_InitKeyVar+0x100>)
 800485a:	4a11      	ldr	r2, [pc, #68]	; (80048a0 <bsp_InitKeyVar+0x120>)
 800485c:	671a      	str	r2, [r3, #112]	; 0x70

	/* 조합 키 */
	s_tBtn[8].IsKeyDownFunc = IsKeyDown9;
 800485e:	4b08      	ldr	r3, [pc, #32]	; (8004880 <bsp_InitKeyVar+0x100>)
 8004860:	4a10      	ldr	r2, [pc, #64]	; (80048a4 <bsp_InitKeyVar+0x124>)
 8004862:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	s_tBtn[9].IsKeyDownFunc = IsKeyDown10;
 8004866:	4b06      	ldr	r3, [pc, #24]	; (8004880 <bsp_InitKeyVar+0x100>)
 8004868:	4a0f      	ldr	r2, [pc, #60]	; (80048a8 <bsp_InitKeyVar+0x128>)
 800486a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
}
 800486e:	bf00      	nop
 8004870:	370c      	adds	r7, #12
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr
 800487a:	bf00      	nop
 800487c:	200002e8 	.word	0x200002e8
 8004880:	20000248 	.word	0x20000248
 8004884:	080044d1 	.word	0x080044d1
 8004888:	080044f5 	.word	0x080044f5
 800488c:	08004519 	.word	0x08004519
 8004890:	0800453d 	.word	0x0800453d
 8004894:	0800455d 	.word	0x0800455d
 8004898:	0800457d 	.word	0x0800457d
 800489c:	080045a1 	.word	0x080045a1
 80048a0:	080045c1 	.word	0x080045c1
 80048a4:	080045e5 	.word	0x080045e5
 80048a8:	08004607 	.word	0x08004607

080048ac <bsp_PutKey>:
*	매개 변수: _KeyCode - 키 코드
*	반환 값: 없음
*********************************************************************************************************
*/
void bsp_PutKey(uint8_t _KeyCode)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b083      	sub	sp, #12
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	4603      	mov	r3, r0
 80048b4:	71fb      	strb	r3, [r7, #7]
	s_tKey.Buf[s_tKey.Write] = _KeyCode;
 80048b6:	4b0c      	ldr	r3, [pc, #48]	; (80048e8 <bsp_PutKey+0x3c>)
 80048b8:	7adb      	ldrb	r3, [r3, #11]
 80048ba:	4619      	mov	r1, r3
 80048bc:	4a0a      	ldr	r2, [pc, #40]	; (80048e8 <bsp_PutKey+0x3c>)
 80048be:	79fb      	ldrb	r3, [r7, #7]
 80048c0:	5453      	strb	r3, [r2, r1]

	if (++s_tKey.Write >= KEY_FIFO_SIZE)
 80048c2:	4b09      	ldr	r3, [pc, #36]	; (80048e8 <bsp_PutKey+0x3c>)
 80048c4:	7adb      	ldrb	r3, [r3, #11]
 80048c6:	3301      	adds	r3, #1
 80048c8:	b2da      	uxtb	r2, r3
 80048ca:	4b07      	ldr	r3, [pc, #28]	; (80048e8 <bsp_PutKey+0x3c>)
 80048cc:	72da      	strb	r2, [r3, #11]
 80048ce:	4b06      	ldr	r3, [pc, #24]	; (80048e8 <bsp_PutKey+0x3c>)
 80048d0:	7adb      	ldrb	r3, [r3, #11]
 80048d2:	2b09      	cmp	r3, #9
 80048d4:	d902      	bls.n	80048dc <bsp_PutKey+0x30>
	{
		s_tKey.Write = 0;
 80048d6:	4b04      	ldr	r3, [pc, #16]	; (80048e8 <bsp_PutKey+0x3c>)
 80048d8:	2200      	movs	r2, #0
 80048da:	72da      	strb	r2, [r3, #11]
	}
}
 80048dc:	bf00      	nop
 80048de:	370c      	adds	r7, #12
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr
 80048e8:	200002e8 	.word	0x200002e8

080048ec <bsp_DetectKey>:
*	매개 변수: i - 키 인덱스
*	반환 값: 없음
*********************************************************************************************************
*/
static void bsp_DetectKey(uint8_t i)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b084      	sub	sp, #16
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	4603      	mov	r3, r0
 80048f4:	71fb      	strb	r3, [r7, #7]
	KEY_T *pBtn;

	pBtn = &s_tBtn[i];
 80048f6:	79fb      	ldrb	r3, [r7, #7]
 80048f8:	011b      	lsls	r3, r3, #4
 80048fa:	4a4d      	ldr	r2, [pc, #308]	; (8004a30 <bsp_DetectKey+0x144>)
 80048fc:	4413      	add	r3, r2
 80048fe:	60fb      	str	r3, [r7, #12]

	if (pBtn->IsKeyDownFunc())
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4798      	blx	r3
 8004906:	4603      	mov	r3, r0
 8004908:	2b00      	cmp	r3, #0
 800490a:	d062      	beq.n	80049d2 <bsp_DetectKey+0xe6>
	{
		if (pBtn->Count < KEY_FILTER_TIME)
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	791b      	ldrb	r3, [r3, #4]
 8004910:	2b04      	cmp	r3, #4
 8004912:	d803      	bhi.n	800491c <bsp_DetectKey+0x30>
		{
			pBtn->Count = KEY_FILTER_TIME;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	2205      	movs	r2, #5
 8004918:	711a      	strb	r2, [r3, #4]
		}

		pBtn->LongCount = 0;
		pBtn->RepeatCount = 0;
	}
}
 800491a:	e084      	b.n	8004a26 <bsp_DetectKey+0x13a>
		else if (pBtn->Count < 2 * KEY_FILTER_TIME)
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	791b      	ldrb	r3, [r3, #4]
 8004920:	2b09      	cmp	r3, #9
 8004922:	d806      	bhi.n	8004932 <bsp_DetectKey+0x46>
			pBtn->Count++;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	791b      	ldrb	r3, [r3, #4]
 8004928:	3301      	adds	r3, #1
 800492a:	b2da      	uxtb	r2, r3
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	711a      	strb	r2, [r3, #4]
}
 8004930:	e079      	b.n	8004a26 <bsp_DetectKey+0x13a>
			if (pBtn->State == 0)
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	7a9b      	ldrb	r3, [r3, #10]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d10c      	bne.n	8004954 <bsp_DetectKey+0x68>
				pBtn->State = 1;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2201      	movs	r2, #1
 800493e:	729a      	strb	r2, [r3, #10]
				bsp_PutKey((uint8_t)(3 * i + 1));
 8004940:	79fb      	ldrb	r3, [r7, #7]
 8004942:	461a      	mov	r2, r3
 8004944:	0052      	lsls	r2, r2, #1
 8004946:	4413      	add	r3, r2
 8004948:	b2db      	uxtb	r3, r3
 800494a:	3301      	adds	r3, #1
 800494c:	b2db      	uxtb	r3, r3
 800494e:	4618      	mov	r0, r3
 8004950:	f7ff ffac 	bl	80048ac <bsp_PutKey>
			if (pBtn->LongTime > 0)
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	891b      	ldrh	r3, [r3, #8]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d064      	beq.n	8004a26 <bsp_DetectKey+0x13a>
				if (pBtn->LongCount < pBtn->LongTime)
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	88da      	ldrh	r2, [r3, #6]
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	891b      	ldrh	r3, [r3, #8]
 8004964:	429a      	cmp	r2, r3
 8004966:	d216      	bcs.n	8004996 <bsp_DetectKey+0xaa>
					if (++pBtn->LongCount == pBtn->LongTime)
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	88db      	ldrh	r3, [r3, #6]
 800496c:	3301      	adds	r3, #1
 800496e:	b29a      	uxth	r2, r3
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	80da      	strh	r2, [r3, #6]
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	88da      	ldrh	r2, [r3, #6]
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	891b      	ldrh	r3, [r3, #8]
 800497c:	429a      	cmp	r2, r3
 800497e:	d152      	bne.n	8004a26 <bsp_DetectKey+0x13a>
						bsp_PutKey((uint8_t)(3 * i + 3));
 8004980:	79fb      	ldrb	r3, [r7, #7]
 8004982:	3301      	adds	r3, #1
 8004984:	b2db      	uxtb	r3, r3
 8004986:	461a      	mov	r2, r3
 8004988:	0052      	lsls	r2, r2, #1
 800498a:	4413      	add	r3, r2
 800498c:	b2db      	uxtb	r3, r3
 800498e:	4618      	mov	r0, r3
 8004990:	f7ff ff8c 	bl	80048ac <bsp_PutKey>
}
 8004994:	e047      	b.n	8004a26 <bsp_DetectKey+0x13a>
					if (pBtn->RepeatSpeed > 0)
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	7adb      	ldrb	r3, [r3, #11]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d043      	beq.n	8004a26 <bsp_DetectKey+0x13a>
						if (++pBtn->RepeatCount >= pBtn->RepeatSpeed)
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	7b1b      	ldrb	r3, [r3, #12]
 80049a2:	3301      	adds	r3, #1
 80049a4:	b2da      	uxtb	r2, r3
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	731a      	strb	r2, [r3, #12]
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	7b1a      	ldrb	r2, [r3, #12]
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	7adb      	ldrb	r3, [r3, #11]
 80049b2:	429a      	cmp	r2, r3
 80049b4:	d337      	bcc.n	8004a26 <bsp_DetectKey+0x13a>
							pBtn->RepeatCount = 0;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	2200      	movs	r2, #0
 80049ba:	731a      	strb	r2, [r3, #12]
							bsp_PutKey((uint8_t)(3 * i + 1));
 80049bc:	79fb      	ldrb	r3, [r7, #7]
 80049be:	461a      	mov	r2, r3
 80049c0:	0052      	lsls	r2, r2, #1
 80049c2:	4413      	add	r3, r2
 80049c4:	b2db      	uxtb	r3, r3
 80049c6:	3301      	adds	r3, #1
 80049c8:	b2db      	uxtb	r3, r3
 80049ca:	4618      	mov	r0, r3
 80049cc:	f7ff ff6e 	bl	80048ac <bsp_PutKey>
}
 80049d0:	e029      	b.n	8004a26 <bsp_DetectKey+0x13a>
		if (pBtn->Count > KEY_FILTER_TIME)
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	791b      	ldrb	r3, [r3, #4]
 80049d6:	2b05      	cmp	r3, #5
 80049d8:	d903      	bls.n	80049e2 <bsp_DetectKey+0xf6>
			pBtn->Count = KEY_FILTER_TIME;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2205      	movs	r2, #5
 80049de:	711a      	strb	r2, [r3, #4]
 80049e0:	e01b      	b.n	8004a1a <bsp_DetectKey+0x12e>
		else if (pBtn->Count > 0)
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	791b      	ldrb	r3, [r3, #4]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d006      	beq.n	80049f8 <bsp_DetectKey+0x10c>
			pBtn->Count--;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	791b      	ldrb	r3, [r3, #4]
 80049ee:	3b01      	subs	r3, #1
 80049f0:	b2da      	uxtb	r2, r3
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	711a      	strb	r2, [r3, #4]
 80049f6:	e010      	b.n	8004a1a <bsp_DetectKey+0x12e>
			if (pBtn->State == 1)
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	7a9b      	ldrb	r3, [r3, #10]
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	d10c      	bne.n	8004a1a <bsp_DetectKey+0x12e>
				pBtn->State = 0;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2200      	movs	r2, #0
 8004a04:	729a      	strb	r2, [r3, #10]
				bsp_PutKey((uint8_t)(3 * i + 2));
 8004a06:	79fb      	ldrb	r3, [r7, #7]
 8004a08:	461a      	mov	r2, r3
 8004a0a:	0052      	lsls	r2, r2, #1
 8004a0c:	4413      	add	r3, r2
 8004a0e:	b2db      	uxtb	r3, r3
 8004a10:	3302      	adds	r3, #2
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	4618      	mov	r0, r3
 8004a16:	f7ff ff49 	bl	80048ac <bsp_PutKey>
		pBtn->LongCount = 0;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	80da      	strh	r2, [r3, #6]
		pBtn->RepeatCount = 0;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2200      	movs	r2, #0
 8004a24:	731a      	strb	r2, [r3, #12]
}
 8004a26:	bf00      	nop
 8004a28:	3710      	adds	r7, #16
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}
 8004a2e:	bf00      	nop
 8004a30:	20000248 	.word	0x20000248

08004a34 <bsp_KeyScan>:
*	매개 변수: 없음
*	반환 값: 없음
*********************************************************************************************************
*/
void bsp_KeyScan(void)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b082      	sub	sp, #8
 8004a38:	af00      	add	r7, sp, #0
	uint8_t i;

	for (i = 0; i < KEY_COUNT; i++)
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	71fb      	strb	r3, [r7, #7]
 8004a3e:	e006      	b.n	8004a4e <bsp_KeyScan+0x1a>
	{
		bsp_DetectKey(i);
 8004a40:	79fb      	ldrb	r3, [r7, #7]
 8004a42:	4618      	mov	r0, r3
 8004a44:	f7ff ff52 	bl	80048ec <bsp_DetectKey>
	for (i = 0; i < KEY_COUNT; i++)
 8004a48:	79fb      	ldrb	r3, [r7, #7]
 8004a4a:	3301      	adds	r3, #1
 8004a4c:	71fb      	strb	r3, [r7, #7]
 8004a4e:	79fb      	ldrb	r3, [r7, #7]
 8004a50:	2b09      	cmp	r3, #9
 8004a52:	d9f5      	bls.n	8004a40 <bsp_KeyScan+0xc>
	}
}
 8004a54:	bf00      	nop
 8004a56:	bf00      	nop
 8004a58:	3708      	adds	r7, #8
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}
	...

08004a60 <bsp_GetKey2>:
*********************************************************************************************************
*	함수 이름: bsp_GetKey2
*********************************************************************************************************
*/
uint8_t bsp_GetKey2(void)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b083      	sub	sp, #12
 8004a64:	af00      	add	r7, sp, #0
	uint8_t ret;

	if (s_tKey.Read2 == s_tKey.Write)
 8004a66:	4b11      	ldr	r3, [pc, #68]	; (8004aac <bsp_GetKey2+0x4c>)
 8004a68:	7b1a      	ldrb	r2, [r3, #12]
 8004a6a:	4b10      	ldr	r3, [pc, #64]	; (8004aac <bsp_GetKey2+0x4c>)
 8004a6c:	7adb      	ldrb	r3, [r3, #11]
 8004a6e:	429a      	cmp	r2, r3
 8004a70:	d101      	bne.n	8004a76 <bsp_GetKey2+0x16>
	{
		return KEY_NONE;
 8004a72:	2300      	movs	r3, #0
 8004a74:	e013      	b.n	8004a9e <bsp_GetKey2+0x3e>
	}
	else
	{
		ret = s_tKey.Buf[s_tKey.Read2];
 8004a76:	4b0d      	ldr	r3, [pc, #52]	; (8004aac <bsp_GetKey2+0x4c>)
 8004a78:	7b1b      	ldrb	r3, [r3, #12]
 8004a7a:	461a      	mov	r2, r3
 8004a7c:	4b0b      	ldr	r3, [pc, #44]	; (8004aac <bsp_GetKey2+0x4c>)
 8004a7e:	5c9b      	ldrb	r3, [r3, r2]
 8004a80:	71fb      	strb	r3, [r7, #7]

		if (++s_tKey.Read2 >= KEY_FIFO_SIZE)
 8004a82:	4b0a      	ldr	r3, [pc, #40]	; (8004aac <bsp_GetKey2+0x4c>)
 8004a84:	7b1b      	ldrb	r3, [r3, #12]
 8004a86:	3301      	adds	r3, #1
 8004a88:	b2da      	uxtb	r2, r3
 8004a8a:	4b08      	ldr	r3, [pc, #32]	; (8004aac <bsp_GetKey2+0x4c>)
 8004a8c:	731a      	strb	r2, [r3, #12]
 8004a8e:	4b07      	ldr	r3, [pc, #28]	; (8004aac <bsp_GetKey2+0x4c>)
 8004a90:	7b1b      	ldrb	r3, [r3, #12]
 8004a92:	2b09      	cmp	r3, #9
 8004a94:	d902      	bls.n	8004a9c <bsp_GetKey2+0x3c>
		{
			s_tKey.Read2 = 0;
 8004a96:	4b05      	ldr	r3, [pc, #20]	; (8004aac <bsp_GetKey2+0x4c>)
 8004a98:	2200      	movs	r2, #0
 8004a9a:	731a      	strb	r2, [r3, #12]
		}
		return ret;
 8004a9c:	79fb      	ldrb	r3, [r7, #7]
	}
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	370c      	adds	r7, #12
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa8:	4770      	bx	lr
 8004aaa:	bf00      	nop
 8004aac:	200002e8 	.word	0x200002e8

08004ab0 <bsp_GetKey>:
*********************************************************************************************************
*	함수 이름: bsp_GetKey
*********************************************************************************************************
*/
uint8_t bsp_GetKey(void)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b083      	sub	sp, #12
 8004ab4:	af00      	add	r7, sp, #0
	uint8_t ret;

	if (s_tKey.Read == s_tKey.Write)
 8004ab6:	4b11      	ldr	r3, [pc, #68]	; (8004afc <bsp_GetKey+0x4c>)
 8004ab8:	7a9a      	ldrb	r2, [r3, #10]
 8004aba:	4b10      	ldr	r3, [pc, #64]	; (8004afc <bsp_GetKey+0x4c>)
 8004abc:	7adb      	ldrb	r3, [r3, #11]
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	d101      	bne.n	8004ac6 <bsp_GetKey+0x16>
	{
		return KEY_NONE;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	e013      	b.n	8004aee <bsp_GetKey+0x3e>
	}
	else
	{
		ret = s_tKey.Buf[s_tKey.Read];
 8004ac6:	4b0d      	ldr	r3, [pc, #52]	; (8004afc <bsp_GetKey+0x4c>)
 8004ac8:	7a9b      	ldrb	r3, [r3, #10]
 8004aca:	461a      	mov	r2, r3
 8004acc:	4b0b      	ldr	r3, [pc, #44]	; (8004afc <bsp_GetKey+0x4c>)
 8004ace:	5c9b      	ldrb	r3, [r3, r2]
 8004ad0:	71fb      	strb	r3, [r7, #7]

		if (++s_tKey.Read >= KEY_FIFO_SIZE)
 8004ad2:	4b0a      	ldr	r3, [pc, #40]	; (8004afc <bsp_GetKey+0x4c>)
 8004ad4:	7a9b      	ldrb	r3, [r3, #10]
 8004ad6:	3301      	adds	r3, #1
 8004ad8:	b2da      	uxtb	r2, r3
 8004ada:	4b08      	ldr	r3, [pc, #32]	; (8004afc <bsp_GetKey+0x4c>)
 8004adc:	729a      	strb	r2, [r3, #10]
 8004ade:	4b07      	ldr	r3, [pc, #28]	; (8004afc <bsp_GetKey+0x4c>)
 8004ae0:	7a9b      	ldrb	r3, [r3, #10]
 8004ae2:	2b09      	cmp	r3, #9
 8004ae4:	d902      	bls.n	8004aec <bsp_GetKey+0x3c>
		{
			s_tKey.Read = 0;
 8004ae6:	4b05      	ldr	r3, [pc, #20]	; (8004afc <bsp_GetKey+0x4c>)
 8004ae8:	2200      	movs	r2, #0
 8004aea:	729a      	strb	r2, [r3, #10]
		}
		return ret;
 8004aec:	79fb      	ldrb	r3, [r7, #7]
	}
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	370c      	adds	r7, #12
 8004af2:	46bd      	mov	sp, r7
 8004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af8:	4770      	bx	lr
 8004afa:	bf00      	nop
 8004afc:	200002e8 	.word	0x200002e8

08004b00 <bsp_InitLed>:
*********************************************************************************************************
*	Func name: bsp_InitLed
*********************************************************************************************************
*/
void bsp_InitLed(void)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b08a      	sub	sp, #40	; 0x28
 8004b04:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;
	// #define RCC_ALL_LED 	(RCC_AHB1Periph_GPIOC | RCC_AHB1Periph_GPIOF | RCC_AHB1Periph_GPIOI)
	__HAL_RCC_GPIOI_CLK_ENABLE();
 8004b06:	2300      	movs	r3, #0
 8004b08:	613b      	str	r3, [r7, #16]
 8004b0a:	4b40      	ldr	r3, [pc, #256]	; (8004c0c <bsp_InitLed+0x10c>)
 8004b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b0e:	4a3f      	ldr	r2, [pc, #252]	; (8004c0c <bsp_InitLed+0x10c>)
 8004b10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b14:	6313      	str	r3, [r2, #48]	; 0x30
 8004b16:	4b3d      	ldr	r3, [pc, #244]	; (8004c0c <bsp_InitLed+0x10c>)
 8004b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b1e:	613b      	str	r3, [r7, #16]
 8004b20:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8004b22:	2300      	movs	r3, #0
 8004b24:	60fb      	str	r3, [r7, #12]
 8004b26:	4b39      	ldr	r3, [pc, #228]	; (8004c0c <bsp_InitLed+0x10c>)
 8004b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b2a:	4a38      	ldr	r2, [pc, #224]	; (8004c0c <bsp_InitLed+0x10c>)
 8004b2c:	f043 0304 	orr.w	r3, r3, #4
 8004b30:	6313      	str	r3, [r2, #48]	; 0x30
 8004b32:	4b36      	ldr	r3, [pc, #216]	; (8004c0c <bsp_InitLed+0x10c>)
 8004b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b36:	f003 0304 	and.w	r3, r3, #4
 8004b3a:	60fb      	str	r3, [r7, #12]
 8004b3c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8004b3e:	2300      	movs	r3, #0
 8004b40:	60bb      	str	r3, [r7, #8]
 8004b42:	4b32      	ldr	r3, [pc, #200]	; (8004c0c <bsp_InitLed+0x10c>)
 8004b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b46:	4a31      	ldr	r2, [pc, #196]	; (8004c0c <bsp_InitLed+0x10c>)
 8004b48:	f043 0320 	orr.w	r3, r3, #32
 8004b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8004b4e:	4b2f      	ldr	r3, [pc, #188]	; (8004c0c <bsp_InitLed+0x10c>)
 8004b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b52:	f003 0320 	and.w	r3, r3, #32
 8004b56:	60bb      	str	r3, [r7, #8]
 8004b58:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	607b      	str	r3, [r7, #4]
 8004b5e:	4b2b      	ldr	r3, [pc, #172]	; (8004c0c <bsp_InitLed+0x10c>)
 8004b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b62:	4a2a      	ldr	r2, [pc, #168]	; (8004c0c <bsp_InitLed+0x10c>)
 8004b64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b68:	6313      	str	r3, [r2, #48]	; 0x30
 8004b6a:	4b28      	ldr	r3, [pc, #160]	; (8004c0c <bsp_InitLed+0x10c>)
 8004b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b72:	607b      	str	r3, [r7, #4]
 8004b74:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8004b76:	2300      	movs	r3, #0
 8004b78:	603b      	str	r3, [r7, #0]
 8004b7a:	4b24      	ldr	r3, [pc, #144]	; (8004c0c <bsp_InitLed+0x10c>)
 8004b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b7e:	4a23      	ldr	r2, [pc, #140]	; (8004c0c <bsp_InitLed+0x10c>)
 8004b80:	f043 0301 	orr.w	r3, r3, #1
 8004b84:	6313      	str	r3, [r2, #48]	; 0x30
 8004b86:	4b21      	ldr	r3, [pc, #132]	; (8004c0c <bsp_InitLed+0x10c>)
 8004b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b8a:	f003 0301 	and.w	r3, r3, #1
 8004b8e:	603b      	str	r3, [r7, #0]
 8004b90:	683b      	ldr	r3, [r7, #0]

	bsp_LedOff(1);
 8004b92:	2001      	movs	r0, #1
 8004b94:	f000 f87a 	bl	8004c8c <bsp_LedOff>
	bsp_LedOff(2);
 8004b98:	2002      	movs	r0, #2
 8004b9a:	f000 f877 	bl	8004c8c <bsp_LedOff>
	bsp_LedOff(3);
 8004b9e:	2003      	movs	r0, #3
 8004ba0:	f000 f874 	bl	8004c8c <bsp_LedOff>
	bsp_LedOff(4);
 8004ba4:	2004      	movs	r0, #4
 8004ba6:	f000 f871 	bl	8004c8c <bsp_LedOff>

	GPIO_InitStructure.Pin = GPIO_PIN_LED1;
 8004baa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004bae:	617b      	str	r3, [r7, #20]
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStructure.Pull = GPIO_NOPULL;
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8004bb8:	2302      	movs	r3, #2
 8004bba:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOI, &GPIO_InitStructure);
 8004bbc:	f107 0314 	add.w	r3, r7, #20
 8004bc0:	4619      	mov	r1, r3
 8004bc2:	4813      	ldr	r0, [pc, #76]	; (8004c10 <bsp_InitLed+0x110>)
 8004bc4:	f002 feda 	bl	800797c <HAL_GPIO_Init>

	GPIO_InitStructure.Pin = GPIO_PIN_LED2|GPIO_PIN_LED3;
 8004bc8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8004bcc:	617b      	str	r3, [r7, #20]
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStructure.Pull = GPIO_NOPULL;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8004bd6:	2302      	movs	r3, #2
 8004bd8:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8004bda:	f107 0314 	add.w	r3, r7, #20
 8004bde:	4619      	mov	r1, r3
 8004be0:	480c      	ldr	r0, [pc, #48]	; (8004c14 <bsp_InitLed+0x114>)
 8004be2:	f002 fecb 	bl	800797c <HAL_GPIO_Init>

	GPIO_InitStructure.Pin = GPIO_PIN_LED4;
 8004be6:	2304      	movs	r3, #4
 8004be8:	617b      	str	r3, [r7, #20]
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8004bea:	2301      	movs	r3, #1
 8004bec:	61bb      	str	r3, [r7, #24]
	GPIO_InitStructure.Pull = GPIO_NOPULL;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8004bf2:	2302      	movs	r3, #2
 8004bf4:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8004bf6:	f107 0314 	add.w	r3, r7, #20
 8004bfa:	4619      	mov	r1, r3
 8004bfc:	4806      	ldr	r0, [pc, #24]	; (8004c18 <bsp_InitLed+0x118>)
 8004bfe:	f002 febd 	bl	800797c <HAL_GPIO_Init>
}
 8004c02:	bf00      	nop
 8004c04:	3728      	adds	r7, #40	; 0x28
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}
 8004c0a:	bf00      	nop
 8004c0c:	40023800 	.word	0x40023800
 8004c10:	40022000 	.word	0x40022000
 8004c14:	40021400 	.word	0x40021400
 8004c18:	40020800 	.word	0x40020800

08004c1c <bsp_LedOn>:
*********************************************************************************************************
*	Func name: bsp_LedOn
*********************************************************************************************************
*/
void bsp_LedOn(uint8_t _no)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b082      	sub	sp, #8
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	4603      	mov	r3, r0
 8004c24:	71fb      	strb	r3, [r7, #7]
	_no--;
 8004c26:	79fb      	ldrb	r3, [r7, #7]
 8004c28:	3b01      	subs	r3, #1
 8004c2a:	71fb      	strb	r3, [r7, #7]

	if (_no == 0)
 8004c2c:	79fb      	ldrb	r3, [r7, #7]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d106      	bne.n	8004c40 <bsp_LedOn+0x24>
	{
		HAL_GPIO_WritePin(GPIOI, GPIO_PIN_LED1, GPIO_PIN_RESET);
 8004c32:	2200      	movs	r2, #0
 8004c34:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004c38:	4811      	ldr	r0, [pc, #68]	; (8004c80 <bsp_LedOn+0x64>)
 8004c3a:	f003 f853 	bl	8007ce4 <HAL_GPIO_WritePin>
	}
	else if (_no == 3)
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_LED4, GPIO_PIN_RESET);
	}
}
 8004c3e:	e01a      	b.n	8004c76 <bsp_LedOn+0x5a>
	else if (_no == 1)
 8004c40:	79fb      	ldrb	r3, [r7, #7]
 8004c42:	2b01      	cmp	r3, #1
 8004c44:	d105      	bne.n	8004c52 <bsp_LedOn+0x36>
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_LED2, GPIO_PIN_RESET);
 8004c46:	2200      	movs	r2, #0
 8004c48:	2180      	movs	r1, #128	; 0x80
 8004c4a:	480e      	ldr	r0, [pc, #56]	; (8004c84 <bsp_LedOn+0x68>)
 8004c4c:	f003 f84a 	bl	8007ce4 <HAL_GPIO_WritePin>
}
 8004c50:	e011      	b.n	8004c76 <bsp_LedOn+0x5a>
	else if (_no == 2)
 8004c52:	79fb      	ldrb	r3, [r7, #7]
 8004c54:	2b02      	cmp	r3, #2
 8004c56:	d106      	bne.n	8004c66 <bsp_LedOn+0x4a>
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_LED3, GPIO_PIN_RESET);
 8004c58:	2200      	movs	r2, #0
 8004c5a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004c5e:	4809      	ldr	r0, [pc, #36]	; (8004c84 <bsp_LedOn+0x68>)
 8004c60:	f003 f840 	bl	8007ce4 <HAL_GPIO_WritePin>
}
 8004c64:	e007      	b.n	8004c76 <bsp_LedOn+0x5a>
	else if (_no == 3)
 8004c66:	79fb      	ldrb	r3, [r7, #7]
 8004c68:	2b03      	cmp	r3, #3
 8004c6a:	d104      	bne.n	8004c76 <bsp_LedOn+0x5a>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_LED4, GPIO_PIN_RESET);
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	2104      	movs	r1, #4
 8004c70:	4805      	ldr	r0, [pc, #20]	; (8004c88 <bsp_LedOn+0x6c>)
 8004c72:	f003 f837 	bl	8007ce4 <HAL_GPIO_WritePin>
}
 8004c76:	bf00      	nop
 8004c78:	3708      	adds	r7, #8
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}
 8004c7e:	bf00      	nop
 8004c80:	40022000 	.word	0x40022000
 8004c84:	40021400 	.word	0x40021400
 8004c88:	40020800 	.word	0x40020800

08004c8c <bsp_LedOff>:
*********************************************************************************************************
*	Func name: bsp_LedOff
*********************************************************************************************************
*/
void bsp_LedOff(uint8_t _no)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b082      	sub	sp, #8
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	4603      	mov	r3, r0
 8004c94:	71fb      	strb	r3, [r7, #7]
	_no--;
 8004c96:	79fb      	ldrb	r3, [r7, #7]
 8004c98:	3b01      	subs	r3, #1
 8004c9a:	71fb      	strb	r3, [r7, #7]

	if (_no == 0)
 8004c9c:	79fb      	ldrb	r3, [r7, #7]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d106      	bne.n	8004cb0 <bsp_LedOff+0x24>
	{
		HAL_GPIO_WritePin(GPIOI, GPIO_PIN_LED1, GPIO_PIN_SET);
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004ca8:	4811      	ldr	r0, [pc, #68]	; (8004cf0 <bsp_LedOff+0x64>)
 8004caa:	f003 f81b 	bl	8007ce4 <HAL_GPIO_WritePin>
	}
	else if (_no == 3)
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_LED4, GPIO_PIN_SET);
	}
}
 8004cae:	e01a      	b.n	8004ce6 <bsp_LedOff+0x5a>
	else if (_no == 1)
 8004cb0:	79fb      	ldrb	r3, [r7, #7]
 8004cb2:	2b01      	cmp	r3, #1
 8004cb4:	d105      	bne.n	8004cc2 <bsp_LedOff+0x36>
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_LED2, GPIO_PIN_SET);
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	2180      	movs	r1, #128	; 0x80
 8004cba:	480e      	ldr	r0, [pc, #56]	; (8004cf4 <bsp_LedOff+0x68>)
 8004cbc:	f003 f812 	bl	8007ce4 <HAL_GPIO_WritePin>
}
 8004cc0:	e011      	b.n	8004ce6 <bsp_LedOff+0x5a>
	else if (_no == 2)
 8004cc2:	79fb      	ldrb	r3, [r7, #7]
 8004cc4:	2b02      	cmp	r3, #2
 8004cc6:	d106      	bne.n	8004cd6 <bsp_LedOff+0x4a>
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_LED3, GPIO_PIN_SET);
 8004cc8:	2201      	movs	r2, #1
 8004cca:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004cce:	4809      	ldr	r0, [pc, #36]	; (8004cf4 <bsp_LedOff+0x68>)
 8004cd0:	f003 f808 	bl	8007ce4 <HAL_GPIO_WritePin>
}
 8004cd4:	e007      	b.n	8004ce6 <bsp_LedOff+0x5a>
	else if (_no == 3)
 8004cd6:	79fb      	ldrb	r3, [r7, #7]
 8004cd8:	2b03      	cmp	r3, #3
 8004cda:	d104      	bne.n	8004ce6 <bsp_LedOff+0x5a>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_LED4, GPIO_PIN_SET);
 8004cdc:	2201      	movs	r2, #1
 8004cde:	2104      	movs	r1, #4
 8004ce0:	4805      	ldr	r0, [pc, #20]	; (8004cf8 <bsp_LedOff+0x6c>)
 8004ce2:	f002 ffff 	bl	8007ce4 <HAL_GPIO_WritePin>
}
 8004ce6:	bf00      	nop
 8004ce8:	3708      	adds	r7, #8
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}
 8004cee:	bf00      	nop
 8004cf0:	40022000 	.word	0x40022000
 8004cf4:	40021400 	.word	0x40021400
 8004cf8:	40020800 	.word	0x40020800

08004cfc <BSP_FSMC_NAND_Init>:
*********************************************************************************************************
*	Func name: FSMC_NAND_Init
*********************************************************************************************************
*/
static void BSP_FSMC_NAND_Init(void)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b0a2      	sub	sp, #136	; 0x88
 8004d00:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;
	NAND_HandleTypeDef hnand1;
	FSMC_NAND_PCC_TimingTypeDef ComSpaceTiming = {0};
 8004d02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d06:	2200      	movs	r2, #0
 8004d08:	601a      	str	r2, [r3, #0]
 8004d0a:	605a      	str	r2, [r3, #4]
 8004d0c:	609a      	str	r2, [r3, #8]
 8004d0e:	60da      	str	r2, [r3, #12]
	FSMC_NAND_PCC_TimingTypeDef AttSpaceTiming = {0};
 8004d10:	f107 0314 	add.w	r3, r7, #20
 8004d14:	2200      	movs	r2, #0
 8004d16:	601a      	str	r2, [r3, #0]
 8004d18:	605a      	str	r2, [r3, #4]
 8004d1a:	609a      	str	r2, [r3, #8]
 8004d1c:	60da      	str	r2, [r3, #12]
	 * PE10/FSMC_D7
	 *
	 * PG6/FSMC_INT2	(±¾Àý³ÌÓÃ²éÑ¯·½Ê½ÅÐÃ¦£¬´Ë¿ÚÏß×÷ÎªÆÕÍ¨GPIOÊäÈë¹¦ÄÜÊ¹ÓÃ)
	 */
	 //RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD | RCC_AHB1Periph_GPIOE | RCC_AHB1Periph_GPIOG, ENABLE);
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8004d1e:	2300      	movs	r3, #0
 8004d20:	613b      	str	r3, [r7, #16]
 8004d22:	4b4c      	ldr	r3, [pc, #304]	; (8004e54 <BSP_FSMC_NAND_Init+0x158>)
 8004d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d26:	4a4b      	ldr	r2, [pc, #300]	; (8004e54 <BSP_FSMC_NAND_Init+0x158>)
 8004d28:	f043 0308 	orr.w	r3, r3, #8
 8004d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8004d2e:	4b49      	ldr	r3, [pc, #292]	; (8004e54 <BSP_FSMC_NAND_Init+0x158>)
 8004d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d32:	f003 0308 	and.w	r3, r3, #8
 8004d36:	613b      	str	r3, [r7, #16]
 8004d38:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	60fb      	str	r3, [r7, #12]
 8004d3e:	4b45      	ldr	r3, [pc, #276]	; (8004e54 <BSP_FSMC_NAND_Init+0x158>)
 8004d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d42:	4a44      	ldr	r2, [pc, #272]	; (8004e54 <BSP_FSMC_NAND_Init+0x158>)
 8004d44:	f043 0310 	orr.w	r3, r3, #16
 8004d48:	6313      	str	r3, [r2, #48]	; 0x30
 8004d4a:	4b42      	ldr	r3, [pc, #264]	; (8004e54 <BSP_FSMC_NAND_Init+0x158>)
 8004d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d4e:	f003 0310 	and.w	r3, r3, #16
 8004d52:	60fb      	str	r3, [r7, #12]
 8004d54:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8004d56:	2300      	movs	r3, #0
 8004d58:	60bb      	str	r3, [r7, #8]
 8004d5a:	4b3e      	ldr	r3, [pc, #248]	; (8004e54 <BSP_FSMC_NAND_Init+0x158>)
 8004d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d5e:	4a3d      	ldr	r2, [pc, #244]	; (8004e54 <BSP_FSMC_NAND_Init+0x158>)
 8004d60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d64:	6313      	str	r3, [r2, #48]	; 0x30
 8004d66:	4b3b      	ldr	r3, [pc, #236]	; (8004e54 <BSP_FSMC_NAND_Init+0x158>)
 8004d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d6e:	60bb      	str	r3, [r7, #8]
 8004d70:	68bb      	ldr	r3, [r7, #8]
	//RCC_AHB3PeriphClockCmd(RCC_AHB3Periph_FSMC, ENABLE);
	__HAL_RCC_FSMC_CLK_ENABLE();
 8004d72:	2300      	movs	r3, #0
 8004d74:	607b      	str	r3, [r7, #4]
 8004d76:	4b37      	ldr	r3, [pc, #220]	; (8004e54 <BSP_FSMC_NAND_Init+0x158>)
 8004d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d7a:	4a36      	ldr	r2, [pc, #216]	; (8004e54 <BSP_FSMC_NAND_Init+0x158>)
 8004d7c:	f043 0301 	orr.w	r3, r3, #1
 8004d80:	6393      	str	r3, [r2, #56]	; 0x38
 8004d82:	4b34      	ldr	r3, [pc, #208]	; (8004e54 <BSP_FSMC_NAND_Init+0x158>)
 8004d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d86:	f003 0301 	and.w	r3, r3, #1
 8004d8a:	607b      	str	r3, [r7, #4]
 8004d8c:	687b      	ldr	r3, [r7, #4]

	/* GPIOD */
	GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 |
 8004d8e:	f64d 03b3 	movw	r3, #55475	; 0xd8b3
 8004d92:	677b      	str	r3, [r7, #116]	; 0x74
            GPIO_PIN_7 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_14 | GPIO_PIN_15;
	GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8004d94:	2302      	movs	r3, #2
 8004d96:	67bb      	str	r3, [r7, #120]	; 0x78
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d98:	2303      	movs	r3, #3
 8004d9a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	GPIO_InitStructure.Pull = GPIO_NOPULL;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	67fb      	str	r3, [r7, #124]	; 0x7c
	GPIO_InitStructure.Alternate = GPIO_AF12_FSMC;
 8004da2:	230c      	movs	r3, #12
 8004da4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8004da8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004dac:	4619      	mov	r1, r3
 8004dae:	482a      	ldr	r0, [pc, #168]	; (8004e58 <BSP_FSMC_NAND_Init+0x15c>)
 8004db0:	f002 fde4 	bl	800797c <HAL_GPIO_Init>
	/* GPIOE */
	GPIO_InitStructure.Pin = GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10;
 8004db4:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8004db8:	677b      	str	r3, [r7, #116]	; 0x74
	GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8004dba:	2302      	movs	r3, #2
 8004dbc:	67bb      	str	r3, [r7, #120]	; 0x78
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004dbe:	2303      	movs	r3, #3
 8004dc0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	GPIO_InitStructure.Pull = GPIO_NOPULL;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	67fb      	str	r3, [r7, #124]	; 0x7c
	GPIO_InitStructure.Alternate = GPIO_AF12_FSMC;
 8004dc8:	230c      	movs	r3, #12
 8004dca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8004dce:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004dd2:	4619      	mov	r1, r3
 8004dd4:	4821      	ldr	r0, [pc, #132]	; (8004e5c <BSP_FSMC_NAND_Init+0x160>)
 8004dd6:	f002 fdd1 	bl	800797c <HAL_GPIO_Init>
	/*  GPIOG, PG6 */
	GPIO_InitStructure.Pin = GPIO_PIN_6;
 8004dda:	2340      	movs	r3, #64	; 0x40
 8004ddc:	677b      	str	r3, [r7, #116]	; 0x74
	GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8004dde:	2300      	movs	r3, #0
 8004de0:	67bb      	str	r3, [r7, #120]	; 0x78
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004de2:	2303      	movs	r3, #3
 8004de4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	GPIO_InitStructure.Pull = GPIO_PULLUP;
 8004de8:	2301      	movs	r3, #1
 8004dea:	67fb      	str	r3, [r7, #124]	; 0x7c
	HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8004dec:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004df0:	4619      	mov	r1, r3
 8004df2:	481b      	ldr	r0, [pc, #108]	; (8004e60 <BSP_FSMC_NAND_Init+0x164>)
 8004df4:	f002 fdc2 	bl	800797c <HAL_GPIO_Init>
	/*
	Defines the number of HCLK cycles to setup address before the command assertion for NAND-Flash
	read or write access  to common/Attribute or I/O memory space (depending on the memory space
	timing to be configured).This parameter can be a value between 0 and 0xFF.
	*/
	ComSpaceTiming.SetupTime = 0x1;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	627b      	str	r3, [r7, #36]	; 0x24
	/*
	Defines the minimum number of HCLK cycles to assert the command for NAND-Flash read or write
	access to common/Attribute or I/O memory space (depending on the memory space timing to be
	configured). This parameter can be a number between 0x00 and 0xFF
	*/
	ComSpaceTiming.WaitSetupTime = 0x3;
 8004dfc:	2303      	movs	r3, #3
 8004dfe:	62bb      	str	r3, [r7, #40]	; 0x28
	Defines the number of HCLK clock cycles to hold address (and data for write access) after the
	command deassertion for NAND-Flash read or write access to common/Attribute or I/O memory space
	(depending on the memory space timing to be configured).
	This parameter can be a number between 0x00 and 0xFF
	*/
	ComSpaceTiming.HoldSetupTime = 0x2;
 8004e00:	2302      	movs	r3, #2
 8004e02:	62fb      	str	r3, [r7, #44]	; 0x2c
	/*
	Defines the number of HCLK clock cycles during which the databus is kept in HiZ after the start
	of a NAND-Flash  write access to common/Attribute or I/O memory space (depending on the memory
	space timing to be configured). This parameter can be a number between 0x00 and 0xFF
	 */
	ComSpaceTiming.HiZSetupTime = 0x1;
 8004e04:	2301      	movs	r3, #1
 8004e06:	633b      	str	r3, [r7, #48]	; 0x30

	AttSpaceTiming.SetupTime = 0x1;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	617b      	str	r3, [r7, #20]
	AttSpaceTiming.WaitSetupTime = 0x3;
 8004e0c:	2303      	movs	r3, #3
 8004e0e:	61bb      	str	r3, [r7, #24]
	AttSpaceTiming.HoldSetupTime = 0x2;
 8004e10:	2302      	movs	r3, #2
 8004e12:	61fb      	str	r3, [r7, #28]
	AttSpaceTiming.HiZSetupTime = 0x1;
 8004e14:	2301      	movs	r3, #1
 8004e16:	623b      	str	r3, [r7, #32]

	hnand1.Instance = FSMC_NAND_DEVICE;
 8004e18:	4b12      	ldr	r3, [pc, #72]	; (8004e64 <BSP_FSMC_NAND_Init+0x168>)
 8004e1a:	637b      	str	r3, [r7, #52]	; 0x34
	hnand1.Init.NandBank = FSMC_NAND_BANK2;
 8004e1c:	2310      	movs	r3, #16
 8004e1e:	63bb      	str	r3, [r7, #56]	; 0x38
	hnand1.Init.Waitfeature = FSMC_NAND_PCC_WAIT_FEATURE_DISABLE;
 8004e20:	2300      	movs	r3, #0
 8004e22:	63fb      	str	r3, [r7, #60]	; 0x3c
	hnand1.Init.MemoryDataWidth =  FSMC_NAND_PCC_MEM_BUS_WIDTH_8;
 8004e24:	2300      	movs	r3, #0
 8004e26:	643b      	str	r3, [r7, #64]	; 0x40
	hnand1.Init.EccComputation = FSMC_NAND_ECC_ENABLE;
 8004e28:	2340      	movs	r3, #64	; 0x40
 8004e2a:	647b      	str	r3, [r7, #68]	; 0x44
	hnand1.Init.ECCPageSize = FSMC_NAND_ECC_PAGE_SIZE_2048BYTE;
 8004e2c:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
 8004e30:	64bb      	str	r3, [r7, #72]	; 0x48
	hnand1.Init.TCLRSetupTime = 0x1;
 8004e32:	2301      	movs	r3, #1
 8004e34:	64fb      	str	r3, [r7, #76]	; 0x4c
	hnand1.Init.TARSetupTime = 0x1;
 8004e36:	2301      	movs	r3, #1
 8004e38:	653b      	str	r3, [r7, #80]	; 0x50

	HAL_NAND_Init(&hnand1, &ComSpaceTiming, &AttSpaceTiming);
 8004e3a:	f107 0214 	add.w	r2, r7, #20
 8004e3e:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8004e42:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004e46:	4618      	mov	r0, r3
 8004e48:	f002 ff65 	bl	8007d16 <HAL_NAND_Init>
}
 8004e4c:	bf00      	nop
 8004e4e:	3788      	adds	r7, #136	; 0x88
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd80      	pop	{r7, pc}
 8004e54:	40023800 	.word	0x40023800
 8004e58:	40020c00 	.word	0x40020c00
 8004e5c:	40021000 	.word	0x40021000
 8004e60:	40021800 	.word	0x40021800
 8004e64:	a0000060 	.word	0xa0000060

08004e68 <FSMC_NAND_ReadPage>:
*********************************************************************************************************
*	Func name: FSMC_NAND_ReadPage
*********************************************************************************************************
*/
static uint8_t FSMC_NAND_ReadPage(uint8_t *_pBuffer, uint32_t _ulPageNo, uint16_t _usAddrInPage, uint16_t _usByteCount)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b086      	sub	sp, #24
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	60f8      	str	r0, [r7, #12]
 8004e70:	60b9      	str	r1, [r7, #8]
 8004e72:	4611      	mov	r1, r2
 8004e74:	461a      	mov	r2, r3
 8004e76:	460b      	mov	r3, r1
 8004e78:	80fb      	strh	r3, [r7, #6]
 8004e7a:	4613      	mov	r3, r2
 8004e7c:	80bb      	strh	r3, [r7, #4]
	uint16_t i;

	NAND_CMD_AREA = NAND_CMD_AREA_A;
 8004e7e:	4b20      	ldr	r3, [pc, #128]	; (8004f00 <FSMC_NAND_ReadPage+0x98>)
 8004e80:	2200      	movs	r2, #0
 8004e82:	701a      	strb	r2, [r3, #0]

	NAND_ADDR_AREA = _usAddrInPage;
 8004e84:	4b1f      	ldr	r3, [pc, #124]	; (8004f04 <FSMC_NAND_ReadPage+0x9c>)
 8004e86:	88fa      	ldrh	r2, [r7, #6]
 8004e88:	b2d2      	uxtb	r2, r2
 8004e8a:	701a      	strb	r2, [r3, #0]
	NAND_ADDR_AREA = _usAddrInPage >> 8;
 8004e8c:	88fb      	ldrh	r3, [r7, #6]
 8004e8e:	0a1b      	lsrs	r3, r3, #8
 8004e90:	b29a      	uxth	r2, r3
 8004e92:	4b1c      	ldr	r3, [pc, #112]	; (8004f04 <FSMC_NAND_ReadPage+0x9c>)
 8004e94:	b2d2      	uxtb	r2, r2
 8004e96:	701a      	strb	r2, [r3, #0]
	NAND_ADDR_AREA = _ulPageNo;
 8004e98:	4b1a      	ldr	r3, [pc, #104]	; (8004f04 <FSMC_NAND_ReadPage+0x9c>)
 8004e9a:	68ba      	ldr	r2, [r7, #8]
 8004e9c:	b2d2      	uxtb	r2, r2
 8004e9e:	701a      	strb	r2, [r3, #0]
	NAND_ADDR_AREA = (_ulPageNo & 0xFF00) >> 8;
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	0a1a      	lsrs	r2, r3, #8
 8004ea4:	4b17      	ldr	r3, [pc, #92]	; (8004f04 <FSMC_NAND_ReadPage+0x9c>)
 8004ea6:	b2d2      	uxtb	r2, r2
 8004ea8:	701a      	strb	r2, [r3, #0]

	NAND_CMD_AREA = NAND_CMD_AREA_TRUE1;
 8004eaa:	4b15      	ldr	r3, [pc, #84]	; (8004f00 <FSMC_NAND_ReadPage+0x98>)
 8004eac:	2230      	movs	r2, #48	; 0x30
 8004eae:	701a      	strb	r2, [r3, #0]

	for (i = 0; i < 20; i++);
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	82fb      	strh	r3, [r7, #22]
 8004eb4:	e002      	b.n	8004ebc <FSMC_NAND_ReadPage+0x54>
 8004eb6:	8afb      	ldrh	r3, [r7, #22]
 8004eb8:	3301      	adds	r3, #1
 8004eba:	82fb      	strh	r3, [r7, #22]
 8004ebc:	8afb      	ldrh	r3, [r7, #22]
 8004ebe:	2b13      	cmp	r3, #19
 8004ec0:	d9f9      	bls.n	8004eb6 <FSMC_NAND_ReadPage+0x4e>
	while(HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_6) == 0);
 8004ec2:	bf00      	nop
 8004ec4:	2140      	movs	r1, #64	; 0x40
 8004ec6:	4810      	ldr	r0, [pc, #64]	; (8004f08 <FSMC_NAND_ReadPage+0xa0>)
 8004ec8:	f002 fef4 	bl	8007cb4 <HAL_GPIO_ReadPin>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d0f8      	beq.n	8004ec4 <FSMC_NAND_ReadPage+0x5c>

	for(i = 0; i < _usByteCount; i++)
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	82fb      	strh	r3, [r7, #22]
 8004ed6:	e00a      	b.n	8004eee <FSMC_NAND_ReadPage+0x86>
	{
		_pBuffer[i] = NAND_DATA_AREA;
 8004ed8:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
 8004edc:	8afb      	ldrh	r3, [r7, #22]
 8004ede:	68fa      	ldr	r2, [r7, #12]
 8004ee0:	4413      	add	r3, r2
 8004ee2:	780a      	ldrb	r2, [r1, #0]
 8004ee4:	b2d2      	uxtb	r2, r2
 8004ee6:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < _usByteCount; i++)
 8004ee8:	8afb      	ldrh	r3, [r7, #22]
 8004eea:	3301      	adds	r3, #1
 8004eec:	82fb      	strh	r3, [r7, #22]
 8004eee:	8afa      	ldrh	r2, [r7, #22]
 8004ef0:	88bb      	ldrh	r3, [r7, #4]
 8004ef2:	429a      	cmp	r2, r3
 8004ef4:	d3f0      	bcc.n	8004ed8 <FSMC_NAND_ReadPage+0x70>
	}

	return NAND_OK;
 8004ef6:	2300      	movs	r3, #0
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3718      	adds	r7, #24
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}
 8004f00:	70010000 	.word	0x70010000
 8004f04:	70020000 	.word	0x70020000
 8004f08:	40021800 	.word	0x40021800

08004f0c <FSMC_NAND_ReadSpare>:
*********************************************************************************************************
* Funa name: FSMC_NAND_ReadSpare
*********************************************************************************************************
*/
static uint8_t FSMC_NAND_ReadSpare(uint8_t *_pBuffer, uint32_t _ulPageNo, uint16_t _usAddrInSpare, uint16_t _usByteCount)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b084      	sub	sp, #16
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	60f8      	str	r0, [r7, #12]
 8004f14:	60b9      	str	r1, [r7, #8]
 8004f16:	4611      	mov	r1, r2
 8004f18:	461a      	mov	r2, r3
 8004f1a:	460b      	mov	r3, r1
 8004f1c:	80fb      	strh	r3, [r7, #6]
 8004f1e:	4613      	mov	r3, r2
 8004f20:	80bb      	strh	r3, [r7, #4]
	if (_usByteCount > NAND_SPARE_AREA_SIZE)
 8004f22:	88bb      	ldrh	r3, [r7, #4]
 8004f24:	2b40      	cmp	r3, #64	; 0x40
 8004f26:	d901      	bls.n	8004f2c <FSMC_NAND_ReadSpare+0x20>
	{
		return NAND_FAIL;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	e009      	b.n	8004f40 <FSMC_NAND_ReadSpare+0x34>
	}
	return FSMC_NAND_ReadPage(_pBuffer, _ulPageNo, NAND_PAGE_SIZE + _usAddrInSpare, _usByteCount);
 8004f2c:	88fb      	ldrh	r3, [r7, #6]
 8004f2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f32:	b29a      	uxth	r2, r3
 8004f34:	88bb      	ldrh	r3, [r7, #4]
 8004f36:	68b9      	ldr	r1, [r7, #8]
 8004f38:	68f8      	ldr	r0, [r7, #12]
 8004f3a:	f7ff ff95 	bl	8004e68 <FSMC_NAND_ReadPage>
 8004f3e:	4603      	mov	r3, r0
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	3710      	adds	r7, #16
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}

08004f48 <NAND_BuildLUT>:
*********************************************************************************************************
* Funa name: NAND_BuildLUT
*********************************************************************************************************
*/
static uint8_t NAND_BuildLUT(void)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b082      	sub	sp, #8
 8004f4c:	af00      	add	r7, sp, #0
	uint16_t i;
	uint8_t buf[VALID_SPARE_SIZE];
	uint16_t usLBN;

	for (i = 0; i < NAND_BLOCK_COUNT; i++)
 8004f4e:	2300      	movs	r3, #0
 8004f50:	80fb      	strh	r3, [r7, #6]
 8004f52:	e008      	b.n	8004f66 <NAND_BuildLUT+0x1e>
	{
		s_usLUT[i] = 0xFFFF;
 8004f54:	88fb      	ldrh	r3, [r7, #6]
 8004f56:	4a37      	ldr	r2, [pc, #220]	; (8005034 <NAND_BuildLUT+0xec>)
 8004f58:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004f5c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (i = 0; i < NAND_BLOCK_COUNT; i++)
 8004f60:	88fb      	ldrh	r3, [r7, #6]
 8004f62:	3301      	adds	r3, #1
 8004f64:	80fb      	strh	r3, [r7, #6]
 8004f66:	88fb      	ldrh	r3, [r7, #6]
 8004f68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f6c:	d3f2      	bcc.n	8004f54 <NAND_BuildLUT+0xc>
	}
	for (i = 0; i < NAND_BLOCK_COUNT; i++)
 8004f6e:	2300      	movs	r3, #0
 8004f70:	80fb      	strh	r3, [r7, #6]
 8004f72:	e028      	b.n	8004fc6 <NAND_BuildLUT+0x7e>
	{
		FSMC_NAND_ReadSpare(buf, i * NAND_BLOCK_SIZE, 0, VALID_SPARE_SIZE);
 8004f74:	88fb      	ldrh	r3, [r7, #6]
 8004f76:	019b      	lsls	r3, r3, #6
 8004f78:	4619      	mov	r1, r3
 8004f7a:	4638      	mov	r0, r7
 8004f7c:	2304      	movs	r3, #4
 8004f7e:	2200      	movs	r2, #0
 8004f80:	f7ff ffc4 	bl	8004f0c <FSMC_NAND_ReadSpare>

		if (buf[BI_OFFSET] == 0xFF)
 8004f84:	783b      	ldrb	r3, [r7, #0]
 8004f86:	2bff      	cmp	r3, #255	; 0xff
 8004f88:	d11a      	bne.n	8004fc0 <NAND_BuildLUT+0x78>
		{
			usLBN = buf[LBN0_OFFSET] + buf[LBN1_OFFSET] * 256;
 8004f8a:	78bb      	ldrb	r3, [r7, #2]
 8004f8c:	b29a      	uxth	r2, r3
 8004f8e:	78fb      	ldrb	r3, [r7, #3]
 8004f90:	b29b      	uxth	r3, r3
 8004f92:	021b      	lsls	r3, r3, #8
 8004f94:	b29b      	uxth	r3, r3
 8004f96:	4413      	add	r3, r2
 8004f98:	80bb      	strh	r3, [r7, #4]
			if (usLBN < NAND_BLOCK_COUNT)
 8004f9a:	88bb      	ldrh	r3, [r7, #4]
 8004f9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fa0:	d20e      	bcs.n	8004fc0 <NAND_BuildLUT+0x78>
			{
				if (s_usLUT[usLBN] != 0xFFFF)
 8004fa2:	88bb      	ldrh	r3, [r7, #4]
 8004fa4:	4a23      	ldr	r2, [pc, #140]	; (8005034 <NAND_BuildLUT+0xec>)
 8004fa6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004faa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d001      	beq.n	8004fb6 <NAND_BuildLUT+0x6e>
				{
					return NAND_FAIL;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e039      	b.n	800502a <NAND_BuildLUT+0xe2>
				}
				s_usLUT[usLBN] = i;
 8004fb6:	88bb      	ldrh	r3, [r7, #4]
 8004fb8:	491e      	ldr	r1, [pc, #120]	; (8005034 <NAND_BuildLUT+0xec>)
 8004fba:	88fa      	ldrh	r2, [r7, #6]
 8004fbc:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for (i = 0; i < NAND_BLOCK_COUNT; i++)
 8004fc0:	88fb      	ldrh	r3, [r7, #6]
 8004fc2:	3301      	adds	r3, #1
 8004fc4:	80fb      	strh	r3, [r7, #6]
 8004fc6:	88fb      	ldrh	r3, [r7, #6]
 8004fc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fcc:	d3d2      	bcc.n	8004f74 <NAND_BuildLUT+0x2c>
			}
		}
	}
	for (i = 0; i < NAND_BLOCK_COUNT; i++)
 8004fce:	2300      	movs	r3, #0
 8004fd0:	80fb      	strh	r3, [r7, #6]
 8004fd2:	e00d      	b.n	8004ff0 <NAND_BuildLUT+0xa8>
	{
		if (s_usLUT[i] >= NAND_BLOCK_COUNT)
 8004fd4:	88fb      	ldrh	r3, [r7, #6]
 8004fd6:	4a17      	ldr	r2, [pc, #92]	; (8005034 <NAND_BuildLUT+0xec>)
 8004fd8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004fdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fe0:	d303      	bcc.n	8004fea <NAND_BuildLUT+0xa2>
		{
			s_usValidDataBlockCount = i;
 8004fe2:	4a15      	ldr	r2, [pc, #84]	; (8005038 <NAND_BuildLUT+0xf0>)
 8004fe4:	88fb      	ldrh	r3, [r7, #6]
 8004fe6:	8013      	strh	r3, [r2, #0]
			break;
 8004fe8:	e006      	b.n	8004ff8 <NAND_BuildLUT+0xb0>
	for (i = 0; i < NAND_BLOCK_COUNT; i++)
 8004fea:	88fb      	ldrh	r3, [r7, #6]
 8004fec:	3301      	adds	r3, #1
 8004fee:	80fb      	strh	r3, [r7, #6]
 8004ff0:	88fb      	ldrh	r3, [r7, #6]
 8004ff2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ff6:	d3ed      	bcc.n	8004fd4 <NAND_BuildLUT+0x8c>
		}
	}
	if (s_usValidDataBlockCount < 100)
 8004ff8:	4b0f      	ldr	r3, [pc, #60]	; (8005038 <NAND_BuildLUT+0xf0>)
 8004ffa:	881b      	ldrh	r3, [r3, #0]
 8004ffc:	2b63      	cmp	r3, #99	; 0x63
 8004ffe:	d80e      	bhi.n	800501e <NAND_BuildLUT+0xd6>
	{
		return NAND_FAIL;
 8005000:	2301      	movs	r3, #1
 8005002:	e012      	b.n	800502a <NAND_BuildLUT+0xe2>
	}
	for (; i < s_usValidDataBlockCount; i++)
	{
		if (s_usLUT[i] != 0xFFFF)
 8005004:	88fb      	ldrh	r3, [r7, #6]
 8005006:	4a0b      	ldr	r2, [pc, #44]	; (8005034 <NAND_BuildLUT+0xec>)
 8005008:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800500c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005010:	4293      	cmp	r3, r2
 8005012:	d001      	beq.n	8005018 <NAND_BuildLUT+0xd0>
		{
			return NAND_FAIL;
 8005014:	2301      	movs	r3, #1
 8005016:	e008      	b.n	800502a <NAND_BuildLUT+0xe2>
	for (; i < s_usValidDataBlockCount; i++)
 8005018:	88fb      	ldrh	r3, [r7, #6]
 800501a:	3301      	adds	r3, #1
 800501c:	80fb      	strh	r3, [r7, #6]
 800501e:	4b06      	ldr	r3, [pc, #24]	; (8005038 <NAND_BuildLUT+0xf0>)
 8005020:	881b      	ldrh	r3, [r3, #0]
 8005022:	88fa      	ldrh	r2, [r7, #6]
 8005024:	429a      	cmp	r2, r3
 8005026:	d3ed      	bcc.n	8005004 <NAND_BuildLUT+0xbc>
		}
	}
	return NAND_OK;
 8005028:	2300      	movs	r3, #0
}
 800502a:	4618      	mov	r0, r3
 800502c:	3708      	adds	r7, #8
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}
 8005032:	bf00      	nop
 8005034:	200002f8 	.word	0x200002f8
 8005038:	20000af8 	.word	0x20000af8

0800503c <FSMC_NAND_ReadStatus>:
*********************************************************************************************************
*	Funa name: FSMC_NAND_ReadStatus
*********************************************************************************************************
*/
static uint8_t FSMC_NAND_ReadStatus(void)
{
 800503c:	b480      	push	{r7}
 800503e:	b083      	sub	sp, #12
 8005040:	af00      	add	r7, sp, #0
	uint8_t ucData;
	uint8_t ucStatus = NAND_BUSY;
 8005042:	2300      	movs	r3, #0
 8005044:	71fb      	strb	r3, [r7, #7]

	NAND_CMD_AREA = NAND_CMD_STATUS;
 8005046:	4b10      	ldr	r3, [pc, #64]	; (8005088 <FSMC_NAND_ReadStatus+0x4c>)
 8005048:	2270      	movs	r2, #112	; 0x70
 800504a:	701a      	strb	r2, [r3, #0]
	ucData = *(__IO uint8_t *)(Bank_NAND_ADDR);
 800504c:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8005050:	781b      	ldrb	r3, [r3, #0]
 8005052:	71bb      	strb	r3, [r7, #6]

	if((ucData & NAND_ERROR) == NAND_ERROR)
 8005054:	79bb      	ldrb	r3, [r7, #6]
 8005056:	f003 0301 	and.w	r3, r3, #1
 800505a:	2b00      	cmp	r3, #0
 800505c:	d002      	beq.n	8005064 <FSMC_NAND_ReadStatus+0x28>
	{
		ucStatus = NAND_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	71fb      	strb	r3, [r7, #7]
 8005062:	e009      	b.n	8005078 <FSMC_NAND_ReadStatus+0x3c>
	}
	else if((ucData & NAND_READY) == NAND_READY)
 8005064:	79bb      	ldrb	r3, [r7, #6]
 8005066:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800506a:	2b00      	cmp	r3, #0
 800506c:	d002      	beq.n	8005074 <FSMC_NAND_ReadStatus+0x38>
	{
		ucStatus = NAND_READY;
 800506e:	2340      	movs	r3, #64	; 0x40
 8005070:	71fb      	strb	r3, [r7, #7]
 8005072:	e001      	b.n	8005078 <FSMC_NAND_ReadStatus+0x3c>
	}
	else
	{
		ucStatus = NAND_BUSY;
 8005074:	2300      	movs	r3, #0
 8005076:	71fb      	strb	r3, [r7, #7]
	}
	return (ucStatus);
 8005078:	79fb      	ldrb	r3, [r7, #7]
}
 800507a:	4618      	mov	r0, r3
 800507c:	370c      	adds	r7, #12
 800507e:	46bd      	mov	sp, r7
 8005080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005084:	4770      	bx	lr
 8005086:	bf00      	nop
 8005088:	70010000 	.word	0x70010000

0800508c <FSMC_NAND_GetStatus>:
*********************************************************************************************************
*	Func name: FSMC_NAND_GetStatus
*********************************************************************************************************
*/
static uint8_t FSMC_NAND_GetStatus(void)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b082      	sub	sp, #8
 8005090:	af00      	add	r7, sp, #0
	uint32_t ulTimeout = 0x10000;
 8005092:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005096:	607b      	str	r3, [r7, #4]
	uint8_t ucStatus = NAND_READY;
 8005098:	2340      	movs	r3, #64	; 0x40
 800509a:	70fb      	strb	r3, [r7, #3]

	ucStatus = FSMC_NAND_ReadStatus();
 800509c:	f7ff ffce 	bl	800503c <FSMC_NAND_ReadStatus>
 80050a0:	4603      	mov	r3, r0
 80050a2:	70fb      	strb	r3, [r7, #3]

	while ((ucStatus != NAND_READY) &&( ulTimeout != 0x00))
 80050a4:	e006      	b.n	80050b4 <FSMC_NAND_GetStatus+0x28>
	{
		ucStatus = FSMC_NAND_ReadStatus();
 80050a6:	f7ff ffc9 	bl	800503c <FSMC_NAND_ReadStatus>
 80050aa:	4603      	mov	r3, r0
 80050ac:	70fb      	strb	r3, [r7, #3]
		ulTimeout--;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	3b01      	subs	r3, #1
 80050b2:	607b      	str	r3, [r7, #4]
	while ((ucStatus != NAND_READY) &&( ulTimeout != 0x00))
 80050b4:	78fb      	ldrb	r3, [r7, #3]
 80050b6:	2b40      	cmp	r3, #64	; 0x40
 80050b8:	d002      	beq.n	80050c0 <FSMC_NAND_GetStatus+0x34>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d1f2      	bne.n	80050a6 <FSMC_NAND_GetStatus+0x1a>
	}

	if(ulTimeout == 0x00)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d101      	bne.n	80050ca <FSMC_NAND_GetStatus+0x3e>
	{
		ucStatus =  NAND_TIMEOUT_ERROR;
 80050c6:	2380      	movs	r3, #128	; 0x80
 80050c8:	70fb      	strb	r3, [r7, #3]
	}
	return (ucStatus);
 80050ca:	78fb      	ldrb	r3, [r7, #3]
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	3708      	adds	r7, #8
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}

080050d4 <FSMC_NAND_Reset>:
*********************************************************************************************************
* Func name: FSMC_NAND_Reset
*********************************************************************************************************
*/
static uint8_t FSMC_NAND_Reset(void)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	af00      	add	r7, sp, #0
	NAND_CMD_AREA = NAND_CMD_RESET;
 80050d8:	4b06      	ldr	r3, [pc, #24]	; (80050f4 <FSMC_NAND_Reset+0x20>)
 80050da:	22ff      	movs	r2, #255	; 0xff
 80050dc:	701a      	strb	r2, [r3, #0]

	if (FSMC_NAND_GetStatus() == NAND_READY)
 80050de:	f7ff ffd5 	bl	800508c <FSMC_NAND_GetStatus>
 80050e2:	4603      	mov	r3, r0
 80050e4:	2b40      	cmp	r3, #64	; 0x40
 80050e6:	d101      	bne.n	80050ec <FSMC_NAND_Reset+0x18>
	{
		return NAND_OK;
 80050e8:	2300      	movs	r3, #0
 80050ea:	e000      	b.n	80050ee <FSMC_NAND_Reset+0x1a>
	}
	return NAND_FAIL;
 80050ec:	2301      	movs	r3, #1
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	bd80      	pop	{r7, pc}
 80050f2:	bf00      	nop
 80050f4:	70010000 	.word	0x70010000

080050f8 <NAND_Init>:
*********************************************************************************************************
* Func name: NAND_Init
*********************************************************************************************************
*/
uint8_t NAND_Init(void)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b082      	sub	sp, #8
 80050fc:	af00      	add	r7, sp, #0
	uint8_t Status;

	BSP_FSMC_NAND_Init();
 80050fe:	f7ff fdfd 	bl	8004cfc <BSP_FSMC_NAND_Init>

	FSMC_NAND_Reset();
 8005102:	f7ff ffe7 	bl	80050d4 <FSMC_NAND_Reset>

	Status = NAND_BuildLUT();
 8005106:	f7ff ff1f 	bl	8004f48 <NAND_BuildLUT>
 800510a:	4603      	mov	r3, r0
 800510c:	71fb      	strb	r3, [r7, #7]

	return Status;
 800510e:	79fb      	ldrb	r3, [r7, #7]
}
 8005110:	4618      	mov	r0, r3
 8005112:	3708      	adds	r7, #8
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}

08005118 <NAND_ReadID>:
*********************************************************************************************************
* Func name: NAND_ReadID
*********************************************************************************************************
*/
uint32_t NAND_ReadID(void)
{
 8005118:	b480      	push	{r7}
 800511a:	b083      	sub	sp, #12
 800511c:	af00      	add	r7, sp, #0
	uint32_t data = 0;
 800511e:	2300      	movs	r3, #0
 8005120:	607b      	str	r3, [r7, #4]

	NAND_CMD_AREA = 0x90;
 8005122:	4b10      	ldr	r3, [pc, #64]	; (8005164 <NAND_ReadID+0x4c>)
 8005124:	2290      	movs	r2, #144	; 0x90
 8005126:	701a      	strb	r2, [r3, #0]
	NAND_ADDR_AREA = 0x00;
 8005128:	4b0f      	ldr	r3, [pc, #60]	; (8005168 <NAND_ReadID+0x50>)
 800512a:	2200      	movs	r2, #0
 800512c:	701a      	strb	r2, [r3, #0]

	data = *(__IO uint32_t *)(Bank_NAND_ADDR | DATA_AREA);
 800512e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	607b      	str	r3, [r7, #4]
	data =  ((data << 24) & 0xFF000000) |
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	061a      	lsls	r2, r3, #24
				((data << 8 ) & 0x00FF0000) |
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	021b      	lsls	r3, r3, #8
 800513e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
	data =  ((data << 24) & 0xFF000000) |
 8005142:	431a      	orrs	r2, r3
				((data >> 8 ) & 0x0000FF00) |
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	0a1b      	lsrs	r3, r3, #8
 8005148:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
				((data << 8 ) & 0x00FF0000) |
 800514c:	431a      	orrs	r2, r3
				((data >> 24) & 0x000000FF) ;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	0e1b      	lsrs	r3, r3, #24
	data =  ((data << 24) & 0xFF000000) |
 8005152:	4313      	orrs	r3, r2
 8005154:	607b      	str	r3, [r7, #4]
	return data;
 8005156:	687b      	ldr	r3, [r7, #4]
}
 8005158:	4618      	mov	r0, r3
 800515a:	370c      	adds	r7, #12
 800515c:	46bd      	mov	sp, r7
 800515e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005162:	4770      	bx	lr
 8005164:	70010000 	.word	0x70010000
 8005168:	70020000 	.word	0x70020000

0800516c <bsp_InitNorFlash>:
*********************************************************************************************************
*	Func name: bsp_InitNorFlash
*********************************************************************************************************
*/
void bsp_InitNorFlash(void)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b0a6      	sub	sp, #152	; 0x98
 8005170:	af00      	add	r7, sp, #0
	SRAM_HandleTypeDef hnorsram;
	FSMC_NORSRAM_TimingTypeDef  timing;
	GPIO_InitTypeDef GPIO_InitStructure;

	__HAL_RCC_GPIOD_CLK_ENABLE();
 8005172:	2300      	movs	r3, #0
 8005174:	617b      	str	r3, [r7, #20]
 8005176:	4b60      	ldr	r3, [pc, #384]	; (80052f8 <bsp_InitNorFlash+0x18c>)
 8005178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800517a:	4a5f      	ldr	r2, [pc, #380]	; (80052f8 <bsp_InitNorFlash+0x18c>)
 800517c:	f043 0308 	orr.w	r3, r3, #8
 8005180:	6313      	str	r3, [r2, #48]	; 0x30
 8005182:	4b5d      	ldr	r3, [pc, #372]	; (80052f8 <bsp_InitNorFlash+0x18c>)
 8005184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005186:	f003 0308 	and.w	r3, r3, #8
 800518a:	617b      	str	r3, [r7, #20]
 800518c:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 800518e:	2300      	movs	r3, #0
 8005190:	613b      	str	r3, [r7, #16]
 8005192:	4b59      	ldr	r3, [pc, #356]	; (80052f8 <bsp_InitNorFlash+0x18c>)
 8005194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005196:	4a58      	ldr	r2, [pc, #352]	; (80052f8 <bsp_InitNorFlash+0x18c>)
 8005198:	f043 0310 	orr.w	r3, r3, #16
 800519c:	6313      	str	r3, [r2, #48]	; 0x30
 800519e:	4b56      	ldr	r3, [pc, #344]	; (80052f8 <bsp_InitNorFlash+0x18c>)
 80051a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051a2:	f003 0310 	and.w	r3, r3, #16
 80051a6:	613b      	str	r3, [r7, #16]
 80051a8:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 80051aa:	2300      	movs	r3, #0
 80051ac:	60fb      	str	r3, [r7, #12]
 80051ae:	4b52      	ldr	r3, [pc, #328]	; (80052f8 <bsp_InitNorFlash+0x18c>)
 80051b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051b2:	4a51      	ldr	r2, [pc, #324]	; (80052f8 <bsp_InitNorFlash+0x18c>)
 80051b4:	f043 0320 	orr.w	r3, r3, #32
 80051b8:	6313      	str	r3, [r2, #48]	; 0x30
 80051ba:	4b4f      	ldr	r3, [pc, #316]	; (80052f8 <bsp_InitNorFlash+0x18c>)
 80051bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051be:	f003 0320 	and.w	r3, r3, #32
 80051c2:	60fb      	str	r3, [r7, #12]
 80051c4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 80051c6:	2300      	movs	r3, #0
 80051c8:	60bb      	str	r3, [r7, #8]
 80051ca:	4b4b      	ldr	r3, [pc, #300]	; (80052f8 <bsp_InitNorFlash+0x18c>)
 80051cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ce:	4a4a      	ldr	r2, [pc, #296]	; (80052f8 <bsp_InitNorFlash+0x18c>)
 80051d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80051d4:	6313      	str	r3, [r2, #48]	; 0x30
 80051d6:	4b48      	ldr	r3, [pc, #288]	; (80052f8 <bsp_InitNorFlash+0x18c>)
 80051d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051de:	60bb      	str	r3, [r7, #8]
 80051e0:	68bb      	ldr	r3, [r7, #8]

	__HAL_RCC_FSMC_CLK_ENABLE();
 80051e2:	2300      	movs	r3, #0
 80051e4:	607b      	str	r3, [r7, #4]
 80051e6:	4b44      	ldr	r3, [pc, #272]	; (80052f8 <bsp_InitNorFlash+0x18c>)
 80051e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ea:	4a43      	ldr	r2, [pc, #268]	; (80052f8 <bsp_InitNorFlash+0x18c>)
 80051ec:	f043 0301 	orr.w	r3, r3, #1
 80051f0:	6393      	str	r3, [r2, #56]	; 0x38
 80051f2:	4b41      	ldr	r3, [pc, #260]	; (80052f8 <bsp_InitNorFlash+0x18c>)
 80051f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051f6:	f003 0301 	and.w	r3, r3, #1
 80051fa:	607b      	str	r3, [r7, #4]
 80051fc:	687b      	ldr	r3, [r7, #4]
			PG4/FSMC_A14
			PG5/FSMC_A15
			PG9/FSMC_NE2	- Æ¬Ñ¡ÐÅºÅ
	*/
	/* GPIOD configuration */
	GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_4  | GPIO_PIN_5  |
 80051fe:	f64f 7333 	movw	r3, #65331	; 0xff33
 8005202:	61bb      	str	r3, [r7, #24]
		                    GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 | GPIO_PIN_11 |
		                    GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
	GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8005204:	2302      	movs	r3, #2
 8005206:	61fb      	str	r3, [r7, #28]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005208:	2303      	movs	r3, #3
 800520a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStructure.Pull = GPIO_NOPULL;
 800520c:	2300      	movs	r3, #0
 800520e:	623b      	str	r3, [r7, #32]
	GPIO_InitStructure.Alternate = GPIO_AF12_FSMC;
 8005210:	230c      	movs	r3, #12
 8005212:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8005214:	f107 0318 	add.w	r3, r7, #24
 8005218:	4619      	mov	r1, r3
 800521a:	4838      	ldr	r0, [pc, #224]	; (80052fc <bsp_InitNorFlash+0x190>)
 800521c:	f002 fbae 	bl	800797c <HAL_GPIO_Init>

	/* GPIOE configuration */
	GPIO_InitStructure.Pin = GPIO_PIN_3 |
 8005220:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8005224:	61bb      	str	r3, [r7, #24]
		                    GPIO_PIN_4  | GPIO_PIN_5  | GPIO_PIN_6 | GPIO_PIN_7 |
		                    GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 | GPIO_PIN_11|
		                    GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
	GPIO_InitStructure.Alternate = GPIO_AF12_FSMC;
 8005226:	230c      	movs	r3, #12
 8005228:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 800522a:	f107 0318 	add.w	r3, r7, #24
 800522e:	4619      	mov	r1, r3
 8005230:	4833      	ldr	r0, [pc, #204]	; (8005300 <bsp_InitNorFlash+0x194>)
 8005232:	f002 fba3 	bl	800797c <HAL_GPIO_Init>

	/* GPIOF configuration */
	GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_2  | GPIO_PIN_3  |
 8005236:	f24f 033f 	movw	r3, #61503	; 0xf03f
 800523a:	61bb      	str	r3, [r7, #24]
		                    GPIO_PIN_4  | GPIO_PIN_5  | GPIO_PIN_12 | GPIO_PIN_13 |
		                    GPIO_PIN_14 | GPIO_PIN_15;
	GPIO_InitStructure.Alternate = GPIO_AF12_FSMC;
 800523c:	230c      	movs	r3, #12
 800523e:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8005240:	f107 0318 	add.w	r3, r7, #24
 8005244:	4619      	mov	r1, r3
 8005246:	482f      	ldr	r0, [pc, #188]	; (8005304 <bsp_InitNorFlash+0x198>)
 8005248:	f002 fb98 	bl	800797c <HAL_GPIO_Init>

	/* GPIOG configuration */
	GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_2  | GPIO_PIN_3 |
 800524c:	f240 233f 	movw	r3, #575	; 0x23f
 8005250:	61bb      	str	r3, [r7, #24]
		                    GPIO_PIN_4  | GPIO_PIN_5  | GPIO_PIN_9;
	GPIO_InitStructure.Alternate = GPIO_AF12_FSMC;
 8005252:	230c      	movs	r3, #12
 8005254:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8005256:	f107 0318 	add.w	r3, r7, #24
 800525a:	4619      	mov	r1, r3
 800525c:	482a      	ldr	r0, [pc, #168]	; (8005308 <bsp_InitNorFlash+0x19c>)
 800525e:	f002 fb8d 	bl	800797c <HAL_GPIO_Init>

	/* PD6 ×÷ÎªÃ¦ÐÅºÅ, ÅäÖÃÎªGPIOÊäÈëÄ£Ê½£¬Èí¼þ²éÑ¯ */
	GPIO_InitStructure.Pin = GPIO_PIN_6;
 8005262:	2340      	movs	r3, #64	; 0x40
 8005264:	61bb      	str	r3, [r7, #24]
	GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8005266:	2300      	movs	r3, #0
 8005268:	61fb      	str	r3, [r7, #28]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800526a:	2303      	movs	r3, #3
 800526c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStructure.Pull = GPIO_NOPULL;
 800526e:	2300      	movs	r3, #0
 8005270:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8005272:	f107 0318 	add.w	r3, r7, #24
 8005276:	4619      	mov	r1, r3
 8005278:	4820      	ldr	r0, [pc, #128]	; (80052fc <bsp_InitNorFlash+0x190>)
 800527a:	f002 fb7f 	bl	800797c <HAL_GPIO_Init>
	timing.BusTurnAroundDuration = 0x00;
	timing.CLKDivision = 0x00;
	timing.DataLatency = 0x00;
	timing.AccessMode = FSMC_ACCESS_MODE_B;
#endif
	timing.AddressSetupTime = 6;
 800527e:	2306      	movs	r3, #6
 8005280:	62fb      	str	r3, [r7, #44]	; 0x2c
	timing.AddressHoldTime = 1;
 8005282:	2301      	movs	r3, #1
 8005284:	633b      	str	r3, [r7, #48]	; 0x30
	timing.DataSetupTime = 12;
 8005286:	230c      	movs	r3, #12
 8005288:	637b      	str	r3, [r7, #52]	; 0x34
	timing.BusTurnAroundDuration = 0;
 800528a:	2300      	movs	r3, #0
 800528c:	63bb      	str	r3, [r7, #56]	; 0x38
	timing.CLKDivision = 0;
 800528e:	2300      	movs	r3, #0
 8005290:	63fb      	str	r3, [r7, #60]	; 0x3c
	timing.DataLatency = 0;
 8005292:	2300      	movs	r3, #0
 8005294:	643b      	str	r3, [r7, #64]	; 0x40
	timing.AccessMode = FSMC_ACCESS_MODE_B;
 8005296:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800529a:	647b      	str	r3, [r7, #68]	; 0x44

	hnorsram.Instance = FSMC_NORSRAM_DEVICE;
 800529c:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 80052a0:	64bb      	str	r3, [r7, #72]	; 0x48
	hnorsram.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80052a2:	4b1a      	ldr	r3, [pc, #104]	; (800530c <bsp_InitNorFlash+0x1a0>)
 80052a4:	64fb      	str	r3, [r7, #76]	; 0x4c

	hnorsram.Init.NSBank = FSMC_NORSRAM_BANK2;
 80052a6:	2302      	movs	r3, #2
 80052a8:	653b      	str	r3, [r7, #80]	; 0x50
	hnorsram.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80052aa:	2300      	movs	r3, #0
 80052ac:	657b      	str	r3, [r7, #84]	; 0x54
	hnorsram.Init.MemoryType = FSMC_MEMORY_TYPE_NOR;
 80052ae:	2308      	movs	r3, #8
 80052b0:	65bb      	str	r3, [r7, #88]	; 0x58
	hnorsram.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80052b2:	2310      	movs	r3, #16
 80052b4:	65fb      	str	r3, [r7, #92]	; 0x5c
	hnorsram.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80052b6:	2300      	movs	r3, #0
 80052b8:	663b      	str	r3, [r7, #96]	; 0x60
	hnorsram.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80052ba:	2300      	movs	r3, #0
 80052bc:	67fb      	str	r3, [r7, #124]	; 0x7c
	hnorsram.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80052be:	2300      	movs	r3, #0
 80052c0:	667b      	str	r3, [r7, #100]	; 0x64
	hnorsram.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80052c2:	2300      	movs	r3, #0
 80052c4:	66bb      	str	r3, [r7, #104]	; 0x68
	hnorsram.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;     // ??
 80052c6:	2300      	movs	r3, #0
 80052c8:	66fb      	str	r3, [r7, #108]	; 0x6c
	hnorsram.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80052ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80052ce:	673b      	str	r3, [r7, #112]	; 0x70
	hnorsram.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80052d0:	2300      	movs	r3, #0
 80052d2:	677b      	str	r3, [r7, #116]	; 0x74
	hnorsram.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 80052d4:	2300      	movs	r3, #0
 80052d6:	67bb      	str	r3, [r7, #120]	; 0x78
	hnorsram.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80052d8:	2300      	movs	r3, #0
 80052da:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

	HAL_SRAM_Init(&hnorsram, &timing, &timing);
 80052de:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80052e2:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80052e6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80052ea:	4618      	mov	r0, r3
 80052ec:	f7fd f8d2 	bl	8002494 <HAL_SRAM_Init>
}
 80052f0:	bf00      	nop
 80052f2:	3798      	adds	r7, #152	; 0x98
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}
 80052f8:	40023800 	.word	0x40023800
 80052fc:	40020c00 	.word	0x40020c00
 8005300:	40021000 	.word	0x40021000
 8005304:	40021400 	.word	0x40021400
 8005308:	40021800 	.word	0x40021800
 800530c:	a0000104 	.word	0xa0000104

08005310 <NOR_ReadID>:
*********************************************************************************************************
*	Func Type: NOR_ReadID
*********************************************************************************************************
*/
uint32_t NOR_ReadID(void)
{
 8005310:	b480      	push	{r7}
 8005312:	b083      	sub	sp, #12
 8005314:	af00      	add	r7, sp, #0
	uint32_t uiID;
	uint8_t id1, id2, id3, id4;

	NOR_WRITE(ADDR_SHIFT(0x0555), 0x00AA);
 8005316:	4b18      	ldr	r3, [pc, #96]	; (8005378 <NOR_ReadID+0x68>)
 8005318:	22aa      	movs	r2, #170	; 0xaa
 800531a:	801a      	strh	r2, [r3, #0]
	NOR_WRITE(ADDR_SHIFT(0x02AA), 0x0055);
 800531c:	4b17      	ldr	r3, [pc, #92]	; (800537c <NOR_ReadID+0x6c>)
 800531e:	2255      	movs	r2, #85	; 0x55
 8005320:	801a      	strh	r2, [r3, #0]
	NOR_WRITE(ADDR_SHIFT(0x0555), 0x0090);
 8005322:	4b15      	ldr	r3, [pc, #84]	; (8005378 <NOR_ReadID+0x68>)
 8005324:	2290      	movs	r2, #144	; 0x90
 8005326:	801a      	strh	r2, [r3, #0]

	id1 = *(__IO uint16_t *) ADDR_SHIFT(0x0000);
 8005328:	f04f 43c8 	mov.w	r3, #1677721600	; 0x64000000
 800532c:	881b      	ldrh	r3, [r3, #0]
 800532e:	b29b      	uxth	r3, r3
 8005330:	71fb      	strb	r3, [r7, #7]
	id2 = *(__IO uint16_t *) ADDR_SHIFT(0x0001);
 8005332:	4b13      	ldr	r3, [pc, #76]	; (8005380 <NOR_ReadID+0x70>)
 8005334:	881b      	ldrh	r3, [r3, #0]
 8005336:	b29b      	uxth	r3, r3
 8005338:	71bb      	strb	r3, [r7, #6]
	id3 = *(__IO uint16_t *) ADDR_SHIFT(0x000E);
 800533a:	4b12      	ldr	r3, [pc, #72]	; (8005384 <NOR_ReadID+0x74>)
 800533c:	881b      	ldrh	r3, [r3, #0]
 800533e:	b29b      	uxth	r3, r3
 8005340:	717b      	strb	r3, [r7, #5]
	id4 = *(__IO uint16_t *) ADDR_SHIFT(0x000F);
 8005342:	4b11      	ldr	r3, [pc, #68]	; (8005388 <NOR_ReadID+0x78>)
 8005344:	881b      	ldrh	r3, [r3, #0]
 8005346:	b29b      	uxth	r3, r3
 8005348:	713b      	strb	r3, [r7, #4]

	uiID = ((uint32_t)id1 << 24) | ((uint32_t)id2 << 16)  | ((uint32_t)id3 << 8) | id4;
 800534a:	79fb      	ldrb	r3, [r7, #7]
 800534c:	061a      	lsls	r2, r3, #24
 800534e:	79bb      	ldrb	r3, [r7, #6]
 8005350:	041b      	lsls	r3, r3, #16
 8005352:	431a      	orrs	r2, r3
 8005354:	797b      	ldrb	r3, [r7, #5]
 8005356:	021b      	lsls	r3, r3, #8
 8005358:	431a      	orrs	r2, r3
 800535a:	793b      	ldrb	r3, [r7, #4]
 800535c:	4313      	orrs	r3, r2
 800535e:	603b      	str	r3, [r7, #0]

	NOR_WRITE(NOR_FLASH_ADDR, 0x00F0 );
 8005360:	f04f 43c8 	mov.w	r3, #1677721600	; 0x64000000
 8005364:	22f0      	movs	r2, #240	; 0xf0
 8005366:	801a      	strh	r2, [r3, #0]

	return uiID;
 8005368:	683b      	ldr	r3, [r7, #0]
}
 800536a:	4618      	mov	r0, r3
 800536c:	370c      	adds	r7, #12
 800536e:	46bd      	mov	sp, r7
 8005370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005374:	4770      	bx	lr
 8005376:	bf00      	nop
 8005378:	64000aaa 	.word	0x64000aaa
 800537c:	64000554 	.word	0x64000554
 8005380:	64000002 	.word	0x64000002
 8005384:	6400001c 	.word	0x6400001c
 8005388:	6400001e 	.word	0x6400001e

0800538c <RA8875_WriteCmd>:
*********************************************************************************************************
*	Func name: RA8875_WriteCmd
*********************************************************************************************************
*/
void RA8875_WriteCmd(uint8_t _ucRegAddr)
{
 800538c:	b480      	push	{r7}
 800538e:	b083      	sub	sp, #12
 8005390:	af00      	add	r7, sp, #0
 8005392:	4603      	mov	r3, r0
 8005394:	71fb      	strb	r3, [r7, #7]
	SPI_ShiftByte(_ucRegAddr);
	RA8875_CS_1();
#endif

#ifdef RA_HARD_8080_16			/* 8080Ó²¼þ×ÜÏß */
	RA8875_REG = _ucRegAddr;	/* ÉèÖÃ¼Ä´æÆ÷µØÖ· */
 8005396:	4b05      	ldr	r3, [pc, #20]	; (80053ac <RA8875_WriteCmd+0x20>)
 8005398:	79fa      	ldrb	r2, [r7, #7]
 800539a:	b292      	uxth	r2, r2
 800539c:	801a      	strh	r2, [r3, #0]
#endif
}
 800539e:	bf00      	nop
 80053a0:	370c      	adds	r7, #12
 80053a2:	46bd      	mov	sp, r7
 80053a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a8:	4770      	bx	lr
 80053aa:	bf00      	nop
 80053ac:	6c080000 	.word	0x6c080000

080053b0 <RA8875_ReadData>:
*********************************************************************************************************
*	Func name: RA8875_ReadData
*********************************************************************************************************
*/
uint8_t RA8875_ReadData(void)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b083      	sub	sp, #12
 80053b4:	af00      	add	r7, sp, #0
#endif

#ifdef RA_HARD_8080_16			/* 8080Ó²¼þ×ÜÏß */
	uint8_t value;

	value = RA8875_RAM;		/* ¶ÁÈ¡¼Ä´æÆ÷Öµ */
 80053b6:	f04f 43d8 	mov.w	r3, #1811939328	; 0x6c000000
 80053ba:	881b      	ldrh	r3, [r3, #0]
 80053bc:	b29b      	uxth	r3, r3
 80053be:	71fb      	strb	r3, [r7, #7]

	return value;
 80053c0:	79fb      	ldrb	r3, [r7, #7]
#endif
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	370c      	adds	r7, #12
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr

080053ce <RA8875_WriteData>:
*********************************************************************************************************
*	Func name: RA8875_WriteData
*********************************************************************************************************
*/
void RA8875_WriteData(uint8_t _ucRegValue)
{
 80053ce:	b480      	push	{r7}
 80053d0:	b083      	sub	sp, #12
 80053d2:	af00      	add	r7, sp, #0
 80053d4:	4603      	mov	r3, r0
 80053d6:	71fb      	strb	r3, [r7, #7]
	SPI_ShiftByte(_ucRegValue);
	RA8875_CS_1();
#endif

#ifdef RA_HARD_8080_16			/* 8080Ó²¼þ×ÜÏß */
	RA8875_RAM = _ucRegValue;	/* ÉèÖÃ¼Ä´æÆ÷µØÖ· */
 80053d8:	f04f 43d8 	mov.w	r3, #1811939328	; 0x6c000000
 80053dc:	79fa      	ldrb	r2, [r7, #7]
 80053de:	b292      	uxth	r2, r2
 80053e0:	801a      	strh	r2, [r3, #0]
#endif
}
 80053e2:	bf00      	nop
 80053e4:	370c      	adds	r7, #12
 80053e6:	46bd      	mov	sp, r7
 80053e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ec:	4770      	bx	lr
	...

080053f0 <RA8875_ReadStatus>:
*********************************************************************************************************
*	Func name: RA8875_ReadStatus
*********************************************************************************************************
*/
uint8_t RA8875_ReadStatus(void)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b083      	sub	sp, #12
 80053f4:	af00      	add	r7, sp, #0
#endif

#ifdef RA_HARD_8080_16			/* 8080Ó²¼þ×ÜÏß */
	uint8_t value;

	value = RA8875_REG;
 80053f6:	4b05      	ldr	r3, [pc, #20]	; (800540c <RA8875_ReadStatus+0x1c>)
 80053f8:	881b      	ldrh	r3, [r3, #0]
 80053fa:	b29b      	uxth	r3, r3
 80053fc:	71fb      	strb	r3, [r7, #7]

	return value;
 80053fe:	79fb      	ldrb	r3, [r7, #7]
#endif
}
 8005400:	4618      	mov	r0, r3
 8005402:	370c      	adds	r7, #12
 8005404:	46bd      	mov	sp, r7
 8005406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540a:	4770      	bx	lr
 800540c:	6c080000 	.word	0x6c080000

08005410 <RA8875_Delaly1us>:
*********************************************************************************************************
*	Func name: RA8875_Delaly1us
*********************************************************************************************************
*/
void RA8875_Delaly1us(void)
{
 8005410:	b480      	push	{r7}
 8005412:	b083      	sub	sp, #12
 8005414:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < 10; i++);
 8005416:	2300      	movs	r3, #0
 8005418:	71fb      	strb	r3, [r7, #7]
 800541a:	e002      	b.n	8005422 <RA8875_Delaly1us+0x12>
 800541c:	79fb      	ldrb	r3, [r7, #7]
 800541e:	3301      	adds	r3, #1
 8005420:	71fb      	strb	r3, [r7, #7]
 8005422:	79fb      	ldrb	r3, [r7, #7]
 8005424:	2b09      	cmp	r3, #9
 8005426:	d9f9      	bls.n	800541c <RA8875_Delaly1us+0xc>
}
 8005428:	bf00      	nop
 800542a:	bf00      	nop
 800542c:	370c      	adds	r7, #12
 800542e:	46bd      	mov	sp, r7
 8005430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005434:	4770      	bx	lr

08005436 <RA8875_Delaly1ms>:
*********************************************************************************************************
*	Func name: RA8875_Delaly1ms
*********************************************************************************************************
*/
void RA8875_Delaly1ms(void)
{
 8005436:	b480      	push	{r7}
 8005438:	b083      	sub	sp, #12
 800543a:	af00      	add	r7, sp, #0
	uint16_t i;
	for (i = 0; i < 5000; i++);
 800543c:	2300      	movs	r3, #0
 800543e:	80fb      	strh	r3, [r7, #6]
 8005440:	e002      	b.n	8005448 <RA8875_Delaly1ms+0x12>
 8005442:	88fb      	ldrh	r3, [r7, #6]
 8005444:	3301      	adds	r3, #1
 8005446:	80fb      	strh	r3, [r7, #6]
 8005448:	88fb      	ldrh	r3, [r7, #6]
 800544a:	f241 3287 	movw	r2, #4999	; 0x1387
 800544e:	4293      	cmp	r3, r2
 8005450:	d9f7      	bls.n	8005442 <RA8875_Delaly1ms+0xc>
}
 8005452:	bf00      	nop
 8005454:	bf00      	nop
 8005456:	370c      	adds	r7, #12
 8005458:	46bd      	mov	sp, r7
 800545a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545e:	4770      	bx	lr

08005460 <bsp_InitSFlash>:
*********************************************************************************************************
* Func name: bsp_InitSpiFlash
*********************************************************************************************************
*/
void bsp_InitSFlash(void)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b088      	sub	sp, #32
 8005464:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005466:	f107 030c 	add.w	r3, r7, #12
 800546a:	2200      	movs	r2, #0
 800546c:	601a      	str	r2, [r3, #0]
 800546e:	605a      	str	r2, [r3, #4]
 8005470:	609a      	str	r2, [r3, #8]
 8005472:	60da      	str	r2, [r3, #12]
 8005474:	611a      	str	r2, [r3, #16]

	__HAL_RCC_GPIOF_CLK_ENABLE();
 8005476:	2300      	movs	r3, #0
 8005478:	60bb      	str	r3, [r7, #8]
 800547a:	4b52      	ldr	r3, [pc, #328]	; (80055c4 <bsp_InitSFlash+0x164>)
 800547c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800547e:	4a51      	ldr	r2, [pc, #324]	; (80055c4 <bsp_InitSFlash+0x164>)
 8005480:	f043 0320 	orr.w	r3, r3, #32
 8005484:	6313      	str	r3, [r2, #48]	; 0x30
 8005486:	4b4f      	ldr	r3, [pc, #316]	; (80055c4 <bsp_InitSFlash+0x164>)
 8005488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800548a:	f003 0320 	and.w	r3, r3, #32
 800548e:	60bb      	str	r3, [r7, #8]
 8005490:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8005492:	2300      	movs	r3, #0
 8005494:	607b      	str	r3, [r7, #4]
 8005496:	4b4b      	ldr	r3, [pc, #300]	; (80055c4 <bsp_InitSFlash+0x164>)
 8005498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800549a:	4a4a      	ldr	r2, [pc, #296]	; (80055c4 <bsp_InitSFlash+0x164>)
 800549c:	f043 0302 	orr.w	r3, r3, #2
 80054a0:	6313      	str	r3, [r2, #48]	; 0x30
 80054a2:	4b48      	ldr	r3, [pc, #288]	; (80055c4 <bsp_InitSFlash+0x164>)
 80054a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054a6:	f003 0302 	and.w	r3, r3, #2
 80054aa:	607b      	str	r3, [r7, #4]
 80054ac:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_SPI1_CLK_ENABLE();
 80054ae:	2300      	movs	r3, #0
 80054b0:	603b      	str	r3, [r7, #0]
 80054b2:	4b44      	ldr	r3, [pc, #272]	; (80055c4 <bsp_InitSFlash+0x164>)
 80054b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054b6:	4a43      	ldr	r2, [pc, #268]	; (80055c4 <bsp_InitSFlash+0x164>)
 80054b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80054bc:	6453      	str	r3, [r2, #68]	; 0x44
 80054be:	4b41      	ldr	r3, [pc, #260]	; (80055c4 <bsp_InitSFlash+0x164>)
 80054c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80054c6:	603b      	str	r3, [r7, #0]
 80054c8:	683b      	ldr	r3, [r7, #0]

	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054ca:	2302      	movs	r3, #2
 80054cc:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80054ce:	2302      	movs	r3, #2
 80054d0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull  = GPIO_PULLDOWN;
 80054d2:	2302      	movs	r3, #2
 80054d4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;      // SPI1(GPIO_AF5_SPI1) , SPI3 (GPIO_AF6_SPI3)
 80054d6:	2305      	movs	r3, #5
 80054d8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5;
 80054da:	2338      	movs	r3, #56	; 0x38
 80054dc:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOB,&GPIO_InitStruct);
 80054de:	f107 030c 	add.w	r3, r7, #12
 80054e2:	4619      	mov	r1, r3
 80054e4:	4838      	ldr	r0, [pc, #224]	; (80055c8 <bsp_InitSFlash+0x168>)
 80054e6:	f002 fa49 	bl	800797c <HAL_GPIO_Init>

	SF_CS_HIGH();
 80054ea:	2201      	movs	r2, #1
 80054ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80054f0:	4836      	ldr	r0, [pc, #216]	; (80055cc <bsp_InitSFlash+0x16c>)
 80054f2:	f002 fbf7 	bl	8007ce4 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = GPIO_PIN_8;
 80054f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80054fa:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80054fc:	2301      	movs	r3, #1
 80054fe:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005500:	2300      	movs	r3, #0
 8005502:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005504:	2302      	movs	r3, #2
 8005506:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005508:	f107 030c 	add.w	r3, r7, #12
 800550c:	4619      	mov	r1, r3
 800550e:	482f      	ldr	r0, [pc, #188]	; (80055cc <bsp_InitSFlash+0x16c>)
 8005510:	f002 fa34 	bl	800797c <HAL_GPIO_Init>

	hspi1.Instance = SPI_FLASH;
 8005514:	4b2e      	ldr	r3, [pc, #184]	; (80055d0 <bsp_InitSFlash+0x170>)
 8005516:	4a2f      	ldr	r2, [pc, #188]	; (80055d4 <bsp_InitSFlash+0x174>)
 8005518:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 800551a:	4b2d      	ldr	r3, [pc, #180]	; (80055d0 <bsp_InitSFlash+0x170>)
 800551c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005520:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8005522:	4b2b      	ldr	r3, [pc, #172]	; (80055d0 <bsp_InitSFlash+0x170>)
 8005524:	2200      	movs	r2, #0
 8005526:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8005528:	4b29      	ldr	r3, [pc, #164]	; (80055d0 <bsp_InitSFlash+0x170>)
 800552a:	2200      	movs	r2, #0
 800552c:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800552e:	4b28      	ldr	r3, [pc, #160]	; (80055d0 <bsp_InitSFlash+0x170>)
 8005530:	2202      	movs	r2, #2
 8005532:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8005534:	4b26      	ldr	r3, [pc, #152]	; (80055d0 <bsp_InitSFlash+0x170>)
 8005536:	2201      	movs	r2, #1
 8005538:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 800553a:	4b25      	ldr	r3, [pc, #148]	; (80055d0 <bsp_InitSFlash+0x170>)
 800553c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005540:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8005542:	4b23      	ldr	r3, [pc, #140]	; (80055d0 <bsp_InitSFlash+0x170>)
 8005544:	2208      	movs	r2, #8
 8005546:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005548:	4b21      	ldr	r3, [pc, #132]	; (80055d0 <bsp_InitSFlash+0x170>)
 800554a:	2200      	movs	r2, #0
 800554c:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800554e:	4b20      	ldr	r3, [pc, #128]	; (80055d0 <bsp_InitSFlash+0x170>)
 8005550:	2200      	movs	r2, #0
 8005552:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005554:	4b1e      	ldr	r3, [pc, #120]	; (80055d0 <bsp_InitSFlash+0x170>)
 8005556:	2200      	movs	r2, #0
 8005558:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 800555a:	4b1d      	ldr	r3, [pc, #116]	; (80055d0 <bsp_InitSFlash+0x170>)
 800555c:	2207      	movs	r2, #7
 800555e:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8005560:	481b      	ldr	r0, [pc, #108]	; (80055d0 <bsp_InitSFlash+0x170>)
 8005562:	f7fc fc97 	bl	8001e94 <HAL_SPI_Init>
 8005566:	4603      	mov	r3, r0
 8005568:	2b00      	cmp	r3, #0
 800556a:	d001      	beq.n	8005570 <bsp_InitSFlash+0x110>
	{
		Error_Handler();
 800556c:	f7fc f9e6 	bl	800193c <Error_Handler>
	}

	__HAL_SPI_DISABLE(&hspi1);  // SPI 비활성화
 8005570:	4b17      	ldr	r3, [pc, #92]	; (80055d0 <bsp_InitSFlash+0x170>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	681a      	ldr	r2, [r3, #0]
 8005576:	4b16      	ldr	r3, [pc, #88]	; (80055d0 <bsp_InitSFlash+0x170>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800557e:	601a      	str	r2, [r3, #0]
	__HAL_SPI_ENABLE(&hspi1);   // SPI 활성화
 8005580:	4b13      	ldr	r3, [pc, #76]	; (80055d0 <bsp_InitSFlash+0x170>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	681a      	ldr	r2, [r3, #0]
 8005586:	4b12      	ldr	r3, [pc, #72]	; (80055d0 <bsp_InitSFlash+0x170>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800558e:	601a      	str	r2, [r3, #0]

	sf_ReadInfo();
 8005590:	f000 f822 	bl	80055d8 <sf_ReadInfo>

	SF_CS_LOW();
 8005594:	2200      	movs	r2, #0
 8005596:	f44f 7180 	mov.w	r1, #256	; 0x100
 800559a:	480c      	ldr	r0, [pc, #48]	; (80055cc <bsp_InitSFlash+0x16c>)
 800559c:	f002 fba2 	bl	8007ce4 <HAL_GPIO_WritePin>
	sf_SendByte(CMD_DISWR);
 80055a0:	2004      	movs	r0, #4
 80055a2:	f000 f8bb 	bl	800571c <sf_SendByte>
	SF_CS_HIGH();
 80055a6:	2201      	movs	r2, #1
 80055a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80055ac:	4807      	ldr	r0, [pc, #28]	; (80055cc <bsp_InitSFlash+0x16c>)
 80055ae:	f002 fb99 	bl	8007ce4 <HAL_GPIO_WritePin>
	sf_WaitForWriteEnd();
 80055b2:	f000 f8cd 	bl	8005750 <sf_WaitForWriteEnd>
	sf_WriteStatus(0);
 80055b6:	2000      	movs	r0, #0
 80055b8:	f000 f8e8 	bl	800578c <sf_WriteStatus>
}
 80055bc:	bf00      	nop
 80055be:	3720      	adds	r7, #32
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}
 80055c4:	40023800 	.word	0x40023800
 80055c8:	40020400 	.word	0x40020400
 80055cc:	40021400 	.word	0x40021400
 80055d0:	20000afc 	.word	0x20000afc
 80055d4:	40013000 	.word	0x40013000

080055d8 <sf_ReadInfo>:

void sf_ReadInfo(void)
{
 80055d8:	b598      	push	{r3, r4, r7, lr}
 80055da:	af00      	add	r7, sp, #0
	g_tSF.ChipID = sf_ReadID();
 80055dc:	f000 f86e 	bl	80056bc <sf_ReadID>
 80055e0:	4603      	mov	r3, r0
 80055e2:	4a2d      	ldr	r2, [pc, #180]	; (8005698 <sf_ReadInfo+0xc0>)
 80055e4:	6013      	str	r3, [r2, #0]
	//char buffer[20];
	//sprintf(buffer, "CHIPID: 0x%08lX\r\n", g_tSF.ChipID);
	//UART1_Transmit_String(buffer);
	//HAL_Delay(1000);
	switch (g_tSF.ChipID)
 80055e6:	4b2c      	ldr	r3, [pc, #176]	; (8005698 <sf_ReadInfo+0xc0>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a2c      	ldr	r2, [pc, #176]	; (800569c <sf_ReadInfo+0xc4>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d02e      	beq.n	800564e <sf_ReadInfo+0x76>
 80055f0:	4a2a      	ldr	r2, [pc, #168]	; (800569c <sf_ReadInfo+0xc4>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d83c      	bhi.n	8005670 <sf_ReadInfo+0x98>
 80055f6:	4a2a      	ldr	r2, [pc, #168]	; (80056a0 <sf_ReadInfo+0xc8>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d003      	beq.n	8005604 <sf_ReadInfo+0x2c>
 80055fc:	4a29      	ldr	r2, [pc, #164]	; (80056a4 <sf_ReadInfo+0xcc>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d011      	beq.n	8005626 <sf_ReadInfo+0x4e>
 8005602:	e035      	b.n	8005670 <sf_ReadInfo+0x98>
	{
		case SST25VF016B_ID:
			strcpy(g_tSF.ChipName, "SST25VF016B");
 8005604:	4b28      	ldr	r3, [pc, #160]	; (80056a8 <sf_ReadInfo+0xd0>)
 8005606:	4a29      	ldr	r2, [pc, #164]	; (80056ac <sf_ReadInfo+0xd4>)
 8005608:	ca07      	ldmia	r2, {r0, r1, r2}
 800560a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			UART1_Transmit_String(g_tSF.ChipName);
 800560e:	4826      	ldr	r0, [pc, #152]	; (80056a8 <sf_ReadInfo+0xd0>)
 8005610:	f001 ffc8 	bl	80075a4 <UART1_Transmit_String>
			g_tSF.TotalSize = 2 * 1024 * 1024;	/* ×ÜÈÝÁ¿ = 2M */
 8005614:	4b20      	ldr	r3, [pc, #128]	; (8005698 <sf_ReadInfo+0xc0>)
 8005616:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800561a:	615a      	str	r2, [r3, #20]
			g_tSF.PageSize = 4 * 1024;			/* Ò³Ãæ´óÐ¡ = 4K */
 800561c:	4b1e      	ldr	r3, [pc, #120]	; (8005698 <sf_ReadInfo+0xc0>)
 800561e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005622:	831a      	strh	r2, [r3, #24]
		break;
 8005624:	e036      	b.n	8005694 <sf_ReadInfo+0xbc>
		case MX25L1606E_ID:
			strcpy(g_tSF.ChipName, "MX25L1606E");
 8005626:	4b20      	ldr	r3, [pc, #128]	; (80056a8 <sf_ReadInfo+0xd0>)
 8005628:	4a21      	ldr	r2, [pc, #132]	; (80056b0 <sf_ReadInfo+0xd8>)
 800562a:	ca07      	ldmia	r2, {r0, r1, r2}
 800562c:	c303      	stmia	r3!, {r0, r1}
 800562e:	801a      	strh	r2, [r3, #0]
 8005630:	3302      	adds	r3, #2
 8005632:	0c12      	lsrs	r2, r2, #16
 8005634:	701a      	strb	r2, [r3, #0]
			UART1_Transmit_String(g_tSF.ChipName);
 8005636:	481c      	ldr	r0, [pc, #112]	; (80056a8 <sf_ReadInfo+0xd0>)
 8005638:	f001 ffb4 	bl	80075a4 <UART1_Transmit_String>
			g_tSF.TotalSize = 2 * 1024 * 1024;	/* ×ÜÈÝÁ¿ = 2M */
 800563c:	4b16      	ldr	r3, [pc, #88]	; (8005698 <sf_ReadInfo+0xc0>)
 800563e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005642:	615a      	str	r2, [r3, #20]
			g_tSF.PageSize = 4 * 1024;			/* Ò³Ãæ´óÐ¡ = 4K */
 8005644:	4b14      	ldr	r3, [pc, #80]	; (8005698 <sf_ReadInfo+0xc0>)
 8005646:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800564a:	831a      	strh	r2, [r3, #24]
		break;
 800564c:	e022      	b.n	8005694 <sf_ReadInfo+0xbc>
		case W25Q64BV_ID:
			strcpy(g_tSF.ChipName, "W25Q64BV");
 800564e:	4b16      	ldr	r3, [pc, #88]	; (80056a8 <sf_ReadInfo+0xd0>)
 8005650:	4a18      	ldr	r2, [pc, #96]	; (80056b4 <sf_ReadInfo+0xdc>)
 8005652:	ca07      	ldmia	r2, {r0, r1, r2}
 8005654:	c303      	stmia	r3!, {r0, r1}
 8005656:	701a      	strb	r2, [r3, #0]
			UART1_Transmit_String(g_tSF.ChipName);
 8005658:	4813      	ldr	r0, [pc, #76]	; (80056a8 <sf_ReadInfo+0xd0>)
 800565a:	f001 ffa3 	bl	80075a4 <UART1_Transmit_String>
			g_tSF.TotalSize = 8 * 1024 * 1024;	/* ×ÜÈÝÁ¿ = 8M */
 800565e:	4b0e      	ldr	r3, [pc, #56]	; (8005698 <sf_ReadInfo+0xc0>)
 8005660:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005664:	615a      	str	r2, [r3, #20]
			g_tSF.PageSize = 4 * 1024;			/* Ò³Ãæ´óÐ¡ = 4K */
 8005666:	4b0c      	ldr	r3, [pc, #48]	; (8005698 <sf_ReadInfo+0xc0>)
 8005668:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800566c:	831a      	strh	r2, [r3, #24]
		break;
 800566e:	e011      	b.n	8005694 <sf_ReadInfo+0xbc>
		default:
			strcpy(g_tSF.ChipName, "Unknow Flash");
 8005670:	4a0d      	ldr	r2, [pc, #52]	; (80056a8 <sf_ReadInfo+0xd0>)
 8005672:	4b11      	ldr	r3, [pc, #68]	; (80056b8 <sf_ReadInfo+0xe0>)
 8005674:	4614      	mov	r4, r2
 8005676:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005678:	c407      	stmia	r4!, {r0, r1, r2}
 800567a:	7023      	strb	r3, [r4, #0]
			UART1_Transmit_String(g_tSF.ChipName);
 800567c:	480a      	ldr	r0, [pc, #40]	; (80056a8 <sf_ReadInfo+0xd0>)
 800567e:	f001 ff91 	bl	80075a4 <UART1_Transmit_String>
			g_tSF.TotalSize = 2 * 1024 * 1024;
 8005682:	4b05      	ldr	r3, [pc, #20]	; (8005698 <sf_ReadInfo+0xc0>)
 8005684:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005688:	615a      	str	r2, [r3, #20]
			g_tSF.PageSize = 4 * 1024;
 800568a:	4b03      	ldr	r3, [pc, #12]	; (8005698 <sf_ReadInfo+0xc0>)
 800568c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005690:	831a      	strh	r2, [r3, #24]
		break;
 8005692:	bf00      	nop
	}
}
 8005694:	bf00      	nop
 8005696:	bd98      	pop	{r3, r4, r7, pc}
 8005698:	20000b54 	.word	0x20000b54
 800569c:	00ef4017 	.word	0x00ef4017
 80056a0:	00bf2541 	.word	0x00bf2541
 80056a4:	00c22015 	.word	0x00c22015
 80056a8:	20000b58 	.word	0x20000b58
 80056ac:	0800b6dc 	.word	0x0800b6dc
 80056b0:	0800b6e8 	.word	0x0800b6e8
 80056b4:	0800b6f4 	.word	0x0800b6f4
 80056b8:	0800b700 	.word	0x0800b700

080056bc <sf_ReadID>:

uint32_t sf_ReadID(void)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b082      	sub	sp, #8
 80056c0:	af00      	add	r7, sp, #0
	uint32_t uiID;
	uint8_t id1, id2, id3;

	SF_CS_LOW();
 80056c2:	2200      	movs	r2, #0
 80056c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80056c8:	4813      	ldr	r0, [pc, #76]	; (8005718 <sf_ReadID+0x5c>)
 80056ca:	f002 fb0b 	bl	8007ce4 <HAL_GPIO_WritePin>
	sf_SendByte(CMD_RDID);
 80056ce:	209f      	movs	r0, #159	; 0x9f
 80056d0:	f000 f824 	bl	800571c <sf_SendByte>
	id1 = sf_SendByte(DUMMY_BYTE);					/* ¶ÁIDµÄµÚ1¸ö×Ö½Ú */
 80056d4:	20a5      	movs	r0, #165	; 0xa5
 80056d6:	f000 f821 	bl	800571c <sf_SendByte>
 80056da:	4603      	mov	r3, r0
 80056dc:	71fb      	strb	r3, [r7, #7]
	id2 = sf_SendByte(DUMMY_BYTE);					/* ¶ÁIDµÄµÚ2¸ö×Ö½Ú */
 80056de:	20a5      	movs	r0, #165	; 0xa5
 80056e0:	f000 f81c 	bl	800571c <sf_SendByte>
 80056e4:	4603      	mov	r3, r0
 80056e6:	71bb      	strb	r3, [r7, #6]
	id3 = sf_SendByte(DUMMY_BYTE);					/* ¶ÁIDµÄµÚ2¸ö×Ö½Ú */
 80056e8:	20a5      	movs	r0, #165	; 0xa5
 80056ea:	f000 f817 	bl	800571c <sf_SendByte>
 80056ee:	4603      	mov	r3, r0
 80056f0:	717b      	strb	r3, [r7, #5]
	SF_CS_HIGH();
 80056f2:	2201      	movs	r2, #1
 80056f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80056f8:	4807      	ldr	r0, [pc, #28]	; (8005718 <sf_ReadID+0x5c>)
 80056fa:	f002 faf3 	bl	8007ce4 <HAL_GPIO_WritePin>

	uiID = ((uint32_t)id1 << 16) | ((uint32_t)id2 << 8) | id3;
 80056fe:	79fb      	ldrb	r3, [r7, #7]
 8005700:	041a      	lsls	r2, r3, #16
 8005702:	79bb      	ldrb	r3, [r7, #6]
 8005704:	021b      	lsls	r3, r3, #8
 8005706:	431a      	orrs	r2, r3
 8005708:	797b      	ldrb	r3, [r7, #5]
 800570a:	4313      	orrs	r3, r2
 800570c:	603b      	str	r3, [r7, #0]

	return uiID;
 800570e:	683b      	ldr	r3, [r7, #0]
}
 8005710:	4618      	mov	r0, r3
 8005712:	3708      	adds	r7, #8
 8005714:	46bd      	mov	sp, r7
 8005716:	bd80      	pop	{r7, pc}
 8005718:	40021400 	.word	0x40021400

0800571c <sf_SendByte>:
	return rxData;
}
#endif

static uint8_t sf_SendByte(uint8_t _ucValue)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b086      	sub	sp, #24
 8005720:	af02      	add	r7, sp, #8
 8005722:	4603      	mov	r3, r0
 8005724:	71fb      	strb	r3, [r7, #7]
	uint8_t rxData = 0;
 8005726:	2300      	movs	r3, #0
 8005728:	73bb      	strb	r3, [r7, #14]

	HAL_StatusTypeDef status = HAL_SPI_TransmitReceive(&hspi1, &_ucValue, &rxData, 1, HAL_MAX_DELAY);
 800572a:	f107 020e 	add.w	r2, r7, #14
 800572e:	1df9      	adds	r1, r7, #7
 8005730:	f04f 33ff 	mov.w	r3, #4294967295
 8005734:	9300      	str	r3, [sp, #0]
 8005736:	2301      	movs	r3, #1
 8005738:	4804      	ldr	r0, [pc, #16]	; (800574c <sf_SendByte+0x30>)
 800573a:	f7fc fc3e 	bl	8001fba <HAL_SPI_TransmitReceive>
 800573e:	4603      	mov	r3, r0
 8005740:	73fb      	strb	r3, [r7, #15]

	if (status != HAL_OK){
		// 에러 처리
	    // 예: Error_Handler();
	}
	return rxData;
 8005742:	7bbb      	ldrb	r3, [r7, #14]
}
 8005744:	4618      	mov	r0, r3
 8005746:	3710      	adds	r7, #16
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}
 800574c:	20000afc 	.word	0x20000afc

08005750 <sf_WaitForWriteEnd>:
*********************************************************************************************************
*	Func name: sf_WaitForWriteEnd
*********************************************************************************************************
*/
static void sf_WaitForWriteEnd(void)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	af00      	add	r7, sp, #0
	SF_CS_LOW();
 8005754:	2200      	movs	r2, #0
 8005756:	f44f 7180 	mov.w	r1, #256	; 0x100
 800575a:	480b      	ldr	r0, [pc, #44]	; (8005788 <sf_WaitForWriteEnd+0x38>)
 800575c:	f002 fac2 	bl	8007ce4 <HAL_GPIO_WritePin>
	sf_SendByte(CMD_RDSR);
 8005760:	2005      	movs	r0, #5
 8005762:	f7ff ffdb 	bl	800571c <sf_SendByte>
	while((sf_SendByte(DUMMY_BYTE) & WIP_FLAG) == SET);
 8005766:	bf00      	nop
 8005768:	20a5      	movs	r0, #165	; 0xa5
 800576a:	f7ff ffd7 	bl	800571c <sf_SendByte>
 800576e:	4603      	mov	r3, r0
 8005770:	f003 0301 	and.w	r3, r3, #1
 8005774:	2b01      	cmp	r3, #1
 8005776:	d0f7      	beq.n	8005768 <sf_WaitForWriteEnd+0x18>
	SF_CS_HIGH();
 8005778:	2201      	movs	r2, #1
 800577a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800577e:	4802      	ldr	r0, [pc, #8]	; (8005788 <sf_WaitForWriteEnd+0x38>)
 8005780:	f002 fab0 	bl	8007ce4 <HAL_GPIO_WritePin>
}
 8005784:	bf00      	nop
 8005786:	bd80      	pop	{r7, pc}
 8005788:	40021400 	.word	0x40021400

0800578c <sf_WriteStatus>:
*********************************************************************************************************
* Func name: sf_WriteStatus
*********************************************************************************************************
*/
static void sf_WriteStatus(uint8_t _ucValue)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b082      	sub	sp, #8
 8005790:	af00      	add	r7, sp, #0
 8005792:	4603      	mov	r3, r0
 8005794:	71fb      	strb	r3, [r7, #7]
	if (g_tSF.ChipID == SST25VF016B_ID)
 8005796:	4b1f      	ldr	r3, [pc, #124]	; (8005814 <sf_WriteStatus+0x88>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a1f      	ldr	r2, [pc, #124]	; (8005818 <sf_WriteStatus+0x8c>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d122      	bne.n	80057e6 <sf_WriteStatus+0x5a>
	{
		SF_CS_LOW();									/* Ê¹ÄÜÆ¬Ñ¡ */
 80057a0:	2200      	movs	r2, #0
 80057a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80057a6:	481d      	ldr	r0, [pc, #116]	; (800581c <sf_WriteStatus+0x90>)
 80057a8:	f002 fa9c 	bl	8007ce4 <HAL_GPIO_WritePin>
		sf_SendByte(CMD_EWRSR);							/* ·¢ËÍÃüÁî£¬ ÔÊÐíÐ´×´Ì¬¼Ä´æÆ÷ */
 80057ac:	2050      	movs	r0, #80	; 0x50
 80057ae:	f7ff ffb5 	bl	800571c <sf_SendByte>
		SF_CS_HIGH();									/* ½ûÄÜÆ¬Ñ¡ */
 80057b2:	2201      	movs	r2, #1
 80057b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80057b8:	4818      	ldr	r0, [pc, #96]	; (800581c <sf_WriteStatus+0x90>)
 80057ba:	f002 fa93 	bl	8007ce4 <HAL_GPIO_WritePin>

		/* µÚ2²½£ºÔÙÐ´×´Ì¬¼Ä´æÆ÷ */
		SF_CS_LOW();									/* Ê¹ÄÜÆ¬Ñ¡ */
 80057be:	2200      	movs	r2, #0
 80057c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80057c4:	4815      	ldr	r0, [pc, #84]	; (800581c <sf_WriteStatus+0x90>)
 80057c6:	f002 fa8d 	bl	8007ce4 <HAL_GPIO_WritePin>
		sf_SendByte(CMD_WRSR);							/* ·¢ËÍÃüÁî£¬ Ð´×´Ì¬¼Ä´æÆ÷ */
 80057ca:	2001      	movs	r0, #1
 80057cc:	f7ff ffa6 	bl	800571c <sf_SendByte>
		sf_SendByte(_ucValue);							/* ·¢ËÍÊý¾Ý£º×´Ì¬¼Ä´æÆ÷µÄÖµ */
 80057d0:	79fb      	ldrb	r3, [r7, #7]
 80057d2:	4618      	mov	r0, r3
 80057d4:	f7ff ffa2 	bl	800571c <sf_SendByte>
		SF_CS_HIGH();
 80057d8:	2201      	movs	r2, #1
 80057da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80057de:	480f      	ldr	r0, [pc, #60]	; (800581c <sf_WriteStatus+0x90>)
 80057e0:	f002 fa80 	bl	8007ce4 <HAL_GPIO_WritePin>
		SF_CS_LOW();									/* Ê¹ÄÜÆ¬Ñ¡ */
		sf_SendByte(CMD_WRSR);							/* ·¢ËÍÃüÁî£¬ Ð´×´Ì¬¼Ä´æÆ÷ */
		sf_SendByte(_ucValue);							/* ·¢ËÍÊý¾Ý£º×´Ì¬¼Ä´æÆ÷µÄÖµ */
		SF_CS_HIGH();									/* ½ûÄÜÆ¬Ñ¡ */
	}
}
 80057e4:	e012      	b.n	800580c <sf_WriteStatus+0x80>
		SF_CS_LOW();									/* Ê¹ÄÜÆ¬Ñ¡ */
 80057e6:	2200      	movs	r2, #0
 80057e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80057ec:	480b      	ldr	r0, [pc, #44]	; (800581c <sf_WriteStatus+0x90>)
 80057ee:	f002 fa79 	bl	8007ce4 <HAL_GPIO_WritePin>
		sf_SendByte(CMD_WRSR);							/* ·¢ËÍÃüÁî£¬ Ð´×´Ì¬¼Ä´æÆ÷ */
 80057f2:	2001      	movs	r0, #1
 80057f4:	f7ff ff92 	bl	800571c <sf_SendByte>
		sf_SendByte(_ucValue);							/* ·¢ËÍÊý¾Ý£º×´Ì¬¼Ä´æÆ÷µÄÖµ */
 80057f8:	79fb      	ldrb	r3, [r7, #7]
 80057fa:	4618      	mov	r0, r3
 80057fc:	f7ff ff8e 	bl	800571c <sf_SendByte>
		SF_CS_HIGH();									/* ½ûÄÜÆ¬Ñ¡ */
 8005800:	2201      	movs	r2, #1
 8005802:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005806:	4805      	ldr	r0, [pc, #20]	; (800581c <sf_WriteStatus+0x90>)
 8005808:	f002 fa6c 	bl	8007ce4 <HAL_GPIO_WritePin>
}
 800580c:	bf00      	nop
 800580e:	3708      	adds	r7, #8
 8005810:	46bd      	mov	sp, r7
 8005812:	bd80      	pop	{r7, pc}
 8005814:	20000b54 	.word	0x20000b54
 8005818:	00bf2541 	.word	0x00bf2541
 800581c:	40021400 	.word	0x40021400

08005820 <LCD_InitHard>:
*********************************************************************************************************
*	Func name: LCD_InitHard
*********************************************************************************************************
*/
void LCD_InitHard(void)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b082      	sub	sp, #8
 8005824:	af00      	add	r7, sp, #0
	uint16_t id;

	LCD_CtrlLinesConfig();
 8005826:	f000 f839 	bl	800589c <LCD_CtrlLinesConfig>

	LCD_FSMCConfig();
 800582a:	f000 f8af 	bl	800598c <LCD_FSMCConfig>

	HAL_Delay(20);
 800582e:	2014      	movs	r0, #20
 8005830:	f001 ff6e 	bl	8007710 <HAL_Delay>

	id = SPFD5420_ReadID();
 8005834:	f7fe fa66 	bl	8003d04 <SPFD5420_ReadID>
 8005838:	4603      	mov	r3, r0
 800583a:	80fb      	strh	r3, [r7, #6]
	if ((id == 0x5420) || (id ==  0xB509) || (id == 0x5520))
 800583c:	88fb      	ldrh	r3, [r7, #6]
 800583e:	f245 4220 	movw	r2, #21536	; 0x5420
 8005842:	4293      	cmp	r3, r2
 8005844:	d01f      	beq.n	8005886 <LCD_InitHard+0x66>
 8005846:	88fb      	ldrh	r3, [r7, #6]
 8005848:	f24b 5209 	movw	r2, #46345	; 0xb509
 800584c:	4293      	cmp	r3, r2
 800584e:	d01a      	beq.n	8005886 <LCD_InitHard+0x66>
 8005850:	88fb      	ldrh	r3, [r7, #6]
 8005852:	f245 5220 	movw	r2, #21792	; 0x5520
 8005856:	4293      	cmp	r3, r2
 8005858:	d015      	beq.n	8005886 <LCD_InitHard+0x66>
	{
		//SPFD5420_InitHard();
	}
	else
	{
		if (RA8875_ReadID() == 0x75)
 800585a:	f7fd fcf4 	bl	8003246 <RA8875_ReadID>
 800585e:	4603      	mov	r3, r0
 8005860:	2b75      	cmp	r3, #117	; 0x75
 8005862:	d105      	bne.n	8005870 <LCD_InitHard+0x50>
		{
			//UART1_Transmit_String("LCD Controller is RA8875 or compatible\r\n");
			g_ChipID = IC_8875;
 8005864:	4b0a      	ldr	r3, [pc, #40]	; (8005890 <LCD_InitHard+0x70>)
 8005866:	2275      	movs	r2, #117	; 0x75
 8005868:	801a      	strh	r2, [r3, #0]
			RA8875_InitHard();
 800586a:	f7fd fd21 	bl	80032b0 <RA8875_InitHard>
			g_LcdWidth = LCD_30_WIDTH;
		}
	}
	//LCD_ClrScr(CL_BLUE);
	//LCD_SetBackLight(BRIGHT_DEFAULT);
}
 800586e:	e00a      	b.n	8005886 <LCD_InitHard+0x66>
			g_ChipID = IC_4001;
 8005870:	4b07      	ldr	r3, [pc, #28]	; (8005890 <LCD_InitHard+0x70>)
 8005872:	f244 0201 	movw	r2, #16385	; 0x4001
 8005876:	801a      	strh	r2, [r3, #0]
			g_LcdHeight = LCD_30_HEIGHT;
 8005878:	4b06      	ldr	r3, [pc, #24]	; (8005894 <LCD_InitHard+0x74>)
 800587a:	22f0      	movs	r2, #240	; 0xf0
 800587c:	801a      	strh	r2, [r3, #0]
			g_LcdWidth = LCD_30_WIDTH;
 800587e:	4b06      	ldr	r3, [pc, #24]	; (8005898 <LCD_InitHard+0x78>)
 8005880:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005884:	801a      	strh	r2, [r3, #0]
}
 8005886:	bf00      	nop
 8005888:	3708      	adds	r7, #8
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}
 800588e:	bf00      	nop
 8005890:	20000008 	.word	0x20000008
 8005894:	2000000a 	.word	0x2000000a
 8005898:	2000000c 	.word	0x2000000c

0800589c <LCD_CtrlLinesConfig>:


static void LCD_CtrlLinesConfig(void)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b08a      	sub	sp, #40	; 0x28
 80058a0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	__HAL_RCC_FSMC_CLK_ENABLE();
 80058a2:	2300      	movs	r3, #0
 80058a4:	613b      	str	r3, [r7, #16]
 80058a6:	4b35      	ldr	r3, [pc, #212]	; (800597c <LCD_CtrlLinesConfig+0xe0>)
 80058a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058aa:	4a34      	ldr	r2, [pc, #208]	; (800597c <LCD_CtrlLinesConfig+0xe0>)
 80058ac:	f043 0301 	orr.w	r3, r3, #1
 80058b0:	6393      	str	r3, [r2, #56]	; 0x38
 80058b2:	4b32      	ldr	r3, [pc, #200]	; (800597c <LCD_CtrlLinesConfig+0xe0>)
 80058b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058b6:	f003 0301 	and.w	r3, r3, #1
 80058ba:	613b      	str	r3, [r7, #16]
 80058bc:	693b      	ldr	r3, [r7, #16]

	__HAL_RCC_GPIOD_CLK_ENABLE();
 80058be:	2300      	movs	r3, #0
 80058c0:	60fb      	str	r3, [r7, #12]
 80058c2:	4b2e      	ldr	r3, [pc, #184]	; (800597c <LCD_CtrlLinesConfig+0xe0>)
 80058c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058c6:	4a2d      	ldr	r2, [pc, #180]	; (800597c <LCD_CtrlLinesConfig+0xe0>)
 80058c8:	f043 0308 	orr.w	r3, r3, #8
 80058cc:	6313      	str	r3, [r2, #48]	; 0x30
 80058ce:	4b2b      	ldr	r3, [pc, #172]	; (800597c <LCD_CtrlLinesConfig+0xe0>)
 80058d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058d2:	f003 0308 	and.w	r3, r3, #8
 80058d6:	60fb      	str	r3, [r7, #12]
 80058d8:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80058da:	2300      	movs	r3, #0
 80058dc:	60bb      	str	r3, [r7, #8]
 80058de:	4b27      	ldr	r3, [pc, #156]	; (800597c <LCD_CtrlLinesConfig+0xe0>)
 80058e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058e2:	4a26      	ldr	r2, [pc, #152]	; (800597c <LCD_CtrlLinesConfig+0xe0>)
 80058e4:	f043 0310 	orr.w	r3, r3, #16
 80058e8:	6313      	str	r3, [r2, #48]	; 0x30
 80058ea:	4b24      	ldr	r3, [pc, #144]	; (800597c <LCD_CtrlLinesConfig+0xe0>)
 80058ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ee:	f003 0310 	and.w	r3, r3, #16
 80058f2:	60bb      	str	r3, [r7, #8]
 80058f4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 80058f6:	2300      	movs	r3, #0
 80058f8:	607b      	str	r3, [r7, #4]
 80058fa:	4b20      	ldr	r3, [pc, #128]	; (800597c <LCD_CtrlLinesConfig+0xe0>)
 80058fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058fe:	4a1f      	ldr	r2, [pc, #124]	; (800597c <LCD_CtrlLinesConfig+0xe0>)
 8005900:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005904:	6313      	str	r3, [r2, #48]	; 0x30
 8005906:	4b1d      	ldr	r3, [pc, #116]	; (800597c <LCD_CtrlLinesConfig+0xe0>)
 8005908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800590a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800590e:	607b      	str	r3, [r7, #4]
 8005910:	687b      	ldr	r3, [r7, #4]

	GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 |
 8005912:	f24c 7333 	movw	r3, #50995	; 0xc733
 8005916:	617b      	str	r3, [r7, #20]
		                     GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
		                     GPIO_PIN_15;
	GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8005918:	2302      	movs	r3, #2
 800591a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800591c:	2303      	movs	r3, #3
 800591e:	623b      	str	r3, [r7, #32]
	GPIO_InitStructure.Pull = GPIO_NOPULL;
 8005920:	2300      	movs	r3, #0
 8005922:	61fb      	str	r3, [r7, #28]
	GPIO_InitStructure.Alternate = GPIO_AF12_FSMC;
 8005924:	230c      	movs	r3, #12
 8005926:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOD,&GPIO_InitStructure);
 8005928:	f107 0314 	add.w	r3, r7, #20
 800592c:	4619      	mov	r1, r3
 800592e:	4814      	ldr	r0, [pc, #80]	; (8005980 <LCD_CtrlLinesConfig+0xe4>)
 8005930:	f002 f824 	bl	800797c <HAL_GPIO_Init>

	GPIO_InitStructure.Pin = GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 |
 8005934:	f64f 73b0 	movw	r3, #65456	; 0xffb0
 8005938:	617b      	str	r3, [r7, #20]
		                     GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |
							 GPIO_PIN_15;
	HAL_GPIO_Init(GPIOE,&GPIO_InitStructure);
 800593a:	f107 0314 	add.w	r3, r7, #20
 800593e:	4619      	mov	r1, r3
 8005940:	4810      	ldr	r0, [pc, #64]	; (8005984 <LCD_CtrlLinesConfig+0xe8>)
 8005942:	f002 f81b 	bl	800797c <HAL_GPIO_Init>

	GPIO_InitStructure.Pin = GPIO_PIN_13;
 8005946:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800594a:	617b      	str	r3, [r7, #20]
	GPIO_InitStructure.Alternate = GPIO_AF12_FSMC;
 800594c:	230c      	movs	r3, #12
 800594e:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOD,&GPIO_InitStructure);
 8005950:	f107 0314 	add.w	r3, r7, #20
 8005954:	4619      	mov	r1, r3
 8005956:	480a      	ldr	r0, [pc, #40]	; (8005980 <LCD_CtrlLinesConfig+0xe4>)
 8005958:	f002 f810 	bl	800797c <HAL_GPIO_Init>

	GPIO_InitStructure.Pin = GPIO_PIN_12;
 800595c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005960:	617b      	str	r3, [r7, #20]
	GPIO_InitStructure.Alternate = GPIO_AF12_FSMC;
 8005962:	230c      	movs	r3, #12
 8005964:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOG,&GPIO_InitStructure);
 8005966:	f107 0314 	add.w	r3, r7, #20
 800596a:	4619      	mov	r1, r3
 800596c:	4806      	ldr	r0, [pc, #24]	; (8005988 <LCD_CtrlLinesConfig+0xec>)
 800596e:	f002 f805 	bl	800797c <HAL_GPIO_Init>
}
 8005972:	bf00      	nop
 8005974:	3728      	adds	r7, #40	; 0x28
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}
 800597a:	bf00      	nop
 800597c:	40023800 	.word	0x40023800
 8005980:	40020c00 	.word	0x40020c00
 8005984:	40021000 	.word	0x40021000
 8005988:	40021800 	.word	0x40021800

0800598c <LCD_FSMCConfig>:

static void LCD_FSMCConfig(void)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b0a2      	sub	sp, #136	; 0x88
 8005990:	af00      	add	r7, sp, #0
	//FSMC_NORSRAM_InitTypeDef  init;
	SRAM_HandleTypeDef hsram;
	FSMC_NORSRAM_TimingTypeDef  timingWrite;
	FSMC_NORSRAM_TimingTypeDef  timingRead;

	timingWrite.AddressSetupTime = 4;
 8005992:	2304      	movs	r3, #4
 8005994:	61fb      	str	r3, [r7, #28]
	timingWrite.AddressHoldTime = 0;
 8005996:	2300      	movs	r3, #0
 8005998:	623b      	str	r3, [r7, #32]
	timingWrite.DataSetupTime = 6;
 800599a:	2306      	movs	r3, #6
 800599c:	627b      	str	r3, [r7, #36]	; 0x24
	timingWrite.BusTurnAroundDuration = 1;
 800599e:	2301      	movs	r3, #1
 80059a0:	62bb      	str	r3, [r7, #40]	; 0x28
	timingWrite.CLKDivision = 0;
 80059a2:	2300      	movs	r3, #0
 80059a4:	62fb      	str	r3, [r7, #44]	; 0x2c
	timingWrite.DataLatency = 0;
 80059a6:	2300      	movs	r3, #0
 80059a8:	633b      	str	r3, [r7, #48]	; 0x30
	timingWrite.AccessMode = FSMC_ACCESS_MODE_A;
 80059aa:	2300      	movs	r3, #0
 80059ac:	637b      	str	r3, [r7, #52]	; 0x34

	timingRead.AddressSetupTime = 4;
 80059ae:	2304      	movs	r3, #4
 80059b0:	603b      	str	r3, [r7, #0]
	timingRead.AddressHoldTime = 0;
 80059b2:	2300      	movs	r3, #0
 80059b4:	607b      	str	r3, [r7, #4]
	timingRead.DataSetupTime = 8;
 80059b6:	2308      	movs	r3, #8
 80059b8:	60bb      	str	r3, [r7, #8]
	timingRead.BusTurnAroundDuration = 1;
 80059ba:	2301      	movs	r3, #1
 80059bc:	60fb      	str	r3, [r7, #12]
	timingRead.CLKDivision = 0;
 80059be:	2300      	movs	r3, #0
 80059c0:	613b      	str	r3, [r7, #16]
	timingRead.DataLatency = 0;
 80059c2:	2300      	movs	r3, #0
 80059c4:	617b      	str	r3, [r7, #20]
	timingRead.AccessMode = FSMC_ACCESS_MODE_A;
 80059c6:	2300      	movs	r3, #0
 80059c8:	61bb      	str	r3, [r7, #24]

	hsram.Instance = FSMC_NORSRAM_DEVICE;
 80059ca:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 80059ce:	63bb      	str	r3, [r7, #56]	; 0x38
	hsram.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80059d0:	4b13      	ldr	r3, [pc, #76]	; (8005a20 <LCD_FSMCConfig+0x94>)
 80059d2:	63fb      	str	r3, [r7, #60]	; 0x3c
	hsram.Init.NSBank = FSMC_NORSRAM_BANK4;
 80059d4:	2306      	movs	r3, #6
 80059d6:	643b      	str	r3, [r7, #64]	; 0x40
	hsram.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80059d8:	2300      	movs	r3, #0
 80059da:	647b      	str	r3, [r7, #68]	; 0x44
	hsram.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80059dc:	2310      	movs	r3, #16
 80059de:	64fb      	str	r3, [r7, #76]	; 0x4c
	hsram.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80059e0:	2300      	movs	r3, #0
 80059e2:	653b      	str	r3, [r7, #80]	; 0x50
	hsram.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80059e4:	2300      	movs	r3, #0
 80059e6:	66fb      	str	r3, [r7, #108]	; 0x6c
	hsram.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80059e8:	2300      	movs	r3, #0
 80059ea:	657b      	str	r3, [r7, #84]	; 0x54
	hsram.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80059ec:	2300      	movs	r3, #0
 80059ee:	65bb      	str	r3, [r7, #88]	; 0x58
	hsram.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80059f0:	2300      	movs	r3, #0
 80059f2:	65fb      	str	r3, [r7, #92]	; 0x5c
	hsram.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80059f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80059f8:	663b      	str	r3, [r7, #96]	; 0x60
	hsram.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80059fa:	2300      	movs	r3, #0
 80059fc:	667b      	str	r3, [r7, #100]	; 0x64
	hsram.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 80059fe:	2300      	movs	r3, #0
 8005a00:	66bb      	str	r3, [r7, #104]	; 0x68
	hsram.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8005a02:	2300      	movs	r3, #0
 8005a04:	673b      	str	r3, [r7, #112]	; 0x70
	//hsram.Init.ContinuousClock = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY; /* 새로운 파라미터 */

	HAL_SRAM_Init(&hsram, &timingRead, &timingWrite);
 8005a06:	f107 021c 	add.w	r2, r7, #28
 8005a0a:	4639      	mov	r1, r7
 8005a0c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005a10:	4618      	mov	r0, r3
 8005a12:	f7fc fd3f 	bl	8002494 <HAL_SRAM_Init>
}
 8005a16:	bf00      	nop
 8005a18:	3788      	adds	r7, #136	; 0x88
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}
 8005a1e:	bf00      	nop
 8005a20:	a0000104 	.word	0xa0000104

08005a24 <LCD_ClrScr>:
*********************************************************************************************************
*	Func name: LCD_ClrScr
*********************************************************************************************************
*/
void LCD_ClrScr(uint16_t _usColor)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b082      	sub	sp, #8
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	80fb      	strh	r3, [r7, #6]
	if (g_ChipID == IC_8875)	/* RA8875 ·ÖÖ§ */
 8005a2e:	4b06      	ldr	r3, [pc, #24]	; (8005a48 <LCD_ClrScr+0x24>)
 8005a30:	881b      	ldrh	r3, [r3, #0]
 8005a32:	2b75      	cmp	r3, #117	; 0x75
 8005a34:	d103      	bne.n	8005a3e <LCD_ClrScr+0x1a>
	{
		//UART1_Transmit_String("LCD Controller is RA8875 color\r\n");
		RA8875_ClrScr(_usColor);
 8005a36:	88fb      	ldrh	r3, [r7, #6]
 8005a38:	4618      	mov	r0, r3
 8005a3a:	f7fd fdab 	bl	8003594 <RA8875_ClrScr>
	else	/* 5420£¬4001£¬61509 ·ÖÖ§ */
	{
		//UART1_Transmit_String("LCD Controller is SFD5420 color\r\n");
		//SPFD5420_ClrScr(_usColor);
	}
}
 8005a3e:	bf00      	nop
 8005a40:	3708      	adds	r7, #8
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}
 8005a46:	bf00      	nop
 8005a48:	20000008 	.word	0x20000008

08005a4c <LCD_SetBackLight>:
*********************************************************************************************************
* 	Func name: LCD_SetBackLight
*********************************************************************************************************
*/
void LCD_SetBackLight(uint8_t _bright)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b082      	sub	sp, #8
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	4603      	mov	r3, r0
 8005a54:	71fb      	strb	r3, [r7, #7]
	s_ucBright =  _bright;	/* ±£´æ±³¹âÖµ */
 8005a56:	4a07      	ldr	r2, [pc, #28]	; (8005a74 <LCD_SetBackLight+0x28>)
 8005a58:	79fb      	ldrb	r3, [r7, #7]
 8005a5a:	7013      	strb	r3, [r2, #0]

	if (g_ChipID == IC_8875)
 8005a5c:	4b06      	ldr	r3, [pc, #24]	; (8005a78 <LCD_SetBackLight+0x2c>)
 8005a5e:	881b      	ldrh	r3, [r3, #0]
 8005a60:	2b75      	cmp	r3, #117	; 0x75
 8005a62:	d103      	bne.n	8005a6c <LCD_SetBackLight+0x20>
	{
		RA8875_SetBackLight(_bright);
 8005a64:	79fb      	ldrb	r3, [r7, #7]
 8005a66:	4618      	mov	r0, r3
 8005a68:	f7fd ff0a 	bl	8003880 <RA8875_SetBackLight>
	}
	else
	{
		//SPFD5420_SetBackLight(_bright);
	}
}
 8005a6c:	bf00      	nop
 8005a6e:	3708      	adds	r7, #8
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bd80      	pop	{r7, pc}
 8005a74:	20000b70 	.word	0x20000b70
 8005a78:	20000008 	.word	0x20000008

08005a7c <LCD_DrawBMP>:
*********************************************************************************************************
*	Func name: LCD_DrawBMP
*********************************************************************************************************
*/
void LCD_DrawBMP(uint16_t _usX, uint16_t _usY, uint16_t _usHeight, uint16_t _usWidth, uint16_t *_ptr)
{
 8005a7c:	b590      	push	{r4, r7, lr}
 8005a7e:	b085      	sub	sp, #20
 8005a80:	af02      	add	r7, sp, #8
 8005a82:	4604      	mov	r4, r0
 8005a84:	4608      	mov	r0, r1
 8005a86:	4611      	mov	r1, r2
 8005a88:	461a      	mov	r2, r3
 8005a8a:	4623      	mov	r3, r4
 8005a8c:	80fb      	strh	r3, [r7, #6]
 8005a8e:	4603      	mov	r3, r0
 8005a90:	80bb      	strh	r3, [r7, #4]
 8005a92:	460b      	mov	r3, r1
 8005a94:	807b      	strh	r3, [r7, #2]
 8005a96:	4613      	mov	r3, r2
 8005a98:	803b      	strh	r3, [r7, #0]
	if (g_ChipID == IC_8875)
 8005a9a:	4b08      	ldr	r3, [pc, #32]	; (8005abc <LCD_DrawBMP+0x40>)
 8005a9c:	881b      	ldrh	r3, [r3, #0]
 8005a9e:	2b75      	cmp	r3, #117	; 0x75
 8005aa0:	d108      	bne.n	8005ab4 <LCD_DrawBMP+0x38>
	{
		RA8875_DrawBMP(_usX, _usY, _usHeight, _usWidth, _ptr);
 8005aa2:	883c      	ldrh	r4, [r7, #0]
 8005aa4:	887a      	ldrh	r2, [r7, #2]
 8005aa6:	88b9      	ldrh	r1, [r7, #4]
 8005aa8:	88f8      	ldrh	r0, [r7, #6]
 8005aaa:	69bb      	ldr	r3, [r7, #24]
 8005aac:	9300      	str	r3, [sp, #0]
 8005aae:	4623      	mov	r3, r4
 8005ab0:	f7fd fe64 	bl	800377c <RA8875_DrawBMP>
	}
	else
	{
		//SPFD5420_DrawBMP(_usX, _usY, _usHeight, _usWidth, _ptr);
	}
}
 8005ab4:	bf00      	nop
 8005ab6:	370c      	adds	r7, #12
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd90      	pop	{r4, r7, pc}
 8005abc:	20000008 	.word	0x20000008

08005ac0 <LCD_DispStr>:
*********************************************************************************************************
*	Func name: LCD_DispStr
*********************************************************************************************************
*/
void LCD_DispStr(uint16_t _usX, uint16_t _usY, char *_ptr, FONT_T *_tFont)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b09e      	sub	sp, #120	; 0x78
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	60ba      	str	r2, [r7, #8]
 8005ac8:	607b      	str	r3, [r7, #4]
 8005aca:	4603      	mov	r3, r0
 8005acc:	81fb      	strh	r3, [r7, #14]
 8005ace:	460b      	mov	r3, r1
 8005ad0:	81bb      	strh	r3, [r7, #12]
#ifdef USE_SMALL_FONT
	const uint8_t *pHzDot;
#else
	uint32_t AddrHZK;
#endif
	if (_tFont->FontCode == FC_ST_12)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	881b      	ldrh	r3, [r3, #0]
 8005ad6:	2b01      	cmp	r3, #1
 8005ad8:	d10e      	bne.n	8005af8 <LCD_DispStr+0x38>
	{
		font_height = 12;
 8005ada:	230c      	movs	r3, #12
 8005adc:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
		font_width = 12;
 8005ae0:	230c      	movs	r3, #12
 8005ae2:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
		font_bytes = 24;
 8005ae6:	2318      	movs	r3, #24
 8005ae8:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
		pAscDot = g_Ascii12;
 8005aec:	4b83      	ldr	r3, [pc, #524]	; (8005cfc <LCD_DispStr+0x23c>)
 8005aee:	663b      	str	r3, [r7, #96]	; 0x60

		#ifdef USE_SMALL_FONT
			pHzDot = g_Hz12;
		#else
			AddrHZK = HZK12_ADDR;
 8005af0:	f04f 43c8 	mov.w	r3, #1677721600	; 0x64000000
 8005af4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005af6:	e0f5      	b.n	8005ce4 <LCD_DispStr+0x224>
		#endif
		}
		else
		{
			font_height = 16;
 8005af8:	2310      	movs	r3, #16
 8005afa:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
			font_width = 16;
 8005afe:	2310      	movs	r3, #16
 8005b00:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
			font_bytes = 32;
 8005b04:	2320      	movs	r3, #32
 8005b06:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
			pAscDot = g_Ascii16;
 8005b0a:	4b7d      	ldr	r3, [pc, #500]	; (8005d00 <LCD_DispStr+0x240>)
 8005b0c:	663b      	str	r3, [r7, #96]	; 0x60

		#ifdef USE_SMALL_FONT
			pHzDot = g_Hz16;
		#else
			AddrHZK = HZK16_ADDR;
 8005b0e:	4b7d      	ldr	r3, [pc, #500]	; (8005d04 <LCD_DispStr+0x244>)
 8005b10:	65fb      	str	r3, [r7, #92]	; 0x5c
		#endif
		}

		while (*_ptr != 0)
 8005b12:	e0e7      	b.n	8005ce4 <LCD_DispStr+0x224>
		{
			code1 = *_ptr;
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	781b      	ldrb	r3, [r3, #0]
 8005b18:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			if (code1 < 0x80)
 8005b1c:	f997 305b 	ldrsb.w	r3, [r7, #91]	; 0x5b
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	db1a      	blt.n	8005b5a <LCD_DispStr+0x9a>
			{
				memcpy(buf, &pAscDot[code1 * (font_bytes / 2)], (font_bytes / 2));
 8005b24:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8005b28:	f897 2069 	ldrb.w	r2, [r7, #105]	; 0x69
 8005b2c:	0852      	lsrs	r2, r2, #1
 8005b2e:	b2d2      	uxtb	r2, r2
 8005b30:	fb02 f303 	mul.w	r3, r2, r3
 8005b34:	461a      	mov	r2, r3
 8005b36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b38:	1899      	adds	r1, r3, r2
 8005b3a:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 8005b3e:	085b      	lsrs	r3, r3, #1
 8005b40:	b2db      	uxtb	r3, r3
 8005b42:	461a      	mov	r2, r3
 8005b44:	f107 0310 	add.w	r3, r7, #16
 8005b48:	4618      	mov	r0, r3
 8005b4a:	f003 fc34 	bl	80093b6 <memcpy>
				width = font_width / 2;
 8005b4e:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8005b52:	085b      	lsrs	r3, r3, #1
 8005b54:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8005b58:	e056      	b.n	8005c08 <LCD_DispStr+0x148>
			}
			else
			{
				code2 = *++_ptr;
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	3301      	adds	r3, #1
 8005b5e:	60bb      	str	r3, [r7, #8]
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	781b      	ldrb	r3, [r3, #0]
 8005b64:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
				if (code2 == 0)
 8005b68:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	f000 80bf 	beq.w	8005cf0 <LCD_DispStr+0x230>
							break;
						}
					}
				#else	/* ÓÃÈ«×Ö¿â */
					/* ´Ë´¦ÐèÒª¸ù¾Ý×Ö¿âÎÄ¼þ´æ·ÅÎ»ÖÃ½øÐÐÐÞ¸Ä */
					if (code1 >=0xA1 && code1 <= 0xA9 && code2 >=0xA1)
 8005b72:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8005b76:	2ba0      	cmp	r3, #160	; 0xa0
 8005b78:	d91a      	bls.n	8005bb0 <LCD_DispStr+0xf0>
 8005b7a:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8005b7e:	2ba9      	cmp	r3, #169	; 0xa9
 8005b80:	d816      	bhi.n	8005bb0 <LCD_DispStr+0xf0>
 8005b82:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8005b86:	2ba0      	cmp	r3, #160	; 0xa0
 8005b88:	d912      	bls.n	8005bb0 <LCD_DispStr+0xf0>
					{
						address = ((code1 - 0xA1) * 94 + (code2 - 0xA1)) * font_bytes + AddrHZK;
 8005b8a:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8005b8e:	3ba1      	subs	r3, #161	; 0xa1
 8005b90:	225e      	movs	r2, #94	; 0x5e
 8005b92:	fb03 f202 	mul.w	r2, r3, r2
 8005b96:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8005b9a:	3ba1      	subs	r3, #161	; 0xa1
 8005b9c:	4413      	add	r3, r2
 8005b9e:	f897 2069 	ldrb.w	r2, [r7, #105]	; 0x69
 8005ba2:	fb02 f303 	mul.w	r3, r2, r3
 8005ba6:	461a      	mov	r2, r3
 8005ba8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005baa:	4413      	add	r3, r2
 8005bac:	673b      	str	r3, [r7, #112]	; 0x70
 8005bae:	e01f      	b.n	8005bf0 <LCD_DispStr+0x130>
					}
					else if (code1 >=0xB0 && code1 <= 0xF7 && code2 >=0xA1)
 8005bb0:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8005bb4:	2baf      	cmp	r3, #175	; 0xaf
 8005bb6:	d91b      	bls.n	8005bf0 <LCD_DispStr+0x130>
 8005bb8:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8005bbc:	2bf7      	cmp	r3, #247	; 0xf7
 8005bbe:	d817      	bhi.n	8005bf0 <LCD_DispStr+0x130>
 8005bc0:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8005bc4:	2ba0      	cmp	r3, #160	; 0xa0
 8005bc6:	d913      	bls.n	8005bf0 <LCD_DispStr+0x130>
					{
						address = ((code1 - 0xB0) * 94 + (code2 - 0xA1) + 846) * font_bytes + AddrHZK;
 8005bc8:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8005bcc:	3bb0      	subs	r3, #176	; 0xb0
 8005bce:	225e      	movs	r2, #94	; 0x5e
 8005bd0:	fb03 f202 	mul.w	r2, r3, r2
 8005bd4:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8005bd8:	3ba1      	subs	r3, #161	; 0xa1
 8005bda:	4413      	add	r3, r2
 8005bdc:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005be0:	f897 2069 	ldrb.w	r2, [r7, #105]	; 0x69
 8005be4:	fb02 f303 	mul.w	r3, r2, r3
 8005be8:	461a      	mov	r2, r3
 8005bea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005bec:	4413      	add	r3, r2
 8005bee:	673b      	str	r3, [r7, #112]	; 0x70
					}
					memcpy(buf, (const uint8_t *)address, font_bytes);
 8005bf0:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8005bf2:	f897 2069 	ldrb.w	r2, [r7, #105]	; 0x69
 8005bf6:	f107 0310 	add.w	r3, r7, #16
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f003 fbdb 	bl	80093b6 <memcpy>
				#endif
					width = font_width;
 8005c00:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8005c04:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			}
			y = _usY;
 8005c08:	89bb      	ldrh	r3, [r7, #12]
 8005c0a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
			/* ¿ªÊ¼Ë¢LCD */
			for (m = 0; m < font_height; m++)	/* ×Ö·û¸ß¶È */
 8005c0e:	2300      	movs	r3, #0
 8005c10:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 8005c14:	e052      	b.n	8005cbc <LCD_DispStr+0x1fc>
			{
				x = _usX;
 8005c16:	89fb      	ldrh	r3, [r7, #14]
 8005c18:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
				for (i = 0; i < width; i++)	/* ×Ö·û¿í¶È */
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	677b      	str	r3, [r7, #116]	; 0x74
 8005c20:	e03d      	b.n	8005c9e <LCD_DispStr+0x1de>
				{
					if ((buf[m * ((2 * width) / font_width) + i / 8] & (0x80 >> (i % 8 ))) != 0x00)
 8005c22:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005c26:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8005c2a:	0051      	lsls	r1, r2, #1
 8005c2c:	f897 206b 	ldrb.w	r2, [r7, #107]	; 0x6b
 8005c30:	fb91 f2f2 	sdiv	r2, r1, r2
 8005c34:	fb02 f303 	mul.w	r3, r2, r3
 8005c38:	461a      	mov	r2, r3
 8005c3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c3c:	08db      	lsrs	r3, r3, #3
 8005c3e:	4413      	add	r3, r2
 8005c40:	3378      	adds	r3, #120	; 0x78
 8005c42:	443b      	add	r3, r7
 8005c44:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8005c48:	4619      	mov	r1, r3
 8005c4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c4c:	f003 0307 	and.w	r3, r3, #7
 8005c50:	2280      	movs	r2, #128	; 0x80
 8005c52:	fa42 f303 	asr.w	r3, r2, r3
 8005c56:	400b      	ands	r3, r1
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d009      	beq.n	8005c70 <LCD_DispStr+0x1b0>
					{
						LCD_PutPixel(x, y, _tFont->FrontColor);	/* ÉèÖÃÏñËØÑÕÉ«ÎªÎÄ×ÖÉ« */
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	885a      	ldrh	r2, [r3, #2]
 8005c60:	f8b7 1064 	ldrh.w	r1, [r7, #100]	; 0x64
 8005c64:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005c68:	4618      	mov	r0, r3
 8005c6a:	f000 f84d 	bl	8005d08 <LCD_PutPixel>
 8005c6e:	e00e      	b.n	8005c8e <LCD_DispStr+0x1ce>
					}
					else
					{
						if (_tFont->BackColor != CL_MASK)	/* Í¸Ã÷É« */
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	889b      	ldrh	r3, [r3, #4]
 8005c74:	f649 1299 	movw	r2, #39321	; 0x9999
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d008      	beq.n	8005c8e <LCD_DispStr+0x1ce>
						{
							LCD_PutPixel(x, y, _tFont->BackColor);	/* ÉèÖÃÏñËØÑÕÉ«ÎªÎÄ×Ö±³¾°É« */
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	889a      	ldrh	r2, [r3, #4]
 8005c80:	f8b7 1064 	ldrh.w	r1, [r7, #100]	; 0x64
 8005c84:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f000 f83d 	bl	8005d08 <LCD_PutPixel>
						}
					}
					x++;
 8005c8e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005c92:	3301      	adds	r3, #1
 8005c94:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
				for (i = 0; i < width; i++)	/* ×Ö·û¿í¶È */
 8005c98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c9a:	3301      	adds	r3, #1
 8005c9c:	677b      	str	r3, [r7, #116]	; 0x74
 8005c9e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005ca2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8005ca4:	429a      	cmp	r2, r3
 8005ca6:	d3bc      	bcc.n	8005c22 <LCD_DispStr+0x162>
				}
				y++;
 8005ca8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005cac:	3301      	adds	r3, #1
 8005cae:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
			for (m = 0; m < font_height; m++)	/* ×Ö·û¸ß¶È */
 8005cb2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005cb6:	3301      	adds	r3, #1
 8005cb8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 8005cbc:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 8005cc0:	b29b      	uxth	r3, r3
 8005cc2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8005cc6:	429a      	cmp	r2, r3
 8005cc8:	d3a5      	bcc.n	8005c16 <LCD_DispStr+0x156>

			if (_tFont->Space > 0)
			{
				/* Èç¹ûÎÄ×Öµ×É«°´_tFont->usBackColor£¬²¢ÇÒ×Ö¼ä¾à´óÓÚµãÕóµÄ¿í¶È£¬ÄÇÃ´ÐèÒªÔÚÎÄ×ÖÖ®¼äÌî³ä(ÔÝÊ±Î´ÊµÏÖ) */
			}
			_usX += width + _tFont->Space;	/* ÁÐµØÖ·µÝÔö */
 8005cca:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005cce:	b29a      	uxth	r2, r3
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	88db      	ldrh	r3, [r3, #6]
 8005cd4:	4413      	add	r3, r2
 8005cd6:	b29a      	uxth	r2, r3
 8005cd8:	89fb      	ldrh	r3, [r7, #14]
 8005cda:	4413      	add	r3, r2
 8005cdc:	81fb      	strh	r3, [r7, #14]
			_ptr++;			/* Ö¸ÏòÏÂÒ»¸ö×Ö·û */
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	3301      	adds	r3, #1
 8005ce2:	60bb      	str	r3, [r7, #8]
		while (*_ptr != 0)
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	781b      	ldrb	r3, [r3, #0]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	f47f af13 	bne.w	8005b14 <LCD_DispStr+0x54>
		}
}
 8005cee:	e000      	b.n	8005cf2 <LCD_DispStr+0x232>
					break;
 8005cf0:	bf00      	nop
}
 8005cf2:	bf00      	nop
 8005cf4:	3778      	adds	r7, #120	; 0x78
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bd80      	pop	{r7, pc}
 8005cfa:	bf00      	nop
 8005cfc:	0800b74c 	.word	0x0800b74c
 8005d00:	0800bd40 	.word	0x0800bd40
 8005d04:	6402c9d0 	.word	0x6402c9d0

08005d08 <LCD_PutPixel>:
*********************************************************************************************************
*	Func name: LCD_PutPixel
*********************************************************************************************************
*/
void LCD_PutPixel(uint16_t _usX, uint16_t _usY, uint16_t _usColor)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b082      	sub	sp, #8
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	4603      	mov	r3, r0
 8005d10:	80fb      	strh	r3, [r7, #6]
 8005d12:	460b      	mov	r3, r1
 8005d14:	80bb      	strh	r3, [r7, #4]
 8005d16:	4613      	mov	r3, r2
 8005d18:	807b      	strh	r3, [r7, #2]
	if (g_ChipID == IC_8875)
 8005d1a:	4b07      	ldr	r3, [pc, #28]	; (8005d38 <LCD_PutPixel+0x30>)
 8005d1c:	881b      	ldrh	r3, [r3, #0]
 8005d1e:	2b75      	cmp	r3, #117	; 0x75
 8005d20:	d105      	bne.n	8005d2e <LCD_PutPixel+0x26>
	{
		RA8875_PutPixel(_usX, _usY, _usColor);
 8005d22:	887a      	ldrh	r2, [r7, #2]
 8005d24:	88b9      	ldrh	r1, [r7, #4]
 8005d26:	88fb      	ldrh	r3, [r7, #6]
 8005d28:	4618      	mov	r0, r3
 8005d2a:	f7fd fc5b 	bl	80035e4 <RA8875_PutPixel>
	}
	else
	{
		//SPFD5420_PutPixel(_usX, _usY, _usColor);
	}
}
 8005d2e:	bf00      	nop
 8005d30:	3708      	adds	r7, #8
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}
 8005d36:	bf00      	nop
 8005d38:	20000008 	.word	0x20000008

08005d3c <LCD_DrawIcon32>:
*********************************************************************************************************
*	Func name: LCD_DrawIcon32
*********************************************************************************************************
*/
void LCD_DrawIcon32(const ICON_T *_tIcon, FONT_T *_tFont, uint8_t _ucFocusMode)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b08a      	sub	sp, #40	; 0x28
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	60f8      	str	r0, [r7, #12]
 8005d44:	60b9      	str	r1, [r7, #8]
 8005d46:	4613      	mov	r3, r2
 8005d48:	71fb      	strb	r3, [r7, #7]
	uint16_t usOldRGB, usNewRGB;
	int16_t x, y;		/* ÓÃÓÚ¼ÇÂ¼´°¿ÚÄÚµÄÏà¶Ô×ø±ê */
	uint8_t R1,G1,B1,A;	/* ÐÂÏñËØÉ«²Ê·ÖÁ¿ */
	uint8_t R0,G0,B0;	/* ¾ÉÏñËØÉ«²Ê·ÖÁ¿ */

	p = (const uint8_t *)_tIcon->pBmp;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	68db      	ldr	r3, [r3, #12]
 8005d4e:	627b      	str	r3, [r7, #36]	; 0x24
	p += 54;		/* Ö±½ÓÖ¸ÏòÍ¼ÏñÊý¾ÝÇø */
 8005d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d52:	3336      	adds	r3, #54	; 0x36
 8005d54:	627b      	str	r3, [r7, #36]	; 0x24

	/* °´ÕÕBMPÎ»Í¼´ÎÐò£¬´Ó×óÖÁÓÒ£¬´ÓÉÏÖÁÏÂÉ¨Ãè */
	for (y = _tIcon->Height - 1; y >= 0; y--)
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	88db      	ldrh	r3, [r3, #6]
 8005d5a:	3b01      	subs	r3, #1
 8005d5c:	b29b      	uxth	r3, r3
 8005d5e:	83fb      	strh	r3, [r7, #30]
 8005d60:	e0ff      	b.n	8005f62 <LCD_DrawIcon32+0x226>
	{
		for (x = 0; x < _tIcon->Width; x++)
 8005d62:	2300      	movs	r3, #0
 8005d64:	843b      	strh	r3, [r7, #32]
 8005d66:	e0ef      	b.n	8005f48 <LCD_DrawIcon32+0x20c>
		{
			B1 = *p++;
 8005d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d6a:	1c5a      	adds	r2, r3, #1
 8005d6c:	627a      	str	r2, [r7, #36]	; 0x24
 8005d6e:	781b      	ldrb	r3, [r3, #0]
 8005d70:	767b      	strb	r3, [r7, #25]
			G1 = *p++;
 8005d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d74:	1c5a      	adds	r2, r3, #1
 8005d76:	627a      	str	r2, [r7, #36]	; 0x24
 8005d78:	781b      	ldrb	r3, [r3, #0]
 8005d7a:	763b      	strb	r3, [r7, #24]
			R1 = *p++;
 8005d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d7e:	1c5a      	adds	r2, r3, #1
 8005d80:	627a      	str	r2, [r7, #36]	; 0x24
 8005d82:	781b      	ldrb	r3, [r3, #0]
 8005d84:	75fb      	strb	r3, [r7, #23]
			A = *p++;	/* Alpha Öµ(Í¸Ã÷¶È)£¬0-255, 0±íÊ¾Í¸Ã÷£¬1±íÊ¾²»Í¸Ã÷, ÖÐ¼äÖµ±íÊ¾Í¸Ã÷¶È */
 8005d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d88:	1c5a      	adds	r2, r3, #1
 8005d8a:	627a      	str	r2, [r7, #36]	; 0x24
 8005d8c:	781b      	ldrb	r3, [r3, #0]
 8005d8e:	75bb      	strb	r3, [r7, #22]

			if (A == 0x00)	/* ÐèÒªÍ¸Ã÷,ÏÔÊ¾±³¾° */
 8005d90:	7dbb      	ldrb	r3, [r7, #22]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	f000 80d2 	beq.w	8005f3c <LCD_DrawIcon32+0x200>
			{
				;	/* ²»ÓÃË¢ÐÂ±³¾° */
			}
			else if (A == 0xFF)	/* ÍêÈ«²»Í¸Ã÷£¬ ÏÔÊ¾ÐÂÏñËØ */
 8005d98:	7dbb      	ldrb	r3, [r7, #22]
 8005d9a:	2bff      	cmp	r3, #255	; 0xff
 8005d9c:	d12d      	bne.n	8005dfa <LCD_DrawIcon32+0xbe>
			{
				usNewRGB = RGB(R1, G1, B1);
 8005d9e:	7dfb      	ldrb	r3, [r7, #23]
 8005da0:	08db      	lsrs	r3, r3, #3
 8005da2:	b2db      	uxtb	r3, r3
 8005da4:	02db      	lsls	r3, r3, #11
 8005da6:	b21a      	sxth	r2, r3
 8005da8:	7e3b      	ldrb	r3, [r7, #24]
 8005daa:	089b      	lsrs	r3, r3, #2
 8005dac:	b2db      	uxtb	r3, r3
 8005dae:	015b      	lsls	r3, r3, #5
 8005db0:	b21b      	sxth	r3, r3
 8005db2:	4313      	orrs	r3, r2
 8005db4:	b21a      	sxth	r2, r3
 8005db6:	7e7b      	ldrb	r3, [r7, #25]
 8005db8:	08db      	lsrs	r3, r3, #3
 8005dba:	b2db      	uxtb	r3, r3
 8005dbc:	b21b      	sxth	r3, r3
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	b21b      	sxth	r3, r3
 8005dc2:	847b      	strh	r3, [r7, #34]	; 0x22
				if (_ucFocusMode == 1)
 8005dc4:	79fb      	ldrb	r3, [r7, #7]
 8005dc6:	2b01      	cmp	r3, #1
 8005dc8:	d108      	bne.n	8005ddc <LCD_DrawIcon32+0xa0>
				{
					usNewRGB = Blend565(usNewRGB, CL_YELLOW, 10);
 8005dca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005dcc:	220a      	movs	r2, #10
 8005dce:	f64f 71e0 	movw	r1, #65504	; 0xffe0
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	f000 f910 	bl	8005ff8 <Blend565>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	847b      	strh	r3, [r7, #34]	; 0x22
				}
				LCD_PutPixel(x + _tIcon->Left, y + _tIcon->Top, usNewRGB);
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	885a      	ldrh	r2, [r3, #2]
 8005de0:	8c3b      	ldrh	r3, [r7, #32]
 8005de2:	4413      	add	r3, r2
 8005de4:	b298      	uxth	r0, r3
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	889a      	ldrh	r2, [r3, #4]
 8005dea:	8bfb      	ldrh	r3, [r7, #30]
 8005dec:	4413      	add	r3, r2
 8005dee:	b29b      	uxth	r3, r3
 8005df0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8005df2:	4619      	mov	r1, r3
 8005df4:	f7ff ff88 	bl	8005d08 <LCD_PutPixel>
 8005df8:	e0a0      	b.n	8005f3c <LCD_DrawIcon32+0x200>
			}
			else 	/* °ëÍ¸Ã÷ */
			{
				/* ¼ÆËã¹«Ê½£º Êµ¼ÊÏÔÊ¾ÑÕÉ« = Ç°¾°ÑÕÉ« * Alpha / 255 + ±³¾°ÑÕÉ« * (255-Alpha) / 255 */
				usOldRGB = LCD_GetPixel(x + _tIcon->Left, y + _tIcon->Top);
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	885a      	ldrh	r2, [r3, #2]
 8005dfe:	8c3b      	ldrh	r3, [r7, #32]
 8005e00:	4413      	add	r3, r2
 8005e02:	b298      	uxth	r0, r3
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	889a      	ldrh	r2, [r3, #4]
 8005e08:	8bfb      	ldrh	r3, [r7, #30]
 8005e0a:	4413      	add	r3, r2
 8005e0c:	b29b      	uxth	r3, r3
 8005e0e:	4619      	mov	r1, r3
 8005e10:	f000 f926 	bl	8006060 <LCD_GetPixel>
 8005e14:	4603      	mov	r3, r0
 8005e16:	82bb      	strh	r3, [r7, #20]
				R0 = RGB565_R(usOldRGB);
 8005e18:	8abb      	ldrh	r3, [r7, #20]
 8005e1a:	0a1b      	lsrs	r3, r3, #8
 8005e1c:	b29b      	uxth	r3, r3
 8005e1e:	b2db      	uxtb	r3, r3
 8005e20:	f023 0307 	bic.w	r3, r3, #7
 8005e24:	74fb      	strb	r3, [r7, #19]
				G0 = RGB565_G(usOldRGB);
 8005e26:	8abb      	ldrh	r3, [r7, #20]
 8005e28:	08db      	lsrs	r3, r3, #3
 8005e2a:	b29b      	uxth	r3, r3
 8005e2c:	b2db      	uxtb	r3, r3
 8005e2e:	f023 0303 	bic.w	r3, r3, #3
 8005e32:	74bb      	strb	r3, [r7, #18]
				B0 = RGB565_B(usOldRGB);
 8005e34:	8abb      	ldrh	r3, [r7, #20]
 8005e36:	00db      	lsls	r3, r3, #3
 8005e38:	747b      	strb	r3, [r7, #17]

				R1 = (R1 * A) / 255 + R0 * (255 - A) / 255;
 8005e3a:	7dfb      	ldrb	r3, [r7, #23]
 8005e3c:	7dba      	ldrb	r2, [r7, #22]
 8005e3e:	fb02 f303 	mul.w	r3, r2, r3
 8005e42:	4a6c      	ldr	r2, [pc, #432]	; (8005ff4 <LCD_DrawIcon32+0x2b8>)
 8005e44:	fb82 1203 	smull	r1, r2, r2, r3
 8005e48:	441a      	add	r2, r3
 8005e4a:	11d2      	asrs	r2, r2, #7
 8005e4c:	17db      	asrs	r3, r3, #31
 8005e4e:	1ad3      	subs	r3, r2, r3
 8005e50:	b2da      	uxtb	r2, r3
 8005e52:	7cfb      	ldrb	r3, [r7, #19]
 8005e54:	7db9      	ldrb	r1, [r7, #22]
 8005e56:	f1c1 01ff 	rsb	r1, r1, #255	; 0xff
 8005e5a:	fb01 f303 	mul.w	r3, r1, r3
 8005e5e:	4965      	ldr	r1, [pc, #404]	; (8005ff4 <LCD_DrawIcon32+0x2b8>)
 8005e60:	fb81 0103 	smull	r0, r1, r1, r3
 8005e64:	4419      	add	r1, r3
 8005e66:	11c9      	asrs	r1, r1, #7
 8005e68:	17db      	asrs	r3, r3, #31
 8005e6a:	1acb      	subs	r3, r1, r3
 8005e6c:	b2db      	uxtb	r3, r3
 8005e6e:	4413      	add	r3, r2
 8005e70:	75fb      	strb	r3, [r7, #23]
				G1 = (G1 * A) / 255 + G0 * (255 - A) / 255;
 8005e72:	7e3b      	ldrb	r3, [r7, #24]
 8005e74:	7dba      	ldrb	r2, [r7, #22]
 8005e76:	fb02 f303 	mul.w	r3, r2, r3
 8005e7a:	4a5e      	ldr	r2, [pc, #376]	; (8005ff4 <LCD_DrawIcon32+0x2b8>)
 8005e7c:	fb82 1203 	smull	r1, r2, r2, r3
 8005e80:	441a      	add	r2, r3
 8005e82:	11d2      	asrs	r2, r2, #7
 8005e84:	17db      	asrs	r3, r3, #31
 8005e86:	1ad3      	subs	r3, r2, r3
 8005e88:	b2da      	uxtb	r2, r3
 8005e8a:	7cbb      	ldrb	r3, [r7, #18]
 8005e8c:	7db9      	ldrb	r1, [r7, #22]
 8005e8e:	f1c1 01ff 	rsb	r1, r1, #255	; 0xff
 8005e92:	fb01 f303 	mul.w	r3, r1, r3
 8005e96:	4957      	ldr	r1, [pc, #348]	; (8005ff4 <LCD_DrawIcon32+0x2b8>)
 8005e98:	fb81 0103 	smull	r0, r1, r1, r3
 8005e9c:	4419      	add	r1, r3
 8005e9e:	11c9      	asrs	r1, r1, #7
 8005ea0:	17db      	asrs	r3, r3, #31
 8005ea2:	1acb      	subs	r3, r1, r3
 8005ea4:	b2db      	uxtb	r3, r3
 8005ea6:	4413      	add	r3, r2
 8005ea8:	763b      	strb	r3, [r7, #24]
				B1 = (B1 * A) / 255 + B0 * (255 - A) / 255;
 8005eaa:	7e7b      	ldrb	r3, [r7, #25]
 8005eac:	7dba      	ldrb	r2, [r7, #22]
 8005eae:	fb02 f303 	mul.w	r3, r2, r3
 8005eb2:	4a50      	ldr	r2, [pc, #320]	; (8005ff4 <LCD_DrawIcon32+0x2b8>)
 8005eb4:	fb82 1203 	smull	r1, r2, r2, r3
 8005eb8:	441a      	add	r2, r3
 8005eba:	11d2      	asrs	r2, r2, #7
 8005ebc:	17db      	asrs	r3, r3, #31
 8005ebe:	1ad3      	subs	r3, r2, r3
 8005ec0:	b2da      	uxtb	r2, r3
 8005ec2:	7c7b      	ldrb	r3, [r7, #17]
 8005ec4:	7db9      	ldrb	r1, [r7, #22]
 8005ec6:	f1c1 01ff 	rsb	r1, r1, #255	; 0xff
 8005eca:	fb01 f303 	mul.w	r3, r1, r3
 8005ece:	4949      	ldr	r1, [pc, #292]	; (8005ff4 <LCD_DrawIcon32+0x2b8>)
 8005ed0:	fb81 0103 	smull	r0, r1, r1, r3
 8005ed4:	4419      	add	r1, r3
 8005ed6:	11c9      	asrs	r1, r1, #7
 8005ed8:	17db      	asrs	r3, r3, #31
 8005eda:	1acb      	subs	r3, r1, r3
 8005edc:	b2db      	uxtb	r3, r3
 8005ede:	4413      	add	r3, r2
 8005ee0:	767b      	strb	r3, [r7, #25]
				usNewRGB = RGB(R1, G1, B1);
 8005ee2:	7dfb      	ldrb	r3, [r7, #23]
 8005ee4:	08db      	lsrs	r3, r3, #3
 8005ee6:	b2db      	uxtb	r3, r3
 8005ee8:	02db      	lsls	r3, r3, #11
 8005eea:	b21a      	sxth	r2, r3
 8005eec:	7e3b      	ldrb	r3, [r7, #24]
 8005eee:	089b      	lsrs	r3, r3, #2
 8005ef0:	b2db      	uxtb	r3, r3
 8005ef2:	015b      	lsls	r3, r3, #5
 8005ef4:	b21b      	sxth	r3, r3
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	b21a      	sxth	r2, r3
 8005efa:	7e7b      	ldrb	r3, [r7, #25]
 8005efc:	08db      	lsrs	r3, r3, #3
 8005efe:	b2db      	uxtb	r3, r3
 8005f00:	b21b      	sxth	r3, r3
 8005f02:	4313      	orrs	r3, r2
 8005f04:	b21b      	sxth	r3, r3
 8005f06:	847b      	strh	r3, [r7, #34]	; 0x22
				if (_ucFocusMode == 1)
 8005f08:	79fb      	ldrb	r3, [r7, #7]
 8005f0a:	2b01      	cmp	r3, #1
 8005f0c:	d108      	bne.n	8005f20 <LCD_DrawIcon32+0x1e4>
				{
					usNewRGB = Blend565(usNewRGB, CL_YELLOW, 10);
 8005f0e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005f10:	220a      	movs	r2, #10
 8005f12:	f64f 71e0 	movw	r1, #65504	; 0xffe0
 8005f16:	4618      	mov	r0, r3
 8005f18:	f000 f86e 	bl	8005ff8 <Blend565>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	847b      	strh	r3, [r7, #34]	; 0x22
				}
				LCD_PutPixel(x + _tIcon->Left, y + _tIcon->Top, usNewRGB);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	885a      	ldrh	r2, [r3, #2]
 8005f24:	8c3b      	ldrh	r3, [r7, #32]
 8005f26:	4413      	add	r3, r2
 8005f28:	b298      	uxth	r0, r3
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	889a      	ldrh	r2, [r3, #4]
 8005f2e:	8bfb      	ldrh	r3, [r7, #30]
 8005f30:	4413      	add	r3, r2
 8005f32:	b29b      	uxth	r3, r3
 8005f34:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8005f36:	4619      	mov	r1, r3
 8005f38:	f7ff fee6 	bl	8005d08 <LCD_PutPixel>
		for (x = 0; x < _tIcon->Width; x++)
 8005f3c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8005f40:	b29b      	uxth	r3, r3
 8005f42:	3301      	adds	r3, #1
 8005f44:	b29b      	uxth	r3, r3
 8005f46:	843b      	strh	r3, [r7, #32]
 8005f48:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8005f4c:	68fa      	ldr	r2, [r7, #12]
 8005f4e:	8912      	ldrh	r2, [r2, #8]
 8005f50:	4293      	cmp	r3, r2
 8005f52:	f6ff af09 	blt.w	8005d68 <LCD_DrawIcon32+0x2c>
	for (y = _tIcon->Height - 1; y >= 0; y--)
 8005f56:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8005f5a:	b29b      	uxth	r3, r3
 8005f5c:	3b01      	subs	r3, #1
 8005f5e:	b29b      	uxth	r3, r3
 8005f60:	83fb      	strh	r3, [r7, #30]
 8005f62:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	f6bf aefb 	bge.w	8005d62 <LCD_DrawIcon32+0x26>
	/* »æÖÆÍ¼±êÏÂµÄÎÄ×Ö */
	{
		uint16_t len;
		uint16_t width;

		len = strlen(_tIcon->Text);
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	3310      	adds	r3, #16
 8005f70:	4618      	mov	r0, r3
 8005f72:	f7fa f97d 	bl	8000270 <strlen>
 8005f76:	4603      	mov	r3, r0
 8005f78:	837b      	strh	r3, [r7, #26]

		if  (len == 0)
 8005f7a:	8b7b      	ldrh	r3, [r7, #26]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d035      	beq.n	8005fec <LCD_DrawIcon32+0x2b0>
		{
			return;	/* Èç¹ûÍ¼±êÎÄ±¾³¤¶ÈÎª0£¬Ôò²»ÏÔÊ¾ */
		}

		/* ¼ÆËãÎÄ±¾µÄ×Ü¿í¶È */
		if (_tFont->FontCode == FC_ST_12)		/* 12µãÕó */
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	881b      	ldrh	r3, [r3, #0]
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	d10a      	bne.n	8005f9e <LCD_DrawIcon32+0x262>
		{
			width = 6 * (len + _tFont->Space);
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	88da      	ldrh	r2, [r3, #6]
 8005f8c:	8b7b      	ldrh	r3, [r7, #26]
 8005f8e:	4413      	add	r3, r2
 8005f90:	b29b      	uxth	r3, r3
 8005f92:	461a      	mov	r2, r3
 8005f94:	0052      	lsls	r2, r2, #1
 8005f96:	4413      	add	r3, r2
 8005f98:	005b      	lsls	r3, r3, #1
 8005f9a:	83bb      	strh	r3, [r7, #28]
 8005f9c:	e006      	b.n	8005fac <LCD_DrawIcon32+0x270>
		}
		else	/* FC_ST_16 */
		{
			width = 8 * (len + _tFont->Space);
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	88da      	ldrh	r2, [r3, #6]
 8005fa2:	8b7b      	ldrh	r3, [r7, #26]
 8005fa4:	4413      	add	r3, r2
 8005fa6:	b29b      	uxth	r3, r3
 8005fa8:	00db      	lsls	r3, r3, #3
 8005faa:	83bb      	strh	r3, [r7, #28]
		}


		/* Ë®Æ½¾ÓÖÐ */
		x = (_tIcon->Left + _tIcon->Width / 2) - width / 2;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	885a      	ldrh	r2, [r3, #2]
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	891b      	ldrh	r3, [r3, #8]
 8005fb4:	085b      	lsrs	r3, r3, #1
 8005fb6:	b29b      	uxth	r3, r3
 8005fb8:	4413      	add	r3, r2
 8005fba:	b29a      	uxth	r2, r3
 8005fbc:	8bbb      	ldrh	r3, [r7, #28]
 8005fbe:	085b      	lsrs	r3, r3, #1
 8005fc0:	b29b      	uxth	r3, r3
 8005fc2:	1ad3      	subs	r3, r2, r3
 8005fc4:	b29b      	uxth	r3, r3
 8005fc6:	843b      	strh	r3, [r7, #32]
		y = _tIcon->Top + _tIcon->Height + 2;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	889a      	ldrh	r2, [r3, #4]
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	88db      	ldrh	r3, [r3, #6]
 8005fd0:	4413      	add	r3, r2
 8005fd2:	b29b      	uxth	r3, r3
 8005fd4:	3302      	adds	r3, #2
 8005fd6:	b29b      	uxth	r3, r3
 8005fd8:	83fb      	strh	r3, [r7, #30]
		LCD_DispStr(x, y, (char *)_tIcon->Text, _tFont);
 8005fda:	8c38      	ldrh	r0, [r7, #32]
 8005fdc:	8bf9      	ldrh	r1, [r7, #30]
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	f103 0210 	add.w	r2, r3, #16
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	f7ff fd6b 	bl	8005ac0 <LCD_DispStr>
 8005fea:	e000      	b.n	8005fee <LCD_DrawIcon32+0x2b2>
			return;	/* Èç¹ûÍ¼±êÎÄ±¾³¤¶ÈÎª0£¬Ôò²»ÏÔÊ¾ */
 8005fec:	bf00      	nop
	}
}
 8005fee:	3728      	adds	r7, #40	; 0x28
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bd80      	pop	{r7, pc}
 8005ff4:	80808081 	.word	0x80808081

08005ff8 <Blend565>:


uint16_t Blend565(uint16_t src, uint16_t dst, uint8_t alpha)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b085      	sub	sp, #20
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	4603      	mov	r3, r0
 8006000:	80fb      	strh	r3, [r7, #6]
 8006002:	460b      	mov	r3, r1
 8006004:	80bb      	strh	r3, [r7, #4]
 8006006:	4613      	mov	r3, r2
 8006008:	70fb      	strb	r3, [r7, #3]
	uint32_t src2;
	uint32_t dst2;

	src2 = ((src << 16) |src) & 0x07E0F81F;
 800600a:	88fb      	ldrh	r3, [r7, #6]
 800600c:	041a      	lsls	r2, r3, #16
 800600e:	88fb      	ldrh	r3, [r7, #6]
 8006010:	4313      	orrs	r3, r2
 8006012:	461a      	mov	r2, r3
 8006014:	4b11      	ldr	r3, [pc, #68]	; (800605c <Blend565+0x64>)
 8006016:	4013      	ands	r3, r2
 8006018:	60fb      	str	r3, [r7, #12]
	dst2 = ((dst << 16) | dst) & 0x07E0F81F;
 800601a:	88bb      	ldrh	r3, [r7, #4]
 800601c:	041a      	lsls	r2, r3, #16
 800601e:	88bb      	ldrh	r3, [r7, #4]
 8006020:	4313      	orrs	r3, r2
 8006022:	461a      	mov	r2, r3
 8006024:	4b0d      	ldr	r3, [pc, #52]	; (800605c <Blend565+0x64>)
 8006026:	4013      	ands	r3, r2
 8006028:	60bb      	str	r3, [r7, #8]
	dst2 = ((((dst2 - src2) * alpha) >> 5) + src2) & 0x07E0F81F;
 800602a:	68ba      	ldr	r2, [r7, #8]
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	1ad3      	subs	r3, r2, r3
 8006030:	78fa      	ldrb	r2, [r7, #3]
 8006032:	fb02 f303 	mul.w	r3, r2, r3
 8006036:	095a      	lsrs	r2, r3, #5
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	441a      	add	r2, r3
 800603c:	4b07      	ldr	r3, [pc, #28]	; (800605c <Blend565+0x64>)
 800603e:	4013      	ands	r3, r2
 8006040:	60bb      	str	r3, [r7, #8]
	return (dst2 >> 16) | dst2;
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	0c1b      	lsrs	r3, r3, #16
 8006046:	b29a      	uxth	r2, r3
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	b29b      	uxth	r3, r3
 800604c:	4313      	orrs	r3, r2
 800604e:	b29b      	uxth	r3, r3
}
 8006050:	4618      	mov	r0, r3
 8006052:	3714      	adds	r7, #20
 8006054:	46bd      	mov	sp, r7
 8006056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605a:	4770      	bx	lr
 800605c:	07e0f81f 	.word	0x07e0f81f

08006060 <LCD_GetPixel>:
*********************************************************************************************************
*	Func name: LCD_GetPixel
*********************************************************************************************************
*/
uint16_t LCD_GetPixel(uint16_t _usX, uint16_t _usY)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b084      	sub	sp, #16
 8006064:	af00      	add	r7, sp, #0
 8006066:	4603      	mov	r3, r0
 8006068:	460a      	mov	r2, r1
 800606a:	80fb      	strh	r3, [r7, #6]
 800606c:	4613      	mov	r3, r2
 800606e:	80bb      	strh	r3, [r7, #4]
	uint16_t usRGB;
	if (g_ChipID == IC_8875)
 8006070:	4b08      	ldr	r3, [pc, #32]	; (8006094 <LCD_GetPixel+0x34>)
 8006072:	881b      	ldrh	r3, [r3, #0]
 8006074:	2b75      	cmp	r3, #117	; 0x75
 8006076:	d107      	bne.n	8006088 <LCD_GetPixel+0x28>
	{
		usRGB = RA8875_GetPixel(_usX, _usY);
 8006078:	88ba      	ldrh	r2, [r7, #4]
 800607a:	88fb      	ldrh	r3, [r7, #6]
 800607c:	4611      	mov	r1, r2
 800607e:	4618      	mov	r0, r3
 8006080:	f7fd fc20 	bl	80038c4 <RA8875_GetPixel>
 8006084:	4603      	mov	r3, r0
 8006086:	81fb      	strh	r3, [r7, #14]
	}
	else
	{
		//usRGB = SPFD5420_GetPixel(_usX, _usY);
	}
	return usRGB;
 8006088:	89fb      	ldrh	r3, [r7, #14]
}
 800608a:	4618      	mov	r0, r3
 800608c:	3710      	adds	r7, #16
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}
 8006092:	bf00      	nop
 8006094:	20000008 	.word	0x20000008

08006098 <LCD_GetHeight>:
*********************************************************************************************************
*	Func name: LCD_GetHeight
*********************************************************************************************************
*/
uint16_t LCD_GetHeight(void)
{
 8006098:	b480      	push	{r7}
 800609a:	af00      	add	r7, sp, #0
	return g_LcdHeight;
 800609c:	4b03      	ldr	r3, [pc, #12]	; (80060ac <LCD_GetHeight+0x14>)
 800609e:	881b      	ldrh	r3, [r3, #0]
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	46bd      	mov	sp, r7
 80060a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a8:	4770      	bx	lr
 80060aa:	bf00      	nop
 80060ac:	2000000a 	.word	0x2000000a

080060b0 <LCD_GetWidth>:
*********************************************************************************************************
*	Func name: LCD_GetWidth
*********************************************************************************************************
*/
uint16_t LCD_GetWidth(void)
{
 80060b0:	b480      	push	{r7}
 80060b2:	af00      	add	r7, sp, #0
	return g_LcdWidth;
 80060b4:	4b03      	ldr	r3, [pc, #12]	; (80060c4 <LCD_GetWidth+0x14>)
 80060b6:	881b      	ldrh	r3, [r3, #0]
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	46bd      	mov	sp, r7
 80060bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c0:	4770      	bx	lr
 80060c2:	bf00      	nop
 80060c4:	2000000c 	.word	0x2000000c

080060c8 <LCD_DrawRect>:
*********************************************************************************************************
*	Func name: LCD_DrawRect
*********************************************************************************************************
*/
void LCD_DrawRect(uint16_t _usX, uint16_t _usY, uint16_t _usHeight, uint16_t _usWidth, uint16_t _usColor)
{
 80060c8:	b590      	push	{r4, r7, lr}
 80060ca:	b085      	sub	sp, #20
 80060cc:	af02      	add	r7, sp, #8
 80060ce:	4604      	mov	r4, r0
 80060d0:	4608      	mov	r0, r1
 80060d2:	4611      	mov	r1, r2
 80060d4:	461a      	mov	r2, r3
 80060d6:	4623      	mov	r3, r4
 80060d8:	80fb      	strh	r3, [r7, #6]
 80060da:	4603      	mov	r3, r0
 80060dc:	80bb      	strh	r3, [r7, #4]
 80060de:	460b      	mov	r3, r1
 80060e0:	807b      	strh	r3, [r7, #2]
 80060e2:	4613      	mov	r3, r2
 80060e4:	803b      	strh	r3, [r7, #0]
	if (g_ChipID == IC_8875)
 80060e6:	4b08      	ldr	r3, [pc, #32]	; (8006108 <LCD_DrawRect+0x40>)
 80060e8:	881b      	ldrh	r3, [r3, #0]
 80060ea:	2b75      	cmp	r3, #117	; 0x75
 80060ec:	d108      	bne.n	8006100 <LCD_DrawRect+0x38>
	{
		RA8875_DrawRect(_usX, _usY, _usHeight, _usWidth, _usColor);
 80060ee:	883c      	ldrh	r4, [r7, #0]
 80060f0:	887a      	ldrh	r2, [r7, #2]
 80060f2:	88b9      	ldrh	r1, [r7, #4]
 80060f4:	88f8      	ldrh	r0, [r7, #6]
 80060f6:	8b3b      	ldrh	r3, [r7, #24]
 80060f8:	9300      	str	r3, [sp, #0]
 80060fa:	4623      	mov	r3, r4
 80060fc:	f7fd fc56 	bl	80039ac <RA8875_DrawRect>
	}
	else
	{
		//SPFD5420_DrawRect(_usX, _usY, _usHeight, _usWidth, _usColor);
	}
}
 8006100:	bf00      	nop
 8006102:	370c      	adds	r7, #12
 8006104:	46bd      	mov	sp, r7
 8006106:	bd90      	pop	{r4, r7, pc}
 8006108:	20000008 	.word	0x20000008

0800610c <LCD_DrawCircle>:
*********************************************************************************************************
*	Func name: LCD_DrawCircle
*********************************************************************************************************
*/
void LCD_DrawCircle(uint16_t _usX, uint16_t _usY, uint16_t _usRadius, uint16_t _usColor)
{
 800610c:	b590      	push	{r4, r7, lr}
 800610e:	b083      	sub	sp, #12
 8006110:	af00      	add	r7, sp, #0
 8006112:	4604      	mov	r4, r0
 8006114:	4608      	mov	r0, r1
 8006116:	4611      	mov	r1, r2
 8006118:	461a      	mov	r2, r3
 800611a:	4623      	mov	r3, r4
 800611c:	80fb      	strh	r3, [r7, #6]
 800611e:	4603      	mov	r3, r0
 8006120:	80bb      	strh	r3, [r7, #4]
 8006122:	460b      	mov	r3, r1
 8006124:	807b      	strh	r3, [r7, #2]
 8006126:	4613      	mov	r3, r2
 8006128:	803b      	strh	r3, [r7, #0]
	if (g_ChipID == IC_8875)
 800612a:	4b07      	ldr	r3, [pc, #28]	; (8006148 <LCD_DrawCircle+0x3c>)
 800612c:	881b      	ldrh	r3, [r3, #0]
 800612e:	2b75      	cmp	r3, #117	; 0x75
 8006130:	d105      	bne.n	800613e <LCD_DrawCircle+0x32>
	{
		RA8875_DrawCircle(_usX, _usY, _usRadius, _usColor);
 8006132:	883b      	ldrh	r3, [r7, #0]
 8006134:	887a      	ldrh	r2, [r7, #2]
 8006136:	88b9      	ldrh	r1, [r7, #4]
 8006138:	88f8      	ldrh	r0, [r7, #6]
 800613a:	f7fd fcb5 	bl	8003aa8 <RA8875_DrawCircle>
	}
	else
	{
		//SPFD5420_DrawCircle(_usX, _usY, _usRadius, _usColor);
	}
}
 800613e:	bf00      	nop
 8006140:	370c      	adds	r7, #12
 8006142:	46bd      	mov	sp, r7
 8006144:	bd90      	pop	{r4, r7, pc}
 8006146:	bf00      	nop
 8006148:	20000008 	.word	0x20000008

0800614c <LCD_GetChipDescribe>:
*********************************************************************************************************
*	Func name: LCD_GetChipDescribe
*********************************************************************************************************
*/
void LCD_GetChipDescribe(char *_str)
{
 800614c:	b480      	push	{r7}
 800614e:	b083      	sub	sp, #12
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
	switch (g_ChipID)
 8006154:	4b26      	ldr	r3, [pc, #152]	; (80061f0 <LCD_GetChipDescribe+0xa4>)
 8006156:	881b      	ldrh	r3, [r3, #0]
 8006158:	f24b 5209 	movw	r2, #46345	; 0xb509
 800615c:	4293      	cmp	r3, r2
 800615e:	d026      	beq.n	80061ae <LCD_GetChipDescribe+0x62>
 8006160:	f24b 5209 	movw	r2, #46345	; 0xb509
 8006164:	4293      	cmp	r3, r2
 8006166:	dc33      	bgt.n	80061d0 <LCD_GetChipDescribe+0x84>
 8006168:	f245 4220 	movw	r2, #21536	; 0x5420
 800616c:	4293      	cmp	r3, r2
 800616e:	d00a      	beq.n	8006186 <LCD_GetChipDescribe+0x3a>
 8006170:	f245 4220 	movw	r2, #21536	; 0x5420
 8006174:	4293      	cmp	r3, r2
 8006176:	dc2b      	bgt.n	80061d0 <LCD_GetChipDescribe+0x84>
 8006178:	2b75      	cmp	r3, #117	; 0x75
 800617a:	d020      	beq.n	80061be <LCD_GetChipDescribe+0x72>
 800617c:	f244 0201 	movw	r2, #16385	; 0x4001
 8006180:	4293      	cmp	r3, r2
 8006182:	d00a      	beq.n	800619a <LCD_GetChipDescribe+0x4e>
 8006184:	e024      	b.n	80061d0 <LCD_GetChipDescribe+0x84>
	{
		case IC_5420:
			strcpy(_str, CHIP_STR_5420);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	491a      	ldr	r1, [pc, #104]	; (80061f4 <LCD_GetChipDescribe+0xa8>)
 800618a:	461a      	mov	r2, r3
 800618c:	460b      	mov	r3, r1
 800618e:	cb03      	ldmia	r3!, {r0, r1}
 8006190:	6010      	str	r0, [r2, #0]
 8006192:	6051      	str	r1, [r2, #4]
 8006194:	881b      	ldrh	r3, [r3, #0]
 8006196:	8113      	strh	r3, [r2, #8]
		break;
 8006198:	e023      	b.n	80061e2 <LCD_GetChipDescribe+0x96>

		case IC_4001:
			strcpy(_str, CHIP_STR_4001);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	4916      	ldr	r1, [pc, #88]	; (80061f8 <LCD_GetChipDescribe+0xac>)
 800619e:	461a      	mov	r2, r3
 80061a0:	460b      	mov	r3, r1
 80061a2:	cb03      	ldmia	r3!, {r0, r1}
 80061a4:	6010      	str	r0, [r2, #0]
 80061a6:	6051      	str	r1, [r2, #4]
 80061a8:	781b      	ldrb	r3, [r3, #0]
 80061aa:	7213      	strb	r3, [r2, #8]
		break;
 80061ac:	e019      	b.n	80061e2 <LCD_GetChipDescribe+0x96>

		case IC_61509:
			strcpy(_str, CHIP_STR_61509);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	4912      	ldr	r1, [pc, #72]	; (80061fc <LCD_GetChipDescribe+0xb0>)
 80061b2:	461a      	mov	r2, r3
 80061b4:	460b      	mov	r3, r1
 80061b6:	cb03      	ldmia	r3!, {r0, r1}
 80061b8:	6010      	str	r0, [r2, #0]
 80061ba:	6051      	str	r1, [r2, #4]
		break;
 80061bc:	e011      	b.n	80061e2 <LCD_GetChipDescribe+0x96>

		case IC_8875:
			strcpy(_str, CHIP_STR_8875);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	4a0f      	ldr	r2, [pc, #60]	; (8006200 <LCD_GetChipDescribe+0xb4>)
 80061c2:	6810      	ldr	r0, [r2, #0]
 80061c4:	6018      	str	r0, [r3, #0]
 80061c6:	8891      	ldrh	r1, [r2, #4]
 80061c8:	7992      	ldrb	r2, [r2, #6]
 80061ca:	8099      	strh	r1, [r3, #4]
 80061cc:	719a      	strb	r2, [r3, #6]
		break;
 80061ce:	e008      	b.n	80061e2 <LCD_GetChipDescribe+0x96>

		default:
			strcpy(_str, "Unknow");
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	4a0c      	ldr	r2, [pc, #48]	; (8006204 <LCD_GetChipDescribe+0xb8>)
 80061d4:	6810      	ldr	r0, [r2, #0]
 80061d6:	6018      	str	r0, [r3, #0]
 80061d8:	8891      	ldrh	r1, [r2, #4]
 80061da:	7992      	ldrb	r2, [r2, #6]
 80061dc:	8099      	strh	r1, [r3, #4]
 80061de:	719a      	strb	r2, [r3, #6]
		break;
 80061e0:	bf00      	nop
	}
}
 80061e2:	bf00      	nop
 80061e4:	370c      	adds	r7, #12
 80061e6:	46bd      	mov	sp, r7
 80061e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ec:	4770      	bx	lr
 80061ee:	bf00      	nop
 80061f0:	20000008 	.word	0x20000008
 80061f4:	0800b710 	.word	0x0800b710
 80061f8:	0800b71c 	.word	0x0800b71c
 80061fc:	0800b728 	.word	0x0800b728
 8006200:	0800b730 	.word	0x0800b730
 8006204:	0800b738 	.word	0x0800b738

08006208 <LCD_Fill_Rect>:
*********************************************************************************************************
*	Func name: LCD_Fill_Rect
*********************************************************************************************************
*/
void LCD_Fill_Rect(uint16_t _usX, uint16_t _usY, uint16_t _usHeight, uint16_t _usWidth, uint16_t _usColor)
{
 8006208:	b590      	push	{r4, r7, lr}
 800620a:	b085      	sub	sp, #20
 800620c:	af02      	add	r7, sp, #8
 800620e:	4604      	mov	r4, r0
 8006210:	4608      	mov	r0, r1
 8006212:	4611      	mov	r1, r2
 8006214:	461a      	mov	r2, r3
 8006216:	4623      	mov	r3, r4
 8006218:	80fb      	strh	r3, [r7, #6]
 800621a:	4603      	mov	r3, r0
 800621c:	80bb      	strh	r3, [r7, #4]
 800621e:	460b      	mov	r3, r1
 8006220:	807b      	strh	r3, [r7, #2]
 8006222:	4613      	mov	r3, r2
 8006224:	803b      	strh	r3, [r7, #0]
	uint16_t i;

	if (g_ChipID == IC_8875)
 8006226:	4b08      	ldr	r3, [pc, #32]	; (8006248 <LCD_Fill_Rect+0x40>)
 8006228:	881b      	ldrh	r3, [r3, #0]
 800622a:	2b75      	cmp	r3, #117	; 0x75
 800622c:	d108      	bne.n	8006240 <LCD_Fill_Rect+0x38>
	{
		RA8875_FillRect(_usX, _usY, _usHeight, _usWidth, _usColor);
 800622e:	883c      	ldrh	r4, [r7, #0]
 8006230:	887a      	ldrh	r2, [r7, #2]
 8006232:	88b9      	ldrh	r1, [r7, #4]
 8006234:	88f8      	ldrh	r0, [r7, #6]
 8006236:	8b3b      	ldrh	r3, [r7, #24]
 8006238:	9300      	str	r3, [sp, #0]
 800623a:	4623      	mov	r3, r4
 800623c:	f7fd fcf2 	bl	8003c24 <RA8875_FillRect>
		//for (i = 0; i < _usHeight; i++)
		//{
			//SPFD5420_DrawHLine(_usX, _usY, _usX + _usWidth - 1, _usColor);
		//}
	}
}
 8006240:	bf00      	nop
 8006242:	370c      	adds	r7, #12
 8006244:	46bd      	mov	sp, r7
 8006246:	bd90      	pop	{r4, r7, pc}
 8006248:	20000008 	.word	0x20000008

0800624c <LCD_DrawButton>:
*********************************************************************************************************
* Func name: LCD_DrawEdit
*********************************************************************************************************
*/
void LCD_DrawButton(BUTTON_T *_pBtn)
{
 800624c:	b590      	push	{r4, r7, lr}
 800624e:	b087      	sub	sp, #28
 8006250:	af02      	add	r7, sp, #8
 8006252:	6078      	str	r0, [r7, #4]
#if 1
	uint16_t len, fwidth, x, y;

	if (_pBtn->Focus == 1)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	7d1b      	ldrb	r3, [r3, #20]
 8006258:	2b01      	cmp	r3, #1
 800625a:	d14b      	bne.n	80062f4 <LCD_DrawButton+0xa8>
	{
		LCD_DrawRect(_pBtn->Left, _pBtn->Top, _pBtn->Height, _pBtn->Width, BUTTON_BORDER_COLOR);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	8858      	ldrh	r0, [r3, #2]
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	8899      	ldrh	r1, [r3, #4]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	88da      	ldrh	r2, [r3, #6]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	891b      	ldrh	r3, [r3, #8]
 800626c:	2410      	movs	r4, #16
 800626e:	9400      	str	r4, [sp, #0]
 8006270:	f7ff ff2a 	bl	80060c8 <LCD_DrawRect>
		LCD_DrawRect(_pBtn->Left + 1, _pBtn->Top + 1, _pBtn->Height - 2, _pBtn->Width - 2, BUTTON_BORDER1_COLOR);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	885b      	ldrh	r3, [r3, #2]
 8006278:	3301      	adds	r3, #1
 800627a:	b298      	uxth	r0, r3
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	889b      	ldrh	r3, [r3, #4]
 8006280:	3301      	adds	r3, #1
 8006282:	b299      	uxth	r1, r3
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	88db      	ldrh	r3, [r3, #6]
 8006288:	3b02      	subs	r3, #2
 800628a:	b29a      	uxth	r2, r3
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	891b      	ldrh	r3, [r3, #8]
 8006290:	3b02      	subs	r3, #2
 8006292:	b29b      	uxth	r3, r3
 8006294:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8006298:	9400      	str	r4, [sp, #0]
 800629a:	f7ff ff15 	bl	80060c8 <LCD_DrawRect>
		LCD_DrawRect(_pBtn->Left + 2, _pBtn->Top + 2, _pBtn->Height - 4, _pBtn->Width - 4, BUTTON_BORDER2_COLOR);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	885b      	ldrh	r3, [r3, #2]
 80062a2:	3302      	adds	r3, #2
 80062a4:	b298      	uxth	r0, r3
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	889b      	ldrh	r3, [r3, #4]
 80062aa:	3302      	adds	r3, #2
 80062ac:	b299      	uxth	r1, r3
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	88db      	ldrh	r3, [r3, #6]
 80062b2:	3b04      	subs	r3, #4
 80062b4:	b29a      	uxth	r2, r3
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	891b      	ldrh	r3, [r3, #8]
 80062ba:	3b04      	subs	r3, #4
 80062bc:	b29b      	uxth	r3, r3
 80062be:	f249 44b2 	movw	r4, #38066	; 0x94b2
 80062c2:	9400      	str	r4, [sp, #0]
 80062c4:	f7ff ff00 	bl	80060c8 <LCD_DrawRect>

		LCD_Fill_Rect(_pBtn->Left + 3, _pBtn->Top + 3, _pBtn->Height - 6, _pBtn->Width - 6, BUTTON_ACTIVE_COLOR);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	885b      	ldrh	r3, [r3, #2]
 80062cc:	3303      	adds	r3, #3
 80062ce:	b298      	uxth	r0, r3
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	889b      	ldrh	r3, [r3, #4]
 80062d4:	3303      	adds	r3, #3
 80062d6:	b299      	uxth	r1, r3
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	88db      	ldrh	r3, [r3, #6]
 80062dc:	3b06      	subs	r3, #6
 80062de:	b29a      	uxth	r2, r3
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	891b      	ldrh	r3, [r3, #8]
 80062e4:	3b06      	subs	r3, #6
 80062e6:	b29b      	uxth	r3, r3
 80062e8:	f647 74ff 	movw	r4, #32767	; 0x7fff
 80062ec:	9400      	str	r4, [sp, #0]
 80062ee:	f7ff ff8b 	bl	8006208 <LCD_Fill_Rect>
 80062f2:	e04a      	b.n	800638a <LCD_DrawButton+0x13e>
	}
	else
	{
		LCD_DrawRect(_pBtn->Left, _pBtn->Top, _pBtn->Height, _pBtn->Width, BUTTON_BORDER_COLOR);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	8858      	ldrh	r0, [r3, #2]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	8899      	ldrh	r1, [r3, #4]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	88da      	ldrh	r2, [r3, #6]
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	891b      	ldrh	r3, [r3, #8]
 8006304:	2410      	movs	r4, #16
 8006306:	9400      	str	r4, [sp, #0]
 8006308:	f7ff fede 	bl	80060c8 <LCD_DrawRect>
		LCD_DrawRect(_pBtn->Left + 1, _pBtn->Top + 1, _pBtn->Height - 2, _pBtn->Width - 2, BUTTON_BORDER1_COLOR);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	885b      	ldrh	r3, [r3, #2]
 8006310:	3301      	adds	r3, #1
 8006312:	b298      	uxth	r0, r3
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	889b      	ldrh	r3, [r3, #4]
 8006318:	3301      	adds	r3, #1
 800631a:	b299      	uxth	r1, r3
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	88db      	ldrh	r3, [r3, #6]
 8006320:	3b02      	subs	r3, #2
 8006322:	b29a      	uxth	r2, r3
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	891b      	ldrh	r3, [r3, #8]
 8006328:	3b02      	subs	r3, #2
 800632a:	b29b      	uxth	r3, r3
 800632c:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8006330:	9400      	str	r4, [sp, #0]
 8006332:	f7ff fec9 	bl	80060c8 <LCD_DrawRect>
		LCD_DrawRect(_pBtn->Left + 2, _pBtn->Top + 2, _pBtn->Height - 4, _pBtn->Width - 4, BUTTON_BORDER2_COLOR);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	885b      	ldrh	r3, [r3, #2]
 800633a:	3302      	adds	r3, #2
 800633c:	b298      	uxth	r0, r3
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	889b      	ldrh	r3, [r3, #4]
 8006342:	3302      	adds	r3, #2
 8006344:	b299      	uxth	r1, r3
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	88db      	ldrh	r3, [r3, #6]
 800634a:	3b04      	subs	r3, #4
 800634c:	b29a      	uxth	r2, r3
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	891b      	ldrh	r3, [r3, #8]
 8006352:	3b04      	subs	r3, #4
 8006354:	b29b      	uxth	r3, r3
 8006356:	f249 44b2 	movw	r4, #38066	; 0x94b2
 800635a:	9400      	str	r4, [sp, #0]
 800635c:	f7ff feb4 	bl	80060c8 <LCD_DrawRect>

		LCD_Fill_Rect(_pBtn->Left + 3, _pBtn->Top + 3, _pBtn->Height - 6, _pBtn->Width - 6, BUTTON_BACK_COLOR);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	885b      	ldrh	r3, [r3, #2]
 8006364:	3303      	adds	r3, #3
 8006366:	b298      	uxth	r0, r3
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	889b      	ldrh	r3, [r3, #4]
 800636c:	3303      	adds	r3, #3
 800636e:	b299      	uxth	r1, r3
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	88db      	ldrh	r3, [r3, #6]
 8006374:	3b06      	subs	r3, #6
 8006376:	b29a      	uxth	r2, r3
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	891b      	ldrh	r3, [r3, #8]
 800637c:	3b06      	subs	r3, #6
 800637e:	b29b      	uxth	r3, r3
 8006380:	f64c 6459 	movw	r4, #52825	; 0xce59
 8006384:	9400      	str	r4, [sp, #0]
 8006386:	f7ff ff3f 	bl	8006208 <LCD_Fill_Rect>
	}

	len = strlen(_pBtn->pCaption);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	691b      	ldr	r3, [r3, #16]
 800638e:	4618      	mov	r0, r3
 8006390:	f7f9 ff6e 	bl	8000270 <strlen>
 8006394:	4603      	mov	r3, r0
 8006396:	81bb      	strh	r3, [r7, #12]

	if (_pBtn->Font->FontCode == FC_ST_16)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	68db      	ldr	r3, [r3, #12]
 800639c:	881b      	ldrh	r3, [r3, #0]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d102      	bne.n	80063a8 <LCD_DrawButton+0x15c>
	{
		fwidth = 8;
 80063a2:	2308      	movs	r3, #8
 80063a4:	81fb      	strh	r3, [r7, #14]
 80063a6:	e009      	b.n	80063bc <LCD_DrawButton+0x170>
	}
	else if(_pBtn->Font->FontCode == FC_ST_12)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	68db      	ldr	r3, [r3, #12]
 80063ac:	881b      	ldrh	r3, [r3, #0]
 80063ae:	2b01      	cmp	r3, #1
 80063b0:	d102      	bne.n	80063b8 <LCD_DrawButton+0x16c>
	{
		fwidth = 6;
 80063b2:	2306      	movs	r3, #6
 80063b4:	81fb      	strh	r3, [r7, #14]
 80063b6:	e001      	b.n	80063bc <LCD_DrawButton+0x170>
	}
	else
	{
		fwidth = 8;
 80063b8:	2308      	movs	r3, #8
 80063ba:	81fb      	strh	r3, [r7, #14]
	}
	x = _pBtn->Left + _pBtn->Width / 2 - (len * fwidth) / 2;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	885a      	ldrh	r2, [r3, #2]
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	891b      	ldrh	r3, [r3, #8]
 80063c4:	085b      	lsrs	r3, r3, #1
 80063c6:	b29b      	uxth	r3, r3
 80063c8:	4413      	add	r3, r2
 80063ca:	b29a      	uxth	r2, r3
 80063cc:	89bb      	ldrh	r3, [r7, #12]
 80063ce:	89f9      	ldrh	r1, [r7, #14]
 80063d0:	fb01 f303 	mul.w	r3, r1, r3
 80063d4:	0fd9      	lsrs	r1, r3, #31
 80063d6:	440b      	add	r3, r1
 80063d8:	105b      	asrs	r3, r3, #1
 80063da:	425b      	negs	r3, r3
 80063dc:	b29b      	uxth	r3, r3
 80063de:	4413      	add	r3, r2
 80063e0:	817b      	strh	r3, [r7, #10]
	y = _pBtn->Top + _pBtn->Height / 2 - fwidth;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	889a      	ldrh	r2, [r3, #4]
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	88db      	ldrh	r3, [r3, #6]
 80063ea:	085b      	lsrs	r3, r3, #1
 80063ec:	b29b      	uxth	r3, r3
 80063ee:	4413      	add	r3, r2
 80063f0:	b29a      	uxth	r2, r3
 80063f2:	89fb      	ldrh	r3, [r7, #14]
 80063f4:	1ad3      	subs	r3, r2, r3
 80063f6:	813b      	strh	r3, [r7, #8]

	LCD_DispStr(x, y, _pBtn->pCaption, _pBtn->Font);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	691a      	ldr	r2, [r3, #16]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	68db      	ldr	r3, [r3, #12]
 8006400:	8939      	ldrh	r1, [r7, #8]
 8006402:	8978      	ldrh	r0, [r7, #10]
 8006404:	f7ff fb5c 	bl	8005ac0 <LCD_DispStr>
#endif
}
 8006408:	bf00      	nop
 800640a:	3714      	adds	r7, #20
 800640c:	46bd      	mov	sp, r7
 800640e:	bd90      	pop	{r4, r7, pc}

08006410 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006410:	b480      	push	{r7}
 8006412:	b083      	sub	sp, #12
 8006414:	af00      	add	r7, sp, #0
 8006416:	4603      	mov	r3, r0
 8006418:	6039      	str	r1, [r7, #0]
 800641a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800641c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006420:	2b00      	cmp	r3, #0
 8006422:	db0a      	blt.n	800643a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	b2da      	uxtb	r2, r3
 8006428:	490c      	ldr	r1, [pc, #48]	; (800645c <__NVIC_SetPriority+0x4c>)
 800642a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800642e:	0112      	lsls	r2, r2, #4
 8006430:	b2d2      	uxtb	r2, r2
 8006432:	440b      	add	r3, r1
 8006434:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006438:	e00a      	b.n	8006450 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	b2da      	uxtb	r2, r3
 800643e:	4908      	ldr	r1, [pc, #32]	; (8006460 <__NVIC_SetPriority+0x50>)
 8006440:	79fb      	ldrb	r3, [r7, #7]
 8006442:	f003 030f 	and.w	r3, r3, #15
 8006446:	3b04      	subs	r3, #4
 8006448:	0112      	lsls	r2, r2, #4
 800644a:	b2d2      	uxtb	r2, r2
 800644c:	440b      	add	r3, r1
 800644e:	761a      	strb	r2, [r3, #24]
}
 8006450:	bf00      	nop
 8006452:	370c      	adds	r7, #12
 8006454:	46bd      	mov	sp, r7
 8006456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645a:	4770      	bx	lr
 800645c:	e000e100 	.word	0xe000e100
 8006460:	e000ed00 	.word	0xe000ed00

08006464 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b082      	sub	sp, #8
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	3b01      	subs	r3, #1
 8006470:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006474:	d301      	bcc.n	800647a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006476:	2301      	movs	r3, #1
 8006478:	e00f      	b.n	800649a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800647a:	4a0a      	ldr	r2, [pc, #40]	; (80064a4 <SysTick_Config+0x40>)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	3b01      	subs	r3, #1
 8006480:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006482:	210f      	movs	r1, #15
 8006484:	f04f 30ff 	mov.w	r0, #4294967295
 8006488:	f7ff ffc2 	bl	8006410 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800648c:	4b05      	ldr	r3, [pc, #20]	; (80064a4 <SysTick_Config+0x40>)
 800648e:	2200      	movs	r2, #0
 8006490:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006492:	4b04      	ldr	r3, [pc, #16]	; (80064a4 <SysTick_Config+0x40>)
 8006494:	2207      	movs	r2, #7
 8006496:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006498:	2300      	movs	r3, #0
}
 800649a:	4618      	mov	r0, r3
 800649c:	3708      	adds	r7, #8
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}
 80064a2:	bf00      	nop
 80064a4:	e000e010 	.word	0xe000e010

080064a8 <bsp_InitTimer>:
*	ÐÎ    ²Î:  ÎÞ
*	·µ »Ø Öµ: ÎÞ
*********************************************************************************************************
*/
void bsp_InitTimer(void)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b082      	sub	sp, #8
 80064ac:	af00      	add	r7, sp, #0
	uint8_t i;

	/* ÇåÁãËùÓÐµÄÈí¼þ¶¨Ê±Æ÷ */
	for (i = 0; i < TMR_COUNT; i++)
 80064ae:	2300      	movs	r3, #0
 80064b0:	71fb      	strb	r3, [r7, #7]
 80064b2:	e029      	b.n	8006508 <bsp_InitTimer+0x60>
	{
		s_tTmr[i].Count = 0;
 80064b4:	79fa      	ldrb	r2, [r7, #7]
 80064b6:	491c      	ldr	r1, [pc, #112]	; (8006528 <bsp_InitTimer+0x80>)
 80064b8:	4613      	mov	r3, r2
 80064ba:	005b      	lsls	r3, r3, #1
 80064bc:	4413      	add	r3, r2
 80064be:	009b      	lsls	r3, r3, #2
 80064c0:	440b      	add	r3, r1
 80064c2:	3304      	adds	r3, #4
 80064c4:	2200      	movs	r2, #0
 80064c6:	601a      	str	r2, [r3, #0]
		s_tTmr[i].PreLoad = 0;
 80064c8:	79fa      	ldrb	r2, [r7, #7]
 80064ca:	4917      	ldr	r1, [pc, #92]	; (8006528 <bsp_InitTimer+0x80>)
 80064cc:	4613      	mov	r3, r2
 80064ce:	005b      	lsls	r3, r3, #1
 80064d0:	4413      	add	r3, r2
 80064d2:	009b      	lsls	r3, r3, #2
 80064d4:	440b      	add	r3, r1
 80064d6:	3308      	adds	r3, #8
 80064d8:	2200      	movs	r2, #0
 80064da:	601a      	str	r2, [r3, #0]
		s_tTmr[i].Flag = 0;
 80064dc:	79fa      	ldrb	r2, [r7, #7]
 80064de:	4912      	ldr	r1, [pc, #72]	; (8006528 <bsp_InitTimer+0x80>)
 80064e0:	4613      	mov	r3, r2
 80064e2:	005b      	lsls	r3, r3, #1
 80064e4:	4413      	add	r3, r2
 80064e6:	009b      	lsls	r3, r3, #2
 80064e8:	440b      	add	r3, r1
 80064ea:	3301      	adds	r3, #1
 80064ec:	2200      	movs	r2, #0
 80064ee:	701a      	strb	r2, [r3, #0]
		s_tTmr[i].Mode = TMR_ONCE_MODE;	/* È±Ê¡ÊÇ1´ÎÐÔ¹¤×÷Ä£Ê½ */
 80064f0:	79fa      	ldrb	r2, [r7, #7]
 80064f2:	490d      	ldr	r1, [pc, #52]	; (8006528 <bsp_InitTimer+0x80>)
 80064f4:	4613      	mov	r3, r2
 80064f6:	005b      	lsls	r3, r3, #1
 80064f8:	4413      	add	r3, r2
 80064fa:	009b      	lsls	r3, r3, #2
 80064fc:	440b      	add	r3, r1
 80064fe:	2200      	movs	r2, #0
 8006500:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TMR_COUNT; i++)
 8006502:	79fb      	ldrb	r3, [r7, #7]
 8006504:	3301      	adds	r3, #1
 8006506:	71fb      	strb	r3, [r7, #7]
 8006508:	79fb      	ldrb	r3, [r7, #7]
 800650a:	2b03      	cmp	r3, #3
 800650c:	d9d2      	bls.n	80064b4 <bsp_InitTimer+0xc>
	    	-- SystemCoreClock / 500   ±íÊ¾¶¨Ê±ÆµÂÊÎª 500Hz£¬  Ò²¾ÍÊÇ¶¨Ê±ÖÜÆÚÎª  2ms
	    	-- SystemCoreClock / 2000  ±íÊ¾¶¨Ê±ÆµÂÊÎª 2000Hz£¬ Ò²¾ÍÊÇ¶¨Ê±ÖÜÆÚÎª  500us

    	¶ÔÓÚ³£¹æµÄÓ¦ÓÃ£¬ÎÒÃÇÒ»°ãÈ¡¶¨Ê±ÖÜÆÚ1ms¡£¶ÔÓÚµÍËÙCPU»òÕßµÍ¹¦ºÄÓ¦ÓÃ£¬¿ÉÒÔÉèÖÃ¶¨Ê±ÖÜÆÚÎª 10ms
    */
	SysTick_Config(SystemCoreClock / 1000);
 800650e:	4b07      	ldr	r3, [pc, #28]	; (800652c <bsp_InitTimer+0x84>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	4a07      	ldr	r2, [pc, #28]	; (8006530 <bsp_InitTimer+0x88>)
 8006514:	fba2 2303 	umull	r2, r3, r2, r3
 8006518:	099b      	lsrs	r3, r3, #6
 800651a:	4618      	mov	r0, r3
 800651c:	f7ff ffa2 	bl	8006464 <SysTick_Config>
}
 8006520:	bf00      	nop
 8006522:	3708      	adds	r7, #8
 8006524:	46bd      	mov	sp, r7
 8006526:	bd80      	pop	{r7, pc}
 8006528:	20000b7c 	.word	0x20000b7c
 800652c:	20000000 	.word	0x20000000
 8006530:	10624dd3 	.word	0x10624dd3

08006534 <SysTick_ISR>:
*********************************************************************************************************
*/
extern void bsp_RunPer1ms(void);
extern void bsp_RunPer10ms(void);
void SysTick_ISR(void)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b082      	sub	sp, #8
 8006538:	af00      	add	r7, sp, #0
	static uint8_t s_count = 0;
	uint8_t i;

	/* Ã¿¸ô1ms½øÀ´1´Î £¨½öÓÃÓÚ bsp_DelayMS£© */
	if (s_uiDelayCount > 0)
 800653a:	4b21      	ldr	r3, [pc, #132]	; (80065c0 <SysTick_ISR+0x8c>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d009      	beq.n	8006556 <SysTick_ISR+0x22>
	{
		if (--s_uiDelayCount == 0)
 8006542:	4b1f      	ldr	r3, [pc, #124]	; (80065c0 <SysTick_ISR+0x8c>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	3b01      	subs	r3, #1
 8006548:	4a1d      	ldr	r2, [pc, #116]	; (80065c0 <SysTick_ISR+0x8c>)
 800654a:	6013      	str	r3, [r2, #0]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d102      	bne.n	8006556 <SysTick_ISR+0x22>
		{
			s_ucTimeOutFlag = 1;
 8006550:	4b1c      	ldr	r3, [pc, #112]	; (80065c4 <SysTick_ISR+0x90>)
 8006552:	2201      	movs	r2, #1
 8006554:	701a      	strb	r2, [r3, #0]
		}
	}

	/* Ã¿¸ô1ms£¬¶ÔÈí¼þ¶¨Ê±Æ÷µÄ¼ÆÊýÆ÷½øÐÐ¼õÒ»²Ù×÷ */
	for (i = 0; i < TMR_COUNT; i++)
 8006556:	2300      	movs	r3, #0
 8006558:	71fb      	strb	r3, [r7, #7]
 800655a:	e00c      	b.n	8006576 <SysTick_ISR+0x42>
	{
		bsp_SoftTimerDec(&s_tTmr[i]);
 800655c:	79fa      	ldrb	r2, [r7, #7]
 800655e:	4613      	mov	r3, r2
 8006560:	005b      	lsls	r3, r3, #1
 8006562:	4413      	add	r3, r2
 8006564:	009b      	lsls	r3, r3, #2
 8006566:	4a18      	ldr	r2, [pc, #96]	; (80065c8 <SysTick_ISR+0x94>)
 8006568:	4413      	add	r3, r2
 800656a:	4618      	mov	r0, r3
 800656c:	f000 f832 	bl	80065d4 <bsp_SoftTimerDec>
	for (i = 0; i < TMR_COUNT; i++)
 8006570:	79fb      	ldrb	r3, [r7, #7]
 8006572:	3301      	adds	r3, #1
 8006574:	71fb      	strb	r3, [r7, #7]
 8006576:	79fb      	ldrb	r3, [r7, #7]
 8006578:	2b03      	cmp	r3, #3
 800657a:	d9ef      	bls.n	800655c <SysTick_ISR+0x28>
	}

	/* È«¾ÖÔËÐÐÊ±¼äÃ¿1msÔö1 */
	g_iRunTime++;
 800657c:	4b13      	ldr	r3, [pc, #76]	; (80065cc <SysTick_ISR+0x98>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	3301      	adds	r3, #1
 8006582:	4a12      	ldr	r2, [pc, #72]	; (80065cc <SysTick_ISR+0x98>)
 8006584:	6013      	str	r3, [r2, #0]
	if (g_iRunTime == 0x7FFFFFFF)	/* Õâ¸ö±äÁ¿ÊÇ int32_t ÀàÐÍ£¬×î´óÊýÎª 0x7FFFFFFF */
 8006586:	4b11      	ldr	r3, [pc, #68]	; (80065cc <SysTick_ISR+0x98>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800658e:	4293      	cmp	r3, r2
 8006590:	d102      	bne.n	8006598 <SysTick_ISR+0x64>
	{
		g_iRunTime = 0;
 8006592:	4b0e      	ldr	r3, [pc, #56]	; (80065cc <SysTick_ISR+0x98>)
 8006594:	2200      	movs	r2, #0
 8006596:	601a      	str	r2, [r3, #0]
	}

	bsp_RunPer1ms();		/* Ã¿¸ô1msµ÷ÓÃÒ»´Î´Ëº¯Êý£¬´Ëº¯ÊýÔÚ bsp.c */
 8006598:	f001 f842 	bl	8007620 <bsp_RunPer1ms>

	if (++s_count >= 10)
 800659c:	4b0c      	ldr	r3, [pc, #48]	; (80065d0 <SysTick_ISR+0x9c>)
 800659e:	781b      	ldrb	r3, [r3, #0]
 80065a0:	3301      	adds	r3, #1
 80065a2:	b2da      	uxtb	r2, r3
 80065a4:	4b0a      	ldr	r3, [pc, #40]	; (80065d0 <SysTick_ISR+0x9c>)
 80065a6:	701a      	strb	r2, [r3, #0]
 80065a8:	4b09      	ldr	r3, [pc, #36]	; (80065d0 <SysTick_ISR+0x9c>)
 80065aa:	781b      	ldrb	r3, [r3, #0]
 80065ac:	2b09      	cmp	r3, #9
 80065ae:	d902      	bls.n	80065b6 <SysTick_ISR+0x82>
	{
		s_count = 0;
 80065b0:	4b07      	ldr	r3, [pc, #28]	; (80065d0 <SysTick_ISR+0x9c>)
 80065b2:	2200      	movs	r2, #0
 80065b4:	701a      	strb	r2, [r3, #0]

		//bsp_RunPer10ms();	/* Ã¿¸ô10msµ÷ÓÃÒ»´Î´Ëº¯Êý£¬´Ëº¯ÊýÔÚ bsp.c */
	}
}
 80065b6:	bf00      	nop
 80065b8:	3708      	adds	r7, #8
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd80      	pop	{r7, pc}
 80065be:	bf00      	nop
 80065c0:	20000b74 	.word	0x20000b74
 80065c4:	20000b78 	.word	0x20000b78
 80065c8:	20000b7c 	.word	0x20000b7c
 80065cc:	20000bac 	.word	0x20000bac
 80065d0:	20000bb0 	.word	0x20000bb0

080065d4 <bsp_SoftTimerDec>:
*	ÐÎ    ²Î:  _tmr : ¶¨Ê±Æ÷±äÁ¿Ö¸Õë
*	·µ »Ø Öµ: ÎÞ
*********************************************************************************************************
*/
static void bsp_SoftTimerDec(SOFT_TMR *_tmr)
{
 80065d4:	b480      	push	{r7}
 80065d6:	b083      	sub	sp, #12
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
	if (_tmr->Count > 0)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	685b      	ldr	r3, [r3, #4]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d012      	beq.n	800660a <bsp_SoftTimerDec+0x36>
	{
		/* Èç¹û¶¨Ê±Æ÷±äÁ¿¼õµ½1ÔòÉèÖÃ¶¨Ê±Æ÷µ½´ï±êÖ¾ */
		if (--_tmr->Count == 0)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	685b      	ldr	r3, [r3, #4]
 80065e8:	3b01      	subs	r3, #1
 80065ea:	687a      	ldr	r2, [r7, #4]
 80065ec:	6053      	str	r3, [r2, #4]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d10b      	bne.n	800660a <bsp_SoftTimerDec+0x36>
		{
			_tmr->Flag = 1;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2201      	movs	r2, #1
 80065f6:	705a      	strb	r2, [r3, #1]

			/* Èç¹ûÊÇ×Ô¶¯Ä£Ê½£¬Ôò×Ô¶¯ÖØ×°¼ÆÊýÆ÷ */
			if(_tmr->Mode == TMR_AUTO_MODE)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	781b      	ldrb	r3, [r3, #0]
 80065fc:	b2db      	uxtb	r3, r3
 80065fe:	2b01      	cmp	r3, #1
 8006600:	d103      	bne.n	800660a <bsp_SoftTimerDec+0x36>
			{
				_tmr->Count = _tmr->PreLoad;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	689a      	ldr	r2, [r3, #8]
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	605a      	str	r2, [r3, #4]
			}
		}
	}
}
 800660a:	bf00      	nop
 800660c:	370c      	adds	r7, #12
 800660e:	46bd      	mov	sp, r7
 8006610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006614:	4770      	bx	lr
	...

08006618 <bsp_DelayMS>:
*	ÐÎ    ²Î:  n : ÑÓ³Ù³¤¶È£¬µ¥Î»1 ms¡£ n Ó¦´óÓÚ2
*	·µ »Ø Öµ: ÎÞ
*********************************************************************************************************
*/
void bsp_DelayMS(uint32_t n)
{
 8006618:	b480      	push	{r7}
 800661a:	b085      	sub	sp, #20
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
	if (n == 0)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d01c      	beq.n	8006660 <bsp_DelayMS+0x48>
	{
		return;
	}
	else if (n == 1)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2b01      	cmp	r3, #1
 800662a:	d101      	bne.n	8006630 <bsp_DelayMS+0x18>
	{
		n = 2;
 800662c:	2302      	movs	r3, #2
 800662e:	607b      	str	r3, [r7, #4]
 8006630:	2301      	movs	r3, #1
 8006632:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	f383 8810 	msr	PRIMASK, r3
}
 800663a:	bf00      	nop
	}

	DISABLE_INT();  			/* ¹ØÖÐ¶Ï */

	s_uiDelayCount = n;
 800663c:	4a0c      	ldr	r2, [pc, #48]	; (8006670 <bsp_DelayMS+0x58>)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6013      	str	r3, [r2, #0]
	s_ucTimeOutFlag = 0;
 8006642:	4b0c      	ldr	r3, [pc, #48]	; (8006674 <bsp_DelayMS+0x5c>)
 8006644:	2200      	movs	r2, #0
 8006646:	701a      	strb	r2, [r3, #0]
 8006648:	2300      	movs	r3, #0
 800664a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	f383 8810 	msr	PRIMASK, r3
}
 8006652:	bf00      	nop

		/*
			µÈ´ýÑÓ³ÙÊ±¼äµ½
			×¢Òâ£º±àÒëÆ÷ÈÏÎª s_ucTimeOutFlag = 0£¬ËùÒÔ¿ÉÄÜÓÅ»¯´íÎó£¬Òò´Ë s_ucTimeOutFlag ±äÁ¿±ØÐëÉêÃ÷Îª volatile
		*/
		if (s_ucTimeOutFlag == 1)
 8006654:	4b07      	ldr	r3, [pc, #28]	; (8006674 <bsp_DelayMS+0x5c>)
 8006656:	781b      	ldrb	r3, [r3, #0]
 8006658:	b2db      	uxtb	r3, r3
 800665a:	2b01      	cmp	r3, #1
 800665c:	d002      	beq.n	8006664 <bsp_DelayMS+0x4c>
 800665e:	e7f9      	b.n	8006654 <bsp_DelayMS+0x3c>
		return;
 8006660:	bf00      	nop
 8006662:	e000      	b.n	8006666 <bsp_DelayMS+0x4e>
		{
			break;
 8006664:	bf00      	nop
		}
	}
}
 8006666:	3714      	adds	r7, #20
 8006668:	46bd      	mov	sp, r7
 800666a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666e:	4770      	bx	lr
 8006670:	20000b74 	.word	0x20000b74
 8006674:	20000b78 	.word	0x20000b78

08006678 <TOUCH_InitHard>:
*	ÐÎ    ²Î:  ÎÞ
*	·µ »Ø Öµ: ÎÞ
*********************************************************************************************************
*/
void TOUCH_InitHard(void)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	af00      	add	r7, sp, #0
	g_tTP.Enable = 0;
 800667c:	4b0e      	ldr	r3, [pc, #56]	; (80066b8 <TOUCH_InitHard+0x40>)
 800667e:	2200      	movs	r2, #0
 8006680:	761a      	strb	r2, [r3, #24]
	if (g_ChipID == IC_8875)
 8006682:	4b0e      	ldr	r3, [pc, #56]	; (80066bc <TOUCH_InitHard+0x44>)
 8006684:	881b      	ldrh	r3, [r3, #0]
 8006686:	2b75      	cmp	r3, #117	; 0x75
 8006688:	d105      	bne.n	8006696 <TOUCH_InitHard+0x1e>
	{
		RA8875_TouchInit();
 800668a:	f7fd f97f 	bl	800398c <RA8875_TouchInit>
		g_tTP.usMaxAdc = 1023;	/* 10Î»ADC */
 800668e:	4b0a      	ldr	r3, [pc, #40]	; (80066b8 <TOUCH_InitHard+0x40>)
 8006690:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8006694:	825a      	strh	r2, [r3, #18]
	else
	{
		//TSC2046_InitHard();
		//g_tTP.usMaxAdc = 4095;	/* 12Î»ADC */
	}
	TOUCH_LoadParam();
 8006696:	f000 f813 	bl	80066c0 <TOUCH_LoadParam>
	g_tTP.Write = g_tTP.Read = 0;
 800669a:	4b07      	ldr	r3, [pc, #28]	; (80066b8 <TOUCH_InitHard+0x40>)
 800669c:	2200      	movs	r2, #0
 800669e:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 80066a2:	4b05      	ldr	r3, [pc, #20]	; (80066b8 <TOUCH_InitHard+0x40>)
 80066a4:	f893 207e 	ldrb.w	r2, [r3, #126]	; 0x7e
 80066a8:	4b03      	ldr	r3, [pc, #12]	; (80066b8 <TOUCH_InitHard+0x40>)
 80066aa:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
	g_tTP.Enable = 1;
 80066ae:	4b02      	ldr	r3, [pc, #8]	; (80066b8 <TOUCH_InitHard+0x40>)
 80066b0:	2201      	movs	r2, #1
 80066b2:	761a      	strb	r2, [r3, #24]
}
 80066b4:	bf00      	nop
 80066b6:	bd80      	pop	{r7, pc}
 80066b8:	20000bb4 	.word	0x20000bb4
 80066bc:	20000008 	.word	0x20000008

080066c0 <TOUCH_LoadParam>:
*	Func name: TOUCH_LoadParam
*********************************************************************************************************
*/
extern void LoadParam(void);
static void TOUCH_LoadParam(void)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	af00      	add	r7, sp, #0
#if 1
	LoadParam();	/* ´ÓFlashÖÐ¶ÁÈ¡²ÎÊý */
 80066c4:	f7fb fb28 	bl	8001d18 <LoadParam>

	g_tTP.usAdcX1 = g_tParam.usAdcX1;
 80066c8:	4b12      	ldr	r3, [pc, #72]	; (8006714 <TOUCH_LoadParam+0x54>)
 80066ca:	88da      	ldrh	r2, [r3, #6]
 80066cc:	4b12      	ldr	r3, [pc, #72]	; (8006718 <TOUCH_LoadParam+0x58>)
 80066ce:	801a      	strh	r2, [r3, #0]
	g_tTP.usAdcY1 = g_tParam.usAdcY1;
 80066d0:	4b10      	ldr	r3, [pc, #64]	; (8006714 <TOUCH_LoadParam+0x54>)
 80066d2:	891a      	ldrh	r2, [r3, #8]
 80066d4:	4b10      	ldr	r3, [pc, #64]	; (8006718 <TOUCH_LoadParam+0x58>)
 80066d6:	805a      	strh	r2, [r3, #2]
	g_tTP.usAdcX2 = g_tParam.usAdcX2;
 80066d8:	4b0e      	ldr	r3, [pc, #56]	; (8006714 <TOUCH_LoadParam+0x54>)
 80066da:	895a      	ldrh	r2, [r3, #10]
 80066dc:	4b0e      	ldr	r3, [pc, #56]	; (8006718 <TOUCH_LoadParam+0x58>)
 80066de:	809a      	strh	r2, [r3, #4]
	g_tTP.usAdcY2 = g_tParam.usAdcY2;
 80066e0:	4b0c      	ldr	r3, [pc, #48]	; (8006714 <TOUCH_LoadParam+0x54>)
 80066e2:	899a      	ldrh	r2, [r3, #12]
 80066e4:	4b0c      	ldr	r3, [pc, #48]	; (8006718 <TOUCH_LoadParam+0x58>)
 80066e6:	80da      	strh	r2, [r3, #6]
	g_tTP.usAdcX3 = g_tParam.usAdcX3;
 80066e8:	4b0a      	ldr	r3, [pc, #40]	; (8006714 <TOUCH_LoadParam+0x54>)
 80066ea:	89da      	ldrh	r2, [r3, #14]
 80066ec:	4b0a      	ldr	r3, [pc, #40]	; (8006718 <TOUCH_LoadParam+0x58>)
 80066ee:	811a      	strh	r2, [r3, #8]
	g_tTP.usAdcY3 = g_tParam.usAdcY3;
 80066f0:	4b08      	ldr	r3, [pc, #32]	; (8006714 <TOUCH_LoadParam+0x54>)
 80066f2:	8a1a      	ldrh	r2, [r3, #16]
 80066f4:	4b08      	ldr	r3, [pc, #32]	; (8006718 <TOUCH_LoadParam+0x58>)
 80066f6:	815a      	strh	r2, [r3, #10]
	g_tTP.usAdcX4 = g_tParam.usAdcX4;
 80066f8:	4b06      	ldr	r3, [pc, #24]	; (8006714 <TOUCH_LoadParam+0x54>)
 80066fa:	8a5a      	ldrh	r2, [r3, #18]
 80066fc:	4b06      	ldr	r3, [pc, #24]	; (8006718 <TOUCH_LoadParam+0x58>)
 80066fe:	819a      	strh	r2, [r3, #12]
	g_tTP.usAdcY4 = g_tParam.usAdcY4;
 8006700:	4b04      	ldr	r3, [pc, #16]	; (8006714 <TOUCH_LoadParam+0x54>)
 8006702:	8a9a      	ldrh	r2, [r3, #20]
 8006704:	4b04      	ldr	r3, [pc, #16]	; (8006718 <TOUCH_LoadParam+0x58>)
 8006706:	81da      	strh	r2, [r3, #14]
	g_tTP.XYChange = g_tParam.XYChange;
 8006708:	4b02      	ldr	r3, [pc, #8]	; (8006714 <TOUCH_LoadParam+0x54>)
 800670a:	8ada      	ldrh	r2, [r3, #22]
 800670c:	4b02      	ldr	r3, [pc, #8]	; (8006718 <TOUCH_LoadParam+0x58>)
 800670e:	821a      	strh	r2, [r3, #16]

#endif
}
 8006710:	bf00      	nop
 8006712:	bd80      	pop	{r7, pc}
 8006714:	20000200 	.word	0x20000200
 8006718:	20000bb4 	.word	0x20000bb4

0800671c <TOUCH_GetKey>:
*********************************************************************************************************
*	Func name: TOUCH_GetKey
*********************************************************************************************************
*/
uint8_t TOUCH_GetKey(int16_t *_pX, int16_t *_pY)
{
 800671c:	b480      	push	{r7}
 800671e:	b085      	sub	sp, #20
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
 8006724:	6039      	str	r1, [r7, #0]
	uint8_t ret;

	if (g_tTP.Read == g_tTP.Write)
 8006726:	4b20      	ldr	r3, [pc, #128]	; (80067a8 <TOUCH_GetKey+0x8c>)
 8006728:	f893 207e 	ldrb.w	r2, [r3, #126]	; 0x7e
 800672c:	4b1e      	ldr	r3, [pc, #120]	; (80067a8 <TOUCH_GetKey+0x8c>)
 800672e:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8006732:	429a      	cmp	r2, r3
 8006734:	d101      	bne.n	800673a <TOUCH_GetKey+0x1e>
	{
		return TOUCH_NONE;
 8006736:	2300      	movs	r3, #0
 8006738:	e02f      	b.n	800679a <TOUCH_GetKey+0x7e>
	}
	else
	{
		ret = g_tTP.Event[g_tTP.Read];
 800673a:	4b1b      	ldr	r3, [pc, #108]	; (80067a8 <TOUCH_GetKey+0x8c>)
 800673c:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8006740:	461a      	mov	r2, r3
 8006742:	4b19      	ldr	r3, [pc, #100]	; (80067a8 <TOUCH_GetKey+0x8c>)
 8006744:	4413      	add	r3, r2
 8006746:	7e5b      	ldrb	r3, [r3, #25]
 8006748:	73fb      	strb	r3, [r7, #15]
		*_pX = g_tTP.XBuf[g_tTP.Read];
 800674a:	4b17      	ldr	r3, [pc, #92]	; (80067a8 <TOUCH_GetKey+0x8c>)
 800674c:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8006750:	4a15      	ldr	r2, [pc, #84]	; (80067a8 <TOUCH_GetKey+0x8c>)
 8006752:	3314      	adds	r3, #20
 8006754:	005b      	lsls	r3, r3, #1
 8006756:	4413      	add	r3, r2
 8006758:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	801a      	strh	r2, [r3, #0]
		*_pY = g_tTP.YBuf[g_tTP.Read];
 8006760:	4b11      	ldr	r3, [pc, #68]	; (80067a8 <TOUCH_GetKey+0x8c>)
 8006762:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8006766:	4a10      	ldr	r2, [pc, #64]	; (80067a8 <TOUCH_GetKey+0x8c>)
 8006768:	3328      	adds	r3, #40	; 0x28
 800676a:	005b      	lsls	r3, r3, #1
 800676c:	4413      	add	r3, r2
 800676e:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	801a      	strh	r2, [r3, #0]

		if (++g_tTP.Read >= TOUCH_FIFO_SIZE)
 8006776:	4b0c      	ldr	r3, [pc, #48]	; (80067a8 <TOUCH_GetKey+0x8c>)
 8006778:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800677c:	3301      	adds	r3, #1
 800677e:	b2da      	uxtb	r2, r3
 8006780:	4b09      	ldr	r3, [pc, #36]	; (80067a8 <TOUCH_GetKey+0x8c>)
 8006782:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 8006786:	4b08      	ldr	r3, [pc, #32]	; (80067a8 <TOUCH_GetKey+0x8c>)
 8006788:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800678c:	2b13      	cmp	r3, #19
 800678e:	d903      	bls.n	8006798 <TOUCH_GetKey+0x7c>
		{
			g_tTP.Read = 0;
 8006790:	4b05      	ldr	r3, [pc, #20]	; (80067a8 <TOUCH_GetKey+0x8c>)
 8006792:	2200      	movs	r2, #0
 8006794:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
		}
		return ret;
 8006798:	7bfb      	ldrb	r3, [r7, #15]
	}
}
 800679a:	4618      	mov	r0, r3
 800679c:	3714      	adds	r7, #20
 800679e:	46bd      	mov	sp, r7
 80067a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a4:	4770      	bx	lr
 80067a6:	bf00      	nop
 80067a8:	20000bb4 	.word	0x20000bb4

080067ac <TOUCH_InRect>:
*	Func name: TOUCH_InRect
*********************************************************************************************************
*/
uint8_t TOUCH_InRect(uint16_t _usX, uint16_t _usY,
	uint16_t _usRectX, uint16_t _usRectY, uint16_t _usRectH, uint16_t _usRectW)
{
 80067ac:	b490      	push	{r4, r7}
 80067ae:	b082      	sub	sp, #8
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	4604      	mov	r4, r0
 80067b4:	4608      	mov	r0, r1
 80067b6:	4611      	mov	r1, r2
 80067b8:	461a      	mov	r2, r3
 80067ba:	4623      	mov	r3, r4
 80067bc:	80fb      	strh	r3, [r7, #6]
 80067be:	4603      	mov	r3, r0
 80067c0:	80bb      	strh	r3, [r7, #4]
 80067c2:	460b      	mov	r3, r1
 80067c4:	807b      	strh	r3, [r7, #2]
 80067c6:	4613      	mov	r3, r2
 80067c8:	803b      	strh	r3, [r7, #0]
	if ((_usX > _usRectX) && (_usX < _usRectX + _usRectW)
 80067ca:	88fa      	ldrh	r2, [r7, #6]
 80067cc:	887b      	ldrh	r3, [r7, #2]
 80067ce:	429a      	cmp	r2, r3
 80067d0:	d911      	bls.n	80067f6 <TOUCH_InRect+0x4a>
 80067d2:	88fa      	ldrh	r2, [r7, #6]
 80067d4:	8879      	ldrh	r1, [r7, #2]
 80067d6:	8abb      	ldrh	r3, [r7, #20]
 80067d8:	440b      	add	r3, r1
 80067da:	429a      	cmp	r2, r3
 80067dc:	da0b      	bge.n	80067f6 <TOUCH_InRect+0x4a>
		&& (_usY > _usRectY) && (_usY < _usRectY + _usRectH))
 80067de:	88ba      	ldrh	r2, [r7, #4]
 80067e0:	883b      	ldrh	r3, [r7, #0]
 80067e2:	429a      	cmp	r2, r3
 80067e4:	d907      	bls.n	80067f6 <TOUCH_InRect+0x4a>
 80067e6:	88ba      	ldrh	r2, [r7, #4]
 80067e8:	8839      	ldrh	r1, [r7, #0]
 80067ea:	8a3b      	ldrh	r3, [r7, #16]
 80067ec:	440b      	add	r3, r1
 80067ee:	429a      	cmp	r2, r3
 80067f0:	da01      	bge.n	80067f6 <TOUCH_InRect+0x4a>
	{
		return 1;
 80067f2:	2301      	movs	r3, #1
 80067f4:	e000      	b.n	80067f8 <TOUCH_InRect+0x4c>
	}
	else
	{
		return 0;
 80067f6:	2300      	movs	r3, #0
	}
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	3708      	adds	r7, #8
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bc90      	pop	{r4, r7}
 8006800:	4770      	bx	lr

08006802 <CalTwoPoint>:
*********************************************************************************************************
*	Func name: CalTwoPoint
*********************************************************************************************************
*/
static int32_t CalTwoPoint(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t x)
{
 8006802:	b490      	push	{r4, r7}
 8006804:	b082      	sub	sp, #8
 8006806:	af00      	add	r7, sp, #0
 8006808:	4604      	mov	r4, r0
 800680a:	4608      	mov	r0, r1
 800680c:	4611      	mov	r1, r2
 800680e:	461a      	mov	r2, r3
 8006810:	4623      	mov	r3, r4
 8006812:	80fb      	strh	r3, [r7, #6]
 8006814:	4603      	mov	r3, r0
 8006816:	80bb      	strh	r3, [r7, #4]
 8006818:	460b      	mov	r3, r1
 800681a:	807b      	strh	r3, [r7, #2]
 800681c:	4613      	mov	r3, r2
 800681e:	803b      	strh	r3, [r7, #0]
	return y1 + ((int32_t)(y2 - y1) * (x - x1)) / (x2 - x1);
 8006820:	88ba      	ldrh	r2, [r7, #4]
 8006822:	8839      	ldrh	r1, [r7, #0]
 8006824:	88bb      	ldrh	r3, [r7, #4]
 8006826:	1acb      	subs	r3, r1, r3
 8006828:	8a38      	ldrh	r0, [r7, #16]
 800682a:	88f9      	ldrh	r1, [r7, #6]
 800682c:	1a41      	subs	r1, r0, r1
 800682e:	fb03 f101 	mul.w	r1, r3, r1
 8006832:	8878      	ldrh	r0, [r7, #2]
 8006834:	88fb      	ldrh	r3, [r7, #6]
 8006836:	1ac3      	subs	r3, r0, r3
 8006838:	fb91 f3f3 	sdiv	r3, r1, r3
 800683c:	4413      	add	r3, r2
}
 800683e:	4618      	mov	r0, r3
 8006840:	3708      	adds	r7, #8
 8006842:	46bd      	mov	sp, r7
 8006844:	bc90      	pop	{r4, r7}
 8006846:	4770      	bx	lr

08006848 <TOUCH_TransX>:
*********************************************************************************************************
* Func name: TOUCH_TransX
*********************************************************************************************************
*/
static int16_t TOUCH_TransX(uint16_t _usAdcX, uint16_t _usAdcY)
{
 8006848:	b5b0      	push	{r4, r5, r7, lr}
 800684a:	b086      	sub	sp, #24
 800684c:	af02      	add	r7, sp, #8
 800684e:	4603      	mov	r3, r0
 8006850:	460a      	mov	r2, r1
 8006852:	80fb      	strh	r3, [r7, #6]
 8006854:	4613      	mov	r3, r2
 8006856:	80bb      	strh	r3, [r7, #4]
#if CALIB_POINT_COUNT == 2
	uint16_t x;
	int32_t y;

	if (g_tTP.XYChange == 0)
 8006858:	4b1f      	ldr	r3, [pc, #124]	; (80068d8 <TOUCH_TransX+0x90>)
 800685a:	8a1b      	ldrh	r3, [r3, #16]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d11a      	bne.n	8006896 <TOUCH_TransX+0x4e>
	{
		x = _usAdcX;
 8006860:	88fb      	ldrh	r3, [r7, #6]
 8006862:	817b      	strh	r3, [r7, #10]
		if (x == 0)
 8006864:	897b      	ldrh	r3, [r7, #10]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d102      	bne.n	8006870 <TOUCH_TransX+0x28>
		{
			y = 0;
 800686a:	2300      	movs	r3, #0
 800686c:	60fb      	str	r3, [r7, #12]
 800686e:	e02c      	b.n	80068ca <TOUCH_TransX+0x82>
		}
		else
		{
			y = CalTwoPoint(g_tTP.usAdcX1, TP_X1, g_tTP.usAdcX2, TP_X2, x);
 8006870:	4b19      	ldr	r3, [pc, #100]	; (80068d8 <TOUCH_TransX+0x90>)
 8006872:	881c      	ldrh	r4, [r3, #0]
 8006874:	4b18      	ldr	r3, [pc, #96]	; (80068d8 <TOUCH_TransX+0x90>)
 8006876:	889d      	ldrh	r5, [r3, #4]
 8006878:	f7ff fc1a 	bl	80060b0 <LCD_GetWidth>
 800687c:	4603      	mov	r3, r0
 800687e:	3b14      	subs	r3, #20
 8006880:	b29a      	uxth	r2, r3
 8006882:	897b      	ldrh	r3, [r7, #10]
 8006884:	9300      	str	r3, [sp, #0]
 8006886:	4613      	mov	r3, r2
 8006888:	462a      	mov	r2, r5
 800688a:	2114      	movs	r1, #20
 800688c:	4620      	mov	r0, r4
 800688e:	f7ff ffb8 	bl	8006802 <CalTwoPoint>
 8006892:	60f8      	str	r0, [r7, #12]
 8006894:	e019      	b.n	80068ca <TOUCH_TransX+0x82>
		}
	}
	else
	{
		x = _usAdcY;
 8006896:	88bb      	ldrh	r3, [r7, #4]
 8006898:	817b      	strh	r3, [r7, #10]
		if (x == 0)
 800689a:	897b      	ldrh	r3, [r7, #10]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d102      	bne.n	80068a6 <TOUCH_TransX+0x5e>
		{
			y = 0;
 80068a0:	2300      	movs	r3, #0
 80068a2:	60fb      	str	r3, [r7, #12]
 80068a4:	e011      	b.n	80068ca <TOUCH_TransX+0x82>
		}
		else
		{
			y = CalTwoPoint(g_tTP.usAdcY1, TP_X1, g_tTP.usAdcY2, TP_X2, x);
 80068a6:	4b0c      	ldr	r3, [pc, #48]	; (80068d8 <TOUCH_TransX+0x90>)
 80068a8:	885c      	ldrh	r4, [r3, #2]
 80068aa:	4b0b      	ldr	r3, [pc, #44]	; (80068d8 <TOUCH_TransX+0x90>)
 80068ac:	88dd      	ldrh	r5, [r3, #6]
 80068ae:	f7ff fbff 	bl	80060b0 <LCD_GetWidth>
 80068b2:	4603      	mov	r3, r0
 80068b4:	3b14      	subs	r3, #20
 80068b6:	b29a      	uxth	r2, r3
 80068b8:	897b      	ldrh	r3, [r7, #10]
 80068ba:	9300      	str	r3, [sp, #0]
 80068bc:	4613      	mov	r3, r2
 80068be:	462a      	mov	r2, r5
 80068c0:	2114      	movs	r1, #20
 80068c2:	4620      	mov	r0, r4
 80068c4:	f7ff ff9d 	bl	8006802 <CalTwoPoint>
 80068c8:	60f8      	str	r0, [r7, #12]
		}
	}
	return y;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	b21b      	sxth	r3, r3
#endif
}
 80068ce:	4618      	mov	r0, r3
 80068d0:	3710      	adds	r7, #16
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bdb0      	pop	{r4, r5, r7, pc}
 80068d6:	bf00      	nop
 80068d8:	20000bb4 	.word	0x20000bb4

080068dc <TOUCH_TransY>:
*********************************************************************************************************
*	Func name: TOUCH_TransY
*********************************************************************************************************
*/
static int16_t TOUCH_TransY(uint16_t _usAdcX, uint16_t _usAdcY)
{
 80068dc:	b5b0      	push	{r4, r5, r7, lr}
 80068de:	b086      	sub	sp, #24
 80068e0:	af02      	add	r7, sp, #8
 80068e2:	4603      	mov	r3, r0
 80068e4:	460a      	mov	r2, r1
 80068e6:	80fb      	strh	r3, [r7, #6]
 80068e8:	4613      	mov	r3, r2
 80068ea:	80bb      	strh	r3, [r7, #4]
#if CALIB_POINT_COUNT == 2
	int32_t x;
	int32_t y;

	if (g_tTP.XYChange == 0)
 80068ec:	4b20      	ldr	r3, [pc, #128]	; (8006970 <TOUCH_TransY+0x94>)
 80068ee:	8a1b      	ldrh	r3, [r3, #16]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d11b      	bne.n	800692c <TOUCH_TransY+0x50>
	{
		x = _usAdcY;
 80068f4:	88bb      	ldrh	r3, [r7, #4]
 80068f6:	60bb      	str	r3, [r7, #8]
		if (x == 0)
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d102      	bne.n	8006904 <TOUCH_TransY+0x28>
		{
			y = 0;
 80068fe:	2300      	movs	r3, #0
 8006900:	60fb      	str	r3, [r7, #12]
 8006902:	e02e      	b.n	8006962 <TOUCH_TransY+0x86>
		}
		else
		{
			y = CalTwoPoint(g_tTP.usAdcY1, TP_Y1, g_tTP.usAdcY2, TP_Y2, x);
 8006904:	4b1a      	ldr	r3, [pc, #104]	; (8006970 <TOUCH_TransY+0x94>)
 8006906:	885c      	ldrh	r4, [r3, #2]
 8006908:	4b19      	ldr	r3, [pc, #100]	; (8006970 <TOUCH_TransY+0x94>)
 800690a:	88dd      	ldrh	r5, [r3, #6]
 800690c:	f7ff fbc4 	bl	8006098 <LCD_GetHeight>
 8006910:	4603      	mov	r3, r0
 8006912:	3b14      	subs	r3, #20
 8006914:	b29a      	uxth	r2, r3
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	b29b      	uxth	r3, r3
 800691a:	9300      	str	r3, [sp, #0]
 800691c:	4613      	mov	r3, r2
 800691e:	462a      	mov	r2, r5
 8006920:	2114      	movs	r1, #20
 8006922:	4620      	mov	r0, r4
 8006924:	f7ff ff6d 	bl	8006802 <CalTwoPoint>
 8006928:	60f8      	str	r0, [r7, #12]
 800692a:	e01a      	b.n	8006962 <TOUCH_TransY+0x86>
		}
	}
	else
	{
		x = _usAdcX;
 800692c:	88fb      	ldrh	r3, [r7, #6]
 800692e:	60bb      	str	r3, [r7, #8]
		if (x == 0)
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d102      	bne.n	800693c <TOUCH_TransY+0x60>
		{
			y = 0;
 8006936:	2300      	movs	r3, #0
 8006938:	60fb      	str	r3, [r7, #12]
 800693a:	e012      	b.n	8006962 <TOUCH_TransY+0x86>
		}
		else
		{
			y = CalTwoPoint(g_tTP.usAdcX1, TP_Y1, g_tTP.usAdcX2, TP_Y2, x);
 800693c:	4b0c      	ldr	r3, [pc, #48]	; (8006970 <TOUCH_TransY+0x94>)
 800693e:	881c      	ldrh	r4, [r3, #0]
 8006940:	4b0b      	ldr	r3, [pc, #44]	; (8006970 <TOUCH_TransY+0x94>)
 8006942:	889d      	ldrh	r5, [r3, #4]
 8006944:	f7ff fba8 	bl	8006098 <LCD_GetHeight>
 8006948:	4603      	mov	r3, r0
 800694a:	3b14      	subs	r3, #20
 800694c:	b29a      	uxth	r2, r3
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	b29b      	uxth	r3, r3
 8006952:	9300      	str	r3, [sp, #0]
 8006954:	4613      	mov	r3, r2
 8006956:	462a      	mov	r2, r5
 8006958:	2114      	movs	r1, #20
 800695a:	4620      	mov	r0, r4
 800695c:	f7ff ff51 	bl	8006802 <CalTwoPoint>
 8006960:	60f8      	str	r0, [r7, #12]
		}
	}
	return y;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	b21b      	sxth	r3, r3
		/* ¸ù¾Ý2µãÖ±Ïß·½³Ì£¬¼ÆËã×ø±ê */
		y = CalTwoPoint(x1, TP_Y1, x2, TP_Y2, x);
	}
	return y;
#endif
}
 8006966:	4618      	mov	r0, r3
 8006968:	3710      	adds	r7, #16
 800696a:	46bd      	mov	sp, r7
 800696c:	bdb0      	pop	{r4, r5, r7, pc}
 800696e:	bf00      	nop
 8006970:	20000bb4 	.word	0x20000bb4

08006974 <TOUCH_PutKey>:
*********************************************************************************************************
* Func name: TOUCH_PutKey
*********************************************************************************************************
*/
void TOUCH_PutKey(uint8_t _ucEvent, uint16_t _usX, uint16_t _usY)
{
 8006974:	b590      	push	{r4, r7, lr}
 8006976:	b083      	sub	sp, #12
 8006978:	af00      	add	r7, sp, #0
 800697a:	4603      	mov	r3, r0
 800697c:	71fb      	strb	r3, [r7, #7]
 800697e:	460b      	mov	r3, r1
 8006980:	80bb      	strh	r3, [r7, #4]
 8006982:	4613      	mov	r3, r2
 8006984:	807b      	strh	r3, [r7, #2]
	g_tTP.Event[g_tTP.Write] = _ucEvent;
 8006986:	4b21      	ldr	r3, [pc, #132]	; (8006a0c <TOUCH_PutKey+0x98>)
 8006988:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800698c:	461a      	mov	r2, r3
 800698e:	4b1f      	ldr	r3, [pc, #124]	; (8006a0c <TOUCH_PutKey+0x98>)
 8006990:	4413      	add	r3, r2
 8006992:	79fa      	ldrb	r2, [r7, #7]
 8006994:	765a      	strb	r2, [r3, #25]
	g_tTP.XBuf[g_tTP.Write] = TOUCH_TransX(_usX, _usY);
 8006996:	4b1d      	ldr	r3, [pc, #116]	; (8006a0c <TOUCH_PutKey+0x98>)
 8006998:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800699c:	461c      	mov	r4, r3
 800699e:	887a      	ldrh	r2, [r7, #2]
 80069a0:	88bb      	ldrh	r3, [r7, #4]
 80069a2:	4611      	mov	r1, r2
 80069a4:	4618      	mov	r0, r3
 80069a6:	f7ff ff4f 	bl	8006848 <TOUCH_TransX>
 80069aa:	4603      	mov	r3, r0
 80069ac:	4619      	mov	r1, r3
 80069ae:	4a17      	ldr	r2, [pc, #92]	; (8006a0c <TOUCH_PutKey+0x98>)
 80069b0:	f104 0314 	add.w	r3, r4, #20
 80069b4:	005b      	lsls	r3, r3, #1
 80069b6:	4413      	add	r3, r2
 80069b8:	460a      	mov	r2, r1
 80069ba:	80da      	strh	r2, [r3, #6]
	g_tTP.YBuf[g_tTP.Write] = TOUCH_TransY(_usX, _usY);
 80069bc:	4b13      	ldr	r3, [pc, #76]	; (8006a0c <TOUCH_PutKey+0x98>)
 80069be:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 80069c2:	461c      	mov	r4, r3
 80069c4:	887a      	ldrh	r2, [r7, #2]
 80069c6:	88bb      	ldrh	r3, [r7, #4]
 80069c8:	4611      	mov	r1, r2
 80069ca:	4618      	mov	r0, r3
 80069cc:	f7ff ff86 	bl	80068dc <TOUCH_TransY>
 80069d0:	4603      	mov	r3, r0
 80069d2:	4619      	mov	r1, r3
 80069d4:	4a0d      	ldr	r2, [pc, #52]	; (8006a0c <TOUCH_PutKey+0x98>)
 80069d6:	f104 0328 	add.w	r3, r4, #40	; 0x28
 80069da:	005b      	lsls	r3, r3, #1
 80069dc:	4413      	add	r3, r2
 80069de:	460a      	mov	r2, r1
 80069e0:	80da      	strh	r2, [r3, #6]

	if (++g_tTP.Write  >= TOUCH_FIFO_SIZE)
 80069e2:	4b0a      	ldr	r3, [pc, #40]	; (8006a0c <TOUCH_PutKey+0x98>)
 80069e4:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 80069e8:	3301      	adds	r3, #1
 80069ea:	b2da      	uxtb	r2, r3
 80069ec:	4b07      	ldr	r3, [pc, #28]	; (8006a0c <TOUCH_PutKey+0x98>)
 80069ee:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 80069f2:	4b06      	ldr	r3, [pc, #24]	; (8006a0c <TOUCH_PutKey+0x98>)
 80069f4:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 80069f8:	2b13      	cmp	r3, #19
 80069fa:	d903      	bls.n	8006a04 <TOUCH_PutKey+0x90>
	{
		g_tTP.Write = 0;
 80069fc:	4b03      	ldr	r3, [pc, #12]	; (8006a0c <TOUCH_PutKey+0x98>)
 80069fe:	2200      	movs	r2, #0
 8006a00:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
	}
}
 8006a04:	bf00      	nop
 8006a06:	370c      	adds	r7, #12
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	bd90      	pop	{r4, r7, pc}
 8006a0c:	20000bb4 	.word	0x20000bb4

08006a10 <TOUCH_MoveValid>:
*********************************************************************************************************
* Func name: TOUCH_MoveValid
*********************************************************************************************************
*/
uint8_t TOUCH_MoveValid(uint16_t _usX1, uint16_t _usY1, uint16_t _usX2, uint16_t _usY2)
{
 8006a10:	b590      	push	{r4, r7, lr}
 8006a12:	b085      	sub	sp, #20
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	4604      	mov	r4, r0
 8006a18:	4608      	mov	r0, r1
 8006a1a:	4611      	mov	r1, r2
 8006a1c:	461a      	mov	r2, r3
 8006a1e:	4623      	mov	r3, r4
 8006a20:	80fb      	strh	r3, [r7, #6]
 8006a22:	4603      	mov	r3, r0
 8006a24:	80bb      	strh	r3, [r7, #4]
 8006a26:	460b      	mov	r3, r1
 8006a28:	807b      	strh	r3, [r7, #2]
 8006a2a:	4613      	mov	r3, r2
 8006a2c:	803b      	strh	r3, [r7, #0]
	int16_t iX, iY;
	static uint8_t s_invalid_count = 0;

	iX = TOUCH_Abs(_usX1 - _usX2);
 8006a2e:	88fa      	ldrh	r2, [r7, #6]
 8006a30:	887b      	ldrh	r3, [r7, #2]
 8006a32:	1ad3      	subs	r3, r2, r3
 8006a34:	4618      	mov	r0, r3
 8006a36:	f000 fadf 	bl	8006ff8 <TOUCH_Abs>
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	81fb      	strh	r3, [r7, #14]
	iY = TOUCH_Abs(_usY1 - _usY2);
 8006a3e:	88ba      	ldrh	r2, [r7, #4]
 8006a40:	883b      	ldrh	r3, [r7, #0]
 8006a42:	1ad3      	subs	r3, r2, r3
 8006a44:	4618      	mov	r0, r3
 8006a46:	f000 fad7 	bl	8006ff8 <TOUCH_Abs>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	81bb      	strh	r3, [r7, #12]

	if ((iX < 25) && (iY < 25))
 8006a4e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006a52:	2b18      	cmp	r3, #24
 8006a54:	dc08      	bgt.n	8006a68 <TOUCH_MoveValid+0x58>
 8006a56:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006a5a:	2b18      	cmp	r3, #24
 8006a5c:	dc04      	bgt.n	8006a68 <TOUCH_MoveValid+0x58>
	{
		s_invalid_count = 0;
 8006a5e:	4b0c      	ldr	r3, [pc, #48]	; (8006a90 <TOUCH_MoveValid+0x80>)
 8006a60:	2200      	movs	r2, #0
 8006a62:	701a      	strb	r2, [r3, #0]
		return 1;
 8006a64:	2301      	movs	r3, #1
 8006a66:	e00f      	b.n	8006a88 <TOUCH_MoveValid+0x78>
	}
	else
	{
		if (++s_invalid_count >= 3)
 8006a68:	4b09      	ldr	r3, [pc, #36]	; (8006a90 <TOUCH_MoveValid+0x80>)
 8006a6a:	781b      	ldrb	r3, [r3, #0]
 8006a6c:	3301      	adds	r3, #1
 8006a6e:	b2da      	uxtb	r2, r3
 8006a70:	4b07      	ldr	r3, [pc, #28]	; (8006a90 <TOUCH_MoveValid+0x80>)
 8006a72:	701a      	strb	r2, [r3, #0]
 8006a74:	4b06      	ldr	r3, [pc, #24]	; (8006a90 <TOUCH_MoveValid+0x80>)
 8006a76:	781b      	ldrb	r3, [r3, #0]
 8006a78:	2b02      	cmp	r3, #2
 8006a7a:	d904      	bls.n	8006a86 <TOUCH_MoveValid+0x76>
		{
			s_invalid_count = 0;
 8006a7c:	4b04      	ldr	r3, [pc, #16]	; (8006a90 <TOUCH_MoveValid+0x80>)
 8006a7e:	2200      	movs	r2, #0
 8006a80:	701a      	strb	r2, [r3, #0]
			return 1;
 8006a82:	2301      	movs	r3, #1
 8006a84:	e000      	b.n	8006a88 <TOUCH_MoveValid+0x78>
		}
		return 0;
 8006a86:	2300      	movs	r3, #0
	}
}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	3714      	adds	r7, #20
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bd90      	pop	{r4, r7, pc}
 8006a90:	20000c34 	.word	0x20000c34

08006a94 <TOUCH_Scan>:
*********************************************************************************************************
*	Func name: TOUCH_Scan
*********************************************************************************************************
*/
void TOUCH_Scan(void)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b082      	sub	sp, #8
 8006a98:	af00      	add	r7, sp, #0
	static uint8_t s_ucPos = 0;
	static uint8_t s_count = 0;
	static uint8_t s_down = 0;
	static uint16_t s_usSaveAdcX, s_usSaveAdcY;

	if (g_tTP.Enable == 0)
 8006a9a:	4b5e      	ldr	r3, [pc, #376]	; (8006c14 <TOUCH_Scan+0x180>)
 8006a9c:	7e1b      	ldrb	r3, [r3, #24]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	f000 80b1 	beq.w	8006c06 <TOUCH_Scan+0x172>
	{
		return;
	}
	if (g_ChipID == IC_8875)
 8006aa4:	4b5c      	ldr	r3, [pc, #368]	; (8006c18 <TOUCH_Scan+0x184>)
 8006aa6:	881b      	ldrh	r3, [r3, #0]
 8006aa8:	2b75      	cmp	r3, #117	; 0x75
 8006aaa:	d10d      	bne.n	8006ac8 <TOUCH_Scan+0x34>
	{
		if (RA8875_IsBusy())
 8006aac:	f7fd f84a 	bl	8003b44 <RA8875_IsBusy>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	f040 80a9 	bne.w	8006c0a <TOUCH_Scan+0x176>
		{
			return;
		}
		usAdcX = RA8875_TouchReadX();
 8006ab8:	f7fd f856 	bl	8003b68 <RA8875_TouchReadX>
 8006abc:	4603      	mov	r3, r0
 8006abe:	80fb      	strh	r3, [r7, #6]
		usAdcY = RA8875_TouchReadY();
 8006ac0:	f7fd f8a4 	bl	8003c0c <RA8875_TouchReadY>
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	80bb      	strh	r3, [r7, #4]
	else
	{
		//usAdcX = TSC2046_ReadAdc(ADC_CH_X);
		//usAdcY = TSC2046_ReadAdc(ADC_CH_Y);
	}
	if (TOUCH_PressValid(usAdcX, usAdcY))
 8006ac8:	88ba      	ldrh	r2, [r7, #4]
 8006aca:	88fb      	ldrh	r3, [r7, #6]
 8006acc:	4611      	mov	r1, r2
 8006ace:	4618      	mov	r0, r3
 8006ad0:	f000 fa34 	bl	8006f3c <TOUCH_PressValid>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d06f      	beq.n	8006bba <TOUCH_Scan+0x126>
	{
		if (s_count >= 30)
 8006ada:	4b50      	ldr	r3, [pc, #320]	; (8006c1c <TOUCH_Scan+0x188>)
 8006adc:	781b      	ldrb	r3, [r3, #0]
 8006ade:	2b1d      	cmp	r3, #29
 8006ae0:	d964      	bls.n	8006bac <TOUCH_Scan+0x118>
		{
			s_usXBuf[s_ucPos] = usAdcX;
 8006ae2:	4b4f      	ldr	r3, [pc, #316]	; (8006c20 <TOUCH_Scan+0x18c>)
 8006ae4:	781b      	ldrb	r3, [r3, #0]
 8006ae6:	4619      	mov	r1, r3
 8006ae8:	4a4e      	ldr	r2, [pc, #312]	; (8006c24 <TOUCH_Scan+0x190>)
 8006aea:	88fb      	ldrh	r3, [r7, #6]
 8006aec:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
			s_usYBuf[s_ucPos] = usAdcY;
 8006af0:	4b4b      	ldr	r3, [pc, #300]	; (8006c20 <TOUCH_Scan+0x18c>)
 8006af2:	781b      	ldrb	r3, [r3, #0]
 8006af4:	4619      	mov	r1, r3
 8006af6:	4a4c      	ldr	r2, [pc, #304]	; (8006c28 <TOUCH_Scan+0x194>)
 8006af8:	88bb      	ldrh	r3, [r7, #4]
 8006afa:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]

			if (++s_ucPos >= SAMPLE_COUNT)
 8006afe:	4b48      	ldr	r3, [pc, #288]	; (8006c20 <TOUCH_Scan+0x18c>)
 8006b00:	781b      	ldrb	r3, [r3, #0]
 8006b02:	3301      	adds	r3, #1
 8006b04:	b2da      	uxtb	r2, r3
 8006b06:	4b46      	ldr	r3, [pc, #280]	; (8006c20 <TOUCH_Scan+0x18c>)
 8006b08:	701a      	strb	r2, [r3, #0]
 8006b0a:	4b45      	ldr	r3, [pc, #276]	; (8006c20 <TOUCH_Scan+0x18c>)
 8006b0c:	781b      	ldrb	r3, [r3, #0]
 8006b0e:	2b09      	cmp	r3, #9
 8006b10:	d97c      	bls.n	8006c0c <TOUCH_Scan+0x178>
			{
				s_ucPos = 0;
 8006b12:	4b43      	ldr	r3, [pc, #268]	; (8006c20 <TOUCH_Scan+0x18c>)
 8006b14:	2200      	movs	r2, #0
 8006b16:	701a      	strb	r2, [r3, #0]

				g_tTP.usAdcNowX = TOUCH_DataFilter(s_usXBuf, SAMPLE_COUNT);
 8006b18:	210a      	movs	r1, #10
 8006b1a:	4842      	ldr	r0, [pc, #264]	; (8006c24 <TOUCH_Scan+0x190>)
 8006b1c:	f000 fa7e 	bl	800701c <TOUCH_DataFilter>
 8006b20:	4603      	mov	r3, r0
 8006b22:	461a      	mov	r2, r3
 8006b24:	4b3b      	ldr	r3, [pc, #236]	; (8006c14 <TOUCH_Scan+0x180>)
 8006b26:	829a      	strh	r2, [r3, #20]
				g_tTP.usAdcNowY = TOUCH_DataFilter(s_usYBuf, SAMPLE_COUNT);
 8006b28:	210a      	movs	r1, #10
 8006b2a:	483f      	ldr	r0, [pc, #252]	; (8006c28 <TOUCH_Scan+0x194>)
 8006b2c:	f000 fa76 	bl	800701c <TOUCH_DataFilter>
 8006b30:	4603      	mov	r3, r0
 8006b32:	461a      	mov	r2, r3
 8006b34:	4b37      	ldr	r3, [pc, #220]	; (8006c14 <TOUCH_Scan+0x180>)
 8006b36:	82da      	strh	r2, [r3, #22]

				if (s_down == 0)
 8006b38:	4b3c      	ldr	r3, [pc, #240]	; (8006c2c <TOUCH_Scan+0x198>)
 8006b3a:	781b      	ldrb	r3, [r3, #0]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d113      	bne.n	8006b68 <TOUCH_Scan+0xd4>
				{
					s_down = 1;
 8006b40:	4b3a      	ldr	r3, [pc, #232]	; (8006c2c <TOUCH_Scan+0x198>)
 8006b42:	2201      	movs	r2, #1
 8006b44:	701a      	strb	r2, [r3, #0]
					TOUCH_PutKey(TOUCH_DOWN, g_tTP.usAdcNowX, g_tTP.usAdcNowY);
 8006b46:	4b33      	ldr	r3, [pc, #204]	; (8006c14 <TOUCH_Scan+0x180>)
 8006b48:	8a9b      	ldrh	r3, [r3, #20]
 8006b4a:	4a32      	ldr	r2, [pc, #200]	; (8006c14 <TOUCH_Scan+0x180>)
 8006b4c:	8ad2      	ldrh	r2, [r2, #22]
 8006b4e:	4619      	mov	r1, r3
 8006b50:	2001      	movs	r0, #1
 8006b52:	f7ff ff0f 	bl	8006974 <TOUCH_PutKey>

					s_usSaveAdcX = g_tTP.usAdcNowX;
 8006b56:	4b2f      	ldr	r3, [pc, #188]	; (8006c14 <TOUCH_Scan+0x180>)
 8006b58:	8a9a      	ldrh	r2, [r3, #20]
 8006b5a:	4b35      	ldr	r3, [pc, #212]	; (8006c30 <TOUCH_Scan+0x19c>)
 8006b5c:	801a      	strh	r2, [r3, #0]
					s_usSaveAdcY = g_tTP.usAdcNowY;
 8006b5e:	4b2d      	ldr	r3, [pc, #180]	; (8006c14 <TOUCH_Scan+0x180>)
 8006b60:	8ada      	ldrh	r2, [r3, #22]
 8006b62:	4b34      	ldr	r3, [pc, #208]	; (8006c34 <TOUCH_Scan+0x1a0>)
 8006b64:	801a      	strh	r2, [r3, #0]
 8006b66:	e051      	b.n	8006c0c <TOUCH_Scan+0x178>
				}
				else
				{
					if (TOUCH_MoveValid(s_usSaveAdcX, s_usSaveAdcY, g_tTP.usAdcNowX, g_tTP.usAdcNowY))
 8006b68:	4b31      	ldr	r3, [pc, #196]	; (8006c30 <TOUCH_Scan+0x19c>)
 8006b6a:	8818      	ldrh	r0, [r3, #0]
 8006b6c:	4b31      	ldr	r3, [pc, #196]	; (8006c34 <TOUCH_Scan+0x1a0>)
 8006b6e:	8819      	ldrh	r1, [r3, #0]
 8006b70:	4b28      	ldr	r3, [pc, #160]	; (8006c14 <TOUCH_Scan+0x180>)
 8006b72:	8a9a      	ldrh	r2, [r3, #20]
 8006b74:	4b27      	ldr	r3, [pc, #156]	; (8006c14 <TOUCH_Scan+0x180>)
 8006b76:	8adb      	ldrh	r3, [r3, #22]
 8006b78:	f7ff ff4a 	bl	8006a10 <TOUCH_MoveValid>
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d010      	beq.n	8006ba4 <TOUCH_Scan+0x110>
					{
						TOUCH_PutKey(TOUCH_MOVE, g_tTP.usAdcNowX, g_tTP.usAdcNowY);
 8006b82:	4b24      	ldr	r3, [pc, #144]	; (8006c14 <TOUCH_Scan+0x180>)
 8006b84:	8a9b      	ldrh	r3, [r3, #20]
 8006b86:	4a23      	ldr	r2, [pc, #140]	; (8006c14 <TOUCH_Scan+0x180>)
 8006b88:	8ad2      	ldrh	r2, [r2, #22]
 8006b8a:	4619      	mov	r1, r3
 8006b8c:	2002      	movs	r0, #2
 8006b8e:	f7ff fef1 	bl	8006974 <TOUCH_PutKey>

						s_usSaveAdcX = g_tTP.usAdcNowX;
 8006b92:	4b20      	ldr	r3, [pc, #128]	; (8006c14 <TOUCH_Scan+0x180>)
 8006b94:	8a9a      	ldrh	r2, [r3, #20]
 8006b96:	4b26      	ldr	r3, [pc, #152]	; (8006c30 <TOUCH_Scan+0x19c>)
 8006b98:	801a      	strh	r2, [r3, #0]
						s_usSaveAdcY = g_tTP.usAdcNowY;
 8006b9a:	4b1e      	ldr	r3, [pc, #120]	; (8006c14 <TOUCH_Scan+0x180>)
 8006b9c:	8ada      	ldrh	r2, [r3, #22]
 8006b9e:	4b25      	ldr	r3, [pc, #148]	; (8006c34 <TOUCH_Scan+0x1a0>)
 8006ba0:	801a      	strh	r2, [r3, #0]
 8006ba2:	e033      	b.n	8006c0c <TOUCH_Scan+0x178>
					}
					else
					{
						g_tTP.usAdcNowX = 0;
 8006ba4:	4b1b      	ldr	r3, [pc, #108]	; (8006c14 <TOUCH_Scan+0x180>)
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	829a      	strh	r2, [r3, #20]
 8006baa:	e02f      	b.n	8006c0c <TOUCH_Scan+0x178>
				}
			}
		}
		else
		{
			s_count++;
 8006bac:	4b1b      	ldr	r3, [pc, #108]	; (8006c1c <TOUCH_Scan+0x188>)
 8006bae:	781b      	ldrb	r3, [r3, #0]
 8006bb0:	3301      	adds	r3, #1
 8006bb2:	b2da      	uxtb	r2, r3
 8006bb4:	4b19      	ldr	r3, [pc, #100]	; (8006c1c <TOUCH_Scan+0x188>)
 8006bb6:	701a      	strb	r2, [r3, #0]
 8006bb8:	e028      	b.n	8006c0c <TOUCH_Scan+0x178>
		}
	}
	else
	{
		if (s_count > 0)
 8006bba:	4b18      	ldr	r3, [pc, #96]	; (8006c1c <TOUCH_Scan+0x188>)
 8006bbc:	781b      	ldrb	r3, [r3, #0]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d01d      	beq.n	8006bfe <TOUCH_Scan+0x16a>
		{
			if (--s_count == 0)
 8006bc2:	4b16      	ldr	r3, [pc, #88]	; (8006c1c <TOUCH_Scan+0x188>)
 8006bc4:	781b      	ldrb	r3, [r3, #0]
 8006bc6:	3b01      	subs	r3, #1
 8006bc8:	b2da      	uxtb	r2, r3
 8006bca:	4b14      	ldr	r3, [pc, #80]	; (8006c1c <TOUCH_Scan+0x188>)
 8006bcc:	701a      	strb	r2, [r3, #0]
 8006bce:	4b13      	ldr	r3, [pc, #76]	; (8006c1c <TOUCH_Scan+0x188>)
 8006bd0:	781b      	ldrb	r3, [r3, #0]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d113      	bne.n	8006bfe <TOUCH_Scan+0x16a>
			{
				TOUCH_PutKey(TOUCH_RELEASE, s_usSaveAdcX, s_usSaveAdcY);
 8006bd6:	4b16      	ldr	r3, [pc, #88]	; (8006c30 <TOUCH_Scan+0x19c>)
 8006bd8:	881b      	ldrh	r3, [r3, #0]
 8006bda:	4a16      	ldr	r2, [pc, #88]	; (8006c34 <TOUCH_Scan+0x1a0>)
 8006bdc:	8812      	ldrh	r2, [r2, #0]
 8006bde:	4619      	mov	r1, r3
 8006be0:	2003      	movs	r0, #3
 8006be2:	f7ff fec7 	bl	8006974 <TOUCH_PutKey>

				g_tTP.usAdcNowX = 0;
 8006be6:	4b0b      	ldr	r3, [pc, #44]	; (8006c14 <TOUCH_Scan+0x180>)
 8006be8:	2200      	movs	r2, #0
 8006bea:	829a      	strh	r2, [r3, #20]
				g_tTP.usAdcNowY = 0;
 8006bec:	4b09      	ldr	r3, [pc, #36]	; (8006c14 <TOUCH_Scan+0x180>)
 8006bee:	2200      	movs	r2, #0
 8006bf0:	82da      	strh	r2, [r3, #22]

				s_count = 0;
 8006bf2:	4b0a      	ldr	r3, [pc, #40]	; (8006c1c <TOUCH_Scan+0x188>)
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	701a      	strb	r2, [r3, #0]
				s_down = 0;
 8006bf8:	4b0c      	ldr	r3, [pc, #48]	; (8006c2c <TOUCH_Scan+0x198>)
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	701a      	strb	r2, [r3, #0]
			}
		}
		s_ucPos = 0;
 8006bfe:	4b08      	ldr	r3, [pc, #32]	; (8006c20 <TOUCH_Scan+0x18c>)
 8006c00:	2200      	movs	r2, #0
 8006c02:	701a      	strb	r2, [r3, #0]
 8006c04:	e002      	b.n	8006c0c <TOUCH_Scan+0x178>
		return;
 8006c06:	bf00      	nop
 8006c08:	e000      	b.n	8006c0c <TOUCH_Scan+0x178>
			return;
 8006c0a:	bf00      	nop
	}
}
 8006c0c:	3708      	adds	r7, #8
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bd80      	pop	{r7, pc}
 8006c12:	bf00      	nop
 8006c14:	20000bb4 	.word	0x20000bb4
 8006c18:	20000008 	.word	0x20000008
 8006c1c:	20000c35 	.word	0x20000c35
 8006c20:	20000c36 	.word	0x20000c36
 8006c24:	20000c38 	.word	0x20000c38
 8006c28:	20000c4c 	.word	0x20000c4c
 8006c2c:	20000c60 	.word	0x20000c60
 8006c30:	20000c62 	.word	0x20000c62
 8006c34:	20000c64 	.word	0x20000c64

08006c38 <TOUCH_Calibration>:
*********************************************************************************************************
* Func name: TOUCH_Calibration
*********************************************************************************************************
*/
void TOUCH_Calibration(void)
{
 8006c38:	b590      	push	{r4, r7, lr}
 8006c3a:	b085      	sub	sp, #20
 8006c3c:	af00      	add	r7, sp, #0
	uint16_t usAdcY;
	uint8_t usCount;
	uint8_t i;
	uint32_t n;

	TOUCH_CelarFIFO();
 8006c3e:	f000 f8ab 	bl	8006d98 <TOUCH_CelarFIFO>

	for (i = 0; i < CALIB_POINT_COUNT; i++)
 8006c42:	2300      	movs	r3, #0
 8006c44:	73bb      	strb	r3, [r7, #14]
 8006c46:	e059      	b.n	8006cfc <TOUCH_Calibration+0xc4>
	{
		TOUCH_DispPoint(i);		/* ÏÔÊ¾Ð£×¼µã */
 8006c48:	7bbb      	ldrb	r3, [r7, #14]
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	f000 f8b8 	bl	8006dc0 <TOUCH_DispPoint>
		TOUCH_WaitRelease(); 	/* µÈ´ý´¥±ÊÊÍ·Å */
 8006c50:	f000 f950 	bl	8006ef4 <TOUCH_WaitRelease>

		usCount = 0;
 8006c54:	2300      	movs	r3, #0
 8006c56:	73fb      	strb	r3, [r7, #15]
		for (n = 0; n < 500; n++)
 8006c58:	2300      	movs	r3, #0
 8006c5a:	60bb      	str	r3, [r7, #8]
 8006c5c:	e043      	b.n	8006ce6 <TOUCH_Calibration+0xae>
		{
			usAdcX = TOUCH_ReadAdcX();
 8006c5e:	f000 f993 	bl	8006f88 <TOUCH_ReadAdcX>
 8006c62:	4603      	mov	r3, r0
 8006c64:	80fb      	strh	r3, [r7, #6]

			usAdcY = TOUCH_ReadAdcY();
 8006c66:	f000 f9ab 	bl	8006fc0 <TOUCH_ReadAdcY>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	80bb      	strh	r3, [r7, #4]

			if (TOUCH_PressValid(usAdcX, usAdcY))
 8006c6e:	88ba      	ldrh	r2, [r7, #4]
 8006c70:	88fb      	ldrh	r3, [r7, #6]
 8006c72:	4611      	mov	r1, r2
 8006c74:	4618      	mov	r0, r3
 8006c76:	f000 f961 	bl	8006f3c <TOUCH_PressValid>
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d02a      	beq.n	8006cd6 <TOUCH_Calibration+0x9e>
			{
				if (++usCount > 5)
 8006c80:	7bfb      	ldrb	r3, [r7, #15]
 8006c82:	3301      	adds	r3, #1
 8006c84:	73fb      	strb	r3, [r7, #15]
 8006c86:	7bfb      	ldrb	r3, [r7, #15]
 8006c88:	2b05      	cmp	r3, #5
 8006c8a:	d926      	bls.n	8006cda <TOUCH_Calibration+0xa2>
				{
					if (i == 0)
 8006c8c:	7bbb      	ldrb	r3, [r7, #14]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d106      	bne.n	8006ca0 <TOUCH_Calibration+0x68>
					{
						g_tTP.usAdcX1 = usAdcX;
 8006c92:	4a40      	ldr	r2, [pc, #256]	; (8006d94 <TOUCH_Calibration+0x15c>)
 8006c94:	88fb      	ldrh	r3, [r7, #6]
 8006c96:	8013      	strh	r3, [r2, #0]
						g_tTP.usAdcY1 = usAdcY;
 8006c98:	4a3e      	ldr	r2, [pc, #248]	; (8006d94 <TOUCH_Calibration+0x15c>)
 8006c9a:	88bb      	ldrh	r3, [r7, #4]
 8006c9c:	8053      	strh	r3, [r2, #2]
					else
					{
						g_tTP.usAdcX4 = usAdcX;
						g_tTP.usAdcY4 = usAdcY;
					}
					break;
 8006c9e:	e026      	b.n	8006cee <TOUCH_Calibration+0xb6>
					else if (i == 1)
 8006ca0:	7bbb      	ldrb	r3, [r7, #14]
 8006ca2:	2b01      	cmp	r3, #1
 8006ca4:	d106      	bne.n	8006cb4 <TOUCH_Calibration+0x7c>
						g_tTP.usAdcX2 = usAdcX;
 8006ca6:	4a3b      	ldr	r2, [pc, #236]	; (8006d94 <TOUCH_Calibration+0x15c>)
 8006ca8:	88fb      	ldrh	r3, [r7, #6]
 8006caa:	8093      	strh	r3, [r2, #4]
						g_tTP.usAdcY2 = usAdcY;
 8006cac:	4a39      	ldr	r2, [pc, #228]	; (8006d94 <TOUCH_Calibration+0x15c>)
 8006cae:	88bb      	ldrh	r3, [r7, #4]
 8006cb0:	80d3      	strh	r3, [r2, #6]
					break;
 8006cb2:	e01c      	b.n	8006cee <TOUCH_Calibration+0xb6>
					else if (i == 2)
 8006cb4:	7bbb      	ldrb	r3, [r7, #14]
 8006cb6:	2b02      	cmp	r3, #2
 8006cb8:	d106      	bne.n	8006cc8 <TOUCH_Calibration+0x90>
						g_tTP.usAdcX3 = usAdcX;
 8006cba:	4a36      	ldr	r2, [pc, #216]	; (8006d94 <TOUCH_Calibration+0x15c>)
 8006cbc:	88fb      	ldrh	r3, [r7, #6]
 8006cbe:	8113      	strh	r3, [r2, #8]
						g_tTP.usAdcY3 = usAdcY;
 8006cc0:	4a34      	ldr	r2, [pc, #208]	; (8006d94 <TOUCH_Calibration+0x15c>)
 8006cc2:	88bb      	ldrh	r3, [r7, #4]
 8006cc4:	8153      	strh	r3, [r2, #10]
					break;
 8006cc6:	e012      	b.n	8006cee <TOUCH_Calibration+0xb6>
						g_tTP.usAdcX4 = usAdcX;
 8006cc8:	4a32      	ldr	r2, [pc, #200]	; (8006d94 <TOUCH_Calibration+0x15c>)
 8006cca:	88fb      	ldrh	r3, [r7, #6]
 8006ccc:	8193      	strh	r3, [r2, #12]
						g_tTP.usAdcY4 = usAdcY;
 8006cce:	4a31      	ldr	r2, [pc, #196]	; (8006d94 <TOUCH_Calibration+0x15c>)
 8006cd0:	88bb      	ldrh	r3, [r7, #4]
 8006cd2:	81d3      	strh	r3, [r2, #14]
					break;
 8006cd4:	e00b      	b.n	8006cee <TOUCH_Calibration+0xb6>
				}
			}
			else
			{
				usCount = 0;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	73fb      	strb	r3, [r7, #15]
			}
			bsp_DelayMS(10);
 8006cda:	200a      	movs	r0, #10
 8006cdc:	f7ff fc9c 	bl	8006618 <bsp_DelayMS>
		for (n = 0; n < 500; n++)
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	3301      	adds	r3, #1
 8006ce4:	60bb      	str	r3, [r7, #8]
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8006cec:	d3b7      	bcc.n	8006c5e <TOUCH_Calibration+0x26>
		}
		if (n == 500)
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8006cf4:	d049      	beq.n	8006d8a <TOUCH_Calibration+0x152>
	for (i = 0; i < CALIB_POINT_COUNT; i++)
 8006cf6:	7bbb      	ldrb	r3, [r7, #14]
 8006cf8:	3301      	adds	r3, #1
 8006cfa:	73bb      	strb	r3, [r7, #14]
 8006cfc:	7bbb      	ldrb	r3, [r7, #14]
 8006cfe:	2b01      	cmp	r3, #1
 8006d00:	d9a2      	bls.n	8006c48 <TOUCH_Calibration+0x10>
		{
			return;
		}
	}
	TOUCH_WaitRelease(); 	/* µÈ´ý´¥±ÊÊÍ·Å */
 8006d02:	f000 f8f7 	bl	8006ef4 <TOUCH_WaitRelease>

	/* Ê¶±ð´¥ÃþµÄ X, Y ºÍ ÏÔÊ¾Ãæ°åµÄ X£¬Y ÊÇ·ñÐèÒª½»»» */
	g_tTP.XYChange = 0;		/* 1±íÊ¾X YÐèÒª½»»» */
 8006d06:	4b23      	ldr	r3, [pc, #140]	; (8006d94 <TOUCH_Calibration+0x15c>)
 8006d08:	2200      	movs	r2, #0
 8006d0a:	821a      	strh	r2, [r3, #16]
	if (LCD_GetHeight() < LCD_GetWidth())
 8006d0c:	f7ff f9c4 	bl	8006098 <LCD_GetHeight>
 8006d10:	4603      	mov	r3, r0
 8006d12:	461c      	mov	r4, r3
 8006d14:	f7ff f9cc 	bl	80060b0 <LCD_GetWidth>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	429c      	cmp	r4, r3
 8006d1c:	d219      	bcs.n	8006d52 <TOUCH_Calibration+0x11a>
	{
		if (TOUCH_Abs(g_tTP.usAdcX1 - g_tTP.usAdcX2) < TOUCH_Abs(g_tTP.usAdcY1 - g_tTP.usAdcY2))
 8006d1e:	4b1d      	ldr	r3, [pc, #116]	; (8006d94 <TOUCH_Calibration+0x15c>)
 8006d20:	881b      	ldrh	r3, [r3, #0]
 8006d22:	461a      	mov	r2, r3
 8006d24:	4b1b      	ldr	r3, [pc, #108]	; (8006d94 <TOUCH_Calibration+0x15c>)
 8006d26:	889b      	ldrh	r3, [r3, #4]
 8006d28:	1ad3      	subs	r3, r2, r3
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	f000 f964 	bl	8006ff8 <TOUCH_Abs>
 8006d30:	4604      	mov	r4, r0
 8006d32:	4b18      	ldr	r3, [pc, #96]	; (8006d94 <TOUCH_Calibration+0x15c>)
 8006d34:	885b      	ldrh	r3, [r3, #2]
 8006d36:	461a      	mov	r2, r3
 8006d38:	4b16      	ldr	r3, [pc, #88]	; (8006d94 <TOUCH_Calibration+0x15c>)
 8006d3a:	88db      	ldrh	r3, [r3, #6]
 8006d3c:	1ad3      	subs	r3, r2, r3
 8006d3e:	4618      	mov	r0, r3
 8006d40:	f000 f95a 	bl	8006ff8 <TOUCH_Abs>
 8006d44:	4603      	mov	r3, r0
 8006d46:	429c      	cmp	r4, r3
 8006d48:	da1c      	bge.n	8006d84 <TOUCH_Calibration+0x14c>
		{
			g_tTP.XYChange = 1;
 8006d4a:	4b12      	ldr	r3, [pc, #72]	; (8006d94 <TOUCH_Calibration+0x15c>)
 8006d4c:	2201      	movs	r2, #1
 8006d4e:	821a      	strh	r2, [r3, #16]
 8006d50:	e018      	b.n	8006d84 <TOUCH_Calibration+0x14c>
		}
	}
	else
	{
		if (TOUCH_Abs(g_tTP.usAdcX1 - g_tTP.usAdcX2) > TOUCH_Abs(g_tTP.usAdcY1 - g_tTP.usAdcY2))
 8006d52:	4b10      	ldr	r3, [pc, #64]	; (8006d94 <TOUCH_Calibration+0x15c>)
 8006d54:	881b      	ldrh	r3, [r3, #0]
 8006d56:	461a      	mov	r2, r3
 8006d58:	4b0e      	ldr	r3, [pc, #56]	; (8006d94 <TOUCH_Calibration+0x15c>)
 8006d5a:	889b      	ldrh	r3, [r3, #4]
 8006d5c:	1ad3      	subs	r3, r2, r3
 8006d5e:	4618      	mov	r0, r3
 8006d60:	f000 f94a 	bl	8006ff8 <TOUCH_Abs>
 8006d64:	4604      	mov	r4, r0
 8006d66:	4b0b      	ldr	r3, [pc, #44]	; (8006d94 <TOUCH_Calibration+0x15c>)
 8006d68:	885b      	ldrh	r3, [r3, #2]
 8006d6a:	461a      	mov	r2, r3
 8006d6c:	4b09      	ldr	r3, [pc, #36]	; (8006d94 <TOUCH_Calibration+0x15c>)
 8006d6e:	88db      	ldrh	r3, [r3, #6]
 8006d70:	1ad3      	subs	r3, r2, r3
 8006d72:	4618      	mov	r0, r3
 8006d74:	f000 f940 	bl	8006ff8 <TOUCH_Abs>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	429c      	cmp	r4, r3
 8006d7c:	dd02      	ble.n	8006d84 <TOUCH_Calibration+0x14c>
		{
			g_tTP.XYChange = 1;
 8006d7e:	4b05      	ldr	r3, [pc, #20]	; (8006d94 <TOUCH_Calibration+0x15c>)
 8006d80:	2201      	movs	r2, #1
 8006d82:	821a      	strh	r2, [r3, #16]
		}
	}
	TOUCH_SaveParam();
 8006d84:	f000 f9be 	bl	8007104 <TOUCH_SaveParam>
 8006d88:	e000      	b.n	8006d8c <TOUCH_Calibration+0x154>
			return;
 8006d8a:	bf00      	nop
}
 8006d8c:	3714      	adds	r7, #20
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bd90      	pop	{r4, r7, pc}
 8006d92:	bf00      	nop
 8006d94:	20000bb4 	.word	0x20000bb4

08006d98 <TOUCH_CelarFIFO>:
*********************************************************************************************************
* Func name: TOUCH_CelarFIFO
*********************************************************************************************************
*/
void TOUCH_CelarFIFO(void)
{
 8006d98:	b480      	push	{r7}
 8006d9a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 8006d9c:	b662      	cpsie	i
}
 8006d9e:	bf00      	nop
	//__set_PRIMASK(1);  		/* ¹ØÖÐ¶Ï */
	__enable_irq();
	g_tTP.Write = g_tTP.Read;
 8006da0:	4b06      	ldr	r3, [pc, #24]	; (8006dbc <TOUCH_CelarFIFO+0x24>)
 8006da2:	f893 207e 	ldrb.w	r2, [r3, #126]	; 0x7e
 8006da6:	4b05      	ldr	r3, [pc, #20]	; (8006dbc <TOUCH_CelarFIFO+0x24>)
 8006da8:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
  __ASM volatile ("cpsid i" : : : "memory");
 8006dac:	b672      	cpsid	i
}
 8006dae:	bf00      	nop
	//__set_PRIMASK(0);  		/* ¿ªÖÐ¶Ï */
	__disable_irq();
}
 8006db0:	bf00      	nop
 8006db2:	46bd      	mov	sp, r7
 8006db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db8:	4770      	bx	lr
 8006dba:	bf00      	nop
 8006dbc:	20000bb4 	.word	0x20000bb4

08006dc0 <TOUCH_DispPoint>:
*********************************************************************************************************
* Func name: TOUCH_DispPoint1
*********************************************************************************************************
*/
static void TOUCH_DispPoint(uint8_t _ucIndex)
{
 8006dc0:	b590      	push	{r4, r7, lr}
 8006dc2:	b087      	sub	sp, #28
 8006dc4:	af02      	add	r7, sp, #8
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	71fb      	strb	r3, [r7, #7]
	FONT_T tFont16;
	{
		tFont16.FontCode = FC_ST_16;	/* ×ÖÌå´úÂë 16µãÕó */
 8006dca:	2300      	movs	r3, #0
 8006dcc:	813b      	strh	r3, [r7, #8]
		tFont16.FrontColor = CL_WHITE;		/* ×ÖÌåÑÕÉ« 0 »ò 1 */
 8006dce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006dd2:	817b      	strh	r3, [r7, #10]
		tFont16.BackColor = CL_BLUE;	/* ÎÄ×Ö±³¾°ÑÕÉ« */
 8006dd4:	231f      	movs	r3, #31
 8006dd6:	81bb      	strh	r3, [r7, #12]
		tFont16.Space = 0;			/* ÎÄ×Ö¼ä¾à£¬µ¥Î» = ÏñËØ */
 8006dd8:	2300      	movs	r3, #0
 8006dda:	81fb      	strh	r3, [r7, #14]
	}
	if (_ucIndex == 0)
 8006ddc:	79fb      	ldrb	r3, [r7, #7]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d134      	bne.n	8006e4c <TOUCH_DispPoint+0x8c>
	{
		LCD_ClrScr(CL_BLUE);
 8006de2:	201f      	movs	r0, #31
 8006de4:	f7fe fe1e 	bl	8005a24 <LCD_ClrScr>
		LCD_DrawRect(0, 0, LCD_GetHeight(), LCD_GetWidth(), CL_WHITE);
 8006de8:	f7ff f956 	bl	8006098 <LCD_GetHeight>
 8006dec:	4603      	mov	r3, r0
 8006dee:	461c      	mov	r4, r3
 8006df0:	f7ff f95e 	bl	80060b0 <LCD_GetWidth>
 8006df4:	4603      	mov	r3, r0
 8006df6:	461a      	mov	r2, r3
 8006df8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006dfc:	9300      	str	r3, [sp, #0]
 8006dfe:	4613      	mov	r3, r2
 8006e00:	4622      	mov	r2, r4
 8006e02:	2100      	movs	r1, #0
 8006e04:	2000      	movs	r0, #0
 8006e06:	f7ff f95f 	bl	80060c8 <LCD_DrawRect>
		LCD_DrawRect(2, 2, LCD_GetHeight() - 4, LCD_GetWidth() - 4, CL_YELLOW);
 8006e0a:	f7ff f945 	bl	8006098 <LCD_GetHeight>
 8006e0e:	4603      	mov	r3, r0
 8006e10:	3b04      	subs	r3, #4
 8006e12:	b29c      	uxth	r4, r3
 8006e14:	f7ff f94c 	bl	80060b0 <LCD_GetWidth>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	3b04      	subs	r3, #4
 8006e1c:	b29b      	uxth	r3, r3
 8006e1e:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8006e22:	9200      	str	r2, [sp, #0]
 8006e24:	4622      	mov	r2, r4
 8006e26:	2102      	movs	r1, #2
 8006e28:	2002      	movs	r0, #2
 8006e2a:	f7ff f94d 	bl	80060c8 <LCD_DrawRect>

		LCD_DispStr(50, 10, "Calibration", &tFont16);
 8006e2e:	f107 0308 	add.w	r3, r7, #8
 8006e32:	4a2f      	ldr	r2, [pc, #188]	; (8006ef0 <TOUCH_DispPoint+0x130>)
 8006e34:	210a      	movs	r1, #10
 8006e36:	2032      	movs	r0, #50	; 0x32
 8006e38:	f7fe fe42 	bl	8005ac0 <LCD_DispStr>

		LCD_DrawCircle(TP_X1, TP_Y1, 6, CL_WHITE);
 8006e3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006e40:	2206      	movs	r2, #6
 8006e42:	2114      	movs	r1, #20
 8006e44:	2014      	movs	r0, #20
 8006e46:	f7ff f961 	bl	800610c <LCD_DrawCircle>
	{
		LCD_DrawCircle(TP_X3, TP_Y3, 6, CL_BLUE);			/* ²Á³ýµÚ3¸öµã */

		LCD_DrawCircle(TP_X4, TP_Y4, 6, CL_WHITE);
	}
}
 8006e4a:	e04c      	b.n	8006ee6 <TOUCH_DispPoint+0x126>
	else if (_ucIndex == 1)
 8006e4c:	79fb      	ldrb	r3, [r7, #7]
 8006e4e:	2b01      	cmp	r3, #1
 8006e50:	d116      	bne.n	8006e80 <TOUCH_DispPoint+0xc0>
		LCD_DrawCircle(TP_X1, TP_Y1, 6, CL_BLUE);			/* ²Á³ýµÚ1¸öµã */
 8006e52:	231f      	movs	r3, #31
 8006e54:	2206      	movs	r2, #6
 8006e56:	2114      	movs	r1, #20
 8006e58:	2014      	movs	r0, #20
 8006e5a:	f7ff f957 	bl	800610c <LCD_DrawCircle>
		LCD_DrawCircle(TP_X2, TP_Y2, 6, CL_WHITE);
 8006e5e:	f7ff f927 	bl	80060b0 <LCD_GetWidth>
 8006e62:	4603      	mov	r3, r0
 8006e64:	3b14      	subs	r3, #20
 8006e66:	b29c      	uxth	r4, r3
 8006e68:	f7ff f916 	bl	8006098 <LCD_GetHeight>
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	3b14      	subs	r3, #20
 8006e70:	b299      	uxth	r1, r3
 8006e72:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006e76:	2206      	movs	r2, #6
 8006e78:	4620      	mov	r0, r4
 8006e7a:	f7ff f947 	bl	800610c <LCD_DrawCircle>
}
 8006e7e:	e032      	b.n	8006ee6 <TOUCH_DispPoint+0x126>
	else if (_ucIndex == 2)
 8006e80:	79fb      	ldrb	r3, [r7, #7]
 8006e82:	2b02      	cmp	r3, #2
 8006e84:	d11a      	bne.n	8006ebc <TOUCH_DispPoint+0xfc>
		LCD_DrawCircle(TP_X2, TP_Y2, 6, CL_BLUE);			/* ²Á³ýµÚ2¸öµã */
 8006e86:	f7ff f913 	bl	80060b0 <LCD_GetWidth>
 8006e8a:	4603      	mov	r3, r0
 8006e8c:	3b14      	subs	r3, #20
 8006e8e:	b29c      	uxth	r4, r3
 8006e90:	f7ff f902 	bl	8006098 <LCD_GetHeight>
 8006e94:	4603      	mov	r3, r0
 8006e96:	3b14      	subs	r3, #20
 8006e98:	b299      	uxth	r1, r3
 8006e9a:	231f      	movs	r3, #31
 8006e9c:	2206      	movs	r2, #6
 8006e9e:	4620      	mov	r0, r4
 8006ea0:	f7ff f934 	bl	800610c <LCD_DrawCircle>
		LCD_DrawCircle(TP_X3, TP_Y3, 6, CL_WHITE);
 8006ea4:	f7ff f8f8 	bl	8006098 <LCD_GetHeight>
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	3b14      	subs	r3, #20
 8006eac:	b299      	uxth	r1, r3
 8006eae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006eb2:	2206      	movs	r2, #6
 8006eb4:	2014      	movs	r0, #20
 8006eb6:	f7ff f929 	bl	800610c <LCD_DrawCircle>
}
 8006eba:	e014      	b.n	8006ee6 <TOUCH_DispPoint+0x126>
		LCD_DrawCircle(TP_X3, TP_Y3, 6, CL_BLUE);			/* ²Á³ýµÚ3¸öµã */
 8006ebc:	f7ff f8ec 	bl	8006098 <LCD_GetHeight>
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	3b14      	subs	r3, #20
 8006ec4:	b299      	uxth	r1, r3
 8006ec6:	231f      	movs	r3, #31
 8006ec8:	2206      	movs	r2, #6
 8006eca:	2014      	movs	r0, #20
 8006ecc:	f7ff f91e 	bl	800610c <LCD_DrawCircle>
		LCD_DrawCircle(TP_X4, TP_Y4, 6, CL_WHITE);
 8006ed0:	f7ff f8ee 	bl	80060b0 <LCD_GetWidth>
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	3b14      	subs	r3, #20
 8006ed8:	b298      	uxth	r0, r3
 8006eda:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006ede:	2206      	movs	r2, #6
 8006ee0:	2114      	movs	r1, #20
 8006ee2:	f7ff f913 	bl	800610c <LCD_DrawCircle>
}
 8006ee6:	bf00      	nop
 8006ee8:	3714      	adds	r7, #20
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd90      	pop	{r4, r7, pc}
 8006eee:	bf00      	nop
 8006ef0:	0800b740 	.word	0x0800b740

08006ef4 <TOUCH_WaitRelease>:
*********************************************************************************************************
* Func name: TOUCH_WaitRelease
*********************************************************************************************************
*/
void TOUCH_WaitRelease(void)
{
 8006ef4:	b590      	push	{r4, r7, lr}
 8006ef6:	b083      	sub	sp, #12
 8006ef8:	af00      	add	r7, sp, #0
	uint8_t usCount = 0;
 8006efa:	2300      	movs	r3, #0
 8006efc:	71fb      	strb	r3, [r7, #7]

	for (;;)
	{
		if (TOUCH_PressValid(TOUCH_ReadAdcX(), TOUCH_ReadAdcY()) == 0)
 8006efe:	f000 f843 	bl	8006f88 <TOUCH_ReadAdcX>
 8006f02:	4603      	mov	r3, r0
 8006f04:	461c      	mov	r4, r3
 8006f06:	f000 f85b 	bl	8006fc0 <TOUCH_ReadAdcY>
 8006f0a:	4603      	mov	r3, r0
 8006f0c:	4619      	mov	r1, r3
 8006f0e:	4620      	mov	r0, r4
 8006f10:	f000 f814 	bl	8006f3c <TOUCH_PressValid>
 8006f14:	4603      	mov	r3, r0
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d106      	bne.n	8006f28 <TOUCH_WaitRelease+0x34>
		{
			if (++usCount > 5)
 8006f1a:	79fb      	ldrb	r3, [r7, #7]
 8006f1c:	3301      	adds	r3, #1
 8006f1e:	71fb      	strb	r3, [r7, #7]
 8006f20:	79fb      	ldrb	r3, [r7, #7]
 8006f22:	2b05      	cmp	r3, #5
 8006f24:	d902      	bls.n	8006f2c <TOUCH_WaitRelease+0x38>
			{
				break;
 8006f26:	e005      	b.n	8006f34 <TOUCH_WaitRelease+0x40>
			}
		}
		else
		{
			usCount = 0;
 8006f28:	2300      	movs	r3, #0
 8006f2a:	71fb      	strb	r3, [r7, #7]
		}
		bsp_DelayMS(10);
 8006f2c:	200a      	movs	r0, #10
 8006f2e:	f7ff fb73 	bl	8006618 <bsp_DelayMS>
		if (TOUCH_PressValid(TOUCH_ReadAdcX(), TOUCH_ReadAdcY()) == 0)
 8006f32:	e7e4      	b.n	8006efe <TOUCH_WaitRelease+0xa>
	}
}
 8006f34:	bf00      	nop
 8006f36:	370c      	adds	r7, #12
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	bd90      	pop	{r4, r7, pc}

08006f3c <TOUCH_PressValid>:
*	ÐÎ    ²Î:  ÎÞ
*	·µ »Ø Öµ: 1 ±íÊ¾ÓÐÐ§£» 0 ±íÊ¾ÎÞÐ§
*********************************************************************************************************
*/
static uint8_t	TOUCH_PressValid(uint16_t _usX, uint16_t _usY)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b083      	sub	sp, #12
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	4603      	mov	r3, r0
 8006f44:	460a      	mov	r2, r1
 8006f46:	80fb      	strh	r3, [r7, #6]
 8006f48:	4613      	mov	r3, r2
 8006f4a:	80bb      	strh	r3, [r7, #4]
	if ((_usX <= ADC_VALID_OFFSET) || (_usY <= ADC_VALID_OFFSET)
 8006f4c:	88fb      	ldrh	r3, [r7, #6]
 8006f4e:	2b02      	cmp	r3, #2
 8006f50:	d90e      	bls.n	8006f70 <TOUCH_PressValid+0x34>
 8006f52:	88bb      	ldrh	r3, [r7, #4]
 8006f54:	2b02      	cmp	r3, #2
 8006f56:	d90b      	bls.n	8006f70 <TOUCH_PressValid+0x34>
			|| (_usX >= g_tTP.usMaxAdc - ADC_VALID_OFFSET)
 8006f58:	88fa      	ldrh	r2, [r7, #6]
 8006f5a:	4b0a      	ldr	r3, [pc, #40]	; (8006f84 <TOUCH_PressValid+0x48>)
 8006f5c:	8a5b      	ldrh	r3, [r3, #18]
 8006f5e:	3b02      	subs	r3, #2
 8006f60:	429a      	cmp	r2, r3
 8006f62:	da05      	bge.n	8006f70 <TOUCH_PressValid+0x34>
			|| (_usY >= g_tTP.usMaxAdc - ADC_VALID_OFFSET))
 8006f64:	88ba      	ldrh	r2, [r7, #4]
 8006f66:	4b07      	ldr	r3, [pc, #28]	; (8006f84 <TOUCH_PressValid+0x48>)
 8006f68:	8a5b      	ldrh	r3, [r3, #18]
 8006f6a:	3b02      	subs	r3, #2
 8006f6c:	429a      	cmp	r2, r3
 8006f6e:	db01      	blt.n	8006f74 <TOUCH_PressValid+0x38>
	{
		return 0;
 8006f70:	2300      	movs	r3, #0
 8006f72:	e000      	b.n	8006f76 <TOUCH_PressValid+0x3a>
	}
	else
	{
		return 1;
 8006f74:	2301      	movs	r3, #1
	}
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	370c      	adds	r7, #12
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f80:	4770      	bx	lr
 8006f82:	bf00      	nop
 8006f84:	20000bb4 	.word	0x20000bb4

08006f88 <TOUCH_ReadAdcX>:
*********************************************************************************************************
*	Func name: TOUCH_ReadAdcX
*********************************************************************************************************
*/
uint16_t TOUCH_ReadAdcX(void)
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b085      	sub	sp, #20
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	2301      	movs	r3, #1
 8006f90:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	f383 8810 	msr	PRIMASK, r3
}
 8006f98:	bf00      	nop
	uint16_t usAdc;

	__set_PRIMASK(1);  		/* ¹ØÖÐ¶Ï */

	usAdc = g_tTP.usAdcNowX;
 8006f9a:	4b08      	ldr	r3, [pc, #32]	; (8006fbc <TOUCH_ReadAdcX+0x34>)
 8006f9c:	8a9b      	ldrh	r3, [r3, #20]
 8006f9e:	81fb      	strh	r3, [r7, #14]
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	f383 8810 	msr	PRIMASK, r3
}
 8006faa:	bf00      	nop
	__set_PRIMASK(0);  		/* ¿ªÖÐ¶Ï */

	return usAdc;
 8006fac:	89fb      	ldrh	r3, [r7, #14]
}
 8006fae:	4618      	mov	r0, r3
 8006fb0:	3714      	adds	r7, #20
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb8:	4770      	bx	lr
 8006fba:	bf00      	nop
 8006fbc:	20000bb4 	.word	0x20000bb4

08006fc0 <TOUCH_ReadAdcY>:
*********************************************************************************************************
*	Func name: TOUCH_ReadAdcY
*********************************************************************************************************
*/
uint16_t TOUCH_ReadAdcY(void)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b085      	sub	sp, #20
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f383 8810 	msr	PRIMASK, r3
}
 8006fd0:	bf00      	nop
	uint16_t usAdc;

	__set_PRIMASK(1);  		/* ¹ØÖÐ¶Ï */
	usAdc = g_tTP.usAdcNowY;
 8006fd2:	4b08      	ldr	r3, [pc, #32]	; (8006ff4 <TOUCH_ReadAdcY+0x34>)
 8006fd4:	8adb      	ldrh	r3, [r3, #22]
 8006fd6:	81fb      	strh	r3, [r7, #14]
 8006fd8:	2300      	movs	r3, #0
 8006fda:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	f383 8810 	msr	PRIMASK, r3
}
 8006fe2:	bf00      	nop
	__set_PRIMASK(0);  		/* ¿ªÖÐ¶Ï */

	return usAdc;
 8006fe4:	89fb      	ldrh	r3, [r7, #14]
}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	3714      	adds	r7, #20
 8006fea:	46bd      	mov	sp, r7
 8006fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff0:	4770      	bx	lr
 8006ff2:	bf00      	nop
 8006ff4:	20000bb4 	.word	0x20000bb4

08006ff8 <TOUCH_Abs>:
*********************************************************************************************************
* Func name: TOUCH_Abs
*********************************************************************************************************
*/
int32_t TOUCH_Abs(int32_t x)
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b083      	sub	sp, #12
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
	if (x >= 0)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2b00      	cmp	r3, #0
 8007004:	db01      	blt.n	800700a <TOUCH_Abs+0x12>
	{
		return x;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	e001      	b.n	800700e <TOUCH_Abs+0x16>
	}
	else
	{
		return -x;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	425b      	negs	r3, r3
	}
}
 800700e:	4618      	mov	r0, r3
 8007010:	370c      	adds	r7, #12
 8007012:	46bd      	mov	sp, r7
 8007014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007018:	4770      	bx	lr
	...

0800701c <TOUCH_DataFilter>:
*********************************************************************************************************
*  Func name: TOUCH_DataFilter
*********************************************************************************************************
*/
static uint16_t TOUCH_DataFilter(uint16_t *_pBuf, uint8_t _ucCount)
{
 800701c:	b480      	push	{r7}
 800701e:	b087      	sub	sp, #28
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
 8007024:	460b      	mov	r3, r1
 8007026:	70fb      	strb	r3, [r7, #3]
	uint16_t usTemp;
	uint32_t uiSum;

	do
	{
		flag = 0;
 8007028:	2300      	movs	r3, #0
 800702a:	75fb      	strb	r3, [r7, #23]
		for (i = 0; i < _ucCount - 1; i++)
 800702c:	2300      	movs	r3, #0
 800702e:	75bb      	strb	r3, [r7, #22]
 8007030:	e029      	b.n	8007086 <TOUCH_DataFilter+0x6a>
		{
			if (_pBuf[i] > _pBuf[i+1])
 8007032:	7dbb      	ldrb	r3, [r7, #22]
 8007034:	005b      	lsls	r3, r3, #1
 8007036:	687a      	ldr	r2, [r7, #4]
 8007038:	4413      	add	r3, r2
 800703a:	881a      	ldrh	r2, [r3, #0]
 800703c:	7dbb      	ldrb	r3, [r7, #22]
 800703e:	3301      	adds	r3, #1
 8007040:	005b      	lsls	r3, r3, #1
 8007042:	6879      	ldr	r1, [r7, #4]
 8007044:	440b      	add	r3, r1
 8007046:	881b      	ldrh	r3, [r3, #0]
 8007048:	429a      	cmp	r2, r3
 800704a:	d919      	bls.n	8007080 <TOUCH_DataFilter+0x64>
			{
				usTemp = _pBuf[i + 1];
 800704c:	7dbb      	ldrb	r3, [r7, #22]
 800704e:	3301      	adds	r3, #1
 8007050:	005b      	lsls	r3, r3, #1
 8007052:	687a      	ldr	r2, [r7, #4]
 8007054:	4413      	add	r3, r2
 8007056:	881b      	ldrh	r3, [r3, #0]
 8007058:	81fb      	strh	r3, [r7, #14]
				_pBuf[i+1] = _pBuf[i];
 800705a:	7dbb      	ldrb	r3, [r7, #22]
 800705c:	005b      	lsls	r3, r3, #1
 800705e:	687a      	ldr	r2, [r7, #4]
 8007060:	441a      	add	r2, r3
 8007062:	7dbb      	ldrb	r3, [r7, #22]
 8007064:	3301      	adds	r3, #1
 8007066:	005b      	lsls	r3, r3, #1
 8007068:	6879      	ldr	r1, [r7, #4]
 800706a:	440b      	add	r3, r1
 800706c:	8812      	ldrh	r2, [r2, #0]
 800706e:	801a      	strh	r2, [r3, #0]
				_pBuf[i] = usTemp;
 8007070:	7dbb      	ldrb	r3, [r7, #22]
 8007072:	005b      	lsls	r3, r3, #1
 8007074:	687a      	ldr	r2, [r7, #4]
 8007076:	4413      	add	r3, r2
 8007078:	89fa      	ldrh	r2, [r7, #14]
 800707a:	801a      	strh	r2, [r3, #0]
				flag = 1;
 800707c:	2301      	movs	r3, #1
 800707e:	75fb      	strb	r3, [r7, #23]
		for (i = 0; i < _ucCount - 1; i++)
 8007080:	7dbb      	ldrb	r3, [r7, #22]
 8007082:	3301      	adds	r3, #1
 8007084:	75bb      	strb	r3, [r7, #22]
 8007086:	7dba      	ldrb	r2, [r7, #22]
 8007088:	78fb      	ldrb	r3, [r7, #3]
 800708a:	3b01      	subs	r3, #1
 800708c:	429a      	cmp	r2, r3
 800708e:	dbd0      	blt.n	8007032 <TOUCH_DataFilter+0x16>
			}
		}
	}while(flag);
 8007090:	7dfb      	ldrb	r3, [r7, #23]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d1c8      	bne.n	8007028 <TOUCH_DataFilter+0xc>

	uiSum = 0;
 8007096:	2300      	movs	r3, #0
 8007098:	613b      	str	r3, [r7, #16]
	for (i = 0; i < _ucCount / 3; i++)
 800709a:	2300      	movs	r3, #0
 800709c:	75bb      	strb	r3, [r7, #22]
 800709e:	e013      	b.n	80070c8 <TOUCH_DataFilter+0xac>
	{
		uiSum += _pBuf[_ucCount / 3 + i];
 80070a0:	78fb      	ldrb	r3, [r7, #3]
 80070a2:	4a17      	ldr	r2, [pc, #92]	; (8007100 <TOUCH_DataFilter+0xe4>)
 80070a4:	fba2 2303 	umull	r2, r3, r2, r3
 80070a8:	085b      	lsrs	r3, r3, #1
 80070aa:	b2db      	uxtb	r3, r3
 80070ac:	461a      	mov	r2, r3
 80070ae:	7dbb      	ldrb	r3, [r7, #22]
 80070b0:	4413      	add	r3, r2
 80070b2:	005b      	lsls	r3, r3, #1
 80070b4:	687a      	ldr	r2, [r7, #4]
 80070b6:	4413      	add	r3, r2
 80070b8:	881b      	ldrh	r3, [r3, #0]
 80070ba:	461a      	mov	r2, r3
 80070bc:	693b      	ldr	r3, [r7, #16]
 80070be:	4413      	add	r3, r2
 80070c0:	613b      	str	r3, [r7, #16]
	for (i = 0; i < _ucCount / 3; i++)
 80070c2:	7dbb      	ldrb	r3, [r7, #22]
 80070c4:	3301      	adds	r3, #1
 80070c6:	75bb      	strb	r3, [r7, #22]
 80070c8:	78fb      	ldrb	r3, [r7, #3]
 80070ca:	4a0d      	ldr	r2, [pc, #52]	; (8007100 <TOUCH_DataFilter+0xe4>)
 80070cc:	fba2 2303 	umull	r2, r3, r2, r3
 80070d0:	085b      	lsrs	r3, r3, #1
 80070d2:	b2db      	uxtb	r3, r3
 80070d4:	7dba      	ldrb	r2, [r7, #22]
 80070d6:	429a      	cmp	r2, r3
 80070d8:	d3e2      	bcc.n	80070a0 <TOUCH_DataFilter+0x84>
	}
	usTemp = uiSum / (_ucCount / 3);
 80070da:	78fb      	ldrb	r3, [r7, #3]
 80070dc:	4a08      	ldr	r2, [pc, #32]	; (8007100 <TOUCH_DataFilter+0xe4>)
 80070de:	fba2 2303 	umull	r2, r3, r2, r3
 80070e2:	085b      	lsrs	r3, r3, #1
 80070e4:	b2db      	uxtb	r3, r3
 80070e6:	461a      	mov	r2, r3
 80070e8:	693b      	ldr	r3, [r7, #16]
 80070ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80070ee:	81fb      	strh	r3, [r7, #14]
	return usTemp;
 80070f0:	89fb      	ldrh	r3, [r7, #14]
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	371c      	adds	r7, #28
 80070f6:	46bd      	mov	sp, r7
 80070f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fc:	4770      	bx	lr
 80070fe:	bf00      	nop
 8007100:	aaaaaaab 	.word	0xaaaaaaab

08007104 <TOUCH_SaveParam>:
*	Func name: TOUCH_SaveParam
*********************************************************************************************************
*/
extern void SaveParam(void);
static void TOUCH_SaveParam(void)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	af00      	add	r7, sp, #0
#if 1
	g_tParam.usAdcX1 = g_tTP.usAdcX1;
 8007108:	4b13      	ldr	r3, [pc, #76]	; (8007158 <TOUCH_SaveParam+0x54>)
 800710a:	881a      	ldrh	r2, [r3, #0]
 800710c:	4b13      	ldr	r3, [pc, #76]	; (800715c <TOUCH_SaveParam+0x58>)
 800710e:	80da      	strh	r2, [r3, #6]
	g_tParam.usAdcY1 = g_tTP.usAdcY1;
 8007110:	4b11      	ldr	r3, [pc, #68]	; (8007158 <TOUCH_SaveParam+0x54>)
 8007112:	885a      	ldrh	r2, [r3, #2]
 8007114:	4b11      	ldr	r3, [pc, #68]	; (800715c <TOUCH_SaveParam+0x58>)
 8007116:	811a      	strh	r2, [r3, #8]
	g_tParam.usAdcX2 = g_tTP.usAdcX2;
 8007118:	4b0f      	ldr	r3, [pc, #60]	; (8007158 <TOUCH_SaveParam+0x54>)
 800711a:	889a      	ldrh	r2, [r3, #4]
 800711c:	4b0f      	ldr	r3, [pc, #60]	; (800715c <TOUCH_SaveParam+0x58>)
 800711e:	815a      	strh	r2, [r3, #10]
	g_tParam.usAdcY2 = g_tTP.usAdcY2;
 8007120:	4b0d      	ldr	r3, [pc, #52]	; (8007158 <TOUCH_SaveParam+0x54>)
 8007122:	88da      	ldrh	r2, [r3, #6]
 8007124:	4b0d      	ldr	r3, [pc, #52]	; (800715c <TOUCH_SaveParam+0x58>)
 8007126:	819a      	strh	r2, [r3, #12]
	g_tParam.usAdcX3 = g_tTP.usAdcX3;
 8007128:	4b0b      	ldr	r3, [pc, #44]	; (8007158 <TOUCH_SaveParam+0x54>)
 800712a:	891a      	ldrh	r2, [r3, #8]
 800712c:	4b0b      	ldr	r3, [pc, #44]	; (800715c <TOUCH_SaveParam+0x58>)
 800712e:	81da      	strh	r2, [r3, #14]
	g_tParam.usAdcY3 = g_tTP.usAdcY3;
 8007130:	4b09      	ldr	r3, [pc, #36]	; (8007158 <TOUCH_SaveParam+0x54>)
 8007132:	895a      	ldrh	r2, [r3, #10]
 8007134:	4b09      	ldr	r3, [pc, #36]	; (800715c <TOUCH_SaveParam+0x58>)
 8007136:	821a      	strh	r2, [r3, #16]
	g_tParam.usAdcX4 = g_tTP.usAdcX4;
 8007138:	4b07      	ldr	r3, [pc, #28]	; (8007158 <TOUCH_SaveParam+0x54>)
 800713a:	899a      	ldrh	r2, [r3, #12]
 800713c:	4b07      	ldr	r3, [pc, #28]	; (800715c <TOUCH_SaveParam+0x58>)
 800713e:	825a      	strh	r2, [r3, #18]
	g_tParam.usAdcY4 = g_tTP.usAdcY4;
 8007140:	4b05      	ldr	r3, [pc, #20]	; (8007158 <TOUCH_SaveParam+0x54>)
 8007142:	89da      	ldrh	r2, [r3, #14]
 8007144:	4b05      	ldr	r3, [pc, #20]	; (800715c <TOUCH_SaveParam+0x58>)
 8007146:	829a      	strh	r2, [r3, #20]
	g_tParam.XYChange = g_tTP.XYChange;
 8007148:	4b03      	ldr	r3, [pc, #12]	; (8007158 <TOUCH_SaveParam+0x54>)
 800714a:	8a1a      	ldrh	r2, [r3, #16]
 800714c:	4b03      	ldr	r3, [pc, #12]	; (800715c <TOUCH_SaveParam+0x58>)
 800714e:	82da      	strh	r2, [r3, #22]

	SaveParam();	/* ½«²ÎÊýÐ´ÈëFlash */
 8007150:	f7fa fe6c 	bl	8001e2c <SaveParam>
#endif
}
 8007154:	bf00      	nop
 8007156:	bd80      	pop	{r7, pc}
 8007158:	20000bb4 	.word	0x20000bb4
 800715c:	20000200 	.word	0x20000200

08007160 <bsp_InitUart>:
*********************************************************************************************************
*	Func name: bsp_InitUart
*********************************************************************************************************
*/
void bsp_InitUart(void)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	af00      	add	r7, sp, #0
	UartVarInit();		/* ±ØÐëÏÈ³õÊ¼»¯È«¾Ö±äÁ¿,ÔÙÅäÖÃÓ²¼þ */
 8007164:	f000 f81e 	bl	80071a4 <UartVarInit>

	InitHardUart();		/* ÅäÖÃ´®¿ÚµÄÓ²¼þ²ÎÊý(²¨ÌØÂÊµÈ) */
 8007168:	f000 f8f6 	bl	8007358 <InitHardUart>

	ConfigUartNVIC();	/* ÅäÖÃ´®¿ÚÖÐ¶Ï */
 800716c:	f000 f9d6 	bl	800751c <ConfigUartNVIC>
}
 8007170:	bf00      	nop
 8007172:	bd80      	pop	{r7, pc}

08007174 <USART3_SendBefor>:
*********************************************************************************************************
*	Func name: USART3_SendBefor
*********************************************************************************************************
*/
void USART3_SendBefor(void)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	af00      	add	r7, sp, #0
	RS485_TX_EN();	/* ÇÐ»»RS485ÊÕ·¢Ð¾Æ¬Îª·¢ËÍÄ£Ê½ */
 8007178:	2201      	movs	r2, #1
 800717a:	2104      	movs	r1, #4
 800717c:	4802      	ldr	r0, [pc, #8]	; (8007188 <USART3_SendBefor+0x14>)
 800717e:	f000 fdb1 	bl	8007ce4 <HAL_GPIO_WritePin>
}
 8007182:	bf00      	nop
 8007184:	bd80      	pop	{r7, pc}
 8007186:	bf00      	nop
 8007188:	40020400 	.word	0x40020400

0800718c <USART3_SendOver>:
*********************************************************************************************************
*	Func name: USART3_SendOver
*********************************************************************************************************
*/
void USART3_SendOver(void)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	af00      	add	r7, sp, #0
	RS485_RX_EN();	/* ÇÐ»»RS485ÊÕ·¢Ð¾Æ¬Îª½ÓÊÕÄ£Ê½ */
 8007190:	2200      	movs	r2, #0
 8007192:	2104      	movs	r1, #4
 8007194:	4802      	ldr	r0, [pc, #8]	; (80071a0 <USART3_SendOver+0x14>)
 8007196:	f000 fda5 	bl	8007ce4 <HAL_GPIO_WritePin>
}
 800719a:	bf00      	nop
 800719c:	bd80      	pop	{r7, pc}
 800719e:	bf00      	nop
 80071a0:	40020400 	.word	0x40020400

080071a4 <UartVarInit>:
*********************************************************************************************************
*	Func name: UartVarInit
*********************************************************************************************************
*/
static void UartVarInit(void)
{
 80071a4:	b480      	push	{r7}
 80071a6:	af00      	add	r7, sp, #0
#if UART1_FIFO_EN == 1
	g_tUart1.uart = USART1;						/* STM32 ´®¿ÚÉè±¸ */
 80071a8:	4b59      	ldr	r3, [pc, #356]	; (8007310 <UartVarInit+0x16c>)
 80071aa:	4a5a      	ldr	r2, [pc, #360]	; (8007314 <UartVarInit+0x170>)
 80071ac:	601a      	str	r2, [r3, #0]
	g_tUart1.pTxBuf = g_TxBuf1;					/* ·¢ËÍ»º³åÇøÖ¸Õë */
 80071ae:	4b58      	ldr	r3, [pc, #352]	; (8007310 <UartVarInit+0x16c>)
 80071b0:	4a59      	ldr	r2, [pc, #356]	; (8007318 <UartVarInit+0x174>)
 80071b2:	605a      	str	r2, [r3, #4]
	g_tUart1.pRxBuf = g_RxBuf1;					/* ½ÓÊÕ»º³åÇøÖ¸Õë */
 80071b4:	4b56      	ldr	r3, [pc, #344]	; (8007310 <UartVarInit+0x16c>)
 80071b6:	4a59      	ldr	r2, [pc, #356]	; (800731c <UartVarInit+0x178>)
 80071b8:	609a      	str	r2, [r3, #8]
	g_tUart1.usTxBufSize = UART1_TX_BUF_SIZE;	/* ·¢ËÍ»º³åÇø´óÐ¡ */
 80071ba:	4b55      	ldr	r3, [pc, #340]	; (8007310 <UartVarInit+0x16c>)
 80071bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80071c0:	819a      	strh	r2, [r3, #12]
	g_tUart1.usRxBufSize = UART1_RX_BUF_SIZE;	/* ½ÓÊÕ»º³åÇø´óÐ¡ */
 80071c2:	4b53      	ldr	r3, [pc, #332]	; (8007310 <UartVarInit+0x16c>)
 80071c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80071c8:	81da      	strh	r2, [r3, #14]
	g_tUart1.usTxWrite = 0;						/* ·¢ËÍFIFOÐ´Ë÷Òý */
 80071ca:	4b51      	ldr	r3, [pc, #324]	; (8007310 <UartVarInit+0x16c>)
 80071cc:	2200      	movs	r2, #0
 80071ce:	821a      	strh	r2, [r3, #16]
	g_tUart1.usTxRead = 0;						/* ·¢ËÍFIFO¶ÁË÷Òý */
 80071d0:	4b4f      	ldr	r3, [pc, #316]	; (8007310 <UartVarInit+0x16c>)
 80071d2:	2200      	movs	r2, #0
 80071d4:	825a      	strh	r2, [r3, #18]
	g_tUart1.usRxWrite = 0;						/* ½ÓÊÕFIFOÐ´Ë÷Òý */
 80071d6:	4b4e      	ldr	r3, [pc, #312]	; (8007310 <UartVarInit+0x16c>)
 80071d8:	2200      	movs	r2, #0
 80071da:	82da      	strh	r2, [r3, #22]
	g_tUart1.usRxRead = 0;						/* ½ÓÊÕFIFO¶ÁË÷Òý */
 80071dc:	4b4c      	ldr	r3, [pc, #304]	; (8007310 <UartVarInit+0x16c>)
 80071de:	2200      	movs	r2, #0
 80071e0:	831a      	strh	r2, [r3, #24]
	g_tUart1.usRxCount = 0;						/* ½ÓÊÕµ½µÄÐÂÊý¾Ý¸öÊý */
 80071e2:	4b4b      	ldr	r3, [pc, #300]	; (8007310 <UartVarInit+0x16c>)
 80071e4:	2200      	movs	r2, #0
 80071e6:	835a      	strh	r2, [r3, #26]
	g_tUart1.usTxCount = 0;						/* ´ý·¢ËÍµÄÊý¾Ý¸öÊý */
 80071e8:	4b49      	ldr	r3, [pc, #292]	; (8007310 <UartVarInit+0x16c>)
 80071ea:	2200      	movs	r2, #0
 80071ec:	829a      	strh	r2, [r3, #20]
	g_tUart1.SendBefor = 0;						/* ·¢ËÍÊý¾ÝÇ°µÄ»Øµ÷º¯Êý */
 80071ee:	4b48      	ldr	r3, [pc, #288]	; (8007310 <UartVarInit+0x16c>)
 80071f0:	2200      	movs	r2, #0
 80071f2:	61da      	str	r2, [r3, #28]
	g_tUart1.SendOver = 0;						/* ·¢ËÍÍê±ÏºóµÄ»Øµ÷º¯Êý */
 80071f4:	4b46      	ldr	r3, [pc, #280]	; (8007310 <UartVarInit+0x16c>)
 80071f6:	2200      	movs	r2, #0
 80071f8:	621a      	str	r2, [r3, #32]
	g_tUart1.ReciveNew = 0;						/* ½ÓÊÕµ½ÐÂÊý¾ÝºóµÄ»Øµ÷º¯Êý */
 80071fa:	4b45      	ldr	r3, [pc, #276]	; (8007310 <UartVarInit+0x16c>)
 80071fc:	2200      	movs	r2, #0
 80071fe:	625a      	str	r2, [r3, #36]	; 0x24
#endif

#if UART2_FIFO_EN == 1
	g_tUart2.uart = USART2;						/* STM32 ´®¿ÚÉè±¸ */
 8007200:	4b47      	ldr	r3, [pc, #284]	; (8007320 <UartVarInit+0x17c>)
 8007202:	4a48      	ldr	r2, [pc, #288]	; (8007324 <UartVarInit+0x180>)
 8007204:	601a      	str	r2, [r3, #0]
	g_tUart2.pTxBuf = g_TxBuf2;					/* ·¢ËÍ»º³åÇøÖ¸Õë */
 8007206:	4b46      	ldr	r3, [pc, #280]	; (8007320 <UartVarInit+0x17c>)
 8007208:	4a47      	ldr	r2, [pc, #284]	; (8007328 <UartVarInit+0x184>)
 800720a:	605a      	str	r2, [r3, #4]
	g_tUart2.pRxBuf = g_RxBuf2;					/* ½ÓÊÕ»º³åÇøÖ¸Õë */
 800720c:	4b44      	ldr	r3, [pc, #272]	; (8007320 <UartVarInit+0x17c>)
 800720e:	4a47      	ldr	r2, [pc, #284]	; (800732c <UartVarInit+0x188>)
 8007210:	609a      	str	r2, [r3, #8]
	g_tUart2.usTxBufSize = UART2_TX_BUF_SIZE;	/* ·¢ËÍ»º³åÇø´óÐ¡ */
 8007212:	4b43      	ldr	r3, [pc, #268]	; (8007320 <UartVarInit+0x17c>)
 8007214:	2201      	movs	r2, #1
 8007216:	819a      	strh	r2, [r3, #12]
	g_tUart2.usRxBufSize = UART2_RX_BUF_SIZE;	/* ½ÓÊÕ»º³åÇø´óÐ¡ */
 8007218:	4b41      	ldr	r3, [pc, #260]	; (8007320 <UartVarInit+0x17c>)
 800721a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800721e:	81da      	strh	r2, [r3, #14]
	g_tUart2.usTxWrite = 0;						/* ·¢ËÍFIFOÐ´Ë÷Òý */
 8007220:	4b3f      	ldr	r3, [pc, #252]	; (8007320 <UartVarInit+0x17c>)
 8007222:	2200      	movs	r2, #0
 8007224:	821a      	strh	r2, [r3, #16]
	g_tUart2.usTxRead = 0;						/* ·¢ËÍFIFO¶ÁË÷Òý */
 8007226:	4b3e      	ldr	r3, [pc, #248]	; (8007320 <UartVarInit+0x17c>)
 8007228:	2200      	movs	r2, #0
 800722a:	825a      	strh	r2, [r3, #18]
	g_tUart2.usRxWrite = 0;						/* ½ÓÊÕFIFOÐ´Ë÷Òý */
 800722c:	4b3c      	ldr	r3, [pc, #240]	; (8007320 <UartVarInit+0x17c>)
 800722e:	2200      	movs	r2, #0
 8007230:	82da      	strh	r2, [r3, #22]
	g_tUart2.usRxRead = 0;						/* ½ÓÊÕFIFO¶ÁË÷Òý */
 8007232:	4b3b      	ldr	r3, [pc, #236]	; (8007320 <UartVarInit+0x17c>)
 8007234:	2200      	movs	r2, #0
 8007236:	831a      	strh	r2, [r3, #24]
	g_tUart2.usRxCount = 0;						/* ½ÓÊÕµ½µÄÐÂÊý¾Ý¸öÊý */
 8007238:	4b39      	ldr	r3, [pc, #228]	; (8007320 <UartVarInit+0x17c>)
 800723a:	2200      	movs	r2, #0
 800723c:	835a      	strh	r2, [r3, #26]
	g_tUart2.usTxCount = 0;						/* ´ý·¢ËÍµÄÊý¾Ý¸öÊý */
 800723e:	4b38      	ldr	r3, [pc, #224]	; (8007320 <UartVarInit+0x17c>)
 8007240:	2200      	movs	r2, #0
 8007242:	829a      	strh	r2, [r3, #20]
	g_tUart2.SendBefor = 0;						/* ·¢ËÍÊý¾ÝÇ°µÄ»Øµ÷º¯Êý */
 8007244:	4b36      	ldr	r3, [pc, #216]	; (8007320 <UartVarInit+0x17c>)
 8007246:	2200      	movs	r2, #0
 8007248:	61da      	str	r2, [r3, #28]
	g_tUart2.SendOver = 0;						/* ·¢ËÍÍê±ÏºóµÄ»Øµ÷º¯Êý */
 800724a:	4b35      	ldr	r3, [pc, #212]	; (8007320 <UartVarInit+0x17c>)
 800724c:	2200      	movs	r2, #0
 800724e:	621a      	str	r2, [r3, #32]
	g_tUart2.ReciveNew = 0;						/* ½ÓÊÕµ½ÐÂÊý¾ÝºóµÄ»Øµ÷º¯Êý */
 8007250:	4b33      	ldr	r3, [pc, #204]	; (8007320 <UartVarInit+0x17c>)
 8007252:	2200      	movs	r2, #0
 8007254:	625a      	str	r2, [r3, #36]	; 0x24
#endif

#if UART3_FIFO_EN == 1
	g_tUart3.uart = USART3;						/* STM32 ´®¿ÚÉè±¸ */
 8007256:	4b36      	ldr	r3, [pc, #216]	; (8007330 <UartVarInit+0x18c>)
 8007258:	4a36      	ldr	r2, [pc, #216]	; (8007334 <UartVarInit+0x190>)
 800725a:	601a      	str	r2, [r3, #0]
	g_tUart3.pTxBuf = g_TxBuf3;					/* ·¢ËÍ»º³åÇøÖ¸Õë */
 800725c:	4b34      	ldr	r3, [pc, #208]	; (8007330 <UartVarInit+0x18c>)
 800725e:	4a36      	ldr	r2, [pc, #216]	; (8007338 <UartVarInit+0x194>)
 8007260:	605a      	str	r2, [r3, #4]
	g_tUart3.pRxBuf = g_RxBuf3;					/* ½ÓÊÕ»º³åÇøÖ¸Õë */
 8007262:	4b33      	ldr	r3, [pc, #204]	; (8007330 <UartVarInit+0x18c>)
 8007264:	4a35      	ldr	r2, [pc, #212]	; (800733c <UartVarInit+0x198>)
 8007266:	609a      	str	r2, [r3, #8]
	g_tUart3.usTxBufSize = UART3_TX_BUF_SIZE;	/* ·¢ËÍ»º³åÇø´óÐ¡ */
 8007268:	4b31      	ldr	r3, [pc, #196]	; (8007330 <UartVarInit+0x18c>)
 800726a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800726e:	819a      	strh	r2, [r3, #12]
	g_tUart3.usRxBufSize = UART3_RX_BUF_SIZE;	/* ½ÓÊÕ»º³åÇø´óÐ¡ */
 8007270:	4b2f      	ldr	r3, [pc, #188]	; (8007330 <UartVarInit+0x18c>)
 8007272:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007276:	81da      	strh	r2, [r3, #14]
	g_tUart3.usTxWrite = 0;						/* ·¢ËÍFIFOÐ´Ë÷Òý */
 8007278:	4b2d      	ldr	r3, [pc, #180]	; (8007330 <UartVarInit+0x18c>)
 800727a:	2200      	movs	r2, #0
 800727c:	821a      	strh	r2, [r3, #16]
	g_tUart3.usTxRead = 0;						/* ·¢ËÍFIFO¶ÁË÷Òý */
 800727e:	4b2c      	ldr	r3, [pc, #176]	; (8007330 <UartVarInit+0x18c>)
 8007280:	2200      	movs	r2, #0
 8007282:	825a      	strh	r2, [r3, #18]
	g_tUart3.usRxWrite = 0;						/* ½ÓÊÕFIFOÐ´Ë÷Òý */
 8007284:	4b2a      	ldr	r3, [pc, #168]	; (8007330 <UartVarInit+0x18c>)
 8007286:	2200      	movs	r2, #0
 8007288:	82da      	strh	r2, [r3, #22]
	g_tUart3.usRxRead = 0;						/* ½ÓÊÕFIFO¶ÁË÷Òý */
 800728a:	4b29      	ldr	r3, [pc, #164]	; (8007330 <UartVarInit+0x18c>)
 800728c:	2200      	movs	r2, #0
 800728e:	831a      	strh	r2, [r3, #24]
	g_tUart3.usRxCount = 0;						/* ½ÓÊÕµ½µÄÐÂÊý¾Ý¸öÊý */
 8007290:	4b27      	ldr	r3, [pc, #156]	; (8007330 <UartVarInit+0x18c>)
 8007292:	2200      	movs	r2, #0
 8007294:	835a      	strh	r2, [r3, #26]
	g_tUart3.usTxCount = 0;						/* ´ý·¢ËÍµÄÊý¾Ý¸öÊý */
 8007296:	4b26      	ldr	r3, [pc, #152]	; (8007330 <UartVarInit+0x18c>)
 8007298:	2200      	movs	r2, #0
 800729a:	829a      	strh	r2, [r3, #20]
	g_tUart3.SendBefor = USART3_SendBefor;		/* ·¢ËÍÊý¾ÝÇ°µÄ»Øµ÷º¯Êý */
 800729c:	4b24      	ldr	r3, [pc, #144]	; (8007330 <UartVarInit+0x18c>)
 800729e:	4a28      	ldr	r2, [pc, #160]	; (8007340 <UartVarInit+0x19c>)
 80072a0:	61da      	str	r2, [r3, #28]
	g_tUart3.SendOver = USART3_SendOver;		/* ·¢ËÍÍê±ÏºóµÄ»Øµ÷º¯Êý */
 80072a2:	4b23      	ldr	r3, [pc, #140]	; (8007330 <UartVarInit+0x18c>)
 80072a4:	4a27      	ldr	r2, [pc, #156]	; (8007344 <UartVarInit+0x1a0>)
 80072a6:	621a      	str	r2, [r3, #32]
	g_tUart3.ReciveNew = 0;						/* ½ÓÊÕµ½ÐÂÊý¾ÝºóµÄ»Øµ÷º¯Êý */
 80072a8:	4b21      	ldr	r3, [pc, #132]	; (8007330 <UartVarInit+0x18c>)
 80072aa:	2200      	movs	r2, #0
 80072ac:	625a      	str	r2, [r3, #36]	; 0x24
	g_tUart5.ReciveNew = 0;						/* ½ÓÊÕµ½ÐÂÊý¾ÝºóµÄ»Øµ÷º¯Êý */
#endif


#if UART6_FIFO_EN == 1
	g_tUart6.uart = USART6;						/* STM32 ´®¿ÚÉè±¸ */
 80072ae:	4b26      	ldr	r3, [pc, #152]	; (8007348 <UartVarInit+0x1a4>)
 80072b0:	4a26      	ldr	r2, [pc, #152]	; (800734c <UartVarInit+0x1a8>)
 80072b2:	601a      	str	r2, [r3, #0]
	g_tUart6.pTxBuf = g_TxBuf6;					/* ·¢ËÍ»º³åÇøÖ¸Õë */
 80072b4:	4b24      	ldr	r3, [pc, #144]	; (8007348 <UartVarInit+0x1a4>)
 80072b6:	4a26      	ldr	r2, [pc, #152]	; (8007350 <UartVarInit+0x1ac>)
 80072b8:	605a      	str	r2, [r3, #4]
	g_tUart6.pRxBuf = g_RxBuf6;					/* ½ÓÊÕ»º³åÇøÖ¸Õë */
 80072ba:	4b23      	ldr	r3, [pc, #140]	; (8007348 <UartVarInit+0x1a4>)
 80072bc:	4a25      	ldr	r2, [pc, #148]	; (8007354 <UartVarInit+0x1b0>)
 80072be:	609a      	str	r2, [r3, #8]
	g_tUart6.usTxBufSize = UART6_TX_BUF_SIZE;	/* ·¢ËÍ»º³åÇø´óÐ¡ */
 80072c0:	4b21      	ldr	r3, [pc, #132]	; (8007348 <UartVarInit+0x1a4>)
 80072c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80072c6:	819a      	strh	r2, [r3, #12]
	g_tUart6.usRxBufSize = UART6_RX_BUF_SIZE;	/* ½ÓÊÕ»º³åÇø´óÐ¡ */
 80072c8:	4b1f      	ldr	r3, [pc, #124]	; (8007348 <UartVarInit+0x1a4>)
 80072ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80072ce:	81da      	strh	r2, [r3, #14]
	g_tUart6.usTxWrite = 0;						/* ·¢ËÍFIFOÐ´Ë÷Òý */
 80072d0:	4b1d      	ldr	r3, [pc, #116]	; (8007348 <UartVarInit+0x1a4>)
 80072d2:	2200      	movs	r2, #0
 80072d4:	821a      	strh	r2, [r3, #16]
	g_tUart6.usTxRead = 0;						/* ·¢ËÍFIFO¶ÁË÷Òý */
 80072d6:	4b1c      	ldr	r3, [pc, #112]	; (8007348 <UartVarInit+0x1a4>)
 80072d8:	2200      	movs	r2, #0
 80072da:	825a      	strh	r2, [r3, #18]
	g_tUart6.usRxWrite = 0;						/* ½ÓÊÕFIFOÐ´Ë÷Òý */
 80072dc:	4b1a      	ldr	r3, [pc, #104]	; (8007348 <UartVarInit+0x1a4>)
 80072de:	2200      	movs	r2, #0
 80072e0:	82da      	strh	r2, [r3, #22]
	g_tUart6.usRxRead = 0;						/* ½ÓÊÕFIFO¶ÁË÷Òý */
 80072e2:	4b19      	ldr	r3, [pc, #100]	; (8007348 <UartVarInit+0x1a4>)
 80072e4:	2200      	movs	r2, #0
 80072e6:	831a      	strh	r2, [r3, #24]
	g_tUart6.usRxCount = 0;						/* ½ÓÊÕµ½µÄÐÂÊý¾Ý¸öÊý */
 80072e8:	4b17      	ldr	r3, [pc, #92]	; (8007348 <UartVarInit+0x1a4>)
 80072ea:	2200      	movs	r2, #0
 80072ec:	835a      	strh	r2, [r3, #26]
	g_tUart6.usTxCount = 0;						/* ´ý·¢ËÍµÄÊý¾Ý¸öÊý */
 80072ee:	4b16      	ldr	r3, [pc, #88]	; (8007348 <UartVarInit+0x1a4>)
 80072f0:	2200      	movs	r2, #0
 80072f2:	829a      	strh	r2, [r3, #20]
	g_tUart6.SendBefor = 0;						/* ·¢ËÍÊý¾ÝÇ°µÄ»Øµ÷º¯Êý */
 80072f4:	4b14      	ldr	r3, [pc, #80]	; (8007348 <UartVarInit+0x1a4>)
 80072f6:	2200      	movs	r2, #0
 80072f8:	61da      	str	r2, [r3, #28]
	g_tUart6.SendOver = 0;						/* ·¢ËÍÍê±ÏºóµÄ»Øµ÷º¯Êý */
 80072fa:	4b13      	ldr	r3, [pc, #76]	; (8007348 <UartVarInit+0x1a4>)
 80072fc:	2200      	movs	r2, #0
 80072fe:	621a      	str	r2, [r3, #32]
	g_tUart6.ReciveNew = 0;						/* ½ÓÊÕµ½ÐÂÊý¾ÝºóµÄ»Øµ÷º¯Êý */
 8007300:	4b11      	ldr	r3, [pc, #68]	; (8007348 <UartVarInit+0x1a4>)
 8007302:	2200      	movs	r2, #0
 8007304:	625a      	str	r2, [r3, #36]	; 0x24
#endif
}
 8007306:	bf00      	nop
 8007308:	46bd      	mov	sp, r7
 800730a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730e:	4770      	bx	lr
 8007310:	20000c68 	.word	0x20000c68
 8007314:	40011000 	.word	0x40011000
 8007318:	20000c90 	.word	0x20000c90
 800731c:	20001090 	.word	0x20001090
 8007320:	20001490 	.word	0x20001490
 8007324:	40004400 	.word	0x40004400
 8007328:	200014b8 	.word	0x200014b8
 800732c:	200014bc 	.word	0x200014bc
 8007330:	20001cbc 	.word	0x20001cbc
 8007334:	40004800 	.word	0x40004800
 8007338:	20001ce4 	.word	0x20001ce4
 800733c:	200020e4 	.word	0x200020e4
 8007340:	08007175 	.word	0x08007175
 8007344:	0800718d 	.word	0x0800718d
 8007348:	200024e4 	.word	0x200024e4
 800734c:	40011400 	.word	0x40011400
 8007350:	2000250c 	.word	0x2000250c
 8007354:	2000290c 	.word	0x2000290c

08007358 <InitHardUart>:
*********************************************************************************************************
*	Func name: InitHardUart
*********************************************************************************************************
*/
static void InitHardUart(void)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b08a      	sub	sp, #40	; 0x28
 800735c:	af00      	add	r7, sp, #0
	//UART_HandleTypeDef USART_InitStructure2;
	//UART_HandleTypeDef USART_InitStructure3;
	//UART_HandleTypeDef USART_InitStructure6;

#if UART1_FIFO_EN == 1		/* TX = PA9   RX = PA10  TX = PB6   RX = PB7*/
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800735e:	2300      	movs	r3, #0
 8007360:	613b      	str	r3, [r7, #16]
 8007362:	4b68      	ldr	r3, [pc, #416]	; (8007504 <InitHardUart+0x1ac>)
 8007364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007366:	4a67      	ldr	r2, [pc, #412]	; (8007504 <InitHardUart+0x1ac>)
 8007368:	f043 0301 	orr.w	r3, r3, #1
 800736c:	6313      	str	r3, [r2, #48]	; 0x30
 800736e:	4b65      	ldr	r3, [pc, #404]	; (8007504 <InitHardUart+0x1ac>)
 8007370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007372:	f003 0301 	and.w	r3, r3, #1
 8007376:	613b      	str	r3, [r7, #16]
 8007378:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_USART1_CLK_ENABLE();
 800737a:	2300      	movs	r3, #0
 800737c:	60fb      	str	r3, [r7, #12]
 800737e:	4b61      	ldr	r3, [pc, #388]	; (8007504 <InitHardUart+0x1ac>)
 8007380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007382:	4a60      	ldr	r2, [pc, #384]	; (8007504 <InitHardUart+0x1ac>)
 8007384:	f043 0310 	orr.w	r3, r3, #16
 8007388:	6453      	str	r3, [r2, #68]	; 0x44
 800738a:	4b5e      	ldr	r3, [pc, #376]	; (8007504 <InitHardUart+0x1ac>)
 800738c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800738e:	f003 0310 	and.w	r3, r3, #16
 8007392:	60fb      	str	r3, [r7, #12]
 8007394:	68fb      	ldr	r3, [r7, #12]
#if	1
	// TX
	GPIO_InitStructure.Pin = GPIO_PIN_9;
 8007396:	f44f 7300 	mov.w	r3, #512	; 0x200
 800739a:	617b      	str	r3, [r7, #20]
	GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 800739c:	2302      	movs	r3, #2
 800739e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 80073a0:	2302      	movs	r3, #2
 80073a2:	623b      	str	r3, [r7, #32]
	GPIO_InitStructure.Pull = GPIO_NOPULL;
 80073a4:	2300      	movs	r3, #0
 80073a6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStructure.Alternate = GPIO_AF7_USART1;
 80073a8:	2307      	movs	r3, #7
 80073aa:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80073ac:	f107 0314 	add.w	r3, r7, #20
 80073b0:	4619      	mov	r1, r3
 80073b2:	4855      	ldr	r0, [pc, #340]	; (8007508 <InitHardUart+0x1b0>)
 80073b4:	f000 fae2 	bl	800797c <HAL_GPIO_Init>
	// RX
	GPIO_InitStructure.Pin = GPIO_PIN_10;
 80073b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80073bc:	617b      	str	r3, [r7, #20]
	GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80073be:	2302      	movs	r3, #2
 80073c0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 80073c2:	2302      	movs	r3, #2
 80073c4:	623b      	str	r3, [r7, #32]
	GPIO_InitStructure.Pull = GPIO_NOPULL;
 80073c6:	2300      	movs	r3, #0
 80073c8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStructure.Alternate = GPIO_AF7_USART1;
 80073ca:	2307      	movs	r3, #7
 80073cc:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80073ce:	f107 0314 	add.w	r3, r7, #20
 80073d2:	4619      	mov	r1, r3
 80073d4:	484c      	ldr	r0, [pc, #304]	; (8007508 <InitHardUart+0x1b0>)
 80073d6:	f000 fad1 	bl	800797c <HAL_GPIO_Init>
#endif
	USART_InitStructure1.Instance = USART1;
 80073da:	4b4c      	ldr	r3, [pc, #304]	; (800750c <InitHardUart+0x1b4>)
 80073dc:	4a4c      	ldr	r2, [pc, #304]	; (8007510 <InitHardUart+0x1b8>)
 80073de:	601a      	str	r2, [r3, #0]
	USART_InitStructure1.Init.BaudRate = UART1_BAUD;
 80073e0:	4b4a      	ldr	r3, [pc, #296]	; (800750c <InitHardUart+0x1b4>)
 80073e2:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80073e6:	605a      	str	r2, [r3, #4]
	USART_InitStructure1.Init.WordLength = UART_WORDLENGTH_8B;
 80073e8:	4b48      	ldr	r3, [pc, #288]	; (800750c <InitHardUart+0x1b4>)
 80073ea:	2200      	movs	r2, #0
 80073ec:	609a      	str	r2, [r3, #8]
	USART_InitStructure1.Init.StopBits = UART_STOPBITS_1;
 80073ee:	4b47      	ldr	r3, [pc, #284]	; (800750c <InitHardUart+0x1b4>)
 80073f0:	2200      	movs	r2, #0
 80073f2:	60da      	str	r2, [r3, #12]
	USART_InitStructure1.Init.Parity = UART_PARITY_NONE;
 80073f4:	4b45      	ldr	r3, [pc, #276]	; (800750c <InitHardUart+0x1b4>)
 80073f6:	2200      	movs	r2, #0
 80073f8:	611a      	str	r2, [r3, #16]
	USART_InitStructure1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80073fa:	4b44      	ldr	r3, [pc, #272]	; (800750c <InitHardUart+0x1b4>)
 80073fc:	2200      	movs	r2, #0
 80073fe:	619a      	str	r2, [r3, #24]
	USART_InitStructure1.Init.Mode = UART_MODE_TX_RX;
 8007400:	4b42      	ldr	r3, [pc, #264]	; (800750c <InitHardUart+0x1b4>)
 8007402:	220c      	movs	r2, #12
 8007404:	615a      	str	r2, [r3, #20]
	HAL_UART_Init(&USART_InitStructure1);
 8007406:	4841      	ldr	r0, [pc, #260]	; (800750c <InitHardUart+0x1b4>)
 8007408:	f7fb f896 	bl	8002538 <HAL_UART_Init>

	__HAL_UART_ENABLE_IT(&USART_InitStructure1,UART_IT_RXNE);
 800740c:	4b3f      	ldr	r3, [pc, #252]	; (800750c <InitHardUart+0x1b4>)
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	68da      	ldr	r2, [r3, #12]
 8007412:	4b3e      	ldr	r3, [pc, #248]	; (800750c <InitHardUart+0x1b4>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f042 0220 	orr.w	r2, r2, #32
 800741a:	60da      	str	r2, [r3, #12]
	__HAL_UART_ENABLE(&USART_InitStructure1);
 800741c:	4b3b      	ldr	r3, [pc, #236]	; (800750c <InitHardUart+0x1b4>)
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	68da      	ldr	r2, [r3, #12]
 8007422:	4b3a      	ldr	r3, [pc, #232]	; (800750c <InitHardUart+0x1b4>)
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800742a:	60da      	str	r2, [r3, #12]
	__HAL_UART_CLEAR_FLAG(&USART_InitStructure1, UART_FLAG_TC);
 800742c:	4b37      	ldr	r3, [pc, #220]	; (800750c <InitHardUart+0x1b4>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007434:	601a      	str	r2, [r3, #0]
#endif

#if UART2_FIFO_EN == 1		/* TX = PD5   RX = PD6 TX = PA2 RX = PA3  */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8007436:	2300      	movs	r3, #0
 8007438:	60bb      	str	r3, [r7, #8]
 800743a:	4b32      	ldr	r3, [pc, #200]	; (8007504 <InitHardUart+0x1ac>)
 800743c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800743e:	4a31      	ldr	r2, [pc, #196]	; (8007504 <InitHardUart+0x1ac>)
 8007440:	f043 0301 	orr.w	r3, r3, #1
 8007444:	6313      	str	r3, [r2, #48]	; 0x30
 8007446:	4b2f      	ldr	r3, [pc, #188]	; (8007504 <InitHardUart+0x1ac>)
 8007448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800744a:	f003 0301 	and.w	r3, r3, #1
 800744e:	60bb      	str	r3, [r7, #8]
 8007450:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_USART2_CLK_ENABLE();
 8007452:	2300      	movs	r3, #0
 8007454:	607b      	str	r3, [r7, #4]
 8007456:	4b2b      	ldr	r3, [pc, #172]	; (8007504 <InitHardUart+0x1ac>)
 8007458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800745a:	4a2a      	ldr	r2, [pc, #168]	; (8007504 <InitHardUart+0x1ac>)
 800745c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007460:	6413      	str	r3, [r2, #64]	; 0x40
 8007462:	4b28      	ldr	r3, [pc, #160]	; (8007504 <InitHardUart+0x1ac>)
 8007464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800746a:	607b      	str	r3, [r7, #4]
 800746c:	687b      	ldr	r3, [r7, #4]

	// TX
	GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 800746e:	2302      	movs	r3, #2
 8007470:	61bb      	str	r3, [r7, #24]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8007472:	2302      	movs	r3, #2
 8007474:	623b      	str	r3, [r7, #32]
	GPIO_InitStructure.Pull = GPIO_NOPULL;
 8007476:	2300      	movs	r3, #0
 8007478:	61fb      	str	r3, [r7, #28]
	GPIO_InitStructure.Alternate = GPIO_AF7_USART2;
 800747a:	2307      	movs	r3, #7
 800747c:	627b      	str	r3, [r7, #36]	; 0x24
	// RX
	GPIO_InitStructure.Pin = GPIO_PIN_3;
 800747e:	2308      	movs	r3, #8
 8007480:	617b      	str	r3, [r7, #20]
	GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8007482:	2302      	movs	r3, #2
 8007484:	61bb      	str	r3, [r7, #24]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8007486:	2302      	movs	r3, #2
 8007488:	623b      	str	r3, [r7, #32]
	GPIO_InitStructure.Pull = GPIO_NOPULL;
 800748a:	2300      	movs	r3, #0
 800748c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStructure.Alternate = GPIO_AF7_USART2;
 800748e:	2307      	movs	r3, #7
 8007490:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8007492:	f107 0314 	add.w	r3, r7, #20
 8007496:	4619      	mov	r1, r3
 8007498:	481b      	ldr	r0, [pc, #108]	; (8007508 <InitHardUart+0x1b0>)
 800749a:	f000 fa6f 	bl	800797c <HAL_GPIO_Init>

	USART_InitStructure2.Instance = USART2;
 800749e:	4b1d      	ldr	r3, [pc, #116]	; (8007514 <InitHardUart+0x1bc>)
 80074a0:	4a1d      	ldr	r2, [pc, #116]	; (8007518 <InitHardUart+0x1c0>)
 80074a2:	601a      	str	r2, [r3, #0]
	USART_InitStructure2.Init.BaudRate = UART2_BAUD;
 80074a4:	4b1b      	ldr	r3, [pc, #108]	; (8007514 <InitHardUart+0x1bc>)
 80074a6:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80074aa:	605a      	str	r2, [r3, #4]
	USART_InitStructure2.Init.WordLength = UART_WORDLENGTH_8B;
 80074ac:	4b19      	ldr	r3, [pc, #100]	; (8007514 <InitHardUart+0x1bc>)
 80074ae:	2200      	movs	r2, #0
 80074b0:	609a      	str	r2, [r3, #8]
	USART_InitStructure2.Init.StopBits = UART_STOPBITS_1;
 80074b2:	4b18      	ldr	r3, [pc, #96]	; (8007514 <InitHardUart+0x1bc>)
 80074b4:	2200      	movs	r2, #0
 80074b6:	60da      	str	r2, [r3, #12]
	USART_InitStructure2.Init.Parity = UART_PARITY_NONE;
 80074b8:	4b16      	ldr	r3, [pc, #88]	; (8007514 <InitHardUart+0x1bc>)
 80074ba:	2200      	movs	r2, #0
 80074bc:	611a      	str	r2, [r3, #16]
	USART_InitStructure2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80074be:	4b15      	ldr	r3, [pc, #84]	; (8007514 <InitHardUart+0x1bc>)
 80074c0:	2200      	movs	r2, #0
 80074c2:	619a      	str	r2, [r3, #24]
	USART_InitStructure2.Init.Mode = UART_MODE_RX;
 80074c4:	4b13      	ldr	r3, [pc, #76]	; (8007514 <InitHardUart+0x1bc>)
 80074c6:	2204      	movs	r2, #4
 80074c8:	615a      	str	r2, [r3, #20]
	HAL_UART_Init(&USART_InitStructure2);
 80074ca:	4812      	ldr	r0, [pc, #72]	; (8007514 <InitHardUart+0x1bc>)
 80074cc:	f7fb f834 	bl	8002538 <HAL_UART_Init>

	__HAL_UART_ENABLE_IT(&USART_InitStructure2,UART_IT_RXNE);
 80074d0:	4b10      	ldr	r3, [pc, #64]	; (8007514 <InitHardUart+0x1bc>)
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	68da      	ldr	r2, [r3, #12]
 80074d6:	4b0f      	ldr	r3, [pc, #60]	; (8007514 <InitHardUart+0x1bc>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f042 0220 	orr.w	r2, r2, #32
 80074de:	60da      	str	r2, [r3, #12]
	__HAL_UART_ENABLE(&USART_InitStructure2);
 80074e0:	4b0c      	ldr	r3, [pc, #48]	; (8007514 <InitHardUart+0x1bc>)
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	68da      	ldr	r2, [r3, #12]
 80074e6:	4b0b      	ldr	r3, [pc, #44]	; (8007514 <InitHardUart+0x1bc>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80074ee:	60da      	str	r2, [r3, #12]
	__HAL_UART_CLEAR_FLAG(&USART_InitStructure2, UART_FLAG_TC);
 80074f0:	4b08      	ldr	r3, [pc, #32]	; (8007514 <InitHardUart+0x1bc>)
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80074f8:	601a      	str	r2, [r3, #0]
	__HAL_UART_ENABLE_IT(&USART_InitStructure6,UART_IT_RXNE);
	__HAL_UART_ENABLE(&USART_InitStructure6);
	__HAL_UART_CLEAR_FLAG(&USART_InitStructure6, UART_FLAG_TC);
#endif
#endif
}
 80074fa:	bf00      	nop
 80074fc:	3728      	adds	r7, #40	; 0x28
 80074fe:	46bd      	mov	sp, r7
 8007500:	bd80      	pop	{r7, pc}
 8007502:	bf00      	nop
 8007504:	40023800 	.word	0x40023800
 8007508:	40020000 	.word	0x40020000
 800750c:	20002d0c 	.word	0x20002d0c
 8007510:	40011000 	.word	0x40011000
 8007514:	20002d50 	.word	0x20002d50
 8007518:	40004400 	.word	0x40004400

0800751c <ConfigUartNVIC>:

static void ConfigUartNVIC(void)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	af00      	add	r7, sp, #0
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8007520:	2007      	movs	r0, #7
 8007522:	f000 f9e9 	bl	80078f8 <HAL_NVIC_SetPriorityGrouping>

#if UART1_FIFO_EN == 1
	  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8007526:	2200      	movs	r2, #0
 8007528:	2100      	movs	r1, #0
 800752a:	2025      	movs	r0, #37	; 0x25
 800752c:	f000 f9ef 	bl	800790e <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8007530:	2025      	movs	r0, #37	; 0x25
 8007532:	f000 fa08 	bl	8007946 <HAL_NVIC_EnableIRQ>
#endif

#if UART2_FIFO_EN == 1
	  HAL_NVIC_SetPriority(USART2_IRQn, 0, 1);
 8007536:	2201      	movs	r2, #1
 8007538:	2100      	movs	r1, #0
 800753a:	2026      	movs	r0, #38	; 0x26
 800753c:	f000 f9e7 	bl	800790e <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8007540:	2026      	movs	r0, #38	; 0x26
 8007542:	f000 fa00 	bl	8007946 <HAL_NVIC_EnableIRQ>
#endif

#if UART3_FIFO_EN == 1
	  HAL_NVIC_SetPriority(USART3_IRQn, 0, 2);
 8007546:	2202      	movs	r2, #2
 8007548:	2100      	movs	r1, #0
 800754a:	2027      	movs	r0, #39	; 0x27
 800754c:	f000 f9df 	bl	800790e <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(USART3_IRQn);
 8007550:	2027      	movs	r0, #39	; 0x27
 8007552:	f000 f9f8 	bl	8007946 <HAL_NVIC_EnableIRQ>
	  HAL_NVIC_SetPriority(UART5_IRQn, 0, 4);
	  HAL_NVIC_EnableIRQ(UART5_IRQn);
#endif

#if UART6_FIFO_EN == 1
	  HAL_NVIC_SetPriority(USART6_IRQn, 0, 5);
 8007556:	2205      	movs	r2, #5
 8007558:	2100      	movs	r1, #0
 800755a:	2047      	movs	r0, #71	; 0x47
 800755c:	f000 f9d7 	bl	800790e <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(USART6_IRQn);
 8007560:	2047      	movs	r0, #71	; 0x47
 8007562:	f000 f9f0 	bl	8007946 <HAL_NVIC_EnableIRQ>
#endif
}
 8007566:	bf00      	nop
 8007568:	bd80      	pop	{r7, pc}
	...

0800756c <UART1_Transmit>:
  * @param  data: 송신할 데이터 버퍼의 포인터
  * @param  size: 송신할 데이터 크기
  * @retval HAL 상태 (HAL_OK, HAL_ERROR, HAL_BUSY, HAL_TIMEOUT)
 */
HAL_StatusTypeDef UART1_Transmit(uint8_t *data, uint16_t size)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b084      	sub	sp, #16
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
 8007574:	460b      	mov	r3, r1
 8007576:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status;

  // 폴링 방식으로 데이터 송신
  status = HAL_UART_Transmit(&USART_InitStructure1, data, size, 1000); // 타임아웃 1000ms
 8007578:	887a      	ldrh	r2, [r7, #2]
 800757a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800757e:	6879      	ldr	r1, [r7, #4]
 8007580:	4807      	ldr	r0, [pc, #28]	; (80075a0 <UART1_Transmit+0x34>)
 8007582:	f7fb f830 	bl	80025e6 <HAL_UART_Transmit>
 8007586:	4603      	mov	r3, r0
 8007588:	73fb      	strb	r3, [r7, #15]

  // 송신 완료 플래그 클리어
  __HAL_UART_CLEAR_FLAG(&USART_InitStructure1, UART_FLAG_TC);
 800758a:	4b05      	ldr	r3, [pc, #20]	; (80075a0 <UART1_Transmit+0x34>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007592:	601a      	str	r2, [r3, #0]

  return status;
 8007594:	7bfb      	ldrb	r3, [r7, #15]
}
 8007596:	4618      	mov	r0, r3
 8007598:	3710      	adds	r7, #16
 800759a:	46bd      	mov	sp, r7
 800759c:	bd80      	pop	{r7, pc}
 800759e:	bf00      	nop
 80075a0:	20002d0c 	.word	0x20002d0c

080075a4 <UART1_Transmit_String>:
  * @brief  UART1을 통해 문자열을 송신하는 함수
  * @param  str: 송신할 문자열
  * @retval HAL 상태 (HAL_OK, HAL_ERROR, HAL_BUSY, HAL_TIMEOUT)
  */
HAL_StatusTypeDef UART1_Transmit_String(char *str)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b082      	sub	sp, #8
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
  return UART1_Transmit((uint8_t*)str, strlen(str));
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	f7f8 fe5f 	bl	8000270 <strlen>
 80075b2:	4603      	mov	r3, r0
 80075b4:	b29b      	uxth	r3, r3
 80075b6:	4619      	mov	r1, r3
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	f7ff ffd7 	bl	800756c <UART1_Transmit>
 80075be:	4603      	mov	r3, r0
}
 80075c0:	4618      	mov	r0, r3
 80075c2:	3708      	adds	r7, #8
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bd80      	pop	{r7, pc}

080075c8 <bsp_Init>:
 *      Author: compro
 */
#include "bsp.h"

void bsp_Init(void)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	af00      	add	r7, sp, #0
	bsp_InitUart();
 80075cc:	f7ff fdc8 	bl	8007160 <bsp_InitUart>
	bsp_InitLed();
 80075d0:	f7fd fa96 	bl	8004b00 <bsp_InitLed>
	bsp_InitKey();
 80075d4:	f7fd f828 	bl	8004628 <bsp_InitKey>

	bsp_InitExtSRAM();
 80075d8:	f7fc fc80 	bl	8003edc <bsp_InitExtSRAM>
	bsp_InitNorFlash();	/* ³õÊ¼»¯FSMC NOR Flash */
 80075dc:	f7fd fdc6 	bl	800516c <bsp_InitNorFlash>
	bsp_InitSFlash();       // nand flash
 80075e0:	f7fd ff3e 	bl	8005460 <bsp_InitSFlash>

	bsp_InitI2C();
 80075e4:	f7fc ff24 	bl	8004430 <bsp_InitI2C>
	bsp_InitTimer();
 80075e8:	f7fe ff5e 	bl	80064a8 <bsp_InitTimer>

	bsp_DelayMS(20);
 80075ec:	2014      	movs	r0, #20
 80075ee:	f7ff f813 	bl	8006618 <bsp_DelayMS>
	//HAL_Delay(20);
}
 80075f2:	bf00      	nop
 80075f4:	bd80      	pop	{r7, pc}
	...

080075f8 <bsp_Idle>:

extern void SaveScreenToBmp(uint16_t _index);
void bsp_Idle(void)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	af00      	add	r7, sp, #0
	if (bsp_GetKey2() == SYS_DOWN_K1K2)
 80075fc:	f7fd fa30 	bl	8004a60 <bsp_GetKey2>
 8007600:	4603      	mov	r3, r0
 8007602:	2b19      	cmp	r3, #25
 8007604:	d108      	bne.n	8007618 <bsp_Idle+0x20>
	{
		static uint16_t s_file_no = 0;
		SaveScreenToBmp(s_file_no++);
 8007606:	4b05      	ldr	r3, [pc, #20]	; (800761c <bsp_Idle+0x24>)
 8007608:	881b      	ldrh	r3, [r3, #0]
 800760a:	1c5a      	adds	r2, r3, #1
 800760c:	b291      	uxth	r1, r2
 800760e:	4a03      	ldr	r2, [pc, #12]	; (800761c <bsp_Idle+0x24>)
 8007610:	8011      	strh	r1, [r2, #0]
 8007612:	4618      	mov	r0, r3
 8007614:	f7f9 fc94 	bl	8000f40 <SaveScreenToBmp>
	}
}
 8007618:	bf00      	nop
 800761a:	bd80      	pop	{r7, pc}
 800761c:	20002d94 	.word	0x20002d94

08007620 <bsp_RunPer1ms>:
*	ÐÎ    ²Î£ºÎÞ
*	·µ »Ø Öµ: ÎÞ
*********************************************************************************************************
*/
void bsp_RunPer1ms(void)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	af00      	add	r7, sp, #0
	TOUCH_Scan();	/* ´¥ÃþÉ¨Ãè */
 8007624:	f7ff fa36 	bl	8006a94 <TOUCH_Scan>
}
 8007628:	bf00      	nop
 800762a:	bd80      	pop	{r7, pc}

0800762c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007630:	4b0e      	ldr	r3, [pc, #56]	; (800766c <HAL_Init+0x40>)
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	4a0d      	ldr	r2, [pc, #52]	; (800766c <HAL_Init+0x40>)
 8007636:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800763a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800763c:	4b0b      	ldr	r3, [pc, #44]	; (800766c <HAL_Init+0x40>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4a0a      	ldr	r2, [pc, #40]	; (800766c <HAL_Init+0x40>)
 8007642:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007646:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007648:	4b08      	ldr	r3, [pc, #32]	; (800766c <HAL_Init+0x40>)
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	4a07      	ldr	r2, [pc, #28]	; (800766c <HAL_Init+0x40>)
 800764e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007652:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007654:	2003      	movs	r0, #3
 8007656:	f000 f94f 	bl	80078f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800765a:	200f      	movs	r0, #15
 800765c:	f000 f808 	bl	8007670 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007660:	f7fa fbf0 	bl	8001e44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007664:	2300      	movs	r3, #0
}
 8007666:	4618      	mov	r0, r3
 8007668:	bd80      	pop	{r7, pc}
 800766a:	bf00      	nop
 800766c:	40023c00 	.word	0x40023c00

08007670 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b082      	sub	sp, #8
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007678:	4b12      	ldr	r3, [pc, #72]	; (80076c4 <HAL_InitTick+0x54>)
 800767a:	681a      	ldr	r2, [r3, #0]
 800767c:	4b12      	ldr	r3, [pc, #72]	; (80076c8 <HAL_InitTick+0x58>)
 800767e:	781b      	ldrb	r3, [r3, #0]
 8007680:	4619      	mov	r1, r3
 8007682:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007686:	fbb3 f3f1 	udiv	r3, r3, r1
 800768a:	fbb2 f3f3 	udiv	r3, r2, r3
 800768e:	4618      	mov	r0, r3
 8007690:	f000 f967 	bl	8007962 <HAL_SYSTICK_Config>
 8007694:	4603      	mov	r3, r0
 8007696:	2b00      	cmp	r3, #0
 8007698:	d001      	beq.n	800769e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800769a:	2301      	movs	r3, #1
 800769c:	e00e      	b.n	80076bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2b0f      	cmp	r3, #15
 80076a2:	d80a      	bhi.n	80076ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80076a4:	2200      	movs	r2, #0
 80076a6:	6879      	ldr	r1, [r7, #4]
 80076a8:	f04f 30ff 	mov.w	r0, #4294967295
 80076ac:	f000 f92f 	bl	800790e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80076b0:	4a06      	ldr	r2, [pc, #24]	; (80076cc <HAL_InitTick+0x5c>)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80076b6:	2300      	movs	r3, #0
 80076b8:	e000      	b.n	80076bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80076ba:	2301      	movs	r3, #1
}
 80076bc:	4618      	mov	r0, r3
 80076be:	3708      	adds	r7, #8
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}
 80076c4:	20000000 	.word	0x20000000
 80076c8:	20000014 	.word	0x20000014
 80076cc:	20000010 	.word	0x20000010

080076d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80076d0:	b480      	push	{r7}
 80076d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80076d4:	4b06      	ldr	r3, [pc, #24]	; (80076f0 <HAL_IncTick+0x20>)
 80076d6:	781b      	ldrb	r3, [r3, #0]
 80076d8:	461a      	mov	r2, r3
 80076da:	4b06      	ldr	r3, [pc, #24]	; (80076f4 <HAL_IncTick+0x24>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	4413      	add	r3, r2
 80076e0:	4a04      	ldr	r2, [pc, #16]	; (80076f4 <HAL_IncTick+0x24>)
 80076e2:	6013      	str	r3, [r2, #0]
}
 80076e4:	bf00      	nop
 80076e6:	46bd      	mov	sp, r7
 80076e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ec:	4770      	bx	lr
 80076ee:	bf00      	nop
 80076f0:	20000014 	.word	0x20000014
 80076f4:	20002d98 	.word	0x20002d98

080076f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80076f8:	b480      	push	{r7}
 80076fa:	af00      	add	r7, sp, #0
  return uwTick;
 80076fc:	4b03      	ldr	r3, [pc, #12]	; (800770c <HAL_GetTick+0x14>)
 80076fe:	681b      	ldr	r3, [r3, #0]
}
 8007700:	4618      	mov	r0, r3
 8007702:	46bd      	mov	sp, r7
 8007704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007708:	4770      	bx	lr
 800770a:	bf00      	nop
 800770c:	20002d98 	.word	0x20002d98

08007710 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b084      	sub	sp, #16
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007718:	f7ff ffee 	bl	80076f8 <HAL_GetTick>
 800771c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007728:	d005      	beq.n	8007736 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800772a:	4b0a      	ldr	r3, [pc, #40]	; (8007754 <HAL_Delay+0x44>)
 800772c:	781b      	ldrb	r3, [r3, #0]
 800772e:	461a      	mov	r2, r3
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	4413      	add	r3, r2
 8007734:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8007736:	bf00      	nop
 8007738:	f7ff ffde 	bl	80076f8 <HAL_GetTick>
 800773c:	4602      	mov	r2, r0
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	1ad3      	subs	r3, r2, r3
 8007742:	68fa      	ldr	r2, [r7, #12]
 8007744:	429a      	cmp	r2, r3
 8007746:	d8f7      	bhi.n	8007738 <HAL_Delay+0x28>
  {
  }
}
 8007748:	bf00      	nop
 800774a:	bf00      	nop
 800774c:	3710      	adds	r7, #16
 800774e:	46bd      	mov	sp, r7
 8007750:	bd80      	pop	{r7, pc}
 8007752:	bf00      	nop
 8007754:	20000014 	.word	0x20000014

08007758 <__NVIC_SetPriorityGrouping>:
{
 8007758:	b480      	push	{r7}
 800775a:	b085      	sub	sp, #20
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f003 0307 	and.w	r3, r3, #7
 8007766:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007768:	4b0c      	ldr	r3, [pc, #48]	; (800779c <__NVIC_SetPriorityGrouping+0x44>)
 800776a:	68db      	ldr	r3, [r3, #12]
 800776c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800776e:	68ba      	ldr	r2, [r7, #8]
 8007770:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007774:	4013      	ands	r3, r2
 8007776:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007780:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007784:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007788:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800778a:	4a04      	ldr	r2, [pc, #16]	; (800779c <__NVIC_SetPriorityGrouping+0x44>)
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	60d3      	str	r3, [r2, #12]
}
 8007790:	bf00      	nop
 8007792:	3714      	adds	r7, #20
 8007794:	46bd      	mov	sp, r7
 8007796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779a:	4770      	bx	lr
 800779c:	e000ed00 	.word	0xe000ed00

080077a0 <__NVIC_GetPriorityGrouping>:
{
 80077a0:	b480      	push	{r7}
 80077a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80077a4:	4b04      	ldr	r3, [pc, #16]	; (80077b8 <__NVIC_GetPriorityGrouping+0x18>)
 80077a6:	68db      	ldr	r3, [r3, #12]
 80077a8:	0a1b      	lsrs	r3, r3, #8
 80077aa:	f003 0307 	and.w	r3, r3, #7
}
 80077ae:	4618      	mov	r0, r3
 80077b0:	46bd      	mov	sp, r7
 80077b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b6:	4770      	bx	lr
 80077b8:	e000ed00 	.word	0xe000ed00

080077bc <__NVIC_EnableIRQ>:
{
 80077bc:	b480      	push	{r7}
 80077be:	b083      	sub	sp, #12
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	4603      	mov	r3, r0
 80077c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80077c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	db0b      	blt.n	80077e6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80077ce:	79fb      	ldrb	r3, [r7, #7]
 80077d0:	f003 021f 	and.w	r2, r3, #31
 80077d4:	4907      	ldr	r1, [pc, #28]	; (80077f4 <__NVIC_EnableIRQ+0x38>)
 80077d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80077da:	095b      	lsrs	r3, r3, #5
 80077dc:	2001      	movs	r0, #1
 80077de:	fa00 f202 	lsl.w	r2, r0, r2
 80077e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80077e6:	bf00      	nop
 80077e8:	370c      	adds	r7, #12
 80077ea:	46bd      	mov	sp, r7
 80077ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f0:	4770      	bx	lr
 80077f2:	bf00      	nop
 80077f4:	e000e100 	.word	0xe000e100

080077f8 <__NVIC_SetPriority>:
{
 80077f8:	b480      	push	{r7}
 80077fa:	b083      	sub	sp, #12
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	4603      	mov	r3, r0
 8007800:	6039      	str	r1, [r7, #0]
 8007802:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007804:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007808:	2b00      	cmp	r3, #0
 800780a:	db0a      	blt.n	8007822 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	b2da      	uxtb	r2, r3
 8007810:	490c      	ldr	r1, [pc, #48]	; (8007844 <__NVIC_SetPriority+0x4c>)
 8007812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007816:	0112      	lsls	r2, r2, #4
 8007818:	b2d2      	uxtb	r2, r2
 800781a:	440b      	add	r3, r1
 800781c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007820:	e00a      	b.n	8007838 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	b2da      	uxtb	r2, r3
 8007826:	4908      	ldr	r1, [pc, #32]	; (8007848 <__NVIC_SetPriority+0x50>)
 8007828:	79fb      	ldrb	r3, [r7, #7]
 800782a:	f003 030f 	and.w	r3, r3, #15
 800782e:	3b04      	subs	r3, #4
 8007830:	0112      	lsls	r2, r2, #4
 8007832:	b2d2      	uxtb	r2, r2
 8007834:	440b      	add	r3, r1
 8007836:	761a      	strb	r2, [r3, #24]
}
 8007838:	bf00      	nop
 800783a:	370c      	adds	r7, #12
 800783c:	46bd      	mov	sp, r7
 800783e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007842:	4770      	bx	lr
 8007844:	e000e100 	.word	0xe000e100
 8007848:	e000ed00 	.word	0xe000ed00

0800784c <NVIC_EncodePriority>:
{
 800784c:	b480      	push	{r7}
 800784e:	b089      	sub	sp, #36	; 0x24
 8007850:	af00      	add	r7, sp, #0
 8007852:	60f8      	str	r0, [r7, #12]
 8007854:	60b9      	str	r1, [r7, #8]
 8007856:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	f003 0307 	and.w	r3, r3, #7
 800785e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007860:	69fb      	ldr	r3, [r7, #28]
 8007862:	f1c3 0307 	rsb	r3, r3, #7
 8007866:	2b04      	cmp	r3, #4
 8007868:	bf28      	it	cs
 800786a:	2304      	movcs	r3, #4
 800786c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800786e:	69fb      	ldr	r3, [r7, #28]
 8007870:	3304      	adds	r3, #4
 8007872:	2b06      	cmp	r3, #6
 8007874:	d902      	bls.n	800787c <NVIC_EncodePriority+0x30>
 8007876:	69fb      	ldr	r3, [r7, #28]
 8007878:	3b03      	subs	r3, #3
 800787a:	e000      	b.n	800787e <NVIC_EncodePriority+0x32>
 800787c:	2300      	movs	r3, #0
 800787e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007880:	f04f 32ff 	mov.w	r2, #4294967295
 8007884:	69bb      	ldr	r3, [r7, #24]
 8007886:	fa02 f303 	lsl.w	r3, r2, r3
 800788a:	43da      	mvns	r2, r3
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	401a      	ands	r2, r3
 8007890:	697b      	ldr	r3, [r7, #20]
 8007892:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007894:	f04f 31ff 	mov.w	r1, #4294967295
 8007898:	697b      	ldr	r3, [r7, #20]
 800789a:	fa01 f303 	lsl.w	r3, r1, r3
 800789e:	43d9      	mvns	r1, r3
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80078a4:	4313      	orrs	r3, r2
}
 80078a6:	4618      	mov	r0, r3
 80078a8:	3724      	adds	r7, #36	; 0x24
 80078aa:	46bd      	mov	sp, r7
 80078ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b0:	4770      	bx	lr
	...

080078b4 <SysTick_Config>:
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b082      	sub	sp, #8
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	3b01      	subs	r3, #1
 80078c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80078c4:	d301      	bcc.n	80078ca <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80078c6:	2301      	movs	r3, #1
 80078c8:	e00f      	b.n	80078ea <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80078ca:	4a0a      	ldr	r2, [pc, #40]	; (80078f4 <SysTick_Config+0x40>)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	3b01      	subs	r3, #1
 80078d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80078d2:	210f      	movs	r1, #15
 80078d4:	f04f 30ff 	mov.w	r0, #4294967295
 80078d8:	f7ff ff8e 	bl	80077f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80078dc:	4b05      	ldr	r3, [pc, #20]	; (80078f4 <SysTick_Config+0x40>)
 80078de:	2200      	movs	r2, #0
 80078e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80078e2:	4b04      	ldr	r3, [pc, #16]	; (80078f4 <SysTick_Config+0x40>)
 80078e4:	2207      	movs	r2, #7
 80078e6:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80078e8:	2300      	movs	r3, #0
}
 80078ea:	4618      	mov	r0, r3
 80078ec:	3708      	adds	r7, #8
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd80      	pop	{r7, pc}
 80078f2:	bf00      	nop
 80078f4:	e000e010 	.word	0xe000e010

080078f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b082      	sub	sp, #8
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	f7ff ff29 	bl	8007758 <__NVIC_SetPriorityGrouping>
}
 8007906:	bf00      	nop
 8007908:	3708      	adds	r7, #8
 800790a:	46bd      	mov	sp, r7
 800790c:	bd80      	pop	{r7, pc}

0800790e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800790e:	b580      	push	{r7, lr}
 8007910:	b086      	sub	sp, #24
 8007912:	af00      	add	r7, sp, #0
 8007914:	4603      	mov	r3, r0
 8007916:	60b9      	str	r1, [r7, #8]
 8007918:	607a      	str	r2, [r7, #4]
 800791a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800791c:	2300      	movs	r3, #0
 800791e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007920:	f7ff ff3e 	bl	80077a0 <__NVIC_GetPriorityGrouping>
 8007924:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007926:	687a      	ldr	r2, [r7, #4]
 8007928:	68b9      	ldr	r1, [r7, #8]
 800792a:	6978      	ldr	r0, [r7, #20]
 800792c:	f7ff ff8e 	bl	800784c <NVIC_EncodePriority>
 8007930:	4602      	mov	r2, r0
 8007932:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007936:	4611      	mov	r1, r2
 8007938:	4618      	mov	r0, r3
 800793a:	f7ff ff5d 	bl	80077f8 <__NVIC_SetPriority>
}
 800793e:	bf00      	nop
 8007940:	3718      	adds	r7, #24
 8007942:	46bd      	mov	sp, r7
 8007944:	bd80      	pop	{r7, pc}

08007946 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007946:	b580      	push	{r7, lr}
 8007948:	b082      	sub	sp, #8
 800794a:	af00      	add	r7, sp, #0
 800794c:	4603      	mov	r3, r0
 800794e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007950:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007954:	4618      	mov	r0, r3
 8007956:	f7ff ff31 	bl	80077bc <__NVIC_EnableIRQ>
}
 800795a:	bf00      	nop
 800795c:	3708      	adds	r7, #8
 800795e:	46bd      	mov	sp, r7
 8007960:	bd80      	pop	{r7, pc}

08007962 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007962:	b580      	push	{r7, lr}
 8007964:	b082      	sub	sp, #8
 8007966:	af00      	add	r7, sp, #0
 8007968:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f7ff ffa2 	bl	80078b4 <SysTick_Config>
 8007970:	4603      	mov	r3, r0
}
 8007972:	4618      	mov	r0, r3
 8007974:	3708      	adds	r7, #8
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}
	...

0800797c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800797c:	b480      	push	{r7}
 800797e:	b089      	sub	sp, #36	; 0x24
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
 8007984:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007986:	2300      	movs	r3, #0
 8007988:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800798a:	2300      	movs	r3, #0
 800798c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800798e:	2300      	movs	r3, #0
 8007990:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007992:	2300      	movs	r3, #0
 8007994:	61fb      	str	r3, [r7, #28]
 8007996:	e16b      	b.n	8007c70 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007998:	2201      	movs	r2, #1
 800799a:	69fb      	ldr	r3, [r7, #28]
 800799c:	fa02 f303 	lsl.w	r3, r2, r3
 80079a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	697a      	ldr	r2, [r7, #20]
 80079a8:	4013      	ands	r3, r2
 80079aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80079ac:	693a      	ldr	r2, [r7, #16]
 80079ae:	697b      	ldr	r3, [r7, #20]
 80079b0:	429a      	cmp	r2, r3
 80079b2:	f040 815a 	bne.w	8007c6a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	685b      	ldr	r3, [r3, #4]
 80079ba:	f003 0303 	and.w	r3, r3, #3
 80079be:	2b01      	cmp	r3, #1
 80079c0:	d005      	beq.n	80079ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	685b      	ldr	r3, [r3, #4]
 80079c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80079ca:	2b02      	cmp	r3, #2
 80079cc:	d130      	bne.n	8007a30 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	689b      	ldr	r3, [r3, #8]
 80079d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80079d4:	69fb      	ldr	r3, [r7, #28]
 80079d6:	005b      	lsls	r3, r3, #1
 80079d8:	2203      	movs	r2, #3
 80079da:	fa02 f303 	lsl.w	r3, r2, r3
 80079de:	43db      	mvns	r3, r3
 80079e0:	69ba      	ldr	r2, [r7, #24]
 80079e2:	4013      	ands	r3, r2
 80079e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	68da      	ldr	r2, [r3, #12]
 80079ea:	69fb      	ldr	r3, [r7, #28]
 80079ec:	005b      	lsls	r3, r3, #1
 80079ee:	fa02 f303 	lsl.w	r3, r2, r3
 80079f2:	69ba      	ldr	r2, [r7, #24]
 80079f4:	4313      	orrs	r3, r2
 80079f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	69ba      	ldr	r2, [r7, #24]
 80079fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	685b      	ldr	r3, [r3, #4]
 8007a02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007a04:	2201      	movs	r2, #1
 8007a06:	69fb      	ldr	r3, [r7, #28]
 8007a08:	fa02 f303 	lsl.w	r3, r2, r3
 8007a0c:	43db      	mvns	r3, r3
 8007a0e:	69ba      	ldr	r2, [r7, #24]
 8007a10:	4013      	ands	r3, r2
 8007a12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	685b      	ldr	r3, [r3, #4]
 8007a18:	091b      	lsrs	r3, r3, #4
 8007a1a:	f003 0201 	and.w	r2, r3, #1
 8007a1e:	69fb      	ldr	r3, [r7, #28]
 8007a20:	fa02 f303 	lsl.w	r3, r2, r3
 8007a24:	69ba      	ldr	r2, [r7, #24]
 8007a26:	4313      	orrs	r3, r2
 8007a28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	69ba      	ldr	r2, [r7, #24]
 8007a2e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	685b      	ldr	r3, [r3, #4]
 8007a34:	f003 0303 	and.w	r3, r3, #3
 8007a38:	2b03      	cmp	r3, #3
 8007a3a:	d017      	beq.n	8007a6c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	68db      	ldr	r3, [r3, #12]
 8007a40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007a42:	69fb      	ldr	r3, [r7, #28]
 8007a44:	005b      	lsls	r3, r3, #1
 8007a46:	2203      	movs	r2, #3
 8007a48:	fa02 f303 	lsl.w	r3, r2, r3
 8007a4c:	43db      	mvns	r3, r3
 8007a4e:	69ba      	ldr	r2, [r7, #24]
 8007a50:	4013      	ands	r3, r2
 8007a52:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	689a      	ldr	r2, [r3, #8]
 8007a58:	69fb      	ldr	r3, [r7, #28]
 8007a5a:	005b      	lsls	r3, r3, #1
 8007a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8007a60:	69ba      	ldr	r2, [r7, #24]
 8007a62:	4313      	orrs	r3, r2
 8007a64:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	69ba      	ldr	r2, [r7, #24]
 8007a6a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	685b      	ldr	r3, [r3, #4]
 8007a70:	f003 0303 	and.w	r3, r3, #3
 8007a74:	2b02      	cmp	r3, #2
 8007a76:	d123      	bne.n	8007ac0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007a78:	69fb      	ldr	r3, [r7, #28]
 8007a7a:	08da      	lsrs	r2, r3, #3
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	3208      	adds	r2, #8
 8007a80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a84:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007a86:	69fb      	ldr	r3, [r7, #28]
 8007a88:	f003 0307 	and.w	r3, r3, #7
 8007a8c:	009b      	lsls	r3, r3, #2
 8007a8e:	220f      	movs	r2, #15
 8007a90:	fa02 f303 	lsl.w	r3, r2, r3
 8007a94:	43db      	mvns	r3, r3
 8007a96:	69ba      	ldr	r2, [r7, #24]
 8007a98:	4013      	ands	r3, r2
 8007a9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	691a      	ldr	r2, [r3, #16]
 8007aa0:	69fb      	ldr	r3, [r7, #28]
 8007aa2:	f003 0307 	and.w	r3, r3, #7
 8007aa6:	009b      	lsls	r3, r3, #2
 8007aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8007aac:	69ba      	ldr	r2, [r7, #24]
 8007aae:	4313      	orrs	r3, r2
 8007ab0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007ab2:	69fb      	ldr	r3, [r7, #28]
 8007ab4:	08da      	lsrs	r2, r3, #3
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	3208      	adds	r2, #8
 8007aba:	69b9      	ldr	r1, [r7, #24]
 8007abc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007ac6:	69fb      	ldr	r3, [r7, #28]
 8007ac8:	005b      	lsls	r3, r3, #1
 8007aca:	2203      	movs	r2, #3
 8007acc:	fa02 f303 	lsl.w	r3, r2, r3
 8007ad0:	43db      	mvns	r3, r3
 8007ad2:	69ba      	ldr	r2, [r7, #24]
 8007ad4:	4013      	ands	r3, r2
 8007ad6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	685b      	ldr	r3, [r3, #4]
 8007adc:	f003 0203 	and.w	r2, r3, #3
 8007ae0:	69fb      	ldr	r3, [r7, #28]
 8007ae2:	005b      	lsls	r3, r3, #1
 8007ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8007ae8:	69ba      	ldr	r2, [r7, #24]
 8007aea:	4313      	orrs	r3, r2
 8007aec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	69ba      	ldr	r2, [r7, #24]
 8007af2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	685b      	ldr	r3, [r3, #4]
 8007af8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	f000 80b4 	beq.w	8007c6a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007b02:	2300      	movs	r3, #0
 8007b04:	60fb      	str	r3, [r7, #12]
 8007b06:	4b60      	ldr	r3, [pc, #384]	; (8007c88 <HAL_GPIO_Init+0x30c>)
 8007b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b0a:	4a5f      	ldr	r2, [pc, #380]	; (8007c88 <HAL_GPIO_Init+0x30c>)
 8007b0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007b10:	6453      	str	r3, [r2, #68]	; 0x44
 8007b12:	4b5d      	ldr	r3, [pc, #372]	; (8007c88 <HAL_GPIO_Init+0x30c>)
 8007b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b1a:	60fb      	str	r3, [r7, #12]
 8007b1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007b1e:	4a5b      	ldr	r2, [pc, #364]	; (8007c8c <HAL_GPIO_Init+0x310>)
 8007b20:	69fb      	ldr	r3, [r7, #28]
 8007b22:	089b      	lsrs	r3, r3, #2
 8007b24:	3302      	adds	r3, #2
 8007b26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007b2c:	69fb      	ldr	r3, [r7, #28]
 8007b2e:	f003 0303 	and.w	r3, r3, #3
 8007b32:	009b      	lsls	r3, r3, #2
 8007b34:	220f      	movs	r2, #15
 8007b36:	fa02 f303 	lsl.w	r3, r2, r3
 8007b3a:	43db      	mvns	r3, r3
 8007b3c:	69ba      	ldr	r2, [r7, #24]
 8007b3e:	4013      	ands	r3, r2
 8007b40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	4a52      	ldr	r2, [pc, #328]	; (8007c90 <HAL_GPIO_Init+0x314>)
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d02b      	beq.n	8007ba2 <HAL_GPIO_Init+0x226>
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	4a51      	ldr	r2, [pc, #324]	; (8007c94 <HAL_GPIO_Init+0x318>)
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	d025      	beq.n	8007b9e <HAL_GPIO_Init+0x222>
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	4a50      	ldr	r2, [pc, #320]	; (8007c98 <HAL_GPIO_Init+0x31c>)
 8007b56:	4293      	cmp	r3, r2
 8007b58:	d01f      	beq.n	8007b9a <HAL_GPIO_Init+0x21e>
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	4a4f      	ldr	r2, [pc, #316]	; (8007c9c <HAL_GPIO_Init+0x320>)
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	d019      	beq.n	8007b96 <HAL_GPIO_Init+0x21a>
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	4a4e      	ldr	r2, [pc, #312]	; (8007ca0 <HAL_GPIO_Init+0x324>)
 8007b66:	4293      	cmp	r3, r2
 8007b68:	d013      	beq.n	8007b92 <HAL_GPIO_Init+0x216>
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	4a4d      	ldr	r2, [pc, #308]	; (8007ca4 <HAL_GPIO_Init+0x328>)
 8007b6e:	4293      	cmp	r3, r2
 8007b70:	d00d      	beq.n	8007b8e <HAL_GPIO_Init+0x212>
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	4a4c      	ldr	r2, [pc, #304]	; (8007ca8 <HAL_GPIO_Init+0x32c>)
 8007b76:	4293      	cmp	r3, r2
 8007b78:	d007      	beq.n	8007b8a <HAL_GPIO_Init+0x20e>
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	4a4b      	ldr	r2, [pc, #300]	; (8007cac <HAL_GPIO_Init+0x330>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d101      	bne.n	8007b86 <HAL_GPIO_Init+0x20a>
 8007b82:	2307      	movs	r3, #7
 8007b84:	e00e      	b.n	8007ba4 <HAL_GPIO_Init+0x228>
 8007b86:	2308      	movs	r3, #8
 8007b88:	e00c      	b.n	8007ba4 <HAL_GPIO_Init+0x228>
 8007b8a:	2306      	movs	r3, #6
 8007b8c:	e00a      	b.n	8007ba4 <HAL_GPIO_Init+0x228>
 8007b8e:	2305      	movs	r3, #5
 8007b90:	e008      	b.n	8007ba4 <HAL_GPIO_Init+0x228>
 8007b92:	2304      	movs	r3, #4
 8007b94:	e006      	b.n	8007ba4 <HAL_GPIO_Init+0x228>
 8007b96:	2303      	movs	r3, #3
 8007b98:	e004      	b.n	8007ba4 <HAL_GPIO_Init+0x228>
 8007b9a:	2302      	movs	r3, #2
 8007b9c:	e002      	b.n	8007ba4 <HAL_GPIO_Init+0x228>
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	e000      	b.n	8007ba4 <HAL_GPIO_Init+0x228>
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	69fa      	ldr	r2, [r7, #28]
 8007ba6:	f002 0203 	and.w	r2, r2, #3
 8007baa:	0092      	lsls	r2, r2, #2
 8007bac:	4093      	lsls	r3, r2
 8007bae:	69ba      	ldr	r2, [r7, #24]
 8007bb0:	4313      	orrs	r3, r2
 8007bb2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007bb4:	4935      	ldr	r1, [pc, #212]	; (8007c8c <HAL_GPIO_Init+0x310>)
 8007bb6:	69fb      	ldr	r3, [r7, #28]
 8007bb8:	089b      	lsrs	r3, r3, #2
 8007bba:	3302      	adds	r3, #2
 8007bbc:	69ba      	ldr	r2, [r7, #24]
 8007bbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007bc2:	4b3b      	ldr	r3, [pc, #236]	; (8007cb0 <HAL_GPIO_Init+0x334>)
 8007bc4:	689b      	ldr	r3, [r3, #8]
 8007bc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007bc8:	693b      	ldr	r3, [r7, #16]
 8007bca:	43db      	mvns	r3, r3
 8007bcc:	69ba      	ldr	r2, [r7, #24]
 8007bce:	4013      	ands	r3, r2
 8007bd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	685b      	ldr	r3, [r3, #4]
 8007bd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d003      	beq.n	8007be6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8007bde:	69ba      	ldr	r2, [r7, #24]
 8007be0:	693b      	ldr	r3, [r7, #16]
 8007be2:	4313      	orrs	r3, r2
 8007be4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007be6:	4a32      	ldr	r2, [pc, #200]	; (8007cb0 <HAL_GPIO_Init+0x334>)
 8007be8:	69bb      	ldr	r3, [r7, #24]
 8007bea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007bec:	4b30      	ldr	r3, [pc, #192]	; (8007cb0 <HAL_GPIO_Init+0x334>)
 8007bee:	68db      	ldr	r3, [r3, #12]
 8007bf0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007bf2:	693b      	ldr	r3, [r7, #16]
 8007bf4:	43db      	mvns	r3, r3
 8007bf6:	69ba      	ldr	r2, [r7, #24]
 8007bf8:	4013      	ands	r3, r2
 8007bfa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	685b      	ldr	r3, [r3, #4]
 8007c00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d003      	beq.n	8007c10 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8007c08:	69ba      	ldr	r2, [r7, #24]
 8007c0a:	693b      	ldr	r3, [r7, #16]
 8007c0c:	4313      	orrs	r3, r2
 8007c0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007c10:	4a27      	ldr	r2, [pc, #156]	; (8007cb0 <HAL_GPIO_Init+0x334>)
 8007c12:	69bb      	ldr	r3, [r7, #24]
 8007c14:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8007c16:	4b26      	ldr	r3, [pc, #152]	; (8007cb0 <HAL_GPIO_Init+0x334>)
 8007c18:	685b      	ldr	r3, [r3, #4]
 8007c1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007c1c:	693b      	ldr	r3, [r7, #16]
 8007c1e:	43db      	mvns	r3, r3
 8007c20:	69ba      	ldr	r2, [r7, #24]
 8007c22:	4013      	ands	r3, r2
 8007c24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	685b      	ldr	r3, [r3, #4]
 8007c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d003      	beq.n	8007c3a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8007c32:	69ba      	ldr	r2, [r7, #24]
 8007c34:	693b      	ldr	r3, [r7, #16]
 8007c36:	4313      	orrs	r3, r2
 8007c38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007c3a:	4a1d      	ldr	r2, [pc, #116]	; (8007cb0 <HAL_GPIO_Init+0x334>)
 8007c3c:	69bb      	ldr	r3, [r7, #24]
 8007c3e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007c40:	4b1b      	ldr	r3, [pc, #108]	; (8007cb0 <HAL_GPIO_Init+0x334>)
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007c46:	693b      	ldr	r3, [r7, #16]
 8007c48:	43db      	mvns	r3, r3
 8007c4a:	69ba      	ldr	r2, [r7, #24]
 8007c4c:	4013      	ands	r3, r2
 8007c4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	685b      	ldr	r3, [r3, #4]
 8007c54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d003      	beq.n	8007c64 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8007c5c:	69ba      	ldr	r2, [r7, #24]
 8007c5e:	693b      	ldr	r3, [r7, #16]
 8007c60:	4313      	orrs	r3, r2
 8007c62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007c64:	4a12      	ldr	r2, [pc, #72]	; (8007cb0 <HAL_GPIO_Init+0x334>)
 8007c66:	69bb      	ldr	r3, [r7, #24]
 8007c68:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007c6a:	69fb      	ldr	r3, [r7, #28]
 8007c6c:	3301      	adds	r3, #1
 8007c6e:	61fb      	str	r3, [r7, #28]
 8007c70:	69fb      	ldr	r3, [r7, #28]
 8007c72:	2b0f      	cmp	r3, #15
 8007c74:	f67f ae90 	bls.w	8007998 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007c78:	bf00      	nop
 8007c7a:	bf00      	nop
 8007c7c:	3724      	adds	r7, #36	; 0x24
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c84:	4770      	bx	lr
 8007c86:	bf00      	nop
 8007c88:	40023800 	.word	0x40023800
 8007c8c:	40013800 	.word	0x40013800
 8007c90:	40020000 	.word	0x40020000
 8007c94:	40020400 	.word	0x40020400
 8007c98:	40020800 	.word	0x40020800
 8007c9c:	40020c00 	.word	0x40020c00
 8007ca0:	40021000 	.word	0x40021000
 8007ca4:	40021400 	.word	0x40021400
 8007ca8:	40021800 	.word	0x40021800
 8007cac:	40021c00 	.word	0x40021c00
 8007cb0:	40013c00 	.word	0x40013c00

08007cb4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007cb4:	b480      	push	{r7}
 8007cb6:	b085      	sub	sp, #20
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
 8007cbc:	460b      	mov	r3, r1
 8007cbe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	691a      	ldr	r2, [r3, #16]
 8007cc4:	887b      	ldrh	r3, [r7, #2]
 8007cc6:	4013      	ands	r3, r2
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d002      	beq.n	8007cd2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007ccc:	2301      	movs	r3, #1
 8007cce:	73fb      	strb	r3, [r7, #15]
 8007cd0:	e001      	b.n	8007cd6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007cd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cd8:	4618      	mov	r0, r3
 8007cda:	3714      	adds	r7, #20
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce2:	4770      	bx	lr

08007ce4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007ce4:	b480      	push	{r7}
 8007ce6:	b083      	sub	sp, #12
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
 8007cec:	460b      	mov	r3, r1
 8007cee:	807b      	strh	r3, [r7, #2]
 8007cf0:	4613      	mov	r3, r2
 8007cf2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007cf4:	787b      	ldrb	r3, [r7, #1]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d003      	beq.n	8007d02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007cfa:	887a      	ldrh	r2, [r7, #2]
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007d00:	e003      	b.n	8007d0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007d02:	887b      	ldrh	r3, [r7, #2]
 8007d04:	041a      	lsls	r2, r3, #16
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	619a      	str	r2, [r3, #24]
}
 8007d0a:	bf00      	nop
 8007d0c:	370c      	adds	r7, #12
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d14:	4770      	bx	lr

08007d16 <HAL_NAND_Init>:
  * @param  AttSpace_Timing pointer to Attribute space timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_NAND_Init(NAND_HandleTypeDef *hnand, FMC_NAND_PCC_TimingTypeDef *ComSpace_Timing,
                                 FMC_NAND_PCC_TimingTypeDef *AttSpace_Timing)
{
 8007d16:	b580      	push	{r7, lr}
 8007d18:	b084      	sub	sp, #16
 8007d1a:	af00      	add	r7, sp, #0
 8007d1c:	60f8      	str	r0, [r7, #12]
 8007d1e:	60b9      	str	r1, [r7, #8]
 8007d20:	607a      	str	r2, [r7, #4]
  /* Check the NAND handle state */
  if (hnand == NULL)
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d101      	bne.n	8007d2c <HAL_NAND_Init+0x16>
  {
    return HAL_ERROR;
 8007d28:	2301      	movs	r3, #1
 8007d2a:	e03e      	b.n	8007daa <HAL_NAND_Init+0x94>
  }

  if (hnand->State == HAL_NAND_STATE_RESET)
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007d32:	b2db      	uxtb	r3, r3
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d106      	bne.n	8007d46 <HAL_NAND_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hnand->Lock = HAL_UNLOCKED;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Init the low level hardware */
    hnand->MspInitCallback(hnand);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_NAND_MspInit(hnand);
 8007d40:	68f8      	ldr	r0, [r7, #12]
 8007d42:	f000 f836 	bl	8007db2 <HAL_NAND_MspInit>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */
  }

  /* Initialize NAND control Interface */
  (void)FMC_NAND_Init(hnand->Instance, &(hnand->Init));
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	681a      	ldr	r2, [r3, #0]
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	3304      	adds	r3, #4
 8007d4e:	4619      	mov	r1, r3
 8007d50:	4610      	mov	r0, r2
 8007d52:	f7fb f8c1 	bl	8002ed8 <FSMC_NAND_Init>

  /* Initialize NAND common space timing Interface */
  (void)FMC_NAND_CommonSpace_Timing_Init(hnand->Instance, ComSpace_Timing, hnand->Init.NandBank);
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	6818      	ldr	r0, [r3, #0]
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	685b      	ldr	r3, [r3, #4]
 8007d5e:	461a      	mov	r2, r3
 8007d60:	68b9      	ldr	r1, [r7, #8]
 8007d62:	f7fb f905 	bl	8002f70 <FSMC_NAND_CommonSpace_Timing_Init>

  /* Initialize NAND attribute space timing Interface */
  (void)FMC_NAND_AttributeSpace_Timing_Init(hnand->Instance, AttSpace_Timing, hnand->Init.NandBank);
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	6818      	ldr	r0, [r3, #0]
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	685b      	ldr	r3, [r3, #4]
 8007d6e:	461a      	mov	r2, r3
 8007d70:	6879      	ldr	r1, [r7, #4]
 8007d72:	f7fb f932 	bl	8002fda <FSMC_NAND_AttributeSpace_Timing_Init>

  /* Enable the NAND device */
#if defined(FMC_Bank2_3) || defined(FSMC_Bank2_3)
  __FMC_NAND_ENABLE(hnand->Instance, hnand->Init.NandBank);
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	685b      	ldr	r3, [r3, #4]
 8007d7a:	2b10      	cmp	r3, #16
 8007d7c:	d108      	bne.n	8007d90 <HAL_NAND_Init+0x7a>
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	681a      	ldr	r2, [r3, #0]
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f042 0204 	orr.w	r2, r2, #4
 8007d8c:	601a      	str	r2, [r3, #0]
 8007d8e:	e007      	b.n	8007da0 <HAL_NAND_Init+0x8a>
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	6a1a      	ldr	r2, [r3, #32]
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f042 0204 	orr.w	r2, r2, #4
 8007d9e:	621a      	str	r2, [r3, #32]
#else
  __FMC_NAND_ENABLE(hnand->Instance);
#endif

  /* Update the NAND controller state */
  hnand->State = HAL_NAND_STATE_READY;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	2201      	movs	r2, #1
 8007da4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  return HAL_OK;
 8007da8:	2300      	movs	r3, #0
}
 8007daa:	4618      	mov	r0, r3
 8007dac:	3710      	adds	r7, #16
 8007dae:	46bd      	mov	sp, r7
 8007db0:	bd80      	pop	{r7, pc}

08007db2 <HAL_NAND_MspInit>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval None
  */
__weak void HAL_NAND_MspInit(NAND_HandleTypeDef *hnand)
{
 8007db2:	b480      	push	{r7}
 8007db4:	b083      	sub	sp, #12
 8007db6:	af00      	add	r7, sp, #0
 8007db8:	6078      	str	r0, [r7, #4]
  UNUSED(hnand);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_NAND_MspInit could be implemented in the user file
   */
}
 8007dba:	bf00      	nop
 8007dbc:	370c      	adds	r7, #12
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc4:	4770      	bx	lr
	...

08007dc8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b086      	sub	sp, #24
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d101      	bne.n	8007dda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	e267      	b.n	80082aa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f003 0301 	and.w	r3, r3, #1
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d075      	beq.n	8007ed2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007de6:	4b88      	ldr	r3, [pc, #544]	; (8008008 <HAL_RCC_OscConfig+0x240>)
 8007de8:	689b      	ldr	r3, [r3, #8]
 8007dea:	f003 030c 	and.w	r3, r3, #12
 8007dee:	2b04      	cmp	r3, #4
 8007df0:	d00c      	beq.n	8007e0c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007df2:	4b85      	ldr	r3, [pc, #532]	; (8008008 <HAL_RCC_OscConfig+0x240>)
 8007df4:	689b      	ldr	r3, [r3, #8]
 8007df6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007dfa:	2b08      	cmp	r3, #8
 8007dfc:	d112      	bne.n	8007e24 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007dfe:	4b82      	ldr	r3, [pc, #520]	; (8008008 <HAL_RCC_OscConfig+0x240>)
 8007e00:	685b      	ldr	r3, [r3, #4]
 8007e02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007e0a:	d10b      	bne.n	8007e24 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007e0c:	4b7e      	ldr	r3, [pc, #504]	; (8008008 <HAL_RCC_OscConfig+0x240>)
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d05b      	beq.n	8007ed0 <HAL_RCC_OscConfig+0x108>
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	685b      	ldr	r3, [r3, #4]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d157      	bne.n	8007ed0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007e20:	2301      	movs	r3, #1
 8007e22:	e242      	b.n	80082aa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	685b      	ldr	r3, [r3, #4]
 8007e28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e2c:	d106      	bne.n	8007e3c <HAL_RCC_OscConfig+0x74>
 8007e2e:	4b76      	ldr	r3, [pc, #472]	; (8008008 <HAL_RCC_OscConfig+0x240>)
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	4a75      	ldr	r2, [pc, #468]	; (8008008 <HAL_RCC_OscConfig+0x240>)
 8007e34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e38:	6013      	str	r3, [r2, #0]
 8007e3a:	e01d      	b.n	8007e78 <HAL_RCC_OscConfig+0xb0>
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	685b      	ldr	r3, [r3, #4]
 8007e40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007e44:	d10c      	bne.n	8007e60 <HAL_RCC_OscConfig+0x98>
 8007e46:	4b70      	ldr	r3, [pc, #448]	; (8008008 <HAL_RCC_OscConfig+0x240>)
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	4a6f      	ldr	r2, [pc, #444]	; (8008008 <HAL_RCC_OscConfig+0x240>)
 8007e4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007e50:	6013      	str	r3, [r2, #0]
 8007e52:	4b6d      	ldr	r3, [pc, #436]	; (8008008 <HAL_RCC_OscConfig+0x240>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	4a6c      	ldr	r2, [pc, #432]	; (8008008 <HAL_RCC_OscConfig+0x240>)
 8007e58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e5c:	6013      	str	r3, [r2, #0]
 8007e5e:	e00b      	b.n	8007e78 <HAL_RCC_OscConfig+0xb0>
 8007e60:	4b69      	ldr	r3, [pc, #420]	; (8008008 <HAL_RCC_OscConfig+0x240>)
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	4a68      	ldr	r2, [pc, #416]	; (8008008 <HAL_RCC_OscConfig+0x240>)
 8007e66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007e6a:	6013      	str	r3, [r2, #0]
 8007e6c:	4b66      	ldr	r3, [pc, #408]	; (8008008 <HAL_RCC_OscConfig+0x240>)
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	4a65      	ldr	r2, [pc, #404]	; (8008008 <HAL_RCC_OscConfig+0x240>)
 8007e72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007e76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	685b      	ldr	r3, [r3, #4]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d013      	beq.n	8007ea8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e80:	f7ff fc3a 	bl	80076f8 <HAL_GetTick>
 8007e84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007e86:	e008      	b.n	8007e9a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007e88:	f7ff fc36 	bl	80076f8 <HAL_GetTick>
 8007e8c:	4602      	mov	r2, r0
 8007e8e:	693b      	ldr	r3, [r7, #16]
 8007e90:	1ad3      	subs	r3, r2, r3
 8007e92:	2b64      	cmp	r3, #100	; 0x64
 8007e94:	d901      	bls.n	8007e9a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007e96:	2303      	movs	r3, #3
 8007e98:	e207      	b.n	80082aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007e9a:	4b5b      	ldr	r3, [pc, #364]	; (8008008 <HAL_RCC_OscConfig+0x240>)
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d0f0      	beq.n	8007e88 <HAL_RCC_OscConfig+0xc0>
 8007ea6:	e014      	b.n	8007ed2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ea8:	f7ff fc26 	bl	80076f8 <HAL_GetTick>
 8007eac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007eae:	e008      	b.n	8007ec2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007eb0:	f7ff fc22 	bl	80076f8 <HAL_GetTick>
 8007eb4:	4602      	mov	r2, r0
 8007eb6:	693b      	ldr	r3, [r7, #16]
 8007eb8:	1ad3      	subs	r3, r2, r3
 8007eba:	2b64      	cmp	r3, #100	; 0x64
 8007ebc:	d901      	bls.n	8007ec2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007ebe:	2303      	movs	r3, #3
 8007ec0:	e1f3      	b.n	80082aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007ec2:	4b51      	ldr	r3, [pc, #324]	; (8008008 <HAL_RCC_OscConfig+0x240>)
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d1f0      	bne.n	8007eb0 <HAL_RCC_OscConfig+0xe8>
 8007ece:	e000      	b.n	8007ed2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007ed0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f003 0302 	and.w	r3, r3, #2
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d063      	beq.n	8007fa6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007ede:	4b4a      	ldr	r3, [pc, #296]	; (8008008 <HAL_RCC_OscConfig+0x240>)
 8007ee0:	689b      	ldr	r3, [r3, #8]
 8007ee2:	f003 030c 	and.w	r3, r3, #12
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d00b      	beq.n	8007f02 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007eea:	4b47      	ldr	r3, [pc, #284]	; (8008008 <HAL_RCC_OscConfig+0x240>)
 8007eec:	689b      	ldr	r3, [r3, #8]
 8007eee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007ef2:	2b08      	cmp	r3, #8
 8007ef4:	d11c      	bne.n	8007f30 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007ef6:	4b44      	ldr	r3, [pc, #272]	; (8008008 <HAL_RCC_OscConfig+0x240>)
 8007ef8:	685b      	ldr	r3, [r3, #4]
 8007efa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d116      	bne.n	8007f30 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007f02:	4b41      	ldr	r3, [pc, #260]	; (8008008 <HAL_RCC_OscConfig+0x240>)
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	f003 0302 	and.w	r3, r3, #2
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d005      	beq.n	8007f1a <HAL_RCC_OscConfig+0x152>
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	68db      	ldr	r3, [r3, #12]
 8007f12:	2b01      	cmp	r3, #1
 8007f14:	d001      	beq.n	8007f1a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007f16:	2301      	movs	r3, #1
 8007f18:	e1c7      	b.n	80082aa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007f1a:	4b3b      	ldr	r3, [pc, #236]	; (8008008 <HAL_RCC_OscConfig+0x240>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	691b      	ldr	r3, [r3, #16]
 8007f26:	00db      	lsls	r3, r3, #3
 8007f28:	4937      	ldr	r1, [pc, #220]	; (8008008 <HAL_RCC_OscConfig+0x240>)
 8007f2a:	4313      	orrs	r3, r2
 8007f2c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007f2e:	e03a      	b.n	8007fa6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	68db      	ldr	r3, [r3, #12]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d020      	beq.n	8007f7a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007f38:	4b34      	ldr	r3, [pc, #208]	; (800800c <HAL_RCC_OscConfig+0x244>)
 8007f3a:	2201      	movs	r2, #1
 8007f3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f3e:	f7ff fbdb 	bl	80076f8 <HAL_GetTick>
 8007f42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007f44:	e008      	b.n	8007f58 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007f46:	f7ff fbd7 	bl	80076f8 <HAL_GetTick>
 8007f4a:	4602      	mov	r2, r0
 8007f4c:	693b      	ldr	r3, [r7, #16]
 8007f4e:	1ad3      	subs	r3, r2, r3
 8007f50:	2b02      	cmp	r3, #2
 8007f52:	d901      	bls.n	8007f58 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007f54:	2303      	movs	r3, #3
 8007f56:	e1a8      	b.n	80082aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007f58:	4b2b      	ldr	r3, [pc, #172]	; (8008008 <HAL_RCC_OscConfig+0x240>)
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f003 0302 	and.w	r3, r3, #2
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d0f0      	beq.n	8007f46 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007f64:	4b28      	ldr	r3, [pc, #160]	; (8008008 <HAL_RCC_OscConfig+0x240>)
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	691b      	ldr	r3, [r3, #16]
 8007f70:	00db      	lsls	r3, r3, #3
 8007f72:	4925      	ldr	r1, [pc, #148]	; (8008008 <HAL_RCC_OscConfig+0x240>)
 8007f74:	4313      	orrs	r3, r2
 8007f76:	600b      	str	r3, [r1, #0]
 8007f78:	e015      	b.n	8007fa6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007f7a:	4b24      	ldr	r3, [pc, #144]	; (800800c <HAL_RCC_OscConfig+0x244>)
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f80:	f7ff fbba 	bl	80076f8 <HAL_GetTick>
 8007f84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007f86:	e008      	b.n	8007f9a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007f88:	f7ff fbb6 	bl	80076f8 <HAL_GetTick>
 8007f8c:	4602      	mov	r2, r0
 8007f8e:	693b      	ldr	r3, [r7, #16]
 8007f90:	1ad3      	subs	r3, r2, r3
 8007f92:	2b02      	cmp	r3, #2
 8007f94:	d901      	bls.n	8007f9a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007f96:	2303      	movs	r3, #3
 8007f98:	e187      	b.n	80082aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007f9a:	4b1b      	ldr	r3, [pc, #108]	; (8008008 <HAL_RCC_OscConfig+0x240>)
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f003 0302 	and.w	r3, r3, #2
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d1f0      	bne.n	8007f88 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f003 0308 	and.w	r3, r3, #8
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d036      	beq.n	8008020 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	695b      	ldr	r3, [r3, #20]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d016      	beq.n	8007fe8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007fba:	4b15      	ldr	r3, [pc, #84]	; (8008010 <HAL_RCC_OscConfig+0x248>)
 8007fbc:	2201      	movs	r2, #1
 8007fbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007fc0:	f7ff fb9a 	bl	80076f8 <HAL_GetTick>
 8007fc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007fc6:	e008      	b.n	8007fda <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007fc8:	f7ff fb96 	bl	80076f8 <HAL_GetTick>
 8007fcc:	4602      	mov	r2, r0
 8007fce:	693b      	ldr	r3, [r7, #16]
 8007fd0:	1ad3      	subs	r3, r2, r3
 8007fd2:	2b02      	cmp	r3, #2
 8007fd4:	d901      	bls.n	8007fda <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007fd6:	2303      	movs	r3, #3
 8007fd8:	e167      	b.n	80082aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007fda:	4b0b      	ldr	r3, [pc, #44]	; (8008008 <HAL_RCC_OscConfig+0x240>)
 8007fdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007fde:	f003 0302 	and.w	r3, r3, #2
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d0f0      	beq.n	8007fc8 <HAL_RCC_OscConfig+0x200>
 8007fe6:	e01b      	b.n	8008020 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007fe8:	4b09      	ldr	r3, [pc, #36]	; (8008010 <HAL_RCC_OscConfig+0x248>)
 8007fea:	2200      	movs	r2, #0
 8007fec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007fee:	f7ff fb83 	bl	80076f8 <HAL_GetTick>
 8007ff2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007ff4:	e00e      	b.n	8008014 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007ff6:	f7ff fb7f 	bl	80076f8 <HAL_GetTick>
 8007ffa:	4602      	mov	r2, r0
 8007ffc:	693b      	ldr	r3, [r7, #16]
 8007ffe:	1ad3      	subs	r3, r2, r3
 8008000:	2b02      	cmp	r3, #2
 8008002:	d907      	bls.n	8008014 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008004:	2303      	movs	r3, #3
 8008006:	e150      	b.n	80082aa <HAL_RCC_OscConfig+0x4e2>
 8008008:	40023800 	.word	0x40023800
 800800c:	42470000 	.word	0x42470000
 8008010:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008014:	4b88      	ldr	r3, [pc, #544]	; (8008238 <HAL_RCC_OscConfig+0x470>)
 8008016:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008018:	f003 0302 	and.w	r3, r3, #2
 800801c:	2b00      	cmp	r3, #0
 800801e:	d1ea      	bne.n	8007ff6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f003 0304 	and.w	r3, r3, #4
 8008028:	2b00      	cmp	r3, #0
 800802a:	f000 8097 	beq.w	800815c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800802e:	2300      	movs	r3, #0
 8008030:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008032:	4b81      	ldr	r3, [pc, #516]	; (8008238 <HAL_RCC_OscConfig+0x470>)
 8008034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008036:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800803a:	2b00      	cmp	r3, #0
 800803c:	d10f      	bne.n	800805e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800803e:	2300      	movs	r3, #0
 8008040:	60bb      	str	r3, [r7, #8]
 8008042:	4b7d      	ldr	r3, [pc, #500]	; (8008238 <HAL_RCC_OscConfig+0x470>)
 8008044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008046:	4a7c      	ldr	r2, [pc, #496]	; (8008238 <HAL_RCC_OscConfig+0x470>)
 8008048:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800804c:	6413      	str	r3, [r2, #64]	; 0x40
 800804e:	4b7a      	ldr	r3, [pc, #488]	; (8008238 <HAL_RCC_OscConfig+0x470>)
 8008050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008052:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008056:	60bb      	str	r3, [r7, #8]
 8008058:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800805a:	2301      	movs	r3, #1
 800805c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800805e:	4b77      	ldr	r3, [pc, #476]	; (800823c <HAL_RCC_OscConfig+0x474>)
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008066:	2b00      	cmp	r3, #0
 8008068:	d118      	bne.n	800809c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800806a:	4b74      	ldr	r3, [pc, #464]	; (800823c <HAL_RCC_OscConfig+0x474>)
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	4a73      	ldr	r2, [pc, #460]	; (800823c <HAL_RCC_OscConfig+0x474>)
 8008070:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008074:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008076:	f7ff fb3f 	bl	80076f8 <HAL_GetTick>
 800807a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800807c:	e008      	b.n	8008090 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800807e:	f7ff fb3b 	bl	80076f8 <HAL_GetTick>
 8008082:	4602      	mov	r2, r0
 8008084:	693b      	ldr	r3, [r7, #16]
 8008086:	1ad3      	subs	r3, r2, r3
 8008088:	2b02      	cmp	r3, #2
 800808a:	d901      	bls.n	8008090 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800808c:	2303      	movs	r3, #3
 800808e:	e10c      	b.n	80082aa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008090:	4b6a      	ldr	r3, [pc, #424]	; (800823c <HAL_RCC_OscConfig+0x474>)
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008098:	2b00      	cmp	r3, #0
 800809a:	d0f0      	beq.n	800807e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	689b      	ldr	r3, [r3, #8]
 80080a0:	2b01      	cmp	r3, #1
 80080a2:	d106      	bne.n	80080b2 <HAL_RCC_OscConfig+0x2ea>
 80080a4:	4b64      	ldr	r3, [pc, #400]	; (8008238 <HAL_RCC_OscConfig+0x470>)
 80080a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080a8:	4a63      	ldr	r2, [pc, #396]	; (8008238 <HAL_RCC_OscConfig+0x470>)
 80080aa:	f043 0301 	orr.w	r3, r3, #1
 80080ae:	6713      	str	r3, [r2, #112]	; 0x70
 80080b0:	e01c      	b.n	80080ec <HAL_RCC_OscConfig+0x324>
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	689b      	ldr	r3, [r3, #8]
 80080b6:	2b05      	cmp	r3, #5
 80080b8:	d10c      	bne.n	80080d4 <HAL_RCC_OscConfig+0x30c>
 80080ba:	4b5f      	ldr	r3, [pc, #380]	; (8008238 <HAL_RCC_OscConfig+0x470>)
 80080bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080be:	4a5e      	ldr	r2, [pc, #376]	; (8008238 <HAL_RCC_OscConfig+0x470>)
 80080c0:	f043 0304 	orr.w	r3, r3, #4
 80080c4:	6713      	str	r3, [r2, #112]	; 0x70
 80080c6:	4b5c      	ldr	r3, [pc, #368]	; (8008238 <HAL_RCC_OscConfig+0x470>)
 80080c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080ca:	4a5b      	ldr	r2, [pc, #364]	; (8008238 <HAL_RCC_OscConfig+0x470>)
 80080cc:	f043 0301 	orr.w	r3, r3, #1
 80080d0:	6713      	str	r3, [r2, #112]	; 0x70
 80080d2:	e00b      	b.n	80080ec <HAL_RCC_OscConfig+0x324>
 80080d4:	4b58      	ldr	r3, [pc, #352]	; (8008238 <HAL_RCC_OscConfig+0x470>)
 80080d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080d8:	4a57      	ldr	r2, [pc, #348]	; (8008238 <HAL_RCC_OscConfig+0x470>)
 80080da:	f023 0301 	bic.w	r3, r3, #1
 80080de:	6713      	str	r3, [r2, #112]	; 0x70
 80080e0:	4b55      	ldr	r3, [pc, #340]	; (8008238 <HAL_RCC_OscConfig+0x470>)
 80080e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080e4:	4a54      	ldr	r2, [pc, #336]	; (8008238 <HAL_RCC_OscConfig+0x470>)
 80080e6:	f023 0304 	bic.w	r3, r3, #4
 80080ea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	689b      	ldr	r3, [r3, #8]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d015      	beq.n	8008120 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80080f4:	f7ff fb00 	bl	80076f8 <HAL_GetTick>
 80080f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80080fa:	e00a      	b.n	8008112 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80080fc:	f7ff fafc 	bl	80076f8 <HAL_GetTick>
 8008100:	4602      	mov	r2, r0
 8008102:	693b      	ldr	r3, [r7, #16]
 8008104:	1ad3      	subs	r3, r2, r3
 8008106:	f241 3288 	movw	r2, #5000	; 0x1388
 800810a:	4293      	cmp	r3, r2
 800810c:	d901      	bls.n	8008112 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800810e:	2303      	movs	r3, #3
 8008110:	e0cb      	b.n	80082aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008112:	4b49      	ldr	r3, [pc, #292]	; (8008238 <HAL_RCC_OscConfig+0x470>)
 8008114:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008116:	f003 0302 	and.w	r3, r3, #2
 800811a:	2b00      	cmp	r3, #0
 800811c:	d0ee      	beq.n	80080fc <HAL_RCC_OscConfig+0x334>
 800811e:	e014      	b.n	800814a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008120:	f7ff faea 	bl	80076f8 <HAL_GetTick>
 8008124:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008126:	e00a      	b.n	800813e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008128:	f7ff fae6 	bl	80076f8 <HAL_GetTick>
 800812c:	4602      	mov	r2, r0
 800812e:	693b      	ldr	r3, [r7, #16]
 8008130:	1ad3      	subs	r3, r2, r3
 8008132:	f241 3288 	movw	r2, #5000	; 0x1388
 8008136:	4293      	cmp	r3, r2
 8008138:	d901      	bls.n	800813e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800813a:	2303      	movs	r3, #3
 800813c:	e0b5      	b.n	80082aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800813e:	4b3e      	ldr	r3, [pc, #248]	; (8008238 <HAL_RCC_OscConfig+0x470>)
 8008140:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008142:	f003 0302 	and.w	r3, r3, #2
 8008146:	2b00      	cmp	r3, #0
 8008148:	d1ee      	bne.n	8008128 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800814a:	7dfb      	ldrb	r3, [r7, #23]
 800814c:	2b01      	cmp	r3, #1
 800814e:	d105      	bne.n	800815c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008150:	4b39      	ldr	r3, [pc, #228]	; (8008238 <HAL_RCC_OscConfig+0x470>)
 8008152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008154:	4a38      	ldr	r2, [pc, #224]	; (8008238 <HAL_RCC_OscConfig+0x470>)
 8008156:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800815a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	699b      	ldr	r3, [r3, #24]
 8008160:	2b00      	cmp	r3, #0
 8008162:	f000 80a1 	beq.w	80082a8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008166:	4b34      	ldr	r3, [pc, #208]	; (8008238 <HAL_RCC_OscConfig+0x470>)
 8008168:	689b      	ldr	r3, [r3, #8]
 800816a:	f003 030c 	and.w	r3, r3, #12
 800816e:	2b08      	cmp	r3, #8
 8008170:	d05c      	beq.n	800822c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	699b      	ldr	r3, [r3, #24]
 8008176:	2b02      	cmp	r3, #2
 8008178:	d141      	bne.n	80081fe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800817a:	4b31      	ldr	r3, [pc, #196]	; (8008240 <HAL_RCC_OscConfig+0x478>)
 800817c:	2200      	movs	r2, #0
 800817e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008180:	f7ff faba 	bl	80076f8 <HAL_GetTick>
 8008184:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008186:	e008      	b.n	800819a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008188:	f7ff fab6 	bl	80076f8 <HAL_GetTick>
 800818c:	4602      	mov	r2, r0
 800818e:	693b      	ldr	r3, [r7, #16]
 8008190:	1ad3      	subs	r3, r2, r3
 8008192:	2b02      	cmp	r3, #2
 8008194:	d901      	bls.n	800819a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008196:	2303      	movs	r3, #3
 8008198:	e087      	b.n	80082aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800819a:	4b27      	ldr	r3, [pc, #156]	; (8008238 <HAL_RCC_OscConfig+0x470>)
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d1f0      	bne.n	8008188 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	69da      	ldr	r2, [r3, #28]
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6a1b      	ldr	r3, [r3, #32]
 80081ae:	431a      	orrs	r2, r3
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081b4:	019b      	lsls	r3, r3, #6
 80081b6:	431a      	orrs	r2, r3
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081bc:	085b      	lsrs	r3, r3, #1
 80081be:	3b01      	subs	r3, #1
 80081c0:	041b      	lsls	r3, r3, #16
 80081c2:	431a      	orrs	r2, r3
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081c8:	061b      	lsls	r3, r3, #24
 80081ca:	491b      	ldr	r1, [pc, #108]	; (8008238 <HAL_RCC_OscConfig+0x470>)
 80081cc:	4313      	orrs	r3, r2
 80081ce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80081d0:	4b1b      	ldr	r3, [pc, #108]	; (8008240 <HAL_RCC_OscConfig+0x478>)
 80081d2:	2201      	movs	r2, #1
 80081d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80081d6:	f7ff fa8f 	bl	80076f8 <HAL_GetTick>
 80081da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80081dc:	e008      	b.n	80081f0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80081de:	f7ff fa8b 	bl	80076f8 <HAL_GetTick>
 80081e2:	4602      	mov	r2, r0
 80081e4:	693b      	ldr	r3, [r7, #16]
 80081e6:	1ad3      	subs	r3, r2, r3
 80081e8:	2b02      	cmp	r3, #2
 80081ea:	d901      	bls.n	80081f0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80081ec:	2303      	movs	r3, #3
 80081ee:	e05c      	b.n	80082aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80081f0:	4b11      	ldr	r3, [pc, #68]	; (8008238 <HAL_RCC_OscConfig+0x470>)
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d0f0      	beq.n	80081de <HAL_RCC_OscConfig+0x416>
 80081fc:	e054      	b.n	80082a8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80081fe:	4b10      	ldr	r3, [pc, #64]	; (8008240 <HAL_RCC_OscConfig+0x478>)
 8008200:	2200      	movs	r2, #0
 8008202:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008204:	f7ff fa78 	bl	80076f8 <HAL_GetTick>
 8008208:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800820a:	e008      	b.n	800821e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800820c:	f7ff fa74 	bl	80076f8 <HAL_GetTick>
 8008210:	4602      	mov	r2, r0
 8008212:	693b      	ldr	r3, [r7, #16]
 8008214:	1ad3      	subs	r3, r2, r3
 8008216:	2b02      	cmp	r3, #2
 8008218:	d901      	bls.n	800821e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800821a:	2303      	movs	r3, #3
 800821c:	e045      	b.n	80082aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800821e:	4b06      	ldr	r3, [pc, #24]	; (8008238 <HAL_RCC_OscConfig+0x470>)
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008226:	2b00      	cmp	r3, #0
 8008228:	d1f0      	bne.n	800820c <HAL_RCC_OscConfig+0x444>
 800822a:	e03d      	b.n	80082a8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	699b      	ldr	r3, [r3, #24]
 8008230:	2b01      	cmp	r3, #1
 8008232:	d107      	bne.n	8008244 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008234:	2301      	movs	r3, #1
 8008236:	e038      	b.n	80082aa <HAL_RCC_OscConfig+0x4e2>
 8008238:	40023800 	.word	0x40023800
 800823c:	40007000 	.word	0x40007000
 8008240:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008244:	4b1b      	ldr	r3, [pc, #108]	; (80082b4 <HAL_RCC_OscConfig+0x4ec>)
 8008246:	685b      	ldr	r3, [r3, #4]
 8008248:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	699b      	ldr	r3, [r3, #24]
 800824e:	2b01      	cmp	r3, #1
 8008250:	d028      	beq.n	80082a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800825c:	429a      	cmp	r2, r3
 800825e:	d121      	bne.n	80082a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800826a:	429a      	cmp	r2, r3
 800826c:	d11a      	bne.n	80082a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800826e:	68fa      	ldr	r2, [r7, #12]
 8008270:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008274:	4013      	ands	r3, r2
 8008276:	687a      	ldr	r2, [r7, #4]
 8008278:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800827a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800827c:	4293      	cmp	r3, r2
 800827e:	d111      	bne.n	80082a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800828a:	085b      	lsrs	r3, r3, #1
 800828c:	3b01      	subs	r3, #1
 800828e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008290:	429a      	cmp	r2, r3
 8008292:	d107      	bne.n	80082a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800829e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80082a0:	429a      	cmp	r2, r3
 80082a2:	d001      	beq.n	80082a8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80082a4:	2301      	movs	r3, #1
 80082a6:	e000      	b.n	80082aa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80082a8:	2300      	movs	r3, #0
}
 80082aa:	4618      	mov	r0, r3
 80082ac:	3718      	adds	r7, #24
 80082ae:	46bd      	mov	sp, r7
 80082b0:	bd80      	pop	{r7, pc}
 80082b2:	bf00      	nop
 80082b4:	40023800 	.word	0x40023800

080082b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b084      	sub	sp, #16
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
 80082c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d101      	bne.n	80082cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80082c8:	2301      	movs	r3, #1
 80082ca:	e0cc      	b.n	8008466 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80082cc:	4b68      	ldr	r3, [pc, #416]	; (8008470 <HAL_RCC_ClockConfig+0x1b8>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	f003 0307 	and.w	r3, r3, #7
 80082d4:	683a      	ldr	r2, [r7, #0]
 80082d6:	429a      	cmp	r2, r3
 80082d8:	d90c      	bls.n	80082f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80082da:	4b65      	ldr	r3, [pc, #404]	; (8008470 <HAL_RCC_ClockConfig+0x1b8>)
 80082dc:	683a      	ldr	r2, [r7, #0]
 80082de:	b2d2      	uxtb	r2, r2
 80082e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80082e2:	4b63      	ldr	r3, [pc, #396]	; (8008470 <HAL_RCC_ClockConfig+0x1b8>)
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f003 0307 	and.w	r3, r3, #7
 80082ea:	683a      	ldr	r2, [r7, #0]
 80082ec:	429a      	cmp	r2, r3
 80082ee:	d001      	beq.n	80082f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80082f0:	2301      	movs	r3, #1
 80082f2:	e0b8      	b.n	8008466 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f003 0302 	and.w	r3, r3, #2
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d020      	beq.n	8008342 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f003 0304 	and.w	r3, r3, #4
 8008308:	2b00      	cmp	r3, #0
 800830a:	d005      	beq.n	8008318 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800830c:	4b59      	ldr	r3, [pc, #356]	; (8008474 <HAL_RCC_ClockConfig+0x1bc>)
 800830e:	689b      	ldr	r3, [r3, #8]
 8008310:	4a58      	ldr	r2, [pc, #352]	; (8008474 <HAL_RCC_ClockConfig+0x1bc>)
 8008312:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008316:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f003 0308 	and.w	r3, r3, #8
 8008320:	2b00      	cmp	r3, #0
 8008322:	d005      	beq.n	8008330 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008324:	4b53      	ldr	r3, [pc, #332]	; (8008474 <HAL_RCC_ClockConfig+0x1bc>)
 8008326:	689b      	ldr	r3, [r3, #8]
 8008328:	4a52      	ldr	r2, [pc, #328]	; (8008474 <HAL_RCC_ClockConfig+0x1bc>)
 800832a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800832e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008330:	4b50      	ldr	r3, [pc, #320]	; (8008474 <HAL_RCC_ClockConfig+0x1bc>)
 8008332:	689b      	ldr	r3, [r3, #8]
 8008334:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	689b      	ldr	r3, [r3, #8]
 800833c:	494d      	ldr	r1, [pc, #308]	; (8008474 <HAL_RCC_ClockConfig+0x1bc>)
 800833e:	4313      	orrs	r3, r2
 8008340:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	f003 0301 	and.w	r3, r3, #1
 800834a:	2b00      	cmp	r3, #0
 800834c:	d044      	beq.n	80083d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	685b      	ldr	r3, [r3, #4]
 8008352:	2b01      	cmp	r3, #1
 8008354:	d107      	bne.n	8008366 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008356:	4b47      	ldr	r3, [pc, #284]	; (8008474 <HAL_RCC_ClockConfig+0x1bc>)
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800835e:	2b00      	cmp	r3, #0
 8008360:	d119      	bne.n	8008396 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008362:	2301      	movs	r3, #1
 8008364:	e07f      	b.n	8008466 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	685b      	ldr	r3, [r3, #4]
 800836a:	2b02      	cmp	r3, #2
 800836c:	d003      	beq.n	8008376 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008372:	2b03      	cmp	r3, #3
 8008374:	d107      	bne.n	8008386 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008376:	4b3f      	ldr	r3, [pc, #252]	; (8008474 <HAL_RCC_ClockConfig+0x1bc>)
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800837e:	2b00      	cmp	r3, #0
 8008380:	d109      	bne.n	8008396 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008382:	2301      	movs	r3, #1
 8008384:	e06f      	b.n	8008466 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008386:	4b3b      	ldr	r3, [pc, #236]	; (8008474 <HAL_RCC_ClockConfig+0x1bc>)
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	f003 0302 	and.w	r3, r3, #2
 800838e:	2b00      	cmp	r3, #0
 8008390:	d101      	bne.n	8008396 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008392:	2301      	movs	r3, #1
 8008394:	e067      	b.n	8008466 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008396:	4b37      	ldr	r3, [pc, #220]	; (8008474 <HAL_RCC_ClockConfig+0x1bc>)
 8008398:	689b      	ldr	r3, [r3, #8]
 800839a:	f023 0203 	bic.w	r2, r3, #3
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	685b      	ldr	r3, [r3, #4]
 80083a2:	4934      	ldr	r1, [pc, #208]	; (8008474 <HAL_RCC_ClockConfig+0x1bc>)
 80083a4:	4313      	orrs	r3, r2
 80083a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80083a8:	f7ff f9a6 	bl	80076f8 <HAL_GetTick>
 80083ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80083ae:	e00a      	b.n	80083c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80083b0:	f7ff f9a2 	bl	80076f8 <HAL_GetTick>
 80083b4:	4602      	mov	r2, r0
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	1ad3      	subs	r3, r2, r3
 80083ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80083be:	4293      	cmp	r3, r2
 80083c0:	d901      	bls.n	80083c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80083c2:	2303      	movs	r3, #3
 80083c4:	e04f      	b.n	8008466 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80083c6:	4b2b      	ldr	r3, [pc, #172]	; (8008474 <HAL_RCC_ClockConfig+0x1bc>)
 80083c8:	689b      	ldr	r3, [r3, #8]
 80083ca:	f003 020c 	and.w	r2, r3, #12
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	685b      	ldr	r3, [r3, #4]
 80083d2:	009b      	lsls	r3, r3, #2
 80083d4:	429a      	cmp	r2, r3
 80083d6:	d1eb      	bne.n	80083b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80083d8:	4b25      	ldr	r3, [pc, #148]	; (8008470 <HAL_RCC_ClockConfig+0x1b8>)
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	f003 0307 	and.w	r3, r3, #7
 80083e0:	683a      	ldr	r2, [r7, #0]
 80083e2:	429a      	cmp	r2, r3
 80083e4:	d20c      	bcs.n	8008400 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80083e6:	4b22      	ldr	r3, [pc, #136]	; (8008470 <HAL_RCC_ClockConfig+0x1b8>)
 80083e8:	683a      	ldr	r2, [r7, #0]
 80083ea:	b2d2      	uxtb	r2, r2
 80083ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80083ee:	4b20      	ldr	r3, [pc, #128]	; (8008470 <HAL_RCC_ClockConfig+0x1b8>)
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f003 0307 	and.w	r3, r3, #7
 80083f6:	683a      	ldr	r2, [r7, #0]
 80083f8:	429a      	cmp	r2, r3
 80083fa:	d001      	beq.n	8008400 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80083fc:	2301      	movs	r3, #1
 80083fe:	e032      	b.n	8008466 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f003 0304 	and.w	r3, r3, #4
 8008408:	2b00      	cmp	r3, #0
 800840a:	d008      	beq.n	800841e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800840c:	4b19      	ldr	r3, [pc, #100]	; (8008474 <HAL_RCC_ClockConfig+0x1bc>)
 800840e:	689b      	ldr	r3, [r3, #8]
 8008410:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	68db      	ldr	r3, [r3, #12]
 8008418:	4916      	ldr	r1, [pc, #88]	; (8008474 <HAL_RCC_ClockConfig+0x1bc>)
 800841a:	4313      	orrs	r3, r2
 800841c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	f003 0308 	and.w	r3, r3, #8
 8008426:	2b00      	cmp	r3, #0
 8008428:	d009      	beq.n	800843e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800842a:	4b12      	ldr	r3, [pc, #72]	; (8008474 <HAL_RCC_ClockConfig+0x1bc>)
 800842c:	689b      	ldr	r3, [r3, #8]
 800842e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	691b      	ldr	r3, [r3, #16]
 8008436:	00db      	lsls	r3, r3, #3
 8008438:	490e      	ldr	r1, [pc, #56]	; (8008474 <HAL_RCC_ClockConfig+0x1bc>)
 800843a:	4313      	orrs	r3, r2
 800843c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800843e:	f000 f821 	bl	8008484 <HAL_RCC_GetSysClockFreq>
 8008442:	4602      	mov	r2, r0
 8008444:	4b0b      	ldr	r3, [pc, #44]	; (8008474 <HAL_RCC_ClockConfig+0x1bc>)
 8008446:	689b      	ldr	r3, [r3, #8]
 8008448:	091b      	lsrs	r3, r3, #4
 800844a:	f003 030f 	and.w	r3, r3, #15
 800844e:	490a      	ldr	r1, [pc, #40]	; (8008478 <HAL_RCC_ClockConfig+0x1c0>)
 8008450:	5ccb      	ldrb	r3, [r1, r3]
 8008452:	fa22 f303 	lsr.w	r3, r2, r3
 8008456:	4a09      	ldr	r2, [pc, #36]	; (800847c <HAL_RCC_ClockConfig+0x1c4>)
 8008458:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800845a:	4b09      	ldr	r3, [pc, #36]	; (8008480 <HAL_RCC_ClockConfig+0x1c8>)
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	4618      	mov	r0, r3
 8008460:	f7ff f906 	bl	8007670 <HAL_InitTick>

  return HAL_OK;
 8008464:	2300      	movs	r3, #0
}
 8008466:	4618      	mov	r0, r3
 8008468:	3710      	adds	r7, #16
 800846a:	46bd      	mov	sp, r7
 800846c:	bd80      	pop	{r7, pc}
 800846e:	bf00      	nop
 8008470:	40023c00 	.word	0x40023c00
 8008474:	40023800 	.word	0x40023800
 8008478:	0802cb14 	.word	0x0802cb14
 800847c:	20000000 	.word	0x20000000
 8008480:	20000010 	.word	0x20000010

08008484 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008484:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008488:	b090      	sub	sp, #64	; 0x40
 800848a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800848c:	2300      	movs	r3, #0
 800848e:	637b      	str	r3, [r7, #52]	; 0x34
 8008490:	2300      	movs	r3, #0
 8008492:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008494:	2300      	movs	r3, #0
 8008496:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8008498:	2300      	movs	r3, #0
 800849a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800849c:	4b59      	ldr	r3, [pc, #356]	; (8008604 <HAL_RCC_GetSysClockFreq+0x180>)
 800849e:	689b      	ldr	r3, [r3, #8]
 80084a0:	f003 030c 	and.w	r3, r3, #12
 80084a4:	2b08      	cmp	r3, #8
 80084a6:	d00d      	beq.n	80084c4 <HAL_RCC_GetSysClockFreq+0x40>
 80084a8:	2b08      	cmp	r3, #8
 80084aa:	f200 80a1 	bhi.w	80085f0 <HAL_RCC_GetSysClockFreq+0x16c>
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d002      	beq.n	80084b8 <HAL_RCC_GetSysClockFreq+0x34>
 80084b2:	2b04      	cmp	r3, #4
 80084b4:	d003      	beq.n	80084be <HAL_RCC_GetSysClockFreq+0x3a>
 80084b6:	e09b      	b.n	80085f0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80084b8:	4b53      	ldr	r3, [pc, #332]	; (8008608 <HAL_RCC_GetSysClockFreq+0x184>)
 80084ba:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80084bc:	e09b      	b.n	80085f6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80084be:	4b53      	ldr	r3, [pc, #332]	; (800860c <HAL_RCC_GetSysClockFreq+0x188>)
 80084c0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80084c2:	e098      	b.n	80085f6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80084c4:	4b4f      	ldr	r3, [pc, #316]	; (8008604 <HAL_RCC_GetSysClockFreq+0x180>)
 80084c6:	685b      	ldr	r3, [r3, #4]
 80084c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80084cc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80084ce:	4b4d      	ldr	r3, [pc, #308]	; (8008604 <HAL_RCC_GetSysClockFreq+0x180>)
 80084d0:	685b      	ldr	r3, [r3, #4]
 80084d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d028      	beq.n	800852c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80084da:	4b4a      	ldr	r3, [pc, #296]	; (8008604 <HAL_RCC_GetSysClockFreq+0x180>)
 80084dc:	685b      	ldr	r3, [r3, #4]
 80084de:	099b      	lsrs	r3, r3, #6
 80084e0:	2200      	movs	r2, #0
 80084e2:	623b      	str	r3, [r7, #32]
 80084e4:	627a      	str	r2, [r7, #36]	; 0x24
 80084e6:	6a3b      	ldr	r3, [r7, #32]
 80084e8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80084ec:	2100      	movs	r1, #0
 80084ee:	4b47      	ldr	r3, [pc, #284]	; (800860c <HAL_RCC_GetSysClockFreq+0x188>)
 80084f0:	fb03 f201 	mul.w	r2, r3, r1
 80084f4:	2300      	movs	r3, #0
 80084f6:	fb00 f303 	mul.w	r3, r0, r3
 80084fa:	4413      	add	r3, r2
 80084fc:	4a43      	ldr	r2, [pc, #268]	; (800860c <HAL_RCC_GetSysClockFreq+0x188>)
 80084fe:	fba0 1202 	umull	r1, r2, r0, r2
 8008502:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008504:	460a      	mov	r2, r1
 8008506:	62ba      	str	r2, [r7, #40]	; 0x28
 8008508:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800850a:	4413      	add	r3, r2
 800850c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800850e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008510:	2200      	movs	r2, #0
 8008512:	61bb      	str	r3, [r7, #24]
 8008514:	61fa      	str	r2, [r7, #28]
 8008516:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800851a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800851e:	f7f8 fb43 	bl	8000ba8 <__aeabi_uldivmod>
 8008522:	4602      	mov	r2, r0
 8008524:	460b      	mov	r3, r1
 8008526:	4613      	mov	r3, r2
 8008528:	63fb      	str	r3, [r7, #60]	; 0x3c
 800852a:	e053      	b.n	80085d4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800852c:	4b35      	ldr	r3, [pc, #212]	; (8008604 <HAL_RCC_GetSysClockFreq+0x180>)
 800852e:	685b      	ldr	r3, [r3, #4]
 8008530:	099b      	lsrs	r3, r3, #6
 8008532:	2200      	movs	r2, #0
 8008534:	613b      	str	r3, [r7, #16]
 8008536:	617a      	str	r2, [r7, #20]
 8008538:	693b      	ldr	r3, [r7, #16]
 800853a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800853e:	f04f 0b00 	mov.w	fp, #0
 8008542:	4652      	mov	r2, sl
 8008544:	465b      	mov	r3, fp
 8008546:	f04f 0000 	mov.w	r0, #0
 800854a:	f04f 0100 	mov.w	r1, #0
 800854e:	0159      	lsls	r1, r3, #5
 8008550:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008554:	0150      	lsls	r0, r2, #5
 8008556:	4602      	mov	r2, r0
 8008558:	460b      	mov	r3, r1
 800855a:	ebb2 080a 	subs.w	r8, r2, sl
 800855e:	eb63 090b 	sbc.w	r9, r3, fp
 8008562:	f04f 0200 	mov.w	r2, #0
 8008566:	f04f 0300 	mov.w	r3, #0
 800856a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800856e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8008572:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8008576:	ebb2 0408 	subs.w	r4, r2, r8
 800857a:	eb63 0509 	sbc.w	r5, r3, r9
 800857e:	f04f 0200 	mov.w	r2, #0
 8008582:	f04f 0300 	mov.w	r3, #0
 8008586:	00eb      	lsls	r3, r5, #3
 8008588:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800858c:	00e2      	lsls	r2, r4, #3
 800858e:	4614      	mov	r4, r2
 8008590:	461d      	mov	r5, r3
 8008592:	eb14 030a 	adds.w	r3, r4, sl
 8008596:	603b      	str	r3, [r7, #0]
 8008598:	eb45 030b 	adc.w	r3, r5, fp
 800859c:	607b      	str	r3, [r7, #4]
 800859e:	f04f 0200 	mov.w	r2, #0
 80085a2:	f04f 0300 	mov.w	r3, #0
 80085a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80085aa:	4629      	mov	r1, r5
 80085ac:	028b      	lsls	r3, r1, #10
 80085ae:	4621      	mov	r1, r4
 80085b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80085b4:	4621      	mov	r1, r4
 80085b6:	028a      	lsls	r2, r1, #10
 80085b8:	4610      	mov	r0, r2
 80085ba:	4619      	mov	r1, r3
 80085bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085be:	2200      	movs	r2, #0
 80085c0:	60bb      	str	r3, [r7, #8]
 80085c2:	60fa      	str	r2, [r7, #12]
 80085c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80085c8:	f7f8 faee 	bl	8000ba8 <__aeabi_uldivmod>
 80085cc:	4602      	mov	r2, r0
 80085ce:	460b      	mov	r3, r1
 80085d0:	4613      	mov	r3, r2
 80085d2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80085d4:	4b0b      	ldr	r3, [pc, #44]	; (8008604 <HAL_RCC_GetSysClockFreq+0x180>)
 80085d6:	685b      	ldr	r3, [r3, #4]
 80085d8:	0c1b      	lsrs	r3, r3, #16
 80085da:	f003 0303 	and.w	r3, r3, #3
 80085de:	3301      	adds	r3, #1
 80085e0:	005b      	lsls	r3, r3, #1
 80085e2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80085e4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80085e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80085ec:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80085ee:	e002      	b.n	80085f6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80085f0:	4b05      	ldr	r3, [pc, #20]	; (8008608 <HAL_RCC_GetSysClockFreq+0x184>)
 80085f2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80085f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80085f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80085f8:	4618      	mov	r0, r3
 80085fa:	3740      	adds	r7, #64	; 0x40
 80085fc:	46bd      	mov	sp, r7
 80085fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008602:	bf00      	nop
 8008604:	40023800 	.word	0x40023800
 8008608:	00f42400 	.word	0x00f42400
 800860c:	017d7840 	.word	0x017d7840

08008610 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008610:	b480      	push	{r7}
 8008612:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008614:	4b03      	ldr	r3, [pc, #12]	; (8008624 <HAL_RCC_GetHCLKFreq+0x14>)
 8008616:	681b      	ldr	r3, [r3, #0]
}
 8008618:	4618      	mov	r0, r3
 800861a:	46bd      	mov	sp, r7
 800861c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008620:	4770      	bx	lr
 8008622:	bf00      	nop
 8008624:	20000000 	.word	0x20000000

08008628 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008628:	b580      	push	{r7, lr}
 800862a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800862c:	f7ff fff0 	bl	8008610 <HAL_RCC_GetHCLKFreq>
 8008630:	4602      	mov	r2, r0
 8008632:	4b05      	ldr	r3, [pc, #20]	; (8008648 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008634:	689b      	ldr	r3, [r3, #8]
 8008636:	0a9b      	lsrs	r3, r3, #10
 8008638:	f003 0307 	and.w	r3, r3, #7
 800863c:	4903      	ldr	r1, [pc, #12]	; (800864c <HAL_RCC_GetPCLK1Freq+0x24>)
 800863e:	5ccb      	ldrb	r3, [r1, r3]
 8008640:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008644:	4618      	mov	r0, r3
 8008646:	bd80      	pop	{r7, pc}
 8008648:	40023800 	.word	0x40023800
 800864c:	0802cb24 	.word	0x0802cb24

08008650 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008654:	f7ff ffdc 	bl	8008610 <HAL_RCC_GetHCLKFreq>
 8008658:	4602      	mov	r2, r0
 800865a:	4b05      	ldr	r3, [pc, #20]	; (8008670 <HAL_RCC_GetPCLK2Freq+0x20>)
 800865c:	689b      	ldr	r3, [r3, #8]
 800865e:	0b5b      	lsrs	r3, r3, #13
 8008660:	f003 0307 	and.w	r3, r3, #7
 8008664:	4903      	ldr	r1, [pc, #12]	; (8008674 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008666:	5ccb      	ldrb	r3, [r1, r3]
 8008668:	fa22 f303 	lsr.w	r3, r2, r3
}
 800866c:	4618      	mov	r0, r3
 800866e:	bd80      	pop	{r7, pc}
 8008670:	40023800 	.word	0x40023800
 8008674:	0802cb24 	.word	0x0802cb24

08008678 <__cvt>:
 8008678:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800867c:	ec55 4b10 	vmov	r4, r5, d0
 8008680:	2d00      	cmp	r5, #0
 8008682:	460e      	mov	r6, r1
 8008684:	4619      	mov	r1, r3
 8008686:	462b      	mov	r3, r5
 8008688:	bfbb      	ittet	lt
 800868a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800868e:	461d      	movlt	r5, r3
 8008690:	2300      	movge	r3, #0
 8008692:	232d      	movlt	r3, #45	; 0x2d
 8008694:	700b      	strb	r3, [r1, #0]
 8008696:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008698:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800869c:	4691      	mov	r9, r2
 800869e:	f023 0820 	bic.w	r8, r3, #32
 80086a2:	bfbc      	itt	lt
 80086a4:	4622      	movlt	r2, r4
 80086a6:	4614      	movlt	r4, r2
 80086a8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80086ac:	d005      	beq.n	80086ba <__cvt+0x42>
 80086ae:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80086b2:	d100      	bne.n	80086b6 <__cvt+0x3e>
 80086b4:	3601      	adds	r6, #1
 80086b6:	2102      	movs	r1, #2
 80086b8:	e000      	b.n	80086bc <__cvt+0x44>
 80086ba:	2103      	movs	r1, #3
 80086bc:	ab03      	add	r3, sp, #12
 80086be:	9301      	str	r3, [sp, #4]
 80086c0:	ab02      	add	r3, sp, #8
 80086c2:	9300      	str	r3, [sp, #0]
 80086c4:	ec45 4b10 	vmov	d0, r4, r5
 80086c8:	4653      	mov	r3, sl
 80086ca:	4632      	mov	r2, r6
 80086cc:	f000 ff0c 	bl	80094e8 <_dtoa_r>
 80086d0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80086d4:	4607      	mov	r7, r0
 80086d6:	d102      	bne.n	80086de <__cvt+0x66>
 80086d8:	f019 0f01 	tst.w	r9, #1
 80086dc:	d022      	beq.n	8008724 <__cvt+0xac>
 80086de:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80086e2:	eb07 0906 	add.w	r9, r7, r6
 80086e6:	d110      	bne.n	800870a <__cvt+0x92>
 80086e8:	783b      	ldrb	r3, [r7, #0]
 80086ea:	2b30      	cmp	r3, #48	; 0x30
 80086ec:	d10a      	bne.n	8008704 <__cvt+0x8c>
 80086ee:	2200      	movs	r2, #0
 80086f0:	2300      	movs	r3, #0
 80086f2:	4620      	mov	r0, r4
 80086f4:	4629      	mov	r1, r5
 80086f6:	f7f8 f9e7 	bl	8000ac8 <__aeabi_dcmpeq>
 80086fa:	b918      	cbnz	r0, 8008704 <__cvt+0x8c>
 80086fc:	f1c6 0601 	rsb	r6, r6, #1
 8008700:	f8ca 6000 	str.w	r6, [sl]
 8008704:	f8da 3000 	ldr.w	r3, [sl]
 8008708:	4499      	add	r9, r3
 800870a:	2200      	movs	r2, #0
 800870c:	2300      	movs	r3, #0
 800870e:	4620      	mov	r0, r4
 8008710:	4629      	mov	r1, r5
 8008712:	f7f8 f9d9 	bl	8000ac8 <__aeabi_dcmpeq>
 8008716:	b108      	cbz	r0, 800871c <__cvt+0xa4>
 8008718:	f8cd 900c 	str.w	r9, [sp, #12]
 800871c:	2230      	movs	r2, #48	; 0x30
 800871e:	9b03      	ldr	r3, [sp, #12]
 8008720:	454b      	cmp	r3, r9
 8008722:	d307      	bcc.n	8008734 <__cvt+0xbc>
 8008724:	9b03      	ldr	r3, [sp, #12]
 8008726:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008728:	1bdb      	subs	r3, r3, r7
 800872a:	4638      	mov	r0, r7
 800872c:	6013      	str	r3, [r2, #0]
 800872e:	b004      	add	sp, #16
 8008730:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008734:	1c59      	adds	r1, r3, #1
 8008736:	9103      	str	r1, [sp, #12]
 8008738:	701a      	strb	r2, [r3, #0]
 800873a:	e7f0      	b.n	800871e <__cvt+0xa6>

0800873c <__exponent>:
 800873c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800873e:	4603      	mov	r3, r0
 8008740:	2900      	cmp	r1, #0
 8008742:	bfb8      	it	lt
 8008744:	4249      	neglt	r1, r1
 8008746:	f803 2b02 	strb.w	r2, [r3], #2
 800874a:	bfb4      	ite	lt
 800874c:	222d      	movlt	r2, #45	; 0x2d
 800874e:	222b      	movge	r2, #43	; 0x2b
 8008750:	2909      	cmp	r1, #9
 8008752:	7042      	strb	r2, [r0, #1]
 8008754:	dd2a      	ble.n	80087ac <__exponent+0x70>
 8008756:	f10d 0207 	add.w	r2, sp, #7
 800875a:	4617      	mov	r7, r2
 800875c:	260a      	movs	r6, #10
 800875e:	4694      	mov	ip, r2
 8008760:	fb91 f5f6 	sdiv	r5, r1, r6
 8008764:	fb06 1415 	mls	r4, r6, r5, r1
 8008768:	3430      	adds	r4, #48	; 0x30
 800876a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800876e:	460c      	mov	r4, r1
 8008770:	2c63      	cmp	r4, #99	; 0x63
 8008772:	f102 32ff 	add.w	r2, r2, #4294967295
 8008776:	4629      	mov	r1, r5
 8008778:	dcf1      	bgt.n	800875e <__exponent+0x22>
 800877a:	3130      	adds	r1, #48	; 0x30
 800877c:	f1ac 0402 	sub.w	r4, ip, #2
 8008780:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008784:	1c41      	adds	r1, r0, #1
 8008786:	4622      	mov	r2, r4
 8008788:	42ba      	cmp	r2, r7
 800878a:	d30a      	bcc.n	80087a2 <__exponent+0x66>
 800878c:	f10d 0209 	add.w	r2, sp, #9
 8008790:	eba2 020c 	sub.w	r2, r2, ip
 8008794:	42bc      	cmp	r4, r7
 8008796:	bf88      	it	hi
 8008798:	2200      	movhi	r2, #0
 800879a:	4413      	add	r3, r2
 800879c:	1a18      	subs	r0, r3, r0
 800879e:	b003      	add	sp, #12
 80087a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80087a2:	f812 5b01 	ldrb.w	r5, [r2], #1
 80087a6:	f801 5f01 	strb.w	r5, [r1, #1]!
 80087aa:	e7ed      	b.n	8008788 <__exponent+0x4c>
 80087ac:	2330      	movs	r3, #48	; 0x30
 80087ae:	3130      	adds	r1, #48	; 0x30
 80087b0:	7083      	strb	r3, [r0, #2]
 80087b2:	70c1      	strb	r1, [r0, #3]
 80087b4:	1d03      	adds	r3, r0, #4
 80087b6:	e7f1      	b.n	800879c <__exponent+0x60>

080087b8 <_printf_float>:
 80087b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087bc:	ed2d 8b02 	vpush	{d8}
 80087c0:	b08d      	sub	sp, #52	; 0x34
 80087c2:	460c      	mov	r4, r1
 80087c4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80087c8:	4616      	mov	r6, r2
 80087ca:	461f      	mov	r7, r3
 80087cc:	4605      	mov	r5, r0
 80087ce:	f000 fd7b 	bl	80092c8 <_localeconv_r>
 80087d2:	f8d0 a000 	ldr.w	sl, [r0]
 80087d6:	4650      	mov	r0, sl
 80087d8:	f7f7 fd4a 	bl	8000270 <strlen>
 80087dc:	2300      	movs	r3, #0
 80087de:	930a      	str	r3, [sp, #40]	; 0x28
 80087e0:	6823      	ldr	r3, [r4, #0]
 80087e2:	9305      	str	r3, [sp, #20]
 80087e4:	f8d8 3000 	ldr.w	r3, [r8]
 80087e8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80087ec:	3307      	adds	r3, #7
 80087ee:	f023 0307 	bic.w	r3, r3, #7
 80087f2:	f103 0208 	add.w	r2, r3, #8
 80087f6:	f8c8 2000 	str.w	r2, [r8]
 80087fa:	e9d3 8900 	ldrd	r8, r9, [r3]
 80087fe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008802:	9307      	str	r3, [sp, #28]
 8008804:	f8cd 8018 	str.w	r8, [sp, #24]
 8008808:	ee08 0a10 	vmov	s16, r0
 800880c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8008810:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008814:	4b9e      	ldr	r3, [pc, #632]	; (8008a90 <_printf_float+0x2d8>)
 8008816:	f04f 32ff 	mov.w	r2, #4294967295
 800881a:	f7f8 f987 	bl	8000b2c <__aeabi_dcmpun>
 800881e:	bb88      	cbnz	r0, 8008884 <_printf_float+0xcc>
 8008820:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008824:	4b9a      	ldr	r3, [pc, #616]	; (8008a90 <_printf_float+0x2d8>)
 8008826:	f04f 32ff 	mov.w	r2, #4294967295
 800882a:	f7f8 f961 	bl	8000af0 <__aeabi_dcmple>
 800882e:	bb48      	cbnz	r0, 8008884 <_printf_float+0xcc>
 8008830:	2200      	movs	r2, #0
 8008832:	2300      	movs	r3, #0
 8008834:	4640      	mov	r0, r8
 8008836:	4649      	mov	r1, r9
 8008838:	f7f8 f950 	bl	8000adc <__aeabi_dcmplt>
 800883c:	b110      	cbz	r0, 8008844 <_printf_float+0x8c>
 800883e:	232d      	movs	r3, #45	; 0x2d
 8008840:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008844:	4a93      	ldr	r2, [pc, #588]	; (8008a94 <_printf_float+0x2dc>)
 8008846:	4b94      	ldr	r3, [pc, #592]	; (8008a98 <_printf_float+0x2e0>)
 8008848:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800884c:	bf94      	ite	ls
 800884e:	4690      	movls	r8, r2
 8008850:	4698      	movhi	r8, r3
 8008852:	2303      	movs	r3, #3
 8008854:	6123      	str	r3, [r4, #16]
 8008856:	9b05      	ldr	r3, [sp, #20]
 8008858:	f023 0304 	bic.w	r3, r3, #4
 800885c:	6023      	str	r3, [r4, #0]
 800885e:	f04f 0900 	mov.w	r9, #0
 8008862:	9700      	str	r7, [sp, #0]
 8008864:	4633      	mov	r3, r6
 8008866:	aa0b      	add	r2, sp, #44	; 0x2c
 8008868:	4621      	mov	r1, r4
 800886a:	4628      	mov	r0, r5
 800886c:	f000 f9da 	bl	8008c24 <_printf_common>
 8008870:	3001      	adds	r0, #1
 8008872:	f040 8090 	bne.w	8008996 <_printf_float+0x1de>
 8008876:	f04f 30ff 	mov.w	r0, #4294967295
 800887a:	b00d      	add	sp, #52	; 0x34
 800887c:	ecbd 8b02 	vpop	{d8}
 8008880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008884:	4642      	mov	r2, r8
 8008886:	464b      	mov	r3, r9
 8008888:	4640      	mov	r0, r8
 800888a:	4649      	mov	r1, r9
 800888c:	f7f8 f94e 	bl	8000b2c <__aeabi_dcmpun>
 8008890:	b140      	cbz	r0, 80088a4 <_printf_float+0xec>
 8008892:	464b      	mov	r3, r9
 8008894:	2b00      	cmp	r3, #0
 8008896:	bfbc      	itt	lt
 8008898:	232d      	movlt	r3, #45	; 0x2d
 800889a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800889e:	4a7f      	ldr	r2, [pc, #508]	; (8008a9c <_printf_float+0x2e4>)
 80088a0:	4b7f      	ldr	r3, [pc, #508]	; (8008aa0 <_printf_float+0x2e8>)
 80088a2:	e7d1      	b.n	8008848 <_printf_float+0x90>
 80088a4:	6863      	ldr	r3, [r4, #4]
 80088a6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80088aa:	9206      	str	r2, [sp, #24]
 80088ac:	1c5a      	adds	r2, r3, #1
 80088ae:	d13f      	bne.n	8008930 <_printf_float+0x178>
 80088b0:	2306      	movs	r3, #6
 80088b2:	6063      	str	r3, [r4, #4]
 80088b4:	9b05      	ldr	r3, [sp, #20]
 80088b6:	6861      	ldr	r1, [r4, #4]
 80088b8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80088bc:	2300      	movs	r3, #0
 80088be:	9303      	str	r3, [sp, #12]
 80088c0:	ab0a      	add	r3, sp, #40	; 0x28
 80088c2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80088c6:	ab09      	add	r3, sp, #36	; 0x24
 80088c8:	ec49 8b10 	vmov	d0, r8, r9
 80088cc:	9300      	str	r3, [sp, #0]
 80088ce:	6022      	str	r2, [r4, #0]
 80088d0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80088d4:	4628      	mov	r0, r5
 80088d6:	f7ff fecf 	bl	8008678 <__cvt>
 80088da:	9b06      	ldr	r3, [sp, #24]
 80088dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80088de:	2b47      	cmp	r3, #71	; 0x47
 80088e0:	4680      	mov	r8, r0
 80088e2:	d108      	bne.n	80088f6 <_printf_float+0x13e>
 80088e4:	1cc8      	adds	r0, r1, #3
 80088e6:	db02      	blt.n	80088ee <_printf_float+0x136>
 80088e8:	6863      	ldr	r3, [r4, #4]
 80088ea:	4299      	cmp	r1, r3
 80088ec:	dd41      	ble.n	8008972 <_printf_float+0x1ba>
 80088ee:	f1ab 0302 	sub.w	r3, fp, #2
 80088f2:	fa5f fb83 	uxtb.w	fp, r3
 80088f6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80088fa:	d820      	bhi.n	800893e <_printf_float+0x186>
 80088fc:	3901      	subs	r1, #1
 80088fe:	465a      	mov	r2, fp
 8008900:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008904:	9109      	str	r1, [sp, #36]	; 0x24
 8008906:	f7ff ff19 	bl	800873c <__exponent>
 800890a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800890c:	1813      	adds	r3, r2, r0
 800890e:	2a01      	cmp	r2, #1
 8008910:	4681      	mov	r9, r0
 8008912:	6123      	str	r3, [r4, #16]
 8008914:	dc02      	bgt.n	800891c <_printf_float+0x164>
 8008916:	6822      	ldr	r2, [r4, #0]
 8008918:	07d2      	lsls	r2, r2, #31
 800891a:	d501      	bpl.n	8008920 <_printf_float+0x168>
 800891c:	3301      	adds	r3, #1
 800891e:	6123      	str	r3, [r4, #16]
 8008920:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008924:	2b00      	cmp	r3, #0
 8008926:	d09c      	beq.n	8008862 <_printf_float+0xaa>
 8008928:	232d      	movs	r3, #45	; 0x2d
 800892a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800892e:	e798      	b.n	8008862 <_printf_float+0xaa>
 8008930:	9a06      	ldr	r2, [sp, #24]
 8008932:	2a47      	cmp	r2, #71	; 0x47
 8008934:	d1be      	bne.n	80088b4 <_printf_float+0xfc>
 8008936:	2b00      	cmp	r3, #0
 8008938:	d1bc      	bne.n	80088b4 <_printf_float+0xfc>
 800893a:	2301      	movs	r3, #1
 800893c:	e7b9      	b.n	80088b2 <_printf_float+0xfa>
 800893e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008942:	d118      	bne.n	8008976 <_printf_float+0x1be>
 8008944:	2900      	cmp	r1, #0
 8008946:	6863      	ldr	r3, [r4, #4]
 8008948:	dd0b      	ble.n	8008962 <_printf_float+0x1aa>
 800894a:	6121      	str	r1, [r4, #16]
 800894c:	b913      	cbnz	r3, 8008954 <_printf_float+0x19c>
 800894e:	6822      	ldr	r2, [r4, #0]
 8008950:	07d0      	lsls	r0, r2, #31
 8008952:	d502      	bpl.n	800895a <_printf_float+0x1a2>
 8008954:	3301      	adds	r3, #1
 8008956:	440b      	add	r3, r1
 8008958:	6123      	str	r3, [r4, #16]
 800895a:	65a1      	str	r1, [r4, #88]	; 0x58
 800895c:	f04f 0900 	mov.w	r9, #0
 8008960:	e7de      	b.n	8008920 <_printf_float+0x168>
 8008962:	b913      	cbnz	r3, 800896a <_printf_float+0x1b2>
 8008964:	6822      	ldr	r2, [r4, #0]
 8008966:	07d2      	lsls	r2, r2, #31
 8008968:	d501      	bpl.n	800896e <_printf_float+0x1b6>
 800896a:	3302      	adds	r3, #2
 800896c:	e7f4      	b.n	8008958 <_printf_float+0x1a0>
 800896e:	2301      	movs	r3, #1
 8008970:	e7f2      	b.n	8008958 <_printf_float+0x1a0>
 8008972:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008976:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008978:	4299      	cmp	r1, r3
 800897a:	db05      	blt.n	8008988 <_printf_float+0x1d0>
 800897c:	6823      	ldr	r3, [r4, #0]
 800897e:	6121      	str	r1, [r4, #16]
 8008980:	07d8      	lsls	r0, r3, #31
 8008982:	d5ea      	bpl.n	800895a <_printf_float+0x1a2>
 8008984:	1c4b      	adds	r3, r1, #1
 8008986:	e7e7      	b.n	8008958 <_printf_float+0x1a0>
 8008988:	2900      	cmp	r1, #0
 800898a:	bfd4      	ite	le
 800898c:	f1c1 0202 	rsble	r2, r1, #2
 8008990:	2201      	movgt	r2, #1
 8008992:	4413      	add	r3, r2
 8008994:	e7e0      	b.n	8008958 <_printf_float+0x1a0>
 8008996:	6823      	ldr	r3, [r4, #0]
 8008998:	055a      	lsls	r2, r3, #21
 800899a:	d407      	bmi.n	80089ac <_printf_float+0x1f4>
 800899c:	6923      	ldr	r3, [r4, #16]
 800899e:	4642      	mov	r2, r8
 80089a0:	4631      	mov	r1, r6
 80089a2:	4628      	mov	r0, r5
 80089a4:	47b8      	blx	r7
 80089a6:	3001      	adds	r0, #1
 80089a8:	d12c      	bne.n	8008a04 <_printf_float+0x24c>
 80089aa:	e764      	b.n	8008876 <_printf_float+0xbe>
 80089ac:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80089b0:	f240 80e0 	bls.w	8008b74 <_printf_float+0x3bc>
 80089b4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80089b8:	2200      	movs	r2, #0
 80089ba:	2300      	movs	r3, #0
 80089bc:	f7f8 f884 	bl	8000ac8 <__aeabi_dcmpeq>
 80089c0:	2800      	cmp	r0, #0
 80089c2:	d034      	beq.n	8008a2e <_printf_float+0x276>
 80089c4:	4a37      	ldr	r2, [pc, #220]	; (8008aa4 <_printf_float+0x2ec>)
 80089c6:	2301      	movs	r3, #1
 80089c8:	4631      	mov	r1, r6
 80089ca:	4628      	mov	r0, r5
 80089cc:	47b8      	blx	r7
 80089ce:	3001      	adds	r0, #1
 80089d0:	f43f af51 	beq.w	8008876 <_printf_float+0xbe>
 80089d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80089d8:	429a      	cmp	r2, r3
 80089da:	db02      	blt.n	80089e2 <_printf_float+0x22a>
 80089dc:	6823      	ldr	r3, [r4, #0]
 80089de:	07d8      	lsls	r0, r3, #31
 80089e0:	d510      	bpl.n	8008a04 <_printf_float+0x24c>
 80089e2:	ee18 3a10 	vmov	r3, s16
 80089e6:	4652      	mov	r2, sl
 80089e8:	4631      	mov	r1, r6
 80089ea:	4628      	mov	r0, r5
 80089ec:	47b8      	blx	r7
 80089ee:	3001      	adds	r0, #1
 80089f0:	f43f af41 	beq.w	8008876 <_printf_float+0xbe>
 80089f4:	f04f 0800 	mov.w	r8, #0
 80089f8:	f104 091a 	add.w	r9, r4, #26
 80089fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089fe:	3b01      	subs	r3, #1
 8008a00:	4543      	cmp	r3, r8
 8008a02:	dc09      	bgt.n	8008a18 <_printf_float+0x260>
 8008a04:	6823      	ldr	r3, [r4, #0]
 8008a06:	079b      	lsls	r3, r3, #30
 8008a08:	f100 8107 	bmi.w	8008c1a <_printf_float+0x462>
 8008a0c:	68e0      	ldr	r0, [r4, #12]
 8008a0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a10:	4298      	cmp	r0, r3
 8008a12:	bfb8      	it	lt
 8008a14:	4618      	movlt	r0, r3
 8008a16:	e730      	b.n	800887a <_printf_float+0xc2>
 8008a18:	2301      	movs	r3, #1
 8008a1a:	464a      	mov	r2, r9
 8008a1c:	4631      	mov	r1, r6
 8008a1e:	4628      	mov	r0, r5
 8008a20:	47b8      	blx	r7
 8008a22:	3001      	adds	r0, #1
 8008a24:	f43f af27 	beq.w	8008876 <_printf_float+0xbe>
 8008a28:	f108 0801 	add.w	r8, r8, #1
 8008a2c:	e7e6      	b.n	80089fc <_printf_float+0x244>
 8008a2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	dc39      	bgt.n	8008aa8 <_printf_float+0x2f0>
 8008a34:	4a1b      	ldr	r2, [pc, #108]	; (8008aa4 <_printf_float+0x2ec>)
 8008a36:	2301      	movs	r3, #1
 8008a38:	4631      	mov	r1, r6
 8008a3a:	4628      	mov	r0, r5
 8008a3c:	47b8      	blx	r7
 8008a3e:	3001      	adds	r0, #1
 8008a40:	f43f af19 	beq.w	8008876 <_printf_float+0xbe>
 8008a44:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008a48:	4313      	orrs	r3, r2
 8008a4a:	d102      	bne.n	8008a52 <_printf_float+0x29a>
 8008a4c:	6823      	ldr	r3, [r4, #0]
 8008a4e:	07d9      	lsls	r1, r3, #31
 8008a50:	d5d8      	bpl.n	8008a04 <_printf_float+0x24c>
 8008a52:	ee18 3a10 	vmov	r3, s16
 8008a56:	4652      	mov	r2, sl
 8008a58:	4631      	mov	r1, r6
 8008a5a:	4628      	mov	r0, r5
 8008a5c:	47b8      	blx	r7
 8008a5e:	3001      	adds	r0, #1
 8008a60:	f43f af09 	beq.w	8008876 <_printf_float+0xbe>
 8008a64:	f04f 0900 	mov.w	r9, #0
 8008a68:	f104 0a1a 	add.w	sl, r4, #26
 8008a6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a6e:	425b      	negs	r3, r3
 8008a70:	454b      	cmp	r3, r9
 8008a72:	dc01      	bgt.n	8008a78 <_printf_float+0x2c0>
 8008a74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a76:	e792      	b.n	800899e <_printf_float+0x1e6>
 8008a78:	2301      	movs	r3, #1
 8008a7a:	4652      	mov	r2, sl
 8008a7c:	4631      	mov	r1, r6
 8008a7e:	4628      	mov	r0, r5
 8008a80:	47b8      	blx	r7
 8008a82:	3001      	adds	r0, #1
 8008a84:	f43f aef7 	beq.w	8008876 <_printf_float+0xbe>
 8008a88:	f109 0901 	add.w	r9, r9, #1
 8008a8c:	e7ee      	b.n	8008a6c <_printf_float+0x2b4>
 8008a8e:	bf00      	nop
 8008a90:	7fefffff 	.word	0x7fefffff
 8008a94:	0802cb2c 	.word	0x0802cb2c
 8008a98:	0802cb30 	.word	0x0802cb30
 8008a9c:	0802cb34 	.word	0x0802cb34
 8008aa0:	0802cb38 	.word	0x0802cb38
 8008aa4:	0802cb3c 	.word	0x0802cb3c
 8008aa8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008aaa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008aac:	429a      	cmp	r2, r3
 8008aae:	bfa8      	it	ge
 8008ab0:	461a      	movge	r2, r3
 8008ab2:	2a00      	cmp	r2, #0
 8008ab4:	4691      	mov	r9, r2
 8008ab6:	dc37      	bgt.n	8008b28 <_printf_float+0x370>
 8008ab8:	f04f 0b00 	mov.w	fp, #0
 8008abc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008ac0:	f104 021a 	add.w	r2, r4, #26
 8008ac4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008ac6:	9305      	str	r3, [sp, #20]
 8008ac8:	eba3 0309 	sub.w	r3, r3, r9
 8008acc:	455b      	cmp	r3, fp
 8008ace:	dc33      	bgt.n	8008b38 <_printf_float+0x380>
 8008ad0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008ad4:	429a      	cmp	r2, r3
 8008ad6:	db3b      	blt.n	8008b50 <_printf_float+0x398>
 8008ad8:	6823      	ldr	r3, [r4, #0]
 8008ada:	07da      	lsls	r2, r3, #31
 8008adc:	d438      	bmi.n	8008b50 <_printf_float+0x398>
 8008ade:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008ae2:	eba2 0903 	sub.w	r9, r2, r3
 8008ae6:	9b05      	ldr	r3, [sp, #20]
 8008ae8:	1ad2      	subs	r2, r2, r3
 8008aea:	4591      	cmp	r9, r2
 8008aec:	bfa8      	it	ge
 8008aee:	4691      	movge	r9, r2
 8008af0:	f1b9 0f00 	cmp.w	r9, #0
 8008af4:	dc35      	bgt.n	8008b62 <_printf_float+0x3aa>
 8008af6:	f04f 0800 	mov.w	r8, #0
 8008afa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008afe:	f104 0a1a 	add.w	sl, r4, #26
 8008b02:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008b06:	1a9b      	subs	r3, r3, r2
 8008b08:	eba3 0309 	sub.w	r3, r3, r9
 8008b0c:	4543      	cmp	r3, r8
 8008b0e:	f77f af79 	ble.w	8008a04 <_printf_float+0x24c>
 8008b12:	2301      	movs	r3, #1
 8008b14:	4652      	mov	r2, sl
 8008b16:	4631      	mov	r1, r6
 8008b18:	4628      	mov	r0, r5
 8008b1a:	47b8      	blx	r7
 8008b1c:	3001      	adds	r0, #1
 8008b1e:	f43f aeaa 	beq.w	8008876 <_printf_float+0xbe>
 8008b22:	f108 0801 	add.w	r8, r8, #1
 8008b26:	e7ec      	b.n	8008b02 <_printf_float+0x34a>
 8008b28:	4613      	mov	r3, r2
 8008b2a:	4631      	mov	r1, r6
 8008b2c:	4642      	mov	r2, r8
 8008b2e:	4628      	mov	r0, r5
 8008b30:	47b8      	blx	r7
 8008b32:	3001      	adds	r0, #1
 8008b34:	d1c0      	bne.n	8008ab8 <_printf_float+0x300>
 8008b36:	e69e      	b.n	8008876 <_printf_float+0xbe>
 8008b38:	2301      	movs	r3, #1
 8008b3a:	4631      	mov	r1, r6
 8008b3c:	4628      	mov	r0, r5
 8008b3e:	9205      	str	r2, [sp, #20]
 8008b40:	47b8      	blx	r7
 8008b42:	3001      	adds	r0, #1
 8008b44:	f43f ae97 	beq.w	8008876 <_printf_float+0xbe>
 8008b48:	9a05      	ldr	r2, [sp, #20]
 8008b4a:	f10b 0b01 	add.w	fp, fp, #1
 8008b4e:	e7b9      	b.n	8008ac4 <_printf_float+0x30c>
 8008b50:	ee18 3a10 	vmov	r3, s16
 8008b54:	4652      	mov	r2, sl
 8008b56:	4631      	mov	r1, r6
 8008b58:	4628      	mov	r0, r5
 8008b5a:	47b8      	blx	r7
 8008b5c:	3001      	adds	r0, #1
 8008b5e:	d1be      	bne.n	8008ade <_printf_float+0x326>
 8008b60:	e689      	b.n	8008876 <_printf_float+0xbe>
 8008b62:	9a05      	ldr	r2, [sp, #20]
 8008b64:	464b      	mov	r3, r9
 8008b66:	4442      	add	r2, r8
 8008b68:	4631      	mov	r1, r6
 8008b6a:	4628      	mov	r0, r5
 8008b6c:	47b8      	blx	r7
 8008b6e:	3001      	adds	r0, #1
 8008b70:	d1c1      	bne.n	8008af6 <_printf_float+0x33e>
 8008b72:	e680      	b.n	8008876 <_printf_float+0xbe>
 8008b74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008b76:	2a01      	cmp	r2, #1
 8008b78:	dc01      	bgt.n	8008b7e <_printf_float+0x3c6>
 8008b7a:	07db      	lsls	r3, r3, #31
 8008b7c:	d53a      	bpl.n	8008bf4 <_printf_float+0x43c>
 8008b7e:	2301      	movs	r3, #1
 8008b80:	4642      	mov	r2, r8
 8008b82:	4631      	mov	r1, r6
 8008b84:	4628      	mov	r0, r5
 8008b86:	47b8      	blx	r7
 8008b88:	3001      	adds	r0, #1
 8008b8a:	f43f ae74 	beq.w	8008876 <_printf_float+0xbe>
 8008b8e:	ee18 3a10 	vmov	r3, s16
 8008b92:	4652      	mov	r2, sl
 8008b94:	4631      	mov	r1, r6
 8008b96:	4628      	mov	r0, r5
 8008b98:	47b8      	blx	r7
 8008b9a:	3001      	adds	r0, #1
 8008b9c:	f43f ae6b 	beq.w	8008876 <_printf_float+0xbe>
 8008ba0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8008bac:	f7f7 ff8c 	bl	8000ac8 <__aeabi_dcmpeq>
 8008bb0:	b9d8      	cbnz	r0, 8008bea <_printf_float+0x432>
 8008bb2:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008bb6:	f108 0201 	add.w	r2, r8, #1
 8008bba:	4631      	mov	r1, r6
 8008bbc:	4628      	mov	r0, r5
 8008bbe:	47b8      	blx	r7
 8008bc0:	3001      	adds	r0, #1
 8008bc2:	d10e      	bne.n	8008be2 <_printf_float+0x42a>
 8008bc4:	e657      	b.n	8008876 <_printf_float+0xbe>
 8008bc6:	2301      	movs	r3, #1
 8008bc8:	4652      	mov	r2, sl
 8008bca:	4631      	mov	r1, r6
 8008bcc:	4628      	mov	r0, r5
 8008bce:	47b8      	blx	r7
 8008bd0:	3001      	adds	r0, #1
 8008bd2:	f43f ae50 	beq.w	8008876 <_printf_float+0xbe>
 8008bd6:	f108 0801 	add.w	r8, r8, #1
 8008bda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008bdc:	3b01      	subs	r3, #1
 8008bde:	4543      	cmp	r3, r8
 8008be0:	dcf1      	bgt.n	8008bc6 <_printf_float+0x40e>
 8008be2:	464b      	mov	r3, r9
 8008be4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008be8:	e6da      	b.n	80089a0 <_printf_float+0x1e8>
 8008bea:	f04f 0800 	mov.w	r8, #0
 8008bee:	f104 0a1a 	add.w	sl, r4, #26
 8008bf2:	e7f2      	b.n	8008bda <_printf_float+0x422>
 8008bf4:	2301      	movs	r3, #1
 8008bf6:	4642      	mov	r2, r8
 8008bf8:	e7df      	b.n	8008bba <_printf_float+0x402>
 8008bfa:	2301      	movs	r3, #1
 8008bfc:	464a      	mov	r2, r9
 8008bfe:	4631      	mov	r1, r6
 8008c00:	4628      	mov	r0, r5
 8008c02:	47b8      	blx	r7
 8008c04:	3001      	adds	r0, #1
 8008c06:	f43f ae36 	beq.w	8008876 <_printf_float+0xbe>
 8008c0a:	f108 0801 	add.w	r8, r8, #1
 8008c0e:	68e3      	ldr	r3, [r4, #12]
 8008c10:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008c12:	1a5b      	subs	r3, r3, r1
 8008c14:	4543      	cmp	r3, r8
 8008c16:	dcf0      	bgt.n	8008bfa <_printf_float+0x442>
 8008c18:	e6f8      	b.n	8008a0c <_printf_float+0x254>
 8008c1a:	f04f 0800 	mov.w	r8, #0
 8008c1e:	f104 0919 	add.w	r9, r4, #25
 8008c22:	e7f4      	b.n	8008c0e <_printf_float+0x456>

08008c24 <_printf_common>:
 8008c24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c28:	4616      	mov	r6, r2
 8008c2a:	4699      	mov	r9, r3
 8008c2c:	688a      	ldr	r2, [r1, #8]
 8008c2e:	690b      	ldr	r3, [r1, #16]
 8008c30:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008c34:	4293      	cmp	r3, r2
 8008c36:	bfb8      	it	lt
 8008c38:	4613      	movlt	r3, r2
 8008c3a:	6033      	str	r3, [r6, #0]
 8008c3c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008c40:	4607      	mov	r7, r0
 8008c42:	460c      	mov	r4, r1
 8008c44:	b10a      	cbz	r2, 8008c4a <_printf_common+0x26>
 8008c46:	3301      	adds	r3, #1
 8008c48:	6033      	str	r3, [r6, #0]
 8008c4a:	6823      	ldr	r3, [r4, #0]
 8008c4c:	0699      	lsls	r1, r3, #26
 8008c4e:	bf42      	ittt	mi
 8008c50:	6833      	ldrmi	r3, [r6, #0]
 8008c52:	3302      	addmi	r3, #2
 8008c54:	6033      	strmi	r3, [r6, #0]
 8008c56:	6825      	ldr	r5, [r4, #0]
 8008c58:	f015 0506 	ands.w	r5, r5, #6
 8008c5c:	d106      	bne.n	8008c6c <_printf_common+0x48>
 8008c5e:	f104 0a19 	add.w	sl, r4, #25
 8008c62:	68e3      	ldr	r3, [r4, #12]
 8008c64:	6832      	ldr	r2, [r6, #0]
 8008c66:	1a9b      	subs	r3, r3, r2
 8008c68:	42ab      	cmp	r3, r5
 8008c6a:	dc26      	bgt.n	8008cba <_printf_common+0x96>
 8008c6c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008c70:	1e13      	subs	r3, r2, #0
 8008c72:	6822      	ldr	r2, [r4, #0]
 8008c74:	bf18      	it	ne
 8008c76:	2301      	movne	r3, #1
 8008c78:	0692      	lsls	r2, r2, #26
 8008c7a:	d42b      	bmi.n	8008cd4 <_printf_common+0xb0>
 8008c7c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008c80:	4649      	mov	r1, r9
 8008c82:	4638      	mov	r0, r7
 8008c84:	47c0      	blx	r8
 8008c86:	3001      	adds	r0, #1
 8008c88:	d01e      	beq.n	8008cc8 <_printf_common+0xa4>
 8008c8a:	6823      	ldr	r3, [r4, #0]
 8008c8c:	6922      	ldr	r2, [r4, #16]
 8008c8e:	f003 0306 	and.w	r3, r3, #6
 8008c92:	2b04      	cmp	r3, #4
 8008c94:	bf02      	ittt	eq
 8008c96:	68e5      	ldreq	r5, [r4, #12]
 8008c98:	6833      	ldreq	r3, [r6, #0]
 8008c9a:	1aed      	subeq	r5, r5, r3
 8008c9c:	68a3      	ldr	r3, [r4, #8]
 8008c9e:	bf0c      	ite	eq
 8008ca0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008ca4:	2500      	movne	r5, #0
 8008ca6:	4293      	cmp	r3, r2
 8008ca8:	bfc4      	itt	gt
 8008caa:	1a9b      	subgt	r3, r3, r2
 8008cac:	18ed      	addgt	r5, r5, r3
 8008cae:	2600      	movs	r6, #0
 8008cb0:	341a      	adds	r4, #26
 8008cb2:	42b5      	cmp	r5, r6
 8008cb4:	d11a      	bne.n	8008cec <_printf_common+0xc8>
 8008cb6:	2000      	movs	r0, #0
 8008cb8:	e008      	b.n	8008ccc <_printf_common+0xa8>
 8008cba:	2301      	movs	r3, #1
 8008cbc:	4652      	mov	r2, sl
 8008cbe:	4649      	mov	r1, r9
 8008cc0:	4638      	mov	r0, r7
 8008cc2:	47c0      	blx	r8
 8008cc4:	3001      	adds	r0, #1
 8008cc6:	d103      	bne.n	8008cd0 <_printf_common+0xac>
 8008cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8008ccc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cd0:	3501      	adds	r5, #1
 8008cd2:	e7c6      	b.n	8008c62 <_printf_common+0x3e>
 8008cd4:	18e1      	adds	r1, r4, r3
 8008cd6:	1c5a      	adds	r2, r3, #1
 8008cd8:	2030      	movs	r0, #48	; 0x30
 8008cda:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008cde:	4422      	add	r2, r4
 8008ce0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008ce4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008ce8:	3302      	adds	r3, #2
 8008cea:	e7c7      	b.n	8008c7c <_printf_common+0x58>
 8008cec:	2301      	movs	r3, #1
 8008cee:	4622      	mov	r2, r4
 8008cf0:	4649      	mov	r1, r9
 8008cf2:	4638      	mov	r0, r7
 8008cf4:	47c0      	blx	r8
 8008cf6:	3001      	adds	r0, #1
 8008cf8:	d0e6      	beq.n	8008cc8 <_printf_common+0xa4>
 8008cfa:	3601      	adds	r6, #1
 8008cfc:	e7d9      	b.n	8008cb2 <_printf_common+0x8e>
	...

08008d00 <_printf_i>:
 8008d00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008d04:	7e0f      	ldrb	r7, [r1, #24]
 8008d06:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008d08:	2f78      	cmp	r7, #120	; 0x78
 8008d0a:	4691      	mov	r9, r2
 8008d0c:	4680      	mov	r8, r0
 8008d0e:	460c      	mov	r4, r1
 8008d10:	469a      	mov	sl, r3
 8008d12:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008d16:	d807      	bhi.n	8008d28 <_printf_i+0x28>
 8008d18:	2f62      	cmp	r7, #98	; 0x62
 8008d1a:	d80a      	bhi.n	8008d32 <_printf_i+0x32>
 8008d1c:	2f00      	cmp	r7, #0
 8008d1e:	f000 80d4 	beq.w	8008eca <_printf_i+0x1ca>
 8008d22:	2f58      	cmp	r7, #88	; 0x58
 8008d24:	f000 80c0 	beq.w	8008ea8 <_printf_i+0x1a8>
 8008d28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008d2c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008d30:	e03a      	b.n	8008da8 <_printf_i+0xa8>
 8008d32:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008d36:	2b15      	cmp	r3, #21
 8008d38:	d8f6      	bhi.n	8008d28 <_printf_i+0x28>
 8008d3a:	a101      	add	r1, pc, #4	; (adr r1, 8008d40 <_printf_i+0x40>)
 8008d3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008d40:	08008d99 	.word	0x08008d99
 8008d44:	08008dad 	.word	0x08008dad
 8008d48:	08008d29 	.word	0x08008d29
 8008d4c:	08008d29 	.word	0x08008d29
 8008d50:	08008d29 	.word	0x08008d29
 8008d54:	08008d29 	.word	0x08008d29
 8008d58:	08008dad 	.word	0x08008dad
 8008d5c:	08008d29 	.word	0x08008d29
 8008d60:	08008d29 	.word	0x08008d29
 8008d64:	08008d29 	.word	0x08008d29
 8008d68:	08008d29 	.word	0x08008d29
 8008d6c:	08008eb1 	.word	0x08008eb1
 8008d70:	08008dd9 	.word	0x08008dd9
 8008d74:	08008e6b 	.word	0x08008e6b
 8008d78:	08008d29 	.word	0x08008d29
 8008d7c:	08008d29 	.word	0x08008d29
 8008d80:	08008ed3 	.word	0x08008ed3
 8008d84:	08008d29 	.word	0x08008d29
 8008d88:	08008dd9 	.word	0x08008dd9
 8008d8c:	08008d29 	.word	0x08008d29
 8008d90:	08008d29 	.word	0x08008d29
 8008d94:	08008e73 	.word	0x08008e73
 8008d98:	682b      	ldr	r3, [r5, #0]
 8008d9a:	1d1a      	adds	r2, r3, #4
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	602a      	str	r2, [r5, #0]
 8008da0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008da4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008da8:	2301      	movs	r3, #1
 8008daa:	e09f      	b.n	8008eec <_printf_i+0x1ec>
 8008dac:	6820      	ldr	r0, [r4, #0]
 8008dae:	682b      	ldr	r3, [r5, #0]
 8008db0:	0607      	lsls	r7, r0, #24
 8008db2:	f103 0104 	add.w	r1, r3, #4
 8008db6:	6029      	str	r1, [r5, #0]
 8008db8:	d501      	bpl.n	8008dbe <_printf_i+0xbe>
 8008dba:	681e      	ldr	r6, [r3, #0]
 8008dbc:	e003      	b.n	8008dc6 <_printf_i+0xc6>
 8008dbe:	0646      	lsls	r6, r0, #25
 8008dc0:	d5fb      	bpl.n	8008dba <_printf_i+0xba>
 8008dc2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008dc6:	2e00      	cmp	r6, #0
 8008dc8:	da03      	bge.n	8008dd2 <_printf_i+0xd2>
 8008dca:	232d      	movs	r3, #45	; 0x2d
 8008dcc:	4276      	negs	r6, r6
 8008dce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008dd2:	485a      	ldr	r0, [pc, #360]	; (8008f3c <_printf_i+0x23c>)
 8008dd4:	230a      	movs	r3, #10
 8008dd6:	e012      	b.n	8008dfe <_printf_i+0xfe>
 8008dd8:	682b      	ldr	r3, [r5, #0]
 8008dda:	6820      	ldr	r0, [r4, #0]
 8008ddc:	1d19      	adds	r1, r3, #4
 8008dde:	6029      	str	r1, [r5, #0]
 8008de0:	0605      	lsls	r5, r0, #24
 8008de2:	d501      	bpl.n	8008de8 <_printf_i+0xe8>
 8008de4:	681e      	ldr	r6, [r3, #0]
 8008de6:	e002      	b.n	8008dee <_printf_i+0xee>
 8008de8:	0641      	lsls	r1, r0, #25
 8008dea:	d5fb      	bpl.n	8008de4 <_printf_i+0xe4>
 8008dec:	881e      	ldrh	r6, [r3, #0]
 8008dee:	4853      	ldr	r0, [pc, #332]	; (8008f3c <_printf_i+0x23c>)
 8008df0:	2f6f      	cmp	r7, #111	; 0x6f
 8008df2:	bf0c      	ite	eq
 8008df4:	2308      	moveq	r3, #8
 8008df6:	230a      	movne	r3, #10
 8008df8:	2100      	movs	r1, #0
 8008dfa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008dfe:	6865      	ldr	r5, [r4, #4]
 8008e00:	60a5      	str	r5, [r4, #8]
 8008e02:	2d00      	cmp	r5, #0
 8008e04:	bfa2      	ittt	ge
 8008e06:	6821      	ldrge	r1, [r4, #0]
 8008e08:	f021 0104 	bicge.w	r1, r1, #4
 8008e0c:	6021      	strge	r1, [r4, #0]
 8008e0e:	b90e      	cbnz	r6, 8008e14 <_printf_i+0x114>
 8008e10:	2d00      	cmp	r5, #0
 8008e12:	d04b      	beq.n	8008eac <_printf_i+0x1ac>
 8008e14:	4615      	mov	r5, r2
 8008e16:	fbb6 f1f3 	udiv	r1, r6, r3
 8008e1a:	fb03 6711 	mls	r7, r3, r1, r6
 8008e1e:	5dc7      	ldrb	r7, [r0, r7]
 8008e20:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008e24:	4637      	mov	r7, r6
 8008e26:	42bb      	cmp	r3, r7
 8008e28:	460e      	mov	r6, r1
 8008e2a:	d9f4      	bls.n	8008e16 <_printf_i+0x116>
 8008e2c:	2b08      	cmp	r3, #8
 8008e2e:	d10b      	bne.n	8008e48 <_printf_i+0x148>
 8008e30:	6823      	ldr	r3, [r4, #0]
 8008e32:	07de      	lsls	r6, r3, #31
 8008e34:	d508      	bpl.n	8008e48 <_printf_i+0x148>
 8008e36:	6923      	ldr	r3, [r4, #16]
 8008e38:	6861      	ldr	r1, [r4, #4]
 8008e3a:	4299      	cmp	r1, r3
 8008e3c:	bfde      	ittt	le
 8008e3e:	2330      	movle	r3, #48	; 0x30
 8008e40:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008e44:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008e48:	1b52      	subs	r2, r2, r5
 8008e4a:	6122      	str	r2, [r4, #16]
 8008e4c:	f8cd a000 	str.w	sl, [sp]
 8008e50:	464b      	mov	r3, r9
 8008e52:	aa03      	add	r2, sp, #12
 8008e54:	4621      	mov	r1, r4
 8008e56:	4640      	mov	r0, r8
 8008e58:	f7ff fee4 	bl	8008c24 <_printf_common>
 8008e5c:	3001      	adds	r0, #1
 8008e5e:	d14a      	bne.n	8008ef6 <_printf_i+0x1f6>
 8008e60:	f04f 30ff 	mov.w	r0, #4294967295
 8008e64:	b004      	add	sp, #16
 8008e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e6a:	6823      	ldr	r3, [r4, #0]
 8008e6c:	f043 0320 	orr.w	r3, r3, #32
 8008e70:	6023      	str	r3, [r4, #0]
 8008e72:	4833      	ldr	r0, [pc, #204]	; (8008f40 <_printf_i+0x240>)
 8008e74:	2778      	movs	r7, #120	; 0x78
 8008e76:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008e7a:	6823      	ldr	r3, [r4, #0]
 8008e7c:	6829      	ldr	r1, [r5, #0]
 8008e7e:	061f      	lsls	r7, r3, #24
 8008e80:	f851 6b04 	ldr.w	r6, [r1], #4
 8008e84:	d402      	bmi.n	8008e8c <_printf_i+0x18c>
 8008e86:	065f      	lsls	r7, r3, #25
 8008e88:	bf48      	it	mi
 8008e8a:	b2b6      	uxthmi	r6, r6
 8008e8c:	07df      	lsls	r7, r3, #31
 8008e8e:	bf48      	it	mi
 8008e90:	f043 0320 	orrmi.w	r3, r3, #32
 8008e94:	6029      	str	r1, [r5, #0]
 8008e96:	bf48      	it	mi
 8008e98:	6023      	strmi	r3, [r4, #0]
 8008e9a:	b91e      	cbnz	r6, 8008ea4 <_printf_i+0x1a4>
 8008e9c:	6823      	ldr	r3, [r4, #0]
 8008e9e:	f023 0320 	bic.w	r3, r3, #32
 8008ea2:	6023      	str	r3, [r4, #0]
 8008ea4:	2310      	movs	r3, #16
 8008ea6:	e7a7      	b.n	8008df8 <_printf_i+0xf8>
 8008ea8:	4824      	ldr	r0, [pc, #144]	; (8008f3c <_printf_i+0x23c>)
 8008eaa:	e7e4      	b.n	8008e76 <_printf_i+0x176>
 8008eac:	4615      	mov	r5, r2
 8008eae:	e7bd      	b.n	8008e2c <_printf_i+0x12c>
 8008eb0:	682b      	ldr	r3, [r5, #0]
 8008eb2:	6826      	ldr	r6, [r4, #0]
 8008eb4:	6961      	ldr	r1, [r4, #20]
 8008eb6:	1d18      	adds	r0, r3, #4
 8008eb8:	6028      	str	r0, [r5, #0]
 8008eba:	0635      	lsls	r5, r6, #24
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	d501      	bpl.n	8008ec4 <_printf_i+0x1c4>
 8008ec0:	6019      	str	r1, [r3, #0]
 8008ec2:	e002      	b.n	8008eca <_printf_i+0x1ca>
 8008ec4:	0670      	lsls	r0, r6, #25
 8008ec6:	d5fb      	bpl.n	8008ec0 <_printf_i+0x1c0>
 8008ec8:	8019      	strh	r1, [r3, #0]
 8008eca:	2300      	movs	r3, #0
 8008ecc:	6123      	str	r3, [r4, #16]
 8008ece:	4615      	mov	r5, r2
 8008ed0:	e7bc      	b.n	8008e4c <_printf_i+0x14c>
 8008ed2:	682b      	ldr	r3, [r5, #0]
 8008ed4:	1d1a      	adds	r2, r3, #4
 8008ed6:	602a      	str	r2, [r5, #0]
 8008ed8:	681d      	ldr	r5, [r3, #0]
 8008eda:	6862      	ldr	r2, [r4, #4]
 8008edc:	2100      	movs	r1, #0
 8008ede:	4628      	mov	r0, r5
 8008ee0:	f7f7 f976 	bl	80001d0 <memchr>
 8008ee4:	b108      	cbz	r0, 8008eea <_printf_i+0x1ea>
 8008ee6:	1b40      	subs	r0, r0, r5
 8008ee8:	6060      	str	r0, [r4, #4]
 8008eea:	6863      	ldr	r3, [r4, #4]
 8008eec:	6123      	str	r3, [r4, #16]
 8008eee:	2300      	movs	r3, #0
 8008ef0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ef4:	e7aa      	b.n	8008e4c <_printf_i+0x14c>
 8008ef6:	6923      	ldr	r3, [r4, #16]
 8008ef8:	462a      	mov	r2, r5
 8008efa:	4649      	mov	r1, r9
 8008efc:	4640      	mov	r0, r8
 8008efe:	47d0      	blx	sl
 8008f00:	3001      	adds	r0, #1
 8008f02:	d0ad      	beq.n	8008e60 <_printf_i+0x160>
 8008f04:	6823      	ldr	r3, [r4, #0]
 8008f06:	079b      	lsls	r3, r3, #30
 8008f08:	d413      	bmi.n	8008f32 <_printf_i+0x232>
 8008f0a:	68e0      	ldr	r0, [r4, #12]
 8008f0c:	9b03      	ldr	r3, [sp, #12]
 8008f0e:	4298      	cmp	r0, r3
 8008f10:	bfb8      	it	lt
 8008f12:	4618      	movlt	r0, r3
 8008f14:	e7a6      	b.n	8008e64 <_printf_i+0x164>
 8008f16:	2301      	movs	r3, #1
 8008f18:	4632      	mov	r2, r6
 8008f1a:	4649      	mov	r1, r9
 8008f1c:	4640      	mov	r0, r8
 8008f1e:	47d0      	blx	sl
 8008f20:	3001      	adds	r0, #1
 8008f22:	d09d      	beq.n	8008e60 <_printf_i+0x160>
 8008f24:	3501      	adds	r5, #1
 8008f26:	68e3      	ldr	r3, [r4, #12]
 8008f28:	9903      	ldr	r1, [sp, #12]
 8008f2a:	1a5b      	subs	r3, r3, r1
 8008f2c:	42ab      	cmp	r3, r5
 8008f2e:	dcf2      	bgt.n	8008f16 <_printf_i+0x216>
 8008f30:	e7eb      	b.n	8008f0a <_printf_i+0x20a>
 8008f32:	2500      	movs	r5, #0
 8008f34:	f104 0619 	add.w	r6, r4, #25
 8008f38:	e7f5      	b.n	8008f26 <_printf_i+0x226>
 8008f3a:	bf00      	nop
 8008f3c:	0802cb3e 	.word	0x0802cb3e
 8008f40:	0802cb4f 	.word	0x0802cb4f

08008f44 <std>:
 8008f44:	2300      	movs	r3, #0
 8008f46:	b510      	push	{r4, lr}
 8008f48:	4604      	mov	r4, r0
 8008f4a:	e9c0 3300 	strd	r3, r3, [r0]
 8008f4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008f52:	6083      	str	r3, [r0, #8]
 8008f54:	8181      	strh	r1, [r0, #12]
 8008f56:	6643      	str	r3, [r0, #100]	; 0x64
 8008f58:	81c2      	strh	r2, [r0, #14]
 8008f5a:	6183      	str	r3, [r0, #24]
 8008f5c:	4619      	mov	r1, r3
 8008f5e:	2208      	movs	r2, #8
 8008f60:	305c      	adds	r0, #92	; 0x5c
 8008f62:	f000 f9a9 	bl	80092b8 <memset>
 8008f66:	4b0d      	ldr	r3, [pc, #52]	; (8008f9c <std+0x58>)
 8008f68:	6263      	str	r3, [r4, #36]	; 0x24
 8008f6a:	4b0d      	ldr	r3, [pc, #52]	; (8008fa0 <std+0x5c>)
 8008f6c:	62a3      	str	r3, [r4, #40]	; 0x28
 8008f6e:	4b0d      	ldr	r3, [pc, #52]	; (8008fa4 <std+0x60>)
 8008f70:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008f72:	4b0d      	ldr	r3, [pc, #52]	; (8008fa8 <std+0x64>)
 8008f74:	6323      	str	r3, [r4, #48]	; 0x30
 8008f76:	4b0d      	ldr	r3, [pc, #52]	; (8008fac <std+0x68>)
 8008f78:	6224      	str	r4, [r4, #32]
 8008f7a:	429c      	cmp	r4, r3
 8008f7c:	d006      	beq.n	8008f8c <std+0x48>
 8008f7e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8008f82:	4294      	cmp	r4, r2
 8008f84:	d002      	beq.n	8008f8c <std+0x48>
 8008f86:	33d0      	adds	r3, #208	; 0xd0
 8008f88:	429c      	cmp	r4, r3
 8008f8a:	d105      	bne.n	8008f98 <std+0x54>
 8008f8c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008f90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f94:	f000 ba0c 	b.w	80093b0 <__retarget_lock_init_recursive>
 8008f98:	bd10      	pop	{r4, pc}
 8008f9a:	bf00      	nop
 8008f9c:	08009109 	.word	0x08009109
 8008fa0:	0800912b 	.word	0x0800912b
 8008fa4:	08009163 	.word	0x08009163
 8008fa8:	08009187 	.word	0x08009187
 8008fac:	20002d9c 	.word	0x20002d9c

08008fb0 <stdio_exit_handler>:
 8008fb0:	4a02      	ldr	r2, [pc, #8]	; (8008fbc <stdio_exit_handler+0xc>)
 8008fb2:	4903      	ldr	r1, [pc, #12]	; (8008fc0 <stdio_exit_handler+0x10>)
 8008fb4:	4803      	ldr	r0, [pc, #12]	; (8008fc4 <stdio_exit_handler+0x14>)
 8008fb6:	f000 b869 	b.w	800908c <_fwalk_sglue>
 8008fba:	bf00      	nop
 8008fbc:	20000018 	.word	0x20000018
 8008fc0:	0800b009 	.word	0x0800b009
 8008fc4:	20000024 	.word	0x20000024

08008fc8 <cleanup_stdio>:
 8008fc8:	6841      	ldr	r1, [r0, #4]
 8008fca:	4b0c      	ldr	r3, [pc, #48]	; (8008ffc <cleanup_stdio+0x34>)
 8008fcc:	4299      	cmp	r1, r3
 8008fce:	b510      	push	{r4, lr}
 8008fd0:	4604      	mov	r4, r0
 8008fd2:	d001      	beq.n	8008fd8 <cleanup_stdio+0x10>
 8008fd4:	f002 f818 	bl	800b008 <_fflush_r>
 8008fd8:	68a1      	ldr	r1, [r4, #8]
 8008fda:	4b09      	ldr	r3, [pc, #36]	; (8009000 <cleanup_stdio+0x38>)
 8008fdc:	4299      	cmp	r1, r3
 8008fde:	d002      	beq.n	8008fe6 <cleanup_stdio+0x1e>
 8008fe0:	4620      	mov	r0, r4
 8008fe2:	f002 f811 	bl	800b008 <_fflush_r>
 8008fe6:	68e1      	ldr	r1, [r4, #12]
 8008fe8:	4b06      	ldr	r3, [pc, #24]	; (8009004 <cleanup_stdio+0x3c>)
 8008fea:	4299      	cmp	r1, r3
 8008fec:	d004      	beq.n	8008ff8 <cleanup_stdio+0x30>
 8008fee:	4620      	mov	r0, r4
 8008ff0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ff4:	f002 b808 	b.w	800b008 <_fflush_r>
 8008ff8:	bd10      	pop	{r4, pc}
 8008ffa:	bf00      	nop
 8008ffc:	20002d9c 	.word	0x20002d9c
 8009000:	20002e04 	.word	0x20002e04
 8009004:	20002e6c 	.word	0x20002e6c

08009008 <global_stdio_init.part.0>:
 8009008:	b510      	push	{r4, lr}
 800900a:	4b0b      	ldr	r3, [pc, #44]	; (8009038 <global_stdio_init.part.0+0x30>)
 800900c:	4c0b      	ldr	r4, [pc, #44]	; (800903c <global_stdio_init.part.0+0x34>)
 800900e:	4a0c      	ldr	r2, [pc, #48]	; (8009040 <global_stdio_init.part.0+0x38>)
 8009010:	601a      	str	r2, [r3, #0]
 8009012:	4620      	mov	r0, r4
 8009014:	2200      	movs	r2, #0
 8009016:	2104      	movs	r1, #4
 8009018:	f7ff ff94 	bl	8008f44 <std>
 800901c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009020:	2201      	movs	r2, #1
 8009022:	2109      	movs	r1, #9
 8009024:	f7ff ff8e 	bl	8008f44 <std>
 8009028:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800902c:	2202      	movs	r2, #2
 800902e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009032:	2112      	movs	r1, #18
 8009034:	f7ff bf86 	b.w	8008f44 <std>
 8009038:	20002ed4 	.word	0x20002ed4
 800903c:	20002d9c 	.word	0x20002d9c
 8009040:	08008fb1 	.word	0x08008fb1

08009044 <__sfp_lock_acquire>:
 8009044:	4801      	ldr	r0, [pc, #4]	; (800904c <__sfp_lock_acquire+0x8>)
 8009046:	f000 b9b4 	b.w	80093b2 <__retarget_lock_acquire_recursive>
 800904a:	bf00      	nop
 800904c:	20002edd 	.word	0x20002edd

08009050 <__sfp_lock_release>:
 8009050:	4801      	ldr	r0, [pc, #4]	; (8009058 <__sfp_lock_release+0x8>)
 8009052:	f000 b9af 	b.w	80093b4 <__retarget_lock_release_recursive>
 8009056:	bf00      	nop
 8009058:	20002edd 	.word	0x20002edd

0800905c <__sinit>:
 800905c:	b510      	push	{r4, lr}
 800905e:	4604      	mov	r4, r0
 8009060:	f7ff fff0 	bl	8009044 <__sfp_lock_acquire>
 8009064:	6a23      	ldr	r3, [r4, #32]
 8009066:	b11b      	cbz	r3, 8009070 <__sinit+0x14>
 8009068:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800906c:	f7ff bff0 	b.w	8009050 <__sfp_lock_release>
 8009070:	4b04      	ldr	r3, [pc, #16]	; (8009084 <__sinit+0x28>)
 8009072:	6223      	str	r3, [r4, #32]
 8009074:	4b04      	ldr	r3, [pc, #16]	; (8009088 <__sinit+0x2c>)
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d1f5      	bne.n	8009068 <__sinit+0xc>
 800907c:	f7ff ffc4 	bl	8009008 <global_stdio_init.part.0>
 8009080:	e7f2      	b.n	8009068 <__sinit+0xc>
 8009082:	bf00      	nop
 8009084:	08008fc9 	.word	0x08008fc9
 8009088:	20002ed4 	.word	0x20002ed4

0800908c <_fwalk_sglue>:
 800908c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009090:	4607      	mov	r7, r0
 8009092:	4688      	mov	r8, r1
 8009094:	4614      	mov	r4, r2
 8009096:	2600      	movs	r6, #0
 8009098:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800909c:	f1b9 0901 	subs.w	r9, r9, #1
 80090a0:	d505      	bpl.n	80090ae <_fwalk_sglue+0x22>
 80090a2:	6824      	ldr	r4, [r4, #0]
 80090a4:	2c00      	cmp	r4, #0
 80090a6:	d1f7      	bne.n	8009098 <_fwalk_sglue+0xc>
 80090a8:	4630      	mov	r0, r6
 80090aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80090ae:	89ab      	ldrh	r3, [r5, #12]
 80090b0:	2b01      	cmp	r3, #1
 80090b2:	d907      	bls.n	80090c4 <_fwalk_sglue+0x38>
 80090b4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80090b8:	3301      	adds	r3, #1
 80090ba:	d003      	beq.n	80090c4 <_fwalk_sglue+0x38>
 80090bc:	4629      	mov	r1, r5
 80090be:	4638      	mov	r0, r7
 80090c0:	47c0      	blx	r8
 80090c2:	4306      	orrs	r6, r0
 80090c4:	3568      	adds	r5, #104	; 0x68
 80090c6:	e7e9      	b.n	800909c <_fwalk_sglue+0x10>

080090c8 <siprintf>:
 80090c8:	b40e      	push	{r1, r2, r3}
 80090ca:	b500      	push	{lr}
 80090cc:	b09c      	sub	sp, #112	; 0x70
 80090ce:	ab1d      	add	r3, sp, #116	; 0x74
 80090d0:	9002      	str	r0, [sp, #8]
 80090d2:	9006      	str	r0, [sp, #24]
 80090d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80090d8:	4809      	ldr	r0, [pc, #36]	; (8009100 <siprintf+0x38>)
 80090da:	9107      	str	r1, [sp, #28]
 80090dc:	9104      	str	r1, [sp, #16]
 80090de:	4909      	ldr	r1, [pc, #36]	; (8009104 <siprintf+0x3c>)
 80090e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80090e4:	9105      	str	r1, [sp, #20]
 80090e6:	6800      	ldr	r0, [r0, #0]
 80090e8:	9301      	str	r3, [sp, #4]
 80090ea:	a902      	add	r1, sp, #8
 80090ec:	f001 fcc4 	bl	800aa78 <_svfiprintf_r>
 80090f0:	9b02      	ldr	r3, [sp, #8]
 80090f2:	2200      	movs	r2, #0
 80090f4:	701a      	strb	r2, [r3, #0]
 80090f6:	b01c      	add	sp, #112	; 0x70
 80090f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80090fc:	b003      	add	sp, #12
 80090fe:	4770      	bx	lr
 8009100:	20000070 	.word	0x20000070
 8009104:	ffff0208 	.word	0xffff0208

08009108 <__sread>:
 8009108:	b510      	push	{r4, lr}
 800910a:	460c      	mov	r4, r1
 800910c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009110:	f000 f900 	bl	8009314 <_read_r>
 8009114:	2800      	cmp	r0, #0
 8009116:	bfab      	itete	ge
 8009118:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800911a:	89a3      	ldrhlt	r3, [r4, #12]
 800911c:	181b      	addge	r3, r3, r0
 800911e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009122:	bfac      	ite	ge
 8009124:	6563      	strge	r3, [r4, #84]	; 0x54
 8009126:	81a3      	strhlt	r3, [r4, #12]
 8009128:	bd10      	pop	{r4, pc}

0800912a <__swrite>:
 800912a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800912e:	461f      	mov	r7, r3
 8009130:	898b      	ldrh	r3, [r1, #12]
 8009132:	05db      	lsls	r3, r3, #23
 8009134:	4605      	mov	r5, r0
 8009136:	460c      	mov	r4, r1
 8009138:	4616      	mov	r6, r2
 800913a:	d505      	bpl.n	8009148 <__swrite+0x1e>
 800913c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009140:	2302      	movs	r3, #2
 8009142:	2200      	movs	r2, #0
 8009144:	f000 f8d4 	bl	80092f0 <_lseek_r>
 8009148:	89a3      	ldrh	r3, [r4, #12]
 800914a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800914e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009152:	81a3      	strh	r3, [r4, #12]
 8009154:	4632      	mov	r2, r6
 8009156:	463b      	mov	r3, r7
 8009158:	4628      	mov	r0, r5
 800915a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800915e:	f000 b8eb 	b.w	8009338 <_write_r>

08009162 <__sseek>:
 8009162:	b510      	push	{r4, lr}
 8009164:	460c      	mov	r4, r1
 8009166:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800916a:	f000 f8c1 	bl	80092f0 <_lseek_r>
 800916e:	1c43      	adds	r3, r0, #1
 8009170:	89a3      	ldrh	r3, [r4, #12]
 8009172:	bf15      	itete	ne
 8009174:	6560      	strne	r0, [r4, #84]	; 0x54
 8009176:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800917a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800917e:	81a3      	strheq	r3, [r4, #12]
 8009180:	bf18      	it	ne
 8009182:	81a3      	strhne	r3, [r4, #12]
 8009184:	bd10      	pop	{r4, pc}

08009186 <__sclose>:
 8009186:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800918a:	f000 b8a1 	b.w	80092d0 <_close_r>

0800918e <__swbuf_r>:
 800918e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009190:	460e      	mov	r6, r1
 8009192:	4614      	mov	r4, r2
 8009194:	4605      	mov	r5, r0
 8009196:	b118      	cbz	r0, 80091a0 <__swbuf_r+0x12>
 8009198:	6a03      	ldr	r3, [r0, #32]
 800919a:	b90b      	cbnz	r3, 80091a0 <__swbuf_r+0x12>
 800919c:	f7ff ff5e 	bl	800905c <__sinit>
 80091a0:	69a3      	ldr	r3, [r4, #24]
 80091a2:	60a3      	str	r3, [r4, #8]
 80091a4:	89a3      	ldrh	r3, [r4, #12]
 80091a6:	071a      	lsls	r2, r3, #28
 80091a8:	d525      	bpl.n	80091f6 <__swbuf_r+0x68>
 80091aa:	6923      	ldr	r3, [r4, #16]
 80091ac:	b31b      	cbz	r3, 80091f6 <__swbuf_r+0x68>
 80091ae:	6823      	ldr	r3, [r4, #0]
 80091b0:	6922      	ldr	r2, [r4, #16]
 80091b2:	1a98      	subs	r0, r3, r2
 80091b4:	6963      	ldr	r3, [r4, #20]
 80091b6:	b2f6      	uxtb	r6, r6
 80091b8:	4283      	cmp	r3, r0
 80091ba:	4637      	mov	r7, r6
 80091bc:	dc04      	bgt.n	80091c8 <__swbuf_r+0x3a>
 80091be:	4621      	mov	r1, r4
 80091c0:	4628      	mov	r0, r5
 80091c2:	f001 ff21 	bl	800b008 <_fflush_r>
 80091c6:	b9e0      	cbnz	r0, 8009202 <__swbuf_r+0x74>
 80091c8:	68a3      	ldr	r3, [r4, #8]
 80091ca:	3b01      	subs	r3, #1
 80091cc:	60a3      	str	r3, [r4, #8]
 80091ce:	6823      	ldr	r3, [r4, #0]
 80091d0:	1c5a      	adds	r2, r3, #1
 80091d2:	6022      	str	r2, [r4, #0]
 80091d4:	701e      	strb	r6, [r3, #0]
 80091d6:	6962      	ldr	r2, [r4, #20]
 80091d8:	1c43      	adds	r3, r0, #1
 80091da:	429a      	cmp	r2, r3
 80091dc:	d004      	beq.n	80091e8 <__swbuf_r+0x5a>
 80091de:	89a3      	ldrh	r3, [r4, #12]
 80091e0:	07db      	lsls	r3, r3, #31
 80091e2:	d506      	bpl.n	80091f2 <__swbuf_r+0x64>
 80091e4:	2e0a      	cmp	r6, #10
 80091e6:	d104      	bne.n	80091f2 <__swbuf_r+0x64>
 80091e8:	4621      	mov	r1, r4
 80091ea:	4628      	mov	r0, r5
 80091ec:	f001 ff0c 	bl	800b008 <_fflush_r>
 80091f0:	b938      	cbnz	r0, 8009202 <__swbuf_r+0x74>
 80091f2:	4638      	mov	r0, r7
 80091f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80091f6:	4621      	mov	r1, r4
 80091f8:	4628      	mov	r0, r5
 80091fa:	f000 f805 	bl	8009208 <__swsetup_r>
 80091fe:	2800      	cmp	r0, #0
 8009200:	d0d5      	beq.n	80091ae <__swbuf_r+0x20>
 8009202:	f04f 37ff 	mov.w	r7, #4294967295
 8009206:	e7f4      	b.n	80091f2 <__swbuf_r+0x64>

08009208 <__swsetup_r>:
 8009208:	b538      	push	{r3, r4, r5, lr}
 800920a:	4b2a      	ldr	r3, [pc, #168]	; (80092b4 <__swsetup_r+0xac>)
 800920c:	4605      	mov	r5, r0
 800920e:	6818      	ldr	r0, [r3, #0]
 8009210:	460c      	mov	r4, r1
 8009212:	b118      	cbz	r0, 800921c <__swsetup_r+0x14>
 8009214:	6a03      	ldr	r3, [r0, #32]
 8009216:	b90b      	cbnz	r3, 800921c <__swsetup_r+0x14>
 8009218:	f7ff ff20 	bl	800905c <__sinit>
 800921c:	89a3      	ldrh	r3, [r4, #12]
 800921e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009222:	0718      	lsls	r0, r3, #28
 8009224:	d422      	bmi.n	800926c <__swsetup_r+0x64>
 8009226:	06d9      	lsls	r1, r3, #27
 8009228:	d407      	bmi.n	800923a <__swsetup_r+0x32>
 800922a:	2309      	movs	r3, #9
 800922c:	602b      	str	r3, [r5, #0]
 800922e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009232:	81a3      	strh	r3, [r4, #12]
 8009234:	f04f 30ff 	mov.w	r0, #4294967295
 8009238:	e034      	b.n	80092a4 <__swsetup_r+0x9c>
 800923a:	0758      	lsls	r0, r3, #29
 800923c:	d512      	bpl.n	8009264 <__swsetup_r+0x5c>
 800923e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009240:	b141      	cbz	r1, 8009254 <__swsetup_r+0x4c>
 8009242:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009246:	4299      	cmp	r1, r3
 8009248:	d002      	beq.n	8009250 <__swsetup_r+0x48>
 800924a:	4628      	mov	r0, r5
 800924c:	f000 ff3e 	bl	800a0cc <_free_r>
 8009250:	2300      	movs	r3, #0
 8009252:	6363      	str	r3, [r4, #52]	; 0x34
 8009254:	89a3      	ldrh	r3, [r4, #12]
 8009256:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800925a:	81a3      	strh	r3, [r4, #12]
 800925c:	2300      	movs	r3, #0
 800925e:	6063      	str	r3, [r4, #4]
 8009260:	6923      	ldr	r3, [r4, #16]
 8009262:	6023      	str	r3, [r4, #0]
 8009264:	89a3      	ldrh	r3, [r4, #12]
 8009266:	f043 0308 	orr.w	r3, r3, #8
 800926a:	81a3      	strh	r3, [r4, #12]
 800926c:	6923      	ldr	r3, [r4, #16]
 800926e:	b94b      	cbnz	r3, 8009284 <__swsetup_r+0x7c>
 8009270:	89a3      	ldrh	r3, [r4, #12]
 8009272:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009276:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800927a:	d003      	beq.n	8009284 <__swsetup_r+0x7c>
 800927c:	4621      	mov	r1, r4
 800927e:	4628      	mov	r0, r5
 8009280:	f001 ff10 	bl	800b0a4 <__smakebuf_r>
 8009284:	89a0      	ldrh	r0, [r4, #12]
 8009286:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800928a:	f010 0301 	ands.w	r3, r0, #1
 800928e:	d00a      	beq.n	80092a6 <__swsetup_r+0x9e>
 8009290:	2300      	movs	r3, #0
 8009292:	60a3      	str	r3, [r4, #8]
 8009294:	6963      	ldr	r3, [r4, #20]
 8009296:	425b      	negs	r3, r3
 8009298:	61a3      	str	r3, [r4, #24]
 800929a:	6923      	ldr	r3, [r4, #16]
 800929c:	b943      	cbnz	r3, 80092b0 <__swsetup_r+0xa8>
 800929e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80092a2:	d1c4      	bne.n	800922e <__swsetup_r+0x26>
 80092a4:	bd38      	pop	{r3, r4, r5, pc}
 80092a6:	0781      	lsls	r1, r0, #30
 80092a8:	bf58      	it	pl
 80092aa:	6963      	ldrpl	r3, [r4, #20]
 80092ac:	60a3      	str	r3, [r4, #8]
 80092ae:	e7f4      	b.n	800929a <__swsetup_r+0x92>
 80092b0:	2000      	movs	r0, #0
 80092b2:	e7f7      	b.n	80092a4 <__swsetup_r+0x9c>
 80092b4:	20000070 	.word	0x20000070

080092b8 <memset>:
 80092b8:	4402      	add	r2, r0
 80092ba:	4603      	mov	r3, r0
 80092bc:	4293      	cmp	r3, r2
 80092be:	d100      	bne.n	80092c2 <memset+0xa>
 80092c0:	4770      	bx	lr
 80092c2:	f803 1b01 	strb.w	r1, [r3], #1
 80092c6:	e7f9      	b.n	80092bc <memset+0x4>

080092c8 <_localeconv_r>:
 80092c8:	4800      	ldr	r0, [pc, #0]	; (80092cc <_localeconv_r+0x4>)
 80092ca:	4770      	bx	lr
 80092cc:	20000164 	.word	0x20000164

080092d0 <_close_r>:
 80092d0:	b538      	push	{r3, r4, r5, lr}
 80092d2:	4d06      	ldr	r5, [pc, #24]	; (80092ec <_close_r+0x1c>)
 80092d4:	2300      	movs	r3, #0
 80092d6:	4604      	mov	r4, r0
 80092d8:	4608      	mov	r0, r1
 80092da:	602b      	str	r3, [r5, #0]
 80092dc:	f7f9 ff0d 	bl	80030fa <_close>
 80092e0:	1c43      	adds	r3, r0, #1
 80092e2:	d102      	bne.n	80092ea <_close_r+0x1a>
 80092e4:	682b      	ldr	r3, [r5, #0]
 80092e6:	b103      	cbz	r3, 80092ea <_close_r+0x1a>
 80092e8:	6023      	str	r3, [r4, #0]
 80092ea:	bd38      	pop	{r3, r4, r5, pc}
 80092ec:	20002ed8 	.word	0x20002ed8

080092f0 <_lseek_r>:
 80092f0:	b538      	push	{r3, r4, r5, lr}
 80092f2:	4d07      	ldr	r5, [pc, #28]	; (8009310 <_lseek_r+0x20>)
 80092f4:	4604      	mov	r4, r0
 80092f6:	4608      	mov	r0, r1
 80092f8:	4611      	mov	r1, r2
 80092fa:	2200      	movs	r2, #0
 80092fc:	602a      	str	r2, [r5, #0]
 80092fe:	461a      	mov	r2, r3
 8009300:	f7f9 ff22 	bl	8003148 <_lseek>
 8009304:	1c43      	adds	r3, r0, #1
 8009306:	d102      	bne.n	800930e <_lseek_r+0x1e>
 8009308:	682b      	ldr	r3, [r5, #0]
 800930a:	b103      	cbz	r3, 800930e <_lseek_r+0x1e>
 800930c:	6023      	str	r3, [r4, #0]
 800930e:	bd38      	pop	{r3, r4, r5, pc}
 8009310:	20002ed8 	.word	0x20002ed8

08009314 <_read_r>:
 8009314:	b538      	push	{r3, r4, r5, lr}
 8009316:	4d07      	ldr	r5, [pc, #28]	; (8009334 <_read_r+0x20>)
 8009318:	4604      	mov	r4, r0
 800931a:	4608      	mov	r0, r1
 800931c:	4611      	mov	r1, r2
 800931e:	2200      	movs	r2, #0
 8009320:	602a      	str	r2, [r5, #0]
 8009322:	461a      	mov	r2, r3
 8009324:	f7f9 feb0 	bl	8003088 <_read>
 8009328:	1c43      	adds	r3, r0, #1
 800932a:	d102      	bne.n	8009332 <_read_r+0x1e>
 800932c:	682b      	ldr	r3, [r5, #0]
 800932e:	b103      	cbz	r3, 8009332 <_read_r+0x1e>
 8009330:	6023      	str	r3, [r4, #0]
 8009332:	bd38      	pop	{r3, r4, r5, pc}
 8009334:	20002ed8 	.word	0x20002ed8

08009338 <_write_r>:
 8009338:	b538      	push	{r3, r4, r5, lr}
 800933a:	4d07      	ldr	r5, [pc, #28]	; (8009358 <_write_r+0x20>)
 800933c:	4604      	mov	r4, r0
 800933e:	4608      	mov	r0, r1
 8009340:	4611      	mov	r1, r2
 8009342:	2200      	movs	r2, #0
 8009344:	602a      	str	r2, [r5, #0]
 8009346:	461a      	mov	r2, r3
 8009348:	f7f9 febb 	bl	80030c2 <_write>
 800934c:	1c43      	adds	r3, r0, #1
 800934e:	d102      	bne.n	8009356 <_write_r+0x1e>
 8009350:	682b      	ldr	r3, [r5, #0]
 8009352:	b103      	cbz	r3, 8009356 <_write_r+0x1e>
 8009354:	6023      	str	r3, [r4, #0]
 8009356:	bd38      	pop	{r3, r4, r5, pc}
 8009358:	20002ed8 	.word	0x20002ed8

0800935c <__errno>:
 800935c:	4b01      	ldr	r3, [pc, #4]	; (8009364 <__errno+0x8>)
 800935e:	6818      	ldr	r0, [r3, #0]
 8009360:	4770      	bx	lr
 8009362:	bf00      	nop
 8009364:	20000070 	.word	0x20000070

08009368 <__libc_init_array>:
 8009368:	b570      	push	{r4, r5, r6, lr}
 800936a:	4d0d      	ldr	r5, [pc, #52]	; (80093a0 <__libc_init_array+0x38>)
 800936c:	4c0d      	ldr	r4, [pc, #52]	; (80093a4 <__libc_init_array+0x3c>)
 800936e:	1b64      	subs	r4, r4, r5
 8009370:	10a4      	asrs	r4, r4, #2
 8009372:	2600      	movs	r6, #0
 8009374:	42a6      	cmp	r6, r4
 8009376:	d109      	bne.n	800938c <__libc_init_array+0x24>
 8009378:	4d0b      	ldr	r5, [pc, #44]	; (80093a8 <__libc_init_array+0x40>)
 800937a:	4c0c      	ldr	r4, [pc, #48]	; (80093ac <__libc_init_array+0x44>)
 800937c:	f002 f802 	bl	800b384 <_init>
 8009380:	1b64      	subs	r4, r4, r5
 8009382:	10a4      	asrs	r4, r4, #2
 8009384:	2600      	movs	r6, #0
 8009386:	42a6      	cmp	r6, r4
 8009388:	d105      	bne.n	8009396 <__libc_init_array+0x2e>
 800938a:	bd70      	pop	{r4, r5, r6, pc}
 800938c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009390:	4798      	blx	r3
 8009392:	3601      	adds	r6, #1
 8009394:	e7ee      	b.n	8009374 <__libc_init_array+0xc>
 8009396:	f855 3b04 	ldr.w	r3, [r5], #4
 800939a:	4798      	blx	r3
 800939c:	3601      	adds	r6, #1
 800939e:	e7f2      	b.n	8009386 <__libc_init_array+0x1e>
 80093a0:	0802cea4 	.word	0x0802cea4
 80093a4:	0802cea4 	.word	0x0802cea4
 80093a8:	0802cea4 	.word	0x0802cea4
 80093ac:	0802cea8 	.word	0x0802cea8

080093b0 <__retarget_lock_init_recursive>:
 80093b0:	4770      	bx	lr

080093b2 <__retarget_lock_acquire_recursive>:
 80093b2:	4770      	bx	lr

080093b4 <__retarget_lock_release_recursive>:
 80093b4:	4770      	bx	lr

080093b6 <memcpy>:
 80093b6:	440a      	add	r2, r1
 80093b8:	4291      	cmp	r1, r2
 80093ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80093be:	d100      	bne.n	80093c2 <memcpy+0xc>
 80093c0:	4770      	bx	lr
 80093c2:	b510      	push	{r4, lr}
 80093c4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80093c8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80093cc:	4291      	cmp	r1, r2
 80093ce:	d1f9      	bne.n	80093c4 <memcpy+0xe>
 80093d0:	bd10      	pop	{r4, pc}

080093d2 <quorem>:
 80093d2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093d6:	6903      	ldr	r3, [r0, #16]
 80093d8:	690c      	ldr	r4, [r1, #16]
 80093da:	42a3      	cmp	r3, r4
 80093dc:	4607      	mov	r7, r0
 80093de:	db7e      	blt.n	80094de <quorem+0x10c>
 80093e0:	3c01      	subs	r4, #1
 80093e2:	f101 0814 	add.w	r8, r1, #20
 80093e6:	f100 0514 	add.w	r5, r0, #20
 80093ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80093ee:	9301      	str	r3, [sp, #4]
 80093f0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80093f4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80093f8:	3301      	adds	r3, #1
 80093fa:	429a      	cmp	r2, r3
 80093fc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009400:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009404:	fbb2 f6f3 	udiv	r6, r2, r3
 8009408:	d331      	bcc.n	800946e <quorem+0x9c>
 800940a:	f04f 0e00 	mov.w	lr, #0
 800940e:	4640      	mov	r0, r8
 8009410:	46ac      	mov	ip, r5
 8009412:	46f2      	mov	sl, lr
 8009414:	f850 2b04 	ldr.w	r2, [r0], #4
 8009418:	b293      	uxth	r3, r2
 800941a:	fb06 e303 	mla	r3, r6, r3, lr
 800941e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009422:	0c1a      	lsrs	r2, r3, #16
 8009424:	b29b      	uxth	r3, r3
 8009426:	ebaa 0303 	sub.w	r3, sl, r3
 800942a:	f8dc a000 	ldr.w	sl, [ip]
 800942e:	fa13 f38a 	uxtah	r3, r3, sl
 8009432:	fb06 220e 	mla	r2, r6, lr, r2
 8009436:	9300      	str	r3, [sp, #0]
 8009438:	9b00      	ldr	r3, [sp, #0]
 800943a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800943e:	b292      	uxth	r2, r2
 8009440:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009444:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009448:	f8bd 3000 	ldrh.w	r3, [sp]
 800944c:	4581      	cmp	r9, r0
 800944e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009452:	f84c 3b04 	str.w	r3, [ip], #4
 8009456:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800945a:	d2db      	bcs.n	8009414 <quorem+0x42>
 800945c:	f855 300b 	ldr.w	r3, [r5, fp]
 8009460:	b92b      	cbnz	r3, 800946e <quorem+0x9c>
 8009462:	9b01      	ldr	r3, [sp, #4]
 8009464:	3b04      	subs	r3, #4
 8009466:	429d      	cmp	r5, r3
 8009468:	461a      	mov	r2, r3
 800946a:	d32c      	bcc.n	80094c6 <quorem+0xf4>
 800946c:	613c      	str	r4, [r7, #16]
 800946e:	4638      	mov	r0, r7
 8009470:	f001 f9a8 	bl	800a7c4 <__mcmp>
 8009474:	2800      	cmp	r0, #0
 8009476:	db22      	blt.n	80094be <quorem+0xec>
 8009478:	3601      	adds	r6, #1
 800947a:	4629      	mov	r1, r5
 800947c:	2000      	movs	r0, #0
 800947e:	f858 2b04 	ldr.w	r2, [r8], #4
 8009482:	f8d1 c000 	ldr.w	ip, [r1]
 8009486:	b293      	uxth	r3, r2
 8009488:	1ac3      	subs	r3, r0, r3
 800948a:	0c12      	lsrs	r2, r2, #16
 800948c:	fa13 f38c 	uxtah	r3, r3, ip
 8009490:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8009494:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009498:	b29b      	uxth	r3, r3
 800949a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800949e:	45c1      	cmp	r9, r8
 80094a0:	f841 3b04 	str.w	r3, [r1], #4
 80094a4:	ea4f 4022 	mov.w	r0, r2, asr #16
 80094a8:	d2e9      	bcs.n	800947e <quorem+0xac>
 80094aa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80094ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80094b2:	b922      	cbnz	r2, 80094be <quorem+0xec>
 80094b4:	3b04      	subs	r3, #4
 80094b6:	429d      	cmp	r5, r3
 80094b8:	461a      	mov	r2, r3
 80094ba:	d30a      	bcc.n	80094d2 <quorem+0x100>
 80094bc:	613c      	str	r4, [r7, #16]
 80094be:	4630      	mov	r0, r6
 80094c0:	b003      	add	sp, #12
 80094c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094c6:	6812      	ldr	r2, [r2, #0]
 80094c8:	3b04      	subs	r3, #4
 80094ca:	2a00      	cmp	r2, #0
 80094cc:	d1ce      	bne.n	800946c <quorem+0x9a>
 80094ce:	3c01      	subs	r4, #1
 80094d0:	e7c9      	b.n	8009466 <quorem+0x94>
 80094d2:	6812      	ldr	r2, [r2, #0]
 80094d4:	3b04      	subs	r3, #4
 80094d6:	2a00      	cmp	r2, #0
 80094d8:	d1f0      	bne.n	80094bc <quorem+0xea>
 80094da:	3c01      	subs	r4, #1
 80094dc:	e7eb      	b.n	80094b6 <quorem+0xe4>
 80094de:	2000      	movs	r0, #0
 80094e0:	e7ee      	b.n	80094c0 <quorem+0xee>
 80094e2:	0000      	movs	r0, r0
 80094e4:	0000      	movs	r0, r0
	...

080094e8 <_dtoa_r>:
 80094e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094ec:	ed2d 8b04 	vpush	{d8-d9}
 80094f0:	69c5      	ldr	r5, [r0, #28]
 80094f2:	b093      	sub	sp, #76	; 0x4c
 80094f4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80094f8:	ec57 6b10 	vmov	r6, r7, d0
 80094fc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009500:	9107      	str	r1, [sp, #28]
 8009502:	4604      	mov	r4, r0
 8009504:	920a      	str	r2, [sp, #40]	; 0x28
 8009506:	930d      	str	r3, [sp, #52]	; 0x34
 8009508:	b975      	cbnz	r5, 8009528 <_dtoa_r+0x40>
 800950a:	2010      	movs	r0, #16
 800950c:	f000 fe2a 	bl	800a164 <malloc>
 8009510:	4602      	mov	r2, r0
 8009512:	61e0      	str	r0, [r4, #28]
 8009514:	b920      	cbnz	r0, 8009520 <_dtoa_r+0x38>
 8009516:	4bae      	ldr	r3, [pc, #696]	; (80097d0 <_dtoa_r+0x2e8>)
 8009518:	21ef      	movs	r1, #239	; 0xef
 800951a:	48ae      	ldr	r0, [pc, #696]	; (80097d4 <_dtoa_r+0x2ec>)
 800951c:	f001 fe4a 	bl	800b1b4 <__assert_func>
 8009520:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009524:	6005      	str	r5, [r0, #0]
 8009526:	60c5      	str	r5, [r0, #12]
 8009528:	69e3      	ldr	r3, [r4, #28]
 800952a:	6819      	ldr	r1, [r3, #0]
 800952c:	b151      	cbz	r1, 8009544 <_dtoa_r+0x5c>
 800952e:	685a      	ldr	r2, [r3, #4]
 8009530:	604a      	str	r2, [r1, #4]
 8009532:	2301      	movs	r3, #1
 8009534:	4093      	lsls	r3, r2
 8009536:	608b      	str	r3, [r1, #8]
 8009538:	4620      	mov	r0, r4
 800953a:	f000 ff07 	bl	800a34c <_Bfree>
 800953e:	69e3      	ldr	r3, [r4, #28]
 8009540:	2200      	movs	r2, #0
 8009542:	601a      	str	r2, [r3, #0]
 8009544:	1e3b      	subs	r3, r7, #0
 8009546:	bfbb      	ittet	lt
 8009548:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800954c:	9303      	strlt	r3, [sp, #12]
 800954e:	2300      	movge	r3, #0
 8009550:	2201      	movlt	r2, #1
 8009552:	bfac      	ite	ge
 8009554:	f8c8 3000 	strge.w	r3, [r8]
 8009558:	f8c8 2000 	strlt.w	r2, [r8]
 800955c:	4b9e      	ldr	r3, [pc, #632]	; (80097d8 <_dtoa_r+0x2f0>)
 800955e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8009562:	ea33 0308 	bics.w	r3, r3, r8
 8009566:	d11b      	bne.n	80095a0 <_dtoa_r+0xb8>
 8009568:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800956a:	f242 730f 	movw	r3, #9999	; 0x270f
 800956e:	6013      	str	r3, [r2, #0]
 8009570:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8009574:	4333      	orrs	r3, r6
 8009576:	f000 8593 	beq.w	800a0a0 <_dtoa_r+0xbb8>
 800957a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800957c:	b963      	cbnz	r3, 8009598 <_dtoa_r+0xb0>
 800957e:	4b97      	ldr	r3, [pc, #604]	; (80097dc <_dtoa_r+0x2f4>)
 8009580:	e027      	b.n	80095d2 <_dtoa_r+0xea>
 8009582:	4b97      	ldr	r3, [pc, #604]	; (80097e0 <_dtoa_r+0x2f8>)
 8009584:	9300      	str	r3, [sp, #0]
 8009586:	3308      	adds	r3, #8
 8009588:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800958a:	6013      	str	r3, [r2, #0]
 800958c:	9800      	ldr	r0, [sp, #0]
 800958e:	b013      	add	sp, #76	; 0x4c
 8009590:	ecbd 8b04 	vpop	{d8-d9}
 8009594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009598:	4b90      	ldr	r3, [pc, #576]	; (80097dc <_dtoa_r+0x2f4>)
 800959a:	9300      	str	r3, [sp, #0]
 800959c:	3303      	adds	r3, #3
 800959e:	e7f3      	b.n	8009588 <_dtoa_r+0xa0>
 80095a0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80095a4:	2200      	movs	r2, #0
 80095a6:	ec51 0b17 	vmov	r0, r1, d7
 80095aa:	eeb0 8a47 	vmov.f32	s16, s14
 80095ae:	eef0 8a67 	vmov.f32	s17, s15
 80095b2:	2300      	movs	r3, #0
 80095b4:	f7f7 fa88 	bl	8000ac8 <__aeabi_dcmpeq>
 80095b8:	4681      	mov	r9, r0
 80095ba:	b160      	cbz	r0, 80095d6 <_dtoa_r+0xee>
 80095bc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80095be:	2301      	movs	r3, #1
 80095c0:	6013      	str	r3, [r2, #0]
 80095c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	f000 8568 	beq.w	800a09a <_dtoa_r+0xbb2>
 80095ca:	4b86      	ldr	r3, [pc, #536]	; (80097e4 <_dtoa_r+0x2fc>)
 80095cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80095ce:	6013      	str	r3, [r2, #0]
 80095d0:	3b01      	subs	r3, #1
 80095d2:	9300      	str	r3, [sp, #0]
 80095d4:	e7da      	b.n	800958c <_dtoa_r+0xa4>
 80095d6:	aa10      	add	r2, sp, #64	; 0x40
 80095d8:	a911      	add	r1, sp, #68	; 0x44
 80095da:	4620      	mov	r0, r4
 80095dc:	eeb0 0a48 	vmov.f32	s0, s16
 80095e0:	eef0 0a68 	vmov.f32	s1, s17
 80095e4:	f001 f994 	bl	800a910 <__d2b>
 80095e8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80095ec:	4682      	mov	sl, r0
 80095ee:	2d00      	cmp	r5, #0
 80095f0:	d07f      	beq.n	80096f2 <_dtoa_r+0x20a>
 80095f2:	ee18 3a90 	vmov	r3, s17
 80095f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80095fa:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80095fe:	ec51 0b18 	vmov	r0, r1, d8
 8009602:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009606:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800960a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800960e:	4619      	mov	r1, r3
 8009610:	2200      	movs	r2, #0
 8009612:	4b75      	ldr	r3, [pc, #468]	; (80097e8 <_dtoa_r+0x300>)
 8009614:	f7f6 fe38 	bl	8000288 <__aeabi_dsub>
 8009618:	a367      	add	r3, pc, #412	; (adr r3, 80097b8 <_dtoa_r+0x2d0>)
 800961a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800961e:	f7f6 ffeb 	bl	80005f8 <__aeabi_dmul>
 8009622:	a367      	add	r3, pc, #412	; (adr r3, 80097c0 <_dtoa_r+0x2d8>)
 8009624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009628:	f7f6 fe30 	bl	800028c <__adddf3>
 800962c:	4606      	mov	r6, r0
 800962e:	4628      	mov	r0, r5
 8009630:	460f      	mov	r7, r1
 8009632:	f7f6 ff77 	bl	8000524 <__aeabi_i2d>
 8009636:	a364      	add	r3, pc, #400	; (adr r3, 80097c8 <_dtoa_r+0x2e0>)
 8009638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800963c:	f7f6 ffdc 	bl	80005f8 <__aeabi_dmul>
 8009640:	4602      	mov	r2, r0
 8009642:	460b      	mov	r3, r1
 8009644:	4630      	mov	r0, r6
 8009646:	4639      	mov	r1, r7
 8009648:	f7f6 fe20 	bl	800028c <__adddf3>
 800964c:	4606      	mov	r6, r0
 800964e:	460f      	mov	r7, r1
 8009650:	f7f7 fa82 	bl	8000b58 <__aeabi_d2iz>
 8009654:	2200      	movs	r2, #0
 8009656:	4683      	mov	fp, r0
 8009658:	2300      	movs	r3, #0
 800965a:	4630      	mov	r0, r6
 800965c:	4639      	mov	r1, r7
 800965e:	f7f7 fa3d 	bl	8000adc <__aeabi_dcmplt>
 8009662:	b148      	cbz	r0, 8009678 <_dtoa_r+0x190>
 8009664:	4658      	mov	r0, fp
 8009666:	f7f6 ff5d 	bl	8000524 <__aeabi_i2d>
 800966a:	4632      	mov	r2, r6
 800966c:	463b      	mov	r3, r7
 800966e:	f7f7 fa2b 	bl	8000ac8 <__aeabi_dcmpeq>
 8009672:	b908      	cbnz	r0, 8009678 <_dtoa_r+0x190>
 8009674:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009678:	f1bb 0f16 	cmp.w	fp, #22
 800967c:	d857      	bhi.n	800972e <_dtoa_r+0x246>
 800967e:	4b5b      	ldr	r3, [pc, #364]	; (80097ec <_dtoa_r+0x304>)
 8009680:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009688:	ec51 0b18 	vmov	r0, r1, d8
 800968c:	f7f7 fa26 	bl	8000adc <__aeabi_dcmplt>
 8009690:	2800      	cmp	r0, #0
 8009692:	d04e      	beq.n	8009732 <_dtoa_r+0x24a>
 8009694:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009698:	2300      	movs	r3, #0
 800969a:	930c      	str	r3, [sp, #48]	; 0x30
 800969c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800969e:	1b5b      	subs	r3, r3, r5
 80096a0:	1e5a      	subs	r2, r3, #1
 80096a2:	bf45      	ittet	mi
 80096a4:	f1c3 0301 	rsbmi	r3, r3, #1
 80096a8:	9305      	strmi	r3, [sp, #20]
 80096aa:	2300      	movpl	r3, #0
 80096ac:	2300      	movmi	r3, #0
 80096ae:	9206      	str	r2, [sp, #24]
 80096b0:	bf54      	ite	pl
 80096b2:	9305      	strpl	r3, [sp, #20]
 80096b4:	9306      	strmi	r3, [sp, #24]
 80096b6:	f1bb 0f00 	cmp.w	fp, #0
 80096ba:	db3c      	blt.n	8009736 <_dtoa_r+0x24e>
 80096bc:	9b06      	ldr	r3, [sp, #24]
 80096be:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80096c2:	445b      	add	r3, fp
 80096c4:	9306      	str	r3, [sp, #24]
 80096c6:	2300      	movs	r3, #0
 80096c8:	9308      	str	r3, [sp, #32]
 80096ca:	9b07      	ldr	r3, [sp, #28]
 80096cc:	2b09      	cmp	r3, #9
 80096ce:	d868      	bhi.n	80097a2 <_dtoa_r+0x2ba>
 80096d0:	2b05      	cmp	r3, #5
 80096d2:	bfc4      	itt	gt
 80096d4:	3b04      	subgt	r3, #4
 80096d6:	9307      	strgt	r3, [sp, #28]
 80096d8:	9b07      	ldr	r3, [sp, #28]
 80096da:	f1a3 0302 	sub.w	r3, r3, #2
 80096de:	bfcc      	ite	gt
 80096e0:	2500      	movgt	r5, #0
 80096e2:	2501      	movle	r5, #1
 80096e4:	2b03      	cmp	r3, #3
 80096e6:	f200 8085 	bhi.w	80097f4 <_dtoa_r+0x30c>
 80096ea:	e8df f003 	tbb	[pc, r3]
 80096ee:	3b2e      	.short	0x3b2e
 80096f0:	5839      	.short	0x5839
 80096f2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80096f6:	441d      	add	r5, r3
 80096f8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80096fc:	2b20      	cmp	r3, #32
 80096fe:	bfc1      	itttt	gt
 8009700:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009704:	fa08 f803 	lslgt.w	r8, r8, r3
 8009708:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800970c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8009710:	bfd6      	itet	le
 8009712:	f1c3 0320 	rsble	r3, r3, #32
 8009716:	ea48 0003 	orrgt.w	r0, r8, r3
 800971a:	fa06 f003 	lslle.w	r0, r6, r3
 800971e:	f7f6 fef1 	bl	8000504 <__aeabi_ui2d>
 8009722:	2201      	movs	r2, #1
 8009724:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8009728:	3d01      	subs	r5, #1
 800972a:	920e      	str	r2, [sp, #56]	; 0x38
 800972c:	e76f      	b.n	800960e <_dtoa_r+0x126>
 800972e:	2301      	movs	r3, #1
 8009730:	e7b3      	b.n	800969a <_dtoa_r+0x1b2>
 8009732:	900c      	str	r0, [sp, #48]	; 0x30
 8009734:	e7b2      	b.n	800969c <_dtoa_r+0x1b4>
 8009736:	9b05      	ldr	r3, [sp, #20]
 8009738:	eba3 030b 	sub.w	r3, r3, fp
 800973c:	9305      	str	r3, [sp, #20]
 800973e:	f1cb 0300 	rsb	r3, fp, #0
 8009742:	9308      	str	r3, [sp, #32]
 8009744:	2300      	movs	r3, #0
 8009746:	930b      	str	r3, [sp, #44]	; 0x2c
 8009748:	e7bf      	b.n	80096ca <_dtoa_r+0x1e2>
 800974a:	2300      	movs	r3, #0
 800974c:	9309      	str	r3, [sp, #36]	; 0x24
 800974e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009750:	2b00      	cmp	r3, #0
 8009752:	dc52      	bgt.n	80097fa <_dtoa_r+0x312>
 8009754:	2301      	movs	r3, #1
 8009756:	9301      	str	r3, [sp, #4]
 8009758:	9304      	str	r3, [sp, #16]
 800975a:	461a      	mov	r2, r3
 800975c:	920a      	str	r2, [sp, #40]	; 0x28
 800975e:	e00b      	b.n	8009778 <_dtoa_r+0x290>
 8009760:	2301      	movs	r3, #1
 8009762:	e7f3      	b.n	800974c <_dtoa_r+0x264>
 8009764:	2300      	movs	r3, #0
 8009766:	9309      	str	r3, [sp, #36]	; 0x24
 8009768:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800976a:	445b      	add	r3, fp
 800976c:	9301      	str	r3, [sp, #4]
 800976e:	3301      	adds	r3, #1
 8009770:	2b01      	cmp	r3, #1
 8009772:	9304      	str	r3, [sp, #16]
 8009774:	bfb8      	it	lt
 8009776:	2301      	movlt	r3, #1
 8009778:	69e0      	ldr	r0, [r4, #28]
 800977a:	2100      	movs	r1, #0
 800977c:	2204      	movs	r2, #4
 800977e:	f102 0614 	add.w	r6, r2, #20
 8009782:	429e      	cmp	r6, r3
 8009784:	d93d      	bls.n	8009802 <_dtoa_r+0x31a>
 8009786:	6041      	str	r1, [r0, #4]
 8009788:	4620      	mov	r0, r4
 800978a:	f000 fd9f 	bl	800a2cc <_Balloc>
 800978e:	9000      	str	r0, [sp, #0]
 8009790:	2800      	cmp	r0, #0
 8009792:	d139      	bne.n	8009808 <_dtoa_r+0x320>
 8009794:	4b16      	ldr	r3, [pc, #88]	; (80097f0 <_dtoa_r+0x308>)
 8009796:	4602      	mov	r2, r0
 8009798:	f240 11af 	movw	r1, #431	; 0x1af
 800979c:	e6bd      	b.n	800951a <_dtoa_r+0x32>
 800979e:	2301      	movs	r3, #1
 80097a0:	e7e1      	b.n	8009766 <_dtoa_r+0x27e>
 80097a2:	2501      	movs	r5, #1
 80097a4:	2300      	movs	r3, #0
 80097a6:	9307      	str	r3, [sp, #28]
 80097a8:	9509      	str	r5, [sp, #36]	; 0x24
 80097aa:	f04f 33ff 	mov.w	r3, #4294967295
 80097ae:	9301      	str	r3, [sp, #4]
 80097b0:	9304      	str	r3, [sp, #16]
 80097b2:	2200      	movs	r2, #0
 80097b4:	2312      	movs	r3, #18
 80097b6:	e7d1      	b.n	800975c <_dtoa_r+0x274>
 80097b8:	636f4361 	.word	0x636f4361
 80097bc:	3fd287a7 	.word	0x3fd287a7
 80097c0:	8b60c8b3 	.word	0x8b60c8b3
 80097c4:	3fc68a28 	.word	0x3fc68a28
 80097c8:	509f79fb 	.word	0x509f79fb
 80097cc:	3fd34413 	.word	0x3fd34413
 80097d0:	0802cb6d 	.word	0x0802cb6d
 80097d4:	0802cb84 	.word	0x0802cb84
 80097d8:	7ff00000 	.word	0x7ff00000
 80097dc:	0802cb69 	.word	0x0802cb69
 80097e0:	0802cb60 	.word	0x0802cb60
 80097e4:	0802cb3d 	.word	0x0802cb3d
 80097e8:	3ff80000 	.word	0x3ff80000
 80097ec:	0802cc70 	.word	0x0802cc70
 80097f0:	0802cbdc 	.word	0x0802cbdc
 80097f4:	2301      	movs	r3, #1
 80097f6:	9309      	str	r3, [sp, #36]	; 0x24
 80097f8:	e7d7      	b.n	80097aa <_dtoa_r+0x2c2>
 80097fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097fc:	9301      	str	r3, [sp, #4]
 80097fe:	9304      	str	r3, [sp, #16]
 8009800:	e7ba      	b.n	8009778 <_dtoa_r+0x290>
 8009802:	3101      	adds	r1, #1
 8009804:	0052      	lsls	r2, r2, #1
 8009806:	e7ba      	b.n	800977e <_dtoa_r+0x296>
 8009808:	69e3      	ldr	r3, [r4, #28]
 800980a:	9a00      	ldr	r2, [sp, #0]
 800980c:	601a      	str	r2, [r3, #0]
 800980e:	9b04      	ldr	r3, [sp, #16]
 8009810:	2b0e      	cmp	r3, #14
 8009812:	f200 80a8 	bhi.w	8009966 <_dtoa_r+0x47e>
 8009816:	2d00      	cmp	r5, #0
 8009818:	f000 80a5 	beq.w	8009966 <_dtoa_r+0x47e>
 800981c:	f1bb 0f00 	cmp.w	fp, #0
 8009820:	dd38      	ble.n	8009894 <_dtoa_r+0x3ac>
 8009822:	4bc0      	ldr	r3, [pc, #768]	; (8009b24 <_dtoa_r+0x63c>)
 8009824:	f00b 020f 	and.w	r2, fp, #15
 8009828:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800982c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009830:	e9d3 6700 	ldrd	r6, r7, [r3]
 8009834:	ea4f 182b 	mov.w	r8, fp, asr #4
 8009838:	d019      	beq.n	800986e <_dtoa_r+0x386>
 800983a:	4bbb      	ldr	r3, [pc, #748]	; (8009b28 <_dtoa_r+0x640>)
 800983c:	ec51 0b18 	vmov	r0, r1, d8
 8009840:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009844:	f7f7 f802 	bl	800084c <__aeabi_ddiv>
 8009848:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800984c:	f008 080f 	and.w	r8, r8, #15
 8009850:	2503      	movs	r5, #3
 8009852:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8009b28 <_dtoa_r+0x640>
 8009856:	f1b8 0f00 	cmp.w	r8, #0
 800985a:	d10a      	bne.n	8009872 <_dtoa_r+0x38a>
 800985c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009860:	4632      	mov	r2, r6
 8009862:	463b      	mov	r3, r7
 8009864:	f7f6 fff2 	bl	800084c <__aeabi_ddiv>
 8009868:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800986c:	e02b      	b.n	80098c6 <_dtoa_r+0x3de>
 800986e:	2502      	movs	r5, #2
 8009870:	e7ef      	b.n	8009852 <_dtoa_r+0x36a>
 8009872:	f018 0f01 	tst.w	r8, #1
 8009876:	d008      	beq.n	800988a <_dtoa_r+0x3a2>
 8009878:	4630      	mov	r0, r6
 800987a:	4639      	mov	r1, r7
 800987c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009880:	f7f6 feba 	bl	80005f8 <__aeabi_dmul>
 8009884:	3501      	adds	r5, #1
 8009886:	4606      	mov	r6, r0
 8009888:	460f      	mov	r7, r1
 800988a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800988e:	f109 0908 	add.w	r9, r9, #8
 8009892:	e7e0      	b.n	8009856 <_dtoa_r+0x36e>
 8009894:	f000 809f 	beq.w	80099d6 <_dtoa_r+0x4ee>
 8009898:	f1cb 0600 	rsb	r6, fp, #0
 800989c:	4ba1      	ldr	r3, [pc, #644]	; (8009b24 <_dtoa_r+0x63c>)
 800989e:	4fa2      	ldr	r7, [pc, #648]	; (8009b28 <_dtoa_r+0x640>)
 80098a0:	f006 020f 	and.w	r2, r6, #15
 80098a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80098a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098ac:	ec51 0b18 	vmov	r0, r1, d8
 80098b0:	f7f6 fea2 	bl	80005f8 <__aeabi_dmul>
 80098b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80098b8:	1136      	asrs	r6, r6, #4
 80098ba:	2300      	movs	r3, #0
 80098bc:	2502      	movs	r5, #2
 80098be:	2e00      	cmp	r6, #0
 80098c0:	d17e      	bne.n	80099c0 <_dtoa_r+0x4d8>
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d1d0      	bne.n	8009868 <_dtoa_r+0x380>
 80098c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80098c8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	f000 8084 	beq.w	80099da <_dtoa_r+0x4f2>
 80098d2:	4b96      	ldr	r3, [pc, #600]	; (8009b2c <_dtoa_r+0x644>)
 80098d4:	2200      	movs	r2, #0
 80098d6:	4640      	mov	r0, r8
 80098d8:	4649      	mov	r1, r9
 80098da:	f7f7 f8ff 	bl	8000adc <__aeabi_dcmplt>
 80098de:	2800      	cmp	r0, #0
 80098e0:	d07b      	beq.n	80099da <_dtoa_r+0x4f2>
 80098e2:	9b04      	ldr	r3, [sp, #16]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d078      	beq.n	80099da <_dtoa_r+0x4f2>
 80098e8:	9b01      	ldr	r3, [sp, #4]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	dd39      	ble.n	8009962 <_dtoa_r+0x47a>
 80098ee:	4b90      	ldr	r3, [pc, #576]	; (8009b30 <_dtoa_r+0x648>)
 80098f0:	2200      	movs	r2, #0
 80098f2:	4640      	mov	r0, r8
 80098f4:	4649      	mov	r1, r9
 80098f6:	f7f6 fe7f 	bl	80005f8 <__aeabi_dmul>
 80098fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80098fe:	9e01      	ldr	r6, [sp, #4]
 8009900:	f10b 37ff 	add.w	r7, fp, #4294967295
 8009904:	3501      	adds	r5, #1
 8009906:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800990a:	4628      	mov	r0, r5
 800990c:	f7f6 fe0a 	bl	8000524 <__aeabi_i2d>
 8009910:	4642      	mov	r2, r8
 8009912:	464b      	mov	r3, r9
 8009914:	f7f6 fe70 	bl	80005f8 <__aeabi_dmul>
 8009918:	4b86      	ldr	r3, [pc, #536]	; (8009b34 <_dtoa_r+0x64c>)
 800991a:	2200      	movs	r2, #0
 800991c:	f7f6 fcb6 	bl	800028c <__adddf3>
 8009920:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8009924:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009928:	9303      	str	r3, [sp, #12]
 800992a:	2e00      	cmp	r6, #0
 800992c:	d158      	bne.n	80099e0 <_dtoa_r+0x4f8>
 800992e:	4b82      	ldr	r3, [pc, #520]	; (8009b38 <_dtoa_r+0x650>)
 8009930:	2200      	movs	r2, #0
 8009932:	4640      	mov	r0, r8
 8009934:	4649      	mov	r1, r9
 8009936:	f7f6 fca7 	bl	8000288 <__aeabi_dsub>
 800993a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800993e:	4680      	mov	r8, r0
 8009940:	4689      	mov	r9, r1
 8009942:	f7f7 f8e9 	bl	8000b18 <__aeabi_dcmpgt>
 8009946:	2800      	cmp	r0, #0
 8009948:	f040 8296 	bne.w	8009e78 <_dtoa_r+0x990>
 800994c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009950:	4640      	mov	r0, r8
 8009952:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009956:	4649      	mov	r1, r9
 8009958:	f7f7 f8c0 	bl	8000adc <__aeabi_dcmplt>
 800995c:	2800      	cmp	r0, #0
 800995e:	f040 8289 	bne.w	8009e74 <_dtoa_r+0x98c>
 8009962:	ed8d 8b02 	vstr	d8, [sp, #8]
 8009966:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009968:	2b00      	cmp	r3, #0
 800996a:	f2c0 814e 	blt.w	8009c0a <_dtoa_r+0x722>
 800996e:	f1bb 0f0e 	cmp.w	fp, #14
 8009972:	f300 814a 	bgt.w	8009c0a <_dtoa_r+0x722>
 8009976:	4b6b      	ldr	r3, [pc, #428]	; (8009b24 <_dtoa_r+0x63c>)
 8009978:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800997c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009980:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009982:	2b00      	cmp	r3, #0
 8009984:	f280 80dc 	bge.w	8009b40 <_dtoa_r+0x658>
 8009988:	9b04      	ldr	r3, [sp, #16]
 800998a:	2b00      	cmp	r3, #0
 800998c:	f300 80d8 	bgt.w	8009b40 <_dtoa_r+0x658>
 8009990:	f040 826f 	bne.w	8009e72 <_dtoa_r+0x98a>
 8009994:	4b68      	ldr	r3, [pc, #416]	; (8009b38 <_dtoa_r+0x650>)
 8009996:	2200      	movs	r2, #0
 8009998:	4640      	mov	r0, r8
 800999a:	4649      	mov	r1, r9
 800999c:	f7f6 fe2c 	bl	80005f8 <__aeabi_dmul>
 80099a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80099a4:	f7f7 f8ae 	bl	8000b04 <__aeabi_dcmpge>
 80099a8:	9e04      	ldr	r6, [sp, #16]
 80099aa:	4637      	mov	r7, r6
 80099ac:	2800      	cmp	r0, #0
 80099ae:	f040 8245 	bne.w	8009e3c <_dtoa_r+0x954>
 80099b2:	9d00      	ldr	r5, [sp, #0]
 80099b4:	2331      	movs	r3, #49	; 0x31
 80099b6:	f805 3b01 	strb.w	r3, [r5], #1
 80099ba:	f10b 0b01 	add.w	fp, fp, #1
 80099be:	e241      	b.n	8009e44 <_dtoa_r+0x95c>
 80099c0:	07f2      	lsls	r2, r6, #31
 80099c2:	d505      	bpl.n	80099d0 <_dtoa_r+0x4e8>
 80099c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80099c8:	f7f6 fe16 	bl	80005f8 <__aeabi_dmul>
 80099cc:	3501      	adds	r5, #1
 80099ce:	2301      	movs	r3, #1
 80099d0:	1076      	asrs	r6, r6, #1
 80099d2:	3708      	adds	r7, #8
 80099d4:	e773      	b.n	80098be <_dtoa_r+0x3d6>
 80099d6:	2502      	movs	r5, #2
 80099d8:	e775      	b.n	80098c6 <_dtoa_r+0x3de>
 80099da:	9e04      	ldr	r6, [sp, #16]
 80099dc:	465f      	mov	r7, fp
 80099de:	e792      	b.n	8009906 <_dtoa_r+0x41e>
 80099e0:	9900      	ldr	r1, [sp, #0]
 80099e2:	4b50      	ldr	r3, [pc, #320]	; (8009b24 <_dtoa_r+0x63c>)
 80099e4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80099e8:	4431      	add	r1, r6
 80099ea:	9102      	str	r1, [sp, #8]
 80099ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 80099ee:	eeb0 9a47 	vmov.f32	s18, s14
 80099f2:	eef0 9a67 	vmov.f32	s19, s15
 80099f6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80099fa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80099fe:	2900      	cmp	r1, #0
 8009a00:	d044      	beq.n	8009a8c <_dtoa_r+0x5a4>
 8009a02:	494e      	ldr	r1, [pc, #312]	; (8009b3c <_dtoa_r+0x654>)
 8009a04:	2000      	movs	r0, #0
 8009a06:	f7f6 ff21 	bl	800084c <__aeabi_ddiv>
 8009a0a:	ec53 2b19 	vmov	r2, r3, d9
 8009a0e:	f7f6 fc3b 	bl	8000288 <__aeabi_dsub>
 8009a12:	9d00      	ldr	r5, [sp, #0]
 8009a14:	ec41 0b19 	vmov	d9, r0, r1
 8009a18:	4649      	mov	r1, r9
 8009a1a:	4640      	mov	r0, r8
 8009a1c:	f7f7 f89c 	bl	8000b58 <__aeabi_d2iz>
 8009a20:	4606      	mov	r6, r0
 8009a22:	f7f6 fd7f 	bl	8000524 <__aeabi_i2d>
 8009a26:	4602      	mov	r2, r0
 8009a28:	460b      	mov	r3, r1
 8009a2a:	4640      	mov	r0, r8
 8009a2c:	4649      	mov	r1, r9
 8009a2e:	f7f6 fc2b 	bl	8000288 <__aeabi_dsub>
 8009a32:	3630      	adds	r6, #48	; 0x30
 8009a34:	f805 6b01 	strb.w	r6, [r5], #1
 8009a38:	ec53 2b19 	vmov	r2, r3, d9
 8009a3c:	4680      	mov	r8, r0
 8009a3e:	4689      	mov	r9, r1
 8009a40:	f7f7 f84c 	bl	8000adc <__aeabi_dcmplt>
 8009a44:	2800      	cmp	r0, #0
 8009a46:	d164      	bne.n	8009b12 <_dtoa_r+0x62a>
 8009a48:	4642      	mov	r2, r8
 8009a4a:	464b      	mov	r3, r9
 8009a4c:	4937      	ldr	r1, [pc, #220]	; (8009b2c <_dtoa_r+0x644>)
 8009a4e:	2000      	movs	r0, #0
 8009a50:	f7f6 fc1a 	bl	8000288 <__aeabi_dsub>
 8009a54:	ec53 2b19 	vmov	r2, r3, d9
 8009a58:	f7f7 f840 	bl	8000adc <__aeabi_dcmplt>
 8009a5c:	2800      	cmp	r0, #0
 8009a5e:	f040 80b6 	bne.w	8009bce <_dtoa_r+0x6e6>
 8009a62:	9b02      	ldr	r3, [sp, #8]
 8009a64:	429d      	cmp	r5, r3
 8009a66:	f43f af7c 	beq.w	8009962 <_dtoa_r+0x47a>
 8009a6a:	4b31      	ldr	r3, [pc, #196]	; (8009b30 <_dtoa_r+0x648>)
 8009a6c:	ec51 0b19 	vmov	r0, r1, d9
 8009a70:	2200      	movs	r2, #0
 8009a72:	f7f6 fdc1 	bl	80005f8 <__aeabi_dmul>
 8009a76:	4b2e      	ldr	r3, [pc, #184]	; (8009b30 <_dtoa_r+0x648>)
 8009a78:	ec41 0b19 	vmov	d9, r0, r1
 8009a7c:	2200      	movs	r2, #0
 8009a7e:	4640      	mov	r0, r8
 8009a80:	4649      	mov	r1, r9
 8009a82:	f7f6 fdb9 	bl	80005f8 <__aeabi_dmul>
 8009a86:	4680      	mov	r8, r0
 8009a88:	4689      	mov	r9, r1
 8009a8a:	e7c5      	b.n	8009a18 <_dtoa_r+0x530>
 8009a8c:	ec51 0b17 	vmov	r0, r1, d7
 8009a90:	f7f6 fdb2 	bl	80005f8 <__aeabi_dmul>
 8009a94:	9b02      	ldr	r3, [sp, #8]
 8009a96:	9d00      	ldr	r5, [sp, #0]
 8009a98:	930f      	str	r3, [sp, #60]	; 0x3c
 8009a9a:	ec41 0b19 	vmov	d9, r0, r1
 8009a9e:	4649      	mov	r1, r9
 8009aa0:	4640      	mov	r0, r8
 8009aa2:	f7f7 f859 	bl	8000b58 <__aeabi_d2iz>
 8009aa6:	4606      	mov	r6, r0
 8009aa8:	f7f6 fd3c 	bl	8000524 <__aeabi_i2d>
 8009aac:	3630      	adds	r6, #48	; 0x30
 8009aae:	4602      	mov	r2, r0
 8009ab0:	460b      	mov	r3, r1
 8009ab2:	4640      	mov	r0, r8
 8009ab4:	4649      	mov	r1, r9
 8009ab6:	f7f6 fbe7 	bl	8000288 <__aeabi_dsub>
 8009aba:	f805 6b01 	strb.w	r6, [r5], #1
 8009abe:	9b02      	ldr	r3, [sp, #8]
 8009ac0:	429d      	cmp	r5, r3
 8009ac2:	4680      	mov	r8, r0
 8009ac4:	4689      	mov	r9, r1
 8009ac6:	f04f 0200 	mov.w	r2, #0
 8009aca:	d124      	bne.n	8009b16 <_dtoa_r+0x62e>
 8009acc:	4b1b      	ldr	r3, [pc, #108]	; (8009b3c <_dtoa_r+0x654>)
 8009ace:	ec51 0b19 	vmov	r0, r1, d9
 8009ad2:	f7f6 fbdb 	bl	800028c <__adddf3>
 8009ad6:	4602      	mov	r2, r0
 8009ad8:	460b      	mov	r3, r1
 8009ada:	4640      	mov	r0, r8
 8009adc:	4649      	mov	r1, r9
 8009ade:	f7f7 f81b 	bl	8000b18 <__aeabi_dcmpgt>
 8009ae2:	2800      	cmp	r0, #0
 8009ae4:	d173      	bne.n	8009bce <_dtoa_r+0x6e6>
 8009ae6:	ec53 2b19 	vmov	r2, r3, d9
 8009aea:	4914      	ldr	r1, [pc, #80]	; (8009b3c <_dtoa_r+0x654>)
 8009aec:	2000      	movs	r0, #0
 8009aee:	f7f6 fbcb 	bl	8000288 <__aeabi_dsub>
 8009af2:	4602      	mov	r2, r0
 8009af4:	460b      	mov	r3, r1
 8009af6:	4640      	mov	r0, r8
 8009af8:	4649      	mov	r1, r9
 8009afa:	f7f6 ffef 	bl	8000adc <__aeabi_dcmplt>
 8009afe:	2800      	cmp	r0, #0
 8009b00:	f43f af2f 	beq.w	8009962 <_dtoa_r+0x47a>
 8009b04:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009b06:	1e6b      	subs	r3, r5, #1
 8009b08:	930f      	str	r3, [sp, #60]	; 0x3c
 8009b0a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009b0e:	2b30      	cmp	r3, #48	; 0x30
 8009b10:	d0f8      	beq.n	8009b04 <_dtoa_r+0x61c>
 8009b12:	46bb      	mov	fp, r7
 8009b14:	e04a      	b.n	8009bac <_dtoa_r+0x6c4>
 8009b16:	4b06      	ldr	r3, [pc, #24]	; (8009b30 <_dtoa_r+0x648>)
 8009b18:	f7f6 fd6e 	bl	80005f8 <__aeabi_dmul>
 8009b1c:	4680      	mov	r8, r0
 8009b1e:	4689      	mov	r9, r1
 8009b20:	e7bd      	b.n	8009a9e <_dtoa_r+0x5b6>
 8009b22:	bf00      	nop
 8009b24:	0802cc70 	.word	0x0802cc70
 8009b28:	0802cc48 	.word	0x0802cc48
 8009b2c:	3ff00000 	.word	0x3ff00000
 8009b30:	40240000 	.word	0x40240000
 8009b34:	401c0000 	.word	0x401c0000
 8009b38:	40140000 	.word	0x40140000
 8009b3c:	3fe00000 	.word	0x3fe00000
 8009b40:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009b44:	9d00      	ldr	r5, [sp, #0]
 8009b46:	4642      	mov	r2, r8
 8009b48:	464b      	mov	r3, r9
 8009b4a:	4630      	mov	r0, r6
 8009b4c:	4639      	mov	r1, r7
 8009b4e:	f7f6 fe7d 	bl	800084c <__aeabi_ddiv>
 8009b52:	f7f7 f801 	bl	8000b58 <__aeabi_d2iz>
 8009b56:	9001      	str	r0, [sp, #4]
 8009b58:	f7f6 fce4 	bl	8000524 <__aeabi_i2d>
 8009b5c:	4642      	mov	r2, r8
 8009b5e:	464b      	mov	r3, r9
 8009b60:	f7f6 fd4a 	bl	80005f8 <__aeabi_dmul>
 8009b64:	4602      	mov	r2, r0
 8009b66:	460b      	mov	r3, r1
 8009b68:	4630      	mov	r0, r6
 8009b6a:	4639      	mov	r1, r7
 8009b6c:	f7f6 fb8c 	bl	8000288 <__aeabi_dsub>
 8009b70:	9e01      	ldr	r6, [sp, #4]
 8009b72:	9f04      	ldr	r7, [sp, #16]
 8009b74:	3630      	adds	r6, #48	; 0x30
 8009b76:	f805 6b01 	strb.w	r6, [r5], #1
 8009b7a:	9e00      	ldr	r6, [sp, #0]
 8009b7c:	1bae      	subs	r6, r5, r6
 8009b7e:	42b7      	cmp	r7, r6
 8009b80:	4602      	mov	r2, r0
 8009b82:	460b      	mov	r3, r1
 8009b84:	d134      	bne.n	8009bf0 <_dtoa_r+0x708>
 8009b86:	f7f6 fb81 	bl	800028c <__adddf3>
 8009b8a:	4642      	mov	r2, r8
 8009b8c:	464b      	mov	r3, r9
 8009b8e:	4606      	mov	r6, r0
 8009b90:	460f      	mov	r7, r1
 8009b92:	f7f6 ffc1 	bl	8000b18 <__aeabi_dcmpgt>
 8009b96:	b9c8      	cbnz	r0, 8009bcc <_dtoa_r+0x6e4>
 8009b98:	4642      	mov	r2, r8
 8009b9a:	464b      	mov	r3, r9
 8009b9c:	4630      	mov	r0, r6
 8009b9e:	4639      	mov	r1, r7
 8009ba0:	f7f6 ff92 	bl	8000ac8 <__aeabi_dcmpeq>
 8009ba4:	b110      	cbz	r0, 8009bac <_dtoa_r+0x6c4>
 8009ba6:	9b01      	ldr	r3, [sp, #4]
 8009ba8:	07db      	lsls	r3, r3, #31
 8009baa:	d40f      	bmi.n	8009bcc <_dtoa_r+0x6e4>
 8009bac:	4651      	mov	r1, sl
 8009bae:	4620      	mov	r0, r4
 8009bb0:	f000 fbcc 	bl	800a34c <_Bfree>
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009bb8:	702b      	strb	r3, [r5, #0]
 8009bba:	f10b 0301 	add.w	r3, fp, #1
 8009bbe:	6013      	str	r3, [r2, #0]
 8009bc0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	f43f ace2 	beq.w	800958c <_dtoa_r+0xa4>
 8009bc8:	601d      	str	r5, [r3, #0]
 8009bca:	e4df      	b.n	800958c <_dtoa_r+0xa4>
 8009bcc:	465f      	mov	r7, fp
 8009bce:	462b      	mov	r3, r5
 8009bd0:	461d      	mov	r5, r3
 8009bd2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009bd6:	2a39      	cmp	r2, #57	; 0x39
 8009bd8:	d106      	bne.n	8009be8 <_dtoa_r+0x700>
 8009bda:	9a00      	ldr	r2, [sp, #0]
 8009bdc:	429a      	cmp	r2, r3
 8009bde:	d1f7      	bne.n	8009bd0 <_dtoa_r+0x6e8>
 8009be0:	9900      	ldr	r1, [sp, #0]
 8009be2:	2230      	movs	r2, #48	; 0x30
 8009be4:	3701      	adds	r7, #1
 8009be6:	700a      	strb	r2, [r1, #0]
 8009be8:	781a      	ldrb	r2, [r3, #0]
 8009bea:	3201      	adds	r2, #1
 8009bec:	701a      	strb	r2, [r3, #0]
 8009bee:	e790      	b.n	8009b12 <_dtoa_r+0x62a>
 8009bf0:	4ba3      	ldr	r3, [pc, #652]	; (8009e80 <_dtoa_r+0x998>)
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	f7f6 fd00 	bl	80005f8 <__aeabi_dmul>
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	4606      	mov	r6, r0
 8009bfe:	460f      	mov	r7, r1
 8009c00:	f7f6 ff62 	bl	8000ac8 <__aeabi_dcmpeq>
 8009c04:	2800      	cmp	r0, #0
 8009c06:	d09e      	beq.n	8009b46 <_dtoa_r+0x65e>
 8009c08:	e7d0      	b.n	8009bac <_dtoa_r+0x6c4>
 8009c0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009c0c:	2a00      	cmp	r2, #0
 8009c0e:	f000 80ca 	beq.w	8009da6 <_dtoa_r+0x8be>
 8009c12:	9a07      	ldr	r2, [sp, #28]
 8009c14:	2a01      	cmp	r2, #1
 8009c16:	f300 80ad 	bgt.w	8009d74 <_dtoa_r+0x88c>
 8009c1a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009c1c:	2a00      	cmp	r2, #0
 8009c1e:	f000 80a5 	beq.w	8009d6c <_dtoa_r+0x884>
 8009c22:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009c26:	9e08      	ldr	r6, [sp, #32]
 8009c28:	9d05      	ldr	r5, [sp, #20]
 8009c2a:	9a05      	ldr	r2, [sp, #20]
 8009c2c:	441a      	add	r2, r3
 8009c2e:	9205      	str	r2, [sp, #20]
 8009c30:	9a06      	ldr	r2, [sp, #24]
 8009c32:	2101      	movs	r1, #1
 8009c34:	441a      	add	r2, r3
 8009c36:	4620      	mov	r0, r4
 8009c38:	9206      	str	r2, [sp, #24]
 8009c3a:	f000 fc3d 	bl	800a4b8 <__i2b>
 8009c3e:	4607      	mov	r7, r0
 8009c40:	b165      	cbz	r5, 8009c5c <_dtoa_r+0x774>
 8009c42:	9b06      	ldr	r3, [sp, #24]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	dd09      	ble.n	8009c5c <_dtoa_r+0x774>
 8009c48:	42ab      	cmp	r3, r5
 8009c4a:	9a05      	ldr	r2, [sp, #20]
 8009c4c:	bfa8      	it	ge
 8009c4e:	462b      	movge	r3, r5
 8009c50:	1ad2      	subs	r2, r2, r3
 8009c52:	9205      	str	r2, [sp, #20]
 8009c54:	9a06      	ldr	r2, [sp, #24]
 8009c56:	1aed      	subs	r5, r5, r3
 8009c58:	1ad3      	subs	r3, r2, r3
 8009c5a:	9306      	str	r3, [sp, #24]
 8009c5c:	9b08      	ldr	r3, [sp, #32]
 8009c5e:	b1f3      	cbz	r3, 8009c9e <_dtoa_r+0x7b6>
 8009c60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	f000 80a3 	beq.w	8009dae <_dtoa_r+0x8c6>
 8009c68:	2e00      	cmp	r6, #0
 8009c6a:	dd10      	ble.n	8009c8e <_dtoa_r+0x7a6>
 8009c6c:	4639      	mov	r1, r7
 8009c6e:	4632      	mov	r2, r6
 8009c70:	4620      	mov	r0, r4
 8009c72:	f000 fce1 	bl	800a638 <__pow5mult>
 8009c76:	4652      	mov	r2, sl
 8009c78:	4601      	mov	r1, r0
 8009c7a:	4607      	mov	r7, r0
 8009c7c:	4620      	mov	r0, r4
 8009c7e:	f000 fc31 	bl	800a4e4 <__multiply>
 8009c82:	4651      	mov	r1, sl
 8009c84:	4680      	mov	r8, r0
 8009c86:	4620      	mov	r0, r4
 8009c88:	f000 fb60 	bl	800a34c <_Bfree>
 8009c8c:	46c2      	mov	sl, r8
 8009c8e:	9b08      	ldr	r3, [sp, #32]
 8009c90:	1b9a      	subs	r2, r3, r6
 8009c92:	d004      	beq.n	8009c9e <_dtoa_r+0x7b6>
 8009c94:	4651      	mov	r1, sl
 8009c96:	4620      	mov	r0, r4
 8009c98:	f000 fcce 	bl	800a638 <__pow5mult>
 8009c9c:	4682      	mov	sl, r0
 8009c9e:	2101      	movs	r1, #1
 8009ca0:	4620      	mov	r0, r4
 8009ca2:	f000 fc09 	bl	800a4b8 <__i2b>
 8009ca6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	4606      	mov	r6, r0
 8009cac:	f340 8081 	ble.w	8009db2 <_dtoa_r+0x8ca>
 8009cb0:	461a      	mov	r2, r3
 8009cb2:	4601      	mov	r1, r0
 8009cb4:	4620      	mov	r0, r4
 8009cb6:	f000 fcbf 	bl	800a638 <__pow5mult>
 8009cba:	9b07      	ldr	r3, [sp, #28]
 8009cbc:	2b01      	cmp	r3, #1
 8009cbe:	4606      	mov	r6, r0
 8009cc0:	dd7a      	ble.n	8009db8 <_dtoa_r+0x8d0>
 8009cc2:	f04f 0800 	mov.w	r8, #0
 8009cc6:	6933      	ldr	r3, [r6, #16]
 8009cc8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009ccc:	6918      	ldr	r0, [r3, #16]
 8009cce:	f000 fba5 	bl	800a41c <__hi0bits>
 8009cd2:	f1c0 0020 	rsb	r0, r0, #32
 8009cd6:	9b06      	ldr	r3, [sp, #24]
 8009cd8:	4418      	add	r0, r3
 8009cda:	f010 001f 	ands.w	r0, r0, #31
 8009cde:	f000 8094 	beq.w	8009e0a <_dtoa_r+0x922>
 8009ce2:	f1c0 0320 	rsb	r3, r0, #32
 8009ce6:	2b04      	cmp	r3, #4
 8009ce8:	f340 8085 	ble.w	8009df6 <_dtoa_r+0x90e>
 8009cec:	9b05      	ldr	r3, [sp, #20]
 8009cee:	f1c0 001c 	rsb	r0, r0, #28
 8009cf2:	4403      	add	r3, r0
 8009cf4:	9305      	str	r3, [sp, #20]
 8009cf6:	9b06      	ldr	r3, [sp, #24]
 8009cf8:	4403      	add	r3, r0
 8009cfa:	4405      	add	r5, r0
 8009cfc:	9306      	str	r3, [sp, #24]
 8009cfe:	9b05      	ldr	r3, [sp, #20]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	dd05      	ble.n	8009d10 <_dtoa_r+0x828>
 8009d04:	4651      	mov	r1, sl
 8009d06:	461a      	mov	r2, r3
 8009d08:	4620      	mov	r0, r4
 8009d0a:	f000 fcef 	bl	800a6ec <__lshift>
 8009d0e:	4682      	mov	sl, r0
 8009d10:	9b06      	ldr	r3, [sp, #24]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	dd05      	ble.n	8009d22 <_dtoa_r+0x83a>
 8009d16:	4631      	mov	r1, r6
 8009d18:	461a      	mov	r2, r3
 8009d1a:	4620      	mov	r0, r4
 8009d1c:	f000 fce6 	bl	800a6ec <__lshift>
 8009d20:	4606      	mov	r6, r0
 8009d22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d072      	beq.n	8009e0e <_dtoa_r+0x926>
 8009d28:	4631      	mov	r1, r6
 8009d2a:	4650      	mov	r0, sl
 8009d2c:	f000 fd4a 	bl	800a7c4 <__mcmp>
 8009d30:	2800      	cmp	r0, #0
 8009d32:	da6c      	bge.n	8009e0e <_dtoa_r+0x926>
 8009d34:	2300      	movs	r3, #0
 8009d36:	4651      	mov	r1, sl
 8009d38:	220a      	movs	r2, #10
 8009d3a:	4620      	mov	r0, r4
 8009d3c:	f000 fb28 	bl	800a390 <__multadd>
 8009d40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d42:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009d46:	4682      	mov	sl, r0
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	f000 81b0 	beq.w	800a0ae <_dtoa_r+0xbc6>
 8009d4e:	2300      	movs	r3, #0
 8009d50:	4639      	mov	r1, r7
 8009d52:	220a      	movs	r2, #10
 8009d54:	4620      	mov	r0, r4
 8009d56:	f000 fb1b 	bl	800a390 <__multadd>
 8009d5a:	9b01      	ldr	r3, [sp, #4]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	4607      	mov	r7, r0
 8009d60:	f300 8096 	bgt.w	8009e90 <_dtoa_r+0x9a8>
 8009d64:	9b07      	ldr	r3, [sp, #28]
 8009d66:	2b02      	cmp	r3, #2
 8009d68:	dc59      	bgt.n	8009e1e <_dtoa_r+0x936>
 8009d6a:	e091      	b.n	8009e90 <_dtoa_r+0x9a8>
 8009d6c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009d6e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009d72:	e758      	b.n	8009c26 <_dtoa_r+0x73e>
 8009d74:	9b04      	ldr	r3, [sp, #16]
 8009d76:	1e5e      	subs	r6, r3, #1
 8009d78:	9b08      	ldr	r3, [sp, #32]
 8009d7a:	42b3      	cmp	r3, r6
 8009d7c:	bfbf      	itttt	lt
 8009d7e:	9b08      	ldrlt	r3, [sp, #32]
 8009d80:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8009d82:	9608      	strlt	r6, [sp, #32]
 8009d84:	1af3      	sublt	r3, r6, r3
 8009d86:	bfb4      	ite	lt
 8009d88:	18d2      	addlt	r2, r2, r3
 8009d8a:	1b9e      	subge	r6, r3, r6
 8009d8c:	9b04      	ldr	r3, [sp, #16]
 8009d8e:	bfbc      	itt	lt
 8009d90:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8009d92:	2600      	movlt	r6, #0
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	bfb7      	itett	lt
 8009d98:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8009d9c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8009da0:	1a9d      	sublt	r5, r3, r2
 8009da2:	2300      	movlt	r3, #0
 8009da4:	e741      	b.n	8009c2a <_dtoa_r+0x742>
 8009da6:	9e08      	ldr	r6, [sp, #32]
 8009da8:	9d05      	ldr	r5, [sp, #20]
 8009daa:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009dac:	e748      	b.n	8009c40 <_dtoa_r+0x758>
 8009dae:	9a08      	ldr	r2, [sp, #32]
 8009db0:	e770      	b.n	8009c94 <_dtoa_r+0x7ac>
 8009db2:	9b07      	ldr	r3, [sp, #28]
 8009db4:	2b01      	cmp	r3, #1
 8009db6:	dc19      	bgt.n	8009dec <_dtoa_r+0x904>
 8009db8:	9b02      	ldr	r3, [sp, #8]
 8009dba:	b9bb      	cbnz	r3, 8009dec <_dtoa_r+0x904>
 8009dbc:	9b03      	ldr	r3, [sp, #12]
 8009dbe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009dc2:	b99b      	cbnz	r3, 8009dec <_dtoa_r+0x904>
 8009dc4:	9b03      	ldr	r3, [sp, #12]
 8009dc6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009dca:	0d1b      	lsrs	r3, r3, #20
 8009dcc:	051b      	lsls	r3, r3, #20
 8009dce:	b183      	cbz	r3, 8009df2 <_dtoa_r+0x90a>
 8009dd0:	9b05      	ldr	r3, [sp, #20]
 8009dd2:	3301      	adds	r3, #1
 8009dd4:	9305      	str	r3, [sp, #20]
 8009dd6:	9b06      	ldr	r3, [sp, #24]
 8009dd8:	3301      	adds	r3, #1
 8009dda:	9306      	str	r3, [sp, #24]
 8009ddc:	f04f 0801 	mov.w	r8, #1
 8009de0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	f47f af6f 	bne.w	8009cc6 <_dtoa_r+0x7de>
 8009de8:	2001      	movs	r0, #1
 8009dea:	e774      	b.n	8009cd6 <_dtoa_r+0x7ee>
 8009dec:	f04f 0800 	mov.w	r8, #0
 8009df0:	e7f6      	b.n	8009de0 <_dtoa_r+0x8f8>
 8009df2:	4698      	mov	r8, r3
 8009df4:	e7f4      	b.n	8009de0 <_dtoa_r+0x8f8>
 8009df6:	d082      	beq.n	8009cfe <_dtoa_r+0x816>
 8009df8:	9a05      	ldr	r2, [sp, #20]
 8009dfa:	331c      	adds	r3, #28
 8009dfc:	441a      	add	r2, r3
 8009dfe:	9205      	str	r2, [sp, #20]
 8009e00:	9a06      	ldr	r2, [sp, #24]
 8009e02:	441a      	add	r2, r3
 8009e04:	441d      	add	r5, r3
 8009e06:	9206      	str	r2, [sp, #24]
 8009e08:	e779      	b.n	8009cfe <_dtoa_r+0x816>
 8009e0a:	4603      	mov	r3, r0
 8009e0c:	e7f4      	b.n	8009df8 <_dtoa_r+0x910>
 8009e0e:	9b04      	ldr	r3, [sp, #16]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	dc37      	bgt.n	8009e84 <_dtoa_r+0x99c>
 8009e14:	9b07      	ldr	r3, [sp, #28]
 8009e16:	2b02      	cmp	r3, #2
 8009e18:	dd34      	ble.n	8009e84 <_dtoa_r+0x99c>
 8009e1a:	9b04      	ldr	r3, [sp, #16]
 8009e1c:	9301      	str	r3, [sp, #4]
 8009e1e:	9b01      	ldr	r3, [sp, #4]
 8009e20:	b963      	cbnz	r3, 8009e3c <_dtoa_r+0x954>
 8009e22:	4631      	mov	r1, r6
 8009e24:	2205      	movs	r2, #5
 8009e26:	4620      	mov	r0, r4
 8009e28:	f000 fab2 	bl	800a390 <__multadd>
 8009e2c:	4601      	mov	r1, r0
 8009e2e:	4606      	mov	r6, r0
 8009e30:	4650      	mov	r0, sl
 8009e32:	f000 fcc7 	bl	800a7c4 <__mcmp>
 8009e36:	2800      	cmp	r0, #0
 8009e38:	f73f adbb 	bgt.w	80099b2 <_dtoa_r+0x4ca>
 8009e3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e3e:	9d00      	ldr	r5, [sp, #0]
 8009e40:	ea6f 0b03 	mvn.w	fp, r3
 8009e44:	f04f 0800 	mov.w	r8, #0
 8009e48:	4631      	mov	r1, r6
 8009e4a:	4620      	mov	r0, r4
 8009e4c:	f000 fa7e 	bl	800a34c <_Bfree>
 8009e50:	2f00      	cmp	r7, #0
 8009e52:	f43f aeab 	beq.w	8009bac <_dtoa_r+0x6c4>
 8009e56:	f1b8 0f00 	cmp.w	r8, #0
 8009e5a:	d005      	beq.n	8009e68 <_dtoa_r+0x980>
 8009e5c:	45b8      	cmp	r8, r7
 8009e5e:	d003      	beq.n	8009e68 <_dtoa_r+0x980>
 8009e60:	4641      	mov	r1, r8
 8009e62:	4620      	mov	r0, r4
 8009e64:	f000 fa72 	bl	800a34c <_Bfree>
 8009e68:	4639      	mov	r1, r7
 8009e6a:	4620      	mov	r0, r4
 8009e6c:	f000 fa6e 	bl	800a34c <_Bfree>
 8009e70:	e69c      	b.n	8009bac <_dtoa_r+0x6c4>
 8009e72:	2600      	movs	r6, #0
 8009e74:	4637      	mov	r7, r6
 8009e76:	e7e1      	b.n	8009e3c <_dtoa_r+0x954>
 8009e78:	46bb      	mov	fp, r7
 8009e7a:	4637      	mov	r7, r6
 8009e7c:	e599      	b.n	80099b2 <_dtoa_r+0x4ca>
 8009e7e:	bf00      	nop
 8009e80:	40240000 	.word	0x40240000
 8009e84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	f000 80c8 	beq.w	800a01c <_dtoa_r+0xb34>
 8009e8c:	9b04      	ldr	r3, [sp, #16]
 8009e8e:	9301      	str	r3, [sp, #4]
 8009e90:	2d00      	cmp	r5, #0
 8009e92:	dd05      	ble.n	8009ea0 <_dtoa_r+0x9b8>
 8009e94:	4639      	mov	r1, r7
 8009e96:	462a      	mov	r2, r5
 8009e98:	4620      	mov	r0, r4
 8009e9a:	f000 fc27 	bl	800a6ec <__lshift>
 8009e9e:	4607      	mov	r7, r0
 8009ea0:	f1b8 0f00 	cmp.w	r8, #0
 8009ea4:	d05b      	beq.n	8009f5e <_dtoa_r+0xa76>
 8009ea6:	6879      	ldr	r1, [r7, #4]
 8009ea8:	4620      	mov	r0, r4
 8009eaa:	f000 fa0f 	bl	800a2cc <_Balloc>
 8009eae:	4605      	mov	r5, r0
 8009eb0:	b928      	cbnz	r0, 8009ebe <_dtoa_r+0x9d6>
 8009eb2:	4b83      	ldr	r3, [pc, #524]	; (800a0c0 <_dtoa_r+0xbd8>)
 8009eb4:	4602      	mov	r2, r0
 8009eb6:	f240 21ef 	movw	r1, #751	; 0x2ef
 8009eba:	f7ff bb2e 	b.w	800951a <_dtoa_r+0x32>
 8009ebe:	693a      	ldr	r2, [r7, #16]
 8009ec0:	3202      	adds	r2, #2
 8009ec2:	0092      	lsls	r2, r2, #2
 8009ec4:	f107 010c 	add.w	r1, r7, #12
 8009ec8:	300c      	adds	r0, #12
 8009eca:	f7ff fa74 	bl	80093b6 <memcpy>
 8009ece:	2201      	movs	r2, #1
 8009ed0:	4629      	mov	r1, r5
 8009ed2:	4620      	mov	r0, r4
 8009ed4:	f000 fc0a 	bl	800a6ec <__lshift>
 8009ed8:	9b00      	ldr	r3, [sp, #0]
 8009eda:	3301      	adds	r3, #1
 8009edc:	9304      	str	r3, [sp, #16]
 8009ede:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009ee2:	4413      	add	r3, r2
 8009ee4:	9308      	str	r3, [sp, #32]
 8009ee6:	9b02      	ldr	r3, [sp, #8]
 8009ee8:	f003 0301 	and.w	r3, r3, #1
 8009eec:	46b8      	mov	r8, r7
 8009eee:	9306      	str	r3, [sp, #24]
 8009ef0:	4607      	mov	r7, r0
 8009ef2:	9b04      	ldr	r3, [sp, #16]
 8009ef4:	4631      	mov	r1, r6
 8009ef6:	3b01      	subs	r3, #1
 8009ef8:	4650      	mov	r0, sl
 8009efa:	9301      	str	r3, [sp, #4]
 8009efc:	f7ff fa69 	bl	80093d2 <quorem>
 8009f00:	4641      	mov	r1, r8
 8009f02:	9002      	str	r0, [sp, #8]
 8009f04:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009f08:	4650      	mov	r0, sl
 8009f0a:	f000 fc5b 	bl	800a7c4 <__mcmp>
 8009f0e:	463a      	mov	r2, r7
 8009f10:	9005      	str	r0, [sp, #20]
 8009f12:	4631      	mov	r1, r6
 8009f14:	4620      	mov	r0, r4
 8009f16:	f000 fc71 	bl	800a7fc <__mdiff>
 8009f1a:	68c2      	ldr	r2, [r0, #12]
 8009f1c:	4605      	mov	r5, r0
 8009f1e:	bb02      	cbnz	r2, 8009f62 <_dtoa_r+0xa7a>
 8009f20:	4601      	mov	r1, r0
 8009f22:	4650      	mov	r0, sl
 8009f24:	f000 fc4e 	bl	800a7c4 <__mcmp>
 8009f28:	4602      	mov	r2, r0
 8009f2a:	4629      	mov	r1, r5
 8009f2c:	4620      	mov	r0, r4
 8009f2e:	9209      	str	r2, [sp, #36]	; 0x24
 8009f30:	f000 fa0c 	bl	800a34c <_Bfree>
 8009f34:	9b07      	ldr	r3, [sp, #28]
 8009f36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f38:	9d04      	ldr	r5, [sp, #16]
 8009f3a:	ea43 0102 	orr.w	r1, r3, r2
 8009f3e:	9b06      	ldr	r3, [sp, #24]
 8009f40:	4319      	orrs	r1, r3
 8009f42:	d110      	bne.n	8009f66 <_dtoa_r+0xa7e>
 8009f44:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009f48:	d029      	beq.n	8009f9e <_dtoa_r+0xab6>
 8009f4a:	9b05      	ldr	r3, [sp, #20]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	dd02      	ble.n	8009f56 <_dtoa_r+0xa6e>
 8009f50:	9b02      	ldr	r3, [sp, #8]
 8009f52:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8009f56:	9b01      	ldr	r3, [sp, #4]
 8009f58:	f883 9000 	strb.w	r9, [r3]
 8009f5c:	e774      	b.n	8009e48 <_dtoa_r+0x960>
 8009f5e:	4638      	mov	r0, r7
 8009f60:	e7ba      	b.n	8009ed8 <_dtoa_r+0x9f0>
 8009f62:	2201      	movs	r2, #1
 8009f64:	e7e1      	b.n	8009f2a <_dtoa_r+0xa42>
 8009f66:	9b05      	ldr	r3, [sp, #20]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	db04      	blt.n	8009f76 <_dtoa_r+0xa8e>
 8009f6c:	9907      	ldr	r1, [sp, #28]
 8009f6e:	430b      	orrs	r3, r1
 8009f70:	9906      	ldr	r1, [sp, #24]
 8009f72:	430b      	orrs	r3, r1
 8009f74:	d120      	bne.n	8009fb8 <_dtoa_r+0xad0>
 8009f76:	2a00      	cmp	r2, #0
 8009f78:	dded      	ble.n	8009f56 <_dtoa_r+0xa6e>
 8009f7a:	4651      	mov	r1, sl
 8009f7c:	2201      	movs	r2, #1
 8009f7e:	4620      	mov	r0, r4
 8009f80:	f000 fbb4 	bl	800a6ec <__lshift>
 8009f84:	4631      	mov	r1, r6
 8009f86:	4682      	mov	sl, r0
 8009f88:	f000 fc1c 	bl	800a7c4 <__mcmp>
 8009f8c:	2800      	cmp	r0, #0
 8009f8e:	dc03      	bgt.n	8009f98 <_dtoa_r+0xab0>
 8009f90:	d1e1      	bne.n	8009f56 <_dtoa_r+0xa6e>
 8009f92:	f019 0f01 	tst.w	r9, #1
 8009f96:	d0de      	beq.n	8009f56 <_dtoa_r+0xa6e>
 8009f98:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009f9c:	d1d8      	bne.n	8009f50 <_dtoa_r+0xa68>
 8009f9e:	9a01      	ldr	r2, [sp, #4]
 8009fa0:	2339      	movs	r3, #57	; 0x39
 8009fa2:	7013      	strb	r3, [r2, #0]
 8009fa4:	462b      	mov	r3, r5
 8009fa6:	461d      	mov	r5, r3
 8009fa8:	3b01      	subs	r3, #1
 8009faa:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009fae:	2a39      	cmp	r2, #57	; 0x39
 8009fb0:	d06c      	beq.n	800a08c <_dtoa_r+0xba4>
 8009fb2:	3201      	adds	r2, #1
 8009fb4:	701a      	strb	r2, [r3, #0]
 8009fb6:	e747      	b.n	8009e48 <_dtoa_r+0x960>
 8009fb8:	2a00      	cmp	r2, #0
 8009fba:	dd07      	ble.n	8009fcc <_dtoa_r+0xae4>
 8009fbc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009fc0:	d0ed      	beq.n	8009f9e <_dtoa_r+0xab6>
 8009fc2:	9a01      	ldr	r2, [sp, #4]
 8009fc4:	f109 0301 	add.w	r3, r9, #1
 8009fc8:	7013      	strb	r3, [r2, #0]
 8009fca:	e73d      	b.n	8009e48 <_dtoa_r+0x960>
 8009fcc:	9b04      	ldr	r3, [sp, #16]
 8009fce:	9a08      	ldr	r2, [sp, #32]
 8009fd0:	f803 9c01 	strb.w	r9, [r3, #-1]
 8009fd4:	4293      	cmp	r3, r2
 8009fd6:	d043      	beq.n	800a060 <_dtoa_r+0xb78>
 8009fd8:	4651      	mov	r1, sl
 8009fda:	2300      	movs	r3, #0
 8009fdc:	220a      	movs	r2, #10
 8009fde:	4620      	mov	r0, r4
 8009fe0:	f000 f9d6 	bl	800a390 <__multadd>
 8009fe4:	45b8      	cmp	r8, r7
 8009fe6:	4682      	mov	sl, r0
 8009fe8:	f04f 0300 	mov.w	r3, #0
 8009fec:	f04f 020a 	mov.w	r2, #10
 8009ff0:	4641      	mov	r1, r8
 8009ff2:	4620      	mov	r0, r4
 8009ff4:	d107      	bne.n	800a006 <_dtoa_r+0xb1e>
 8009ff6:	f000 f9cb 	bl	800a390 <__multadd>
 8009ffa:	4680      	mov	r8, r0
 8009ffc:	4607      	mov	r7, r0
 8009ffe:	9b04      	ldr	r3, [sp, #16]
 800a000:	3301      	adds	r3, #1
 800a002:	9304      	str	r3, [sp, #16]
 800a004:	e775      	b.n	8009ef2 <_dtoa_r+0xa0a>
 800a006:	f000 f9c3 	bl	800a390 <__multadd>
 800a00a:	4639      	mov	r1, r7
 800a00c:	4680      	mov	r8, r0
 800a00e:	2300      	movs	r3, #0
 800a010:	220a      	movs	r2, #10
 800a012:	4620      	mov	r0, r4
 800a014:	f000 f9bc 	bl	800a390 <__multadd>
 800a018:	4607      	mov	r7, r0
 800a01a:	e7f0      	b.n	8009ffe <_dtoa_r+0xb16>
 800a01c:	9b04      	ldr	r3, [sp, #16]
 800a01e:	9301      	str	r3, [sp, #4]
 800a020:	9d00      	ldr	r5, [sp, #0]
 800a022:	4631      	mov	r1, r6
 800a024:	4650      	mov	r0, sl
 800a026:	f7ff f9d4 	bl	80093d2 <quorem>
 800a02a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a02e:	9b00      	ldr	r3, [sp, #0]
 800a030:	f805 9b01 	strb.w	r9, [r5], #1
 800a034:	1aea      	subs	r2, r5, r3
 800a036:	9b01      	ldr	r3, [sp, #4]
 800a038:	4293      	cmp	r3, r2
 800a03a:	dd07      	ble.n	800a04c <_dtoa_r+0xb64>
 800a03c:	4651      	mov	r1, sl
 800a03e:	2300      	movs	r3, #0
 800a040:	220a      	movs	r2, #10
 800a042:	4620      	mov	r0, r4
 800a044:	f000 f9a4 	bl	800a390 <__multadd>
 800a048:	4682      	mov	sl, r0
 800a04a:	e7ea      	b.n	800a022 <_dtoa_r+0xb3a>
 800a04c:	9b01      	ldr	r3, [sp, #4]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	bfc8      	it	gt
 800a052:	461d      	movgt	r5, r3
 800a054:	9b00      	ldr	r3, [sp, #0]
 800a056:	bfd8      	it	le
 800a058:	2501      	movle	r5, #1
 800a05a:	441d      	add	r5, r3
 800a05c:	f04f 0800 	mov.w	r8, #0
 800a060:	4651      	mov	r1, sl
 800a062:	2201      	movs	r2, #1
 800a064:	4620      	mov	r0, r4
 800a066:	f000 fb41 	bl	800a6ec <__lshift>
 800a06a:	4631      	mov	r1, r6
 800a06c:	4682      	mov	sl, r0
 800a06e:	f000 fba9 	bl	800a7c4 <__mcmp>
 800a072:	2800      	cmp	r0, #0
 800a074:	dc96      	bgt.n	8009fa4 <_dtoa_r+0xabc>
 800a076:	d102      	bne.n	800a07e <_dtoa_r+0xb96>
 800a078:	f019 0f01 	tst.w	r9, #1
 800a07c:	d192      	bne.n	8009fa4 <_dtoa_r+0xabc>
 800a07e:	462b      	mov	r3, r5
 800a080:	461d      	mov	r5, r3
 800a082:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a086:	2a30      	cmp	r2, #48	; 0x30
 800a088:	d0fa      	beq.n	800a080 <_dtoa_r+0xb98>
 800a08a:	e6dd      	b.n	8009e48 <_dtoa_r+0x960>
 800a08c:	9a00      	ldr	r2, [sp, #0]
 800a08e:	429a      	cmp	r2, r3
 800a090:	d189      	bne.n	8009fa6 <_dtoa_r+0xabe>
 800a092:	f10b 0b01 	add.w	fp, fp, #1
 800a096:	2331      	movs	r3, #49	; 0x31
 800a098:	e796      	b.n	8009fc8 <_dtoa_r+0xae0>
 800a09a:	4b0a      	ldr	r3, [pc, #40]	; (800a0c4 <_dtoa_r+0xbdc>)
 800a09c:	f7ff ba99 	b.w	80095d2 <_dtoa_r+0xea>
 800a0a0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	f47f aa6d 	bne.w	8009582 <_dtoa_r+0x9a>
 800a0a8:	4b07      	ldr	r3, [pc, #28]	; (800a0c8 <_dtoa_r+0xbe0>)
 800a0aa:	f7ff ba92 	b.w	80095d2 <_dtoa_r+0xea>
 800a0ae:	9b01      	ldr	r3, [sp, #4]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	dcb5      	bgt.n	800a020 <_dtoa_r+0xb38>
 800a0b4:	9b07      	ldr	r3, [sp, #28]
 800a0b6:	2b02      	cmp	r3, #2
 800a0b8:	f73f aeb1 	bgt.w	8009e1e <_dtoa_r+0x936>
 800a0bc:	e7b0      	b.n	800a020 <_dtoa_r+0xb38>
 800a0be:	bf00      	nop
 800a0c0:	0802cbdc 	.word	0x0802cbdc
 800a0c4:	0802cb3c 	.word	0x0802cb3c
 800a0c8:	0802cb60 	.word	0x0802cb60

0800a0cc <_free_r>:
 800a0cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a0ce:	2900      	cmp	r1, #0
 800a0d0:	d044      	beq.n	800a15c <_free_r+0x90>
 800a0d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a0d6:	9001      	str	r0, [sp, #4]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	f1a1 0404 	sub.w	r4, r1, #4
 800a0de:	bfb8      	it	lt
 800a0e0:	18e4      	addlt	r4, r4, r3
 800a0e2:	f000 f8e7 	bl	800a2b4 <__malloc_lock>
 800a0e6:	4a1e      	ldr	r2, [pc, #120]	; (800a160 <_free_r+0x94>)
 800a0e8:	9801      	ldr	r0, [sp, #4]
 800a0ea:	6813      	ldr	r3, [r2, #0]
 800a0ec:	b933      	cbnz	r3, 800a0fc <_free_r+0x30>
 800a0ee:	6063      	str	r3, [r4, #4]
 800a0f0:	6014      	str	r4, [r2, #0]
 800a0f2:	b003      	add	sp, #12
 800a0f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a0f8:	f000 b8e2 	b.w	800a2c0 <__malloc_unlock>
 800a0fc:	42a3      	cmp	r3, r4
 800a0fe:	d908      	bls.n	800a112 <_free_r+0x46>
 800a100:	6825      	ldr	r5, [r4, #0]
 800a102:	1961      	adds	r1, r4, r5
 800a104:	428b      	cmp	r3, r1
 800a106:	bf01      	itttt	eq
 800a108:	6819      	ldreq	r1, [r3, #0]
 800a10a:	685b      	ldreq	r3, [r3, #4]
 800a10c:	1949      	addeq	r1, r1, r5
 800a10e:	6021      	streq	r1, [r4, #0]
 800a110:	e7ed      	b.n	800a0ee <_free_r+0x22>
 800a112:	461a      	mov	r2, r3
 800a114:	685b      	ldr	r3, [r3, #4]
 800a116:	b10b      	cbz	r3, 800a11c <_free_r+0x50>
 800a118:	42a3      	cmp	r3, r4
 800a11a:	d9fa      	bls.n	800a112 <_free_r+0x46>
 800a11c:	6811      	ldr	r1, [r2, #0]
 800a11e:	1855      	adds	r5, r2, r1
 800a120:	42a5      	cmp	r5, r4
 800a122:	d10b      	bne.n	800a13c <_free_r+0x70>
 800a124:	6824      	ldr	r4, [r4, #0]
 800a126:	4421      	add	r1, r4
 800a128:	1854      	adds	r4, r2, r1
 800a12a:	42a3      	cmp	r3, r4
 800a12c:	6011      	str	r1, [r2, #0]
 800a12e:	d1e0      	bne.n	800a0f2 <_free_r+0x26>
 800a130:	681c      	ldr	r4, [r3, #0]
 800a132:	685b      	ldr	r3, [r3, #4]
 800a134:	6053      	str	r3, [r2, #4]
 800a136:	440c      	add	r4, r1
 800a138:	6014      	str	r4, [r2, #0]
 800a13a:	e7da      	b.n	800a0f2 <_free_r+0x26>
 800a13c:	d902      	bls.n	800a144 <_free_r+0x78>
 800a13e:	230c      	movs	r3, #12
 800a140:	6003      	str	r3, [r0, #0]
 800a142:	e7d6      	b.n	800a0f2 <_free_r+0x26>
 800a144:	6825      	ldr	r5, [r4, #0]
 800a146:	1961      	adds	r1, r4, r5
 800a148:	428b      	cmp	r3, r1
 800a14a:	bf04      	itt	eq
 800a14c:	6819      	ldreq	r1, [r3, #0]
 800a14e:	685b      	ldreq	r3, [r3, #4]
 800a150:	6063      	str	r3, [r4, #4]
 800a152:	bf04      	itt	eq
 800a154:	1949      	addeq	r1, r1, r5
 800a156:	6021      	streq	r1, [r4, #0]
 800a158:	6054      	str	r4, [r2, #4]
 800a15a:	e7ca      	b.n	800a0f2 <_free_r+0x26>
 800a15c:	b003      	add	sp, #12
 800a15e:	bd30      	pop	{r4, r5, pc}
 800a160:	20002ee0 	.word	0x20002ee0

0800a164 <malloc>:
 800a164:	4b02      	ldr	r3, [pc, #8]	; (800a170 <malloc+0xc>)
 800a166:	4601      	mov	r1, r0
 800a168:	6818      	ldr	r0, [r3, #0]
 800a16a:	f000 b823 	b.w	800a1b4 <_malloc_r>
 800a16e:	bf00      	nop
 800a170:	20000070 	.word	0x20000070

0800a174 <sbrk_aligned>:
 800a174:	b570      	push	{r4, r5, r6, lr}
 800a176:	4e0e      	ldr	r6, [pc, #56]	; (800a1b0 <sbrk_aligned+0x3c>)
 800a178:	460c      	mov	r4, r1
 800a17a:	6831      	ldr	r1, [r6, #0]
 800a17c:	4605      	mov	r5, r0
 800a17e:	b911      	cbnz	r1, 800a186 <sbrk_aligned+0x12>
 800a180:	f001 f808 	bl	800b194 <_sbrk_r>
 800a184:	6030      	str	r0, [r6, #0]
 800a186:	4621      	mov	r1, r4
 800a188:	4628      	mov	r0, r5
 800a18a:	f001 f803 	bl	800b194 <_sbrk_r>
 800a18e:	1c43      	adds	r3, r0, #1
 800a190:	d00a      	beq.n	800a1a8 <sbrk_aligned+0x34>
 800a192:	1cc4      	adds	r4, r0, #3
 800a194:	f024 0403 	bic.w	r4, r4, #3
 800a198:	42a0      	cmp	r0, r4
 800a19a:	d007      	beq.n	800a1ac <sbrk_aligned+0x38>
 800a19c:	1a21      	subs	r1, r4, r0
 800a19e:	4628      	mov	r0, r5
 800a1a0:	f000 fff8 	bl	800b194 <_sbrk_r>
 800a1a4:	3001      	adds	r0, #1
 800a1a6:	d101      	bne.n	800a1ac <sbrk_aligned+0x38>
 800a1a8:	f04f 34ff 	mov.w	r4, #4294967295
 800a1ac:	4620      	mov	r0, r4
 800a1ae:	bd70      	pop	{r4, r5, r6, pc}
 800a1b0:	20002ee4 	.word	0x20002ee4

0800a1b4 <_malloc_r>:
 800a1b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a1b8:	1ccd      	adds	r5, r1, #3
 800a1ba:	f025 0503 	bic.w	r5, r5, #3
 800a1be:	3508      	adds	r5, #8
 800a1c0:	2d0c      	cmp	r5, #12
 800a1c2:	bf38      	it	cc
 800a1c4:	250c      	movcc	r5, #12
 800a1c6:	2d00      	cmp	r5, #0
 800a1c8:	4607      	mov	r7, r0
 800a1ca:	db01      	blt.n	800a1d0 <_malloc_r+0x1c>
 800a1cc:	42a9      	cmp	r1, r5
 800a1ce:	d905      	bls.n	800a1dc <_malloc_r+0x28>
 800a1d0:	230c      	movs	r3, #12
 800a1d2:	603b      	str	r3, [r7, #0]
 800a1d4:	2600      	movs	r6, #0
 800a1d6:	4630      	mov	r0, r6
 800a1d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a1dc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a2b0 <_malloc_r+0xfc>
 800a1e0:	f000 f868 	bl	800a2b4 <__malloc_lock>
 800a1e4:	f8d8 3000 	ldr.w	r3, [r8]
 800a1e8:	461c      	mov	r4, r3
 800a1ea:	bb5c      	cbnz	r4, 800a244 <_malloc_r+0x90>
 800a1ec:	4629      	mov	r1, r5
 800a1ee:	4638      	mov	r0, r7
 800a1f0:	f7ff ffc0 	bl	800a174 <sbrk_aligned>
 800a1f4:	1c43      	adds	r3, r0, #1
 800a1f6:	4604      	mov	r4, r0
 800a1f8:	d155      	bne.n	800a2a6 <_malloc_r+0xf2>
 800a1fa:	f8d8 4000 	ldr.w	r4, [r8]
 800a1fe:	4626      	mov	r6, r4
 800a200:	2e00      	cmp	r6, #0
 800a202:	d145      	bne.n	800a290 <_malloc_r+0xdc>
 800a204:	2c00      	cmp	r4, #0
 800a206:	d048      	beq.n	800a29a <_malloc_r+0xe6>
 800a208:	6823      	ldr	r3, [r4, #0]
 800a20a:	4631      	mov	r1, r6
 800a20c:	4638      	mov	r0, r7
 800a20e:	eb04 0903 	add.w	r9, r4, r3
 800a212:	f000 ffbf 	bl	800b194 <_sbrk_r>
 800a216:	4581      	cmp	r9, r0
 800a218:	d13f      	bne.n	800a29a <_malloc_r+0xe6>
 800a21a:	6821      	ldr	r1, [r4, #0]
 800a21c:	1a6d      	subs	r5, r5, r1
 800a21e:	4629      	mov	r1, r5
 800a220:	4638      	mov	r0, r7
 800a222:	f7ff ffa7 	bl	800a174 <sbrk_aligned>
 800a226:	3001      	adds	r0, #1
 800a228:	d037      	beq.n	800a29a <_malloc_r+0xe6>
 800a22a:	6823      	ldr	r3, [r4, #0]
 800a22c:	442b      	add	r3, r5
 800a22e:	6023      	str	r3, [r4, #0]
 800a230:	f8d8 3000 	ldr.w	r3, [r8]
 800a234:	2b00      	cmp	r3, #0
 800a236:	d038      	beq.n	800a2aa <_malloc_r+0xf6>
 800a238:	685a      	ldr	r2, [r3, #4]
 800a23a:	42a2      	cmp	r2, r4
 800a23c:	d12b      	bne.n	800a296 <_malloc_r+0xe2>
 800a23e:	2200      	movs	r2, #0
 800a240:	605a      	str	r2, [r3, #4]
 800a242:	e00f      	b.n	800a264 <_malloc_r+0xb0>
 800a244:	6822      	ldr	r2, [r4, #0]
 800a246:	1b52      	subs	r2, r2, r5
 800a248:	d41f      	bmi.n	800a28a <_malloc_r+0xd6>
 800a24a:	2a0b      	cmp	r2, #11
 800a24c:	d917      	bls.n	800a27e <_malloc_r+0xca>
 800a24e:	1961      	adds	r1, r4, r5
 800a250:	42a3      	cmp	r3, r4
 800a252:	6025      	str	r5, [r4, #0]
 800a254:	bf18      	it	ne
 800a256:	6059      	strne	r1, [r3, #4]
 800a258:	6863      	ldr	r3, [r4, #4]
 800a25a:	bf08      	it	eq
 800a25c:	f8c8 1000 	streq.w	r1, [r8]
 800a260:	5162      	str	r2, [r4, r5]
 800a262:	604b      	str	r3, [r1, #4]
 800a264:	4638      	mov	r0, r7
 800a266:	f104 060b 	add.w	r6, r4, #11
 800a26a:	f000 f829 	bl	800a2c0 <__malloc_unlock>
 800a26e:	f026 0607 	bic.w	r6, r6, #7
 800a272:	1d23      	adds	r3, r4, #4
 800a274:	1af2      	subs	r2, r6, r3
 800a276:	d0ae      	beq.n	800a1d6 <_malloc_r+0x22>
 800a278:	1b9b      	subs	r3, r3, r6
 800a27a:	50a3      	str	r3, [r4, r2]
 800a27c:	e7ab      	b.n	800a1d6 <_malloc_r+0x22>
 800a27e:	42a3      	cmp	r3, r4
 800a280:	6862      	ldr	r2, [r4, #4]
 800a282:	d1dd      	bne.n	800a240 <_malloc_r+0x8c>
 800a284:	f8c8 2000 	str.w	r2, [r8]
 800a288:	e7ec      	b.n	800a264 <_malloc_r+0xb0>
 800a28a:	4623      	mov	r3, r4
 800a28c:	6864      	ldr	r4, [r4, #4]
 800a28e:	e7ac      	b.n	800a1ea <_malloc_r+0x36>
 800a290:	4634      	mov	r4, r6
 800a292:	6876      	ldr	r6, [r6, #4]
 800a294:	e7b4      	b.n	800a200 <_malloc_r+0x4c>
 800a296:	4613      	mov	r3, r2
 800a298:	e7cc      	b.n	800a234 <_malloc_r+0x80>
 800a29a:	230c      	movs	r3, #12
 800a29c:	603b      	str	r3, [r7, #0]
 800a29e:	4638      	mov	r0, r7
 800a2a0:	f000 f80e 	bl	800a2c0 <__malloc_unlock>
 800a2a4:	e797      	b.n	800a1d6 <_malloc_r+0x22>
 800a2a6:	6025      	str	r5, [r4, #0]
 800a2a8:	e7dc      	b.n	800a264 <_malloc_r+0xb0>
 800a2aa:	605b      	str	r3, [r3, #4]
 800a2ac:	deff      	udf	#255	; 0xff
 800a2ae:	bf00      	nop
 800a2b0:	20002ee0 	.word	0x20002ee0

0800a2b4 <__malloc_lock>:
 800a2b4:	4801      	ldr	r0, [pc, #4]	; (800a2bc <__malloc_lock+0x8>)
 800a2b6:	f7ff b87c 	b.w	80093b2 <__retarget_lock_acquire_recursive>
 800a2ba:	bf00      	nop
 800a2bc:	20002edc 	.word	0x20002edc

0800a2c0 <__malloc_unlock>:
 800a2c0:	4801      	ldr	r0, [pc, #4]	; (800a2c8 <__malloc_unlock+0x8>)
 800a2c2:	f7ff b877 	b.w	80093b4 <__retarget_lock_release_recursive>
 800a2c6:	bf00      	nop
 800a2c8:	20002edc 	.word	0x20002edc

0800a2cc <_Balloc>:
 800a2cc:	b570      	push	{r4, r5, r6, lr}
 800a2ce:	69c6      	ldr	r6, [r0, #28]
 800a2d0:	4604      	mov	r4, r0
 800a2d2:	460d      	mov	r5, r1
 800a2d4:	b976      	cbnz	r6, 800a2f4 <_Balloc+0x28>
 800a2d6:	2010      	movs	r0, #16
 800a2d8:	f7ff ff44 	bl	800a164 <malloc>
 800a2dc:	4602      	mov	r2, r0
 800a2de:	61e0      	str	r0, [r4, #28]
 800a2e0:	b920      	cbnz	r0, 800a2ec <_Balloc+0x20>
 800a2e2:	4b18      	ldr	r3, [pc, #96]	; (800a344 <_Balloc+0x78>)
 800a2e4:	4818      	ldr	r0, [pc, #96]	; (800a348 <_Balloc+0x7c>)
 800a2e6:	216b      	movs	r1, #107	; 0x6b
 800a2e8:	f000 ff64 	bl	800b1b4 <__assert_func>
 800a2ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a2f0:	6006      	str	r6, [r0, #0]
 800a2f2:	60c6      	str	r6, [r0, #12]
 800a2f4:	69e6      	ldr	r6, [r4, #28]
 800a2f6:	68f3      	ldr	r3, [r6, #12]
 800a2f8:	b183      	cbz	r3, 800a31c <_Balloc+0x50>
 800a2fa:	69e3      	ldr	r3, [r4, #28]
 800a2fc:	68db      	ldr	r3, [r3, #12]
 800a2fe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a302:	b9b8      	cbnz	r0, 800a334 <_Balloc+0x68>
 800a304:	2101      	movs	r1, #1
 800a306:	fa01 f605 	lsl.w	r6, r1, r5
 800a30a:	1d72      	adds	r2, r6, #5
 800a30c:	0092      	lsls	r2, r2, #2
 800a30e:	4620      	mov	r0, r4
 800a310:	f000 ff6e 	bl	800b1f0 <_calloc_r>
 800a314:	b160      	cbz	r0, 800a330 <_Balloc+0x64>
 800a316:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a31a:	e00e      	b.n	800a33a <_Balloc+0x6e>
 800a31c:	2221      	movs	r2, #33	; 0x21
 800a31e:	2104      	movs	r1, #4
 800a320:	4620      	mov	r0, r4
 800a322:	f000 ff65 	bl	800b1f0 <_calloc_r>
 800a326:	69e3      	ldr	r3, [r4, #28]
 800a328:	60f0      	str	r0, [r6, #12]
 800a32a:	68db      	ldr	r3, [r3, #12]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d1e4      	bne.n	800a2fa <_Balloc+0x2e>
 800a330:	2000      	movs	r0, #0
 800a332:	bd70      	pop	{r4, r5, r6, pc}
 800a334:	6802      	ldr	r2, [r0, #0]
 800a336:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a33a:	2300      	movs	r3, #0
 800a33c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a340:	e7f7      	b.n	800a332 <_Balloc+0x66>
 800a342:	bf00      	nop
 800a344:	0802cb6d 	.word	0x0802cb6d
 800a348:	0802cbed 	.word	0x0802cbed

0800a34c <_Bfree>:
 800a34c:	b570      	push	{r4, r5, r6, lr}
 800a34e:	69c6      	ldr	r6, [r0, #28]
 800a350:	4605      	mov	r5, r0
 800a352:	460c      	mov	r4, r1
 800a354:	b976      	cbnz	r6, 800a374 <_Bfree+0x28>
 800a356:	2010      	movs	r0, #16
 800a358:	f7ff ff04 	bl	800a164 <malloc>
 800a35c:	4602      	mov	r2, r0
 800a35e:	61e8      	str	r0, [r5, #28]
 800a360:	b920      	cbnz	r0, 800a36c <_Bfree+0x20>
 800a362:	4b09      	ldr	r3, [pc, #36]	; (800a388 <_Bfree+0x3c>)
 800a364:	4809      	ldr	r0, [pc, #36]	; (800a38c <_Bfree+0x40>)
 800a366:	218f      	movs	r1, #143	; 0x8f
 800a368:	f000 ff24 	bl	800b1b4 <__assert_func>
 800a36c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a370:	6006      	str	r6, [r0, #0]
 800a372:	60c6      	str	r6, [r0, #12]
 800a374:	b13c      	cbz	r4, 800a386 <_Bfree+0x3a>
 800a376:	69eb      	ldr	r3, [r5, #28]
 800a378:	6862      	ldr	r2, [r4, #4]
 800a37a:	68db      	ldr	r3, [r3, #12]
 800a37c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a380:	6021      	str	r1, [r4, #0]
 800a382:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a386:	bd70      	pop	{r4, r5, r6, pc}
 800a388:	0802cb6d 	.word	0x0802cb6d
 800a38c:	0802cbed 	.word	0x0802cbed

0800a390 <__multadd>:
 800a390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a394:	690d      	ldr	r5, [r1, #16]
 800a396:	4607      	mov	r7, r0
 800a398:	460c      	mov	r4, r1
 800a39a:	461e      	mov	r6, r3
 800a39c:	f101 0c14 	add.w	ip, r1, #20
 800a3a0:	2000      	movs	r0, #0
 800a3a2:	f8dc 3000 	ldr.w	r3, [ip]
 800a3a6:	b299      	uxth	r1, r3
 800a3a8:	fb02 6101 	mla	r1, r2, r1, r6
 800a3ac:	0c1e      	lsrs	r6, r3, #16
 800a3ae:	0c0b      	lsrs	r3, r1, #16
 800a3b0:	fb02 3306 	mla	r3, r2, r6, r3
 800a3b4:	b289      	uxth	r1, r1
 800a3b6:	3001      	adds	r0, #1
 800a3b8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a3bc:	4285      	cmp	r5, r0
 800a3be:	f84c 1b04 	str.w	r1, [ip], #4
 800a3c2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a3c6:	dcec      	bgt.n	800a3a2 <__multadd+0x12>
 800a3c8:	b30e      	cbz	r6, 800a40e <__multadd+0x7e>
 800a3ca:	68a3      	ldr	r3, [r4, #8]
 800a3cc:	42ab      	cmp	r3, r5
 800a3ce:	dc19      	bgt.n	800a404 <__multadd+0x74>
 800a3d0:	6861      	ldr	r1, [r4, #4]
 800a3d2:	4638      	mov	r0, r7
 800a3d4:	3101      	adds	r1, #1
 800a3d6:	f7ff ff79 	bl	800a2cc <_Balloc>
 800a3da:	4680      	mov	r8, r0
 800a3dc:	b928      	cbnz	r0, 800a3ea <__multadd+0x5a>
 800a3de:	4602      	mov	r2, r0
 800a3e0:	4b0c      	ldr	r3, [pc, #48]	; (800a414 <__multadd+0x84>)
 800a3e2:	480d      	ldr	r0, [pc, #52]	; (800a418 <__multadd+0x88>)
 800a3e4:	21ba      	movs	r1, #186	; 0xba
 800a3e6:	f000 fee5 	bl	800b1b4 <__assert_func>
 800a3ea:	6922      	ldr	r2, [r4, #16]
 800a3ec:	3202      	adds	r2, #2
 800a3ee:	f104 010c 	add.w	r1, r4, #12
 800a3f2:	0092      	lsls	r2, r2, #2
 800a3f4:	300c      	adds	r0, #12
 800a3f6:	f7fe ffde 	bl	80093b6 <memcpy>
 800a3fa:	4621      	mov	r1, r4
 800a3fc:	4638      	mov	r0, r7
 800a3fe:	f7ff ffa5 	bl	800a34c <_Bfree>
 800a402:	4644      	mov	r4, r8
 800a404:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a408:	3501      	adds	r5, #1
 800a40a:	615e      	str	r6, [r3, #20]
 800a40c:	6125      	str	r5, [r4, #16]
 800a40e:	4620      	mov	r0, r4
 800a410:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a414:	0802cbdc 	.word	0x0802cbdc
 800a418:	0802cbed 	.word	0x0802cbed

0800a41c <__hi0bits>:
 800a41c:	0c03      	lsrs	r3, r0, #16
 800a41e:	041b      	lsls	r3, r3, #16
 800a420:	b9d3      	cbnz	r3, 800a458 <__hi0bits+0x3c>
 800a422:	0400      	lsls	r0, r0, #16
 800a424:	2310      	movs	r3, #16
 800a426:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a42a:	bf04      	itt	eq
 800a42c:	0200      	lsleq	r0, r0, #8
 800a42e:	3308      	addeq	r3, #8
 800a430:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a434:	bf04      	itt	eq
 800a436:	0100      	lsleq	r0, r0, #4
 800a438:	3304      	addeq	r3, #4
 800a43a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a43e:	bf04      	itt	eq
 800a440:	0080      	lsleq	r0, r0, #2
 800a442:	3302      	addeq	r3, #2
 800a444:	2800      	cmp	r0, #0
 800a446:	db05      	blt.n	800a454 <__hi0bits+0x38>
 800a448:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a44c:	f103 0301 	add.w	r3, r3, #1
 800a450:	bf08      	it	eq
 800a452:	2320      	moveq	r3, #32
 800a454:	4618      	mov	r0, r3
 800a456:	4770      	bx	lr
 800a458:	2300      	movs	r3, #0
 800a45a:	e7e4      	b.n	800a426 <__hi0bits+0xa>

0800a45c <__lo0bits>:
 800a45c:	6803      	ldr	r3, [r0, #0]
 800a45e:	f013 0207 	ands.w	r2, r3, #7
 800a462:	d00c      	beq.n	800a47e <__lo0bits+0x22>
 800a464:	07d9      	lsls	r1, r3, #31
 800a466:	d422      	bmi.n	800a4ae <__lo0bits+0x52>
 800a468:	079a      	lsls	r2, r3, #30
 800a46a:	bf49      	itett	mi
 800a46c:	085b      	lsrmi	r3, r3, #1
 800a46e:	089b      	lsrpl	r3, r3, #2
 800a470:	6003      	strmi	r3, [r0, #0]
 800a472:	2201      	movmi	r2, #1
 800a474:	bf5c      	itt	pl
 800a476:	6003      	strpl	r3, [r0, #0]
 800a478:	2202      	movpl	r2, #2
 800a47a:	4610      	mov	r0, r2
 800a47c:	4770      	bx	lr
 800a47e:	b299      	uxth	r1, r3
 800a480:	b909      	cbnz	r1, 800a486 <__lo0bits+0x2a>
 800a482:	0c1b      	lsrs	r3, r3, #16
 800a484:	2210      	movs	r2, #16
 800a486:	b2d9      	uxtb	r1, r3
 800a488:	b909      	cbnz	r1, 800a48e <__lo0bits+0x32>
 800a48a:	3208      	adds	r2, #8
 800a48c:	0a1b      	lsrs	r3, r3, #8
 800a48e:	0719      	lsls	r1, r3, #28
 800a490:	bf04      	itt	eq
 800a492:	091b      	lsreq	r3, r3, #4
 800a494:	3204      	addeq	r2, #4
 800a496:	0799      	lsls	r1, r3, #30
 800a498:	bf04      	itt	eq
 800a49a:	089b      	lsreq	r3, r3, #2
 800a49c:	3202      	addeq	r2, #2
 800a49e:	07d9      	lsls	r1, r3, #31
 800a4a0:	d403      	bmi.n	800a4aa <__lo0bits+0x4e>
 800a4a2:	085b      	lsrs	r3, r3, #1
 800a4a4:	f102 0201 	add.w	r2, r2, #1
 800a4a8:	d003      	beq.n	800a4b2 <__lo0bits+0x56>
 800a4aa:	6003      	str	r3, [r0, #0]
 800a4ac:	e7e5      	b.n	800a47a <__lo0bits+0x1e>
 800a4ae:	2200      	movs	r2, #0
 800a4b0:	e7e3      	b.n	800a47a <__lo0bits+0x1e>
 800a4b2:	2220      	movs	r2, #32
 800a4b4:	e7e1      	b.n	800a47a <__lo0bits+0x1e>
	...

0800a4b8 <__i2b>:
 800a4b8:	b510      	push	{r4, lr}
 800a4ba:	460c      	mov	r4, r1
 800a4bc:	2101      	movs	r1, #1
 800a4be:	f7ff ff05 	bl	800a2cc <_Balloc>
 800a4c2:	4602      	mov	r2, r0
 800a4c4:	b928      	cbnz	r0, 800a4d2 <__i2b+0x1a>
 800a4c6:	4b05      	ldr	r3, [pc, #20]	; (800a4dc <__i2b+0x24>)
 800a4c8:	4805      	ldr	r0, [pc, #20]	; (800a4e0 <__i2b+0x28>)
 800a4ca:	f240 1145 	movw	r1, #325	; 0x145
 800a4ce:	f000 fe71 	bl	800b1b4 <__assert_func>
 800a4d2:	2301      	movs	r3, #1
 800a4d4:	6144      	str	r4, [r0, #20]
 800a4d6:	6103      	str	r3, [r0, #16]
 800a4d8:	bd10      	pop	{r4, pc}
 800a4da:	bf00      	nop
 800a4dc:	0802cbdc 	.word	0x0802cbdc
 800a4e0:	0802cbed 	.word	0x0802cbed

0800a4e4 <__multiply>:
 800a4e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4e8:	4691      	mov	r9, r2
 800a4ea:	690a      	ldr	r2, [r1, #16]
 800a4ec:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a4f0:	429a      	cmp	r2, r3
 800a4f2:	bfb8      	it	lt
 800a4f4:	460b      	movlt	r3, r1
 800a4f6:	460c      	mov	r4, r1
 800a4f8:	bfbc      	itt	lt
 800a4fa:	464c      	movlt	r4, r9
 800a4fc:	4699      	movlt	r9, r3
 800a4fe:	6927      	ldr	r7, [r4, #16]
 800a500:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a504:	68a3      	ldr	r3, [r4, #8]
 800a506:	6861      	ldr	r1, [r4, #4]
 800a508:	eb07 060a 	add.w	r6, r7, sl
 800a50c:	42b3      	cmp	r3, r6
 800a50e:	b085      	sub	sp, #20
 800a510:	bfb8      	it	lt
 800a512:	3101      	addlt	r1, #1
 800a514:	f7ff feda 	bl	800a2cc <_Balloc>
 800a518:	b930      	cbnz	r0, 800a528 <__multiply+0x44>
 800a51a:	4602      	mov	r2, r0
 800a51c:	4b44      	ldr	r3, [pc, #272]	; (800a630 <__multiply+0x14c>)
 800a51e:	4845      	ldr	r0, [pc, #276]	; (800a634 <__multiply+0x150>)
 800a520:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800a524:	f000 fe46 	bl	800b1b4 <__assert_func>
 800a528:	f100 0514 	add.w	r5, r0, #20
 800a52c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a530:	462b      	mov	r3, r5
 800a532:	2200      	movs	r2, #0
 800a534:	4543      	cmp	r3, r8
 800a536:	d321      	bcc.n	800a57c <__multiply+0x98>
 800a538:	f104 0314 	add.w	r3, r4, #20
 800a53c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a540:	f109 0314 	add.w	r3, r9, #20
 800a544:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a548:	9202      	str	r2, [sp, #8]
 800a54a:	1b3a      	subs	r2, r7, r4
 800a54c:	3a15      	subs	r2, #21
 800a54e:	f022 0203 	bic.w	r2, r2, #3
 800a552:	3204      	adds	r2, #4
 800a554:	f104 0115 	add.w	r1, r4, #21
 800a558:	428f      	cmp	r7, r1
 800a55a:	bf38      	it	cc
 800a55c:	2204      	movcc	r2, #4
 800a55e:	9201      	str	r2, [sp, #4]
 800a560:	9a02      	ldr	r2, [sp, #8]
 800a562:	9303      	str	r3, [sp, #12]
 800a564:	429a      	cmp	r2, r3
 800a566:	d80c      	bhi.n	800a582 <__multiply+0x9e>
 800a568:	2e00      	cmp	r6, #0
 800a56a:	dd03      	ble.n	800a574 <__multiply+0x90>
 800a56c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a570:	2b00      	cmp	r3, #0
 800a572:	d05b      	beq.n	800a62c <__multiply+0x148>
 800a574:	6106      	str	r6, [r0, #16]
 800a576:	b005      	add	sp, #20
 800a578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a57c:	f843 2b04 	str.w	r2, [r3], #4
 800a580:	e7d8      	b.n	800a534 <__multiply+0x50>
 800a582:	f8b3 a000 	ldrh.w	sl, [r3]
 800a586:	f1ba 0f00 	cmp.w	sl, #0
 800a58a:	d024      	beq.n	800a5d6 <__multiply+0xf2>
 800a58c:	f104 0e14 	add.w	lr, r4, #20
 800a590:	46a9      	mov	r9, r5
 800a592:	f04f 0c00 	mov.w	ip, #0
 800a596:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a59a:	f8d9 1000 	ldr.w	r1, [r9]
 800a59e:	fa1f fb82 	uxth.w	fp, r2
 800a5a2:	b289      	uxth	r1, r1
 800a5a4:	fb0a 110b 	mla	r1, sl, fp, r1
 800a5a8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a5ac:	f8d9 2000 	ldr.w	r2, [r9]
 800a5b0:	4461      	add	r1, ip
 800a5b2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a5b6:	fb0a c20b 	mla	r2, sl, fp, ip
 800a5ba:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a5be:	b289      	uxth	r1, r1
 800a5c0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a5c4:	4577      	cmp	r7, lr
 800a5c6:	f849 1b04 	str.w	r1, [r9], #4
 800a5ca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a5ce:	d8e2      	bhi.n	800a596 <__multiply+0xb2>
 800a5d0:	9a01      	ldr	r2, [sp, #4]
 800a5d2:	f845 c002 	str.w	ip, [r5, r2]
 800a5d6:	9a03      	ldr	r2, [sp, #12]
 800a5d8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a5dc:	3304      	adds	r3, #4
 800a5de:	f1b9 0f00 	cmp.w	r9, #0
 800a5e2:	d021      	beq.n	800a628 <__multiply+0x144>
 800a5e4:	6829      	ldr	r1, [r5, #0]
 800a5e6:	f104 0c14 	add.w	ip, r4, #20
 800a5ea:	46ae      	mov	lr, r5
 800a5ec:	f04f 0a00 	mov.w	sl, #0
 800a5f0:	f8bc b000 	ldrh.w	fp, [ip]
 800a5f4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a5f8:	fb09 220b 	mla	r2, r9, fp, r2
 800a5fc:	4452      	add	r2, sl
 800a5fe:	b289      	uxth	r1, r1
 800a600:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a604:	f84e 1b04 	str.w	r1, [lr], #4
 800a608:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a60c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a610:	f8be 1000 	ldrh.w	r1, [lr]
 800a614:	fb09 110a 	mla	r1, r9, sl, r1
 800a618:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800a61c:	4567      	cmp	r7, ip
 800a61e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a622:	d8e5      	bhi.n	800a5f0 <__multiply+0x10c>
 800a624:	9a01      	ldr	r2, [sp, #4]
 800a626:	50a9      	str	r1, [r5, r2]
 800a628:	3504      	adds	r5, #4
 800a62a:	e799      	b.n	800a560 <__multiply+0x7c>
 800a62c:	3e01      	subs	r6, #1
 800a62e:	e79b      	b.n	800a568 <__multiply+0x84>
 800a630:	0802cbdc 	.word	0x0802cbdc
 800a634:	0802cbed 	.word	0x0802cbed

0800a638 <__pow5mult>:
 800a638:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a63c:	4615      	mov	r5, r2
 800a63e:	f012 0203 	ands.w	r2, r2, #3
 800a642:	4606      	mov	r6, r0
 800a644:	460f      	mov	r7, r1
 800a646:	d007      	beq.n	800a658 <__pow5mult+0x20>
 800a648:	4c25      	ldr	r4, [pc, #148]	; (800a6e0 <__pow5mult+0xa8>)
 800a64a:	3a01      	subs	r2, #1
 800a64c:	2300      	movs	r3, #0
 800a64e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a652:	f7ff fe9d 	bl	800a390 <__multadd>
 800a656:	4607      	mov	r7, r0
 800a658:	10ad      	asrs	r5, r5, #2
 800a65a:	d03d      	beq.n	800a6d8 <__pow5mult+0xa0>
 800a65c:	69f4      	ldr	r4, [r6, #28]
 800a65e:	b97c      	cbnz	r4, 800a680 <__pow5mult+0x48>
 800a660:	2010      	movs	r0, #16
 800a662:	f7ff fd7f 	bl	800a164 <malloc>
 800a666:	4602      	mov	r2, r0
 800a668:	61f0      	str	r0, [r6, #28]
 800a66a:	b928      	cbnz	r0, 800a678 <__pow5mult+0x40>
 800a66c:	4b1d      	ldr	r3, [pc, #116]	; (800a6e4 <__pow5mult+0xac>)
 800a66e:	481e      	ldr	r0, [pc, #120]	; (800a6e8 <__pow5mult+0xb0>)
 800a670:	f240 11b3 	movw	r1, #435	; 0x1b3
 800a674:	f000 fd9e 	bl	800b1b4 <__assert_func>
 800a678:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a67c:	6004      	str	r4, [r0, #0]
 800a67e:	60c4      	str	r4, [r0, #12]
 800a680:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800a684:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a688:	b94c      	cbnz	r4, 800a69e <__pow5mult+0x66>
 800a68a:	f240 2171 	movw	r1, #625	; 0x271
 800a68e:	4630      	mov	r0, r6
 800a690:	f7ff ff12 	bl	800a4b8 <__i2b>
 800a694:	2300      	movs	r3, #0
 800a696:	f8c8 0008 	str.w	r0, [r8, #8]
 800a69a:	4604      	mov	r4, r0
 800a69c:	6003      	str	r3, [r0, #0]
 800a69e:	f04f 0900 	mov.w	r9, #0
 800a6a2:	07eb      	lsls	r3, r5, #31
 800a6a4:	d50a      	bpl.n	800a6bc <__pow5mult+0x84>
 800a6a6:	4639      	mov	r1, r7
 800a6a8:	4622      	mov	r2, r4
 800a6aa:	4630      	mov	r0, r6
 800a6ac:	f7ff ff1a 	bl	800a4e4 <__multiply>
 800a6b0:	4639      	mov	r1, r7
 800a6b2:	4680      	mov	r8, r0
 800a6b4:	4630      	mov	r0, r6
 800a6b6:	f7ff fe49 	bl	800a34c <_Bfree>
 800a6ba:	4647      	mov	r7, r8
 800a6bc:	106d      	asrs	r5, r5, #1
 800a6be:	d00b      	beq.n	800a6d8 <__pow5mult+0xa0>
 800a6c0:	6820      	ldr	r0, [r4, #0]
 800a6c2:	b938      	cbnz	r0, 800a6d4 <__pow5mult+0x9c>
 800a6c4:	4622      	mov	r2, r4
 800a6c6:	4621      	mov	r1, r4
 800a6c8:	4630      	mov	r0, r6
 800a6ca:	f7ff ff0b 	bl	800a4e4 <__multiply>
 800a6ce:	6020      	str	r0, [r4, #0]
 800a6d0:	f8c0 9000 	str.w	r9, [r0]
 800a6d4:	4604      	mov	r4, r0
 800a6d6:	e7e4      	b.n	800a6a2 <__pow5mult+0x6a>
 800a6d8:	4638      	mov	r0, r7
 800a6da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a6de:	bf00      	nop
 800a6e0:	0802cd38 	.word	0x0802cd38
 800a6e4:	0802cb6d 	.word	0x0802cb6d
 800a6e8:	0802cbed 	.word	0x0802cbed

0800a6ec <__lshift>:
 800a6ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6f0:	460c      	mov	r4, r1
 800a6f2:	6849      	ldr	r1, [r1, #4]
 800a6f4:	6923      	ldr	r3, [r4, #16]
 800a6f6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a6fa:	68a3      	ldr	r3, [r4, #8]
 800a6fc:	4607      	mov	r7, r0
 800a6fe:	4691      	mov	r9, r2
 800a700:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a704:	f108 0601 	add.w	r6, r8, #1
 800a708:	42b3      	cmp	r3, r6
 800a70a:	db0b      	blt.n	800a724 <__lshift+0x38>
 800a70c:	4638      	mov	r0, r7
 800a70e:	f7ff fddd 	bl	800a2cc <_Balloc>
 800a712:	4605      	mov	r5, r0
 800a714:	b948      	cbnz	r0, 800a72a <__lshift+0x3e>
 800a716:	4602      	mov	r2, r0
 800a718:	4b28      	ldr	r3, [pc, #160]	; (800a7bc <__lshift+0xd0>)
 800a71a:	4829      	ldr	r0, [pc, #164]	; (800a7c0 <__lshift+0xd4>)
 800a71c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800a720:	f000 fd48 	bl	800b1b4 <__assert_func>
 800a724:	3101      	adds	r1, #1
 800a726:	005b      	lsls	r3, r3, #1
 800a728:	e7ee      	b.n	800a708 <__lshift+0x1c>
 800a72a:	2300      	movs	r3, #0
 800a72c:	f100 0114 	add.w	r1, r0, #20
 800a730:	f100 0210 	add.w	r2, r0, #16
 800a734:	4618      	mov	r0, r3
 800a736:	4553      	cmp	r3, sl
 800a738:	db33      	blt.n	800a7a2 <__lshift+0xb6>
 800a73a:	6920      	ldr	r0, [r4, #16]
 800a73c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a740:	f104 0314 	add.w	r3, r4, #20
 800a744:	f019 091f 	ands.w	r9, r9, #31
 800a748:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a74c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a750:	d02b      	beq.n	800a7aa <__lshift+0xbe>
 800a752:	f1c9 0e20 	rsb	lr, r9, #32
 800a756:	468a      	mov	sl, r1
 800a758:	2200      	movs	r2, #0
 800a75a:	6818      	ldr	r0, [r3, #0]
 800a75c:	fa00 f009 	lsl.w	r0, r0, r9
 800a760:	4310      	orrs	r0, r2
 800a762:	f84a 0b04 	str.w	r0, [sl], #4
 800a766:	f853 2b04 	ldr.w	r2, [r3], #4
 800a76a:	459c      	cmp	ip, r3
 800a76c:	fa22 f20e 	lsr.w	r2, r2, lr
 800a770:	d8f3      	bhi.n	800a75a <__lshift+0x6e>
 800a772:	ebac 0304 	sub.w	r3, ip, r4
 800a776:	3b15      	subs	r3, #21
 800a778:	f023 0303 	bic.w	r3, r3, #3
 800a77c:	3304      	adds	r3, #4
 800a77e:	f104 0015 	add.w	r0, r4, #21
 800a782:	4584      	cmp	ip, r0
 800a784:	bf38      	it	cc
 800a786:	2304      	movcc	r3, #4
 800a788:	50ca      	str	r2, [r1, r3]
 800a78a:	b10a      	cbz	r2, 800a790 <__lshift+0xa4>
 800a78c:	f108 0602 	add.w	r6, r8, #2
 800a790:	3e01      	subs	r6, #1
 800a792:	4638      	mov	r0, r7
 800a794:	612e      	str	r6, [r5, #16]
 800a796:	4621      	mov	r1, r4
 800a798:	f7ff fdd8 	bl	800a34c <_Bfree>
 800a79c:	4628      	mov	r0, r5
 800a79e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7a2:	f842 0f04 	str.w	r0, [r2, #4]!
 800a7a6:	3301      	adds	r3, #1
 800a7a8:	e7c5      	b.n	800a736 <__lshift+0x4a>
 800a7aa:	3904      	subs	r1, #4
 800a7ac:	f853 2b04 	ldr.w	r2, [r3], #4
 800a7b0:	f841 2f04 	str.w	r2, [r1, #4]!
 800a7b4:	459c      	cmp	ip, r3
 800a7b6:	d8f9      	bhi.n	800a7ac <__lshift+0xc0>
 800a7b8:	e7ea      	b.n	800a790 <__lshift+0xa4>
 800a7ba:	bf00      	nop
 800a7bc:	0802cbdc 	.word	0x0802cbdc
 800a7c0:	0802cbed 	.word	0x0802cbed

0800a7c4 <__mcmp>:
 800a7c4:	b530      	push	{r4, r5, lr}
 800a7c6:	6902      	ldr	r2, [r0, #16]
 800a7c8:	690c      	ldr	r4, [r1, #16]
 800a7ca:	1b12      	subs	r2, r2, r4
 800a7cc:	d10e      	bne.n	800a7ec <__mcmp+0x28>
 800a7ce:	f100 0314 	add.w	r3, r0, #20
 800a7d2:	3114      	adds	r1, #20
 800a7d4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a7d8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a7dc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a7e0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a7e4:	42a5      	cmp	r5, r4
 800a7e6:	d003      	beq.n	800a7f0 <__mcmp+0x2c>
 800a7e8:	d305      	bcc.n	800a7f6 <__mcmp+0x32>
 800a7ea:	2201      	movs	r2, #1
 800a7ec:	4610      	mov	r0, r2
 800a7ee:	bd30      	pop	{r4, r5, pc}
 800a7f0:	4283      	cmp	r3, r0
 800a7f2:	d3f3      	bcc.n	800a7dc <__mcmp+0x18>
 800a7f4:	e7fa      	b.n	800a7ec <__mcmp+0x28>
 800a7f6:	f04f 32ff 	mov.w	r2, #4294967295
 800a7fa:	e7f7      	b.n	800a7ec <__mcmp+0x28>

0800a7fc <__mdiff>:
 800a7fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a800:	460c      	mov	r4, r1
 800a802:	4606      	mov	r6, r0
 800a804:	4611      	mov	r1, r2
 800a806:	4620      	mov	r0, r4
 800a808:	4690      	mov	r8, r2
 800a80a:	f7ff ffdb 	bl	800a7c4 <__mcmp>
 800a80e:	1e05      	subs	r5, r0, #0
 800a810:	d110      	bne.n	800a834 <__mdiff+0x38>
 800a812:	4629      	mov	r1, r5
 800a814:	4630      	mov	r0, r6
 800a816:	f7ff fd59 	bl	800a2cc <_Balloc>
 800a81a:	b930      	cbnz	r0, 800a82a <__mdiff+0x2e>
 800a81c:	4b3a      	ldr	r3, [pc, #232]	; (800a908 <__mdiff+0x10c>)
 800a81e:	4602      	mov	r2, r0
 800a820:	f240 2137 	movw	r1, #567	; 0x237
 800a824:	4839      	ldr	r0, [pc, #228]	; (800a90c <__mdiff+0x110>)
 800a826:	f000 fcc5 	bl	800b1b4 <__assert_func>
 800a82a:	2301      	movs	r3, #1
 800a82c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a830:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a834:	bfa4      	itt	ge
 800a836:	4643      	movge	r3, r8
 800a838:	46a0      	movge	r8, r4
 800a83a:	4630      	mov	r0, r6
 800a83c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a840:	bfa6      	itte	ge
 800a842:	461c      	movge	r4, r3
 800a844:	2500      	movge	r5, #0
 800a846:	2501      	movlt	r5, #1
 800a848:	f7ff fd40 	bl	800a2cc <_Balloc>
 800a84c:	b920      	cbnz	r0, 800a858 <__mdiff+0x5c>
 800a84e:	4b2e      	ldr	r3, [pc, #184]	; (800a908 <__mdiff+0x10c>)
 800a850:	4602      	mov	r2, r0
 800a852:	f240 2145 	movw	r1, #581	; 0x245
 800a856:	e7e5      	b.n	800a824 <__mdiff+0x28>
 800a858:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a85c:	6926      	ldr	r6, [r4, #16]
 800a85e:	60c5      	str	r5, [r0, #12]
 800a860:	f104 0914 	add.w	r9, r4, #20
 800a864:	f108 0514 	add.w	r5, r8, #20
 800a868:	f100 0e14 	add.w	lr, r0, #20
 800a86c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a870:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a874:	f108 0210 	add.w	r2, r8, #16
 800a878:	46f2      	mov	sl, lr
 800a87a:	2100      	movs	r1, #0
 800a87c:	f859 3b04 	ldr.w	r3, [r9], #4
 800a880:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a884:	fa11 f88b 	uxtah	r8, r1, fp
 800a888:	b299      	uxth	r1, r3
 800a88a:	0c1b      	lsrs	r3, r3, #16
 800a88c:	eba8 0801 	sub.w	r8, r8, r1
 800a890:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a894:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a898:	fa1f f888 	uxth.w	r8, r8
 800a89c:	1419      	asrs	r1, r3, #16
 800a89e:	454e      	cmp	r6, r9
 800a8a0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a8a4:	f84a 3b04 	str.w	r3, [sl], #4
 800a8a8:	d8e8      	bhi.n	800a87c <__mdiff+0x80>
 800a8aa:	1b33      	subs	r3, r6, r4
 800a8ac:	3b15      	subs	r3, #21
 800a8ae:	f023 0303 	bic.w	r3, r3, #3
 800a8b2:	3304      	adds	r3, #4
 800a8b4:	3415      	adds	r4, #21
 800a8b6:	42a6      	cmp	r6, r4
 800a8b8:	bf38      	it	cc
 800a8ba:	2304      	movcc	r3, #4
 800a8bc:	441d      	add	r5, r3
 800a8be:	4473      	add	r3, lr
 800a8c0:	469e      	mov	lr, r3
 800a8c2:	462e      	mov	r6, r5
 800a8c4:	4566      	cmp	r6, ip
 800a8c6:	d30e      	bcc.n	800a8e6 <__mdiff+0xea>
 800a8c8:	f10c 0203 	add.w	r2, ip, #3
 800a8cc:	1b52      	subs	r2, r2, r5
 800a8ce:	f022 0203 	bic.w	r2, r2, #3
 800a8d2:	3d03      	subs	r5, #3
 800a8d4:	45ac      	cmp	ip, r5
 800a8d6:	bf38      	it	cc
 800a8d8:	2200      	movcc	r2, #0
 800a8da:	4413      	add	r3, r2
 800a8dc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800a8e0:	b17a      	cbz	r2, 800a902 <__mdiff+0x106>
 800a8e2:	6107      	str	r7, [r0, #16]
 800a8e4:	e7a4      	b.n	800a830 <__mdiff+0x34>
 800a8e6:	f856 8b04 	ldr.w	r8, [r6], #4
 800a8ea:	fa11 f288 	uxtah	r2, r1, r8
 800a8ee:	1414      	asrs	r4, r2, #16
 800a8f0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a8f4:	b292      	uxth	r2, r2
 800a8f6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a8fa:	f84e 2b04 	str.w	r2, [lr], #4
 800a8fe:	1421      	asrs	r1, r4, #16
 800a900:	e7e0      	b.n	800a8c4 <__mdiff+0xc8>
 800a902:	3f01      	subs	r7, #1
 800a904:	e7ea      	b.n	800a8dc <__mdiff+0xe0>
 800a906:	bf00      	nop
 800a908:	0802cbdc 	.word	0x0802cbdc
 800a90c:	0802cbed 	.word	0x0802cbed

0800a910 <__d2b>:
 800a910:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a914:	460f      	mov	r7, r1
 800a916:	2101      	movs	r1, #1
 800a918:	ec59 8b10 	vmov	r8, r9, d0
 800a91c:	4616      	mov	r6, r2
 800a91e:	f7ff fcd5 	bl	800a2cc <_Balloc>
 800a922:	4604      	mov	r4, r0
 800a924:	b930      	cbnz	r0, 800a934 <__d2b+0x24>
 800a926:	4602      	mov	r2, r0
 800a928:	4b24      	ldr	r3, [pc, #144]	; (800a9bc <__d2b+0xac>)
 800a92a:	4825      	ldr	r0, [pc, #148]	; (800a9c0 <__d2b+0xb0>)
 800a92c:	f240 310f 	movw	r1, #783	; 0x30f
 800a930:	f000 fc40 	bl	800b1b4 <__assert_func>
 800a934:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a938:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a93c:	bb2d      	cbnz	r5, 800a98a <__d2b+0x7a>
 800a93e:	9301      	str	r3, [sp, #4]
 800a940:	f1b8 0300 	subs.w	r3, r8, #0
 800a944:	d026      	beq.n	800a994 <__d2b+0x84>
 800a946:	4668      	mov	r0, sp
 800a948:	9300      	str	r3, [sp, #0]
 800a94a:	f7ff fd87 	bl	800a45c <__lo0bits>
 800a94e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a952:	b1e8      	cbz	r0, 800a990 <__d2b+0x80>
 800a954:	f1c0 0320 	rsb	r3, r0, #32
 800a958:	fa02 f303 	lsl.w	r3, r2, r3
 800a95c:	430b      	orrs	r3, r1
 800a95e:	40c2      	lsrs	r2, r0
 800a960:	6163      	str	r3, [r4, #20]
 800a962:	9201      	str	r2, [sp, #4]
 800a964:	9b01      	ldr	r3, [sp, #4]
 800a966:	61a3      	str	r3, [r4, #24]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	bf14      	ite	ne
 800a96c:	2202      	movne	r2, #2
 800a96e:	2201      	moveq	r2, #1
 800a970:	6122      	str	r2, [r4, #16]
 800a972:	b1bd      	cbz	r5, 800a9a4 <__d2b+0x94>
 800a974:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a978:	4405      	add	r5, r0
 800a97a:	603d      	str	r5, [r7, #0]
 800a97c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a980:	6030      	str	r0, [r6, #0]
 800a982:	4620      	mov	r0, r4
 800a984:	b003      	add	sp, #12
 800a986:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a98a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a98e:	e7d6      	b.n	800a93e <__d2b+0x2e>
 800a990:	6161      	str	r1, [r4, #20]
 800a992:	e7e7      	b.n	800a964 <__d2b+0x54>
 800a994:	a801      	add	r0, sp, #4
 800a996:	f7ff fd61 	bl	800a45c <__lo0bits>
 800a99a:	9b01      	ldr	r3, [sp, #4]
 800a99c:	6163      	str	r3, [r4, #20]
 800a99e:	3020      	adds	r0, #32
 800a9a0:	2201      	movs	r2, #1
 800a9a2:	e7e5      	b.n	800a970 <__d2b+0x60>
 800a9a4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a9a8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a9ac:	6038      	str	r0, [r7, #0]
 800a9ae:	6918      	ldr	r0, [r3, #16]
 800a9b0:	f7ff fd34 	bl	800a41c <__hi0bits>
 800a9b4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a9b8:	e7e2      	b.n	800a980 <__d2b+0x70>
 800a9ba:	bf00      	nop
 800a9bc:	0802cbdc 	.word	0x0802cbdc
 800a9c0:	0802cbed 	.word	0x0802cbed

0800a9c4 <__ssputs_r>:
 800a9c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a9c8:	688e      	ldr	r6, [r1, #8]
 800a9ca:	461f      	mov	r7, r3
 800a9cc:	42be      	cmp	r6, r7
 800a9ce:	680b      	ldr	r3, [r1, #0]
 800a9d0:	4682      	mov	sl, r0
 800a9d2:	460c      	mov	r4, r1
 800a9d4:	4690      	mov	r8, r2
 800a9d6:	d82c      	bhi.n	800aa32 <__ssputs_r+0x6e>
 800a9d8:	898a      	ldrh	r2, [r1, #12]
 800a9da:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a9de:	d026      	beq.n	800aa2e <__ssputs_r+0x6a>
 800a9e0:	6965      	ldr	r5, [r4, #20]
 800a9e2:	6909      	ldr	r1, [r1, #16]
 800a9e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a9e8:	eba3 0901 	sub.w	r9, r3, r1
 800a9ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a9f0:	1c7b      	adds	r3, r7, #1
 800a9f2:	444b      	add	r3, r9
 800a9f4:	106d      	asrs	r5, r5, #1
 800a9f6:	429d      	cmp	r5, r3
 800a9f8:	bf38      	it	cc
 800a9fa:	461d      	movcc	r5, r3
 800a9fc:	0553      	lsls	r3, r2, #21
 800a9fe:	d527      	bpl.n	800aa50 <__ssputs_r+0x8c>
 800aa00:	4629      	mov	r1, r5
 800aa02:	f7ff fbd7 	bl	800a1b4 <_malloc_r>
 800aa06:	4606      	mov	r6, r0
 800aa08:	b360      	cbz	r0, 800aa64 <__ssputs_r+0xa0>
 800aa0a:	6921      	ldr	r1, [r4, #16]
 800aa0c:	464a      	mov	r2, r9
 800aa0e:	f7fe fcd2 	bl	80093b6 <memcpy>
 800aa12:	89a3      	ldrh	r3, [r4, #12]
 800aa14:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800aa18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa1c:	81a3      	strh	r3, [r4, #12]
 800aa1e:	6126      	str	r6, [r4, #16]
 800aa20:	6165      	str	r5, [r4, #20]
 800aa22:	444e      	add	r6, r9
 800aa24:	eba5 0509 	sub.w	r5, r5, r9
 800aa28:	6026      	str	r6, [r4, #0]
 800aa2a:	60a5      	str	r5, [r4, #8]
 800aa2c:	463e      	mov	r6, r7
 800aa2e:	42be      	cmp	r6, r7
 800aa30:	d900      	bls.n	800aa34 <__ssputs_r+0x70>
 800aa32:	463e      	mov	r6, r7
 800aa34:	6820      	ldr	r0, [r4, #0]
 800aa36:	4632      	mov	r2, r6
 800aa38:	4641      	mov	r1, r8
 800aa3a:	f000 fb6f 	bl	800b11c <memmove>
 800aa3e:	68a3      	ldr	r3, [r4, #8]
 800aa40:	1b9b      	subs	r3, r3, r6
 800aa42:	60a3      	str	r3, [r4, #8]
 800aa44:	6823      	ldr	r3, [r4, #0]
 800aa46:	4433      	add	r3, r6
 800aa48:	6023      	str	r3, [r4, #0]
 800aa4a:	2000      	movs	r0, #0
 800aa4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa50:	462a      	mov	r2, r5
 800aa52:	f000 fbf5 	bl	800b240 <_realloc_r>
 800aa56:	4606      	mov	r6, r0
 800aa58:	2800      	cmp	r0, #0
 800aa5a:	d1e0      	bne.n	800aa1e <__ssputs_r+0x5a>
 800aa5c:	6921      	ldr	r1, [r4, #16]
 800aa5e:	4650      	mov	r0, sl
 800aa60:	f7ff fb34 	bl	800a0cc <_free_r>
 800aa64:	230c      	movs	r3, #12
 800aa66:	f8ca 3000 	str.w	r3, [sl]
 800aa6a:	89a3      	ldrh	r3, [r4, #12]
 800aa6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa70:	81a3      	strh	r3, [r4, #12]
 800aa72:	f04f 30ff 	mov.w	r0, #4294967295
 800aa76:	e7e9      	b.n	800aa4c <__ssputs_r+0x88>

0800aa78 <_svfiprintf_r>:
 800aa78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa7c:	4698      	mov	r8, r3
 800aa7e:	898b      	ldrh	r3, [r1, #12]
 800aa80:	061b      	lsls	r3, r3, #24
 800aa82:	b09d      	sub	sp, #116	; 0x74
 800aa84:	4607      	mov	r7, r0
 800aa86:	460d      	mov	r5, r1
 800aa88:	4614      	mov	r4, r2
 800aa8a:	d50e      	bpl.n	800aaaa <_svfiprintf_r+0x32>
 800aa8c:	690b      	ldr	r3, [r1, #16]
 800aa8e:	b963      	cbnz	r3, 800aaaa <_svfiprintf_r+0x32>
 800aa90:	2140      	movs	r1, #64	; 0x40
 800aa92:	f7ff fb8f 	bl	800a1b4 <_malloc_r>
 800aa96:	6028      	str	r0, [r5, #0]
 800aa98:	6128      	str	r0, [r5, #16]
 800aa9a:	b920      	cbnz	r0, 800aaa6 <_svfiprintf_r+0x2e>
 800aa9c:	230c      	movs	r3, #12
 800aa9e:	603b      	str	r3, [r7, #0]
 800aaa0:	f04f 30ff 	mov.w	r0, #4294967295
 800aaa4:	e0d0      	b.n	800ac48 <_svfiprintf_r+0x1d0>
 800aaa6:	2340      	movs	r3, #64	; 0x40
 800aaa8:	616b      	str	r3, [r5, #20]
 800aaaa:	2300      	movs	r3, #0
 800aaac:	9309      	str	r3, [sp, #36]	; 0x24
 800aaae:	2320      	movs	r3, #32
 800aab0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aab4:	f8cd 800c 	str.w	r8, [sp, #12]
 800aab8:	2330      	movs	r3, #48	; 0x30
 800aaba:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800ac60 <_svfiprintf_r+0x1e8>
 800aabe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aac2:	f04f 0901 	mov.w	r9, #1
 800aac6:	4623      	mov	r3, r4
 800aac8:	469a      	mov	sl, r3
 800aaca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aace:	b10a      	cbz	r2, 800aad4 <_svfiprintf_r+0x5c>
 800aad0:	2a25      	cmp	r2, #37	; 0x25
 800aad2:	d1f9      	bne.n	800aac8 <_svfiprintf_r+0x50>
 800aad4:	ebba 0b04 	subs.w	fp, sl, r4
 800aad8:	d00b      	beq.n	800aaf2 <_svfiprintf_r+0x7a>
 800aada:	465b      	mov	r3, fp
 800aadc:	4622      	mov	r2, r4
 800aade:	4629      	mov	r1, r5
 800aae0:	4638      	mov	r0, r7
 800aae2:	f7ff ff6f 	bl	800a9c4 <__ssputs_r>
 800aae6:	3001      	adds	r0, #1
 800aae8:	f000 80a9 	beq.w	800ac3e <_svfiprintf_r+0x1c6>
 800aaec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aaee:	445a      	add	r2, fp
 800aaf0:	9209      	str	r2, [sp, #36]	; 0x24
 800aaf2:	f89a 3000 	ldrb.w	r3, [sl]
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	f000 80a1 	beq.w	800ac3e <_svfiprintf_r+0x1c6>
 800aafc:	2300      	movs	r3, #0
 800aafe:	f04f 32ff 	mov.w	r2, #4294967295
 800ab02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ab06:	f10a 0a01 	add.w	sl, sl, #1
 800ab0a:	9304      	str	r3, [sp, #16]
 800ab0c:	9307      	str	r3, [sp, #28]
 800ab0e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ab12:	931a      	str	r3, [sp, #104]	; 0x68
 800ab14:	4654      	mov	r4, sl
 800ab16:	2205      	movs	r2, #5
 800ab18:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab1c:	4850      	ldr	r0, [pc, #320]	; (800ac60 <_svfiprintf_r+0x1e8>)
 800ab1e:	f7f5 fb57 	bl	80001d0 <memchr>
 800ab22:	9a04      	ldr	r2, [sp, #16]
 800ab24:	b9d8      	cbnz	r0, 800ab5e <_svfiprintf_r+0xe6>
 800ab26:	06d0      	lsls	r0, r2, #27
 800ab28:	bf44      	itt	mi
 800ab2a:	2320      	movmi	r3, #32
 800ab2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ab30:	0711      	lsls	r1, r2, #28
 800ab32:	bf44      	itt	mi
 800ab34:	232b      	movmi	r3, #43	; 0x2b
 800ab36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ab3a:	f89a 3000 	ldrb.w	r3, [sl]
 800ab3e:	2b2a      	cmp	r3, #42	; 0x2a
 800ab40:	d015      	beq.n	800ab6e <_svfiprintf_r+0xf6>
 800ab42:	9a07      	ldr	r2, [sp, #28]
 800ab44:	4654      	mov	r4, sl
 800ab46:	2000      	movs	r0, #0
 800ab48:	f04f 0c0a 	mov.w	ip, #10
 800ab4c:	4621      	mov	r1, r4
 800ab4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ab52:	3b30      	subs	r3, #48	; 0x30
 800ab54:	2b09      	cmp	r3, #9
 800ab56:	d94d      	bls.n	800abf4 <_svfiprintf_r+0x17c>
 800ab58:	b1b0      	cbz	r0, 800ab88 <_svfiprintf_r+0x110>
 800ab5a:	9207      	str	r2, [sp, #28]
 800ab5c:	e014      	b.n	800ab88 <_svfiprintf_r+0x110>
 800ab5e:	eba0 0308 	sub.w	r3, r0, r8
 800ab62:	fa09 f303 	lsl.w	r3, r9, r3
 800ab66:	4313      	orrs	r3, r2
 800ab68:	9304      	str	r3, [sp, #16]
 800ab6a:	46a2      	mov	sl, r4
 800ab6c:	e7d2      	b.n	800ab14 <_svfiprintf_r+0x9c>
 800ab6e:	9b03      	ldr	r3, [sp, #12]
 800ab70:	1d19      	adds	r1, r3, #4
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	9103      	str	r1, [sp, #12]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	bfbb      	ittet	lt
 800ab7a:	425b      	neglt	r3, r3
 800ab7c:	f042 0202 	orrlt.w	r2, r2, #2
 800ab80:	9307      	strge	r3, [sp, #28]
 800ab82:	9307      	strlt	r3, [sp, #28]
 800ab84:	bfb8      	it	lt
 800ab86:	9204      	strlt	r2, [sp, #16]
 800ab88:	7823      	ldrb	r3, [r4, #0]
 800ab8a:	2b2e      	cmp	r3, #46	; 0x2e
 800ab8c:	d10c      	bne.n	800aba8 <_svfiprintf_r+0x130>
 800ab8e:	7863      	ldrb	r3, [r4, #1]
 800ab90:	2b2a      	cmp	r3, #42	; 0x2a
 800ab92:	d134      	bne.n	800abfe <_svfiprintf_r+0x186>
 800ab94:	9b03      	ldr	r3, [sp, #12]
 800ab96:	1d1a      	adds	r2, r3, #4
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	9203      	str	r2, [sp, #12]
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	bfb8      	it	lt
 800aba0:	f04f 33ff 	movlt.w	r3, #4294967295
 800aba4:	3402      	adds	r4, #2
 800aba6:	9305      	str	r3, [sp, #20]
 800aba8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800ac70 <_svfiprintf_r+0x1f8>
 800abac:	7821      	ldrb	r1, [r4, #0]
 800abae:	2203      	movs	r2, #3
 800abb0:	4650      	mov	r0, sl
 800abb2:	f7f5 fb0d 	bl	80001d0 <memchr>
 800abb6:	b138      	cbz	r0, 800abc8 <_svfiprintf_r+0x150>
 800abb8:	9b04      	ldr	r3, [sp, #16]
 800abba:	eba0 000a 	sub.w	r0, r0, sl
 800abbe:	2240      	movs	r2, #64	; 0x40
 800abc0:	4082      	lsls	r2, r0
 800abc2:	4313      	orrs	r3, r2
 800abc4:	3401      	adds	r4, #1
 800abc6:	9304      	str	r3, [sp, #16]
 800abc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800abcc:	4825      	ldr	r0, [pc, #148]	; (800ac64 <_svfiprintf_r+0x1ec>)
 800abce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800abd2:	2206      	movs	r2, #6
 800abd4:	f7f5 fafc 	bl	80001d0 <memchr>
 800abd8:	2800      	cmp	r0, #0
 800abda:	d038      	beq.n	800ac4e <_svfiprintf_r+0x1d6>
 800abdc:	4b22      	ldr	r3, [pc, #136]	; (800ac68 <_svfiprintf_r+0x1f0>)
 800abde:	bb1b      	cbnz	r3, 800ac28 <_svfiprintf_r+0x1b0>
 800abe0:	9b03      	ldr	r3, [sp, #12]
 800abe2:	3307      	adds	r3, #7
 800abe4:	f023 0307 	bic.w	r3, r3, #7
 800abe8:	3308      	adds	r3, #8
 800abea:	9303      	str	r3, [sp, #12]
 800abec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abee:	4433      	add	r3, r6
 800abf0:	9309      	str	r3, [sp, #36]	; 0x24
 800abf2:	e768      	b.n	800aac6 <_svfiprintf_r+0x4e>
 800abf4:	fb0c 3202 	mla	r2, ip, r2, r3
 800abf8:	460c      	mov	r4, r1
 800abfa:	2001      	movs	r0, #1
 800abfc:	e7a6      	b.n	800ab4c <_svfiprintf_r+0xd4>
 800abfe:	2300      	movs	r3, #0
 800ac00:	3401      	adds	r4, #1
 800ac02:	9305      	str	r3, [sp, #20]
 800ac04:	4619      	mov	r1, r3
 800ac06:	f04f 0c0a 	mov.w	ip, #10
 800ac0a:	4620      	mov	r0, r4
 800ac0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ac10:	3a30      	subs	r2, #48	; 0x30
 800ac12:	2a09      	cmp	r2, #9
 800ac14:	d903      	bls.n	800ac1e <_svfiprintf_r+0x1a6>
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d0c6      	beq.n	800aba8 <_svfiprintf_r+0x130>
 800ac1a:	9105      	str	r1, [sp, #20]
 800ac1c:	e7c4      	b.n	800aba8 <_svfiprintf_r+0x130>
 800ac1e:	fb0c 2101 	mla	r1, ip, r1, r2
 800ac22:	4604      	mov	r4, r0
 800ac24:	2301      	movs	r3, #1
 800ac26:	e7f0      	b.n	800ac0a <_svfiprintf_r+0x192>
 800ac28:	ab03      	add	r3, sp, #12
 800ac2a:	9300      	str	r3, [sp, #0]
 800ac2c:	462a      	mov	r2, r5
 800ac2e:	4b0f      	ldr	r3, [pc, #60]	; (800ac6c <_svfiprintf_r+0x1f4>)
 800ac30:	a904      	add	r1, sp, #16
 800ac32:	4638      	mov	r0, r7
 800ac34:	f7fd fdc0 	bl	80087b8 <_printf_float>
 800ac38:	1c42      	adds	r2, r0, #1
 800ac3a:	4606      	mov	r6, r0
 800ac3c:	d1d6      	bne.n	800abec <_svfiprintf_r+0x174>
 800ac3e:	89ab      	ldrh	r3, [r5, #12]
 800ac40:	065b      	lsls	r3, r3, #25
 800ac42:	f53f af2d 	bmi.w	800aaa0 <_svfiprintf_r+0x28>
 800ac46:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ac48:	b01d      	add	sp, #116	; 0x74
 800ac4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac4e:	ab03      	add	r3, sp, #12
 800ac50:	9300      	str	r3, [sp, #0]
 800ac52:	462a      	mov	r2, r5
 800ac54:	4b05      	ldr	r3, [pc, #20]	; (800ac6c <_svfiprintf_r+0x1f4>)
 800ac56:	a904      	add	r1, sp, #16
 800ac58:	4638      	mov	r0, r7
 800ac5a:	f7fe f851 	bl	8008d00 <_printf_i>
 800ac5e:	e7eb      	b.n	800ac38 <_svfiprintf_r+0x1c0>
 800ac60:	0802cd44 	.word	0x0802cd44
 800ac64:	0802cd4e 	.word	0x0802cd4e
 800ac68:	080087b9 	.word	0x080087b9
 800ac6c:	0800a9c5 	.word	0x0800a9c5
 800ac70:	0802cd4a 	.word	0x0802cd4a

0800ac74 <__sfputc_r>:
 800ac74:	6893      	ldr	r3, [r2, #8]
 800ac76:	3b01      	subs	r3, #1
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	b410      	push	{r4}
 800ac7c:	6093      	str	r3, [r2, #8]
 800ac7e:	da08      	bge.n	800ac92 <__sfputc_r+0x1e>
 800ac80:	6994      	ldr	r4, [r2, #24]
 800ac82:	42a3      	cmp	r3, r4
 800ac84:	db01      	blt.n	800ac8a <__sfputc_r+0x16>
 800ac86:	290a      	cmp	r1, #10
 800ac88:	d103      	bne.n	800ac92 <__sfputc_r+0x1e>
 800ac8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ac8e:	f7fe ba7e 	b.w	800918e <__swbuf_r>
 800ac92:	6813      	ldr	r3, [r2, #0]
 800ac94:	1c58      	adds	r0, r3, #1
 800ac96:	6010      	str	r0, [r2, #0]
 800ac98:	7019      	strb	r1, [r3, #0]
 800ac9a:	4608      	mov	r0, r1
 800ac9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aca0:	4770      	bx	lr

0800aca2 <__sfputs_r>:
 800aca2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aca4:	4606      	mov	r6, r0
 800aca6:	460f      	mov	r7, r1
 800aca8:	4614      	mov	r4, r2
 800acaa:	18d5      	adds	r5, r2, r3
 800acac:	42ac      	cmp	r4, r5
 800acae:	d101      	bne.n	800acb4 <__sfputs_r+0x12>
 800acb0:	2000      	movs	r0, #0
 800acb2:	e007      	b.n	800acc4 <__sfputs_r+0x22>
 800acb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800acb8:	463a      	mov	r2, r7
 800acba:	4630      	mov	r0, r6
 800acbc:	f7ff ffda 	bl	800ac74 <__sfputc_r>
 800acc0:	1c43      	adds	r3, r0, #1
 800acc2:	d1f3      	bne.n	800acac <__sfputs_r+0xa>
 800acc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800acc8 <_vfiprintf_r>:
 800acc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800accc:	460d      	mov	r5, r1
 800acce:	b09d      	sub	sp, #116	; 0x74
 800acd0:	4614      	mov	r4, r2
 800acd2:	4698      	mov	r8, r3
 800acd4:	4606      	mov	r6, r0
 800acd6:	b118      	cbz	r0, 800ace0 <_vfiprintf_r+0x18>
 800acd8:	6a03      	ldr	r3, [r0, #32]
 800acda:	b90b      	cbnz	r3, 800ace0 <_vfiprintf_r+0x18>
 800acdc:	f7fe f9be 	bl	800905c <__sinit>
 800ace0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ace2:	07d9      	lsls	r1, r3, #31
 800ace4:	d405      	bmi.n	800acf2 <_vfiprintf_r+0x2a>
 800ace6:	89ab      	ldrh	r3, [r5, #12]
 800ace8:	059a      	lsls	r2, r3, #22
 800acea:	d402      	bmi.n	800acf2 <_vfiprintf_r+0x2a>
 800acec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800acee:	f7fe fb60 	bl	80093b2 <__retarget_lock_acquire_recursive>
 800acf2:	89ab      	ldrh	r3, [r5, #12]
 800acf4:	071b      	lsls	r3, r3, #28
 800acf6:	d501      	bpl.n	800acfc <_vfiprintf_r+0x34>
 800acf8:	692b      	ldr	r3, [r5, #16]
 800acfa:	b99b      	cbnz	r3, 800ad24 <_vfiprintf_r+0x5c>
 800acfc:	4629      	mov	r1, r5
 800acfe:	4630      	mov	r0, r6
 800ad00:	f7fe fa82 	bl	8009208 <__swsetup_r>
 800ad04:	b170      	cbz	r0, 800ad24 <_vfiprintf_r+0x5c>
 800ad06:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ad08:	07dc      	lsls	r4, r3, #31
 800ad0a:	d504      	bpl.n	800ad16 <_vfiprintf_r+0x4e>
 800ad0c:	f04f 30ff 	mov.w	r0, #4294967295
 800ad10:	b01d      	add	sp, #116	; 0x74
 800ad12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad16:	89ab      	ldrh	r3, [r5, #12]
 800ad18:	0598      	lsls	r0, r3, #22
 800ad1a:	d4f7      	bmi.n	800ad0c <_vfiprintf_r+0x44>
 800ad1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ad1e:	f7fe fb49 	bl	80093b4 <__retarget_lock_release_recursive>
 800ad22:	e7f3      	b.n	800ad0c <_vfiprintf_r+0x44>
 800ad24:	2300      	movs	r3, #0
 800ad26:	9309      	str	r3, [sp, #36]	; 0x24
 800ad28:	2320      	movs	r3, #32
 800ad2a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ad2e:	f8cd 800c 	str.w	r8, [sp, #12]
 800ad32:	2330      	movs	r3, #48	; 0x30
 800ad34:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800aee8 <_vfiprintf_r+0x220>
 800ad38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ad3c:	f04f 0901 	mov.w	r9, #1
 800ad40:	4623      	mov	r3, r4
 800ad42:	469a      	mov	sl, r3
 800ad44:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ad48:	b10a      	cbz	r2, 800ad4e <_vfiprintf_r+0x86>
 800ad4a:	2a25      	cmp	r2, #37	; 0x25
 800ad4c:	d1f9      	bne.n	800ad42 <_vfiprintf_r+0x7a>
 800ad4e:	ebba 0b04 	subs.w	fp, sl, r4
 800ad52:	d00b      	beq.n	800ad6c <_vfiprintf_r+0xa4>
 800ad54:	465b      	mov	r3, fp
 800ad56:	4622      	mov	r2, r4
 800ad58:	4629      	mov	r1, r5
 800ad5a:	4630      	mov	r0, r6
 800ad5c:	f7ff ffa1 	bl	800aca2 <__sfputs_r>
 800ad60:	3001      	adds	r0, #1
 800ad62:	f000 80a9 	beq.w	800aeb8 <_vfiprintf_r+0x1f0>
 800ad66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ad68:	445a      	add	r2, fp
 800ad6a:	9209      	str	r2, [sp, #36]	; 0x24
 800ad6c:	f89a 3000 	ldrb.w	r3, [sl]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	f000 80a1 	beq.w	800aeb8 <_vfiprintf_r+0x1f0>
 800ad76:	2300      	movs	r3, #0
 800ad78:	f04f 32ff 	mov.w	r2, #4294967295
 800ad7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ad80:	f10a 0a01 	add.w	sl, sl, #1
 800ad84:	9304      	str	r3, [sp, #16]
 800ad86:	9307      	str	r3, [sp, #28]
 800ad88:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ad8c:	931a      	str	r3, [sp, #104]	; 0x68
 800ad8e:	4654      	mov	r4, sl
 800ad90:	2205      	movs	r2, #5
 800ad92:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad96:	4854      	ldr	r0, [pc, #336]	; (800aee8 <_vfiprintf_r+0x220>)
 800ad98:	f7f5 fa1a 	bl	80001d0 <memchr>
 800ad9c:	9a04      	ldr	r2, [sp, #16]
 800ad9e:	b9d8      	cbnz	r0, 800add8 <_vfiprintf_r+0x110>
 800ada0:	06d1      	lsls	r1, r2, #27
 800ada2:	bf44      	itt	mi
 800ada4:	2320      	movmi	r3, #32
 800ada6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800adaa:	0713      	lsls	r3, r2, #28
 800adac:	bf44      	itt	mi
 800adae:	232b      	movmi	r3, #43	; 0x2b
 800adb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800adb4:	f89a 3000 	ldrb.w	r3, [sl]
 800adb8:	2b2a      	cmp	r3, #42	; 0x2a
 800adba:	d015      	beq.n	800ade8 <_vfiprintf_r+0x120>
 800adbc:	9a07      	ldr	r2, [sp, #28]
 800adbe:	4654      	mov	r4, sl
 800adc0:	2000      	movs	r0, #0
 800adc2:	f04f 0c0a 	mov.w	ip, #10
 800adc6:	4621      	mov	r1, r4
 800adc8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800adcc:	3b30      	subs	r3, #48	; 0x30
 800adce:	2b09      	cmp	r3, #9
 800add0:	d94d      	bls.n	800ae6e <_vfiprintf_r+0x1a6>
 800add2:	b1b0      	cbz	r0, 800ae02 <_vfiprintf_r+0x13a>
 800add4:	9207      	str	r2, [sp, #28]
 800add6:	e014      	b.n	800ae02 <_vfiprintf_r+0x13a>
 800add8:	eba0 0308 	sub.w	r3, r0, r8
 800addc:	fa09 f303 	lsl.w	r3, r9, r3
 800ade0:	4313      	orrs	r3, r2
 800ade2:	9304      	str	r3, [sp, #16]
 800ade4:	46a2      	mov	sl, r4
 800ade6:	e7d2      	b.n	800ad8e <_vfiprintf_r+0xc6>
 800ade8:	9b03      	ldr	r3, [sp, #12]
 800adea:	1d19      	adds	r1, r3, #4
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	9103      	str	r1, [sp, #12]
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	bfbb      	ittet	lt
 800adf4:	425b      	neglt	r3, r3
 800adf6:	f042 0202 	orrlt.w	r2, r2, #2
 800adfa:	9307      	strge	r3, [sp, #28]
 800adfc:	9307      	strlt	r3, [sp, #28]
 800adfe:	bfb8      	it	lt
 800ae00:	9204      	strlt	r2, [sp, #16]
 800ae02:	7823      	ldrb	r3, [r4, #0]
 800ae04:	2b2e      	cmp	r3, #46	; 0x2e
 800ae06:	d10c      	bne.n	800ae22 <_vfiprintf_r+0x15a>
 800ae08:	7863      	ldrb	r3, [r4, #1]
 800ae0a:	2b2a      	cmp	r3, #42	; 0x2a
 800ae0c:	d134      	bne.n	800ae78 <_vfiprintf_r+0x1b0>
 800ae0e:	9b03      	ldr	r3, [sp, #12]
 800ae10:	1d1a      	adds	r2, r3, #4
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	9203      	str	r2, [sp, #12]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	bfb8      	it	lt
 800ae1a:	f04f 33ff 	movlt.w	r3, #4294967295
 800ae1e:	3402      	adds	r4, #2
 800ae20:	9305      	str	r3, [sp, #20]
 800ae22:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800aef8 <_vfiprintf_r+0x230>
 800ae26:	7821      	ldrb	r1, [r4, #0]
 800ae28:	2203      	movs	r2, #3
 800ae2a:	4650      	mov	r0, sl
 800ae2c:	f7f5 f9d0 	bl	80001d0 <memchr>
 800ae30:	b138      	cbz	r0, 800ae42 <_vfiprintf_r+0x17a>
 800ae32:	9b04      	ldr	r3, [sp, #16]
 800ae34:	eba0 000a 	sub.w	r0, r0, sl
 800ae38:	2240      	movs	r2, #64	; 0x40
 800ae3a:	4082      	lsls	r2, r0
 800ae3c:	4313      	orrs	r3, r2
 800ae3e:	3401      	adds	r4, #1
 800ae40:	9304      	str	r3, [sp, #16]
 800ae42:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae46:	4829      	ldr	r0, [pc, #164]	; (800aeec <_vfiprintf_r+0x224>)
 800ae48:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ae4c:	2206      	movs	r2, #6
 800ae4e:	f7f5 f9bf 	bl	80001d0 <memchr>
 800ae52:	2800      	cmp	r0, #0
 800ae54:	d03f      	beq.n	800aed6 <_vfiprintf_r+0x20e>
 800ae56:	4b26      	ldr	r3, [pc, #152]	; (800aef0 <_vfiprintf_r+0x228>)
 800ae58:	bb1b      	cbnz	r3, 800aea2 <_vfiprintf_r+0x1da>
 800ae5a:	9b03      	ldr	r3, [sp, #12]
 800ae5c:	3307      	adds	r3, #7
 800ae5e:	f023 0307 	bic.w	r3, r3, #7
 800ae62:	3308      	adds	r3, #8
 800ae64:	9303      	str	r3, [sp, #12]
 800ae66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae68:	443b      	add	r3, r7
 800ae6a:	9309      	str	r3, [sp, #36]	; 0x24
 800ae6c:	e768      	b.n	800ad40 <_vfiprintf_r+0x78>
 800ae6e:	fb0c 3202 	mla	r2, ip, r2, r3
 800ae72:	460c      	mov	r4, r1
 800ae74:	2001      	movs	r0, #1
 800ae76:	e7a6      	b.n	800adc6 <_vfiprintf_r+0xfe>
 800ae78:	2300      	movs	r3, #0
 800ae7a:	3401      	adds	r4, #1
 800ae7c:	9305      	str	r3, [sp, #20]
 800ae7e:	4619      	mov	r1, r3
 800ae80:	f04f 0c0a 	mov.w	ip, #10
 800ae84:	4620      	mov	r0, r4
 800ae86:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ae8a:	3a30      	subs	r2, #48	; 0x30
 800ae8c:	2a09      	cmp	r2, #9
 800ae8e:	d903      	bls.n	800ae98 <_vfiprintf_r+0x1d0>
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d0c6      	beq.n	800ae22 <_vfiprintf_r+0x15a>
 800ae94:	9105      	str	r1, [sp, #20]
 800ae96:	e7c4      	b.n	800ae22 <_vfiprintf_r+0x15a>
 800ae98:	fb0c 2101 	mla	r1, ip, r1, r2
 800ae9c:	4604      	mov	r4, r0
 800ae9e:	2301      	movs	r3, #1
 800aea0:	e7f0      	b.n	800ae84 <_vfiprintf_r+0x1bc>
 800aea2:	ab03      	add	r3, sp, #12
 800aea4:	9300      	str	r3, [sp, #0]
 800aea6:	462a      	mov	r2, r5
 800aea8:	4b12      	ldr	r3, [pc, #72]	; (800aef4 <_vfiprintf_r+0x22c>)
 800aeaa:	a904      	add	r1, sp, #16
 800aeac:	4630      	mov	r0, r6
 800aeae:	f7fd fc83 	bl	80087b8 <_printf_float>
 800aeb2:	4607      	mov	r7, r0
 800aeb4:	1c78      	adds	r0, r7, #1
 800aeb6:	d1d6      	bne.n	800ae66 <_vfiprintf_r+0x19e>
 800aeb8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aeba:	07d9      	lsls	r1, r3, #31
 800aebc:	d405      	bmi.n	800aeca <_vfiprintf_r+0x202>
 800aebe:	89ab      	ldrh	r3, [r5, #12]
 800aec0:	059a      	lsls	r2, r3, #22
 800aec2:	d402      	bmi.n	800aeca <_vfiprintf_r+0x202>
 800aec4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aec6:	f7fe fa75 	bl	80093b4 <__retarget_lock_release_recursive>
 800aeca:	89ab      	ldrh	r3, [r5, #12]
 800aecc:	065b      	lsls	r3, r3, #25
 800aece:	f53f af1d 	bmi.w	800ad0c <_vfiprintf_r+0x44>
 800aed2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aed4:	e71c      	b.n	800ad10 <_vfiprintf_r+0x48>
 800aed6:	ab03      	add	r3, sp, #12
 800aed8:	9300      	str	r3, [sp, #0]
 800aeda:	462a      	mov	r2, r5
 800aedc:	4b05      	ldr	r3, [pc, #20]	; (800aef4 <_vfiprintf_r+0x22c>)
 800aede:	a904      	add	r1, sp, #16
 800aee0:	4630      	mov	r0, r6
 800aee2:	f7fd ff0d 	bl	8008d00 <_printf_i>
 800aee6:	e7e4      	b.n	800aeb2 <_vfiprintf_r+0x1ea>
 800aee8:	0802cd44 	.word	0x0802cd44
 800aeec:	0802cd4e 	.word	0x0802cd4e
 800aef0:	080087b9 	.word	0x080087b9
 800aef4:	0800aca3 	.word	0x0800aca3
 800aef8:	0802cd4a 	.word	0x0802cd4a

0800aefc <__sflush_r>:
 800aefc:	898a      	ldrh	r2, [r1, #12]
 800aefe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af02:	4605      	mov	r5, r0
 800af04:	0710      	lsls	r0, r2, #28
 800af06:	460c      	mov	r4, r1
 800af08:	d458      	bmi.n	800afbc <__sflush_r+0xc0>
 800af0a:	684b      	ldr	r3, [r1, #4]
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	dc05      	bgt.n	800af1c <__sflush_r+0x20>
 800af10:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800af12:	2b00      	cmp	r3, #0
 800af14:	dc02      	bgt.n	800af1c <__sflush_r+0x20>
 800af16:	2000      	movs	r0, #0
 800af18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800af1e:	2e00      	cmp	r6, #0
 800af20:	d0f9      	beq.n	800af16 <__sflush_r+0x1a>
 800af22:	2300      	movs	r3, #0
 800af24:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800af28:	682f      	ldr	r7, [r5, #0]
 800af2a:	6a21      	ldr	r1, [r4, #32]
 800af2c:	602b      	str	r3, [r5, #0]
 800af2e:	d032      	beq.n	800af96 <__sflush_r+0x9a>
 800af30:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800af32:	89a3      	ldrh	r3, [r4, #12]
 800af34:	075a      	lsls	r2, r3, #29
 800af36:	d505      	bpl.n	800af44 <__sflush_r+0x48>
 800af38:	6863      	ldr	r3, [r4, #4]
 800af3a:	1ac0      	subs	r0, r0, r3
 800af3c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800af3e:	b10b      	cbz	r3, 800af44 <__sflush_r+0x48>
 800af40:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800af42:	1ac0      	subs	r0, r0, r3
 800af44:	2300      	movs	r3, #0
 800af46:	4602      	mov	r2, r0
 800af48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800af4a:	6a21      	ldr	r1, [r4, #32]
 800af4c:	4628      	mov	r0, r5
 800af4e:	47b0      	blx	r6
 800af50:	1c43      	adds	r3, r0, #1
 800af52:	89a3      	ldrh	r3, [r4, #12]
 800af54:	d106      	bne.n	800af64 <__sflush_r+0x68>
 800af56:	6829      	ldr	r1, [r5, #0]
 800af58:	291d      	cmp	r1, #29
 800af5a:	d82b      	bhi.n	800afb4 <__sflush_r+0xb8>
 800af5c:	4a29      	ldr	r2, [pc, #164]	; (800b004 <__sflush_r+0x108>)
 800af5e:	410a      	asrs	r2, r1
 800af60:	07d6      	lsls	r6, r2, #31
 800af62:	d427      	bmi.n	800afb4 <__sflush_r+0xb8>
 800af64:	2200      	movs	r2, #0
 800af66:	6062      	str	r2, [r4, #4]
 800af68:	04d9      	lsls	r1, r3, #19
 800af6a:	6922      	ldr	r2, [r4, #16]
 800af6c:	6022      	str	r2, [r4, #0]
 800af6e:	d504      	bpl.n	800af7a <__sflush_r+0x7e>
 800af70:	1c42      	adds	r2, r0, #1
 800af72:	d101      	bne.n	800af78 <__sflush_r+0x7c>
 800af74:	682b      	ldr	r3, [r5, #0]
 800af76:	b903      	cbnz	r3, 800af7a <__sflush_r+0x7e>
 800af78:	6560      	str	r0, [r4, #84]	; 0x54
 800af7a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800af7c:	602f      	str	r7, [r5, #0]
 800af7e:	2900      	cmp	r1, #0
 800af80:	d0c9      	beq.n	800af16 <__sflush_r+0x1a>
 800af82:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800af86:	4299      	cmp	r1, r3
 800af88:	d002      	beq.n	800af90 <__sflush_r+0x94>
 800af8a:	4628      	mov	r0, r5
 800af8c:	f7ff f89e 	bl	800a0cc <_free_r>
 800af90:	2000      	movs	r0, #0
 800af92:	6360      	str	r0, [r4, #52]	; 0x34
 800af94:	e7c0      	b.n	800af18 <__sflush_r+0x1c>
 800af96:	2301      	movs	r3, #1
 800af98:	4628      	mov	r0, r5
 800af9a:	47b0      	blx	r6
 800af9c:	1c41      	adds	r1, r0, #1
 800af9e:	d1c8      	bne.n	800af32 <__sflush_r+0x36>
 800afa0:	682b      	ldr	r3, [r5, #0]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d0c5      	beq.n	800af32 <__sflush_r+0x36>
 800afa6:	2b1d      	cmp	r3, #29
 800afa8:	d001      	beq.n	800afae <__sflush_r+0xb2>
 800afaa:	2b16      	cmp	r3, #22
 800afac:	d101      	bne.n	800afb2 <__sflush_r+0xb6>
 800afae:	602f      	str	r7, [r5, #0]
 800afb0:	e7b1      	b.n	800af16 <__sflush_r+0x1a>
 800afb2:	89a3      	ldrh	r3, [r4, #12]
 800afb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800afb8:	81a3      	strh	r3, [r4, #12]
 800afba:	e7ad      	b.n	800af18 <__sflush_r+0x1c>
 800afbc:	690f      	ldr	r7, [r1, #16]
 800afbe:	2f00      	cmp	r7, #0
 800afc0:	d0a9      	beq.n	800af16 <__sflush_r+0x1a>
 800afc2:	0793      	lsls	r3, r2, #30
 800afc4:	680e      	ldr	r6, [r1, #0]
 800afc6:	bf08      	it	eq
 800afc8:	694b      	ldreq	r3, [r1, #20]
 800afca:	600f      	str	r7, [r1, #0]
 800afcc:	bf18      	it	ne
 800afce:	2300      	movne	r3, #0
 800afd0:	eba6 0807 	sub.w	r8, r6, r7
 800afd4:	608b      	str	r3, [r1, #8]
 800afd6:	f1b8 0f00 	cmp.w	r8, #0
 800afda:	dd9c      	ble.n	800af16 <__sflush_r+0x1a>
 800afdc:	6a21      	ldr	r1, [r4, #32]
 800afde:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800afe0:	4643      	mov	r3, r8
 800afe2:	463a      	mov	r2, r7
 800afe4:	4628      	mov	r0, r5
 800afe6:	47b0      	blx	r6
 800afe8:	2800      	cmp	r0, #0
 800afea:	dc06      	bgt.n	800affa <__sflush_r+0xfe>
 800afec:	89a3      	ldrh	r3, [r4, #12]
 800afee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aff2:	81a3      	strh	r3, [r4, #12]
 800aff4:	f04f 30ff 	mov.w	r0, #4294967295
 800aff8:	e78e      	b.n	800af18 <__sflush_r+0x1c>
 800affa:	4407      	add	r7, r0
 800affc:	eba8 0800 	sub.w	r8, r8, r0
 800b000:	e7e9      	b.n	800afd6 <__sflush_r+0xda>
 800b002:	bf00      	nop
 800b004:	dfbffffe 	.word	0xdfbffffe

0800b008 <_fflush_r>:
 800b008:	b538      	push	{r3, r4, r5, lr}
 800b00a:	690b      	ldr	r3, [r1, #16]
 800b00c:	4605      	mov	r5, r0
 800b00e:	460c      	mov	r4, r1
 800b010:	b913      	cbnz	r3, 800b018 <_fflush_r+0x10>
 800b012:	2500      	movs	r5, #0
 800b014:	4628      	mov	r0, r5
 800b016:	bd38      	pop	{r3, r4, r5, pc}
 800b018:	b118      	cbz	r0, 800b022 <_fflush_r+0x1a>
 800b01a:	6a03      	ldr	r3, [r0, #32]
 800b01c:	b90b      	cbnz	r3, 800b022 <_fflush_r+0x1a>
 800b01e:	f7fe f81d 	bl	800905c <__sinit>
 800b022:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b026:	2b00      	cmp	r3, #0
 800b028:	d0f3      	beq.n	800b012 <_fflush_r+0xa>
 800b02a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b02c:	07d0      	lsls	r0, r2, #31
 800b02e:	d404      	bmi.n	800b03a <_fflush_r+0x32>
 800b030:	0599      	lsls	r1, r3, #22
 800b032:	d402      	bmi.n	800b03a <_fflush_r+0x32>
 800b034:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b036:	f7fe f9bc 	bl	80093b2 <__retarget_lock_acquire_recursive>
 800b03a:	4628      	mov	r0, r5
 800b03c:	4621      	mov	r1, r4
 800b03e:	f7ff ff5d 	bl	800aefc <__sflush_r>
 800b042:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b044:	07da      	lsls	r2, r3, #31
 800b046:	4605      	mov	r5, r0
 800b048:	d4e4      	bmi.n	800b014 <_fflush_r+0xc>
 800b04a:	89a3      	ldrh	r3, [r4, #12]
 800b04c:	059b      	lsls	r3, r3, #22
 800b04e:	d4e1      	bmi.n	800b014 <_fflush_r+0xc>
 800b050:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b052:	f7fe f9af 	bl	80093b4 <__retarget_lock_release_recursive>
 800b056:	e7dd      	b.n	800b014 <_fflush_r+0xc>

0800b058 <__swhatbuf_r>:
 800b058:	b570      	push	{r4, r5, r6, lr}
 800b05a:	460c      	mov	r4, r1
 800b05c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b060:	2900      	cmp	r1, #0
 800b062:	b096      	sub	sp, #88	; 0x58
 800b064:	4615      	mov	r5, r2
 800b066:	461e      	mov	r6, r3
 800b068:	da0d      	bge.n	800b086 <__swhatbuf_r+0x2e>
 800b06a:	89a3      	ldrh	r3, [r4, #12]
 800b06c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b070:	f04f 0100 	mov.w	r1, #0
 800b074:	bf0c      	ite	eq
 800b076:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b07a:	2340      	movne	r3, #64	; 0x40
 800b07c:	2000      	movs	r0, #0
 800b07e:	6031      	str	r1, [r6, #0]
 800b080:	602b      	str	r3, [r5, #0]
 800b082:	b016      	add	sp, #88	; 0x58
 800b084:	bd70      	pop	{r4, r5, r6, pc}
 800b086:	466a      	mov	r2, sp
 800b088:	f000 f862 	bl	800b150 <_fstat_r>
 800b08c:	2800      	cmp	r0, #0
 800b08e:	dbec      	blt.n	800b06a <__swhatbuf_r+0x12>
 800b090:	9901      	ldr	r1, [sp, #4]
 800b092:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b096:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b09a:	4259      	negs	r1, r3
 800b09c:	4159      	adcs	r1, r3
 800b09e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b0a2:	e7eb      	b.n	800b07c <__swhatbuf_r+0x24>

0800b0a4 <__smakebuf_r>:
 800b0a4:	898b      	ldrh	r3, [r1, #12]
 800b0a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b0a8:	079d      	lsls	r5, r3, #30
 800b0aa:	4606      	mov	r6, r0
 800b0ac:	460c      	mov	r4, r1
 800b0ae:	d507      	bpl.n	800b0c0 <__smakebuf_r+0x1c>
 800b0b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b0b4:	6023      	str	r3, [r4, #0]
 800b0b6:	6123      	str	r3, [r4, #16]
 800b0b8:	2301      	movs	r3, #1
 800b0ba:	6163      	str	r3, [r4, #20]
 800b0bc:	b002      	add	sp, #8
 800b0be:	bd70      	pop	{r4, r5, r6, pc}
 800b0c0:	ab01      	add	r3, sp, #4
 800b0c2:	466a      	mov	r2, sp
 800b0c4:	f7ff ffc8 	bl	800b058 <__swhatbuf_r>
 800b0c8:	9900      	ldr	r1, [sp, #0]
 800b0ca:	4605      	mov	r5, r0
 800b0cc:	4630      	mov	r0, r6
 800b0ce:	f7ff f871 	bl	800a1b4 <_malloc_r>
 800b0d2:	b948      	cbnz	r0, 800b0e8 <__smakebuf_r+0x44>
 800b0d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b0d8:	059a      	lsls	r2, r3, #22
 800b0da:	d4ef      	bmi.n	800b0bc <__smakebuf_r+0x18>
 800b0dc:	f023 0303 	bic.w	r3, r3, #3
 800b0e0:	f043 0302 	orr.w	r3, r3, #2
 800b0e4:	81a3      	strh	r3, [r4, #12]
 800b0e6:	e7e3      	b.n	800b0b0 <__smakebuf_r+0xc>
 800b0e8:	89a3      	ldrh	r3, [r4, #12]
 800b0ea:	6020      	str	r0, [r4, #0]
 800b0ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b0f0:	81a3      	strh	r3, [r4, #12]
 800b0f2:	9b00      	ldr	r3, [sp, #0]
 800b0f4:	6163      	str	r3, [r4, #20]
 800b0f6:	9b01      	ldr	r3, [sp, #4]
 800b0f8:	6120      	str	r0, [r4, #16]
 800b0fa:	b15b      	cbz	r3, 800b114 <__smakebuf_r+0x70>
 800b0fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b100:	4630      	mov	r0, r6
 800b102:	f000 f837 	bl	800b174 <_isatty_r>
 800b106:	b128      	cbz	r0, 800b114 <__smakebuf_r+0x70>
 800b108:	89a3      	ldrh	r3, [r4, #12]
 800b10a:	f023 0303 	bic.w	r3, r3, #3
 800b10e:	f043 0301 	orr.w	r3, r3, #1
 800b112:	81a3      	strh	r3, [r4, #12]
 800b114:	89a3      	ldrh	r3, [r4, #12]
 800b116:	431d      	orrs	r5, r3
 800b118:	81a5      	strh	r5, [r4, #12]
 800b11a:	e7cf      	b.n	800b0bc <__smakebuf_r+0x18>

0800b11c <memmove>:
 800b11c:	4288      	cmp	r0, r1
 800b11e:	b510      	push	{r4, lr}
 800b120:	eb01 0402 	add.w	r4, r1, r2
 800b124:	d902      	bls.n	800b12c <memmove+0x10>
 800b126:	4284      	cmp	r4, r0
 800b128:	4623      	mov	r3, r4
 800b12a:	d807      	bhi.n	800b13c <memmove+0x20>
 800b12c:	1e43      	subs	r3, r0, #1
 800b12e:	42a1      	cmp	r1, r4
 800b130:	d008      	beq.n	800b144 <memmove+0x28>
 800b132:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b136:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b13a:	e7f8      	b.n	800b12e <memmove+0x12>
 800b13c:	4402      	add	r2, r0
 800b13e:	4601      	mov	r1, r0
 800b140:	428a      	cmp	r2, r1
 800b142:	d100      	bne.n	800b146 <memmove+0x2a>
 800b144:	bd10      	pop	{r4, pc}
 800b146:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b14a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b14e:	e7f7      	b.n	800b140 <memmove+0x24>

0800b150 <_fstat_r>:
 800b150:	b538      	push	{r3, r4, r5, lr}
 800b152:	4d07      	ldr	r5, [pc, #28]	; (800b170 <_fstat_r+0x20>)
 800b154:	2300      	movs	r3, #0
 800b156:	4604      	mov	r4, r0
 800b158:	4608      	mov	r0, r1
 800b15a:	4611      	mov	r1, r2
 800b15c:	602b      	str	r3, [r5, #0]
 800b15e:	f7f7 ffd8 	bl	8003112 <_fstat>
 800b162:	1c43      	adds	r3, r0, #1
 800b164:	d102      	bne.n	800b16c <_fstat_r+0x1c>
 800b166:	682b      	ldr	r3, [r5, #0]
 800b168:	b103      	cbz	r3, 800b16c <_fstat_r+0x1c>
 800b16a:	6023      	str	r3, [r4, #0]
 800b16c:	bd38      	pop	{r3, r4, r5, pc}
 800b16e:	bf00      	nop
 800b170:	20002ed8 	.word	0x20002ed8

0800b174 <_isatty_r>:
 800b174:	b538      	push	{r3, r4, r5, lr}
 800b176:	4d06      	ldr	r5, [pc, #24]	; (800b190 <_isatty_r+0x1c>)
 800b178:	2300      	movs	r3, #0
 800b17a:	4604      	mov	r4, r0
 800b17c:	4608      	mov	r0, r1
 800b17e:	602b      	str	r3, [r5, #0]
 800b180:	f7f7 ffd7 	bl	8003132 <_isatty>
 800b184:	1c43      	adds	r3, r0, #1
 800b186:	d102      	bne.n	800b18e <_isatty_r+0x1a>
 800b188:	682b      	ldr	r3, [r5, #0]
 800b18a:	b103      	cbz	r3, 800b18e <_isatty_r+0x1a>
 800b18c:	6023      	str	r3, [r4, #0]
 800b18e:	bd38      	pop	{r3, r4, r5, pc}
 800b190:	20002ed8 	.word	0x20002ed8

0800b194 <_sbrk_r>:
 800b194:	b538      	push	{r3, r4, r5, lr}
 800b196:	4d06      	ldr	r5, [pc, #24]	; (800b1b0 <_sbrk_r+0x1c>)
 800b198:	2300      	movs	r3, #0
 800b19a:	4604      	mov	r4, r0
 800b19c:	4608      	mov	r0, r1
 800b19e:	602b      	str	r3, [r5, #0]
 800b1a0:	f7f7 ffe0 	bl	8003164 <_sbrk>
 800b1a4:	1c43      	adds	r3, r0, #1
 800b1a6:	d102      	bne.n	800b1ae <_sbrk_r+0x1a>
 800b1a8:	682b      	ldr	r3, [r5, #0]
 800b1aa:	b103      	cbz	r3, 800b1ae <_sbrk_r+0x1a>
 800b1ac:	6023      	str	r3, [r4, #0]
 800b1ae:	bd38      	pop	{r3, r4, r5, pc}
 800b1b0:	20002ed8 	.word	0x20002ed8

0800b1b4 <__assert_func>:
 800b1b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b1b6:	4614      	mov	r4, r2
 800b1b8:	461a      	mov	r2, r3
 800b1ba:	4b09      	ldr	r3, [pc, #36]	; (800b1e0 <__assert_func+0x2c>)
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	4605      	mov	r5, r0
 800b1c0:	68d8      	ldr	r0, [r3, #12]
 800b1c2:	b14c      	cbz	r4, 800b1d8 <__assert_func+0x24>
 800b1c4:	4b07      	ldr	r3, [pc, #28]	; (800b1e4 <__assert_func+0x30>)
 800b1c6:	9100      	str	r1, [sp, #0]
 800b1c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b1cc:	4906      	ldr	r1, [pc, #24]	; (800b1e8 <__assert_func+0x34>)
 800b1ce:	462b      	mov	r3, r5
 800b1d0:	f000 f872 	bl	800b2b8 <fiprintf>
 800b1d4:	f000 f882 	bl	800b2dc <abort>
 800b1d8:	4b04      	ldr	r3, [pc, #16]	; (800b1ec <__assert_func+0x38>)
 800b1da:	461c      	mov	r4, r3
 800b1dc:	e7f3      	b.n	800b1c6 <__assert_func+0x12>
 800b1de:	bf00      	nop
 800b1e0:	20000070 	.word	0x20000070
 800b1e4:	0802cd5f 	.word	0x0802cd5f
 800b1e8:	0802cd6c 	.word	0x0802cd6c
 800b1ec:	0802cd9a 	.word	0x0802cd9a

0800b1f0 <_calloc_r>:
 800b1f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b1f2:	fba1 2402 	umull	r2, r4, r1, r2
 800b1f6:	b94c      	cbnz	r4, 800b20c <_calloc_r+0x1c>
 800b1f8:	4611      	mov	r1, r2
 800b1fa:	9201      	str	r2, [sp, #4]
 800b1fc:	f7fe ffda 	bl	800a1b4 <_malloc_r>
 800b200:	9a01      	ldr	r2, [sp, #4]
 800b202:	4605      	mov	r5, r0
 800b204:	b930      	cbnz	r0, 800b214 <_calloc_r+0x24>
 800b206:	4628      	mov	r0, r5
 800b208:	b003      	add	sp, #12
 800b20a:	bd30      	pop	{r4, r5, pc}
 800b20c:	220c      	movs	r2, #12
 800b20e:	6002      	str	r2, [r0, #0]
 800b210:	2500      	movs	r5, #0
 800b212:	e7f8      	b.n	800b206 <_calloc_r+0x16>
 800b214:	4621      	mov	r1, r4
 800b216:	f7fe f84f 	bl	80092b8 <memset>
 800b21a:	e7f4      	b.n	800b206 <_calloc_r+0x16>

0800b21c <__ascii_mbtowc>:
 800b21c:	b082      	sub	sp, #8
 800b21e:	b901      	cbnz	r1, 800b222 <__ascii_mbtowc+0x6>
 800b220:	a901      	add	r1, sp, #4
 800b222:	b142      	cbz	r2, 800b236 <__ascii_mbtowc+0x1a>
 800b224:	b14b      	cbz	r3, 800b23a <__ascii_mbtowc+0x1e>
 800b226:	7813      	ldrb	r3, [r2, #0]
 800b228:	600b      	str	r3, [r1, #0]
 800b22a:	7812      	ldrb	r2, [r2, #0]
 800b22c:	1e10      	subs	r0, r2, #0
 800b22e:	bf18      	it	ne
 800b230:	2001      	movne	r0, #1
 800b232:	b002      	add	sp, #8
 800b234:	4770      	bx	lr
 800b236:	4610      	mov	r0, r2
 800b238:	e7fb      	b.n	800b232 <__ascii_mbtowc+0x16>
 800b23a:	f06f 0001 	mvn.w	r0, #1
 800b23e:	e7f8      	b.n	800b232 <__ascii_mbtowc+0x16>

0800b240 <_realloc_r>:
 800b240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b244:	4680      	mov	r8, r0
 800b246:	4614      	mov	r4, r2
 800b248:	460e      	mov	r6, r1
 800b24a:	b921      	cbnz	r1, 800b256 <_realloc_r+0x16>
 800b24c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b250:	4611      	mov	r1, r2
 800b252:	f7fe bfaf 	b.w	800a1b4 <_malloc_r>
 800b256:	b92a      	cbnz	r2, 800b264 <_realloc_r+0x24>
 800b258:	f7fe ff38 	bl	800a0cc <_free_r>
 800b25c:	4625      	mov	r5, r4
 800b25e:	4628      	mov	r0, r5
 800b260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b264:	f000 f841 	bl	800b2ea <_malloc_usable_size_r>
 800b268:	4284      	cmp	r4, r0
 800b26a:	4607      	mov	r7, r0
 800b26c:	d802      	bhi.n	800b274 <_realloc_r+0x34>
 800b26e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b272:	d812      	bhi.n	800b29a <_realloc_r+0x5a>
 800b274:	4621      	mov	r1, r4
 800b276:	4640      	mov	r0, r8
 800b278:	f7fe ff9c 	bl	800a1b4 <_malloc_r>
 800b27c:	4605      	mov	r5, r0
 800b27e:	2800      	cmp	r0, #0
 800b280:	d0ed      	beq.n	800b25e <_realloc_r+0x1e>
 800b282:	42bc      	cmp	r4, r7
 800b284:	4622      	mov	r2, r4
 800b286:	4631      	mov	r1, r6
 800b288:	bf28      	it	cs
 800b28a:	463a      	movcs	r2, r7
 800b28c:	f7fe f893 	bl	80093b6 <memcpy>
 800b290:	4631      	mov	r1, r6
 800b292:	4640      	mov	r0, r8
 800b294:	f7fe ff1a 	bl	800a0cc <_free_r>
 800b298:	e7e1      	b.n	800b25e <_realloc_r+0x1e>
 800b29a:	4635      	mov	r5, r6
 800b29c:	e7df      	b.n	800b25e <_realloc_r+0x1e>

0800b29e <__ascii_wctomb>:
 800b29e:	b149      	cbz	r1, 800b2b4 <__ascii_wctomb+0x16>
 800b2a0:	2aff      	cmp	r2, #255	; 0xff
 800b2a2:	bf85      	ittet	hi
 800b2a4:	238a      	movhi	r3, #138	; 0x8a
 800b2a6:	6003      	strhi	r3, [r0, #0]
 800b2a8:	700a      	strbls	r2, [r1, #0]
 800b2aa:	f04f 30ff 	movhi.w	r0, #4294967295
 800b2ae:	bf98      	it	ls
 800b2b0:	2001      	movls	r0, #1
 800b2b2:	4770      	bx	lr
 800b2b4:	4608      	mov	r0, r1
 800b2b6:	4770      	bx	lr

0800b2b8 <fiprintf>:
 800b2b8:	b40e      	push	{r1, r2, r3}
 800b2ba:	b503      	push	{r0, r1, lr}
 800b2bc:	4601      	mov	r1, r0
 800b2be:	ab03      	add	r3, sp, #12
 800b2c0:	4805      	ldr	r0, [pc, #20]	; (800b2d8 <fiprintf+0x20>)
 800b2c2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b2c6:	6800      	ldr	r0, [r0, #0]
 800b2c8:	9301      	str	r3, [sp, #4]
 800b2ca:	f7ff fcfd 	bl	800acc8 <_vfiprintf_r>
 800b2ce:	b002      	add	sp, #8
 800b2d0:	f85d eb04 	ldr.w	lr, [sp], #4
 800b2d4:	b003      	add	sp, #12
 800b2d6:	4770      	bx	lr
 800b2d8:	20000070 	.word	0x20000070

0800b2dc <abort>:
 800b2dc:	b508      	push	{r3, lr}
 800b2de:	2006      	movs	r0, #6
 800b2e0:	f000 f834 	bl	800b34c <raise>
 800b2e4:	2001      	movs	r0, #1
 800b2e6:	f7f7 fec5 	bl	8003074 <_exit>

0800b2ea <_malloc_usable_size_r>:
 800b2ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b2ee:	1f18      	subs	r0, r3, #4
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	bfbc      	itt	lt
 800b2f4:	580b      	ldrlt	r3, [r1, r0]
 800b2f6:	18c0      	addlt	r0, r0, r3
 800b2f8:	4770      	bx	lr

0800b2fa <_raise_r>:
 800b2fa:	291f      	cmp	r1, #31
 800b2fc:	b538      	push	{r3, r4, r5, lr}
 800b2fe:	4604      	mov	r4, r0
 800b300:	460d      	mov	r5, r1
 800b302:	d904      	bls.n	800b30e <_raise_r+0x14>
 800b304:	2316      	movs	r3, #22
 800b306:	6003      	str	r3, [r0, #0]
 800b308:	f04f 30ff 	mov.w	r0, #4294967295
 800b30c:	bd38      	pop	{r3, r4, r5, pc}
 800b30e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800b310:	b112      	cbz	r2, 800b318 <_raise_r+0x1e>
 800b312:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b316:	b94b      	cbnz	r3, 800b32c <_raise_r+0x32>
 800b318:	4620      	mov	r0, r4
 800b31a:	f000 f831 	bl	800b380 <_getpid_r>
 800b31e:	462a      	mov	r2, r5
 800b320:	4601      	mov	r1, r0
 800b322:	4620      	mov	r0, r4
 800b324:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b328:	f000 b818 	b.w	800b35c <_kill_r>
 800b32c:	2b01      	cmp	r3, #1
 800b32e:	d00a      	beq.n	800b346 <_raise_r+0x4c>
 800b330:	1c59      	adds	r1, r3, #1
 800b332:	d103      	bne.n	800b33c <_raise_r+0x42>
 800b334:	2316      	movs	r3, #22
 800b336:	6003      	str	r3, [r0, #0]
 800b338:	2001      	movs	r0, #1
 800b33a:	e7e7      	b.n	800b30c <_raise_r+0x12>
 800b33c:	2400      	movs	r4, #0
 800b33e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b342:	4628      	mov	r0, r5
 800b344:	4798      	blx	r3
 800b346:	2000      	movs	r0, #0
 800b348:	e7e0      	b.n	800b30c <_raise_r+0x12>
	...

0800b34c <raise>:
 800b34c:	4b02      	ldr	r3, [pc, #8]	; (800b358 <raise+0xc>)
 800b34e:	4601      	mov	r1, r0
 800b350:	6818      	ldr	r0, [r3, #0]
 800b352:	f7ff bfd2 	b.w	800b2fa <_raise_r>
 800b356:	bf00      	nop
 800b358:	20000070 	.word	0x20000070

0800b35c <_kill_r>:
 800b35c:	b538      	push	{r3, r4, r5, lr}
 800b35e:	4d07      	ldr	r5, [pc, #28]	; (800b37c <_kill_r+0x20>)
 800b360:	2300      	movs	r3, #0
 800b362:	4604      	mov	r4, r0
 800b364:	4608      	mov	r0, r1
 800b366:	4611      	mov	r1, r2
 800b368:	602b      	str	r3, [r5, #0]
 800b36a:	f7f7 fe73 	bl	8003054 <_kill>
 800b36e:	1c43      	adds	r3, r0, #1
 800b370:	d102      	bne.n	800b378 <_kill_r+0x1c>
 800b372:	682b      	ldr	r3, [r5, #0]
 800b374:	b103      	cbz	r3, 800b378 <_kill_r+0x1c>
 800b376:	6023      	str	r3, [r4, #0]
 800b378:	bd38      	pop	{r3, r4, r5, pc}
 800b37a:	bf00      	nop
 800b37c:	20002ed8 	.word	0x20002ed8

0800b380 <_getpid_r>:
 800b380:	f7f7 be60 	b.w	8003044 <_getpid>

0800b384 <_init>:
 800b384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b386:	bf00      	nop
 800b388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b38a:	bc08      	pop	{r3}
 800b38c:	469e      	mov	lr, r3
 800b38e:	4770      	bx	lr

0800b390 <_fini>:
 800b390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b392:	bf00      	nop
 800b394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b396:	bc08      	pop	{r3}
 800b398:	469e      	mov	lr, r3
 800b39a:	4770      	bx	lr
