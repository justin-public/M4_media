
M4_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f80  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000016f0  08004108  08004108  00014108  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080057f8  080057f8  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  080057f8  080057f8  000157f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005800  08005800  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005800  08005800  00015800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005804  08005804  00015804  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08005808  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020018  2**0
                  CONTENTS
 10 .bss          0000227c  20000018  20000018  00020018  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20002294  20002294  00020018  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000ce62  00000000  00000000  0002008b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002bfe  00000000  00000000  0002ceed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000b70  00000000  00000000  0002faf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00005263  00000000  00000000  00030660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012e10  00000000  00000000  000358c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c93f2  00000000  00000000  000486d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_rnglists 00000855  00000000  00000000  00111ac5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002984  00000000  00000000  0011231c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000044  00000000  00000000  00114ca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000018 	.word	0x20000018
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080040f0 	.word	0x080040f0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000001c 	.word	0x2000001c
 80001c4:	080040f0 	.word	0x080040f0

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b970 	b.w	80004d0 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	460f      	mov	r7, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4694      	mov	ip, r2
 800021c:	d965      	bls.n	80002ea <__udivmoddi4+0xe2>
 800021e:	fab2 f382 	clz	r3, r2
 8000222:	b143      	cbz	r3, 8000236 <__udivmoddi4+0x2e>
 8000224:	fa02 fc03 	lsl.w	ip, r2, r3
 8000228:	f1c3 0220 	rsb	r2, r3, #32
 800022c:	409f      	lsls	r7, r3
 800022e:	fa20 f202 	lsr.w	r2, r0, r2
 8000232:	4317      	orrs	r7, r2
 8000234:	409c      	lsls	r4, r3
 8000236:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023a:	fa1f f58c 	uxth.w	r5, ip
 800023e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000242:	0c22      	lsrs	r2, r4, #16
 8000244:	fb0e 7711 	mls	r7, lr, r1, r7
 8000248:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800024c:	fb01 f005 	mul.w	r0, r1, r5
 8000250:	4290      	cmp	r0, r2
 8000252:	d90a      	bls.n	800026a <__udivmoddi4+0x62>
 8000254:	eb1c 0202 	adds.w	r2, ip, r2
 8000258:	f101 37ff 	add.w	r7, r1, #4294967295
 800025c:	f080 811c 	bcs.w	8000498 <__udivmoddi4+0x290>
 8000260:	4290      	cmp	r0, r2
 8000262:	f240 8119 	bls.w	8000498 <__udivmoddi4+0x290>
 8000266:	3902      	subs	r1, #2
 8000268:	4462      	add	r2, ip
 800026a:	1a12      	subs	r2, r2, r0
 800026c:	b2a4      	uxth	r4, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027a:	fb00 f505 	mul.w	r5, r0, r5
 800027e:	42a5      	cmp	r5, r4
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x90>
 8000282:	eb1c 0404 	adds.w	r4, ip, r4
 8000286:	f100 32ff 	add.w	r2, r0, #4294967295
 800028a:	f080 8107 	bcs.w	800049c <__udivmoddi4+0x294>
 800028e:	42a5      	cmp	r5, r4
 8000290:	f240 8104 	bls.w	800049c <__udivmoddi4+0x294>
 8000294:	4464      	add	r4, ip
 8000296:	3802      	subs	r0, #2
 8000298:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029c:	1b64      	subs	r4, r4, r5
 800029e:	2100      	movs	r1, #0
 80002a0:	b11e      	cbz	r6, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40dc      	lsrs	r4, r3
 80002a4:	2300      	movs	r3, #0
 80002a6:	e9c6 4300 	strd	r4, r3, [r6]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d908      	bls.n	80002c4 <__udivmoddi4+0xbc>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80ed 	beq.w	8000492 <__udivmoddi4+0x28a>
 80002b8:	2100      	movs	r1, #0
 80002ba:	e9c6 0500 	strd	r0, r5, [r6]
 80002be:	4608      	mov	r0, r1
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	fab3 f183 	clz	r1, r3
 80002c8:	2900      	cmp	r1, #0
 80002ca:	d149      	bne.n	8000360 <__udivmoddi4+0x158>
 80002cc:	42ab      	cmp	r3, r5
 80002ce:	d302      	bcc.n	80002d6 <__udivmoddi4+0xce>
 80002d0:	4282      	cmp	r2, r0
 80002d2:	f200 80f8 	bhi.w	80004c6 <__udivmoddi4+0x2be>
 80002d6:	1a84      	subs	r4, r0, r2
 80002d8:	eb65 0203 	sbc.w	r2, r5, r3
 80002dc:	2001      	movs	r0, #1
 80002de:	4617      	mov	r7, r2
 80002e0:	2e00      	cmp	r6, #0
 80002e2:	d0e2      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	e9c6 4700 	strd	r4, r7, [r6]
 80002e8:	e7df      	b.n	80002aa <__udivmoddi4+0xa2>
 80002ea:	b902      	cbnz	r2, 80002ee <__udivmoddi4+0xe6>
 80002ec:	deff      	udf	#255	; 0xff
 80002ee:	fab2 f382 	clz	r3, r2
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	f040 8090 	bne.w	8000418 <__udivmoddi4+0x210>
 80002f8:	1a8a      	subs	r2, r1, r2
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2101      	movs	r1, #1
 8000304:	fbb2 f5f7 	udiv	r5, r2, r7
 8000308:	fb07 2015 	mls	r0, r7, r5, r2
 800030c:	0c22      	lsrs	r2, r4, #16
 800030e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000312:	fb0e f005 	mul.w	r0, lr, r5
 8000316:	4290      	cmp	r0, r2
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x124>
 800031a:	eb1c 0202 	adds.w	r2, ip, r2
 800031e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4290      	cmp	r0, r2
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2b8>
 800032a:	4645      	mov	r5, r8
 800032c:	1a12      	subs	r2, r2, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb2 f0f7 	udiv	r0, r2, r7
 8000334:	fb07 2210 	mls	r2, r7, r0, r2
 8000338:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x14e>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 32ff 	add.w	r2, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x14c>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2c2>
 8000354:	4610      	mov	r0, r2
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035e:	e79f      	b.n	80002a0 <__udivmoddi4+0x98>
 8000360:	f1c1 0720 	rsb	r7, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa05 f401 	lsl.w	r4, r5, r1
 8000372:	fa20 f307 	lsr.w	r3, r0, r7
 8000376:	40fd      	lsrs	r5, r7
 8000378:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037c:	4323      	orrs	r3, r4
 800037e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000382:	fa1f fe8c 	uxth.w	lr, ip
 8000386:	fb09 5518 	mls	r5, r9, r8, r5
 800038a:	0c1c      	lsrs	r4, r3, #16
 800038c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000390:	fb08 f50e 	mul.w	r5, r8, lr
 8000394:	42a5      	cmp	r5, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	fa00 f001 	lsl.w	r0, r0, r1
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2b4>
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2b4>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4464      	add	r4, ip
 80003b8:	1b64      	subs	r4, r4, r5
 80003ba:	b29d      	uxth	r5, r3
 80003bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c0:	fb09 4413 	mls	r4, r9, r3, r4
 80003c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2ac>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2ac>
 80003de:	3b02      	subs	r3, #2
 80003e0:	4464      	add	r4, ip
 80003e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e6:	fba3 9502 	umull	r9, r5, r3, r2
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	42ac      	cmp	r4, r5
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46ae      	mov	lr, r5
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x29c>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x298>
 80003f8:	b156      	cbz	r6, 8000410 <__udivmoddi4+0x208>
 80003fa:	ebb0 0208 	subs.w	r2, r0, r8
 80003fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000402:	fa04 f707 	lsl.w	r7, r4, r7
 8000406:	40ca      	lsrs	r2, r1
 8000408:	40cc      	lsrs	r4, r1
 800040a:	4317      	orrs	r7, r2
 800040c:	e9c6 7400 	strd	r7, r4, [r6]
 8000410:	4618      	mov	r0, r3
 8000412:	2100      	movs	r1, #0
 8000414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000418:	f1c3 0120 	rsb	r1, r3, #32
 800041c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000420:	fa20 f201 	lsr.w	r2, r0, r1
 8000424:	fa25 f101 	lsr.w	r1, r5, r1
 8000428:	409d      	lsls	r5, r3
 800042a:	432a      	orrs	r2, r5
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb1 f0f7 	udiv	r0, r1, r7
 8000438:	fb07 1510 	mls	r5, r7, r0, r1
 800043c:	0c11      	lsrs	r1, r2, #16
 800043e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000442:	fb00 f50e 	mul.w	r5, r0, lr
 8000446:	428d      	cmp	r5, r1
 8000448:	fa04 f403 	lsl.w	r4, r4, r3
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x258>
 800044e:	eb1c 0101 	adds.w	r1, ip, r1
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 8000458:	428d      	cmp	r5, r1
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800045c:	3802      	subs	r0, #2
 800045e:	4461      	add	r1, ip
 8000460:	1b49      	subs	r1, r1, r5
 8000462:	b292      	uxth	r2, r2
 8000464:	fbb1 f5f7 	udiv	r5, r1, r7
 8000468:	fb07 1115 	mls	r1, r7, r5, r1
 800046c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000470:	fb05 f10e 	mul.w	r1, r5, lr
 8000474:	4291      	cmp	r1, r2
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x282>
 8000478:	eb1c 0202 	adds.w	r2, ip, r2
 800047c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 8000482:	4291      	cmp	r1, r2
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000486:	3d02      	subs	r5, #2
 8000488:	4462      	add	r2, ip
 800048a:	1a52      	subs	r2, r2, r1
 800048c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0xfc>
 8000492:	4631      	mov	r1, r6
 8000494:	4630      	mov	r0, r6
 8000496:	e708      	b.n	80002aa <__udivmoddi4+0xa2>
 8000498:	4639      	mov	r1, r7
 800049a:	e6e6      	b.n	800026a <__udivmoddi4+0x62>
 800049c:	4610      	mov	r0, r2
 800049e:	e6fb      	b.n	8000298 <__udivmoddi4+0x90>
 80004a0:	4548      	cmp	r0, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ac:	3b01      	subs	r3, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004b0:	4645      	mov	r5, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x282>
 80004b4:	462b      	mov	r3, r5
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x258>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004c0:	3d02      	subs	r5, #2
 80004c2:	4462      	add	r2, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x124>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e70a      	b.n	80002e0 <__udivmoddi4+0xd8>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x14e>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <main>:

IWDG_HandleTypeDef hiwdg;
HAL_StatusTypeDef status;

int main(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af00      	add	r7, sp, #0
	uint16_t ucStatus;

	HAL_Init();
 80004da:	f002 fe01 	bl	80030e0 <HAL_Init>
	SystemInit_clk();
 80004de:	f000 f813 	bl	8000508 <SystemInit_clk>
	IWDG_Init();
 80004e2:	f000 f82b 	bl	800053c <IWDG_Init>

	bsp_Init();
 80004e6:	f002 fde3 	bl	80030b0 <bsp_Init>

	LoadParam();
 80004ea:	f000 f963 	bl	80007b4 <LoadParam>

	LCD_InitHard();
 80004ee:	f002 f87f 	bl	80025f0 <LCD_InitHard>
#if 0
	char message[] = "Hello, UART1!\r\n";
	HAL_StatusTypeDef status;
	ucStatus = MS_MAIN_MENU;
#endif
	ucStatus = MS_MAIN_MENU;
 80004f2:	2300      	movs	r3, #0
 80004f4:	80fb      	strh	r3, [r7, #6]
	while (1)
	{
#if 1
		switch (ucStatus)
 80004f6:	88fb      	ldrh	r3, [r7, #6]
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d1fc      	bne.n	80004f6 <main+0x22>
		{
			case MS_MAIN_MENU:
				ucStatus = MainMenu();		/* Ö÷½çÃæ×´Ì¬ */
 80004fc:	f000 f8a4 	bl	8000648 <MainMenu>
 8000500:	4603      	mov	r3, r0
 8000502:	80fb      	strh	r3, [r7, #6]
			break;
 8000504:	bf00      	nop
		switch (ucStatus)
 8000506:	e7f6      	b.n	80004f6 <main+0x22>

08000508 <SystemInit_clk>:
}



void SystemInit_clk(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
	SystemClock_Config();
 800050c:	f000 f82c 	bl	8000568 <SystemClock_Config>

	FLASH->ACR |= FLASH_ACR_LATENCY_5WS;
 8000510:	4b09      	ldr	r3, [pc, #36]	; (8000538 <SystemInit_clk+0x30>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	4a08      	ldr	r2, [pc, #32]	; (8000538 <SystemInit_clk+0x30>)
 8000516:	f043 0305 	orr.w	r3, r3, #5
 800051a:	6013      	str	r3, [r2, #0]

	FLASH->ACR |= FLASH_ACR_ICEN | FLASH_ACR_DCEN;
 800051c:	4b06      	ldr	r3, [pc, #24]	; (8000538 <SystemInit_clk+0x30>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	4a05      	ldr	r2, [pc, #20]	; (8000538 <SystemInit_clk+0x30>)
 8000522:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8000526:	6013      	str	r3, [r2, #0]

	/* Set the VDD voltage to 3.3V (Main regulator output voltage scale 1) */
	// STM32F4의 경우 디폴트 설정이 scale1 모드임.

	/* Enable the Prefetch buffer (already disabled in the original config) */
	FLASH->ACR |= FLASH_ACR_PRFTEN;
 8000528:	4b03      	ldr	r3, [pc, #12]	; (8000538 <SystemInit_clk+0x30>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	4a02      	ldr	r2, [pc, #8]	; (8000538 <SystemInit_clk+0x30>)
 800052e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000532:	6013      	str	r3, [r2, #0]
}
 8000534:	bf00      	nop
 8000536:	bd80      	pop	{r7, pc}
 8000538:	40023c00 	.word	0x40023c00

0800053c <IWDG_Init>:

void IWDG_Init(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
	hiwdg.Instance = IWDG;
 8000540:	4b07      	ldr	r3, [pc, #28]	; (8000560 <IWDG_Init+0x24>)
 8000542:	4a08      	ldr	r2, [pc, #32]	; (8000564 <IWDG_Init+0x28>)
 8000544:	601a      	str	r2, [r3, #0]
	hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 8000546:	4b06      	ldr	r3, [pc, #24]	; (8000560 <IWDG_Init+0x24>)
 8000548:	2206      	movs	r2, #6
 800054a:	605a      	str	r2, [r3, #4]
	hiwdg.Init.Reload = 4095;  // 최대값 (약 26초 타임아웃)
 800054c:	4b04      	ldr	r3, [pc, #16]	; (8000560 <IWDG_Init+0x24>)
 800054e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000552:	609a      	str	r2, [r3, #8]
	HAL_IWDG_Init(&hiwdg);
 8000554:	4802      	ldr	r0, [pc, #8]	; (8000560 <IWDG_Init+0x24>)
 8000556:	f000 f9c3 	bl	80008e0 <HAL_IWDG_Init>
}
 800055a:	bf00      	nop
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	20000034 	.word	0x20000034
 8000564:	40003000 	.word	0x40003000

08000568 <SystemClock_Config>:

void SystemClock_Config(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b094      	sub	sp, #80	; 0x50
 800056c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056e:	f107 0320 	add.w	r3, r7, #32
 8000572:	2230      	movs	r2, #48	; 0x30
 8000574:	2100      	movs	r1, #0
 8000576:	4618      	mov	r0, r3
 8000578:	f003 fd80 	bl	800407c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800057c:	f107 030c 	add.w	r3, r7, #12
 8000580:	2200      	movs	r2, #0
 8000582:	601a      	str	r2, [r3, #0]
 8000584:	605a      	str	r2, [r3, #4]
 8000586:	609a      	str	r2, [r3, #8]
 8000588:	60da      	str	r2, [r3, #12]
 800058a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800058c:	2300      	movs	r3, #0
 800058e:	60bb      	str	r3, [r7, #8]
 8000590:	4b28      	ldr	r3, [pc, #160]	; (8000634 <SystemClock_Config+0xcc>)
 8000592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000594:	4a27      	ldr	r2, [pc, #156]	; (8000634 <SystemClock_Config+0xcc>)
 8000596:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800059a:	6413      	str	r3, [r2, #64]	; 0x40
 800059c:	4b25      	ldr	r3, [pc, #148]	; (8000634 <SystemClock_Config+0xcc>)
 800059e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005a4:	60bb      	str	r3, [r7, #8]
 80005a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005a8:	2300      	movs	r3, #0
 80005aa:	607b      	str	r3, [r7, #4]
 80005ac:	4b22      	ldr	r3, [pc, #136]	; (8000638 <SystemClock_Config+0xd0>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a21      	ldr	r2, [pc, #132]	; (8000638 <SystemClock_Config+0xd0>)
 80005b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005b6:	6013      	str	r3, [r2, #0]
 80005b8:	4b1f      	ldr	r3, [pc, #124]	; (8000638 <SystemClock_Config+0xd0>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005c0:	607b      	str	r3, [r7, #4]
 80005c2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005c4:	2301      	movs	r3, #1
 80005c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005cc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ce:	2302      	movs	r3, #2
 80005d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80005d8:	2319      	movs	r3, #25
 80005da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005dc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005e0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005e2:	2302      	movs	r3, #2
 80005e4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;                                  // 4
 80005e6:	2307      	movs	r3, #7
 80005e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ea:	f107 0320 	add.w	r3, r7, #32
 80005ee:	4618      	mov	r0, r3
 80005f0:	f003 f8ec 	bl	80037cc <HAL_RCC_OscConfig>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005fa:	f000 f81f 	bl	800063c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005fe:	230f      	movs	r3, #15
 8000600:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000602:	2302      	movs	r3, #2
 8000604:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000606:	2300      	movs	r3, #0
 8000608:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800060a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800060e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000610:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000614:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000616:	f107 030c 	add.w	r3, r7, #12
 800061a:	2105      	movs	r1, #5
 800061c:	4618      	mov	r0, r3
 800061e:	f003 fb4d 	bl	8003cbc <HAL_RCC_ClockConfig>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000628:	f000 f808 	bl	800063c <Error_Handler>
  }
}
 800062c:	bf00      	nop
 800062e:	3750      	adds	r7, #80	; 0x50
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	40023800 	.word	0x40023800
 8000638:	40007000 	.word	0x40007000

0800063c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000640:	b672      	cpsid	i
}
 8000642:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000644:	e7fe      	b.n	8000644 <Error_Handler+0x8>
	...

08000648 <MainMenu>:
*********************************************************************************************************
*	Func name: MainMenu
*********************************************************************************************************
*/
uint8_t MainMenu(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b086      	sub	sp, #24
 800064c:	af00      	add	r7, sp, #0
	FONT_T tIconFont;		

	int16_t tpX, tpY;
	uint16_t i;

	DispBackground();
 800064e:	f000 f857 	bl	8000700 <DispBackground>

	{
		tFont.FontCode = FC_ST_16;	/* ×ÖÌå´úÂë 16µãÕó */
 8000652:	2300      	movs	r3, #0
 8000654:	81bb      	strh	r3, [r7, #12]
		tFont.FrontColor = MAIN_TEXT_COLOR;	/* ×ÖÌåÑÕÉ« */
 8000656:	4b23      	ldr	r3, [pc, #140]	; (80006e4 <MainMenu+0x9c>)
 8000658:	881b      	ldrh	r3, [r3, #0]
 800065a:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 800065e:	d106      	bne.n	800066e <MainMenu+0x26>
 8000660:	4b21      	ldr	r3, [pc, #132]	; (80006e8 <MainMenu+0xa0>)
 8000662:	881b      	ldrh	r3, [r3, #0]
 8000664:	4a21      	ldr	r2, [pc, #132]	; (80006ec <MainMenu+0xa4>)
 8000666:	00db      	lsls	r3, r3, #3
 8000668:	4413      	add	r3, r2
 800066a:	88db      	ldrh	r3, [r3, #6]
 800066c:	e005      	b.n	800067a <MainMenu+0x32>
 800066e:	4b1e      	ldr	r3, [pc, #120]	; (80006e8 <MainMenu+0xa0>)
 8000670:	881b      	ldrh	r3, [r3, #0]
 8000672:	4a1f      	ldr	r2, [pc, #124]	; (80006f0 <MainMenu+0xa8>)
 8000674:	00db      	lsls	r3, r3, #3
 8000676:	4413      	add	r3, r2
 8000678:	88db      	ldrh	r3, [r3, #6]
 800067a:	81fb      	strh	r3, [r7, #14]
		tFont.BackColor = CL_MASK;	/* ÎÄ×Ö±³¾°ÑÕÉ« */
 800067c:	f649 1399 	movw	r3, #39321	; 0x9999
 8000680:	823b      	strh	r3, [r7, #16]
		tFont.Space = 0;				/* ÎÄ×Ö¼ä¾à£¬µ¥Î» = ÏñËØ */
 8000682:	2300      	movs	r3, #0
 8000684:	827b      	strh	r3, [r7, #18]

		tIconFont.FontCode = FC_ST_12;		/* ×ÖÌå´úÂë 16µãÕó */
 8000686:	2301      	movs	r3, #1
 8000688:	80bb      	strh	r3, [r7, #4]
		tIconFont.FrontColor = MAIN_TEXT_COLOR;	/* ×ÖÌåÑÕÉ« */
 800068a:	4b16      	ldr	r3, [pc, #88]	; (80006e4 <MainMenu+0x9c>)
 800068c:	881b      	ldrh	r3, [r3, #0]
 800068e:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8000692:	d106      	bne.n	80006a2 <MainMenu+0x5a>
 8000694:	4b14      	ldr	r3, [pc, #80]	; (80006e8 <MainMenu+0xa0>)
 8000696:	881b      	ldrh	r3, [r3, #0]
 8000698:	4a14      	ldr	r2, [pc, #80]	; (80006ec <MainMenu+0xa4>)
 800069a:	00db      	lsls	r3, r3, #3
 800069c:	4413      	add	r3, r2
 800069e:	88db      	ldrh	r3, [r3, #6]
 80006a0:	e005      	b.n	80006ae <MainMenu+0x66>
 80006a2:	4b11      	ldr	r3, [pc, #68]	; (80006e8 <MainMenu+0xa0>)
 80006a4:	881b      	ldrh	r3, [r3, #0]
 80006a6:	4a12      	ldr	r2, [pc, #72]	; (80006f0 <MainMenu+0xa8>)
 80006a8:	00db      	lsls	r3, r3, #3
 80006aa:	4413      	add	r3, r2
 80006ac:	88db      	ldrh	r3, [r3, #6]
 80006ae:	80fb      	strh	r3, [r7, #6]
		tIconFont.BackColor = CL_MASK;		/* ÎÄ×Ö±³¾°ÑÕÉ« */
 80006b0:	f649 1399 	movw	r3, #39321	; 0x9999
 80006b4:	813b      	strh	r3, [r7, #8]
		tIconFont.Space = 1;				/* ÎÄ×Ö¼ä¾à£¬µ¥Î» = ÏñËØ */
 80006b6:	2301      	movs	r3, #1
 80006b8:	817b      	strh	r3, [r7, #10]
	}
	LCD_DispStr(5, 3, VER_INFO, &tFont);			/* ÔÚ(8,3)×ø±ê´¦ÏÔÊ¾Ò»´®ºº×Ö */
 80006ba:	f107 030c 	add.w	r3, r7, #12
 80006be:	4a0d      	ldr	r2, [pc, #52]	; (80006f4 <MainMenu+0xac>)
 80006c0:	2103      	movs	r1, #3
 80006c2:	2005      	movs	r0, #5
 80006c4:	f002 f8f0 	bl	80028a8 <LCD_DispStr>
	LCD_DispStr(5, g_LcdHeight - 13, KEY_INFO, &tIconFont);			/* ÔÚ(8,3)×ø±ê´¦ÏÔÊ¾Ò»´®ºº×Ö */
 80006c8:	4b0b      	ldr	r3, [pc, #44]	; (80006f8 <MainMenu+0xb0>)
 80006ca:	881b      	ldrh	r3, [r3, #0]
 80006cc:	3b0d      	subs	r3, #13
 80006ce:	b299      	uxth	r1, r3
 80006d0:	1d3b      	adds	r3, r7, #4
 80006d2:	4a0a      	ldr	r2, [pc, #40]	; (80006fc <MainMenu+0xb4>)
 80006d4:	2005      	movs	r0, #5
 80006d6:	f002 f8e7 	bl	80028a8 <LCD_DispStr>

	fRefresh = 1;
 80006da:	2301      	movs	r3, #1
 80006dc:	75fb      	strb	r3, [r7, #23]

	while(1)
	{
		bsp_Idle();
 80006de:	f002 fcf8 	bl	80030d2 <bsp_Idle>
 80006e2:	e7fc      	b.n	80006de <MainMenu+0x96>
 80006e4:	2000000c 	.word	0x2000000c
 80006e8:	20000040 	.word	0x20000040
 80006ec:	08005770 	.word	0x08005770
 80006f0:	080057a8 	.word	0x080057a8
 80006f4:	08004108 	.word	0x08004108
 80006f8:	2000000a 	.word	0x2000000a
 80006fc:	08004118 	.word	0x08004118

08000700 <DispBackground>:
*********************************************************************************************************
*	Func name: DispBackground
*********************************************************************************************************
*/
static void DispBackground(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af02      	add	r7, sp, #8
	if (g_LcdWidth == 480)	/* 480 x 272 */
 8000706:	4b26      	ldr	r3, [pc, #152]	; (80007a0 <DispBackground+0xa0>)
 8000708:	881b      	ldrh	r3, [r3, #0]
 800070a:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 800070e:	d122      	bne.n	8000756 <DispBackground+0x56>
	{
		if (s_UI480[s_ColorIndex].pBmp == 0)
 8000710:	4b24      	ldr	r3, [pc, #144]	; (80007a4 <DispBackground+0xa4>)
 8000712:	881b      	ldrh	r3, [r3, #0]
 8000714:	461a      	mov	r2, r3
 8000716:	4b24      	ldr	r3, [pc, #144]	; (80007a8 <DispBackground+0xa8>)
 8000718:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800071c:	2b00      	cmp	r3, #0
 800071e:	d109      	bne.n	8000734 <DispBackground+0x34>
		{
			LCD_ClrScr(s_UI480[s_ColorIndex].BackColor);  	/* ÇåÆÁ, Ìî³äµ¥É« */
 8000720:	4b20      	ldr	r3, [pc, #128]	; (80007a4 <DispBackground+0xa4>)
 8000722:	881b      	ldrh	r3, [r3, #0]
 8000724:	4a20      	ldr	r2, [pc, #128]	; (80007a8 <DispBackground+0xa8>)
 8000726:	00db      	lsls	r3, r3, #3
 8000728:	4413      	add	r3, r2
 800072a:	889b      	ldrh	r3, [r3, #4]
 800072c:	4618      	mov	r0, r3
 800072e:	f002 f867 	bl	8002800 <LCD_ClrScr>
		else
		{
			LCD_DrawBMP(0, 0, g_LcdHeight, g_LcdWidth, s_UI800[s_ColorIndex].pBmp);
		}
	}	
}
 8000732:	e032      	b.n	800079a <DispBackground+0x9a>
			LCD_DrawBMP(0, 0, g_LcdHeight, g_LcdWidth, s_UI480[s_ColorIndex].pBmp);
 8000734:	4b1d      	ldr	r3, [pc, #116]	; (80007ac <DispBackground+0xac>)
 8000736:	881a      	ldrh	r2, [r3, #0]
 8000738:	4b19      	ldr	r3, [pc, #100]	; (80007a0 <DispBackground+0xa0>)
 800073a:	8819      	ldrh	r1, [r3, #0]
 800073c:	4b19      	ldr	r3, [pc, #100]	; (80007a4 <DispBackground+0xa4>)
 800073e:	881b      	ldrh	r3, [r3, #0]
 8000740:	4618      	mov	r0, r3
 8000742:	4b19      	ldr	r3, [pc, #100]	; (80007a8 <DispBackground+0xa8>)
 8000744:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
 8000748:	9300      	str	r3, [sp, #0]
 800074a:	460b      	mov	r3, r1
 800074c:	2100      	movs	r1, #0
 800074e:	2000      	movs	r0, #0
 8000750:	f002 f888 	bl	8002864 <LCD_DrawBMP>
}
 8000754:	e021      	b.n	800079a <DispBackground+0x9a>
		if (s_UI800[s_ColorIndex].pBmp == 0)
 8000756:	4b13      	ldr	r3, [pc, #76]	; (80007a4 <DispBackground+0xa4>)
 8000758:	881b      	ldrh	r3, [r3, #0]
 800075a:	461a      	mov	r2, r3
 800075c:	4b14      	ldr	r3, [pc, #80]	; (80007b0 <DispBackground+0xb0>)
 800075e:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8000762:	2b00      	cmp	r3, #0
 8000764:	d109      	bne.n	800077a <DispBackground+0x7a>
			LCD_ClrScr(s_UI800[s_ColorIndex].BackColor);  	/* ÇåÆÁ, Ìî³äµ¥É« */
 8000766:	4b0f      	ldr	r3, [pc, #60]	; (80007a4 <DispBackground+0xa4>)
 8000768:	881b      	ldrh	r3, [r3, #0]
 800076a:	4a11      	ldr	r2, [pc, #68]	; (80007b0 <DispBackground+0xb0>)
 800076c:	00db      	lsls	r3, r3, #3
 800076e:	4413      	add	r3, r2
 8000770:	889b      	ldrh	r3, [r3, #4]
 8000772:	4618      	mov	r0, r3
 8000774:	f002 f844 	bl	8002800 <LCD_ClrScr>
}
 8000778:	e00f      	b.n	800079a <DispBackground+0x9a>
			LCD_DrawBMP(0, 0, g_LcdHeight, g_LcdWidth, s_UI800[s_ColorIndex].pBmp);
 800077a:	4b0c      	ldr	r3, [pc, #48]	; (80007ac <DispBackground+0xac>)
 800077c:	881a      	ldrh	r2, [r3, #0]
 800077e:	4b08      	ldr	r3, [pc, #32]	; (80007a0 <DispBackground+0xa0>)
 8000780:	8819      	ldrh	r1, [r3, #0]
 8000782:	4b08      	ldr	r3, [pc, #32]	; (80007a4 <DispBackground+0xa4>)
 8000784:	881b      	ldrh	r3, [r3, #0]
 8000786:	4618      	mov	r0, r3
 8000788:	4b09      	ldr	r3, [pc, #36]	; (80007b0 <DispBackground+0xb0>)
 800078a:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
 800078e:	9300      	str	r3, [sp, #0]
 8000790:	460b      	mov	r3, r1
 8000792:	2100      	movs	r1, #0
 8000794:	2000      	movs	r0, #0
 8000796:	f002 f865 	bl	8002864 <LCD_DrawBMP>
}
 800079a:	bf00      	nop
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	2000000c 	.word	0x2000000c
 80007a4:	20000040 	.word	0x20000040
 80007a8:	08005770 	.word	0x08005770
 80007ac:	2000000a 	.word	0x2000000a
 80007b0:	080057a8 	.word	0x080057a8

080007b4 <LoadParam>:
#include "param.h"

PARAM_T g_tParam;

void LoadParam(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
	bsp_ReadCpuFlash(PARAM_ADDR, (uint8_t *)&g_tParam, sizeof(PARAM_T));
#endif

#ifdef PARAM_SAVE_TO_EEPROM
	/* ¶ÁÈ¡EEPROMÖÐµÄ²ÎÊý */
	ee_ReadBytes((uint8_t *)&g_tParam, PARAM_ADDR, sizeof(PARAM_T));
 80007b8:	2238      	movs	r2, #56	; 0x38
 80007ba:	2100      	movs	r1, #0
 80007bc:	4841      	ldr	r0, [pc, #260]	; (80008c4 <LoadParam+0x110>)
 80007be:	f001 f9b1 	bl	8001b24 <ee_ReadBytes>
#endif

	/* Ìî³äÈ±Ê¡²ÎÊý */
	if (g_tParam.ParamVer != PARAM_VER)
 80007c2:	4b40      	ldr	r3, [pc, #256]	; (80008c4 <LoadParam+0x110>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 80007ca:	d078      	beq.n	80008be <LoadParam+0x10a>
	{
		g_tParam.ParamVer = PARAM_VER;
 80007cc:	4b3d      	ldr	r3, [pc, #244]	; (80008c4 <LoadParam+0x110>)
 80007ce:	f44f 7281 	mov.w	r2, #258	; 0x102
 80007d2:	601a      	str	r2, [r3, #0]

		g_tParam.ucBackLight = 200;
 80007d4:	4b3b      	ldr	r3, [pc, #236]	; (80008c4 <LoadParam+0x110>)
 80007d6:	22c8      	movs	r2, #200	; 0xc8
 80007d8:	711a      	strb	r2, [r3, #4]

		/* uip  ±¾»úIPµØÖ· */
		g_tParam.uip_ip[0] = 192;
 80007da:	4b3a      	ldr	r3, [pc, #232]	; (80008c4 <LoadParam+0x110>)
 80007dc:	22c0      	movs	r2, #192	; 0xc0
 80007de:	761a      	strb	r2, [r3, #24]
		g_tParam.uip_ip[1] = 168;
 80007e0:	4b38      	ldr	r3, [pc, #224]	; (80008c4 <LoadParam+0x110>)
 80007e2:	22a8      	movs	r2, #168	; 0xa8
 80007e4:	765a      	strb	r2, [r3, #25]
		g_tParam.uip_ip[2] = 1;
 80007e6:	4b37      	ldr	r3, [pc, #220]	; (80008c4 <LoadParam+0x110>)
 80007e8:	2201      	movs	r2, #1
 80007ea:	769a      	strb	r2, [r3, #26]
		g_tParam.uip_ip[3] = 11;
 80007ec:	4b35      	ldr	r3, [pc, #212]	; (80008c4 <LoadParam+0x110>)
 80007ee:	220b      	movs	r2, #11
 80007f0:	76da      	strb	r2, [r3, #27]

		/* uip  ×ÓÍøÑÚÂë */
		g_tParam.uip_net_mask[0] = 255;
 80007f2:	4b34      	ldr	r3, [pc, #208]	; (80008c4 <LoadParam+0x110>)
 80007f4:	22ff      	movs	r2, #255	; 0xff
 80007f6:	771a      	strb	r2, [r3, #28]
		g_tParam.uip_net_mask[1] = 255;
 80007f8:	4b32      	ldr	r3, [pc, #200]	; (80008c4 <LoadParam+0x110>)
 80007fa:	22ff      	movs	r2, #255	; 0xff
 80007fc:	775a      	strb	r2, [r3, #29]
		g_tParam.uip_net_mask[2] = 255;
 80007fe:	4b31      	ldr	r3, [pc, #196]	; (80008c4 <LoadParam+0x110>)
 8000800:	22ff      	movs	r2, #255	; 0xff
 8000802:	779a      	strb	r2, [r3, #30]
		g_tParam.uip_net_mask[3] = 0;
 8000804:	4b2f      	ldr	r3, [pc, #188]	; (80008c4 <LoadParam+0x110>)
 8000806:	2200      	movs	r2, #0
 8000808:	77da      	strb	r2, [r3, #31]

		/* uip  Ä¬ÈÏÍø¹Ø */
		g_tParam.uip_net_gate[0] = 192;
 800080a:	4b2e      	ldr	r3, [pc, #184]	; (80008c4 <LoadParam+0x110>)
 800080c:	22c0      	movs	r2, #192	; 0xc0
 800080e:	f883 2020 	strb.w	r2, [r3, #32]
		g_tParam.uip_net_gate[1] = 168;
 8000812:	4b2c      	ldr	r3, [pc, #176]	; (80008c4 <LoadParam+0x110>)
 8000814:	22a8      	movs	r2, #168	; 0xa8
 8000816:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		g_tParam.uip_net_gate[2] = 1;
 800081a:	4b2a      	ldr	r3, [pc, #168]	; (80008c4 <LoadParam+0x110>)
 800081c:	2201      	movs	r2, #1
 800081e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		g_tParam.uip_net_gate[3] = 1;
 8000822:	4b28      	ldr	r3, [pc, #160]	; (80008c4 <LoadParam+0x110>)
 8000824:	2201      	movs	r2, #1
 8000826:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

		/* lwip  ±¾»úIPµØÖ· */
		g_tParam.lwip_ip[0] = 192;
 800082a:	4b26      	ldr	r3, [pc, #152]	; (80008c4 <LoadParam+0x110>)
 800082c:	22c0      	movs	r2, #192	; 0xc0
 800082e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		g_tParam.lwip_ip[1] = 168;
 8000832:	4b24      	ldr	r3, [pc, #144]	; (80008c4 <LoadParam+0x110>)
 8000834:	22a8      	movs	r2, #168	; 0xa8
 8000836:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		g_tParam.lwip_ip[2] = 1;
 800083a:	4b22      	ldr	r3, [pc, #136]	; (80008c4 <LoadParam+0x110>)
 800083c:	2201      	movs	r2, #1
 800083e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		g_tParam.lwip_ip[3] = 12;
 8000842:	4b20      	ldr	r3, [pc, #128]	; (80008c4 <LoadParam+0x110>)
 8000844:	220c      	movs	r2, #12
 8000846:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

		/* lwip  ×ÓÍøÑÚÂë */
		g_tParam.lwip_net_mask[0] = 255;
 800084a:	4b1e      	ldr	r3, [pc, #120]	; (80008c4 <LoadParam+0x110>)
 800084c:	22ff      	movs	r2, #255	; 0xff
 800084e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		g_tParam.lwip_net_mask[1] = 255;
 8000852:	4b1c      	ldr	r3, [pc, #112]	; (80008c4 <LoadParam+0x110>)
 8000854:	22ff      	movs	r2, #255	; 0xff
 8000856:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		g_tParam.lwip_net_mask[2] = 255;
 800085a:	4b1a      	ldr	r3, [pc, #104]	; (80008c4 <LoadParam+0x110>)
 800085c:	22ff      	movs	r2, #255	; 0xff
 800085e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		g_tParam.lwip_net_mask[3] = 0;
 8000862:	4b18      	ldr	r3, [pc, #96]	; (80008c4 <LoadParam+0x110>)
 8000864:	2200      	movs	r2, #0
 8000866:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

		/* lwip  Ä¬ÈÏÍø¹Ø */
		g_tParam.lwip_net_gate[0] = 192;
 800086a:	4b16      	ldr	r3, [pc, #88]	; (80008c4 <LoadParam+0x110>)
 800086c:	22c0      	movs	r2, #192	; 0xc0
 800086e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		g_tParam.lwip_net_gate[1] = 168;
 8000872:	4b14      	ldr	r3, [pc, #80]	; (80008c4 <LoadParam+0x110>)
 8000874:	22a8      	movs	r2, #168	; 0xa8
 8000876:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		g_tParam.lwip_net_gate[2] = 1;
 800087a:	4b12      	ldr	r3, [pc, #72]	; (80008c4 <LoadParam+0x110>)
 800087c:	2201      	movs	r2, #1
 800087e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
		g_tParam.lwip_net_gate[3] = 1;
 8000882:	4b10      	ldr	r3, [pc, #64]	; (80008c4 <LoadParam+0x110>)
 8000884:	2201      	movs	r2, #1
 8000886:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

		g_tParam.ucRadioMode     = 0;				/* 1 = AM »ò 0 = FM */
 800088a:	4b0e      	ldr	r3, [pc, #56]	; (80008c4 <LoadParam+0x110>)
 800088c:	2200      	movs	r2, #0
 800088e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		g_tParam.ucRadioListType = 0;				/* µçÌ¨ÁÐ±íÀàÐÍ¡£0ÎäººµØÇø»ò1È«¹ú */
 8000892:	4b0c      	ldr	r3, [pc, #48]	; (80008c4 <LoadParam+0x110>)
 8000894:	2200      	movs	r2, #0
 8000896:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
		g_tParam.ucIndexFM       = 0;				/* µ±Ç°FMµçÌ¨Ë÷Òý */
 800089a:	4b0a      	ldr	r3, [pc, #40]	; (80008c4 <LoadParam+0x110>)
 800089c:	2200      	movs	r2, #0
 800089e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
		g_tParam.ucIndexAM       = 0;				/* µ±Ç°µçÌ¨Ë÷Òý */
 80008a2:	4b08      	ldr	r3, [pc, #32]	; (80008c4 <LoadParam+0x110>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
		g_tParam.ucRadioVolume   = 36;				/* ÒôÁ¿ */
 80008aa:	4b06      	ldr	r3, [pc, #24]	; (80008c4 <LoadParam+0x110>)
 80008ac:	2224      	movs	r2, #36	; 0x24
 80008ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		g_tParam.ucSpkOutEn      = 1;				/* ÑïÉùÆ÷Êä³öÊ¹ÄÜ */
 80008b2:	4b04      	ldr	r3, [pc, #16]	; (80008c4 <LoadParam+0x110>)
 80008b4:	2201      	movs	r2, #1
 80008b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

		SaveParam();							/* ½«ÐÂ²ÎÊýÐ´ÈëFlash */
 80008ba:	f000 f805 	bl	80008c8 <SaveParam>
	}
}
 80008be:	bf00      	nop
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	20000044 	.word	0x20000044

080008c8 <SaveParam>:

void SaveParam(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
#ifdef PARAM_SAVE_TO_FLASH
	bsp_WriteCpuFlash(PARAM_ADDR, (unsigned char *)&g_tParam, sizeof(PARAM_T));
#endif

#ifdef PARAM_SAVE_TO_EEPROM
	ee_WriteBytes((uint8_t *)&g_tParam, PARAM_ADDR, sizeof(PARAM_T));
 80008cc:	2238      	movs	r2, #56	; 0x38
 80008ce:	2100      	movs	r1, #0
 80008d0:	4802      	ldr	r0, [pc, #8]	; (80008dc <SaveParam+0x14>)
 80008d2:	f001 f986 	bl	8001be2 <ee_WriteBytes>
#endif
}
 80008d6:	bf00      	nop
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	20000044 	.word	0x20000044

080008e0 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b084      	sub	sp, #16
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d101      	bne.n	80008f2 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 80008ee:	2301      	movs	r3, #1
 80008f0:	e034      	b.n	800095c <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 80008fa:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	f245 5255 	movw	r2, #21845	; 0x5555
 8000904:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	687a      	ldr	r2, [r7, #4]
 800090c:	6852      	ldr	r2, [r2, #4]
 800090e:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	687a      	ldr	r2, [r7, #4]
 8000916:	6892      	ldr	r2, [r2, #8]
 8000918:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800091a:	f002 fc47 	bl	80031ac <HAL_GetTick>
 800091e:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8000920:	e00f      	b.n	8000942 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8000922:	f002 fc43 	bl	80031ac <HAL_GetTick>
 8000926:	4602      	mov	r2, r0
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	1ad3      	subs	r3, r2, r3
 800092c:	2b31      	cmp	r3, #49	; 0x31
 800092e:	d908      	bls.n	8000942 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	68db      	ldr	r3, [r3, #12]
 8000936:	f003 0303 	and.w	r3, r3, #3
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 800093e:	2303      	movs	r3, #3
 8000940:	e00c      	b.n	800095c <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	68db      	ldr	r3, [r3, #12]
 8000948:	f003 0303 	and.w	r3, r3, #3
 800094c:	2b00      	cmp	r3, #0
 800094e:	d1e8      	bne.n	8000922 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8000958:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800095a:	2300      	movs	r3, #0
}
 800095c:	4618      	mov	r0, r3
 800095e:	3710      	adds	r7, #16
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}

08000964 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	607b      	str	r3, [r7, #4]
 800096e:	4b10      	ldr	r3, [pc, #64]	; (80009b0 <HAL_MspInit+0x4c>)
 8000970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000972:	4a0f      	ldr	r2, [pc, #60]	; (80009b0 <HAL_MspInit+0x4c>)
 8000974:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000978:	6453      	str	r3, [r2, #68]	; 0x44
 800097a:	4b0d      	ldr	r3, [pc, #52]	; (80009b0 <HAL_MspInit+0x4c>)
 800097c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800097e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000982:	607b      	str	r3, [r7, #4]
 8000984:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	603b      	str	r3, [r7, #0]
 800098a:	4b09      	ldr	r3, [pc, #36]	; (80009b0 <HAL_MspInit+0x4c>)
 800098c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098e:	4a08      	ldr	r2, [pc, #32]	; (80009b0 <HAL_MspInit+0x4c>)
 8000990:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000994:	6413      	str	r3, [r2, #64]	; 0x40
 8000996:	4b06      	ldr	r3, [pc, #24]	; (80009b0 <HAL_MspInit+0x4c>)
 8000998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800099e:	603b      	str	r3, [r7, #0]
 80009a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009a2:	bf00      	nop
 80009a4:	370c      	adds	r7, #12
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	40023800 	.word	0x40023800

080009b4 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b084      	sub	sp, #16
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	60f8      	str	r0, [r7, #12]
 80009bc:	60b9      	str	r1, [r7, #8]
 80009be:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d101      	bne.n	80009ca <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 80009c6:	2301      	movs	r3, #1
 80009c8:	e038      	b.n	8000a3c <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80009d0:	b2db      	uxtb	r3, r3
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d106      	bne.n	80009e4 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	2200      	movs	r2, #0
 80009da:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80009de:	68f8      	ldr	r0, [r7, #12]
 80009e0:	f000 f830 	bl	8000a44 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	681a      	ldr	r2, [r3, #0]
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	3308      	adds	r3, #8
 80009ec:	4619      	mov	r1, r3
 80009ee:	4610      	mov	r0, r2
 80009f0:	f000 fc28 	bl	8001244 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	6818      	ldr	r0, [r3, #0]
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	689b      	ldr	r3, [r3, #8]
 80009fc:	461a      	mov	r2, r3
 80009fe:	68b9      	ldr	r1, [r7, #8]
 8000a00:	f000 fc8a 	bl	8001318 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	6858      	ldr	r0, [r3, #4]
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	689a      	ldr	r2, [r3, #8]
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a10:	6879      	ldr	r1, [r7, #4]
 8000a12:	f000 fcb7 	bl	8001384 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	68fa      	ldr	r2, [r7, #12]
 8000a1c:	6892      	ldr	r2, [r2, #8]
 8000a1e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	68fa      	ldr	r2, [r7, #12]
 8000a28:	6892      	ldr	r2, [r2, #8]
 8000a2a:	f041 0101 	orr.w	r1, r1, #1
 8000a2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	2201      	movs	r2, #1
 8000a36:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 8000a3a:	2300      	movs	r3, #0
}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	3710      	adds	r7, #16
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}

08000a44 <HAL_SRAM_MspInit>:
  * @param  hsram pointer to a SRAM_HandleTypeDef structure that contains
  *                the configuration information for SRAM module.
  * @retval None
  */
__weak void HAL_SRAM_MspInit(SRAM_HandleTypeDef *hsram)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b083      	sub	sp, #12
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  UNUSED(hsram);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SRAM_MspInit could be implemented in the user file
   */
}
 8000a4c:	bf00      	nop
 8000a4e:	370c      	adds	r7, #12
 8000a50:	46bd      	mov	sp, r7
 8000a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a56:	4770      	bx	lr

08000a58 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d101      	bne.n	8000a6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8000a66:	2301      	movs	r3, #1
 8000a68:	e03f      	b.n	8000aea <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000a70:	b2db      	uxtb	r3, r3
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d106      	bne.n	8000a84 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	2200      	movs	r2, #0
 8000a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8000a7e:	6878      	ldr	r0, [r7, #4]
 8000a80:	f000 f837 	bl	8000af2 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	2224      	movs	r2, #36	; 0x24
 8000a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	68da      	ldr	r2, [r3, #12]
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000a9a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8000a9c:	6878      	ldr	r0, [r7, #4]
 8000a9e:	f000 f933 	bl	8000d08 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	691a      	ldr	r2, [r3, #16]
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8000ab0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	695a      	ldr	r2, [r3, #20]
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8000ac0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	68da      	ldr	r2, [r3, #12]
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000ad0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	2220      	movs	r2, #32
 8000adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	2220      	movs	r2, #32
 8000ae4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8000ae8:	2300      	movs	r3, #0
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	3708      	adds	r7, #8
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}

08000af2 <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8000af2:	b480      	push	{r7}
 8000af4:	b083      	sub	sp, #12
 8000af6:	af00      	add	r7, sp, #0
 8000af8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 8000afa:	bf00      	nop
 8000afc:	370c      	adds	r7, #12
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr

08000b06 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000b06:	b580      	push	{r7, lr}
 8000b08:	b08a      	sub	sp, #40	; 0x28
 8000b0a:	af02      	add	r7, sp, #8
 8000b0c:	60f8      	str	r0, [r7, #12]
 8000b0e:	60b9      	str	r1, [r7, #8]
 8000b10:	603b      	str	r3, [r7, #0]
 8000b12:	4613      	mov	r3, r2
 8000b14:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8000b16:	2300      	movs	r3, #0
 8000b18:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000b20:	b2db      	uxtb	r3, r3
 8000b22:	2b20      	cmp	r3, #32
 8000b24:	d17c      	bne.n	8000c20 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8000b26:	68bb      	ldr	r3, [r7, #8]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d002      	beq.n	8000b32 <HAL_UART_Transmit+0x2c>
 8000b2c:	88fb      	ldrh	r3, [r7, #6]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d101      	bne.n	8000b36 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8000b32:	2301      	movs	r3, #1
 8000b34:	e075      	b.n	8000c22 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000b3c:	2b01      	cmp	r3, #1
 8000b3e:	d101      	bne.n	8000b44 <HAL_UART_Transmit+0x3e>
 8000b40:	2302      	movs	r3, #2
 8000b42:	e06e      	b.n	8000c22 <HAL_UART_Transmit+0x11c>
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	2201      	movs	r2, #1
 8000b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	2200      	movs	r2, #0
 8000b50:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	2221      	movs	r2, #33	; 0x21
 8000b56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8000b5a:	f002 fb27 	bl	80031ac <HAL_GetTick>
 8000b5e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	88fa      	ldrh	r2, [r7, #6]
 8000b64:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	88fa      	ldrh	r2, [r7, #6]
 8000b6a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	689b      	ldr	r3, [r3, #8]
 8000b70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000b74:	d108      	bne.n	8000b88 <HAL_UART_Transmit+0x82>
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	691b      	ldr	r3, [r3, #16]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d104      	bne.n	8000b88 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8000b82:	68bb      	ldr	r3, [r7, #8]
 8000b84:	61bb      	str	r3, [r7, #24]
 8000b86:	e003      	b.n	8000b90 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8000b88:	68bb      	ldr	r3, [r7, #8]
 8000b8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	2200      	movs	r2, #0
 8000b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8000b98:	e02a      	b.n	8000bf0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	9300      	str	r3, [sp, #0]
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	2180      	movs	r1, #128	; 0x80
 8000ba4:	68f8      	ldr	r0, [r7, #12]
 8000ba6:	f000 f840 	bl	8000c2a <UART_WaitOnFlagUntilTimeout>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8000bb0:	2303      	movs	r3, #3
 8000bb2:	e036      	b.n	8000c22 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8000bb4:	69fb      	ldr	r3, [r7, #28]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d10b      	bne.n	8000bd2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8000bba:	69bb      	ldr	r3, [r7, #24]
 8000bbc:	881b      	ldrh	r3, [r3, #0]
 8000bbe:	461a      	mov	r2, r3
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000bc8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8000bca:	69bb      	ldr	r3, [r7, #24]
 8000bcc:	3302      	adds	r3, #2
 8000bce:	61bb      	str	r3, [r7, #24]
 8000bd0:	e007      	b.n	8000be2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8000bd2:	69fb      	ldr	r3, [r7, #28]
 8000bd4:	781a      	ldrb	r2, [r3, #0]
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8000bdc:	69fb      	ldr	r3, [r7, #28]
 8000bde:	3301      	adds	r3, #1
 8000be0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8000be6:	b29b      	uxth	r3, r3
 8000be8:	3b01      	subs	r3, #1
 8000bea:	b29a      	uxth	r2, r3
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8000bf4:	b29b      	uxth	r3, r3
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d1cf      	bne.n	8000b9a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	9300      	str	r3, [sp, #0]
 8000bfe:	697b      	ldr	r3, [r7, #20]
 8000c00:	2200      	movs	r2, #0
 8000c02:	2140      	movs	r1, #64	; 0x40
 8000c04:	68f8      	ldr	r0, [r7, #12]
 8000c06:	f000 f810 	bl	8000c2a <UART_WaitOnFlagUntilTimeout>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8000c10:	2303      	movs	r3, #3
 8000c12:	e006      	b.n	8000c22 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	2220      	movs	r2, #32
 8000c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	e000      	b.n	8000c22 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8000c20:	2302      	movs	r3, #2
  }
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	3720      	adds	r7, #32
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}

08000c2a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8000c2a:	b580      	push	{r7, lr}
 8000c2c:	b090      	sub	sp, #64	; 0x40
 8000c2e:	af00      	add	r7, sp, #0
 8000c30:	60f8      	str	r0, [r7, #12]
 8000c32:	60b9      	str	r1, [r7, #8]
 8000c34:	603b      	str	r3, [r7, #0]
 8000c36:	4613      	mov	r3, r2
 8000c38:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8000c3a:	e050      	b.n	8000cde <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8000c3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000c3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c42:	d04c      	beq.n	8000cde <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000c44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d007      	beq.n	8000c5a <UART_WaitOnFlagUntilTimeout+0x30>
 8000c4a:	f002 faaf 	bl	80031ac <HAL_GetTick>
 8000c4e:	4602      	mov	r2, r0
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	1ad3      	subs	r3, r2, r3
 8000c54:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000c56:	429a      	cmp	r2, r3
 8000c58:	d241      	bcs.n	8000cde <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	330c      	adds	r3, #12
 8000c60:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c64:	e853 3f00 	ldrex	r3, [r3]
 8000c68:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8000c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c6c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8000c70:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	330c      	adds	r3, #12
 8000c78:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000c7a:	637a      	str	r2, [r7, #52]	; 0x34
 8000c7c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000c7e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000c80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000c82:	e841 2300 	strex	r3, r2, [r1]
 8000c86:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8000c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d1e5      	bne.n	8000c5a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	3314      	adds	r3, #20
 8000c94:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000c96:	697b      	ldr	r3, [r7, #20]
 8000c98:	e853 3f00 	ldrex	r3, [r3]
 8000c9c:	613b      	str	r3, [r7, #16]
   return(result);
 8000c9e:	693b      	ldr	r3, [r7, #16]
 8000ca0:	f023 0301 	bic.w	r3, r3, #1
 8000ca4:	63bb      	str	r3, [r7, #56]	; 0x38
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	3314      	adds	r3, #20
 8000cac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000cae:	623a      	str	r2, [r7, #32]
 8000cb0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000cb2:	69f9      	ldr	r1, [r7, #28]
 8000cb4:	6a3a      	ldr	r2, [r7, #32]
 8000cb6:	e841 2300 	strex	r3, r2, [r1]
 8000cba:	61bb      	str	r3, [r7, #24]
   return(result);
 8000cbc:	69bb      	ldr	r3, [r7, #24]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d1e5      	bne.n	8000c8e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	2220      	movs	r2, #32
 8000cc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	2220      	movs	r2, #32
 8000cce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8000cda:	2303      	movs	r3, #3
 8000cdc:	e00f      	b.n	8000cfe <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	681a      	ldr	r2, [r3, #0]
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	4013      	ands	r3, r2
 8000ce8:	68ba      	ldr	r2, [r7, #8]
 8000cea:	429a      	cmp	r2, r3
 8000cec:	bf0c      	ite	eq
 8000cee:	2301      	moveq	r3, #1
 8000cf0:	2300      	movne	r3, #0
 8000cf2:	b2db      	uxtb	r3, r3
 8000cf4:	461a      	mov	r2, r3
 8000cf6:	79fb      	ldrb	r3, [r7, #7]
 8000cf8:	429a      	cmp	r2, r3
 8000cfa:	d09f      	beq.n	8000c3c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8000cfc:	2300      	movs	r3, #0
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3740      	adds	r7, #64	; 0x40
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
	...

08000d08 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000d08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000d0c:	b0c0      	sub	sp, #256	; 0x100
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000d14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	691b      	ldr	r3, [r3, #16]
 8000d1c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8000d20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000d24:	68d9      	ldr	r1, [r3, #12]
 8000d26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000d2a:	681a      	ldr	r2, [r3, #0]
 8000d2c:	ea40 0301 	orr.w	r3, r0, r1
 8000d30:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000d32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000d36:	689a      	ldr	r2, [r3, #8]
 8000d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000d3c:	691b      	ldr	r3, [r3, #16]
 8000d3e:	431a      	orrs	r2, r3
 8000d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000d44:	695b      	ldr	r3, [r3, #20]
 8000d46:	431a      	orrs	r2, r3
 8000d48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000d4c:	69db      	ldr	r3, [r3, #28]
 8000d4e:	4313      	orrs	r3, r2
 8000d50:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8000d54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	68db      	ldr	r3, [r3, #12]
 8000d5c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8000d60:	f021 010c 	bic.w	r1, r1, #12
 8000d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000d68:	681a      	ldr	r2, [r3, #0]
 8000d6a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8000d6e:	430b      	orrs	r3, r1
 8000d70:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8000d72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	695b      	ldr	r3, [r3, #20]
 8000d7a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8000d7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000d82:	6999      	ldr	r1, [r3, #24]
 8000d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000d88:	681a      	ldr	r2, [r3, #0]
 8000d8a:	ea40 0301 	orr.w	r3, r0, r1
 8000d8e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8000d90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000d94:	681a      	ldr	r2, [r3, #0]
 8000d96:	4b8f      	ldr	r3, [pc, #572]	; (8000fd4 <UART_SetConfig+0x2cc>)
 8000d98:	429a      	cmp	r2, r3
 8000d9a:	d005      	beq.n	8000da8 <UART_SetConfig+0xa0>
 8000d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000da0:	681a      	ldr	r2, [r3, #0]
 8000da2:	4b8d      	ldr	r3, [pc, #564]	; (8000fd8 <UART_SetConfig+0x2d0>)
 8000da4:	429a      	cmp	r2, r3
 8000da6:	d104      	bne.n	8000db2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8000da8:	f003 f954 	bl	8004054 <HAL_RCC_GetPCLK2Freq>
 8000dac:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8000db0:	e003      	b.n	8000dba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8000db2:	f003 f93b 	bl	800402c <HAL_RCC_GetPCLK1Freq>
 8000db6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000dba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000dbe:	69db      	ldr	r3, [r3, #28]
 8000dc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000dc4:	f040 810c 	bne.w	8000fe0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8000dc8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8000dcc:	2200      	movs	r2, #0
 8000dce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8000dd2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8000dd6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8000dda:	4622      	mov	r2, r4
 8000ddc:	462b      	mov	r3, r5
 8000dde:	1891      	adds	r1, r2, r2
 8000de0:	65b9      	str	r1, [r7, #88]	; 0x58
 8000de2:	415b      	adcs	r3, r3
 8000de4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000de6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8000dea:	4621      	mov	r1, r4
 8000dec:	eb12 0801 	adds.w	r8, r2, r1
 8000df0:	4629      	mov	r1, r5
 8000df2:	eb43 0901 	adc.w	r9, r3, r1
 8000df6:	f04f 0200 	mov.w	r2, #0
 8000dfa:	f04f 0300 	mov.w	r3, #0
 8000dfe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000e02:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000e06:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000e0a:	4690      	mov	r8, r2
 8000e0c:	4699      	mov	r9, r3
 8000e0e:	4623      	mov	r3, r4
 8000e10:	eb18 0303 	adds.w	r3, r8, r3
 8000e14:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8000e18:	462b      	mov	r3, r5
 8000e1a:	eb49 0303 	adc.w	r3, r9, r3
 8000e1e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8000e22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	2200      	movs	r2, #0
 8000e2a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8000e2e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8000e32:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8000e36:	460b      	mov	r3, r1
 8000e38:	18db      	adds	r3, r3, r3
 8000e3a:	653b      	str	r3, [r7, #80]	; 0x50
 8000e3c:	4613      	mov	r3, r2
 8000e3e:	eb42 0303 	adc.w	r3, r2, r3
 8000e42:	657b      	str	r3, [r7, #84]	; 0x54
 8000e44:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8000e48:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8000e4c:	f7ff f9c4 	bl	80001d8 <__aeabi_uldivmod>
 8000e50:	4602      	mov	r2, r0
 8000e52:	460b      	mov	r3, r1
 8000e54:	4b61      	ldr	r3, [pc, #388]	; (8000fdc <UART_SetConfig+0x2d4>)
 8000e56:	fba3 2302 	umull	r2, r3, r3, r2
 8000e5a:	095b      	lsrs	r3, r3, #5
 8000e5c:	011c      	lsls	r4, r3, #4
 8000e5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8000e62:	2200      	movs	r2, #0
 8000e64:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8000e68:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8000e6c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8000e70:	4642      	mov	r2, r8
 8000e72:	464b      	mov	r3, r9
 8000e74:	1891      	adds	r1, r2, r2
 8000e76:	64b9      	str	r1, [r7, #72]	; 0x48
 8000e78:	415b      	adcs	r3, r3
 8000e7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000e7c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8000e80:	4641      	mov	r1, r8
 8000e82:	eb12 0a01 	adds.w	sl, r2, r1
 8000e86:	4649      	mov	r1, r9
 8000e88:	eb43 0b01 	adc.w	fp, r3, r1
 8000e8c:	f04f 0200 	mov.w	r2, #0
 8000e90:	f04f 0300 	mov.w	r3, #0
 8000e94:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8000e98:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8000e9c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8000ea0:	4692      	mov	sl, r2
 8000ea2:	469b      	mov	fp, r3
 8000ea4:	4643      	mov	r3, r8
 8000ea6:	eb1a 0303 	adds.w	r3, sl, r3
 8000eaa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8000eae:	464b      	mov	r3, r9
 8000eb0:	eb4b 0303 	adc.w	r3, fp, r3
 8000eb4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8000eb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8000ec4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8000ec8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8000ecc:	460b      	mov	r3, r1
 8000ece:	18db      	adds	r3, r3, r3
 8000ed0:	643b      	str	r3, [r7, #64]	; 0x40
 8000ed2:	4613      	mov	r3, r2
 8000ed4:	eb42 0303 	adc.w	r3, r2, r3
 8000ed8:	647b      	str	r3, [r7, #68]	; 0x44
 8000eda:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8000ede:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8000ee2:	f7ff f979 	bl	80001d8 <__aeabi_uldivmod>
 8000ee6:	4602      	mov	r2, r0
 8000ee8:	460b      	mov	r3, r1
 8000eea:	4611      	mov	r1, r2
 8000eec:	4b3b      	ldr	r3, [pc, #236]	; (8000fdc <UART_SetConfig+0x2d4>)
 8000eee:	fba3 2301 	umull	r2, r3, r3, r1
 8000ef2:	095b      	lsrs	r3, r3, #5
 8000ef4:	2264      	movs	r2, #100	; 0x64
 8000ef6:	fb02 f303 	mul.w	r3, r2, r3
 8000efa:	1acb      	subs	r3, r1, r3
 8000efc:	00db      	lsls	r3, r3, #3
 8000efe:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8000f02:	4b36      	ldr	r3, [pc, #216]	; (8000fdc <UART_SetConfig+0x2d4>)
 8000f04:	fba3 2302 	umull	r2, r3, r3, r2
 8000f08:	095b      	lsrs	r3, r3, #5
 8000f0a:	005b      	lsls	r3, r3, #1
 8000f0c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8000f10:	441c      	add	r4, r3
 8000f12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8000f16:	2200      	movs	r2, #0
 8000f18:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8000f1c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8000f20:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8000f24:	4642      	mov	r2, r8
 8000f26:	464b      	mov	r3, r9
 8000f28:	1891      	adds	r1, r2, r2
 8000f2a:	63b9      	str	r1, [r7, #56]	; 0x38
 8000f2c:	415b      	adcs	r3, r3
 8000f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000f30:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8000f34:	4641      	mov	r1, r8
 8000f36:	1851      	adds	r1, r2, r1
 8000f38:	6339      	str	r1, [r7, #48]	; 0x30
 8000f3a:	4649      	mov	r1, r9
 8000f3c:	414b      	adcs	r3, r1
 8000f3e:	637b      	str	r3, [r7, #52]	; 0x34
 8000f40:	f04f 0200 	mov.w	r2, #0
 8000f44:	f04f 0300 	mov.w	r3, #0
 8000f48:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8000f4c:	4659      	mov	r1, fp
 8000f4e:	00cb      	lsls	r3, r1, #3
 8000f50:	4651      	mov	r1, sl
 8000f52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8000f56:	4651      	mov	r1, sl
 8000f58:	00ca      	lsls	r2, r1, #3
 8000f5a:	4610      	mov	r0, r2
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	4603      	mov	r3, r0
 8000f60:	4642      	mov	r2, r8
 8000f62:	189b      	adds	r3, r3, r2
 8000f64:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8000f68:	464b      	mov	r3, r9
 8000f6a:	460a      	mov	r2, r1
 8000f6c:	eb42 0303 	adc.w	r3, r2, r3
 8000f70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8000f74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8000f80:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8000f84:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8000f88:	460b      	mov	r3, r1
 8000f8a:	18db      	adds	r3, r3, r3
 8000f8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f8e:	4613      	mov	r3, r2
 8000f90:	eb42 0303 	adc.w	r3, r2, r3
 8000f94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f96:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8000f9a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8000f9e:	f7ff f91b 	bl	80001d8 <__aeabi_uldivmod>
 8000fa2:	4602      	mov	r2, r0
 8000fa4:	460b      	mov	r3, r1
 8000fa6:	4b0d      	ldr	r3, [pc, #52]	; (8000fdc <UART_SetConfig+0x2d4>)
 8000fa8:	fba3 1302 	umull	r1, r3, r3, r2
 8000fac:	095b      	lsrs	r3, r3, #5
 8000fae:	2164      	movs	r1, #100	; 0x64
 8000fb0:	fb01 f303 	mul.w	r3, r1, r3
 8000fb4:	1ad3      	subs	r3, r2, r3
 8000fb6:	00db      	lsls	r3, r3, #3
 8000fb8:	3332      	adds	r3, #50	; 0x32
 8000fba:	4a08      	ldr	r2, [pc, #32]	; (8000fdc <UART_SetConfig+0x2d4>)
 8000fbc:	fba2 2303 	umull	r2, r3, r2, r3
 8000fc0:	095b      	lsrs	r3, r3, #5
 8000fc2:	f003 0207 	and.w	r2, r3, #7
 8000fc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4422      	add	r2, r4
 8000fce:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8000fd0:	e106      	b.n	80011e0 <UART_SetConfig+0x4d8>
 8000fd2:	bf00      	nop
 8000fd4:	40011000 	.word	0x40011000
 8000fd8:	40011400 	.word	0x40011400
 8000fdc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8000fe0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8000fea:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8000fee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8000ff2:	4642      	mov	r2, r8
 8000ff4:	464b      	mov	r3, r9
 8000ff6:	1891      	adds	r1, r2, r2
 8000ff8:	6239      	str	r1, [r7, #32]
 8000ffa:	415b      	adcs	r3, r3
 8000ffc:	627b      	str	r3, [r7, #36]	; 0x24
 8000ffe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001002:	4641      	mov	r1, r8
 8001004:	1854      	adds	r4, r2, r1
 8001006:	4649      	mov	r1, r9
 8001008:	eb43 0501 	adc.w	r5, r3, r1
 800100c:	f04f 0200 	mov.w	r2, #0
 8001010:	f04f 0300 	mov.w	r3, #0
 8001014:	00eb      	lsls	r3, r5, #3
 8001016:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800101a:	00e2      	lsls	r2, r4, #3
 800101c:	4614      	mov	r4, r2
 800101e:	461d      	mov	r5, r3
 8001020:	4643      	mov	r3, r8
 8001022:	18e3      	adds	r3, r4, r3
 8001024:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001028:	464b      	mov	r3, r9
 800102a:	eb45 0303 	adc.w	r3, r5, r3
 800102e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001032:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	2200      	movs	r2, #0
 800103a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800103e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8001042:	f04f 0200 	mov.w	r2, #0
 8001046:	f04f 0300 	mov.w	r3, #0
 800104a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800104e:	4629      	mov	r1, r5
 8001050:	008b      	lsls	r3, r1, #2
 8001052:	4621      	mov	r1, r4
 8001054:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001058:	4621      	mov	r1, r4
 800105a:	008a      	lsls	r2, r1, #2
 800105c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8001060:	f7ff f8ba 	bl	80001d8 <__aeabi_uldivmod>
 8001064:	4602      	mov	r2, r0
 8001066:	460b      	mov	r3, r1
 8001068:	4b60      	ldr	r3, [pc, #384]	; (80011ec <UART_SetConfig+0x4e4>)
 800106a:	fba3 2302 	umull	r2, r3, r3, r2
 800106e:	095b      	lsrs	r3, r3, #5
 8001070:	011c      	lsls	r4, r3, #4
 8001072:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001076:	2200      	movs	r2, #0
 8001078:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800107c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001080:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8001084:	4642      	mov	r2, r8
 8001086:	464b      	mov	r3, r9
 8001088:	1891      	adds	r1, r2, r2
 800108a:	61b9      	str	r1, [r7, #24]
 800108c:	415b      	adcs	r3, r3
 800108e:	61fb      	str	r3, [r7, #28]
 8001090:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001094:	4641      	mov	r1, r8
 8001096:	1851      	adds	r1, r2, r1
 8001098:	6139      	str	r1, [r7, #16]
 800109a:	4649      	mov	r1, r9
 800109c:	414b      	adcs	r3, r1
 800109e:	617b      	str	r3, [r7, #20]
 80010a0:	f04f 0200 	mov.w	r2, #0
 80010a4:	f04f 0300 	mov.w	r3, #0
 80010a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80010ac:	4659      	mov	r1, fp
 80010ae:	00cb      	lsls	r3, r1, #3
 80010b0:	4651      	mov	r1, sl
 80010b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80010b6:	4651      	mov	r1, sl
 80010b8:	00ca      	lsls	r2, r1, #3
 80010ba:	4610      	mov	r0, r2
 80010bc:	4619      	mov	r1, r3
 80010be:	4603      	mov	r3, r0
 80010c0:	4642      	mov	r2, r8
 80010c2:	189b      	adds	r3, r3, r2
 80010c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80010c8:	464b      	mov	r3, r9
 80010ca:	460a      	mov	r2, r1
 80010cc:	eb42 0303 	adc.w	r3, r2, r3
 80010d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80010d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	2200      	movs	r2, #0
 80010dc:	67bb      	str	r3, [r7, #120]	; 0x78
 80010de:	67fa      	str	r2, [r7, #124]	; 0x7c
 80010e0:	f04f 0200 	mov.w	r2, #0
 80010e4:	f04f 0300 	mov.w	r3, #0
 80010e8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80010ec:	4649      	mov	r1, r9
 80010ee:	008b      	lsls	r3, r1, #2
 80010f0:	4641      	mov	r1, r8
 80010f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80010f6:	4641      	mov	r1, r8
 80010f8:	008a      	lsls	r2, r1, #2
 80010fa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80010fe:	f7ff f86b 	bl	80001d8 <__aeabi_uldivmod>
 8001102:	4602      	mov	r2, r0
 8001104:	460b      	mov	r3, r1
 8001106:	4611      	mov	r1, r2
 8001108:	4b38      	ldr	r3, [pc, #224]	; (80011ec <UART_SetConfig+0x4e4>)
 800110a:	fba3 2301 	umull	r2, r3, r3, r1
 800110e:	095b      	lsrs	r3, r3, #5
 8001110:	2264      	movs	r2, #100	; 0x64
 8001112:	fb02 f303 	mul.w	r3, r2, r3
 8001116:	1acb      	subs	r3, r1, r3
 8001118:	011b      	lsls	r3, r3, #4
 800111a:	3332      	adds	r3, #50	; 0x32
 800111c:	4a33      	ldr	r2, [pc, #204]	; (80011ec <UART_SetConfig+0x4e4>)
 800111e:	fba2 2303 	umull	r2, r3, r2, r3
 8001122:	095b      	lsrs	r3, r3, #5
 8001124:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001128:	441c      	add	r4, r3
 800112a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800112e:	2200      	movs	r2, #0
 8001130:	673b      	str	r3, [r7, #112]	; 0x70
 8001132:	677a      	str	r2, [r7, #116]	; 0x74
 8001134:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8001138:	4642      	mov	r2, r8
 800113a:	464b      	mov	r3, r9
 800113c:	1891      	adds	r1, r2, r2
 800113e:	60b9      	str	r1, [r7, #8]
 8001140:	415b      	adcs	r3, r3
 8001142:	60fb      	str	r3, [r7, #12]
 8001144:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001148:	4641      	mov	r1, r8
 800114a:	1851      	adds	r1, r2, r1
 800114c:	6039      	str	r1, [r7, #0]
 800114e:	4649      	mov	r1, r9
 8001150:	414b      	adcs	r3, r1
 8001152:	607b      	str	r3, [r7, #4]
 8001154:	f04f 0200 	mov.w	r2, #0
 8001158:	f04f 0300 	mov.w	r3, #0
 800115c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8001160:	4659      	mov	r1, fp
 8001162:	00cb      	lsls	r3, r1, #3
 8001164:	4651      	mov	r1, sl
 8001166:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800116a:	4651      	mov	r1, sl
 800116c:	00ca      	lsls	r2, r1, #3
 800116e:	4610      	mov	r0, r2
 8001170:	4619      	mov	r1, r3
 8001172:	4603      	mov	r3, r0
 8001174:	4642      	mov	r2, r8
 8001176:	189b      	adds	r3, r3, r2
 8001178:	66bb      	str	r3, [r7, #104]	; 0x68
 800117a:	464b      	mov	r3, r9
 800117c:	460a      	mov	r2, r1
 800117e:	eb42 0303 	adc.w	r3, r2, r3
 8001182:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	2200      	movs	r2, #0
 800118c:	663b      	str	r3, [r7, #96]	; 0x60
 800118e:	667a      	str	r2, [r7, #100]	; 0x64
 8001190:	f04f 0200 	mov.w	r2, #0
 8001194:	f04f 0300 	mov.w	r3, #0
 8001198:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800119c:	4649      	mov	r1, r9
 800119e:	008b      	lsls	r3, r1, #2
 80011a0:	4641      	mov	r1, r8
 80011a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80011a6:	4641      	mov	r1, r8
 80011a8:	008a      	lsls	r2, r1, #2
 80011aa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80011ae:	f7ff f813 	bl	80001d8 <__aeabi_uldivmod>
 80011b2:	4602      	mov	r2, r0
 80011b4:	460b      	mov	r3, r1
 80011b6:	4b0d      	ldr	r3, [pc, #52]	; (80011ec <UART_SetConfig+0x4e4>)
 80011b8:	fba3 1302 	umull	r1, r3, r3, r2
 80011bc:	095b      	lsrs	r3, r3, #5
 80011be:	2164      	movs	r1, #100	; 0x64
 80011c0:	fb01 f303 	mul.w	r3, r1, r3
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	011b      	lsls	r3, r3, #4
 80011c8:	3332      	adds	r3, #50	; 0x32
 80011ca:	4a08      	ldr	r2, [pc, #32]	; (80011ec <UART_SetConfig+0x4e4>)
 80011cc:	fba2 2303 	umull	r2, r3, r2, r3
 80011d0:	095b      	lsrs	r3, r3, #5
 80011d2:	f003 020f 	and.w	r2, r3, #15
 80011d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4422      	add	r2, r4
 80011de:	609a      	str	r2, [r3, #8]
}
 80011e0:	bf00      	nop
 80011e2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80011e6:	46bd      	mov	sp, r7
 80011e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80011ec:	51eb851f 	.word	0x51eb851f

080011f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011f4:	e7fe      	b.n	80011f4 <NMI_Handler+0x4>

080011f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011f6:	b480      	push	{r7}
 80011f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011fa:	e7fe      	b.n	80011fa <HardFault_Handler+0x4>

080011fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001200:	e7fe      	b.n	8001200 <MemManage_Handler+0x4>

08001202 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001202:	b480      	push	{r7}
 8001204:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001206:	e7fe      	b.n	8001206 <BusFault_Handler+0x4>

08001208 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800120c:	e7fe      	b.n	800120c <UsageFault_Handler+0x4>

0800120e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800120e:	b480      	push	{r7}
 8001210:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001212:	bf00      	nop
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr

0800121c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001220:	bf00      	nop
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr

0800122a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800122a:	b480      	push	{r7}
 800122c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800122e:	bf00      	nop
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr

08001238 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800123c:	f001 ffa2 	bl	8003184 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001240:	bf00      	nop
 8001242:	bd80      	pop	{r7, pc}

08001244 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8001244:	b480      	push	{r7}
 8001246:	b087      	sub	sp, #28
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001258:	683a      	ldr	r2, [r7, #0]
 800125a:	6812      	ldr	r2, [r2, #0]
 800125c:	f023 0101 	bic.w	r1, r3, #1
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	2b08      	cmp	r3, #8
 800126c:	d102      	bne.n	8001274 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800126e:	2340      	movs	r3, #64	; 0x40
 8001270:	617b      	str	r3, [r7, #20]
 8001272:	e001      	b.n	8001278 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8001274:	2300      	movs	r3, #0
 8001276:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8001284:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800128a:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8001290:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8001296:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 800129c:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 80012a2:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 80012a8:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 80012ae:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 80012b4:	431a      	orrs	r2, r3
              Init->WriteBurst);
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 80012ba:	4313      	orrs	r3, r2
 80012bc:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	699b      	ldr	r3, [r3, #24]
 80012c2:	693a      	ldr	r2, [r7, #16]
 80012c4:	4313      	orrs	r3, r2
 80012c6:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012cc:	693a      	ldr	r2, [r7, #16]
 80012ce:	4313      	orrs	r3, r2
 80012d0:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 80012d2:	4b10      	ldr	r3, [pc, #64]	; (8001314 <FSMC_NORSRAM_Init+0xd0>)
 80012d4:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012dc:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 80012e4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	43db      	mvns	r3, r3
 80012f4:	ea02 0103 	and.w	r1, r2, r3
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	4319      	orrs	r1, r3
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 8001306:	2300      	movs	r3, #0
}
 8001308:	4618      	mov	r0, r3
 800130a:	371c      	adds	r7, #28
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr
 8001314:	0008fb7f 	.word	0x0008fb7f

08001318 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8001318:	b480      	push	{r7}
 800131a:	b085      	sub	sp, #20
 800131c:	af00      	add	r7, sp, #0
 800131e:	60f8      	str	r0, [r7, #12]
 8001320:	60b9      	str	r1, [r7, #8]
 8001322:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	1c5a      	adds	r2, r3, #1
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800132e:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8001332:	68bb      	ldr	r3, [r7, #8]
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	68bb      	ldr	r3, [r7, #8]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	011b      	lsls	r3, r3, #4
 800133c:	431a      	orrs	r2, r3
 800133e:	68bb      	ldr	r3, [r7, #8]
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	021b      	lsls	r3, r3, #8
 8001344:	431a      	orrs	r2, r3
 8001346:	68bb      	ldr	r3, [r7, #8]
 8001348:	68db      	ldr	r3, [r3, #12]
 800134a:	041b      	lsls	r3, r3, #16
 800134c:	431a      	orrs	r2, r3
 800134e:	68bb      	ldr	r3, [r7, #8]
 8001350:	691b      	ldr	r3, [r3, #16]
 8001352:	3b01      	subs	r3, #1
 8001354:	051b      	lsls	r3, r3, #20
 8001356:	431a      	orrs	r2, r3
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	695b      	ldr	r3, [r3, #20]
 800135c:	3b02      	subs	r3, #2
 800135e:	061b      	lsls	r3, r3, #24
 8001360:	431a      	orrs	r2, r3
 8001362:	68bb      	ldr	r3, [r7, #8]
 8001364:	699b      	ldr	r3, [r3, #24]
 8001366:	4313      	orrs	r3, r2
 8001368:	687a      	ldr	r2, [r7, #4]
 800136a:	3201      	adds	r2, #1
 800136c:	4319      	orrs	r1, r3
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif
  return HAL_OK;
 8001374:	2300      	movs	r3, #0
}
 8001376:	4618      	mov	r0, r3
 8001378:	3714      	adds	r7, #20
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
	...

08001384 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8001384:	b480      	push	{r7}
 8001386:	b085      	sub	sp, #20
 8001388:	af00      	add	r7, sp, #0
 800138a:	60f8      	str	r0, [r7, #12]
 800138c:	60b9      	str	r1, [r7, #8]
 800138e:	607a      	str	r2, [r7, #4]
 8001390:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001398:	d11d      	bne.n	80013d6 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	687a      	ldr	r2, [r7, #4]
 800139e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80013a2:	4b13      	ldr	r3, [pc, #76]	; (80013f0 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 80013a4:	4013      	ands	r3, r2
 80013a6:	68ba      	ldr	r2, [r7, #8]
 80013a8:	6811      	ldr	r1, [r2, #0]
 80013aa:	68ba      	ldr	r2, [r7, #8]
 80013ac:	6852      	ldr	r2, [r2, #4]
 80013ae:	0112      	lsls	r2, r2, #4
 80013b0:	4311      	orrs	r1, r2
 80013b2:	68ba      	ldr	r2, [r7, #8]
 80013b4:	6892      	ldr	r2, [r2, #8]
 80013b6:	0212      	lsls	r2, r2, #8
 80013b8:	4311      	orrs	r1, r2
 80013ba:	68ba      	ldr	r2, [r7, #8]
 80013bc:	6992      	ldr	r2, [r2, #24]
 80013be:	4311      	orrs	r1, r2
 80013c0:	68ba      	ldr	r2, [r7, #8]
 80013c2:	68d2      	ldr	r2, [r2, #12]
 80013c4:	0412      	lsls	r2, r2, #16
 80013c6:	430a      	orrs	r2, r1
 80013c8:	ea43 0102 	orr.w	r1, r3, r2
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	687a      	ldr	r2, [r7, #4]
 80013d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80013d4:	e005      	b.n	80013e2 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	687a      	ldr	r2, [r7, #4]
 80013da:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80013de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 80013e2:	2300      	movs	r3, #0
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	3714      	adds	r7, #20
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr
 80013f0:	cff00000 	.word	0xcff00000

080013f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013f8:	4b06      	ldr	r3, [pc, #24]	; (8001414 <SystemInit+0x20>)
 80013fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013fe:	4a05      	ldr	r2, [pc, #20]	; (8001414 <SystemInit+0x20>)
 8001400:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001404:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001408:	bf00      	nop
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	e000ed00 	.word	0xe000ed00

08001418 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001418:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001450 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800141c:	480d      	ldr	r0, [pc, #52]	; (8001454 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800141e:	490e      	ldr	r1, [pc, #56]	; (8001458 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001420:	4a0e      	ldr	r2, [pc, #56]	; (800145c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001422:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001424:	e002      	b.n	800142c <LoopCopyDataInit>

08001426 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001426:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001428:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800142a:	3304      	adds	r3, #4

0800142c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800142c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800142e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001430:	d3f9      	bcc.n	8001426 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001432:	4a0b      	ldr	r2, [pc, #44]	; (8001460 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001434:	4c0b      	ldr	r4, [pc, #44]	; (8001464 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001436:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001438:	e001      	b.n	800143e <LoopFillZerobss>

0800143a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800143a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800143c:	3204      	adds	r2, #4

0800143e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800143e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001440:	d3fb      	bcc.n	800143a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001442:	f7ff ffd7 	bl	80013f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001446:	f002 fe21 	bl	800408c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800144a:	f7ff f843 	bl	80004d4 <main>
  bx  lr    
 800144e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001450:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001454:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001458:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 800145c:	08005808 	.word	0x08005808
  ldr r2, =_sbss
 8001460:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8001464:	20002294 	.word	0x20002294

08001468 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001468:	e7fe      	b.n	8001468 <ADC_IRQHandler>

0800146a <RA8875_ReadID>:
*********************************************************************************************************
*	Func name: RA8875_ReadID
*********************************************************************************************************
*/
uint16_t RA8875_ReadID(void)
{
 800146a:	b580      	push	{r7, lr}
 800146c:	af00      	add	r7, sp, #0
	return RA8875_ReadReg(0x00);
 800146e:	2000      	movs	r0, #0
 8001470:	f000 f804 	bl	800147c <RA8875_ReadReg>
 8001474:	4603      	mov	r3, r0
 8001476:	b29b      	uxth	r3, r3
}
 8001478:	4618      	mov	r0, r3
 800147a:	bd80      	pop	{r7, pc}

0800147c <RA8875_ReadReg>:
*********************************************************************************************************
*	Func name: RA8875_WriteReg
*********************************************************************************************************
*/
static uint8_t RA8875_ReadReg(uint8_t _ucRegAddr)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	4603      	mov	r3, r0
 8001484:	71fb      	strb	r3, [r7, #7]
	RA8875_WriteCmd(_ucRegAddr);
 8001486:	79fb      	ldrb	r3, [r7, #7]
 8001488:	4618      	mov	r0, r3
 800148a:	f001 f847 	bl	800251c <RA8875_WriteCmd>
	return RA8875_ReadData();
 800148e:	f001 f857 	bl	8002540 <RA8875_ReadData>
 8001492:	4603      	mov	r3, r0
}
 8001494:	4618      	mov	r0, r3
 8001496:	3708      	adds	r7, #8
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}

0800149c <RA8875_WriteReg>:
*********************************************************************************************************
*	Func name: RA8875_WriteReg
*********************************************************************************************************
*/
static void RA8875_WriteReg(uint8_t _ucRegAddr, uint8_t _ucRegValue)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	4603      	mov	r3, r0
 80014a4:	460a      	mov	r2, r1
 80014a6:	71fb      	strb	r3, [r7, #7]
 80014a8:	4613      	mov	r3, r2
 80014aa:	71bb      	strb	r3, [r7, #6]
	s_ucRA8875Busy = 1;
 80014ac:	4b08      	ldr	r3, [pc, #32]	; (80014d0 <RA8875_WriteReg+0x34>)
 80014ae:	2201      	movs	r2, #1
 80014b0:	701a      	strb	r2, [r3, #0]

	RA8875_WriteCmd(_ucRegAddr);
 80014b2:	79fb      	ldrb	r3, [r7, #7]
 80014b4:	4618      	mov	r0, r3
 80014b6:	f001 f831 	bl	800251c <RA8875_WriteCmd>
	RA8875_WriteData(_ucRegValue);
 80014ba:	79bb      	ldrb	r3, [r7, #6]
 80014bc:	4618      	mov	r0, r3
 80014be:	f001 f84e 	bl	800255e <RA8875_WriteData>

	s_ucRA8875Busy = 0;
 80014c2:	4b03      	ldr	r3, [pc, #12]	; (80014d0 <RA8875_WriteReg+0x34>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	701a      	strb	r2, [r3, #0]
}
 80014c8:	bf00      	nop
 80014ca:	3708      	adds	r7, #8
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	2000007c 	.word	0x2000007c

080014d4 <RA8875_InitHard>:
*********************************************************************************************************
*	Func name: RA8875_InitHard
*********************************************************************************************************
*/
void RA8875_InitHard(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
#endif

	/* ¶ÁÈ¡ RA8875 Ð¾Æ¬¶îGPIXÒý½ÅµÄµçÆ½×´Ì¬£»1±íÊ¾4.3´çÆÁ£»0±íÊ¾7´çÆÁ
	¡¾±¸×¢¡¿ÕâÊÇ°²¸»À³µç×ÓÎªÁË±ãÓÚÍ³Ò»²âÊÔÀý³Ì£¬ÔÚLCDÄ£¿éÉÏ×öµÄÓ²¼þ±êÊ¶¡£ÔÚ×ö²úÆ·Ê±£¬²»±Ø×Ô¶¯Ê¶±ð¡£
	*/
	ucGPIX = RA8875_ReadReg(0xC7);
 80014da:	20c7      	movs	r0, #199	; 0xc7
 80014dc:	f7ff ffce 	bl	800147c <RA8875_ReadReg>
 80014e0:	4603      	mov	r3, r0
 80014e2:	71fb      	strb	r3, [r7, #7]

	if (ucGPIX == 1)	/* 	GPIX = 1 ±íÊ¾ 4.3 ´çÆÁ 480x272 */
 80014e4:	79fb      	ldrb	r3, [r7, #7]
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d156      	bne.n	8001598 <RA8875_InitHard+0xc4>
	{
		/* ³õÊ¼»¯PLL.  ¾§ÕñÆµÂÊÎª25M */
		RA8875_WriteCmd(0x88);
 80014ea:	2088      	movs	r0, #136	; 0x88
 80014ec:	f001 f816 	bl	800251c <RA8875_WriteCmd>
		RA8875_Delaly1us();		/* ÑÓ³Ù1us */
 80014f0:	f001 f856 	bl	80025a0 <RA8875_Delaly1us>
		RA8875_WriteData(10);	/* PLLDIVM [7] = 0 ;  PLLDIVN [4:0] = 10 */
 80014f4:	200a      	movs	r0, #10
 80014f6:	f001 f832 	bl	800255e <RA8875_WriteData>

	    RA8875_Delaly1ms();
 80014fa:	f001 f864 	bl	80025c6 <RA8875_Delaly1ms>

		RA8875_WriteCmd(0x89);
 80014fe:	2089      	movs	r0, #137	; 0x89
 8001500:	f001 f80c 	bl	800251c <RA8875_WriteCmd>
		RA8875_Delaly1us();		/* ÑÓ³Ù1us */
 8001504:	f001 f84c 	bl	80025a0 <RA8875_Delaly1us>
		RA8875_WriteData(2);		/* PLLDIVK[2:0] = 2, ³ýÒÔ4 */
 8001508:	2002      	movs	r0, #2
 800150a:	f001 f828 	bl	800255e <RA8875_WriteData>
		          = 25M * (10 + 1) / ((0 + 1) * (2 ^ 2))
				  = 68.75MHz
		*/

		/* REG[88h]»òREG[89h]±»Éè¶¨ºó£¬Îª±£Ö¤PLL Êä³öÎÈ¶¨£¬ÐëµÈ´ýÒ»¶Î¡¸ËøÆµÊ±¼ä¡¹(< 100us)¡£*/
	    RA8875_Delaly1ms();
 800150e:	f001 f85a 	bl	80025c6 <RA8875_Delaly1ms>
				1xb : 16-Î»MCU ½Ó¿Ú¡£ ¡¾Ñ¡Õâ¸ö¡¿
		*/
		#ifdef IF_SPI_EN
			RA8875_WriteReg(0x10, (1 <<3 ) | (0 << 1));	/* SPI½Ó¿ÚÊ±£¬ÅäÖÃ8Î»£¬65KÉ« */
		#else
			RA8875_WriteReg(0x10, (1 <<3 ) | (1 << 1));	/* ÅäÖÃ16Î»MCU²¢¿Ú£¬65KÉ« */
 8001512:	210a      	movs	r1, #10
 8001514:	2010      	movs	r0, #16
 8001516:	f7ff ffc1 	bl	800149c <RA8875_WriteReg>
				00b: PCLK ÆµÂÊÖÜÆÚ= ÏµÍ³ÆµÂÊÖÜÆÚ¡£
				01b: PCLK ÆµÂÊÖÜÆÚ= 2 ±¶µÄÏµÍ³ÆµÂÊÖÜÆÚ¡£
				10b: PCLK ÆµÂÊÖÜÆÚ= 4 ±¶µÄÏµÍ³ÆµÂÊÖÜÆÚ¡£
				11b: PCLK ÆµÂÊÖÜÆÚ= 8 ±¶µÄÏµÍ³ÆµÂÊÖÜÆÚ¡£
		*/
	    RA8875_WriteReg(0x04, 0x82);    /* ÉèÖÃPCLK·´Ïà */
 800151a:	2182      	movs	r1, #130	; 0x82
 800151c:	2004      	movs	r0, #4
 800151e:	f7ff ffbd 	bl	800149c <RA8875_WriteReg>
	    RA8875_Delaly1ms();
 8001522:	f001 f850 	bl	80025c6 <RA8875_Delaly1ms>

	    //Horizontal set
	    //HDWR//Horizontal Display Width Setting Bit[6:0]
	 	//Horizontal display width(pixels) = (HDWR + 1)*8
	    RA8875_WriteReg(0x14, 0x3B);
 8001526:	213b      	movs	r1, #59	; 0x3b
 8001528:	2014      	movs	r0, #20
 800152a:	f7ff ffb7 	bl	800149c <RA8875_WriteReg>
	    RA8875_WriteReg(0x15, 0x00);
 800152e:	2100      	movs	r1, #0
 8001530:	2015      	movs	r0, #21
 8001532:	f7ff ffb3 	bl	800149c <RA8875_WriteReg>

	    //HNDR//Horizontal Non-Display Period Bit[4:0]
	    //Horizontal Non-Display Period (pixels) = (HNDR + 1)*8
		RA8875_WriteReg(0x16, 0x01);
 8001536:	2101      	movs	r1, #1
 8001538:	2016      	movs	r0, #22
 800153a:	f7ff ffaf 	bl	800149c <RA8875_WriteReg>

	    //HSTR//HSYNC Start Position[4:0]
	    //HSYNC Start Position(PCLK) = (HSTR + 1)*8
		RA8875_WriteReg(0x17, 0x00);
 800153e:	2100      	movs	r1, #0
 8001540:	2017      	movs	r0, #23
 8001542:	f7ff ffab 	bl	800149c <RA8875_WriteReg>

	    //HPWR//HSYNC Polarity ,The period width of HSYNC.
	    //HSYNC Width [4:0]   HSYNC Pulse width(PCLK) = (HPWR + 1)*8
		RA8875_WriteReg(0x18, 0x05);
 8001546:	2105      	movs	r1, #5
 8001548:	2018      	movs	r0, #24
 800154a:	f7ff ffa7 	bl	800149c <RA8875_WriteReg>

	    //Vertical set
	    //VDHR0 //Vertical Display Height Bit [7:0]
	    //Vertical pixels = VDHR + 1
		RA8875_WriteReg(0x19, 0x0F);
 800154e:	210f      	movs	r1, #15
 8001550:	2019      	movs	r0, #25
 8001552:	f7ff ffa3 	bl	800149c <RA8875_WriteReg>

	    //VDHR1 //Vertical Display Height Bit [8]
	    //Vertical pixels = VDHR + 1
		RA8875_WriteReg(0x1A, 0x01);
 8001556:	2101      	movs	r1, #1
 8001558:	201a      	movs	r0, #26
 800155a:	f7ff ff9f 	bl	800149c <RA8875_WriteReg>

	    //VNDR0 //Vertical Non-Display Period Bit [7:0]
	    //Vertical Non-Display area = (VNDR + 1)
		RA8875_WriteReg(0x1B, 0x02);
 800155e:	2102      	movs	r1, #2
 8001560:	201b      	movs	r0, #27
 8001562:	f7ff ff9b 	bl	800149c <RA8875_WriteReg>

	    //VNDR1 //Vertical Non-Display Period Bit [8]
	    //Vertical Non-Display area = (VNDR + 1)
		RA8875_WriteReg(0x1C, 0x00);
 8001566:	2100      	movs	r1, #0
 8001568:	201c      	movs	r0, #28
 800156a:	f7ff ff97 	bl	800149c <RA8875_WriteReg>

	    //VSTR0 //VSYNC Start Position[7:0]
	    //VSYNC Start Position(PCLK) = (VSTR + 1)
		RA8875_WriteReg(0x1D, 0x07);
 800156e:	2107      	movs	r1, #7
 8001570:	201d      	movs	r0, #29
 8001572:	f7ff ff93 	bl	800149c <RA8875_WriteReg>

	    //VSTR1 //VSYNC Start Position[8]
	    //VSYNC Start Position(PCLK) = (VSTR + 1)
		RA8875_WriteReg(0x1E, 0x00);
 8001576:	2100      	movs	r1, #0
 8001578:	201e      	movs	r0, #30
 800157a:	f7ff ff8f 	bl	800149c <RA8875_WriteReg>

	    //VPWR //VSYNC Polarity ,VSYNC Pulse Width[6:0]
	    //VSYNC Pulse Width(PCLK) = (VPWR + 1)
	    RA8875_WriteReg(0x1F, 0x09);
 800157e:	2109      	movs	r1, #9
 8001580:	201f      	movs	r0, #31
 8001582:	f7ff ff8b 	bl	800149c <RA8875_WriteReg>


	    g_LcdHeight = LCD_43_HEIGHT;
 8001586:	4b3d      	ldr	r3, [pc, #244]	; (800167c <RA8875_InitHard+0x1a8>)
 8001588:	f44f 7288 	mov.w	r2, #272	; 0x110
 800158c:	801a      	strh	r2, [r3, #0]
		g_LcdWidth = LCD_43_WIDTH;
 800158e:	4b3c      	ldr	r3, [pc, #240]	; (8001680 <RA8875_InitHard+0x1ac>)
 8001590:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001594:	801a      	strh	r2, [r3, #0]
 8001596:	e055      	b.n	8001644 <RA8875_InitHard+0x170>
	}
	else	/* GPIX = 0 ±íÊ¾7´çÆÁ(800x480) */
	{
	    g_LcdHeight = LCD_70_HEIGHT;
 8001598:	4b38      	ldr	r3, [pc, #224]	; (800167c <RA8875_InitHard+0x1a8>)
 800159a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800159e:	801a      	strh	r2, [r3, #0]
		g_LcdWidth = LCD_70_WIDTH;
 80015a0:	4b37      	ldr	r3, [pc, #220]	; (8001680 <RA8875_InitHard+0x1ac>)
 80015a2:	f44f 7248 	mov.w	r2, #800	; 0x320
 80015a6:	801a      	strh	r2, [r3, #0]

		/* ³õÊ¼»¯PLL.  ¾§ÕñÆµÂÊÎª25M */
		RA8875_WriteCmd(0x88);
 80015a8:	2088      	movs	r0, #136	; 0x88
 80015aa:	f000 ffb7 	bl	800251c <RA8875_WriteCmd>
		RA8875_Delaly1us();		/* ÑÓ³Ù1us */
 80015ae:	f000 fff7 	bl	80025a0 <RA8875_Delaly1us>
		RA8875_WriteData(12);	/* PLLDIVM [7] = 0 ;  PLLDIVN [4:0] = 10 */
 80015b2:	200c      	movs	r0, #12
 80015b4:	f000 ffd3 	bl	800255e <RA8875_WriteData>

	    RA8875_Delaly1ms();
 80015b8:	f001 f805 	bl	80025c6 <RA8875_Delaly1ms>

		RA8875_WriteCmd(0x89);
 80015bc:	2089      	movs	r0, #137	; 0x89
 80015be:	f000 ffad 	bl	800251c <RA8875_WriteCmd>
		RA8875_Delaly1us();		/* ÑÓ³Ù1us */
 80015c2:	f000 ffed 	bl	80025a0 <RA8875_Delaly1us>
		RA8875_WriteData(2);	/* PLLDIVK[2:0] = 2, ³ýÒÔ4 */
 80015c6:	2002      	movs	r0, #2
 80015c8:	f000 ffc9 	bl	800255e <RA8875_WriteData>
		          = 25M * (12 + 1) / ((0 + 1) * (2 ^ 2))
				  = 81.25MHz
		*/

		/* REG[88h]»òREG[89h]±»Éè¶¨ºó£¬Îª±£Ö¤PLL Êä³öÎÈ¶¨£¬ÐëµÈ´ýÒ»¶Î¡¸ËøÆµÊ±¼ä¡¹(< 100us)¡£*/
	    RA8875_Delaly1ms();
 80015cc:	f000 fffb 	bl	80025c6 <RA8875_Delaly1ms>
				1xb : 16-Î»MCU ½Ó¿Ú¡£ ¡¾Ñ¡Õâ¸ö¡¿
		*/
		#ifdef IF_SPI_EN
			RA8875_WriteReg(0x10, (1 <<3 ) | (0 << 1));	/* SPI½Ó¿ÚÊ±£¬ÅäÖÃ8Î»£¬65KÉ« */
		#else
			RA8875_WriteReg(0x10, (1 <<3 ) | (1 << 1));	/* ÅäÖÃ16Î»MCU²¢¿Ú£¬65KÉ« */
 80015d0:	210a      	movs	r1, #10
 80015d2:	2010      	movs	r0, #16
 80015d4:	f7ff ff62 	bl	800149c <RA8875_WriteReg>
				00b: PCLK ÆµÂÊÖÜÆÚ= ÏµÍ³ÆµÂÊÖÜÆÚ¡£
				01b: PCLK ÆµÂÊÖÜÆÚ= 2 ±¶µÄÏµÍ³ÆµÂÊÖÜÆÚ¡£
				10b: PCLK ÆµÂÊÖÜÆÚ= 4 ±¶µÄÏµÍ³ÆµÂÊÖÜÆÚ¡£
				11b: PCLK ÆµÂÊÖÜÆÚ= 8 ±¶µÄÏµÍ³ÆµÂÊÖÜÆÚ¡£
		*/
	    RA8875_WriteReg(0x04, 0x81);
 80015d8:	2181      	movs	r1, #129	; 0x81
 80015da:	2004      	movs	r0, #4
 80015dc:	f7ff ff5e 	bl	800149c <RA8875_WriteReg>
	    RA8875_Delaly1ms();
 80015e0:	f000 fff1 	bl	80025c6 <RA8875_Delaly1ms>

	#if 1
		/* OTD9960 & OTA7001 ÉèÖÃ */
		RA8875_WriteReg(0x14, 0x63);
 80015e4:	2163      	movs	r1, #99	; 0x63
 80015e6:	2014      	movs	r0, #20
 80015e8:	f7ff ff58 	bl	800149c <RA8875_WriteReg>
		RA8875_WriteReg(0x15, 0x00);
 80015ec:	2100      	movs	r1, #0
 80015ee:	2015      	movs	r0, #21
 80015f0:	f7ff ff54 	bl	800149c <RA8875_WriteReg>
		RA8875_WriteReg(0x16, 0x03);
 80015f4:	2103      	movs	r1, #3
 80015f6:	2016      	movs	r0, #22
 80015f8:	f7ff ff50 	bl	800149c <RA8875_WriteReg>
		RA8875_WriteReg(0x17, 0x03);
 80015fc:	2103      	movs	r1, #3
 80015fe:	2017      	movs	r0, #23
 8001600:	f7ff ff4c 	bl	800149c <RA8875_WriteReg>
		RA8875_WriteReg(0x18, 0x0B);
 8001604:	210b      	movs	r1, #11
 8001606:	2018      	movs	r0, #24
 8001608:	f7ff ff48 	bl	800149c <RA8875_WriteReg>
		RA8875_WriteReg(0x19, 0xDF);
 800160c:	21df      	movs	r1, #223	; 0xdf
 800160e:	2019      	movs	r0, #25
 8001610:	f7ff ff44 	bl	800149c <RA8875_WriteReg>
		RA8875_WriteReg(0x1A, 0x01);
 8001614:	2101      	movs	r1, #1
 8001616:	201a      	movs	r0, #26
 8001618:	f7ff ff40 	bl	800149c <RA8875_WriteReg>
		RA8875_WriteReg(0x1B, 0x1F);
 800161c:	211f      	movs	r1, #31
 800161e:	201b      	movs	r0, #27
 8001620:	f7ff ff3c 	bl	800149c <RA8875_WriteReg>
		RA8875_WriteReg(0x1C, 0x00);
 8001624:	2100      	movs	r1, #0
 8001626:	201c      	movs	r0, #28
 8001628:	f7ff ff38 	bl	800149c <RA8875_WriteReg>
		RA8875_WriteReg(0x1D, 0x16);
 800162c:	2116      	movs	r1, #22
 800162e:	201d      	movs	r0, #29
 8001630:	f7ff ff34 	bl	800149c <RA8875_WriteReg>
		RA8875_WriteReg(0x1E, 0x00);
 8001634:	2100      	movs	r1, #0
 8001636:	201e      	movs	r0, #30
 8001638:	f7ff ff30 	bl	800149c <RA8875_WriteReg>
		RA8875_WriteReg(0x1F, 0x01);
 800163c:	2101      	movs	r1, #1
 800163e:	201f      	movs	r0, #31
 8001640:	f7ff ff2c 	bl	800149c <RA8875_WriteReg>
	    RA8875_WriteReg(0x1F, 0x01);
	#endif
	}

	/* ÉèÖÃTFTÃæ°åµÄ DISP  Òý½ÅÎª¸ß£¬Ê¹ÄÜÃæ°å. °²¸»À³TFTÄ£¿éµÄDISPÒý½ÅÁ¬½Óµ½RA8875Ð¾Æ¬µÄGP0X½Å */
	RA8875_WriteReg(0xC7, 0x01);	/* DISP = 1 */
 8001644:	2101      	movs	r1, #1
 8001646:	20c7      	movs	r0, #199	; 0xc7
 8001648:	f7ff ff28 	bl	800149c <RA8875_WriteReg>

	/* LCD ÏÔÊ¾/¹Ø±ÕÑ¶ºÅ (LCD Display on) */
	RA8875_WriteReg(0x01, 0x80);
 800164c:	2180      	movs	r1, #128	; 0x80
 800164e:	2001      	movs	r0, #1
 8001650:	f7ff ff24 	bl	800149c <RA8875_WriteReg>

		Bit 0 ÄÚ´æ¶ÁÈ¡¹â±ê×Ô¶¯Ôö¼Ó¹¦ÄÜÉè¶¨
			0 : µ±ÄÚ´æ¶ÁÈ¡Ê±¹â±êÎ»ÖÃ×Ô¶¯¼ÓÒ»¡£
			1 : µ±ÄÚ´æ¶ÁÈ¡Ê±¹â±êÎ»ÖÃ²»»á×Ô¶¯¼ÓÒ»¡£
	*/
	RA8875_WriteReg(0x40, 0x00);	/* Ñ¡Ôñ»æÍ¼Ä£Ê½ */
 8001654:	2100      	movs	r1, #0
 8001656:	2040      	movs	r0, #64	; 0x40
 8001658:	f7ff ff20 	bl	800149c <RA8875_WriteReg>


	/* 	REG[41h] Memory Write Control Register1 (MWCR1)
		Ð´ÈëÄ¿µÄÎ»ÖÃ£¬Ñ¡ÔñÍ¼²ã1
	*/
	RA8875_WriteReg(0x41, 0x00);	/* Ñ¡Ôñ»æÍ¼Ä£Ê½, Ä¿µÄÎªCGRAM */
 800165c:	2100      	movs	r1, #0
 800165e:	2041      	movs	r0, #65	; 0x41
 8001660:	f7ff ff1c 	bl	800149c <RA8875_WriteReg>

	RA8875_SetDispWin(0, 0, g_LcdHeight, g_LcdWidth);
 8001664:	4b05      	ldr	r3, [pc, #20]	; (800167c <RA8875_InitHard+0x1a8>)
 8001666:	881a      	ldrh	r2, [r3, #0]
 8001668:	4b05      	ldr	r3, [pc, #20]	; (8001680 <RA8875_InitHard+0x1ac>)
 800166a:	881b      	ldrh	r3, [r3, #0]
 800166c:	2100      	movs	r1, #0
 800166e:	2000      	movs	r0, #0
 8001670:	f000 f808 	bl	8001684 <RA8875_SetDispWin>

#ifdef IF_SPI_EN
	RA8875_HighSpeedSPI();		/* ÅäÖÃÍê±Ïºó£¬ÇÐ»»SPIµ½¸ßËÙÄ£Ê½ */
#endif
}
 8001674:	bf00      	nop
 8001676:	3708      	adds	r7, #8
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	2000000a 	.word	0x2000000a
 8001680:	2000000c 	.word	0x2000000c

08001684 <RA8875_SetDispWin>:
*********************************************************************************************************
*	Func name: RA8875_SetDispWin
*********************************************************************************************************
*/
void RA8875_SetDispWin(uint16_t _usX, uint16_t _usY, uint16_t _usHeight, uint16_t _usWidth)
{
 8001684:	b590      	push	{r4, r7, lr}
 8001686:	b085      	sub	sp, #20
 8001688:	af00      	add	r7, sp, #0
 800168a:	4604      	mov	r4, r0
 800168c:	4608      	mov	r0, r1
 800168e:	4611      	mov	r1, r2
 8001690:	461a      	mov	r2, r3
 8001692:	4623      	mov	r3, r4
 8001694:	80fb      	strh	r3, [r7, #6]
 8001696:	4603      	mov	r3, r0
 8001698:	80bb      	strh	r3, [r7, #4]
 800169a:	460b      	mov	r3, r1
 800169c:	807b      	strh	r3, [r7, #2]
 800169e:	4613      	mov	r3, r2
 80016a0:	803b      	strh	r3, [r7, #0]
		×óÉÏ½ÇÊÇ×ø±êÁãµã, É¨Ãè·½Ïò£¬ÏÈ´Ó×óµ½ÓÒ£¬ÔÙ´ÓÉÏµ½ÏÂ¡£

		Èç¹ûÐèÒª×öÊúÆÁ·½Ê½£¬ÄãÐèÒª½øÐÐÎïÀí×ø±êºÍÂß¼­×ø±êµÄ×ª»»
	*/

	RA8875_WriteReg(0x30, _usX);
 80016a2:	88fb      	ldrh	r3, [r7, #6]
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	4619      	mov	r1, r3
 80016a8:	2030      	movs	r0, #48	; 0x30
 80016aa:	f7ff fef7 	bl	800149c <RA8875_WriteReg>
    RA8875_WriteReg(0x31, _usX >> 8);
 80016ae:	88fb      	ldrh	r3, [r7, #6]
 80016b0:	0a1b      	lsrs	r3, r3, #8
 80016b2:	b29b      	uxth	r3, r3
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	4619      	mov	r1, r3
 80016b8:	2031      	movs	r0, #49	; 0x31
 80016ba:	f7ff feef 	bl	800149c <RA8875_WriteReg>

	RA8875_WriteReg(0x32, _usY);
 80016be:	88bb      	ldrh	r3, [r7, #4]
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	4619      	mov	r1, r3
 80016c4:	2032      	movs	r0, #50	; 0x32
 80016c6:	f7ff fee9 	bl	800149c <RA8875_WriteReg>
    RA8875_WriteReg(0x33, _usY >> 8);
 80016ca:	88bb      	ldrh	r3, [r7, #4]
 80016cc:	0a1b      	lsrs	r3, r3, #8
 80016ce:	b29b      	uxth	r3, r3
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	4619      	mov	r1, r3
 80016d4:	2033      	movs	r0, #51	; 0x33
 80016d6:	f7ff fee1 	bl	800149c <RA8875_WriteReg>

	usTemp = _usWidth + _usX - 1;
 80016da:	883a      	ldrh	r2, [r7, #0]
 80016dc:	88fb      	ldrh	r3, [r7, #6]
 80016de:	4413      	add	r3, r2
 80016e0:	b29b      	uxth	r3, r3
 80016e2:	3b01      	subs	r3, #1
 80016e4:	81fb      	strh	r3, [r7, #14]
	RA8875_WriteReg(0x34, usTemp);
 80016e6:	89fb      	ldrh	r3, [r7, #14]
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	4619      	mov	r1, r3
 80016ec:	2034      	movs	r0, #52	; 0x34
 80016ee:	f7ff fed5 	bl	800149c <RA8875_WriteReg>
    RA8875_WriteReg(0x35, usTemp >> 8);
 80016f2:	89fb      	ldrh	r3, [r7, #14]
 80016f4:	0a1b      	lsrs	r3, r3, #8
 80016f6:	b29b      	uxth	r3, r3
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	4619      	mov	r1, r3
 80016fc:	2035      	movs	r0, #53	; 0x35
 80016fe:	f7ff fecd 	bl	800149c <RA8875_WriteReg>

	usTemp = _usHeight + _usY - 1;
 8001702:	887a      	ldrh	r2, [r7, #2]
 8001704:	88bb      	ldrh	r3, [r7, #4]
 8001706:	4413      	add	r3, r2
 8001708:	b29b      	uxth	r3, r3
 800170a:	3b01      	subs	r3, #1
 800170c:	81fb      	strh	r3, [r7, #14]
	RA8875_WriteReg(0x36, usTemp);
 800170e:	89fb      	ldrh	r3, [r7, #14]
 8001710:	b2db      	uxtb	r3, r3
 8001712:	4619      	mov	r1, r3
 8001714:	2036      	movs	r0, #54	; 0x36
 8001716:	f7ff fec1 	bl	800149c <RA8875_WriteReg>
    RA8875_WriteReg(0x37, usTemp >> 8);
 800171a:	89fb      	ldrh	r3, [r7, #14]
 800171c:	0a1b      	lsrs	r3, r3, #8
 800171e:	b29b      	uxth	r3, r3
 8001720:	b2db      	uxtb	r3, r3
 8001722:	4619      	mov	r1, r3
 8001724:	2037      	movs	r0, #55	; 0x37
 8001726:	f7ff feb9 	bl	800149c <RA8875_WriteReg>

	RA8875_SetCursor(_usX, _usY);
 800172a:	88ba      	ldrh	r2, [r7, #4]
 800172c:	88fb      	ldrh	r3, [r7, #6]
 800172e:	4611      	mov	r1, r2
 8001730:	4618      	mov	r0, r3
 8001732:	f000 f819 	bl	8001768 <RA8875_SetCursor>

	/* ±£´æµ±Ç°´°¿ÚÐÅÏ¢£¬Ìá¸ßÒÔºóµ¥É«Ìî³ä²Ù×÷µÄÐ§ÂÊ.
	ÁíÍâÒ»ÖÖ×ö·¨ÊÇÍ¨¹ý¶ÁÈ¡0x30-0x37¼Ä´æÆ÷»ñµÃµ±Ç°´°¿Ú£¬²»¹ýÐ§ÂÊ½ÏµÍ */
	s_WinX = _usX;
 8001736:	4a08      	ldr	r2, [pc, #32]	; (8001758 <RA8875_SetDispWin+0xd4>)
 8001738:	88fb      	ldrh	r3, [r7, #6]
 800173a:	8013      	strh	r3, [r2, #0]
	s_WinY = _usY;
 800173c:	4a07      	ldr	r2, [pc, #28]	; (800175c <RA8875_SetDispWin+0xd8>)
 800173e:	88bb      	ldrh	r3, [r7, #4]
 8001740:	8013      	strh	r3, [r2, #0]
	s_WinHeight = _usHeight;
 8001742:	4a07      	ldr	r2, [pc, #28]	; (8001760 <RA8875_SetDispWin+0xdc>)
 8001744:	887b      	ldrh	r3, [r7, #2]
 8001746:	8013      	strh	r3, [r2, #0]
	s_WinWidth = _usWidth;
 8001748:	4a06      	ldr	r2, [pc, #24]	; (8001764 <RA8875_SetDispWin+0xe0>)
 800174a:	883b      	ldrh	r3, [r7, #0]
 800174c:	8013      	strh	r3, [r2, #0]
}
 800174e:	bf00      	nop
 8001750:	3714      	adds	r7, #20
 8001752:	46bd      	mov	sp, r7
 8001754:	bd90      	pop	{r4, r7, pc}
 8001756:	bf00      	nop
 8001758:	2000007e 	.word	0x2000007e
 800175c:	20000080 	.word	0x20000080
 8001760:	20000004 	.word	0x20000004
 8001764:	20000006 	.word	0x20000006

08001768 <RA8875_SetCursor>:
*********************************************************************************************************
*	Funa name: RA8875_SetCursor
*********************************************************************************************************
*/
static void RA8875_SetCursor(uint16_t _usX, uint16_t _usY)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	4603      	mov	r3, r0
 8001770:	460a      	mov	r2, r1
 8001772:	80fb      	strh	r3, [r7, #6]
 8001774:	4613      	mov	r3, r2
 8001776:	80bb      	strh	r3, [r7, #4]
	/* ÉèÖÃÄÚ´æÐ´¹â±êµÄ×ø±ê ¡¾×¢Òâ0x80-83 ÊÇ¹â±êÍ¼ÐÎµÄ×ø±ê¡¿ */
	RA8875_WriteReg(0x46, _usX);
 8001778:	88fb      	ldrh	r3, [r7, #6]
 800177a:	b2db      	uxtb	r3, r3
 800177c:	4619      	mov	r1, r3
 800177e:	2046      	movs	r0, #70	; 0x46
 8001780:	f7ff fe8c 	bl	800149c <RA8875_WriteReg>
	RA8875_WriteReg(0x47, _usX >> 8);
 8001784:	88fb      	ldrh	r3, [r7, #6]
 8001786:	0a1b      	lsrs	r3, r3, #8
 8001788:	b29b      	uxth	r3, r3
 800178a:	b2db      	uxtb	r3, r3
 800178c:	4619      	mov	r1, r3
 800178e:	2047      	movs	r0, #71	; 0x47
 8001790:	f7ff fe84 	bl	800149c <RA8875_WriteReg>
	RA8875_WriteReg(0x48, _usY);
 8001794:	88bb      	ldrh	r3, [r7, #4]
 8001796:	b2db      	uxtb	r3, r3
 8001798:	4619      	mov	r1, r3
 800179a:	2048      	movs	r0, #72	; 0x48
 800179c:	f7ff fe7e 	bl	800149c <RA8875_WriteReg>
	RA8875_WriteReg(0x49, _usY >> 8);
 80017a0:	88bb      	ldrh	r3, [r7, #4]
 80017a2:	0a1b      	lsrs	r3, r3, #8
 80017a4:	b29b      	uxth	r3, r3
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	4619      	mov	r1, r3
 80017aa:	2049      	movs	r0, #73	; 0x49
 80017ac:	f7ff fe76 	bl	800149c <RA8875_WriteReg>
}
 80017b0:	bf00      	nop
 80017b2:	3708      	adds	r7, #8
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}

080017b8 <RA8875_ClrScr>:
*********************************************************************************************************
*	Func name: RA8875_ClrScr
*********************************************************************************************************
*/
void RA8875_ClrScr(uint16_t _usColor)
{
 80017b8:	b590      	push	{r4, r7, lr}
 80017ba:	b085      	sub	sp, #20
 80017bc:	af02      	add	r7, sp, #8
 80017be:	4603      	mov	r3, r0
 80017c0:	80fb      	strh	r3, [r7, #6]
	BTE_SetTarBlock(s_WinX, s_WinY, s_WinHeight, s_WinWidth, 0);	/* ÉèÖÃBTEÎ»ÖÃºÍ¿í¶È¸ß¶ÈÒÔ¼°Ä¿±êÍ¼²ã£¨0»ò1£© */
 80017c2:	4b0d      	ldr	r3, [pc, #52]	; (80017f8 <RA8875_ClrScr+0x40>)
 80017c4:	8818      	ldrh	r0, [r3, #0]
 80017c6:	4b0d      	ldr	r3, [pc, #52]	; (80017fc <RA8875_ClrScr+0x44>)
 80017c8:	8819      	ldrh	r1, [r3, #0]
 80017ca:	4b0d      	ldr	r3, [pc, #52]	; (8001800 <RA8875_ClrScr+0x48>)
 80017cc:	881a      	ldrh	r2, [r3, #0]
 80017ce:	4b0d      	ldr	r3, [pc, #52]	; (8001804 <RA8875_ClrScr+0x4c>)
 80017d0:	881b      	ldrh	r3, [r3, #0]
 80017d2:	2400      	movs	r4, #0
 80017d4:	9400      	str	r4, [sp, #0]
 80017d6:	f000 f857 	bl	8001888 <BTE_SetTarBlock>
	BTE_SetOperateCode(0x0C);		/* Éè¶¨BTE ²Ù×÷ÂëºÍ¹âÕ¤ÔËËãÂë  REG[51h] Bit[3:0] = 0Ch */
 80017da:	200c      	movs	r0, #12
 80017dc:	f000 f8ae 	bl	800193c <BTE_SetOperateCode>
	RA8875_SetFrontColor(_usColor);	/* ÉèÖÃBTEÇ°¾°É« */
 80017e0:	88fb      	ldrh	r3, [r7, #6]
 80017e2:	4618      	mov	r0, r3
 80017e4:	f000 f8b8 	bl	8001958 <RA8875_SetFrontColor>
	BTE_Start();					/* ¿ªÆôBTE ¹¦ÄÜ */
 80017e8:	f000 f93a 	bl	8001a60 <BTE_Start>
	BTE_Wait();
 80017ec:	f000 f948 	bl	8001a80 <BTE_Wait>
}
 80017f0:	bf00      	nop
 80017f2:	370c      	adds	r7, #12
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd90      	pop	{r4, r7, pc}
 80017f8:	2000007e 	.word	0x2000007e
 80017fc:	20000080 	.word	0x20000080
 8001800:	20000004 	.word	0x20000004
 8001804:	20000006 	.word	0x20000006

08001808 <RA8875_PutPixel>:
*********************************************************************************************************
*	Func name: RA8875_PutPixel
*********************************************************************************************************
*/
void RA8875_PutPixel(uint16_t _usX, uint16_t _usY, uint16_t _usColor)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	4603      	mov	r3, r0
 8001810:	80fb      	strh	r3, [r7, #6]
 8001812:	460b      	mov	r3, r1
 8001814:	80bb      	strh	r3, [r7, #4]
 8001816:	4613      	mov	r3, r2
 8001818:	807b      	strh	r3, [r7, #2]
	s_ucRA8875Busy = 1;
 800181a:	4b1a      	ldr	r3, [pc, #104]	; (8001884 <RA8875_PutPixel+0x7c>)
 800181c:	2201      	movs	r2, #1
 800181e:	701a      	strb	r2, [r3, #0]

	RA8875_WriteCmd(0x46); RA8875_WriteData(_usX);
 8001820:	2046      	movs	r0, #70	; 0x46
 8001822:	f000 fe7b 	bl	800251c <RA8875_WriteCmd>
 8001826:	88fb      	ldrh	r3, [r7, #6]
 8001828:	b2db      	uxtb	r3, r3
 800182a:	4618      	mov	r0, r3
 800182c:	f000 fe97 	bl	800255e <RA8875_WriteData>
	RA8875_WriteCmd(0x47); RA8875_WriteData(_usX >> 8);
 8001830:	2047      	movs	r0, #71	; 0x47
 8001832:	f000 fe73 	bl	800251c <RA8875_WriteCmd>
 8001836:	88fb      	ldrh	r3, [r7, #6]
 8001838:	0a1b      	lsrs	r3, r3, #8
 800183a:	b29b      	uxth	r3, r3
 800183c:	b2db      	uxtb	r3, r3
 800183e:	4618      	mov	r0, r3
 8001840:	f000 fe8d 	bl	800255e <RA8875_WriteData>
	RA8875_WriteCmd(0x48); RA8875_WriteData(_usY);
 8001844:	2048      	movs	r0, #72	; 0x48
 8001846:	f000 fe69 	bl	800251c <RA8875_WriteCmd>
 800184a:	88bb      	ldrh	r3, [r7, #4]
 800184c:	b2db      	uxtb	r3, r3
 800184e:	4618      	mov	r0, r3
 8001850:	f000 fe85 	bl	800255e <RA8875_WriteData>
	RA8875_WriteCmd(0x49); RA8875_WriteData(_usY >> 8);
 8001854:	2049      	movs	r0, #73	; 0x49
 8001856:	f000 fe61 	bl	800251c <RA8875_WriteCmd>
 800185a:	88bb      	ldrh	r3, [r7, #4]
 800185c:	0a1b      	lsrs	r3, r3, #8
 800185e:	b29b      	uxth	r3, r3
 8001860:	b2db      	uxtb	r3, r3
 8001862:	4618      	mov	r0, r3
 8001864:	f000 fe7b 	bl	800255e <RA8875_WriteData>

	RA8875_WriteCmd(0x02); 		/* ÓÃÓÚÉè¶¨RA8875 ½øÈëÄÚ´æ(DDRAM»òCGRAM)¶ÁÈ¡/Ð´ÈëÄ£Ê½ */
 8001868:	2002      	movs	r0, #2
 800186a:	f000 fe57 	bl	800251c <RA8875_WriteCmd>
	RA8875_WriteData16(_usColor);
 800186e:	887b      	ldrh	r3, [r7, #2]
 8001870:	4618      	mov	r0, r3
 8001872:	f000 f8e5 	bl	8001a40 <RA8875_WriteData16>

	s_ucRA8875Busy = 0;
 8001876:	4b03      	ldr	r3, [pc, #12]	; (8001884 <RA8875_PutPixel+0x7c>)
 8001878:	2200      	movs	r2, #0
 800187a:	701a      	strb	r2, [r3, #0]
}
 800187c:	bf00      	nop
 800187e:	3708      	adds	r7, #8
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	2000007c 	.word	0x2000007c

08001888 <BTE_SetTarBlock>:
*********************************************************************************************************
*	Func name: BTE_SetTarBlock
*********************************************************************************************************
*/
static void BTE_SetTarBlock(uint16_t _usX, uint16_t _usY, uint16_t _usHeight, uint16_t _usWidth, uint8_t _ucLayer)
{
 8001888:	b590      	push	{r4, r7, lr}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	4604      	mov	r4, r0
 8001890:	4608      	mov	r0, r1
 8001892:	4611      	mov	r1, r2
 8001894:	461a      	mov	r2, r3
 8001896:	4623      	mov	r3, r4
 8001898:	80fb      	strh	r3, [r7, #6]
 800189a:	4603      	mov	r3, r0
 800189c:	80bb      	strh	r3, [r7, #4]
 800189e:	460b      	mov	r3, r1
 80018a0:	807b      	strh	r3, [r7, #2]
 80018a2:	4613      	mov	r3, r2
 80018a4:	803b      	strh	r3, [r7, #0]
	/* ÉèÖÃÆðµã×ø±ê */
	RA8875_WriteReg(0x58, _usX);
 80018a6:	88fb      	ldrh	r3, [r7, #6]
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	4619      	mov	r1, r3
 80018ac:	2058      	movs	r0, #88	; 0x58
 80018ae:	f7ff fdf5 	bl	800149c <RA8875_WriteReg>
	RA8875_WriteReg(0x59, _usX >> 8);
 80018b2:	88fb      	ldrh	r3, [r7, #6]
 80018b4:	0a1b      	lsrs	r3, r3, #8
 80018b6:	b29b      	uxth	r3, r3
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	4619      	mov	r1, r3
 80018bc:	2059      	movs	r0, #89	; 0x59
 80018be:	f7ff fded 	bl	800149c <RA8875_WriteReg>

	RA8875_WriteReg(0x5A, _usY);
 80018c2:	88bb      	ldrh	r3, [r7, #4]
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	4619      	mov	r1, r3
 80018c8:	205a      	movs	r0, #90	; 0x5a
 80018ca:	f7ff fde7 	bl	800149c <RA8875_WriteReg>
	if (_ucLayer == 0)	/* Í¼²ã2 */
 80018ce:	7e3b      	ldrb	r3, [r7, #24]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d108      	bne.n	80018e6 <BTE_SetTarBlock+0x5e>
	{
		RA8875_WriteReg(0x5B, _usY >> 8);
 80018d4:	88bb      	ldrh	r3, [r7, #4]
 80018d6:	0a1b      	lsrs	r3, r3, #8
 80018d8:	b29b      	uxth	r3, r3
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	4619      	mov	r1, r3
 80018de:	205b      	movs	r0, #91	; 0x5b
 80018e0:	f7ff fddc 	bl	800149c <RA8875_WriteReg>
 80018e4:	e00a      	b.n	80018fc <BTE_SetTarBlock+0x74>
	}
	else
	{
		RA8875_WriteReg(0x5B, (1 << 7) | (_usY >> 8));	/* Bit7 ±íÊ¾Í¼²ã£¬ 0 Í¼²ã1£» 1 Í¼²ã2*/
 80018e6:	88bb      	ldrh	r3, [r7, #4]
 80018e8:	0a1b      	lsrs	r3, r3, #8
 80018ea:	b29b      	uxth	r3, r3
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	4619      	mov	r1, r3
 80018f6:	205b      	movs	r0, #91	; 0x5b
 80018f8:	f7ff fdd0 	bl	800149c <RA8875_WriteReg>
	}

	/* ÉèÖÃÇø¿é¿í¶È */
	RA8875_WriteReg(0x5C, _usWidth);
 80018fc:	883b      	ldrh	r3, [r7, #0]
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	4619      	mov	r1, r3
 8001902:	205c      	movs	r0, #92	; 0x5c
 8001904:	f7ff fdca 	bl	800149c <RA8875_WriteReg>
	RA8875_WriteReg(0x5D, _usWidth >> 8);
 8001908:	883b      	ldrh	r3, [r7, #0]
 800190a:	0a1b      	lsrs	r3, r3, #8
 800190c:	b29b      	uxth	r3, r3
 800190e:	b2db      	uxtb	r3, r3
 8001910:	4619      	mov	r1, r3
 8001912:	205d      	movs	r0, #93	; 0x5d
 8001914:	f7ff fdc2 	bl	800149c <RA8875_WriteReg>

	/* ÉèÖÃÇø¿é¸ß¶È */
	RA8875_WriteReg(0x5E, _usHeight);
 8001918:	887b      	ldrh	r3, [r7, #2]
 800191a:	b2db      	uxtb	r3, r3
 800191c:	4619      	mov	r1, r3
 800191e:	205e      	movs	r0, #94	; 0x5e
 8001920:	f7ff fdbc 	bl	800149c <RA8875_WriteReg>
	RA8875_WriteReg(0x5F, _usHeight >> 8);
 8001924:	887b      	ldrh	r3, [r7, #2]
 8001926:	0a1b      	lsrs	r3, r3, #8
 8001928:	b29b      	uxth	r3, r3
 800192a:	b2db      	uxtb	r3, r3
 800192c:	4619      	mov	r1, r3
 800192e:	205f      	movs	r0, #95	; 0x5f
 8001930:	f7ff fdb4 	bl	800149c <RA8875_WriteReg>
}
 8001934:	bf00      	nop
 8001936:	370c      	adds	r7, #12
 8001938:	46bd      	mov	sp, r7
 800193a:	bd90      	pop	{r4, r7, pc}

0800193c <BTE_SetOperateCode>:
*********************************************************************************************************
*	Func name: BTE_SetOperateCode
*********************************************************************************************************
*/
static void BTE_SetOperateCode(uint8_t _ucOperate)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
 8001942:	4603      	mov	r3, r0
 8001944:	71fb      	strb	r3, [r7, #7]
	RA8875_WriteReg(0x51, _ucOperate);
 8001946:	79fb      	ldrb	r3, [r7, #7]
 8001948:	4619      	mov	r1, r3
 800194a:	2051      	movs	r0, #81	; 0x51
 800194c:	f7ff fda6 	bl	800149c <RA8875_WriteReg>
}
 8001950:	bf00      	nop
 8001952:	3708      	adds	r7, #8
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}

08001958 <RA8875_SetFrontColor>:
*********************************************************************************************************
* Func name: RA8875_SetFrontColor
*********************************************************************************************************
*/
void RA8875_SetFrontColor(uint16_t _usColor)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	4603      	mov	r3, r0
 8001960:	80fb      	strh	r3, [r7, #6]
	RA8875_WriteReg(0x63, (_usColor & 0xF800) >> 11);	/* R5  */
 8001962:	88fb      	ldrh	r3, [r7, #6]
 8001964:	0adb      	lsrs	r3, r3, #11
 8001966:	b29b      	uxth	r3, r3
 8001968:	b2db      	uxtb	r3, r3
 800196a:	4619      	mov	r1, r3
 800196c:	2063      	movs	r0, #99	; 0x63
 800196e:	f7ff fd95 	bl	800149c <RA8875_WriteReg>
	RA8875_WriteReg(0x64, (_usColor & 0x07E0) >> 5);	/* G6 */
 8001972:	88fb      	ldrh	r3, [r7, #6]
 8001974:	115b      	asrs	r3, r3, #5
 8001976:	b2db      	uxtb	r3, r3
 8001978:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800197c:	b2db      	uxtb	r3, r3
 800197e:	4619      	mov	r1, r3
 8001980:	2064      	movs	r0, #100	; 0x64
 8001982:	f7ff fd8b 	bl	800149c <RA8875_WriteReg>
	RA8875_WriteReg(0x65, (_usColor & 0x001F));			/* B5 */
 8001986:	88fb      	ldrh	r3, [r7, #6]
 8001988:	b2db      	uxtb	r3, r3
 800198a:	f003 031f 	and.w	r3, r3, #31
 800198e:	b2db      	uxtb	r3, r3
 8001990:	4619      	mov	r1, r3
 8001992:	2065      	movs	r0, #101	; 0x65
 8001994:	f7ff fd82 	bl	800149c <RA8875_WriteReg>
}
 8001998:	bf00      	nop
 800199a:	3708      	adds	r7, #8
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}

080019a0 <RA8875_DrawBMP>:
*********************************************************************************************************
*	Func name: RA8875_DrawBMP
*********************************************************************************************************
*/
void RA8875_DrawBMP(uint16_t _usX, uint16_t _usY, uint16_t _usHeight, uint16_t _usWidth, uint16_t *_ptr)
{
 80019a0:	b590      	push	{r4, r7, lr}
 80019a2:	b085      	sub	sp, #20
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	4604      	mov	r4, r0
 80019a8:	4608      	mov	r0, r1
 80019aa:	4611      	mov	r1, r2
 80019ac:	461a      	mov	r2, r3
 80019ae:	4623      	mov	r3, r4
 80019b0:	80fb      	strh	r3, [r7, #6]
 80019b2:	4603      	mov	r3, r0
 80019b4:	80bb      	strh	r3, [r7, #4]
 80019b6:	460b      	mov	r3, r1
 80019b8:	807b      	strh	r3, [r7, #2]
 80019ba:	4613      	mov	r3, r2
 80019bc:	803b      	strh	r3, [r7, #0]
	uint32_t index = 0;
 80019be:	2300      	movs	r3, #0
 80019c0:	60fb      	str	r3, [r7, #12]
	const uint16_t *p;

	RA8875_SetDispWin(_usX, _usY, _usHeight, _usWidth);
 80019c2:	883b      	ldrh	r3, [r7, #0]
 80019c4:	887a      	ldrh	r2, [r7, #2]
 80019c6:	88b9      	ldrh	r1, [r7, #4]
 80019c8:	88f8      	ldrh	r0, [r7, #6]
 80019ca:	f7ff fe5b 	bl	8001684 <RA8875_SetDispWin>

	s_ucRA8875Busy = 1;
 80019ce:	4b13      	ldr	r3, [pc, #76]	; (8001a1c <RA8875_DrawBMP+0x7c>)
 80019d0:	2201      	movs	r2, #1
 80019d2:	701a      	strb	r2, [r3, #0]

	RA8875_WriteCmd(0x02); 		
 80019d4:	2002      	movs	r0, #2
 80019d6:	f000 fda1 	bl	800251c <RA8875_WriteCmd>

	p = _ptr;
 80019da:	6a3b      	ldr	r3, [r7, #32]
 80019dc:	60bb      	str	r3, [r7, #8]
	for (index = 0; index < _usHeight * _usWidth; index++)
 80019de:	2300      	movs	r3, #0
 80019e0:	60fb      	str	r3, [r7, #12]
 80019e2:	e009      	b.n	80019f8 <RA8875_DrawBMP+0x58>
	{
		RA8875_WriteData16(*p++);
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	1c9a      	adds	r2, r3, #2
 80019e8:	60ba      	str	r2, [r7, #8]
 80019ea:	881b      	ldrh	r3, [r3, #0]
 80019ec:	4618      	mov	r0, r3
 80019ee:	f000 f827 	bl	8001a40 <RA8875_WriteData16>
	for (index = 0; index < _usHeight * _usWidth; index++)
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	3301      	adds	r3, #1
 80019f6:	60fb      	str	r3, [r7, #12]
 80019f8:	887b      	ldrh	r3, [r7, #2]
 80019fa:	883a      	ldrh	r2, [r7, #0]
 80019fc:	fb02 f303 	mul.w	r3, r2, r3
 8001a00:	461a      	mov	r2, r3
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d3ed      	bcc.n	80019e4 <RA8875_DrawBMP+0x44>
	}
	s_ucRA8875Busy = 0;
 8001a08:	4b04      	ldr	r3, [pc, #16]	; (8001a1c <RA8875_DrawBMP+0x7c>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	701a      	strb	r2, [r3, #0]

	RA8875_QuitWinMode();
 8001a0e:	f000 f807 	bl	8001a20 <RA8875_QuitWinMode>
}
 8001a12:	bf00      	nop
 8001a14:	3714      	adds	r7, #20
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd90      	pop	{r4, r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	2000007c 	.word	0x2000007c

08001a20 <RA8875_QuitWinMode>:
*********************************************************************************************************
*	Funa name: RA8875_QuitWinMode
*********************************************************************************************************
*/
void RA8875_QuitWinMode(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
	RA8875_SetDispWin(0, 0, g_LcdHeight, g_LcdWidth);
 8001a24:	4b04      	ldr	r3, [pc, #16]	; (8001a38 <RA8875_QuitWinMode+0x18>)
 8001a26:	881a      	ldrh	r2, [r3, #0]
 8001a28:	4b04      	ldr	r3, [pc, #16]	; (8001a3c <RA8875_QuitWinMode+0x1c>)
 8001a2a:	881b      	ldrh	r3, [r3, #0]
 8001a2c:	2100      	movs	r1, #0
 8001a2e:	2000      	movs	r0, #0
 8001a30:	f7ff fe28 	bl	8001684 <RA8875_SetDispWin>
}
 8001a34:	bf00      	nop
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	2000000a 	.word	0x2000000a
 8001a3c:	2000000c 	.word	0x2000000c

08001a40 <RA8875_WriteData16>:
*********************************************************************************************************
*	Func name: RA8875_WriteData16
*********************************************************************************************************
*/
void RA8875_WriteData16(uint16_t _usRGB)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	4603      	mov	r3, r0
 8001a48:	80fb      	strh	r3, [r7, #6]
	SPI_ShiftByte(_usRGB);
	RA8875_CS_1();
#endif

#ifdef RA_HARD_8080_16
	RA8875_RAM = _usRGB;
 8001a4a:	f04f 42d8 	mov.w	r2, #1811939328	; 0x6c000000
 8001a4e:	88fb      	ldrh	r3, [r7, #6]
 8001a50:	8013      	strh	r3, [r2, #0]
#endif	
}
 8001a52:	bf00      	nop
 8001a54:	370c      	adds	r7, #12
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
	...

08001a60 <BTE_Start>:
*********************************************************************************************************
*	Func name: BTE_Start
*********************************************************************************************************
*/
static void BTE_Start(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
	s_ucRA8875Busy = 1;
 8001a64:	4b05      	ldr	r3, [pc, #20]	; (8001a7c <BTE_Start+0x1c>)
 8001a66:	2201      	movs	r2, #1
 8001a68:	701a      	strb	r2, [r3, #0]
	/* RA8875_WriteReg(0x50, 0x80);  ²»ÄÜÊ¹ÓÃÕâ¸öº¯Êý£¬ÒòÎªÄÚ²¿ÒÑ¾­²Ù×÷ÁË s_ucRA8875Busy ±êÖ¾ */
	RA8875_WriteCmd(0x50);	/* ÉèÖÃ¼Ä´æÆ÷µØÖ· */
 8001a6a:	2050      	movs	r0, #80	; 0x50
 8001a6c:	f000 fd56 	bl	800251c <RA8875_WriteCmd>
	RA8875_WriteData(0x80);	/* Ð´Èë¼Ä´æÆ÷Öµ */
 8001a70:	2080      	movs	r0, #128	; 0x80
 8001a72:	f000 fd74 	bl	800255e <RA8875_WriteData>
}
 8001a76:	bf00      	nop
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	2000007c 	.word	0x2000007c

08001a80 <BTE_Wait>:
*********************************************************************************************************
*	Func name: BTE_Wait
*********************************************************************************************************
*/
static void BTE_Wait(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
	while ((RA8875_ReadStatus() & 0x40) == 0x40);
 8001a84:	bf00      	nop
 8001a86:	f000 fd7b 	bl	8002580 <RA8875_ReadStatus>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a90:	2b40      	cmp	r3, #64	; 0x40
 8001a92:	d0f8      	beq.n	8001a86 <BTE_Wait+0x6>
	s_ucRA8875Busy = 0;
 8001a94:	4b02      	ldr	r3, [pc, #8]	; (8001aa0 <BTE_Wait+0x20>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	701a      	strb	r2, [r3, #0]
}
 8001a9a:	bf00      	nop
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	2000007c 	.word	0x2000007c

08001aa4 <RA8875_SetBackLight>:
*	ÐÎ    ²Î:  _bright ÁÁ¶È£¬0ÊÇÃð£¬255ÊÇ×îÁÁ
*	·µ »Ø Öµ: ÎÞ
*********************************************************************************************************
*/
void RA8875_SetBackLight(uint8_t _bright)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	4603      	mov	r3, r0
 8001aac:	71fb      	strb	r3, [r7, #7]
	if (_bright == 0)
 8001aae:	79fb      	ldrb	r3, [r7, #7]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d104      	bne.n	8001abe <RA8875_SetBackLight+0x1a>
	{
		/* ¹Ø±ÕPWM, PWM1Òý½ÅÈ±Ê¡Êä³öLOW  */
		RA8875_WriteReg(0x8A, 0 << 6);
 8001ab4:	2100      	movs	r1, #0
 8001ab6:	208a      	movs	r0, #138	; 0x8a
 8001ab8:	f7ff fcf0 	bl	800149c <RA8875_WriteReg>
		RA8875_WriteReg(0x8A, (1 << 7) | 12);

		/* REG[8Bh] PWM1 Duty Cycle Register (P1DCR) */
		RA8875_WriteReg(0x8B, _bright);
	}
}
 8001abc:	e010      	b.n	8001ae0 <RA8875_SetBackLight+0x3c>
	else if (_bright == BRIGHT_MAX)	/* ×î´óÁÁ¶È */
 8001abe:	79fb      	ldrb	r3, [r7, #7]
 8001ac0:	2bff      	cmp	r3, #255	; 0xff
 8001ac2:	d104      	bne.n	8001ace <RA8875_SetBackLight+0x2a>
		RA8875_WriteReg(0x8A, 1 << 6);
 8001ac4:	2140      	movs	r1, #64	; 0x40
 8001ac6:	208a      	movs	r0, #138	; 0x8a
 8001ac8:	f7ff fce8 	bl	800149c <RA8875_WriteReg>
}
 8001acc:	e008      	b.n	8001ae0 <RA8875_SetBackLight+0x3c>
		RA8875_WriteReg(0x8A, (1 << 7) | 12);
 8001ace:	218c      	movs	r1, #140	; 0x8c
 8001ad0:	208a      	movs	r0, #138	; 0x8a
 8001ad2:	f7ff fce3 	bl	800149c <RA8875_WriteReg>
		RA8875_WriteReg(0x8B, _bright);
 8001ad6:	79fb      	ldrb	r3, [r7, #7]
 8001ad8:	4619      	mov	r1, r3
 8001ada:	208b      	movs	r0, #139	; 0x8b
 8001adc:	f7ff fcde 	bl	800149c <RA8875_WriteReg>
}
 8001ae0:	bf00      	nop
 8001ae2:	3708      	adds	r7, #8
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <SPFD5420_ReadID>:
*********************************************************************************************************
*	Func name: SPFD5420_ReadID
*********************************************************************************************************
*/
uint16_t SPFD5420_ReadID(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
	return SPFD5420_ReadReg(0x0000);
 8001aec:	2000      	movs	r0, #0
 8001aee:	f000 f803 	bl	8001af8 <SPFD5420_ReadReg>
 8001af2:	4603      	mov	r3, r0
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	bd80      	pop	{r7, pc}

08001af8 <SPFD5420_ReadReg>:
*			SPFD5420_RegValue : ¼Ä´æÆ÷Öµ
*	·µ »Ø Öµ: ÎÞ
*********************************************************************************************************
*/
static uint16_t SPFD5420_ReadReg(__IO uint16_t _usAddr)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	4603      	mov	r3, r0
 8001b00:	80fb      	strh	r3, [r7, #6]
	/* Write 16-bit Index (then Read Reg) */
	SPFD5420_REG = _usAddr;
 8001b02:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8001b06:	88fa      	ldrh	r2, [r7, #6]
 8001b08:	b292      	uxth	r2, r2
 8001b0a:	801a      	strh	r2, [r3, #0]
	/* Read 16-bit Reg */
	return (SPFD5420_RAM);
 8001b0c:	4b04      	ldr	r3, [pc, #16]	; (8001b20 <SPFD5420_ReadReg+0x28>)
 8001b0e:	881b      	ldrh	r3, [r3, #0]
 8001b10:	b29b      	uxth	r3, r3
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	370c      	adds	r7, #12
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	60080000 	.word	0x60080000

08001b24 <ee_ReadBytes>:
*********************************************************************************************************
*	Func name: ee_ReadBytes
*********************************************************************************************************
*/
uint8_t ee_ReadBytes(uint8_t *_pReadBuf, uint16_t _usAddress, uint16_t _usSize)
{
 8001b24:	b590      	push	{r4, r7, lr}
 8001b26:	b085      	sub	sp, #20
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	460b      	mov	r3, r1
 8001b2e:	807b      	strh	r3, [r7, #2]
 8001b30:	4613      	mov	r3, r2
 8001b32:	803b      	strh	r3, [r7, #0]
	uint16_t i;

	i2c_Start();
 8001b34:	f000 f8d8 	bl	8001ce8 <i2c_Start>

	i2c_SendByte(EE_DEV_ADDR | I2C_WR);	/* ´Ë´¦ÊÇÐ´Ö¸Áî */
 8001b38:	20a0      	movs	r0, #160	; 0xa0
 8001b3a:	f000 f8f5 	bl	8001d28 <i2c_SendByte>

	if (i2c_WaitAck() != 0)
 8001b3e:	f000 f963 	bl	8001e08 <i2c_WaitAck>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d13e      	bne.n	8001bc6 <ee_ReadBytes+0xa2>
			goto cmd_fail;	/* EEPROMÆ÷¼þÎÞÓ¦´ð */
		}
	}
	else
	{
		i2c_SendByte(_usAddress >> 8);
 8001b48:	887b      	ldrh	r3, [r7, #2]
 8001b4a:	0a1b      	lsrs	r3, r3, #8
 8001b4c:	b29b      	uxth	r3, r3
 8001b4e:	b2db      	uxtb	r3, r3
 8001b50:	4618      	mov	r0, r3
 8001b52:	f000 f8e9 	bl	8001d28 <i2c_SendByte>
		if (i2c_WaitAck() != 0)
 8001b56:	f000 f957 	bl	8001e08 <i2c_WaitAck>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d134      	bne.n	8001bca <ee_ReadBytes+0xa6>
		{
			goto cmd_fail;	/* EEPROMÆ÷¼þÎÞÓ¦´ð */
		}
		i2c_SendByte(_usAddress);
 8001b60:	887b      	ldrh	r3, [r7, #2]
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	4618      	mov	r0, r3
 8001b66:	f000 f8df 	bl	8001d28 <i2c_SendByte>
		if (i2c_WaitAck() != 0)
 8001b6a:	f000 f94d 	bl	8001e08 <i2c_WaitAck>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d12c      	bne.n	8001bce <ee_ReadBytes+0xaa>
		{
			goto cmd_fail;	/* EEPROMÆ÷¼þÎÞÓ¦´ð */
		}
	}
	i2c_Start();
 8001b74:	f000 f8b8 	bl	8001ce8 <i2c_Start>
	i2c_SendByte(EE_DEV_ADDR | I2C_RD);
 8001b78:	20a1      	movs	r0, #161	; 0xa1
 8001b7a:	f000 f8d5 	bl	8001d28 <i2c_SendByte>

	if (i2c_WaitAck() != 0)
 8001b7e:	f000 f943 	bl	8001e08 <i2c_WaitAck>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d124      	bne.n	8001bd2 <ee_ReadBytes+0xae>
	{
		goto cmd_fail;	/* EEPROMÆ÷¼þÎÞÓ¦´ð */
	}
	for (i = 0; i < _usSize; i++)
 8001b88:	2300      	movs	r3, #0
 8001b8a:	81fb      	strh	r3, [r7, #14]
 8001b8c:	e013      	b.n	8001bb6 <ee_ReadBytes+0x92>
	{
		_pReadBuf[i] = i2c_ReadByte();	/* ¶Á1¸ö×Ö½Ú */
 8001b8e:	89fb      	ldrh	r3, [r7, #14]
 8001b90:	687a      	ldr	r2, [r7, #4]
 8001b92:	18d4      	adds	r4, r2, r3
 8001b94:	f000 f908 	bl	8001da8 <i2c_ReadByte>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	7023      	strb	r3, [r4, #0]

		if (i != _usSize - 1)
 8001b9c:	89fa      	ldrh	r2, [r7, #14]
 8001b9e:	883b      	ldrh	r3, [r7, #0]
 8001ba0:	3b01      	subs	r3, #1
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	d002      	beq.n	8001bac <ee_ReadBytes+0x88>
		{
			i2c_Ack();
 8001ba6:	f000 f95b 	bl	8001e60 <i2c_Ack>
 8001baa:	e001      	b.n	8001bb0 <ee_ReadBytes+0x8c>
		}
		else
		{
			i2c_NAck();	/* ×îºó1¸ö×Ö½Ú¶ÁÍêºó£¬CPU²úÉúNACKÐÅºÅ(Çý¶¯SDA = 1) */
 8001bac:	f000 f978 	bl	8001ea0 <i2c_NAck>
	for (i = 0; i < _usSize; i++)
 8001bb0:	89fb      	ldrh	r3, [r7, #14]
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	81fb      	strh	r3, [r7, #14]
 8001bb6:	89fa      	ldrh	r2, [r7, #14]
 8001bb8:	883b      	ldrh	r3, [r7, #0]
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	d3e7      	bcc.n	8001b8e <ee_ReadBytes+0x6a>
		}
	}
	i2c_Stop();
 8001bbe:	f000 f98b 	bl	8001ed8 <i2c_Stop>
	return 1;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e009      	b.n	8001bda <ee_ReadBytes+0xb6>
		goto cmd_fail;
 8001bc6:	bf00      	nop
 8001bc8:	e004      	b.n	8001bd4 <ee_ReadBytes+0xb0>
			goto cmd_fail;	/* EEPROMÆ÷¼þÎÞÓ¦´ð */
 8001bca:	bf00      	nop
 8001bcc:	e002      	b.n	8001bd4 <ee_ReadBytes+0xb0>
			goto cmd_fail;	/* EEPROMÆ÷¼þÎÞÓ¦´ð */
 8001bce:	bf00      	nop
 8001bd0:	e000      	b.n	8001bd4 <ee_ReadBytes+0xb0>
		goto cmd_fail;	/* EEPROMÆ÷¼þÎÞÓ¦´ð */
 8001bd2:	bf00      	nop
cmd_fail:
	i2c_Stop();
 8001bd4:	f000 f980 	bl	8001ed8 <i2c_Stop>
	return 0;
 8001bd8:	2300      	movs	r3, #0
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3714      	adds	r7, #20
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd90      	pop	{r4, r7, pc}

08001be2 <ee_WriteBytes>:
*********************************************************************************************************
*	Func name: ee_WriteBytes
*********************************************************************************************************
*/
uint8_t ee_WriteBytes(uint8_t *_pWriteBuf, uint16_t _usAddress, uint16_t _usSize)
{
 8001be2:	b580      	push	{r7, lr}
 8001be4:	b084      	sub	sp, #16
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	6078      	str	r0, [r7, #4]
 8001bea:	460b      	mov	r3, r1
 8001bec:	807b      	strh	r3, [r7, #2]
 8001bee:	4613      	mov	r3, r2
 8001bf0:	803b      	strh	r3, [r7, #0]
	uint16_t i,m;
	uint16_t usAddr;

	usAddr = _usAddress;
 8001bf2:	887b      	ldrh	r3, [r7, #2]
 8001bf4:	817b      	strh	r3, [r7, #10]
	for (i = 0; i < _usSize; i++)
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	81fb      	strh	r3, [r7, #14]
 8001bfa:	e04b      	b.n	8001c94 <ee_WriteBytes+0xb2>
	{

		if ((i == 0) || (usAddr & (EE_PAGE_SIZE - 1)) == 0)
 8001bfc:	89fb      	ldrh	r3, [r7, #14]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d004      	beq.n	8001c0c <ee_WriteBytes+0x2a>
 8001c02:	897b      	ldrh	r3, [r7, #10]
 8001c04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d131      	bne.n	8001c70 <ee_WriteBytes+0x8e>
		{
			i2c_Stop();
 8001c0c:	f000 f964 	bl	8001ed8 <i2c_Stop>

			for (m = 0; m < 1000; m++)
 8001c10:	2300      	movs	r3, #0
 8001c12:	81bb      	strh	r3, [r7, #12]
 8001c14:	e00c      	b.n	8001c30 <ee_WriteBytes+0x4e>
			{
				i2c_Start();
 8001c16:	f000 f867 	bl	8001ce8 <i2c_Start>

				i2c_SendByte(EE_DEV_ADDR | I2C_WR);	/* ´Ë´¦ÊÇÐ´Ö¸Áî */
 8001c1a:	20a0      	movs	r0, #160	; 0xa0
 8001c1c:	f000 f884 	bl	8001d28 <i2c_SendByte>

				if (i2c_WaitAck() == 0)
 8001c20:	f000 f8f2 	bl	8001e08 <i2c_WaitAck>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d007      	beq.n	8001c3a <ee_WriteBytes+0x58>
			for (m = 0; m < 1000; m++)
 8001c2a:	89bb      	ldrh	r3, [r7, #12]
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	81bb      	strh	r3, [r7, #12]
 8001c30:	89bb      	ldrh	r3, [r7, #12]
 8001c32:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c36:	d3ee      	bcc.n	8001c16 <ee_WriteBytes+0x34>
 8001c38:	e000      	b.n	8001c3c <ee_WriteBytes+0x5a>
				{
					break;
 8001c3a:	bf00      	nop
				}
			}
			if (m  == 1000)
 8001c3c:	89bb      	ldrh	r3, [r7, #12]
 8001c3e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c42:	d02f      	beq.n	8001ca4 <ee_WriteBytes+0xc2>
					goto cmd_fail;
				}
			}
			else
			{
				i2c_SendByte(usAddr >> 8);
 8001c44:	897b      	ldrh	r3, [r7, #10]
 8001c46:	0a1b      	lsrs	r3, r3, #8
 8001c48:	b29b      	uxth	r3, r3
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f000 f86b 	bl	8001d28 <i2c_SendByte>
				if (i2c_WaitAck() != 0)
 8001c52:	f000 f8d9 	bl	8001e08 <i2c_WaitAck>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d125      	bne.n	8001ca8 <ee_WriteBytes+0xc6>
				{
					goto cmd_fail;	/* EEPROMÆ÷¼þÎÞÓ¦´ð */
				}
				i2c_SendByte(usAddr);
 8001c5c:	897b      	ldrh	r3, [r7, #10]
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	4618      	mov	r0, r3
 8001c62:	f000 f861 	bl	8001d28 <i2c_SendByte>
				if (i2c_WaitAck() != 0)
 8001c66:	f000 f8cf 	bl	8001e08 <i2c_WaitAck>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d11d      	bne.n	8001cac <ee_WriteBytes+0xca>
					goto cmd_fail;	/* EEPROMÆ÷¼þÎÞÓ¦´ð */
				}
			}
		}
		/* µÚ6²½£º¿ªÊ¼Ð´ÈëÊý¾Ý */
		i2c_SendByte(_pWriteBuf[i]);
 8001c70:	89fb      	ldrh	r3, [r7, #14]
 8001c72:	687a      	ldr	r2, [r7, #4]
 8001c74:	4413      	add	r3, r2
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f000 f855 	bl	8001d28 <i2c_SendByte>
		/* µÚ7²½£º·¢ËÍACK */
		if (i2c_WaitAck() != 0)
 8001c7e:	f000 f8c3 	bl	8001e08 <i2c_WaitAck>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d113      	bne.n	8001cb0 <ee_WriteBytes+0xce>
		{
			goto cmd_fail;	/* EEPROMÆ÷¼þÎÞÓ¦´ð */
		}
		usAddr++;	/* µØÖ·Ôö1 */
 8001c88:	897b      	ldrh	r3, [r7, #10]
 8001c8a:	3301      	adds	r3, #1
 8001c8c:	817b      	strh	r3, [r7, #10]
	for (i = 0; i < _usSize; i++)
 8001c8e:	89fb      	ldrh	r3, [r7, #14]
 8001c90:	3301      	adds	r3, #1
 8001c92:	81fb      	strh	r3, [r7, #14]
 8001c94:	89fa      	ldrh	r2, [r7, #14]
 8001c96:	883b      	ldrh	r3, [r7, #0]
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d3af      	bcc.n	8001bfc <ee_WriteBytes+0x1a>
	}
	/* ÃüÁîÖ´ÐÐ³É¹¦£¬·¢ËÍI2C×ÜÏßÍ£Ö¹ÐÅºÅ */
	i2c_Stop();
 8001c9c:	f000 f91c 	bl	8001ed8 <i2c_Stop>
	return 1;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e009      	b.n	8001cb8 <ee_WriteBytes+0xd6>
				goto cmd_fail;	/* EEPROMÆ÷¼þÐ´³¬Ê± */
 8001ca4:	bf00      	nop
 8001ca6:	e004      	b.n	8001cb2 <ee_WriteBytes+0xd0>
					goto cmd_fail;	/* EEPROMÆ÷¼þÎÞÓ¦´ð */
 8001ca8:	bf00      	nop
 8001caa:	e002      	b.n	8001cb2 <ee_WriteBytes+0xd0>
					goto cmd_fail;	/* EEPROMÆ÷¼þÎÞÓ¦´ð */
 8001cac:	bf00      	nop
 8001cae:	e000      	b.n	8001cb2 <ee_WriteBytes+0xd0>
			goto cmd_fail;	/* EEPROMÆ÷¼þÎÞÓ¦´ð */
 8001cb0:	bf00      	nop
cmd_fail: /* ÃüÁîÖ´ÐÐÊ§°Üºó£¬ÇÐ¼Ç·¢ËÍÍ£Ö¹ÐÅºÅ£¬±ÜÃâÓ°ÏìI2C×ÜÏßÉÏÆäËûÉè±¸ */
	/* ·¢ËÍI2C×ÜÏßÍ£Ö¹ÐÅºÅ */
	i2c_Stop();
 8001cb2:	f000 f911 	bl	8001ed8 <i2c_Stop>
	return 0;
 8001cb6:	2300      	movs	r3, #0
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3710      	adds	r7, #16
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}

08001cc0 <i2c_Delay>:
*********************************************************************************************************
*	Func name: i2c_Delay
*********************************************************************************************************
*/
void i2c_Delay(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < 30; i++);
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	71fb      	strb	r3, [r7, #7]
 8001cca:	e002      	b.n	8001cd2 <i2c_Delay+0x12>
 8001ccc:	79fb      	ldrb	r3, [r7, #7]
 8001cce:	3301      	adds	r3, #1
 8001cd0:	71fb      	strb	r3, [r7, #7]
 8001cd2:	79fb      	ldrb	r3, [r7, #7]
 8001cd4:	2b1d      	cmp	r3, #29
 8001cd6:	d9f9      	bls.n	8001ccc <i2c_Delay+0xc>
}
 8001cd8:	bf00      	nop
 8001cda:	bf00      	nop
 8001cdc:	370c      	adds	r7, #12
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
	...

08001ce8 <i2c_Start>:
*********************************************************************************************************
*	Func name: i2c_Start
*********************************************************************************************************
*/
void i2c_Start(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0
	I2C_SDA_1();
 8001cec:	2201      	movs	r2, #1
 8001cee:	2120      	movs	r1, #32
 8001cf0:	480c      	ldr	r0, [pc, #48]	; (8001d24 <i2c_Start+0x3c>)
 8001cf2:	f001 fd51 	bl	8003798 <HAL_GPIO_WritePin>
	I2C_SCL_1();
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	2110      	movs	r1, #16
 8001cfa:	480a      	ldr	r0, [pc, #40]	; (8001d24 <i2c_Start+0x3c>)
 8001cfc:	f001 fd4c 	bl	8003798 <HAL_GPIO_WritePin>
	i2c_Delay();
 8001d00:	f7ff ffde 	bl	8001cc0 <i2c_Delay>
	I2C_SDA_0();
 8001d04:	2200      	movs	r2, #0
 8001d06:	2120      	movs	r1, #32
 8001d08:	4806      	ldr	r0, [pc, #24]	; (8001d24 <i2c_Start+0x3c>)
 8001d0a:	f001 fd45 	bl	8003798 <HAL_GPIO_WritePin>
	i2c_Delay();
 8001d0e:	f7ff ffd7 	bl	8001cc0 <i2c_Delay>
	I2C_SCL_0();
 8001d12:	2200      	movs	r2, #0
 8001d14:	2110      	movs	r1, #16
 8001d16:	4803      	ldr	r0, [pc, #12]	; (8001d24 <i2c_Start+0x3c>)
 8001d18:	f001 fd3e 	bl	8003798 <HAL_GPIO_WritePin>
	i2c_Delay();
 8001d1c:	f7ff ffd0 	bl	8001cc0 <i2c_Delay>
}
 8001d20:	bf00      	nop
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	40021c00 	.word	0x40021c00

08001d28 <i2c_SendByte>:
*********************************************************************************************************
*	Func name: i2c_SendByte
*********************************************************************************************************
*/
void i2c_SendByte(uint8_t _ucByte)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	4603      	mov	r3, r0
 8001d30:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	for (i = 0; i < 8; i++)
 8001d32:	2300      	movs	r3, #0
 8001d34:	73fb      	strb	r3, [r7, #15]
 8001d36:	e02c      	b.n	8001d92 <i2c_SendByte+0x6a>
	{
		if (_ucByte & 0x80)
 8001d38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	da05      	bge.n	8001d4c <i2c_SendByte+0x24>
		{
			I2C_SDA_1();
 8001d40:	2201      	movs	r2, #1
 8001d42:	2120      	movs	r1, #32
 8001d44:	4817      	ldr	r0, [pc, #92]	; (8001da4 <i2c_SendByte+0x7c>)
 8001d46:	f001 fd27 	bl	8003798 <HAL_GPIO_WritePin>
 8001d4a:	e004      	b.n	8001d56 <i2c_SendByte+0x2e>
		}
		else
		{
			I2C_SDA_0();
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	2120      	movs	r1, #32
 8001d50:	4814      	ldr	r0, [pc, #80]	; (8001da4 <i2c_SendByte+0x7c>)
 8001d52:	f001 fd21 	bl	8003798 <HAL_GPIO_WritePin>
		}
		i2c_Delay();
 8001d56:	f7ff ffb3 	bl	8001cc0 <i2c_Delay>
		I2C_SCL_1();
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	2110      	movs	r1, #16
 8001d5e:	4811      	ldr	r0, [pc, #68]	; (8001da4 <i2c_SendByte+0x7c>)
 8001d60:	f001 fd1a 	bl	8003798 <HAL_GPIO_WritePin>
		i2c_Delay();
 8001d64:	f7ff ffac 	bl	8001cc0 <i2c_Delay>
		I2C_SCL_0();
 8001d68:	2200      	movs	r2, #0
 8001d6a:	2110      	movs	r1, #16
 8001d6c:	480d      	ldr	r0, [pc, #52]	; (8001da4 <i2c_SendByte+0x7c>)
 8001d6e:	f001 fd13 	bl	8003798 <HAL_GPIO_WritePin>
		if (i == 7)
 8001d72:	7bfb      	ldrb	r3, [r7, #15]
 8001d74:	2b07      	cmp	r3, #7
 8001d76:	d104      	bne.n	8001d82 <i2c_SendByte+0x5a>
		{
			 I2C_SDA_1(); // ÊÍ·Å×ÜÏß
 8001d78:	2201      	movs	r2, #1
 8001d7a:	2120      	movs	r1, #32
 8001d7c:	4809      	ldr	r0, [pc, #36]	; (8001da4 <i2c_SendByte+0x7c>)
 8001d7e:	f001 fd0b 	bl	8003798 <HAL_GPIO_WritePin>
		}
		_ucByte <<= 1;	/* ×óÒÆÒ»¸öbit */
 8001d82:	79fb      	ldrb	r3, [r7, #7]
 8001d84:	005b      	lsls	r3, r3, #1
 8001d86:	71fb      	strb	r3, [r7, #7]
		i2c_Delay();
 8001d88:	f7ff ff9a 	bl	8001cc0 <i2c_Delay>
	for (i = 0; i < 8; i++)
 8001d8c:	7bfb      	ldrb	r3, [r7, #15]
 8001d8e:	3301      	adds	r3, #1
 8001d90:	73fb      	strb	r3, [r7, #15]
 8001d92:	7bfb      	ldrb	r3, [r7, #15]
 8001d94:	2b07      	cmp	r3, #7
 8001d96:	d9cf      	bls.n	8001d38 <i2c_SendByte+0x10>
	}
}
 8001d98:	bf00      	nop
 8001d9a:	bf00      	nop
 8001d9c:	3710      	adds	r7, #16
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	40021c00 	.word	0x40021c00

08001da8 <i2c_ReadByte>:
*********************************************************************************************************
*	Func name: i2c_ReadByte
*********************************************************************************************************
*/
uint8_t i2c_ReadByte(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t value;

	value = 0;
 8001dae:	2300      	movs	r3, #0
 8001db0:	71bb      	strb	r3, [r7, #6]

	for (i = 0; i < 8; i++)
 8001db2:	2300      	movs	r3, #0
 8001db4:	71fb      	strb	r3, [r7, #7]
 8001db6:	e01d      	b.n	8001df4 <i2c_ReadByte+0x4c>
	{
		value <<= 1;
 8001db8:	79bb      	ldrb	r3, [r7, #6]
 8001dba:	005b      	lsls	r3, r3, #1
 8001dbc:	71bb      	strb	r3, [r7, #6]
		I2C_SCL_1();
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	2110      	movs	r1, #16
 8001dc2:	4810      	ldr	r0, [pc, #64]	; (8001e04 <i2c_ReadByte+0x5c>)
 8001dc4:	f001 fce8 	bl	8003798 <HAL_GPIO_WritePin>
		i2c_Delay();
 8001dc8:	f7ff ff7a 	bl	8001cc0 <i2c_Delay>
		if (I2C_SDA_READ())
 8001dcc:	2120      	movs	r1, #32
 8001dce:	480d      	ldr	r0, [pc, #52]	; (8001e04 <i2c_ReadByte+0x5c>)
 8001dd0:	f001 fcca 	bl	8003768 <HAL_GPIO_ReadPin>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d102      	bne.n	8001de0 <i2c_ReadByte+0x38>
		{
			value++;
 8001dda:	79bb      	ldrb	r3, [r7, #6]
 8001ddc:	3301      	adds	r3, #1
 8001dde:	71bb      	strb	r3, [r7, #6]
		}
		I2C_SCL_0();
 8001de0:	2200      	movs	r2, #0
 8001de2:	2110      	movs	r1, #16
 8001de4:	4807      	ldr	r0, [pc, #28]	; (8001e04 <i2c_ReadByte+0x5c>)
 8001de6:	f001 fcd7 	bl	8003798 <HAL_GPIO_WritePin>
		i2c_Delay();
 8001dea:	f7ff ff69 	bl	8001cc0 <i2c_Delay>
	for (i = 0; i < 8; i++)
 8001dee:	79fb      	ldrb	r3, [r7, #7]
 8001df0:	3301      	adds	r3, #1
 8001df2:	71fb      	strb	r3, [r7, #7]
 8001df4:	79fb      	ldrb	r3, [r7, #7]
 8001df6:	2b07      	cmp	r3, #7
 8001df8:	d9de      	bls.n	8001db8 <i2c_ReadByte+0x10>
	}
	return value;
 8001dfa:	79bb      	ldrb	r3, [r7, #6]
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3708      	adds	r7, #8
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	40021c00 	.word	0x40021c00

08001e08 <i2c_WaitAck>:
*********************************************************************************************************
*	Func name: i2c_WaitAck
*********************************************************************************************************
*/
uint8_t i2c_WaitAck(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
	uint8_t re;

	I2C_SDA_1();	/* CPUÊÍ·ÅSDA×ÜÏß */
 8001e0e:	2201      	movs	r2, #1
 8001e10:	2120      	movs	r1, #32
 8001e12:	4812      	ldr	r0, [pc, #72]	; (8001e5c <i2c_WaitAck+0x54>)
 8001e14:	f001 fcc0 	bl	8003798 <HAL_GPIO_WritePin>
	i2c_Delay();
 8001e18:	f7ff ff52 	bl	8001cc0 <i2c_Delay>
	I2C_SCL_1();	/* CPUÇý¶¯SCL = 1, ´ËÊ±Æ÷¼þ»á·µ»ØACKÓ¦´ð */
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	2110      	movs	r1, #16
 8001e20:	480e      	ldr	r0, [pc, #56]	; (8001e5c <i2c_WaitAck+0x54>)
 8001e22:	f001 fcb9 	bl	8003798 <HAL_GPIO_WritePin>
	i2c_Delay();
 8001e26:	f7ff ff4b 	bl	8001cc0 <i2c_Delay>
	if (I2C_SDA_READ())	/* CPU¶ÁÈ¡SDA¿ÚÏß×´Ì¬ */
 8001e2a:	2120      	movs	r1, #32
 8001e2c:	480b      	ldr	r0, [pc, #44]	; (8001e5c <i2c_WaitAck+0x54>)
 8001e2e:	f001 fc9b 	bl	8003768 <HAL_GPIO_ReadPin>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d102      	bne.n	8001e3e <i2c_WaitAck+0x36>
	{
		re = 1;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	71fb      	strb	r3, [r7, #7]
 8001e3c:	e001      	b.n	8001e42 <i2c_WaitAck+0x3a>
	}
	else
	{
		re = 0;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	71fb      	strb	r3, [r7, #7]
	}
	I2C_SCL_0();
 8001e42:	2200      	movs	r2, #0
 8001e44:	2110      	movs	r1, #16
 8001e46:	4805      	ldr	r0, [pc, #20]	; (8001e5c <i2c_WaitAck+0x54>)
 8001e48:	f001 fca6 	bl	8003798 <HAL_GPIO_WritePin>
	i2c_Delay();
 8001e4c:	f7ff ff38 	bl	8001cc0 <i2c_Delay>
	return re;
 8001e50:	79fb      	ldrb	r3, [r7, #7]
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	40021c00 	.word	0x40021c00

08001e60 <i2c_Ack>:
*********************************************************************************************************
*	Func name: i2c_Ack
*********************************************************************************************************
*/
void i2c_Ack(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	af00      	add	r7, sp, #0
	I2C_SDA_0();	/* CPUÇý¶¯SDA = 0 */
 8001e64:	2200      	movs	r2, #0
 8001e66:	2120      	movs	r1, #32
 8001e68:	480c      	ldr	r0, [pc, #48]	; (8001e9c <i2c_Ack+0x3c>)
 8001e6a:	f001 fc95 	bl	8003798 <HAL_GPIO_WritePin>
	i2c_Delay();
 8001e6e:	f7ff ff27 	bl	8001cc0 <i2c_Delay>
	I2C_SCL_1();	/* CPU²úÉú1¸öÊ±ÖÓ */
 8001e72:	2201      	movs	r2, #1
 8001e74:	2110      	movs	r1, #16
 8001e76:	4809      	ldr	r0, [pc, #36]	; (8001e9c <i2c_Ack+0x3c>)
 8001e78:	f001 fc8e 	bl	8003798 <HAL_GPIO_WritePin>
	i2c_Delay();
 8001e7c:	f7ff ff20 	bl	8001cc0 <i2c_Delay>
	I2C_SCL_0();
 8001e80:	2200      	movs	r2, #0
 8001e82:	2110      	movs	r1, #16
 8001e84:	4805      	ldr	r0, [pc, #20]	; (8001e9c <i2c_Ack+0x3c>)
 8001e86:	f001 fc87 	bl	8003798 <HAL_GPIO_WritePin>
	i2c_Delay();
 8001e8a:	f7ff ff19 	bl	8001cc0 <i2c_Delay>
	I2C_SDA_1();	/* CPUÊÍ·ÅSDA×ÜÏß */
 8001e8e:	2201      	movs	r2, #1
 8001e90:	2120      	movs	r1, #32
 8001e92:	4802      	ldr	r0, [pc, #8]	; (8001e9c <i2c_Ack+0x3c>)
 8001e94:	f001 fc80 	bl	8003798 <HAL_GPIO_WritePin>
}
 8001e98:	bf00      	nop
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	40021c00 	.word	0x40021c00

08001ea0 <i2c_NAck>:
*********************************************************************************************************
*	Func name: i2c_NAck
*********************************************************************************************************
*/
void i2c_NAck(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	af00      	add	r7, sp, #0
	I2C_SDA_1();	/* CPUÇý¶¯SDA = 1 */
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	2120      	movs	r1, #32
 8001ea8:	480a      	ldr	r0, [pc, #40]	; (8001ed4 <i2c_NAck+0x34>)
 8001eaa:	f001 fc75 	bl	8003798 <HAL_GPIO_WritePin>
	i2c_Delay();
 8001eae:	f7ff ff07 	bl	8001cc0 <i2c_Delay>
	I2C_SCL_1();	/* CPU²úÉú1¸öÊ±ÖÓ */
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	2110      	movs	r1, #16
 8001eb6:	4807      	ldr	r0, [pc, #28]	; (8001ed4 <i2c_NAck+0x34>)
 8001eb8:	f001 fc6e 	bl	8003798 <HAL_GPIO_WritePin>
	i2c_Delay();
 8001ebc:	f7ff ff00 	bl	8001cc0 <i2c_Delay>
	I2C_SCL_0();
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	2110      	movs	r1, #16
 8001ec4:	4803      	ldr	r0, [pc, #12]	; (8001ed4 <i2c_NAck+0x34>)
 8001ec6:	f001 fc67 	bl	8003798 <HAL_GPIO_WritePin>
	i2c_Delay();
 8001eca:	f7ff fef9 	bl	8001cc0 <i2c_Delay>
}
 8001ece:	bf00      	nop
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	40021c00 	.word	0x40021c00

08001ed8 <i2c_Stop>:
*********************************************************************************************************
*	Func name: i2c_Start
*********************************************************************************************************
*/
void i2c_Stop(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
	I2C_SDA_0();
 8001edc:	2200      	movs	r2, #0
 8001ede:	2120      	movs	r1, #32
 8001ee0:	4808      	ldr	r0, [pc, #32]	; (8001f04 <i2c_Stop+0x2c>)
 8001ee2:	f001 fc59 	bl	8003798 <HAL_GPIO_WritePin>
	I2C_SCL_1();
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	2110      	movs	r1, #16
 8001eea:	4806      	ldr	r0, [pc, #24]	; (8001f04 <i2c_Stop+0x2c>)
 8001eec:	f001 fc54 	bl	8003798 <HAL_GPIO_WritePin>
	i2c_Delay();
 8001ef0:	f7ff fee6 	bl	8001cc0 <i2c_Delay>
	I2C_SDA_1();
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	2120      	movs	r1, #32
 8001ef8:	4802      	ldr	r0, [pc, #8]	; (8001f04 <i2c_Stop+0x2c>)
 8001efa:	f001 fc4d 	bl	8003798 <HAL_GPIO_WritePin>
}
 8001efe:	bf00      	nop
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	40021c00 	.word	0x40021c00

08001f08 <bsp_InitI2C>:
*********************************************************************************************************
*	Func name: bsp_InitI2C
*********************************************************************************************************
*/
void bsp_InitI2C(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b086      	sub	sp, #24
 8001f0c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001f0e:	2300      	movs	r3, #0
 8001f10:	603b      	str	r3, [r7, #0]
 8001f12:	4b0f      	ldr	r3, [pc, #60]	; (8001f50 <bsp_InitI2C+0x48>)
 8001f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f16:	4a0e      	ldr	r2, [pc, #56]	; (8001f50 <bsp_InitI2C+0x48>)
 8001f18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f1e:	4b0c      	ldr	r3, [pc, #48]	; (8001f50 <bsp_InitI2C+0x48>)
 8001f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f26:	603b      	str	r3, [r7, #0]
 8001f28:	683b      	ldr	r3, [r7, #0]

	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_OD;
 8001f2a:	2311      	movs	r3, #17
 8001f2c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructure.Pull = GPIO_NOPULL;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	60fb      	str	r3, [r7, #12]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f32:	2303      	movs	r3, #3
 8001f34:	613b      	str	r3, [r7, #16]

	GPIO_InitStructure.Pin = I2C_SCL_PIN | I2C_SDA_PIN;
 8001f36:	2330      	movs	r3, #48	; 0x30
 8001f38:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIO_PORT_I2C, &GPIO_InitStructure);
 8001f3a:	1d3b      	adds	r3, r7, #4
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	4805      	ldr	r0, [pc, #20]	; (8001f54 <bsp_InitI2C+0x4c>)
 8001f40:	f001 fa76 	bl	8003430 <HAL_GPIO_Init>

	i2c_Stop();
 8001f44:	f7ff ffc8 	bl	8001ed8 <i2c_Stop>
}
 8001f48:	bf00      	nop
 8001f4a:	3718      	adds	r7, #24
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	40023800 	.word	0x40023800
 8001f54:	40021c00 	.word	0x40021c00

08001f58 <IsKeyDown1>:
	static uint8_t IsKeyDown5(void) {if ((GPIO_PORT_K5->IDR & GPIO_PIN_K5) == 0) return 1;else return 0;}
	static uint8_t IsKeyDown6(void) {if ((GPIO_PORT_K6->IDR & GPIO_PIN_K6) == 0) return 1;else return 0;}
	static uint8_t IsKeyDown7(void) {if ((GPIO_PORT_K7->IDR & GPIO_PIN_K7) == 0) return 1;else return 0;}
	static uint8_t IsKeyDown8(void) {if ((GPIO_PORT_K8->IDR & GPIO_PIN_K8) == 0) return 1;else return 0;}
#else				/* °²¸»À³ STM32-V5 ¿ª·¢°å */
	static uint8_t IsKeyDown1(void) {if ((GPIO_PORT_K1->IDR & GPIO_PIN_K1) == 0) return 1;else return 0;}
 8001f58:	b480      	push	{r7}
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	4b06      	ldr	r3, [pc, #24]	; (8001f78 <IsKeyDown1+0x20>)
 8001f5e:	691b      	ldr	r3, [r3, #16]
 8001f60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d101      	bne.n	8001f6c <IsKeyDown1+0x14>
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e000      	b.n	8001f6e <IsKeyDown1+0x16>
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	4618      	mov	r0, r3
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr
 8001f78:	40022000 	.word	0x40022000

08001f7c <IsKeyDown2>:
	static uint8_t IsKeyDown2(void) {if ((GPIO_PORT_K2->IDR & GPIO_PIN_K2) == 0) return 1;else return 0;}
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	4b06      	ldr	r3, [pc, #24]	; (8001f9c <IsKeyDown2+0x20>)
 8001f82:	691b      	ldr	r3, [r3, #16]
 8001f84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d101      	bne.n	8001f90 <IsKeyDown2+0x14>
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e000      	b.n	8001f92 <IsKeyDown2+0x16>
 8001f90:	2300      	movs	r3, #0
 8001f92:	4618      	mov	r0, r3
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr
 8001f9c:	40020800 	.word	0x40020800

08001fa0 <IsKeyDown3>:
	static uint8_t IsKeyDown3(void) {if ((GPIO_PORT_K3->IDR & GPIO_PIN_K3) == 0) return 1;else return 0;}
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	4b06      	ldr	r3, [pc, #24]	; (8001fc0 <IsKeyDown3+0x20>)
 8001fa6:	691b      	ldr	r3, [r3, #16]
 8001fa8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d101      	bne.n	8001fb4 <IsKeyDown3+0x14>
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e000      	b.n	8001fb6 <IsKeyDown3+0x16>
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr
 8001fc0:	40022000 	.word	0x40022000

08001fc4 <IsKeyDown4>:
	static uint8_t IsKeyDown4(void) {if ((GPIO_PORT_K4->IDR & GPIO_PIN_K4) == 0) return 1;else return 0;}
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	4b06      	ldr	r3, [pc, #24]	; (8001fe4 <IsKeyDown4+0x20>)
 8001fca:	691b      	ldr	r3, [r3, #16]
 8001fcc:	f003 0304 	and.w	r3, r3, #4
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d101      	bne.n	8001fd8 <IsKeyDown4+0x14>
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e000      	b.n	8001fda <IsKeyDown4+0x16>
 8001fd8:	2300      	movs	r3, #0
 8001fda:	4618      	mov	r0, r3
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr
 8001fe4:	40021c00 	.word	0x40021c00

08001fe8 <IsKeyDown5>:
	static uint8_t IsKeyDown5(void) {if ((GPIO_PORT_K5->IDR & GPIO_PIN_K5) == 0) return 1;else return 0;}
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	4b06      	ldr	r3, [pc, #24]	; (8002008 <IsKeyDown5+0x20>)
 8001fee:	691b      	ldr	r3, [r3, #16]
 8001ff0:	f003 0308 	and.w	r3, r3, #8
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d101      	bne.n	8001ffc <IsKeyDown5+0x14>
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e000      	b.n	8001ffe <IsKeyDown5+0x16>
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	4618      	mov	r0, r3
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr
 8002008:	40021c00 	.word	0x40021c00

0800200c <IsKeyDown6>:
	static uint8_t IsKeyDown6(void) {if ((GPIO_PORT_K6->IDR & GPIO_PIN_K6) == 0) return 1;else return 0;}
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
 8002010:	4b06      	ldr	r3, [pc, #24]	; (800202c <IsKeyDown6+0x20>)
 8002012:	691b      	ldr	r3, [r3, #16]
 8002014:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002018:	2b00      	cmp	r3, #0
 800201a:	d101      	bne.n	8002020 <IsKeyDown6+0x14>
 800201c:	2301      	movs	r3, #1
 800201e:	e000      	b.n	8002022 <IsKeyDown6+0x16>
 8002020:	2300      	movs	r3, #0
 8002022:	4618      	mov	r0, r3
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr
 800202c:	40021400 	.word	0x40021400

08002030 <IsKeyDown7>:
	static uint8_t IsKeyDown7(void) {if ((GPIO_PORT_K7->IDR & GPIO_PIN_K7) == 0) return 1;else return 0;}
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0
 8002034:	4b06      	ldr	r3, [pc, #24]	; (8002050 <IsKeyDown7+0x20>)
 8002036:	691b      	ldr	r3, [r3, #16]
 8002038:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800203c:	2b00      	cmp	r3, #0
 800203e:	d101      	bne.n	8002044 <IsKeyDown7+0x14>
 8002040:	2301      	movs	r3, #1
 8002042:	e000      	b.n	8002046 <IsKeyDown7+0x16>
 8002044:	2300      	movs	r3, #0
 8002046:	4618      	mov	r0, r3
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr
 8002050:	40021800 	.word	0x40021800

08002054 <IsKeyDown8>:
	static uint8_t IsKeyDown8(void) {if ((GPIO_PORT_K8->IDR & GPIO_PIN_K8) == 0) return 1;else return 0;}
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
 8002058:	4b06      	ldr	r3, [pc, #24]	; (8002074 <IsKeyDown8+0x20>)
 800205a:	691b      	ldr	r3, [r3, #16]
 800205c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002060:	2b00      	cmp	r3, #0
 8002062:	d101      	bne.n	8002068 <IsKeyDown8+0x14>
 8002064:	2301      	movs	r3, #1
 8002066:	e000      	b.n	800206a <IsKeyDown8+0x16>
 8002068:	2300      	movs	r3, #0
 800206a:	4618      	mov	r0, r3
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr
 8002074:	40021c00 	.word	0x40021c00

08002078 <IsKeyDown9>:
#endif
	static uint8_t IsKeyDown9(void) {if (IsKeyDown1() && IsKeyDown2()) return 1;else return 0;}
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
 800207c:	f7ff ff6c 	bl	8001f58 <IsKeyDown1>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d006      	beq.n	8002094 <IsKeyDown9+0x1c>
 8002086:	f7ff ff79 	bl	8001f7c <IsKeyDown2>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d001      	beq.n	8002094 <IsKeyDown9+0x1c>
 8002090:	2301      	movs	r3, #1
 8002092:	e000      	b.n	8002096 <IsKeyDown9+0x1e>
 8002094:	2300      	movs	r3, #0
 8002096:	4618      	mov	r0, r3
 8002098:	bd80      	pop	{r7, pc}

0800209a <IsKeyDown10>:
	static uint8_t IsKeyDown10(void) {if (IsKeyDown1() && IsKeyDown2()) return 1;else return 0;}
 800209a:	b580      	push	{r7, lr}
 800209c:	af00      	add	r7, sp, #0
 800209e:	f7ff ff5b 	bl	8001f58 <IsKeyDown1>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d006      	beq.n	80020b6 <IsKeyDown10+0x1c>
 80020a8:	f7ff ff68 	bl	8001f7c <IsKeyDown2>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d001      	beq.n	80020b6 <IsKeyDown10+0x1c>
 80020b2:	2301      	movs	r3, #1
 80020b4:	e000      	b.n	80020b8 <IsKeyDown10+0x1e>
 80020b6:	2300      	movs	r3, #0
 80020b8:	4618      	mov	r0, r3
 80020ba:	bd80      	pop	{r7, pc}

080020bc <bsp_InitKey>:
*********************************************************************************************************
* Func name: bsp_InitKey
*********************************************************************************************************
*/
void bsp_InitKey(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
	bsp_InitKeyVar();
 80020c0:	f000 f804 	bl	80020cc <bsp_InitKeyVar>
	bsp_InitKeyHard();
 80020c4:	f000 f898 	bl	80021f8 <bsp_InitKeyHard>
}
 80020c8:	bf00      	nop
 80020ca:	bd80      	pop	{r7, pc}

080020cc <bsp_InitKeyVar>:
*********************************************************************************************************
*	Func name: bsp_InitKeyVar
*********************************************************************************************************
*/
static void bsp_InitKeyVar(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
	uint8_t i;

	/* ¶Ô°´¼üFIFO¶ÁÐ´Ö¸ÕëÇåÁã */
	s_tKey.Read = 0;
 80020d2:	4b3d      	ldr	r3, [pc, #244]	; (80021c8 <bsp_InitKeyVar+0xfc>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	729a      	strb	r2, [r3, #10]
	s_tKey.Write = 0;
 80020d8:	4b3b      	ldr	r3, [pc, #236]	; (80021c8 <bsp_InitKeyVar+0xfc>)
 80020da:	2200      	movs	r2, #0
 80020dc:	72da      	strb	r2, [r3, #11]
	s_tKey.Read2 = 0;
 80020de:	4b3a      	ldr	r3, [pc, #232]	; (80021c8 <bsp_InitKeyVar+0xfc>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	731a      	strb	r2, [r3, #12]

	/* ¸øÃ¿¸ö°´¼ü½á¹¹Ìå³ÉÔ±±äÁ¿¸³Ò»×éÈ±Ê¡Öµ */
	for (i = 0; i < KEY_COUNT; i++)
 80020e4:	2300      	movs	r3, #0
 80020e6:	71fb      	strb	r3, [r7, #7]
 80020e8:	e025      	b.n	8002136 <bsp_InitKeyVar+0x6a>
	{
		s_tBtn[i].LongTime = KEY_LONG_TIME;			/* ³¤°´Ê±¼ä 0 ±íÊ¾²»¼ì²â³¤°´¼üÊÂ¼þ */
 80020ea:	79fb      	ldrb	r3, [r7, #7]
 80020ec:	4a37      	ldr	r2, [pc, #220]	; (80021cc <bsp_InitKeyVar+0x100>)
 80020ee:	011b      	lsls	r3, r3, #4
 80020f0:	4413      	add	r3, r2
 80020f2:	3308      	adds	r3, #8
 80020f4:	2264      	movs	r2, #100	; 0x64
 80020f6:	801a      	strh	r2, [r3, #0]
		s_tBtn[i].Count = KEY_FILTER_TIME / 2;		/* ¼ÆÊýÆ÷ÉèÖÃÎªÂË²¨Ê±¼äµÄÒ»°ë */
 80020f8:	79fb      	ldrb	r3, [r7, #7]
 80020fa:	4a34      	ldr	r2, [pc, #208]	; (80021cc <bsp_InitKeyVar+0x100>)
 80020fc:	011b      	lsls	r3, r3, #4
 80020fe:	4413      	add	r3, r2
 8002100:	3304      	adds	r3, #4
 8002102:	2202      	movs	r2, #2
 8002104:	701a      	strb	r2, [r3, #0]
		s_tBtn[i].State = 0;							/* °´¼üÈ±Ê¡×´Ì¬£¬0ÎªÎ´°´ÏÂ */
 8002106:	79fb      	ldrb	r3, [r7, #7]
 8002108:	4a30      	ldr	r2, [pc, #192]	; (80021cc <bsp_InitKeyVar+0x100>)
 800210a:	011b      	lsls	r3, r3, #4
 800210c:	4413      	add	r3, r2
 800210e:	330a      	adds	r3, #10
 8002110:	2200      	movs	r2, #0
 8002112:	701a      	strb	r2, [r3, #0]
		//s_tBtn[i].KeyCodeDown = 3 * i + 1;				/* °´¼ü°´ÏÂµÄ¼üÖµ´úÂë */
		//s_tBtn[i].KeyCodeUp   = 3 * i + 2;				/* °´¼üµ¯ÆðµÄ¼üÖµ´úÂë */
		//s_tBtn[i].KeyCodeLong = 3 * i + 3;				/* °´¼ü±»³ÖÐø°´ÏÂµÄ¼üÖµ´úÂë */
		s_tBtn[i].RepeatSpeed = 0;						/* °´¼üÁ¬·¢µÄËÙ¶È£¬0±íÊ¾²»Ö§³ÖÁ¬·¢ */
 8002114:	79fb      	ldrb	r3, [r7, #7]
 8002116:	4a2d      	ldr	r2, [pc, #180]	; (80021cc <bsp_InitKeyVar+0x100>)
 8002118:	011b      	lsls	r3, r3, #4
 800211a:	4413      	add	r3, r2
 800211c:	330b      	adds	r3, #11
 800211e:	2200      	movs	r2, #0
 8002120:	701a      	strb	r2, [r3, #0]
		s_tBtn[i].RepeatCount = 0;						/* Á¬·¢¼ÆÊýÆ÷ */
 8002122:	79fb      	ldrb	r3, [r7, #7]
 8002124:	4a29      	ldr	r2, [pc, #164]	; (80021cc <bsp_InitKeyVar+0x100>)
 8002126:	011b      	lsls	r3, r3, #4
 8002128:	4413      	add	r3, r2
 800212a:	330c      	adds	r3, #12
 800212c:	2200      	movs	r2, #0
 800212e:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < KEY_COUNT; i++)
 8002130:	79fb      	ldrb	r3, [r7, #7]
 8002132:	3301      	adds	r3, #1
 8002134:	71fb      	strb	r3, [r7, #7]
 8002136:	79fb      	ldrb	r3, [r7, #7]
 8002138:	2b09      	cmp	r3, #9
 800213a:	d9d6      	bls.n	80020ea <bsp_InitKeyVar+0x1e>
	}
	/* Èç¹ûÐèÒªµ¥¶À¸ü¸ÄÄ³¸ö°´¼üµÄ²ÎÊý£¬¿ÉÒÔÔÚ´Ëµ¥¶ÀÖØÐÂ¸³Öµ */
	/* ±ÈÈç£¬ÎÒÃÇÏ£Íû°´¼ü1°´ÏÂ³¬¹ý1Ãëºó£¬×Ô¶¯ÖØ·¢ÏàÍ¬¼üÖµ */
	s_tBtn[KID_JOY_U].LongTime = 100;
 800213c:	4b23      	ldr	r3, [pc, #140]	; (80021cc <bsp_InitKeyVar+0x100>)
 800213e:	2264      	movs	r2, #100	; 0x64
 8002140:	871a      	strh	r2, [r3, #56]	; 0x38
	s_tBtn[KID_JOY_U].RepeatSpeed = 5;	/* Ã¿¸ô50ms×Ô¶¯·¢ËÍ¼üÖµ */
 8002142:	4b22      	ldr	r3, [pc, #136]	; (80021cc <bsp_InitKeyVar+0x100>)
 8002144:	2205      	movs	r2, #5
 8002146:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b

	s_tBtn[KID_JOY_D].LongTime = 100;
 800214a:	4b20      	ldr	r3, [pc, #128]	; (80021cc <bsp_InitKeyVar+0x100>)
 800214c:	2264      	movs	r2, #100	; 0x64
 800214e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
	s_tBtn[KID_JOY_D].RepeatSpeed = 5;	/* Ã¿¸ô50ms×Ô¶¯·¢ËÍ¼üÖµ */
 8002152:	4b1e      	ldr	r3, [pc, #120]	; (80021cc <bsp_InitKeyVar+0x100>)
 8002154:	2205      	movs	r2, #5
 8002156:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b

	s_tBtn[KID_JOY_L].LongTime = 100;
 800215a:	4b1c      	ldr	r3, [pc, #112]	; (80021cc <bsp_InitKeyVar+0x100>)
 800215c:	2264      	movs	r2, #100	; 0x64
 800215e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
	s_tBtn[KID_JOY_L].RepeatSpeed = 5;	/* Ã¿¸ô50ms×Ô¶¯·¢ËÍ¼üÖµ */
 8002162:	4b1a      	ldr	r3, [pc, #104]	; (80021cc <bsp_InitKeyVar+0x100>)
 8002164:	2205      	movs	r2, #5
 8002166:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b

	s_tBtn[KID_JOY_R].LongTime = 100;
 800216a:	4b18      	ldr	r3, [pc, #96]	; (80021cc <bsp_InitKeyVar+0x100>)
 800216c:	2264      	movs	r2, #100	; 0x64
 800216e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
	s_tBtn[KID_JOY_R].RepeatSpeed = 5;	/* Ã¿¸ô50ms×Ô¶¯·¢ËÍ¼üÖµ */
 8002172:	4b16      	ldr	r3, [pc, #88]	; (80021cc <bsp_InitKeyVar+0x100>)
 8002174:	2205      	movs	r2, #5
 8002176:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b

	/* ÅÐ¶Ï°´¼ü°´ÏÂµÄº¯Êý */
	s_tBtn[0].IsKeyDownFunc = IsKeyDown1;
 800217a:	4b14      	ldr	r3, [pc, #80]	; (80021cc <bsp_InitKeyVar+0x100>)
 800217c:	4a14      	ldr	r2, [pc, #80]	; (80021d0 <bsp_InitKeyVar+0x104>)
 800217e:	601a      	str	r2, [r3, #0]
	s_tBtn[1].IsKeyDownFunc = IsKeyDown2;
 8002180:	4b12      	ldr	r3, [pc, #72]	; (80021cc <bsp_InitKeyVar+0x100>)
 8002182:	4a14      	ldr	r2, [pc, #80]	; (80021d4 <bsp_InitKeyVar+0x108>)
 8002184:	611a      	str	r2, [r3, #16]
	s_tBtn[2].IsKeyDownFunc = IsKeyDown3;
 8002186:	4b11      	ldr	r3, [pc, #68]	; (80021cc <bsp_InitKeyVar+0x100>)
 8002188:	4a13      	ldr	r2, [pc, #76]	; (80021d8 <bsp_InitKeyVar+0x10c>)
 800218a:	621a      	str	r2, [r3, #32]
	s_tBtn[3].IsKeyDownFunc = IsKeyDown4;
 800218c:	4b0f      	ldr	r3, [pc, #60]	; (80021cc <bsp_InitKeyVar+0x100>)
 800218e:	4a13      	ldr	r2, [pc, #76]	; (80021dc <bsp_InitKeyVar+0x110>)
 8002190:	631a      	str	r2, [r3, #48]	; 0x30
	s_tBtn[4].IsKeyDownFunc = IsKeyDown5;
 8002192:	4b0e      	ldr	r3, [pc, #56]	; (80021cc <bsp_InitKeyVar+0x100>)
 8002194:	4a12      	ldr	r2, [pc, #72]	; (80021e0 <bsp_InitKeyVar+0x114>)
 8002196:	641a      	str	r2, [r3, #64]	; 0x40
	s_tBtn[5].IsKeyDownFunc = IsKeyDown6;
 8002198:	4b0c      	ldr	r3, [pc, #48]	; (80021cc <bsp_InitKeyVar+0x100>)
 800219a:	4a12      	ldr	r2, [pc, #72]	; (80021e4 <bsp_InitKeyVar+0x118>)
 800219c:	651a      	str	r2, [r3, #80]	; 0x50
	s_tBtn[6].IsKeyDownFunc = IsKeyDown7;
 800219e:	4b0b      	ldr	r3, [pc, #44]	; (80021cc <bsp_InitKeyVar+0x100>)
 80021a0:	4a11      	ldr	r2, [pc, #68]	; (80021e8 <bsp_InitKeyVar+0x11c>)
 80021a2:	661a      	str	r2, [r3, #96]	; 0x60
	s_tBtn[7].IsKeyDownFunc = IsKeyDown8;
 80021a4:	4b09      	ldr	r3, [pc, #36]	; (80021cc <bsp_InitKeyVar+0x100>)
 80021a6:	4a11      	ldr	r2, [pc, #68]	; (80021ec <bsp_InitKeyVar+0x120>)
 80021a8:	671a      	str	r2, [r3, #112]	; 0x70

	/* ×éºÏ¼ü */
	s_tBtn[8].IsKeyDownFunc = IsKeyDown9;
 80021aa:	4b08      	ldr	r3, [pc, #32]	; (80021cc <bsp_InitKeyVar+0x100>)
 80021ac:	4a10      	ldr	r2, [pc, #64]	; (80021f0 <bsp_InitKeyVar+0x124>)
 80021ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	s_tBtn[9].IsKeyDownFunc = IsKeyDown10;
 80021b2:	4b06      	ldr	r3, [pc, #24]	; (80021cc <bsp_InitKeyVar+0x100>)
 80021b4:	4a0f      	ldr	r2, [pc, #60]	; (80021f4 <bsp_InitKeyVar+0x128>)
 80021b6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
}
 80021ba:	bf00      	nop
 80021bc:	370c      	adds	r7, #12
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	20000124 	.word	0x20000124
 80021cc:	20000084 	.word	0x20000084
 80021d0:	08001f59 	.word	0x08001f59
 80021d4:	08001f7d 	.word	0x08001f7d
 80021d8:	08001fa1 	.word	0x08001fa1
 80021dc:	08001fc5 	.word	0x08001fc5
 80021e0:	08001fe9 	.word	0x08001fe9
 80021e4:	0800200d 	.word	0x0800200d
 80021e8:	08002031 	.word	0x08002031
 80021ec:	08002055 	.word	0x08002055
 80021f0:	08002079 	.word	0x08002079
 80021f4:	0800209b 	.word	0x0800209b

080021f8 <bsp_InitKeyHard>:
*********************************************************************************************************
* Func name: bsp_InitKeyHard
*********************************************************************************************************
*/
static void bsp_InitKeyHard(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b08a      	sub	sp, #40	; 0x28
 80021fc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	// #define RCC_ALL_KEY 	(RCC_AHB1Periph_GPIOC | RCC_AHB1Periph_GPIOF | RCC_AHB1Periph_GPIOH | RCC_AHB1Periph_GPIOI | RCC_AHB1Periph_GPIOG)
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80021fe:	2300      	movs	r3, #0
 8002200:	613b      	str	r3, [r7, #16]
 8002202:	4b49      	ldr	r3, [pc, #292]	; (8002328 <bsp_InitKeyHard+0x130>)
 8002204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002206:	4a48      	ldr	r2, [pc, #288]	; (8002328 <bsp_InitKeyHard+0x130>)
 8002208:	f043 0304 	orr.w	r3, r3, #4
 800220c:	6313      	str	r3, [r2, #48]	; 0x30
 800220e:	4b46      	ldr	r3, [pc, #280]	; (8002328 <bsp_InitKeyHard+0x130>)
 8002210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002212:	f003 0304 	and.w	r3, r3, #4
 8002216:	613b      	str	r3, [r7, #16]
 8002218:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 800221a:	2300      	movs	r3, #0
 800221c:	60fb      	str	r3, [r7, #12]
 800221e:	4b42      	ldr	r3, [pc, #264]	; (8002328 <bsp_InitKeyHard+0x130>)
 8002220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002222:	4a41      	ldr	r2, [pc, #260]	; (8002328 <bsp_InitKeyHard+0x130>)
 8002224:	f043 0320 	orr.w	r3, r3, #32
 8002228:	6313      	str	r3, [r2, #48]	; 0x30
 800222a:	4b3f      	ldr	r3, [pc, #252]	; (8002328 <bsp_InitKeyHard+0x130>)
 800222c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222e:	f003 0320 	and.w	r3, r3, #32
 8002232:	60fb      	str	r3, [r7, #12]
 8002234:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8002236:	2300      	movs	r3, #0
 8002238:	60bb      	str	r3, [r7, #8]
 800223a:	4b3b      	ldr	r3, [pc, #236]	; (8002328 <bsp_InitKeyHard+0x130>)
 800223c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223e:	4a3a      	ldr	r2, [pc, #232]	; (8002328 <bsp_InitKeyHard+0x130>)
 8002240:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002244:	6313      	str	r3, [r2, #48]	; 0x30
 8002246:	4b38      	ldr	r3, [pc, #224]	; (8002328 <bsp_InitKeyHard+0x130>)
 8002248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800224e:	60bb      	str	r3, [r7, #8]
 8002250:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOI_CLK_ENABLE();
 8002252:	2300      	movs	r3, #0
 8002254:	607b      	str	r3, [r7, #4]
 8002256:	4b34      	ldr	r3, [pc, #208]	; (8002328 <bsp_InitKeyHard+0x130>)
 8002258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225a:	4a33      	ldr	r2, [pc, #204]	; (8002328 <bsp_InitKeyHard+0x130>)
 800225c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002260:	6313      	str	r3, [r2, #48]	; 0x30
 8002262:	4b31      	ldr	r3, [pc, #196]	; (8002328 <bsp_InitKeyHard+0x130>)
 8002264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002266:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800226a:	607b      	str	r3, [r7, #4]
 800226c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 800226e:	2300      	movs	r3, #0
 8002270:	603b      	str	r3, [r7, #0]
 8002272:	4b2d      	ldr	r3, [pc, #180]	; (8002328 <bsp_InitKeyHard+0x130>)
 8002274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002276:	4a2c      	ldr	r2, [pc, #176]	; (8002328 <bsp_InitKeyHard+0x130>)
 8002278:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800227c:	6313      	str	r3, [r2, #48]	; 0x30
 800227e:	4b2a      	ldr	r3, [pc, #168]	; (8002328 <bsp_InitKeyHard+0x130>)
 8002280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002282:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002286:	603b      	str	r3, [r7, #0]
 8002288:	683b      	ldr	r3, [r7, #0]


	GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 800228a:	2300      	movs	r3, #0
 800228c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStructure.Pull = GPIO_NOPULL;
 800228e:	2300      	movs	r3, #0
 8002290:	61fb      	str	r3, [r7, #28]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002292:	2302      	movs	r3, #2
 8002294:	623b      	str	r3, [r7, #32]
	GPIO_InitStructure.Pin = GPIO_PIN_K1;
 8002296:	f44f 7380 	mov.w	r3, #256	; 0x100
 800229a:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_PORT_K1, &GPIO_InitStructure);
 800229c:	f107 0314 	add.w	r3, r7, #20
 80022a0:	4619      	mov	r1, r3
 80022a2:	4822      	ldr	r0, [pc, #136]	; (800232c <bsp_InitKeyHard+0x134>)
 80022a4:	f001 f8c4 	bl	8003430 <HAL_GPIO_Init>

	GPIO_InitStructure.Pin = GPIO_PIN_K2;
 80022a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022ac:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_PORT_K2, &GPIO_InitStructure);
 80022ae:	f107 0314 	add.w	r3, r7, #20
 80022b2:	4619      	mov	r1, r3
 80022b4:	481e      	ldr	r0, [pc, #120]	; (8002330 <bsp_InitKeyHard+0x138>)
 80022b6:	f001 f8bb 	bl	8003430 <HAL_GPIO_Init>

	GPIO_InitStructure.Pin = GPIO_PIN_K3;
 80022ba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80022be:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_PORT_K3, &GPIO_InitStructure);
 80022c0:	f107 0314 	add.w	r3, r7, #20
 80022c4:	4619      	mov	r1, r3
 80022c6:	4819      	ldr	r0, [pc, #100]	; (800232c <bsp_InitKeyHard+0x134>)
 80022c8:	f001 f8b2 	bl	8003430 <HAL_GPIO_Init>

	GPIO_InitStructure.Pin = GPIO_PIN_K4;
 80022cc:	2304      	movs	r3, #4
 80022ce:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_PORT_K4, &GPIO_InitStructure);
 80022d0:	f107 0314 	add.w	r3, r7, #20
 80022d4:	4619      	mov	r1, r3
 80022d6:	4817      	ldr	r0, [pc, #92]	; (8002334 <bsp_InitKeyHard+0x13c>)
 80022d8:	f001 f8aa 	bl	8003430 <HAL_GPIO_Init>

	GPIO_InitStructure.Pin = GPIO_PIN_K5;
 80022dc:	2308      	movs	r3, #8
 80022de:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_PORT_K5, &GPIO_InitStructure);
 80022e0:	f107 0314 	add.w	r3, r7, #20
 80022e4:	4619      	mov	r1, r3
 80022e6:	4813      	ldr	r0, [pc, #76]	; (8002334 <bsp_InitKeyHard+0x13c>)
 80022e8:	f001 f8a2 	bl	8003430 <HAL_GPIO_Init>

	GPIO_InitStructure.Pin = GPIO_PIN_K6;
 80022ec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80022f0:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_PORT_K6, &GPIO_InitStructure);
 80022f2:	f107 0314 	add.w	r3, r7, #20
 80022f6:	4619      	mov	r1, r3
 80022f8:	480f      	ldr	r0, [pc, #60]	; (8002338 <bsp_InitKeyHard+0x140>)
 80022fa:	f001 f899 	bl	8003430 <HAL_GPIO_Init>

	GPIO_InitStructure.Pin = GPIO_PIN_K7;
 80022fe:	2380      	movs	r3, #128	; 0x80
 8002300:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_PORT_K7, &GPIO_InitStructure);
 8002302:	f107 0314 	add.w	r3, r7, #20
 8002306:	4619      	mov	r1, r3
 8002308:	480c      	ldr	r0, [pc, #48]	; (800233c <bsp_InitKeyHard+0x144>)
 800230a:	f001 f891 	bl	8003430 <HAL_GPIO_Init>

	GPIO_InitStructure.Pin = GPIO_PIN_K8;
 800230e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002312:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_PORT_K8, &GPIO_InitStructure);
 8002314:	f107 0314 	add.w	r3, r7, #20
 8002318:	4619      	mov	r1, r3
 800231a:	4806      	ldr	r0, [pc, #24]	; (8002334 <bsp_InitKeyHard+0x13c>)
 800231c:	f001 f888 	bl	8003430 <HAL_GPIO_Init>
}
 8002320:	bf00      	nop
 8002322:	3728      	adds	r7, #40	; 0x28
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	40023800 	.word	0x40023800
 800232c:	40022000 	.word	0x40022000
 8002330:	40020800 	.word	0x40020800
 8002334:	40021c00 	.word	0x40021c00
 8002338:	40021400 	.word	0x40021400
 800233c:	40021800 	.word	0x40021800

08002340 <bsp_GetKey2>:
*********************************************************************************************************
*	Func name: bsp_GetKey2
*********************************************************************************************************
*/
uint8_t bsp_GetKey2(void)
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
	uint8_t ret;

	if (s_tKey.Read2 == s_tKey.Write)
 8002346:	4b11      	ldr	r3, [pc, #68]	; (800238c <bsp_GetKey2+0x4c>)
 8002348:	7b1a      	ldrb	r2, [r3, #12]
 800234a:	4b10      	ldr	r3, [pc, #64]	; (800238c <bsp_GetKey2+0x4c>)
 800234c:	7adb      	ldrb	r3, [r3, #11]
 800234e:	429a      	cmp	r2, r3
 8002350:	d101      	bne.n	8002356 <bsp_GetKey2+0x16>
	{
		return KEY_NONE;
 8002352:	2300      	movs	r3, #0
 8002354:	e013      	b.n	800237e <bsp_GetKey2+0x3e>
	}
	else
	{
		ret = s_tKey.Buf[s_tKey.Read2];
 8002356:	4b0d      	ldr	r3, [pc, #52]	; (800238c <bsp_GetKey2+0x4c>)
 8002358:	7b1b      	ldrb	r3, [r3, #12]
 800235a:	461a      	mov	r2, r3
 800235c:	4b0b      	ldr	r3, [pc, #44]	; (800238c <bsp_GetKey2+0x4c>)
 800235e:	5c9b      	ldrb	r3, [r3, r2]
 8002360:	71fb      	strb	r3, [r7, #7]

		if (++s_tKey.Read2 >= KEY_FIFO_SIZE)
 8002362:	4b0a      	ldr	r3, [pc, #40]	; (800238c <bsp_GetKey2+0x4c>)
 8002364:	7b1b      	ldrb	r3, [r3, #12]
 8002366:	3301      	adds	r3, #1
 8002368:	b2da      	uxtb	r2, r3
 800236a:	4b08      	ldr	r3, [pc, #32]	; (800238c <bsp_GetKey2+0x4c>)
 800236c:	731a      	strb	r2, [r3, #12]
 800236e:	4b07      	ldr	r3, [pc, #28]	; (800238c <bsp_GetKey2+0x4c>)
 8002370:	7b1b      	ldrb	r3, [r3, #12]
 8002372:	2b09      	cmp	r3, #9
 8002374:	d902      	bls.n	800237c <bsp_GetKey2+0x3c>
		{
			s_tKey.Read2 = 0;
 8002376:	4b05      	ldr	r3, [pc, #20]	; (800238c <bsp_GetKey2+0x4c>)
 8002378:	2200      	movs	r2, #0
 800237a:	731a      	strb	r2, [r3, #12]
		}
		return ret;
 800237c:	79fb      	ldrb	r3, [r7, #7]
	}
}
 800237e:	4618      	mov	r0, r3
 8002380:	370c      	adds	r7, #12
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop
 800238c:	20000124 	.word	0x20000124

08002390 <bsp_InitLed>:
*********************************************************************************************************
*	Func name: bsp_InitLed
*********************************************************************************************************
*/
void bsp_InitLed(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b08a      	sub	sp, #40	; 0x28
 8002394:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;
	// #define RCC_ALL_LED 	(RCC_AHB1Periph_GPIOC | RCC_AHB1Periph_GPIOF | RCC_AHB1Periph_GPIOI)
	__HAL_RCC_GPIOI_CLK_ENABLE();
 8002396:	2300      	movs	r3, #0
 8002398:	613b      	str	r3, [r7, #16]
 800239a:	4b40      	ldr	r3, [pc, #256]	; (800249c <bsp_InitLed+0x10c>)
 800239c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239e:	4a3f      	ldr	r2, [pc, #252]	; (800249c <bsp_InitLed+0x10c>)
 80023a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023a4:	6313      	str	r3, [r2, #48]	; 0x30
 80023a6:	4b3d      	ldr	r3, [pc, #244]	; (800249c <bsp_InitLed+0x10c>)
 80023a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ae:	613b      	str	r3, [r7, #16]
 80023b0:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80023b2:	2300      	movs	r3, #0
 80023b4:	60fb      	str	r3, [r7, #12]
 80023b6:	4b39      	ldr	r3, [pc, #228]	; (800249c <bsp_InitLed+0x10c>)
 80023b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ba:	4a38      	ldr	r2, [pc, #224]	; (800249c <bsp_InitLed+0x10c>)
 80023bc:	f043 0304 	orr.w	r3, r3, #4
 80023c0:	6313      	str	r3, [r2, #48]	; 0x30
 80023c2:	4b36      	ldr	r3, [pc, #216]	; (800249c <bsp_InitLed+0x10c>)
 80023c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c6:	f003 0304 	and.w	r3, r3, #4
 80023ca:	60fb      	str	r3, [r7, #12]
 80023cc:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 80023ce:	2300      	movs	r3, #0
 80023d0:	60bb      	str	r3, [r7, #8]
 80023d2:	4b32      	ldr	r3, [pc, #200]	; (800249c <bsp_InitLed+0x10c>)
 80023d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d6:	4a31      	ldr	r2, [pc, #196]	; (800249c <bsp_InitLed+0x10c>)
 80023d8:	f043 0320 	orr.w	r3, r3, #32
 80023dc:	6313      	str	r3, [r2, #48]	; 0x30
 80023de:	4b2f      	ldr	r3, [pc, #188]	; (800249c <bsp_InitLed+0x10c>)
 80023e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e2:	f003 0320 	and.w	r3, r3, #32
 80023e6:	60bb      	str	r3, [r7, #8]
 80023e8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80023ea:	2300      	movs	r3, #0
 80023ec:	607b      	str	r3, [r7, #4]
 80023ee:	4b2b      	ldr	r3, [pc, #172]	; (800249c <bsp_InitLed+0x10c>)
 80023f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f2:	4a2a      	ldr	r2, [pc, #168]	; (800249c <bsp_InitLed+0x10c>)
 80023f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023f8:	6313      	str	r3, [r2, #48]	; 0x30
 80023fa:	4b28      	ldr	r3, [pc, #160]	; (800249c <bsp_InitLed+0x10c>)
 80023fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002402:	607b      	str	r3, [r7, #4]
 8002404:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002406:	2300      	movs	r3, #0
 8002408:	603b      	str	r3, [r7, #0]
 800240a:	4b24      	ldr	r3, [pc, #144]	; (800249c <bsp_InitLed+0x10c>)
 800240c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240e:	4a23      	ldr	r2, [pc, #140]	; (800249c <bsp_InitLed+0x10c>)
 8002410:	f043 0301 	orr.w	r3, r3, #1
 8002414:	6313      	str	r3, [r2, #48]	; 0x30
 8002416:	4b21      	ldr	r3, [pc, #132]	; (800249c <bsp_InitLed+0x10c>)
 8002418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241a:	f003 0301 	and.w	r3, r3, #1
 800241e:	603b      	str	r3, [r7, #0]
 8002420:	683b      	ldr	r3, [r7, #0]

	bsp_LedOff(1);
 8002422:	2001      	movs	r0, #1
 8002424:	f000 f842 	bl	80024ac <bsp_LedOff>
	bsp_LedOff(2);
 8002428:	2002      	movs	r0, #2
 800242a:	f000 f83f 	bl	80024ac <bsp_LedOff>
	bsp_LedOff(3);
 800242e:	2003      	movs	r0, #3
 8002430:	f000 f83c 	bl	80024ac <bsp_LedOff>
	bsp_LedOff(4);
 8002434:	2004      	movs	r0, #4
 8002436:	f000 f839 	bl	80024ac <bsp_LedOff>

	GPIO_InitStructure.Pin = GPIO_PIN_LED1;
 800243a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800243e:	617b      	str	r3, [r7, #20]
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8002440:	2301      	movs	r3, #1
 8002442:	61bb      	str	r3, [r7, #24]
	GPIO_InitStructure.Pull = GPIO_NOPULL;
 8002444:	2300      	movs	r3, #0
 8002446:	61fb      	str	r3, [r7, #28]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002448:	2302      	movs	r3, #2
 800244a:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOI, &GPIO_InitStructure);
 800244c:	f107 0314 	add.w	r3, r7, #20
 8002450:	4619      	mov	r1, r3
 8002452:	4813      	ldr	r0, [pc, #76]	; (80024a0 <bsp_InitLed+0x110>)
 8002454:	f000 ffec 	bl	8003430 <HAL_GPIO_Init>

	GPIO_InitStructure.Pin = GPIO_PIN_LED2|GPIO_PIN_LED3;
 8002458:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800245c:	617b      	str	r3, [r7, #20]
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 800245e:	2301      	movs	r3, #1
 8002460:	61bb      	str	r3, [r7, #24]
	GPIO_InitStructure.Pull = GPIO_NOPULL;
 8002462:	2300      	movs	r3, #0
 8002464:	61fb      	str	r3, [r7, #28]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002466:	2302      	movs	r3, #2
 8002468:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 800246a:	f107 0314 	add.w	r3, r7, #20
 800246e:	4619      	mov	r1, r3
 8002470:	480c      	ldr	r0, [pc, #48]	; (80024a4 <bsp_InitLed+0x114>)
 8002472:	f000 ffdd 	bl	8003430 <HAL_GPIO_Init>

	GPIO_InitStructure.Pin = GPIO_PIN_LED4;
 8002476:	2304      	movs	r3, #4
 8002478:	617b      	str	r3, [r7, #20]
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 800247a:	2301      	movs	r3, #1
 800247c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStructure.Pull = GPIO_NOPULL;
 800247e:	2300      	movs	r3, #0
 8002480:	61fb      	str	r3, [r7, #28]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002482:	2302      	movs	r3, #2
 8002484:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8002486:	f107 0314 	add.w	r3, r7, #20
 800248a:	4619      	mov	r1, r3
 800248c:	4806      	ldr	r0, [pc, #24]	; (80024a8 <bsp_InitLed+0x118>)
 800248e:	f000 ffcf 	bl	8003430 <HAL_GPIO_Init>
}
 8002492:	bf00      	nop
 8002494:	3728      	adds	r7, #40	; 0x28
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	40023800 	.word	0x40023800
 80024a0:	40022000 	.word	0x40022000
 80024a4:	40021400 	.word	0x40021400
 80024a8:	40020800 	.word	0x40020800

080024ac <bsp_LedOff>:
*********************************************************************************************************
*	Func name: bsp_LedOff
*********************************************************************************************************
*/
void bsp_LedOff(uint8_t _no)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	4603      	mov	r3, r0
 80024b4:	71fb      	strb	r3, [r7, #7]
	_no--;
 80024b6:	79fb      	ldrb	r3, [r7, #7]
 80024b8:	3b01      	subs	r3, #1
 80024ba:	71fb      	strb	r3, [r7, #7]

	if (_no == 0)
 80024bc:	79fb      	ldrb	r3, [r7, #7]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d106      	bne.n	80024d0 <bsp_LedOff+0x24>
	{
		HAL_GPIO_WritePin(GPIOI, GPIO_PIN_LED1, GPIO_PIN_SET);
 80024c2:	2201      	movs	r2, #1
 80024c4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80024c8:	4811      	ldr	r0, [pc, #68]	; (8002510 <bsp_LedOff+0x64>)
 80024ca:	f001 f965 	bl	8003798 <HAL_GPIO_WritePin>
	}
	else if (_no == 3)
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_LED4, GPIO_PIN_SET);
	}
}
 80024ce:	e01a      	b.n	8002506 <bsp_LedOff+0x5a>
	else if (_no == 1)
 80024d0:	79fb      	ldrb	r3, [r7, #7]
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d105      	bne.n	80024e2 <bsp_LedOff+0x36>
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_LED2, GPIO_PIN_SET);
 80024d6:	2201      	movs	r2, #1
 80024d8:	2180      	movs	r1, #128	; 0x80
 80024da:	480e      	ldr	r0, [pc, #56]	; (8002514 <bsp_LedOff+0x68>)
 80024dc:	f001 f95c 	bl	8003798 <HAL_GPIO_WritePin>
}
 80024e0:	e011      	b.n	8002506 <bsp_LedOff+0x5a>
	else if (_no == 2)
 80024e2:	79fb      	ldrb	r3, [r7, #7]
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d106      	bne.n	80024f6 <bsp_LedOff+0x4a>
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_LED3, GPIO_PIN_SET);
 80024e8:	2201      	movs	r2, #1
 80024ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80024ee:	4809      	ldr	r0, [pc, #36]	; (8002514 <bsp_LedOff+0x68>)
 80024f0:	f001 f952 	bl	8003798 <HAL_GPIO_WritePin>
}
 80024f4:	e007      	b.n	8002506 <bsp_LedOff+0x5a>
	else if (_no == 3)
 80024f6:	79fb      	ldrb	r3, [r7, #7]
 80024f8:	2b03      	cmp	r3, #3
 80024fa:	d104      	bne.n	8002506 <bsp_LedOff+0x5a>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_LED4, GPIO_PIN_SET);
 80024fc:	2201      	movs	r2, #1
 80024fe:	2104      	movs	r1, #4
 8002500:	4805      	ldr	r0, [pc, #20]	; (8002518 <bsp_LedOff+0x6c>)
 8002502:	f001 f949 	bl	8003798 <HAL_GPIO_WritePin>
}
 8002506:	bf00      	nop
 8002508:	3708      	adds	r7, #8
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	40022000 	.word	0x40022000
 8002514:	40021400 	.word	0x40021400
 8002518:	40020800 	.word	0x40020800

0800251c <RA8875_WriteCmd>:
*********************************************************************************************************
*	Func name: RA8875_WriteCmd
*********************************************************************************************************
*/
void RA8875_WriteCmd(uint8_t _ucRegAddr)
{
 800251c:	b480      	push	{r7}
 800251e:	b083      	sub	sp, #12
 8002520:	af00      	add	r7, sp, #0
 8002522:	4603      	mov	r3, r0
 8002524:	71fb      	strb	r3, [r7, #7]
	SPI_ShiftByte(_ucRegAddr);
	RA8875_CS_1();
#endif

#ifdef RA_HARD_8080_16			/* 8080Ó²¼þ×ÜÏß */
	RA8875_REG = _ucRegAddr;	/* ÉèÖÃ¼Ä´æÆ÷µØÖ· */
 8002526:	4b05      	ldr	r3, [pc, #20]	; (800253c <RA8875_WriteCmd+0x20>)
 8002528:	79fa      	ldrb	r2, [r7, #7]
 800252a:	b292      	uxth	r2, r2
 800252c:	801a      	strh	r2, [r3, #0]
#endif
}
 800252e:	bf00      	nop
 8002530:	370c      	adds	r7, #12
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr
 800253a:	bf00      	nop
 800253c:	6c080000 	.word	0x6c080000

08002540 <RA8875_ReadData>:
*********************************************************************************************************
*	Func name: RA8875_ReadData
*********************************************************************************************************
*/
uint8_t RA8875_ReadData(void)
{
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
#endif

#ifdef RA_HARD_8080_16			/* 8080Ó²¼þ×ÜÏß */
	uint8_t value;

	value = RA8875_RAM;		/* ¶ÁÈ¡¼Ä´æÆ÷Öµ */
 8002546:	f04f 43d8 	mov.w	r3, #1811939328	; 0x6c000000
 800254a:	881b      	ldrh	r3, [r3, #0]
 800254c:	b29b      	uxth	r3, r3
 800254e:	71fb      	strb	r3, [r7, #7]

	return value;
 8002550:	79fb      	ldrb	r3, [r7, #7]
#endif
}
 8002552:	4618      	mov	r0, r3
 8002554:	370c      	adds	r7, #12
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr

0800255e <RA8875_WriteData>:
*********************************************************************************************************
*	Func name: RA8875_WriteData
*********************************************************************************************************
*/
void RA8875_WriteData(uint8_t _ucRegValue)
{
 800255e:	b480      	push	{r7}
 8002560:	b083      	sub	sp, #12
 8002562:	af00      	add	r7, sp, #0
 8002564:	4603      	mov	r3, r0
 8002566:	71fb      	strb	r3, [r7, #7]
	SPI_ShiftByte(_ucRegValue);
	RA8875_CS_1();
#endif

#ifdef RA_HARD_8080_16			/* 8080Ó²¼þ×ÜÏß */
	RA8875_RAM = _ucRegValue;	/* ÉèÖÃ¼Ä´æÆ÷µØÖ· */
 8002568:	f04f 43d8 	mov.w	r3, #1811939328	; 0x6c000000
 800256c:	79fa      	ldrb	r2, [r7, #7]
 800256e:	b292      	uxth	r2, r2
 8002570:	801a      	strh	r2, [r3, #0]
#endif
}
 8002572:	bf00      	nop
 8002574:	370c      	adds	r7, #12
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr
	...

08002580 <RA8875_ReadStatus>:
*********************************************************************************************************
*	Func name: RA8875_ReadStatus
*********************************************************************************************************
*/
uint8_t RA8875_ReadStatus(void)
{
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
#endif

#ifdef RA_HARD_8080_16			/* 8080Ó²¼þ×ÜÏß */
	uint8_t value;

	value = RA8875_REG;
 8002586:	4b05      	ldr	r3, [pc, #20]	; (800259c <RA8875_ReadStatus+0x1c>)
 8002588:	881b      	ldrh	r3, [r3, #0]
 800258a:	b29b      	uxth	r3, r3
 800258c:	71fb      	strb	r3, [r7, #7]

	return value;
 800258e:	79fb      	ldrb	r3, [r7, #7]
#endif
}
 8002590:	4618      	mov	r0, r3
 8002592:	370c      	adds	r7, #12
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr
 800259c:	6c080000 	.word	0x6c080000

080025a0 <RA8875_Delaly1us>:
*********************************************************************************************************
*	Func name: RA8875_Delaly1us
*********************************************************************************************************
*/
void RA8875_Delaly1us(void)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < 10; i++);
 80025a6:	2300      	movs	r3, #0
 80025a8:	71fb      	strb	r3, [r7, #7]
 80025aa:	e002      	b.n	80025b2 <RA8875_Delaly1us+0x12>
 80025ac:	79fb      	ldrb	r3, [r7, #7]
 80025ae:	3301      	adds	r3, #1
 80025b0:	71fb      	strb	r3, [r7, #7]
 80025b2:	79fb      	ldrb	r3, [r7, #7]
 80025b4:	2b09      	cmp	r3, #9
 80025b6:	d9f9      	bls.n	80025ac <RA8875_Delaly1us+0xc>
}
 80025b8:	bf00      	nop
 80025ba:	bf00      	nop
 80025bc:	370c      	adds	r7, #12
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr

080025c6 <RA8875_Delaly1ms>:
*********************************************************************************************************
*	Func name: RA8875_Delaly1ms
*********************************************************************************************************
*/
void RA8875_Delaly1ms(void)
{
 80025c6:	b480      	push	{r7}
 80025c8:	b083      	sub	sp, #12
 80025ca:	af00      	add	r7, sp, #0
	uint16_t i;
	for (i = 0; i < 5000; i++);
 80025cc:	2300      	movs	r3, #0
 80025ce:	80fb      	strh	r3, [r7, #6]
 80025d0:	e002      	b.n	80025d8 <RA8875_Delaly1ms+0x12>
 80025d2:	88fb      	ldrh	r3, [r7, #6]
 80025d4:	3301      	adds	r3, #1
 80025d6:	80fb      	strh	r3, [r7, #6]
 80025d8:	88fb      	ldrh	r3, [r7, #6]
 80025da:	f241 3287 	movw	r2, #4999	; 0x1387
 80025de:	4293      	cmp	r3, r2
 80025e0:	d9f7      	bls.n	80025d2 <RA8875_Delaly1ms+0xc>
}
 80025e2:	bf00      	nop
 80025e4:	bf00      	nop
 80025e6:	370c      	adds	r7, #12
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr

080025f0 <LCD_InitHard>:
*********************************************************************************************************
*	Func name: LCD_InitHard
*********************************************************************************************************
*/
void LCD_InitHard(void)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b082      	sub	sp, #8
 80025f4:	af00      	add	r7, sp, #0
	uint16_t id;

	LCD_CtrlLinesConfig();
 80025f6:	f000 f83f 	bl	8002678 <LCD_CtrlLinesConfig>

	LCD_FSMCConfig();
 80025fa:	f000 f8b5 	bl	8002768 <LCD_FSMCConfig>

	HAL_Delay(20);
 80025fe:	2014      	movs	r0, #20
 8002600:	f000 fde0 	bl	80031c4 <HAL_Delay>

	id = SPFD5420_ReadID();
 8002604:	f7ff fa70 	bl	8001ae8 <SPFD5420_ReadID>
 8002608:	4603      	mov	r3, r0
 800260a:	80fb      	strh	r3, [r7, #6]
	if ((id == 0x5420) || (id ==  0xB509) || (id == 0x5520))
 800260c:	88fb      	ldrh	r3, [r7, #6]
 800260e:	f245 4220 	movw	r2, #21536	; 0x5420
 8002612:	4293      	cmp	r3, r2
 8002614:	d01f      	beq.n	8002656 <LCD_InitHard+0x66>
 8002616:	88fb      	ldrh	r3, [r7, #6]
 8002618:	f24b 5209 	movw	r2, #46345	; 0xb509
 800261c:	4293      	cmp	r3, r2
 800261e:	d01a      	beq.n	8002656 <LCD_InitHard+0x66>
 8002620:	88fb      	ldrh	r3, [r7, #6]
 8002622:	f245 5220 	movw	r2, #21792	; 0x5520
 8002626:	4293      	cmp	r3, r2
 8002628:	d015      	beq.n	8002656 <LCD_InitHard+0x66>
	{
		//SPFD5420_InitHard();
	}
	else
	{
		if (RA8875_ReadID() == 0x75)
 800262a:	f7fe ff1e 	bl	800146a <RA8875_ReadID>
 800262e:	4603      	mov	r3, r0
 8002630:	2b75      	cmp	r3, #117	; 0x75
 8002632:	d105      	bne.n	8002640 <LCD_InitHard+0x50>
		{
			//UART1_Transmit_String("LCD Controller is RA8875 or compatible\r\n");
			g_ChipID = IC_8875;
 8002634:	4b0d      	ldr	r3, [pc, #52]	; (800266c <LCD_InitHard+0x7c>)
 8002636:	2275      	movs	r2, #117	; 0x75
 8002638:	801a      	strh	r2, [r3, #0]
			RA8875_InitHard();
 800263a:	f7fe ff4b 	bl	80014d4 <RA8875_InitHard>
 800263e:	e00a      	b.n	8002656 <LCD_InitHard+0x66>
		}
		else
		{
			g_ChipID = IC_4001;
 8002640:	4b0a      	ldr	r3, [pc, #40]	; (800266c <LCD_InitHard+0x7c>)
 8002642:	f244 0201 	movw	r2, #16385	; 0x4001
 8002646:	801a      	strh	r2, [r3, #0]
			g_LcdHeight = LCD_30_HEIGHT;
 8002648:	4b09      	ldr	r3, [pc, #36]	; (8002670 <LCD_InitHard+0x80>)
 800264a:	22f0      	movs	r2, #240	; 0xf0
 800264c:	801a      	strh	r2, [r3, #0]
			g_LcdWidth = LCD_30_WIDTH;
 800264e:	4b09      	ldr	r3, [pc, #36]	; (8002674 <LCD_InitHard+0x84>)
 8002650:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002654:	801a      	strh	r2, [r3, #0]
		}
	}
	LCD_ClrScr(CL_BLUE);
 8002656:	201f      	movs	r0, #31
 8002658:	f000 f8d2 	bl	8002800 <LCD_ClrScr>
	LCD_SetBackLight(BRIGHT_DEFAULT);
 800265c:	20c8      	movs	r0, #200	; 0xc8
 800265e:	f000 f8e9 	bl	8002834 <LCD_SetBackLight>
}
 8002662:	bf00      	nop
 8002664:	3708      	adds	r7, #8
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	20000008 	.word	0x20000008
 8002670:	2000000a 	.word	0x2000000a
 8002674:	2000000c 	.word	0x2000000c

08002678 <LCD_CtrlLinesConfig>:


static void LCD_CtrlLinesConfig(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b08a      	sub	sp, #40	; 0x28
 800267c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	__HAL_RCC_FSMC_CLK_ENABLE();
 800267e:	2300      	movs	r3, #0
 8002680:	613b      	str	r3, [r7, #16]
 8002682:	4b35      	ldr	r3, [pc, #212]	; (8002758 <LCD_CtrlLinesConfig+0xe0>)
 8002684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002686:	4a34      	ldr	r2, [pc, #208]	; (8002758 <LCD_CtrlLinesConfig+0xe0>)
 8002688:	f043 0301 	orr.w	r3, r3, #1
 800268c:	6393      	str	r3, [r2, #56]	; 0x38
 800268e:	4b32      	ldr	r3, [pc, #200]	; (8002758 <LCD_CtrlLinesConfig+0xe0>)
 8002690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002692:	f003 0301 	and.w	r3, r3, #1
 8002696:	613b      	str	r3, [r7, #16]
 8002698:	693b      	ldr	r3, [r7, #16]

	__HAL_RCC_GPIOD_CLK_ENABLE();
 800269a:	2300      	movs	r3, #0
 800269c:	60fb      	str	r3, [r7, #12]
 800269e:	4b2e      	ldr	r3, [pc, #184]	; (8002758 <LCD_CtrlLinesConfig+0xe0>)
 80026a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a2:	4a2d      	ldr	r2, [pc, #180]	; (8002758 <LCD_CtrlLinesConfig+0xe0>)
 80026a4:	f043 0308 	orr.w	r3, r3, #8
 80026a8:	6313      	str	r3, [r2, #48]	; 0x30
 80026aa:	4b2b      	ldr	r3, [pc, #172]	; (8002758 <LCD_CtrlLinesConfig+0xe0>)
 80026ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ae:	f003 0308 	and.w	r3, r3, #8
 80026b2:	60fb      	str	r3, [r7, #12]
 80026b4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80026b6:	2300      	movs	r3, #0
 80026b8:	60bb      	str	r3, [r7, #8]
 80026ba:	4b27      	ldr	r3, [pc, #156]	; (8002758 <LCD_CtrlLinesConfig+0xe0>)
 80026bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026be:	4a26      	ldr	r2, [pc, #152]	; (8002758 <LCD_CtrlLinesConfig+0xe0>)
 80026c0:	f043 0310 	orr.w	r3, r3, #16
 80026c4:	6313      	str	r3, [r2, #48]	; 0x30
 80026c6:	4b24      	ldr	r3, [pc, #144]	; (8002758 <LCD_CtrlLinesConfig+0xe0>)
 80026c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ca:	f003 0310 	and.w	r3, r3, #16
 80026ce:	60bb      	str	r3, [r7, #8]
 80026d0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 80026d2:	2300      	movs	r3, #0
 80026d4:	607b      	str	r3, [r7, #4]
 80026d6:	4b20      	ldr	r3, [pc, #128]	; (8002758 <LCD_CtrlLinesConfig+0xe0>)
 80026d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026da:	4a1f      	ldr	r2, [pc, #124]	; (8002758 <LCD_CtrlLinesConfig+0xe0>)
 80026dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80026e0:	6313      	str	r3, [r2, #48]	; 0x30
 80026e2:	4b1d      	ldr	r3, [pc, #116]	; (8002758 <LCD_CtrlLinesConfig+0xe0>)
 80026e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026ea:	607b      	str	r3, [r7, #4]
 80026ec:	687b      	ldr	r3, [r7, #4]

	GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 |
 80026ee:	f24c 7333 	movw	r3, #50995	; 0xc733
 80026f2:	617b      	str	r3, [r7, #20]
		                     GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
		                     GPIO_PIN_15;
	GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80026f4:	2302      	movs	r3, #2
 80026f6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026f8:	2303      	movs	r3, #3
 80026fa:	623b      	str	r3, [r7, #32]
	GPIO_InitStructure.Pull = GPIO_NOPULL;
 80026fc:	2300      	movs	r3, #0
 80026fe:	61fb      	str	r3, [r7, #28]
	GPIO_InitStructure.Alternate = GPIO_AF12_FSMC;
 8002700:	230c      	movs	r3, #12
 8002702:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOD,&GPIO_InitStructure);
 8002704:	f107 0314 	add.w	r3, r7, #20
 8002708:	4619      	mov	r1, r3
 800270a:	4814      	ldr	r0, [pc, #80]	; (800275c <LCD_CtrlLinesConfig+0xe4>)
 800270c:	f000 fe90 	bl	8003430 <HAL_GPIO_Init>

	GPIO_InitStructure.Pin = GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 |
 8002710:	f64f 73b0 	movw	r3, #65456	; 0xffb0
 8002714:	617b      	str	r3, [r7, #20]
		                     GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |
							 GPIO_PIN_15;
	HAL_GPIO_Init(GPIOE,&GPIO_InitStructure);
 8002716:	f107 0314 	add.w	r3, r7, #20
 800271a:	4619      	mov	r1, r3
 800271c:	4810      	ldr	r0, [pc, #64]	; (8002760 <LCD_CtrlLinesConfig+0xe8>)
 800271e:	f000 fe87 	bl	8003430 <HAL_GPIO_Init>

	GPIO_InitStructure.Pin = GPIO_PIN_13;
 8002722:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002726:	617b      	str	r3, [r7, #20]
	GPIO_InitStructure.Alternate = GPIO_AF12_FSMC;
 8002728:	230c      	movs	r3, #12
 800272a:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOD,&GPIO_InitStructure);
 800272c:	f107 0314 	add.w	r3, r7, #20
 8002730:	4619      	mov	r1, r3
 8002732:	480a      	ldr	r0, [pc, #40]	; (800275c <LCD_CtrlLinesConfig+0xe4>)
 8002734:	f000 fe7c 	bl	8003430 <HAL_GPIO_Init>

	GPIO_InitStructure.Pin = GPIO_PIN_12;
 8002738:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800273c:	617b      	str	r3, [r7, #20]
	GPIO_InitStructure.Alternate = GPIO_AF12_FSMC;
 800273e:	230c      	movs	r3, #12
 8002740:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOG,&GPIO_InitStructure);
 8002742:	f107 0314 	add.w	r3, r7, #20
 8002746:	4619      	mov	r1, r3
 8002748:	4806      	ldr	r0, [pc, #24]	; (8002764 <LCD_CtrlLinesConfig+0xec>)
 800274a:	f000 fe71 	bl	8003430 <HAL_GPIO_Init>
}
 800274e:	bf00      	nop
 8002750:	3728      	adds	r7, #40	; 0x28
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	40023800 	.word	0x40023800
 800275c:	40020c00 	.word	0x40020c00
 8002760:	40021000 	.word	0x40021000
 8002764:	40021800 	.word	0x40021800

08002768 <LCD_FSMCConfig>:

static void LCD_FSMCConfig(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b0a2      	sub	sp, #136	; 0x88
 800276c:	af00      	add	r7, sp, #0
	//FSMC_NORSRAM_InitTypeDef  init;
	SRAM_HandleTypeDef hsram;
	FSMC_NORSRAM_TimingTypeDef  timingWrite;
	FSMC_NORSRAM_TimingTypeDef  timingRead;

	timingWrite.AddressSetupTime = 4;
 800276e:	2304      	movs	r3, #4
 8002770:	61fb      	str	r3, [r7, #28]
	timingWrite.AddressHoldTime = 0;
 8002772:	2300      	movs	r3, #0
 8002774:	623b      	str	r3, [r7, #32]
	timingWrite.DataSetupTime = 6;
 8002776:	2306      	movs	r3, #6
 8002778:	627b      	str	r3, [r7, #36]	; 0x24
	timingWrite.BusTurnAroundDuration = 1;
 800277a:	2301      	movs	r3, #1
 800277c:	62bb      	str	r3, [r7, #40]	; 0x28
	timingWrite.CLKDivision = 0;
 800277e:	2300      	movs	r3, #0
 8002780:	62fb      	str	r3, [r7, #44]	; 0x2c
	timingWrite.DataLatency = 0;
 8002782:	2300      	movs	r3, #0
 8002784:	633b      	str	r3, [r7, #48]	; 0x30
	timingWrite.AccessMode = FSMC_ACCESS_MODE_A;
 8002786:	2300      	movs	r3, #0
 8002788:	637b      	str	r3, [r7, #52]	; 0x34

	timingRead.AddressSetupTime = 4;
 800278a:	2304      	movs	r3, #4
 800278c:	603b      	str	r3, [r7, #0]
	timingRead.AddressHoldTime = 0;
 800278e:	2300      	movs	r3, #0
 8002790:	607b      	str	r3, [r7, #4]
	timingRead.DataSetupTime = 8;
 8002792:	2308      	movs	r3, #8
 8002794:	60bb      	str	r3, [r7, #8]
	timingRead.BusTurnAroundDuration = 0;
 8002796:	2300      	movs	r3, #0
 8002798:	60fb      	str	r3, [r7, #12]
	timingRead.CLKDivision = 0;
 800279a:	2300      	movs	r3, #0
 800279c:	613b      	str	r3, [r7, #16]
	timingRead.DataLatency = 0;
 800279e:	2300      	movs	r3, #0
 80027a0:	617b      	str	r3, [r7, #20]
	timingRead.AccessMode = FSMC_ACCESS_MODE_A;
 80027a2:	2300      	movs	r3, #0
 80027a4:	61bb      	str	r3, [r7, #24]

	hsram.Instance = FSMC_NORSRAM_DEVICE;
 80027a6:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 80027aa:	63bb      	str	r3, [r7, #56]	; 0x38
	hsram.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80027ac:	4b13      	ldr	r3, [pc, #76]	; (80027fc <LCD_FSMCConfig+0x94>)
 80027ae:	63fb      	str	r3, [r7, #60]	; 0x3c
	hsram.Init.NSBank = FSMC_NORSRAM_BANK4;
 80027b0:	2306      	movs	r3, #6
 80027b2:	643b      	str	r3, [r7, #64]	; 0x40
	hsram.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80027b4:	2300      	movs	r3, #0
 80027b6:	647b      	str	r3, [r7, #68]	; 0x44
	hsram.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80027b8:	2310      	movs	r3, #16
 80027ba:	64fb      	str	r3, [r7, #76]	; 0x4c
	hsram.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80027bc:	2300      	movs	r3, #0
 80027be:	653b      	str	r3, [r7, #80]	; 0x50
	hsram.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80027c0:	2300      	movs	r3, #0
 80027c2:	66fb      	str	r3, [r7, #108]	; 0x6c
	hsram.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80027c4:	2300      	movs	r3, #0
 80027c6:	657b      	str	r3, [r7, #84]	; 0x54
	hsram.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80027c8:	2300      	movs	r3, #0
 80027ca:	65bb      	str	r3, [r7, #88]	; 0x58
	hsram.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80027cc:	2300      	movs	r3, #0
 80027ce:	65fb      	str	r3, [r7, #92]	; 0x5c
	hsram.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80027d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027d4:	663b      	str	r3, [r7, #96]	; 0x60
	hsram.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80027d6:	2300      	movs	r3, #0
 80027d8:	667b      	str	r3, [r7, #100]	; 0x64
	hsram.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 80027da:	2300      	movs	r3, #0
 80027dc:	66bb      	str	r3, [r7, #104]	; 0x68
	hsram.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80027de:	2300      	movs	r3, #0
 80027e0:	673b      	str	r3, [r7, #112]	; 0x70
	//hsram.Init.ContinuousClock = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY; /* 새로운 파라미터 */

	HAL_SRAM_Init(&hsram, &timingRead, &timingWrite);
 80027e2:	f107 021c 	add.w	r2, r7, #28
 80027e6:	4639      	mov	r1, r7
 80027e8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80027ec:	4618      	mov	r0, r3
 80027ee:	f7fe f8e1 	bl	80009b4 <HAL_SRAM_Init>
}
 80027f2:	bf00      	nop
 80027f4:	3788      	adds	r7, #136	; 0x88
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	a0000104 	.word	0xa0000104

08002800 <LCD_ClrScr>:
*********************************************************************************************************
*	Func name: LCD_ClrScr
*********************************************************************************************************
*/
void LCD_ClrScr(uint16_t _usColor)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b082      	sub	sp, #8
 8002804:	af00      	add	r7, sp, #0
 8002806:	4603      	mov	r3, r0
 8002808:	80fb      	strh	r3, [r7, #6]
	if (g_ChipID == IC_8875)	/* RA8875 ·ÖÖ§ */
 800280a:	4b08      	ldr	r3, [pc, #32]	; (800282c <LCD_ClrScr+0x2c>)
 800280c:	881b      	ldrh	r3, [r3, #0]
 800280e:	2b75      	cmp	r3, #117	; 0x75
 8002810:	d104      	bne.n	800281c <LCD_ClrScr+0x1c>
	{
		//UART1_Transmit_String("LCD Controller is RA8875 color\r\n");
		RA8875_ClrScr(_usColor);
 8002812:	88fb      	ldrh	r3, [r7, #6]
 8002814:	4618      	mov	r0, r3
 8002816:	f7fe ffcf 	bl	80017b8 <RA8875_ClrScr>
	else	/* 5420£¬4001£¬61509 ·ÖÖ§ */
	{
		UART1_Transmit_String("LCD Controller is SFD5420 color\r\n");
		//SPFD5420_ClrScr(_usColor);
	}
}
 800281a:	e002      	b.n	8002822 <LCD_ClrScr+0x22>
		UART1_Transmit_String("LCD Controller is SFD5420 color\r\n");
 800281c:	4804      	ldr	r0, [pc, #16]	; (8002830 <LCD_ClrScr+0x30>)
 800281e:	f000 fc35 	bl	800308c <UART1_Transmit_String>
}
 8002822:	bf00      	nop
 8002824:	3708      	adds	r7, #8
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	20000008 	.word	0x20000008
 8002830:	08004158 	.word	0x08004158

08002834 <LCD_SetBackLight>:
*********************************************************************************************************
* 	Func name: LCD_SetBackLight
*********************************************************************************************************
*/
void LCD_SetBackLight(uint8_t _bright)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b082      	sub	sp, #8
 8002838:	af00      	add	r7, sp, #0
 800283a:	4603      	mov	r3, r0
 800283c:	71fb      	strb	r3, [r7, #7]
	s_ucBright =  _bright;	/* ±£´æ±³¹âÖµ */
 800283e:	4a07      	ldr	r2, [pc, #28]	; (800285c <LCD_SetBackLight+0x28>)
 8002840:	79fb      	ldrb	r3, [r7, #7]
 8002842:	7013      	strb	r3, [r2, #0]

	if (g_ChipID == IC_8875)
 8002844:	4b06      	ldr	r3, [pc, #24]	; (8002860 <LCD_SetBackLight+0x2c>)
 8002846:	881b      	ldrh	r3, [r3, #0]
 8002848:	2b75      	cmp	r3, #117	; 0x75
 800284a:	d103      	bne.n	8002854 <LCD_SetBackLight+0x20>
	{
		RA8875_SetBackLight(_bright);
 800284c:	79fb      	ldrb	r3, [r7, #7]
 800284e:	4618      	mov	r0, r3
 8002850:	f7ff f928 	bl	8001aa4 <RA8875_SetBackLight>
	}
	else
	{
		//SPFD5420_SetBackLight(_bright);
	}
}
 8002854:	bf00      	nop
 8002856:	3708      	adds	r7, #8
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}
 800285c:	20000131 	.word	0x20000131
 8002860:	20000008 	.word	0x20000008

08002864 <LCD_DrawBMP>:
*********************************************************************************************************
*	Func name: LCD_DrawBMP
*********************************************************************************************************
*/
void LCD_DrawBMP(uint16_t _usX, uint16_t _usY, uint16_t _usHeight, uint16_t _usWidth, uint16_t *_ptr)
{
 8002864:	b590      	push	{r4, r7, lr}
 8002866:	b085      	sub	sp, #20
 8002868:	af02      	add	r7, sp, #8
 800286a:	4604      	mov	r4, r0
 800286c:	4608      	mov	r0, r1
 800286e:	4611      	mov	r1, r2
 8002870:	461a      	mov	r2, r3
 8002872:	4623      	mov	r3, r4
 8002874:	80fb      	strh	r3, [r7, #6]
 8002876:	4603      	mov	r3, r0
 8002878:	80bb      	strh	r3, [r7, #4]
 800287a:	460b      	mov	r3, r1
 800287c:	807b      	strh	r3, [r7, #2]
 800287e:	4613      	mov	r3, r2
 8002880:	803b      	strh	r3, [r7, #0]
	if (g_ChipID == IC_8875)
 8002882:	4b08      	ldr	r3, [pc, #32]	; (80028a4 <LCD_DrawBMP+0x40>)
 8002884:	881b      	ldrh	r3, [r3, #0]
 8002886:	2b75      	cmp	r3, #117	; 0x75
 8002888:	d108      	bne.n	800289c <LCD_DrawBMP+0x38>
	{
		RA8875_DrawBMP(_usX, _usY, _usHeight, _usWidth, _ptr);
 800288a:	883c      	ldrh	r4, [r7, #0]
 800288c:	887a      	ldrh	r2, [r7, #2]
 800288e:	88b9      	ldrh	r1, [r7, #4]
 8002890:	88f8      	ldrh	r0, [r7, #6]
 8002892:	69bb      	ldr	r3, [r7, #24]
 8002894:	9300      	str	r3, [sp, #0]
 8002896:	4623      	mov	r3, r4
 8002898:	f7ff f882 	bl	80019a0 <RA8875_DrawBMP>
	}
	else
	{
		//SPFD5420_DrawBMP(_usX, _usY, _usHeight, _usWidth, _ptr);
	}
}
 800289c:	bf00      	nop
 800289e:	370c      	adds	r7, #12
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd90      	pop	{r4, r7, pc}
 80028a4:	20000008 	.word	0x20000008

080028a8 <LCD_DispStr>:
*********************************************************************************************************
*	Func name: LCD_DispStr
*********************************************************************************************************
*/
void LCD_DispStr(uint16_t _usX, uint16_t _usY, char *_ptr, FONT_T *_tFont)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b09e      	sub	sp, #120	; 0x78
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	60ba      	str	r2, [r7, #8]
 80028b0:	607b      	str	r3, [r7, #4]
 80028b2:	4603      	mov	r3, r0
 80028b4:	81fb      	strh	r3, [r7, #14]
 80028b6:	460b      	mov	r3, r1
 80028b8:	81bb      	strh	r3, [r7, #12]
#ifdef USE_SMALL_FONT
	const uint8_t *pHzDot;
#else
	uint32_t AddrHZK;
#endif
	if (_tFont->FontCode == FC_ST_12)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	881b      	ldrh	r3, [r3, #0]
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d10e      	bne.n	80028e0 <LCD_DispStr+0x38>
	{
		font_height = 12;
 80028c2:	230c      	movs	r3, #12
 80028c4:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
		font_width = 12;
 80028c8:	230c      	movs	r3, #12
 80028ca:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
		font_bytes = 24;
 80028ce:	2318      	movs	r3, #24
 80028d0:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
		pAscDot = g_Ascii12;
 80028d4:	4b83      	ldr	r3, [pc, #524]	; (8002ae4 <LCD_DispStr+0x23c>)
 80028d6:	663b      	str	r3, [r7, #96]	; 0x60

		#ifdef USE_SMALL_FONT
			pHzDot = g_Hz12;
		#else
			AddrHZK = HZK12_ADDR;
 80028d8:	f04f 43c8 	mov.w	r3, #1677721600	; 0x64000000
 80028dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80028de:	e0f5      	b.n	8002acc <LCD_DispStr+0x224>
		#endif
		}
		else
		{
			font_height = 16;
 80028e0:	2310      	movs	r3, #16
 80028e2:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
			font_width = 16;
 80028e6:	2310      	movs	r3, #16
 80028e8:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
			font_bytes = 32;
 80028ec:	2320      	movs	r3, #32
 80028ee:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
			pAscDot = g_Ascii16;
 80028f2:	4b7d      	ldr	r3, [pc, #500]	; (8002ae8 <LCD_DispStr+0x240>)
 80028f4:	663b      	str	r3, [r7, #96]	; 0x60

		#ifdef USE_SMALL_FONT
			pHzDot = g_Hz16;
		#else
			AddrHZK = HZK16_ADDR;
 80028f6:	4b7d      	ldr	r3, [pc, #500]	; (8002aec <LCD_DispStr+0x244>)
 80028f8:	65fb      	str	r3, [r7, #92]	; 0x5c
		#endif
		}

		while (*_ptr != 0)
 80028fa:	e0e7      	b.n	8002acc <LCD_DispStr+0x224>
		{
			code1 = *_ptr;
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			if (code1 < 0x80)
 8002904:	f997 305b 	ldrsb.w	r3, [r7, #91]	; 0x5b
 8002908:	2b00      	cmp	r3, #0
 800290a:	db1a      	blt.n	8002942 <LCD_DispStr+0x9a>
			{
				memcpy(buf, &pAscDot[code1 * (font_bytes / 2)], (font_bytes / 2));
 800290c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8002910:	f897 2069 	ldrb.w	r2, [r7, #105]	; 0x69
 8002914:	0852      	lsrs	r2, r2, #1
 8002916:	b2d2      	uxtb	r2, r2
 8002918:	fb02 f303 	mul.w	r3, r2, r3
 800291c:	461a      	mov	r2, r3
 800291e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002920:	1899      	adds	r1, r3, r2
 8002922:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 8002926:	085b      	lsrs	r3, r3, #1
 8002928:	b2db      	uxtb	r3, r3
 800292a:	461a      	mov	r2, r3
 800292c:	f107 0310 	add.w	r3, r7, #16
 8002930:	4618      	mov	r0, r3
 8002932:	f001 fbcf 	bl	80040d4 <memcpy>
				width = font_width / 2;
 8002936:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800293a:	085b      	lsrs	r3, r3, #1
 800293c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8002940:	e056      	b.n	80029f0 <LCD_DispStr+0x148>
			}
			else
			{
				code2 = *++_ptr;
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	3301      	adds	r3, #1
 8002946:	60bb      	str	r3, [r7, #8]
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
				if (code2 == 0)
 8002950:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8002954:	2b00      	cmp	r3, #0
 8002956:	f000 80bf 	beq.w	8002ad8 <LCD_DispStr+0x230>
							break;
						}
					}
				#else	/* ÓÃÈ«×Ö¿â */
					/* ´Ë´¦ÐèÒª¸ù¾Ý×Ö¿âÎÄ¼þ´æ·ÅÎ»ÖÃ½øÐÐÐÞ¸Ä */
					if (code1 >=0xA1 && code1 <= 0xA9 && code2 >=0xA1)
 800295a:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800295e:	2ba0      	cmp	r3, #160	; 0xa0
 8002960:	d91a      	bls.n	8002998 <LCD_DispStr+0xf0>
 8002962:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8002966:	2ba9      	cmp	r3, #169	; 0xa9
 8002968:	d816      	bhi.n	8002998 <LCD_DispStr+0xf0>
 800296a:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800296e:	2ba0      	cmp	r3, #160	; 0xa0
 8002970:	d912      	bls.n	8002998 <LCD_DispStr+0xf0>
					{
						address = ((code1 - 0xA1) * 94 + (code2 - 0xA1)) * font_bytes + AddrHZK;
 8002972:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8002976:	3ba1      	subs	r3, #161	; 0xa1
 8002978:	225e      	movs	r2, #94	; 0x5e
 800297a:	fb03 f202 	mul.w	r2, r3, r2
 800297e:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8002982:	3ba1      	subs	r3, #161	; 0xa1
 8002984:	4413      	add	r3, r2
 8002986:	f897 2069 	ldrb.w	r2, [r7, #105]	; 0x69
 800298a:	fb02 f303 	mul.w	r3, r2, r3
 800298e:	461a      	mov	r2, r3
 8002990:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002992:	4413      	add	r3, r2
 8002994:	673b      	str	r3, [r7, #112]	; 0x70
 8002996:	e01f      	b.n	80029d8 <LCD_DispStr+0x130>
					}
					else if (code1 >=0xB0 && code1 <= 0xF7 && code2 >=0xA1)
 8002998:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800299c:	2baf      	cmp	r3, #175	; 0xaf
 800299e:	d91b      	bls.n	80029d8 <LCD_DispStr+0x130>
 80029a0:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80029a4:	2bf7      	cmp	r3, #247	; 0xf7
 80029a6:	d817      	bhi.n	80029d8 <LCD_DispStr+0x130>
 80029a8:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 80029ac:	2ba0      	cmp	r3, #160	; 0xa0
 80029ae:	d913      	bls.n	80029d8 <LCD_DispStr+0x130>
					{
						address = ((code1 - 0xB0) * 94 + (code2 - 0xA1) + 846) * font_bytes + AddrHZK;
 80029b0:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80029b4:	3bb0      	subs	r3, #176	; 0xb0
 80029b6:	225e      	movs	r2, #94	; 0x5e
 80029b8:	fb03 f202 	mul.w	r2, r3, r2
 80029bc:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 80029c0:	3ba1      	subs	r3, #161	; 0xa1
 80029c2:	4413      	add	r3, r2
 80029c4:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80029c8:	f897 2069 	ldrb.w	r2, [r7, #105]	; 0x69
 80029cc:	fb02 f303 	mul.w	r3, r2, r3
 80029d0:	461a      	mov	r2, r3
 80029d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029d4:	4413      	add	r3, r2
 80029d6:	673b      	str	r3, [r7, #112]	; 0x70
					}
					memcpy(buf, (const uint8_t *)address, font_bytes);
 80029d8:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80029da:	f897 2069 	ldrb.w	r2, [r7, #105]	; 0x69
 80029de:	f107 0310 	add.w	r3, r7, #16
 80029e2:	4618      	mov	r0, r3
 80029e4:	f001 fb76 	bl	80040d4 <memcpy>
				#endif
					width = font_width;
 80029e8:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80029ec:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			}
			y = _usY;
 80029f0:	89bb      	ldrh	r3, [r7, #12]
 80029f2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
			/* ¿ªÊ¼Ë¢LCD */
			for (m = 0; m < font_height; m++)	/* ×Ö·û¸ß¶È */
 80029f6:	2300      	movs	r3, #0
 80029f8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 80029fc:	e052      	b.n	8002aa4 <LCD_DispStr+0x1fc>
			{
				x = _usX;
 80029fe:	89fb      	ldrh	r3, [r7, #14]
 8002a00:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
				for (i = 0; i < width; i++)	/* ×Ö·û¿í¶È */
 8002a04:	2300      	movs	r3, #0
 8002a06:	677b      	str	r3, [r7, #116]	; 0x74
 8002a08:	e03d      	b.n	8002a86 <LCD_DispStr+0x1de>
				{
					if ((buf[m * ((2 * width) / font_width) + i / 8] & (0x80 >> (i % 8 ))) != 0x00)
 8002a0a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8002a0e:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8002a12:	0051      	lsls	r1, r2, #1
 8002a14:	f897 206b 	ldrb.w	r2, [r7, #107]	; 0x6b
 8002a18:	fb91 f2f2 	sdiv	r2, r1, r2
 8002a1c:	fb02 f303 	mul.w	r3, r2, r3
 8002a20:	461a      	mov	r2, r3
 8002a22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a24:	08db      	lsrs	r3, r3, #3
 8002a26:	4413      	add	r3, r2
 8002a28:	3378      	adds	r3, #120	; 0x78
 8002a2a:	443b      	add	r3, r7
 8002a2c:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8002a30:	4619      	mov	r1, r3
 8002a32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a34:	f003 0307 	and.w	r3, r3, #7
 8002a38:	2280      	movs	r2, #128	; 0x80
 8002a3a:	fa42 f303 	asr.w	r3, r2, r3
 8002a3e:	400b      	ands	r3, r1
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d009      	beq.n	8002a58 <LCD_DispStr+0x1b0>
					{
						LCD_PutPixel(x, y, _tFont->FrontColor);	/* ÉèÖÃÏñËØÑÕÉ«ÎªÎÄ×ÖÉ« */
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	885a      	ldrh	r2, [r3, #2]
 8002a48:	f8b7 1064 	ldrh.w	r1, [r7, #100]	; 0x64
 8002a4c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8002a50:	4618      	mov	r0, r3
 8002a52:	f000 f84d 	bl	8002af0 <LCD_PutPixel>
 8002a56:	e00e      	b.n	8002a76 <LCD_DispStr+0x1ce>
					}
					else
					{
						if (_tFont->BackColor != CL_MASK)	/* Í¸Ã÷É« */
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	889b      	ldrh	r3, [r3, #4]
 8002a5c:	f649 1299 	movw	r2, #39321	; 0x9999
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d008      	beq.n	8002a76 <LCD_DispStr+0x1ce>
						{
							LCD_PutPixel(x, y, _tFont->BackColor);	/* ÉèÖÃÏñËØÑÕÉ«ÎªÎÄ×Ö±³¾°É« */
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	889a      	ldrh	r2, [r3, #4]
 8002a68:	f8b7 1064 	ldrh.w	r1, [r7, #100]	; 0x64
 8002a6c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8002a70:	4618      	mov	r0, r3
 8002a72:	f000 f83d 	bl	8002af0 <LCD_PutPixel>
						}
					}
					x++;
 8002a76:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8002a7a:	3301      	adds	r3, #1
 8002a7c:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
				for (i = 0; i < width; i++)	/* ×Ö·û¿í¶È */
 8002a80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a82:	3301      	adds	r3, #1
 8002a84:	677b      	str	r3, [r7, #116]	; 0x74
 8002a86:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002a8a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d3bc      	bcc.n	8002a0a <LCD_DispStr+0x162>
				}
				y++;
 8002a90:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002a94:	3301      	adds	r3, #1
 8002a96:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
			for (m = 0; m < font_height; m++)	/* ×Ö·û¸ß¶È */
 8002a9a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8002a9e:	3301      	adds	r3, #1
 8002aa0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 8002aa4:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 8002aa8:	b29b      	uxth	r3, r3
 8002aaa:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d3a5      	bcc.n	80029fe <LCD_DispStr+0x156>

			if (_tFont->Space > 0)
			{
				/* Èç¹ûÎÄ×Öµ×É«°´_tFont->usBackColor£¬²¢ÇÒ×Ö¼ä¾à´óÓÚµãÕóµÄ¿í¶È£¬ÄÇÃ´ÐèÒªÔÚÎÄ×ÖÖ®¼äÌî³ä(ÔÝÊ±Î´ÊµÏÖ) */
			}
			_usX += width + _tFont->Space;	/* ÁÐµØÖ·µÝÔö */
 8002ab2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002ab6:	b29a      	uxth	r2, r3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	88db      	ldrh	r3, [r3, #6]
 8002abc:	4413      	add	r3, r2
 8002abe:	b29a      	uxth	r2, r3
 8002ac0:	89fb      	ldrh	r3, [r7, #14]
 8002ac2:	4413      	add	r3, r2
 8002ac4:	81fb      	strh	r3, [r7, #14]
			_ptr++;			/* Ö¸ÏòÏÂÒ»¸ö×Ö·û */
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	3301      	adds	r3, #1
 8002aca:	60bb      	str	r3, [r7, #8]
		while (*_ptr != 0)
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	781b      	ldrb	r3, [r3, #0]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	f47f af13 	bne.w	80028fc <LCD_DispStr+0x54>
		}
}
 8002ad6:	e000      	b.n	8002ada <LCD_DispStr+0x232>
					break;
 8002ad8:	bf00      	nop
}
 8002ada:	bf00      	nop
 8002adc:	3778      	adds	r7, #120	; 0x78
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	0800417c 	.word	0x0800417c
 8002ae8:	08004770 	.word	0x08004770
 8002aec:	6402c9d0 	.word	0x6402c9d0

08002af0 <LCD_PutPixel>:
*********************************************************************************************************
*	Func name: LCD_PutPixel
*********************************************************************************************************
*/
void LCD_PutPixel(uint16_t _usX, uint16_t _usY, uint16_t _usColor)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b082      	sub	sp, #8
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	4603      	mov	r3, r0
 8002af8:	80fb      	strh	r3, [r7, #6]
 8002afa:	460b      	mov	r3, r1
 8002afc:	80bb      	strh	r3, [r7, #4]
 8002afe:	4613      	mov	r3, r2
 8002b00:	807b      	strh	r3, [r7, #2]
	if (g_ChipID == IC_8875)
 8002b02:	4b07      	ldr	r3, [pc, #28]	; (8002b20 <LCD_PutPixel+0x30>)
 8002b04:	881b      	ldrh	r3, [r3, #0]
 8002b06:	2b75      	cmp	r3, #117	; 0x75
 8002b08:	d105      	bne.n	8002b16 <LCD_PutPixel+0x26>
	{
		RA8875_PutPixel(_usX, _usY, _usColor);
 8002b0a:	887a      	ldrh	r2, [r7, #2]
 8002b0c:	88b9      	ldrh	r1, [r7, #4]
 8002b0e:	88fb      	ldrh	r3, [r7, #6]
 8002b10:	4618      	mov	r0, r3
 8002b12:	f7fe fe79 	bl	8001808 <RA8875_PutPixel>
	}
	else
	{
		//SPFD5420_PutPixel(_usX, _usY, _usColor);
	}
}
 8002b16:	bf00      	nop
 8002b18:	3708      	adds	r7, #8
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	20000008 	.word	0x20000008

08002b24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b083      	sub	sp, #12
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	6039      	str	r1, [r7, #0]
 8002b2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	db0a      	blt.n	8002b4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	b2da      	uxtb	r2, r3
 8002b3c:	490c      	ldr	r1, [pc, #48]	; (8002b70 <__NVIC_SetPriority+0x4c>)
 8002b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b42:	0112      	lsls	r2, r2, #4
 8002b44:	b2d2      	uxtb	r2, r2
 8002b46:	440b      	add	r3, r1
 8002b48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b4c:	e00a      	b.n	8002b64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	b2da      	uxtb	r2, r3
 8002b52:	4908      	ldr	r1, [pc, #32]	; (8002b74 <__NVIC_SetPriority+0x50>)
 8002b54:	79fb      	ldrb	r3, [r7, #7]
 8002b56:	f003 030f 	and.w	r3, r3, #15
 8002b5a:	3b04      	subs	r3, #4
 8002b5c:	0112      	lsls	r2, r2, #4
 8002b5e:	b2d2      	uxtb	r2, r2
 8002b60:	440b      	add	r3, r1
 8002b62:	761a      	strb	r2, [r3, #24]
}
 8002b64:	bf00      	nop
 8002b66:	370c      	adds	r7, #12
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr
 8002b70:	e000e100 	.word	0xe000e100
 8002b74:	e000ed00 	.word	0xe000ed00

08002b78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b082      	sub	sp, #8
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	3b01      	subs	r3, #1
 8002b84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b88:	d301      	bcc.n	8002b8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e00f      	b.n	8002bae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b8e:	4a0a      	ldr	r2, [pc, #40]	; (8002bb8 <SysTick_Config+0x40>)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	3b01      	subs	r3, #1
 8002b94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b96:	210f      	movs	r1, #15
 8002b98:	f04f 30ff 	mov.w	r0, #4294967295
 8002b9c:	f7ff ffc2 	bl	8002b24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ba0:	4b05      	ldr	r3, [pc, #20]	; (8002bb8 <SysTick_Config+0x40>)
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ba6:	4b04      	ldr	r3, [pc, #16]	; (8002bb8 <SysTick_Config+0x40>)
 8002ba8:	2207      	movs	r2, #7
 8002baa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bac:	2300      	movs	r3, #0
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3708      	adds	r7, #8
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	e000e010 	.word	0xe000e010

08002bbc <bsp_InitTimer>:
*********************************************************************************************************
*	Func name: bsp_InitTimer
*********************************************************************************************************
*/
void bsp_InitTimer(void)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b082      	sub	sp, #8
 8002bc0:	af00      	add	r7, sp, #0
	uint8_t i;

	for (i = 0; i < TMR_COUNT; i++)
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	71fb      	strb	r3, [r7, #7]
 8002bc6:	e029      	b.n	8002c1c <bsp_InitTimer+0x60>
	{
		s_tTmr[i].Count = 0;
 8002bc8:	79fa      	ldrb	r2, [r7, #7]
 8002bca:	491c      	ldr	r1, [pc, #112]	; (8002c3c <bsp_InitTimer+0x80>)
 8002bcc:	4613      	mov	r3, r2
 8002bce:	005b      	lsls	r3, r3, #1
 8002bd0:	4413      	add	r3, r2
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	440b      	add	r3, r1
 8002bd6:	3304      	adds	r3, #4
 8002bd8:	2200      	movs	r2, #0
 8002bda:	601a      	str	r2, [r3, #0]
		s_tTmr[i].PreLoad = 0;
 8002bdc:	79fa      	ldrb	r2, [r7, #7]
 8002bde:	4917      	ldr	r1, [pc, #92]	; (8002c3c <bsp_InitTimer+0x80>)
 8002be0:	4613      	mov	r3, r2
 8002be2:	005b      	lsls	r3, r3, #1
 8002be4:	4413      	add	r3, r2
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	440b      	add	r3, r1
 8002bea:	3308      	adds	r3, #8
 8002bec:	2200      	movs	r2, #0
 8002bee:	601a      	str	r2, [r3, #0]
		s_tTmr[i].Flag = 0;
 8002bf0:	79fa      	ldrb	r2, [r7, #7]
 8002bf2:	4912      	ldr	r1, [pc, #72]	; (8002c3c <bsp_InitTimer+0x80>)
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	005b      	lsls	r3, r3, #1
 8002bf8:	4413      	add	r3, r2
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	440b      	add	r3, r1
 8002bfe:	3301      	adds	r3, #1
 8002c00:	2200      	movs	r2, #0
 8002c02:	701a      	strb	r2, [r3, #0]
		s_tTmr[i].Mode = TMR_ONCE_MODE;
 8002c04:	79fa      	ldrb	r2, [r7, #7]
 8002c06:	490d      	ldr	r1, [pc, #52]	; (8002c3c <bsp_InitTimer+0x80>)
 8002c08:	4613      	mov	r3, r2
 8002c0a:	005b      	lsls	r3, r3, #1
 8002c0c:	4413      	add	r3, r2
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	440b      	add	r3, r1
 8002c12:	2200      	movs	r2, #0
 8002c14:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TMR_COUNT; i++)
 8002c16:	79fb      	ldrb	r3, [r7, #7]
 8002c18:	3301      	adds	r3, #1
 8002c1a:	71fb      	strb	r3, [r7, #7]
 8002c1c:	79fb      	ldrb	r3, [r7, #7]
 8002c1e:	2b03      	cmp	r3, #3
 8002c20:	d9d2      	bls.n	8002bc8 <bsp_InitTimer+0xc>
	}
	SysTick_Config(SystemCoreClock / 1000);
 8002c22:	4b07      	ldr	r3, [pc, #28]	; (8002c40 <bsp_InitTimer+0x84>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a07      	ldr	r2, [pc, #28]	; (8002c44 <bsp_InitTimer+0x88>)
 8002c28:	fba2 2303 	umull	r2, r3, r2, r3
 8002c2c:	099b      	lsrs	r3, r3, #6
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f7ff ffa2 	bl	8002b78 <SysTick_Config>
}
 8002c34:	bf00      	nop
 8002c36:	3708      	adds	r7, #8
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	20000134 	.word	0x20000134
 8002c40:	20000000 	.word	0x20000000
 8002c44:	10624dd3 	.word	0x10624dd3

08002c48 <bsp_InitUart>:
*********************************************************************************************************
*	Func name: bsp_InitUart
*********************************************************************************************************
*/
void bsp_InitUart(void)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	af00      	add	r7, sp, #0
	UartVarInit();		/* ±ØÐëÏÈ³õÊ¼»¯È«¾Ö±äÁ¿,ÔÙÅäÖÃÓ²¼þ */
 8002c4c:	f000 f81e 	bl	8002c8c <UartVarInit>

	InitHardUart();		/* ÅäÖÃ´®¿ÚµÄÓ²¼þ²ÎÊý(²¨ÌØÂÊµÈ) */
 8002c50:	f000 f8f6 	bl	8002e40 <InitHardUart>

	ConfigUartNVIC();	/* ÅäÖÃ´®¿ÚÖÐ¶Ï */
 8002c54:	f000 f9d6 	bl	8003004 <ConfigUartNVIC>
}
 8002c58:	bf00      	nop
 8002c5a:	bd80      	pop	{r7, pc}

08002c5c <USART3_SendBefor>:
*********************************************************************************************************
*	Func name: USART3_SendBefor
*********************************************************************************************************
*/
void USART3_SendBefor(void)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	af00      	add	r7, sp, #0
	RS485_TX_EN();	/* ÇÐ»»RS485ÊÕ·¢Ð¾Æ¬Îª·¢ËÍÄ£Ê½ */
 8002c60:	2201      	movs	r2, #1
 8002c62:	2104      	movs	r1, #4
 8002c64:	4802      	ldr	r0, [pc, #8]	; (8002c70 <USART3_SendBefor+0x14>)
 8002c66:	f000 fd97 	bl	8003798 <HAL_GPIO_WritePin>
}
 8002c6a:	bf00      	nop
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	40020400 	.word	0x40020400

08002c74 <USART3_SendOver>:
*********************************************************************************************************
*	Func name: USART3_SendOver
*********************************************************************************************************
*/
void USART3_SendOver(void)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	af00      	add	r7, sp, #0
	RS485_RX_EN();	/* ÇÐ»»RS485ÊÕ·¢Ð¾Æ¬Îª½ÓÊÕÄ£Ê½ */
 8002c78:	2200      	movs	r2, #0
 8002c7a:	2104      	movs	r1, #4
 8002c7c:	4802      	ldr	r0, [pc, #8]	; (8002c88 <USART3_SendOver+0x14>)
 8002c7e:	f000 fd8b 	bl	8003798 <HAL_GPIO_WritePin>
}
 8002c82:	bf00      	nop
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	40020400 	.word	0x40020400

08002c8c <UartVarInit>:
*********************************************************************************************************
*	Func name: UartVarInit
*********************************************************************************************************
*/
static void UartVarInit(void)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	af00      	add	r7, sp, #0
#if UART1_FIFO_EN == 1
	g_tUart1.uart = USART1;						/* STM32 ´®¿ÚÉè±¸ */
 8002c90:	4b59      	ldr	r3, [pc, #356]	; (8002df8 <UartVarInit+0x16c>)
 8002c92:	4a5a      	ldr	r2, [pc, #360]	; (8002dfc <UartVarInit+0x170>)
 8002c94:	601a      	str	r2, [r3, #0]
	g_tUart1.pTxBuf = g_TxBuf1;					/* ·¢ËÍ»º³åÇøÖ¸Õë */
 8002c96:	4b58      	ldr	r3, [pc, #352]	; (8002df8 <UartVarInit+0x16c>)
 8002c98:	4a59      	ldr	r2, [pc, #356]	; (8002e00 <UartVarInit+0x174>)
 8002c9a:	605a      	str	r2, [r3, #4]
	g_tUart1.pRxBuf = g_RxBuf1;					/* ½ÓÊÕ»º³åÇøÖ¸Õë */
 8002c9c:	4b56      	ldr	r3, [pc, #344]	; (8002df8 <UartVarInit+0x16c>)
 8002c9e:	4a59      	ldr	r2, [pc, #356]	; (8002e04 <UartVarInit+0x178>)
 8002ca0:	609a      	str	r2, [r3, #8]
	g_tUart1.usTxBufSize = UART1_TX_BUF_SIZE;	/* ·¢ËÍ»º³åÇø´óÐ¡ */
 8002ca2:	4b55      	ldr	r3, [pc, #340]	; (8002df8 <UartVarInit+0x16c>)
 8002ca4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ca8:	819a      	strh	r2, [r3, #12]
	g_tUart1.usRxBufSize = UART1_RX_BUF_SIZE;	/* ½ÓÊÕ»º³åÇø´óÐ¡ */
 8002caa:	4b53      	ldr	r3, [pc, #332]	; (8002df8 <UartVarInit+0x16c>)
 8002cac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002cb0:	81da      	strh	r2, [r3, #14]
	g_tUart1.usTxWrite = 0;						/* ·¢ËÍFIFOÐ´Ë÷Òý */
 8002cb2:	4b51      	ldr	r3, [pc, #324]	; (8002df8 <UartVarInit+0x16c>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	821a      	strh	r2, [r3, #16]
	g_tUart1.usTxRead = 0;						/* ·¢ËÍFIFO¶ÁË÷Òý */
 8002cb8:	4b4f      	ldr	r3, [pc, #316]	; (8002df8 <UartVarInit+0x16c>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	825a      	strh	r2, [r3, #18]
	g_tUart1.usRxWrite = 0;						/* ½ÓÊÕFIFOÐ´Ë÷Òý */
 8002cbe:	4b4e      	ldr	r3, [pc, #312]	; (8002df8 <UartVarInit+0x16c>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	82da      	strh	r2, [r3, #22]
	g_tUart1.usRxRead = 0;						/* ½ÓÊÕFIFO¶ÁË÷Òý */
 8002cc4:	4b4c      	ldr	r3, [pc, #304]	; (8002df8 <UartVarInit+0x16c>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	831a      	strh	r2, [r3, #24]
	g_tUart1.usRxCount = 0;						/* ½ÓÊÕµ½µÄÐÂÊý¾Ý¸öÊý */
 8002cca:	4b4b      	ldr	r3, [pc, #300]	; (8002df8 <UartVarInit+0x16c>)
 8002ccc:	2200      	movs	r2, #0
 8002cce:	835a      	strh	r2, [r3, #26]
	g_tUart1.usTxCount = 0;						/* ´ý·¢ËÍµÄÊý¾Ý¸öÊý */
 8002cd0:	4b49      	ldr	r3, [pc, #292]	; (8002df8 <UartVarInit+0x16c>)
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	829a      	strh	r2, [r3, #20]
	g_tUart1.SendBefor = 0;						/* ·¢ËÍÊý¾ÝÇ°µÄ»Øµ÷º¯Êý */
 8002cd6:	4b48      	ldr	r3, [pc, #288]	; (8002df8 <UartVarInit+0x16c>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	61da      	str	r2, [r3, #28]
	g_tUart1.SendOver = 0;						/* ·¢ËÍÍê±ÏºóµÄ»Øµ÷º¯Êý */
 8002cdc:	4b46      	ldr	r3, [pc, #280]	; (8002df8 <UartVarInit+0x16c>)
 8002cde:	2200      	movs	r2, #0
 8002ce0:	621a      	str	r2, [r3, #32]
	g_tUart1.ReciveNew = 0;						/* ½ÓÊÕµ½ÐÂÊý¾ÝºóµÄ»Øµ÷º¯Êý */
 8002ce2:	4b45      	ldr	r3, [pc, #276]	; (8002df8 <UartVarInit+0x16c>)
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	625a      	str	r2, [r3, #36]	; 0x24
#endif

#if UART2_FIFO_EN == 1
	g_tUart2.uart = USART2;						/* STM32 ´®¿ÚÉè±¸ */
 8002ce8:	4b47      	ldr	r3, [pc, #284]	; (8002e08 <UartVarInit+0x17c>)
 8002cea:	4a48      	ldr	r2, [pc, #288]	; (8002e0c <UartVarInit+0x180>)
 8002cec:	601a      	str	r2, [r3, #0]
	g_tUart2.pTxBuf = g_TxBuf2;					/* ·¢ËÍ»º³åÇøÖ¸Õë */
 8002cee:	4b46      	ldr	r3, [pc, #280]	; (8002e08 <UartVarInit+0x17c>)
 8002cf0:	4a47      	ldr	r2, [pc, #284]	; (8002e10 <UartVarInit+0x184>)
 8002cf2:	605a      	str	r2, [r3, #4]
	g_tUart2.pRxBuf = g_RxBuf2;					/* ½ÓÊÕ»º³åÇøÖ¸Õë */
 8002cf4:	4b44      	ldr	r3, [pc, #272]	; (8002e08 <UartVarInit+0x17c>)
 8002cf6:	4a47      	ldr	r2, [pc, #284]	; (8002e14 <UartVarInit+0x188>)
 8002cf8:	609a      	str	r2, [r3, #8]
	g_tUart2.usTxBufSize = UART2_TX_BUF_SIZE;	/* ·¢ËÍ»º³åÇø´óÐ¡ */
 8002cfa:	4b43      	ldr	r3, [pc, #268]	; (8002e08 <UartVarInit+0x17c>)
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	819a      	strh	r2, [r3, #12]
	g_tUart2.usRxBufSize = UART2_RX_BUF_SIZE;	/* ½ÓÊÕ»º³åÇø´óÐ¡ */
 8002d00:	4b41      	ldr	r3, [pc, #260]	; (8002e08 <UartVarInit+0x17c>)
 8002d02:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d06:	81da      	strh	r2, [r3, #14]
	g_tUart2.usTxWrite = 0;						/* ·¢ËÍFIFOÐ´Ë÷Òý */
 8002d08:	4b3f      	ldr	r3, [pc, #252]	; (8002e08 <UartVarInit+0x17c>)
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	821a      	strh	r2, [r3, #16]
	g_tUart2.usTxRead = 0;						/* ·¢ËÍFIFO¶ÁË÷Òý */
 8002d0e:	4b3e      	ldr	r3, [pc, #248]	; (8002e08 <UartVarInit+0x17c>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	825a      	strh	r2, [r3, #18]
	g_tUart2.usRxWrite = 0;						/* ½ÓÊÕFIFOÐ´Ë÷Òý */
 8002d14:	4b3c      	ldr	r3, [pc, #240]	; (8002e08 <UartVarInit+0x17c>)
 8002d16:	2200      	movs	r2, #0
 8002d18:	82da      	strh	r2, [r3, #22]
	g_tUart2.usRxRead = 0;						/* ½ÓÊÕFIFO¶ÁË÷Òý */
 8002d1a:	4b3b      	ldr	r3, [pc, #236]	; (8002e08 <UartVarInit+0x17c>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	831a      	strh	r2, [r3, #24]
	g_tUart2.usRxCount = 0;						/* ½ÓÊÕµ½µÄÐÂÊý¾Ý¸öÊý */
 8002d20:	4b39      	ldr	r3, [pc, #228]	; (8002e08 <UartVarInit+0x17c>)
 8002d22:	2200      	movs	r2, #0
 8002d24:	835a      	strh	r2, [r3, #26]
	g_tUart2.usTxCount = 0;						/* ´ý·¢ËÍµÄÊý¾Ý¸öÊý */
 8002d26:	4b38      	ldr	r3, [pc, #224]	; (8002e08 <UartVarInit+0x17c>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	829a      	strh	r2, [r3, #20]
	g_tUart2.SendBefor = 0;						/* ·¢ËÍÊý¾ÝÇ°µÄ»Øµ÷º¯Êý */
 8002d2c:	4b36      	ldr	r3, [pc, #216]	; (8002e08 <UartVarInit+0x17c>)
 8002d2e:	2200      	movs	r2, #0
 8002d30:	61da      	str	r2, [r3, #28]
	g_tUart2.SendOver = 0;						/* ·¢ËÍÍê±ÏºóµÄ»Øµ÷º¯Êý */
 8002d32:	4b35      	ldr	r3, [pc, #212]	; (8002e08 <UartVarInit+0x17c>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	621a      	str	r2, [r3, #32]
	g_tUart2.ReciveNew = 0;						/* ½ÓÊÕµ½ÐÂÊý¾ÝºóµÄ»Øµ÷º¯Êý */
 8002d38:	4b33      	ldr	r3, [pc, #204]	; (8002e08 <UartVarInit+0x17c>)
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	625a      	str	r2, [r3, #36]	; 0x24
#endif

#if UART3_FIFO_EN == 1
	g_tUart3.uart = USART3;						/* STM32 ´®¿ÚÉè±¸ */
 8002d3e:	4b36      	ldr	r3, [pc, #216]	; (8002e18 <UartVarInit+0x18c>)
 8002d40:	4a36      	ldr	r2, [pc, #216]	; (8002e1c <UartVarInit+0x190>)
 8002d42:	601a      	str	r2, [r3, #0]
	g_tUart3.pTxBuf = g_TxBuf3;					/* ·¢ËÍ»º³åÇøÖ¸Õë */
 8002d44:	4b34      	ldr	r3, [pc, #208]	; (8002e18 <UartVarInit+0x18c>)
 8002d46:	4a36      	ldr	r2, [pc, #216]	; (8002e20 <UartVarInit+0x194>)
 8002d48:	605a      	str	r2, [r3, #4]
	g_tUart3.pRxBuf = g_RxBuf3;					/* ½ÓÊÕ»º³åÇøÖ¸Õë */
 8002d4a:	4b33      	ldr	r3, [pc, #204]	; (8002e18 <UartVarInit+0x18c>)
 8002d4c:	4a35      	ldr	r2, [pc, #212]	; (8002e24 <UartVarInit+0x198>)
 8002d4e:	609a      	str	r2, [r3, #8]
	g_tUart3.usTxBufSize = UART3_TX_BUF_SIZE;	/* ·¢ËÍ»º³åÇø´óÐ¡ */
 8002d50:	4b31      	ldr	r3, [pc, #196]	; (8002e18 <UartVarInit+0x18c>)
 8002d52:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d56:	819a      	strh	r2, [r3, #12]
	g_tUart3.usRxBufSize = UART3_RX_BUF_SIZE;	/* ½ÓÊÕ»º³åÇø´óÐ¡ */
 8002d58:	4b2f      	ldr	r3, [pc, #188]	; (8002e18 <UartVarInit+0x18c>)
 8002d5a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d5e:	81da      	strh	r2, [r3, #14]
	g_tUart3.usTxWrite = 0;						/* ·¢ËÍFIFOÐ´Ë÷Òý */
 8002d60:	4b2d      	ldr	r3, [pc, #180]	; (8002e18 <UartVarInit+0x18c>)
 8002d62:	2200      	movs	r2, #0
 8002d64:	821a      	strh	r2, [r3, #16]
	g_tUart3.usTxRead = 0;						/* ·¢ËÍFIFO¶ÁË÷Òý */
 8002d66:	4b2c      	ldr	r3, [pc, #176]	; (8002e18 <UartVarInit+0x18c>)
 8002d68:	2200      	movs	r2, #0
 8002d6a:	825a      	strh	r2, [r3, #18]
	g_tUart3.usRxWrite = 0;						/* ½ÓÊÕFIFOÐ´Ë÷Òý */
 8002d6c:	4b2a      	ldr	r3, [pc, #168]	; (8002e18 <UartVarInit+0x18c>)
 8002d6e:	2200      	movs	r2, #0
 8002d70:	82da      	strh	r2, [r3, #22]
	g_tUart3.usRxRead = 0;						/* ½ÓÊÕFIFO¶ÁË÷Òý */
 8002d72:	4b29      	ldr	r3, [pc, #164]	; (8002e18 <UartVarInit+0x18c>)
 8002d74:	2200      	movs	r2, #0
 8002d76:	831a      	strh	r2, [r3, #24]
	g_tUart3.usRxCount = 0;						/* ½ÓÊÕµ½µÄÐÂÊý¾Ý¸öÊý */
 8002d78:	4b27      	ldr	r3, [pc, #156]	; (8002e18 <UartVarInit+0x18c>)
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	835a      	strh	r2, [r3, #26]
	g_tUart3.usTxCount = 0;						/* ´ý·¢ËÍµÄÊý¾Ý¸öÊý */
 8002d7e:	4b26      	ldr	r3, [pc, #152]	; (8002e18 <UartVarInit+0x18c>)
 8002d80:	2200      	movs	r2, #0
 8002d82:	829a      	strh	r2, [r3, #20]
	g_tUart3.SendBefor = USART3_SendBefor;		/* ·¢ËÍÊý¾ÝÇ°µÄ»Øµ÷º¯Êý */
 8002d84:	4b24      	ldr	r3, [pc, #144]	; (8002e18 <UartVarInit+0x18c>)
 8002d86:	4a28      	ldr	r2, [pc, #160]	; (8002e28 <UartVarInit+0x19c>)
 8002d88:	61da      	str	r2, [r3, #28]
	g_tUart3.SendOver = USART3_SendOver;		/* ·¢ËÍÍê±ÏºóµÄ»Øµ÷º¯Êý */
 8002d8a:	4b23      	ldr	r3, [pc, #140]	; (8002e18 <UartVarInit+0x18c>)
 8002d8c:	4a27      	ldr	r2, [pc, #156]	; (8002e2c <UartVarInit+0x1a0>)
 8002d8e:	621a      	str	r2, [r3, #32]
	g_tUart3.ReciveNew = 0;						/* ½ÓÊÕµ½ÐÂÊý¾ÝºóµÄ»Øµ÷º¯Êý */
 8002d90:	4b21      	ldr	r3, [pc, #132]	; (8002e18 <UartVarInit+0x18c>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	625a      	str	r2, [r3, #36]	; 0x24
	g_tUart5.ReciveNew = 0;						/* ½ÓÊÕµ½ÐÂÊý¾ÝºóµÄ»Øµ÷º¯Êý */
#endif


#if UART6_FIFO_EN == 1
	g_tUart6.uart = USART6;						/* STM32 ´®¿ÚÉè±¸ */
 8002d96:	4b26      	ldr	r3, [pc, #152]	; (8002e30 <UartVarInit+0x1a4>)
 8002d98:	4a26      	ldr	r2, [pc, #152]	; (8002e34 <UartVarInit+0x1a8>)
 8002d9a:	601a      	str	r2, [r3, #0]
	g_tUart6.pTxBuf = g_TxBuf6;					/* ·¢ËÍ»º³åÇøÖ¸Õë */
 8002d9c:	4b24      	ldr	r3, [pc, #144]	; (8002e30 <UartVarInit+0x1a4>)
 8002d9e:	4a26      	ldr	r2, [pc, #152]	; (8002e38 <UartVarInit+0x1ac>)
 8002da0:	605a      	str	r2, [r3, #4]
	g_tUart6.pRxBuf = g_RxBuf6;					/* ½ÓÊÕ»º³åÇøÖ¸Õë */
 8002da2:	4b23      	ldr	r3, [pc, #140]	; (8002e30 <UartVarInit+0x1a4>)
 8002da4:	4a25      	ldr	r2, [pc, #148]	; (8002e3c <UartVarInit+0x1b0>)
 8002da6:	609a      	str	r2, [r3, #8]
	g_tUart6.usTxBufSize = UART6_TX_BUF_SIZE;	/* ·¢ËÍ»º³åÇø´óÐ¡ */
 8002da8:	4b21      	ldr	r3, [pc, #132]	; (8002e30 <UartVarInit+0x1a4>)
 8002daa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002dae:	819a      	strh	r2, [r3, #12]
	g_tUart6.usRxBufSize = UART6_RX_BUF_SIZE;	/* ½ÓÊÕ»º³åÇø´óÐ¡ */
 8002db0:	4b1f      	ldr	r3, [pc, #124]	; (8002e30 <UartVarInit+0x1a4>)
 8002db2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002db6:	81da      	strh	r2, [r3, #14]
	g_tUart6.usTxWrite = 0;						/* ·¢ËÍFIFOÐ´Ë÷Òý */
 8002db8:	4b1d      	ldr	r3, [pc, #116]	; (8002e30 <UartVarInit+0x1a4>)
 8002dba:	2200      	movs	r2, #0
 8002dbc:	821a      	strh	r2, [r3, #16]
	g_tUart6.usTxRead = 0;						/* ·¢ËÍFIFO¶ÁË÷Òý */
 8002dbe:	4b1c      	ldr	r3, [pc, #112]	; (8002e30 <UartVarInit+0x1a4>)
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	825a      	strh	r2, [r3, #18]
	g_tUart6.usRxWrite = 0;						/* ½ÓÊÕFIFOÐ´Ë÷Òý */
 8002dc4:	4b1a      	ldr	r3, [pc, #104]	; (8002e30 <UartVarInit+0x1a4>)
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	82da      	strh	r2, [r3, #22]
	g_tUart6.usRxRead = 0;						/* ½ÓÊÕFIFO¶ÁË÷Òý */
 8002dca:	4b19      	ldr	r3, [pc, #100]	; (8002e30 <UartVarInit+0x1a4>)
 8002dcc:	2200      	movs	r2, #0
 8002dce:	831a      	strh	r2, [r3, #24]
	g_tUart6.usRxCount = 0;						/* ½ÓÊÕµ½µÄÐÂÊý¾Ý¸öÊý */
 8002dd0:	4b17      	ldr	r3, [pc, #92]	; (8002e30 <UartVarInit+0x1a4>)
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	835a      	strh	r2, [r3, #26]
	g_tUart6.usTxCount = 0;						/* ´ý·¢ËÍµÄÊý¾Ý¸öÊý */
 8002dd6:	4b16      	ldr	r3, [pc, #88]	; (8002e30 <UartVarInit+0x1a4>)
 8002dd8:	2200      	movs	r2, #0
 8002dda:	829a      	strh	r2, [r3, #20]
	g_tUart6.SendBefor = 0;						/* ·¢ËÍÊý¾ÝÇ°µÄ»Øµ÷º¯Êý */
 8002ddc:	4b14      	ldr	r3, [pc, #80]	; (8002e30 <UartVarInit+0x1a4>)
 8002dde:	2200      	movs	r2, #0
 8002de0:	61da      	str	r2, [r3, #28]
	g_tUart6.SendOver = 0;						/* ·¢ËÍÍê±ÏºóµÄ»Øµ÷º¯Êý */
 8002de2:	4b13      	ldr	r3, [pc, #76]	; (8002e30 <UartVarInit+0x1a4>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	621a      	str	r2, [r3, #32]
	g_tUart6.ReciveNew = 0;						/* ½ÓÊÕµ½ÐÂÊý¾ÝºóµÄ»Øµ÷º¯Êý */
 8002de8:	4b11      	ldr	r3, [pc, #68]	; (8002e30 <UartVarInit+0x1a4>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	625a      	str	r2, [r3, #36]	; 0x24
#endif
}
 8002dee:	bf00      	nop
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr
 8002df8:	20000164 	.word	0x20000164
 8002dfc:	40011000 	.word	0x40011000
 8002e00:	2000018c 	.word	0x2000018c
 8002e04:	2000058c 	.word	0x2000058c
 8002e08:	2000098c 	.word	0x2000098c
 8002e0c:	40004400 	.word	0x40004400
 8002e10:	200009b4 	.word	0x200009b4
 8002e14:	200009b8 	.word	0x200009b8
 8002e18:	200011b8 	.word	0x200011b8
 8002e1c:	40004800 	.word	0x40004800
 8002e20:	200011e0 	.word	0x200011e0
 8002e24:	200015e0 	.word	0x200015e0
 8002e28:	08002c5d 	.word	0x08002c5d
 8002e2c:	08002c75 	.word	0x08002c75
 8002e30:	200019e0 	.word	0x200019e0
 8002e34:	40011400 	.word	0x40011400
 8002e38:	20001a08 	.word	0x20001a08
 8002e3c:	20001e08 	.word	0x20001e08

08002e40 <InitHardUart>:
*********************************************************************************************************
*	Func name: InitHardUart
*********************************************************************************************************
*/
static void InitHardUart(void)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b08a      	sub	sp, #40	; 0x28
 8002e44:	af00      	add	r7, sp, #0
	//UART_HandleTypeDef USART_InitStructure2;
	//UART_HandleTypeDef USART_InitStructure3;
	//UART_HandleTypeDef USART_InitStructure6;

#if UART1_FIFO_EN == 1		/* TX = PA9   RX = PA10  TX = PB6   RX = PB7*/
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002e46:	2300      	movs	r3, #0
 8002e48:	613b      	str	r3, [r7, #16]
 8002e4a:	4b68      	ldr	r3, [pc, #416]	; (8002fec <InitHardUart+0x1ac>)
 8002e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4e:	4a67      	ldr	r2, [pc, #412]	; (8002fec <InitHardUart+0x1ac>)
 8002e50:	f043 0301 	orr.w	r3, r3, #1
 8002e54:	6313      	str	r3, [r2, #48]	; 0x30
 8002e56:	4b65      	ldr	r3, [pc, #404]	; (8002fec <InitHardUart+0x1ac>)
 8002e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5a:	f003 0301 	and.w	r3, r3, #1
 8002e5e:	613b      	str	r3, [r7, #16]
 8002e60:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_USART1_CLK_ENABLE();
 8002e62:	2300      	movs	r3, #0
 8002e64:	60fb      	str	r3, [r7, #12]
 8002e66:	4b61      	ldr	r3, [pc, #388]	; (8002fec <InitHardUart+0x1ac>)
 8002e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e6a:	4a60      	ldr	r2, [pc, #384]	; (8002fec <InitHardUart+0x1ac>)
 8002e6c:	f043 0310 	orr.w	r3, r3, #16
 8002e70:	6453      	str	r3, [r2, #68]	; 0x44
 8002e72:	4b5e      	ldr	r3, [pc, #376]	; (8002fec <InitHardUart+0x1ac>)
 8002e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e76:	f003 0310 	and.w	r3, r3, #16
 8002e7a:	60fb      	str	r3, [r7, #12]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
#if	1
	// TX
	GPIO_InitStructure.Pin = GPIO_PIN_9;
 8002e7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e82:	617b      	str	r3, [r7, #20]
	GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8002e84:	2302      	movs	r3, #2
 8002e86:	61bb      	str	r3, [r7, #24]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e88:	2302      	movs	r3, #2
 8002e8a:	623b      	str	r3, [r7, #32]
	GPIO_InitStructure.Pull = GPIO_NOPULL;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStructure.Alternate = GPIO_AF7_USART1;
 8002e90:	2307      	movs	r3, #7
 8002e92:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002e94:	f107 0314 	add.w	r3, r7, #20
 8002e98:	4619      	mov	r1, r3
 8002e9a:	4855      	ldr	r0, [pc, #340]	; (8002ff0 <InitHardUart+0x1b0>)
 8002e9c:	f000 fac8 	bl	8003430 <HAL_GPIO_Init>
	// RX
	GPIO_InitStructure.Pin = GPIO_PIN_10;
 8002ea0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ea4:	617b      	str	r3, [r7, #20]
	GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8002ea6:	2302      	movs	r3, #2
 8002ea8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002eaa:	2302      	movs	r3, #2
 8002eac:	623b      	str	r3, [r7, #32]
	GPIO_InitStructure.Pull = GPIO_NOPULL;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStructure.Alternate = GPIO_AF7_USART1;
 8002eb2:	2307      	movs	r3, #7
 8002eb4:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002eb6:	f107 0314 	add.w	r3, r7, #20
 8002eba:	4619      	mov	r1, r3
 8002ebc:	484c      	ldr	r0, [pc, #304]	; (8002ff0 <InitHardUart+0x1b0>)
 8002ebe:	f000 fab7 	bl	8003430 <HAL_GPIO_Init>
#endif
	USART_InitStructure1.Instance = USART1;
 8002ec2:	4b4c      	ldr	r3, [pc, #304]	; (8002ff4 <InitHardUart+0x1b4>)
 8002ec4:	4a4c      	ldr	r2, [pc, #304]	; (8002ff8 <InitHardUart+0x1b8>)
 8002ec6:	601a      	str	r2, [r3, #0]
	USART_InitStructure1.Init.BaudRate = UART1_BAUD;
 8002ec8:	4b4a      	ldr	r3, [pc, #296]	; (8002ff4 <InitHardUart+0x1b4>)
 8002eca:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002ece:	605a      	str	r2, [r3, #4]
	USART_InitStructure1.Init.WordLength = UART_WORDLENGTH_8B;
 8002ed0:	4b48      	ldr	r3, [pc, #288]	; (8002ff4 <InitHardUart+0x1b4>)
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	609a      	str	r2, [r3, #8]
	USART_InitStructure1.Init.StopBits = UART_STOPBITS_1;
 8002ed6:	4b47      	ldr	r3, [pc, #284]	; (8002ff4 <InitHardUart+0x1b4>)
 8002ed8:	2200      	movs	r2, #0
 8002eda:	60da      	str	r2, [r3, #12]
	USART_InitStructure1.Init.Parity = UART_PARITY_NONE;
 8002edc:	4b45      	ldr	r3, [pc, #276]	; (8002ff4 <InitHardUart+0x1b4>)
 8002ede:	2200      	movs	r2, #0
 8002ee0:	611a      	str	r2, [r3, #16]
	USART_InitStructure1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ee2:	4b44      	ldr	r3, [pc, #272]	; (8002ff4 <InitHardUart+0x1b4>)
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	619a      	str	r2, [r3, #24]
	USART_InitStructure1.Init.Mode = UART_MODE_TX_RX;
 8002ee8:	4b42      	ldr	r3, [pc, #264]	; (8002ff4 <InitHardUart+0x1b4>)
 8002eea:	220c      	movs	r2, #12
 8002eec:	615a      	str	r2, [r3, #20]
	HAL_UART_Init(&USART_InitStructure1);
 8002eee:	4841      	ldr	r0, [pc, #260]	; (8002ff4 <InitHardUart+0x1b4>)
 8002ef0:	f7fd fdb2 	bl	8000a58 <HAL_UART_Init>

	__HAL_UART_ENABLE_IT(&USART_InitStructure1,UART_IT_RXNE);
 8002ef4:	4b3f      	ldr	r3, [pc, #252]	; (8002ff4 <InitHardUart+0x1b4>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	68da      	ldr	r2, [r3, #12]
 8002efa:	4b3e      	ldr	r3, [pc, #248]	; (8002ff4 <InitHardUart+0x1b4>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f042 0220 	orr.w	r2, r2, #32
 8002f02:	60da      	str	r2, [r3, #12]
	__HAL_UART_ENABLE(&USART_InitStructure1);
 8002f04:	4b3b      	ldr	r3, [pc, #236]	; (8002ff4 <InitHardUart+0x1b4>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	68da      	ldr	r2, [r3, #12]
 8002f0a:	4b3a      	ldr	r3, [pc, #232]	; (8002ff4 <InitHardUart+0x1b4>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f12:	60da      	str	r2, [r3, #12]
	__HAL_UART_CLEAR_FLAG(&USART_InitStructure1, UART_FLAG_TC);
 8002f14:	4b37      	ldr	r3, [pc, #220]	; (8002ff4 <InitHardUart+0x1b4>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002f1c:	601a      	str	r2, [r3, #0]
#endif

#if UART2_FIFO_EN == 1		/* TX = PD5   RX = PD6 TX = PA2 RX = PA3  */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002f1e:	2300      	movs	r3, #0
 8002f20:	60bb      	str	r3, [r7, #8]
 8002f22:	4b32      	ldr	r3, [pc, #200]	; (8002fec <InitHardUart+0x1ac>)
 8002f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f26:	4a31      	ldr	r2, [pc, #196]	; (8002fec <InitHardUart+0x1ac>)
 8002f28:	f043 0301 	orr.w	r3, r3, #1
 8002f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f2e:	4b2f      	ldr	r3, [pc, #188]	; (8002fec <InitHardUart+0x1ac>)
 8002f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f32:	f003 0301 	and.w	r3, r3, #1
 8002f36:	60bb      	str	r3, [r7, #8]
 8002f38:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_USART2_CLK_ENABLE();
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	607b      	str	r3, [r7, #4]
 8002f3e:	4b2b      	ldr	r3, [pc, #172]	; (8002fec <InitHardUart+0x1ac>)
 8002f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f42:	4a2a      	ldr	r2, [pc, #168]	; (8002fec <InitHardUart+0x1ac>)
 8002f44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f48:	6413      	str	r3, [r2, #64]	; 0x40
 8002f4a:	4b28      	ldr	r3, [pc, #160]	; (8002fec <InitHardUart+0x1ac>)
 8002f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f52:	607b      	str	r3, [r7, #4]
 8002f54:	687b      	ldr	r3, [r7, #4]

	// TX
	GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8002f56:	2302      	movs	r3, #2
 8002f58:	61bb      	str	r3, [r7, #24]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f5a:	2302      	movs	r3, #2
 8002f5c:	623b      	str	r3, [r7, #32]
	GPIO_InitStructure.Pull = GPIO_NOPULL;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	61fb      	str	r3, [r7, #28]
	GPIO_InitStructure.Alternate = GPIO_AF7_USART2;
 8002f62:	2307      	movs	r3, #7
 8002f64:	627b      	str	r3, [r7, #36]	; 0x24
	// RX
	GPIO_InitStructure.Pin = GPIO_PIN_3;
 8002f66:	2308      	movs	r3, #8
 8002f68:	617b      	str	r3, [r7, #20]
	GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8002f6a:	2302      	movs	r3, #2
 8002f6c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f6e:	2302      	movs	r3, #2
 8002f70:	623b      	str	r3, [r7, #32]
	GPIO_InitStructure.Pull = GPIO_NOPULL;
 8002f72:	2300      	movs	r3, #0
 8002f74:	61fb      	str	r3, [r7, #28]
	GPIO_InitStructure.Alternate = GPIO_AF7_USART2;
 8002f76:	2307      	movs	r3, #7
 8002f78:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002f7a:	f107 0314 	add.w	r3, r7, #20
 8002f7e:	4619      	mov	r1, r3
 8002f80:	481b      	ldr	r0, [pc, #108]	; (8002ff0 <InitHardUart+0x1b0>)
 8002f82:	f000 fa55 	bl	8003430 <HAL_GPIO_Init>

	USART_InitStructure2.Instance = USART2;
 8002f86:	4b1d      	ldr	r3, [pc, #116]	; (8002ffc <InitHardUart+0x1bc>)
 8002f88:	4a1d      	ldr	r2, [pc, #116]	; (8003000 <InitHardUart+0x1c0>)
 8002f8a:	601a      	str	r2, [r3, #0]
	USART_InitStructure2.Init.BaudRate = UART2_BAUD;
 8002f8c:	4b1b      	ldr	r3, [pc, #108]	; (8002ffc <InitHardUart+0x1bc>)
 8002f8e:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002f92:	605a      	str	r2, [r3, #4]
	USART_InitStructure2.Init.WordLength = UART_WORDLENGTH_8B;
 8002f94:	4b19      	ldr	r3, [pc, #100]	; (8002ffc <InitHardUart+0x1bc>)
 8002f96:	2200      	movs	r2, #0
 8002f98:	609a      	str	r2, [r3, #8]
	USART_InitStructure2.Init.StopBits = UART_STOPBITS_1;
 8002f9a:	4b18      	ldr	r3, [pc, #96]	; (8002ffc <InitHardUart+0x1bc>)
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	60da      	str	r2, [r3, #12]
	USART_InitStructure2.Init.Parity = UART_PARITY_NONE;
 8002fa0:	4b16      	ldr	r3, [pc, #88]	; (8002ffc <InitHardUart+0x1bc>)
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	611a      	str	r2, [r3, #16]
	USART_InitStructure2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002fa6:	4b15      	ldr	r3, [pc, #84]	; (8002ffc <InitHardUart+0x1bc>)
 8002fa8:	2200      	movs	r2, #0
 8002faa:	619a      	str	r2, [r3, #24]
	USART_InitStructure2.Init.Mode = UART_MODE_RX;
 8002fac:	4b13      	ldr	r3, [pc, #76]	; (8002ffc <InitHardUart+0x1bc>)
 8002fae:	2204      	movs	r2, #4
 8002fb0:	615a      	str	r2, [r3, #20]
	HAL_UART_Init(&USART_InitStructure2);
 8002fb2:	4812      	ldr	r0, [pc, #72]	; (8002ffc <InitHardUart+0x1bc>)
 8002fb4:	f7fd fd50 	bl	8000a58 <HAL_UART_Init>

	__HAL_UART_ENABLE_IT(&USART_InitStructure2,UART_IT_RXNE);
 8002fb8:	4b10      	ldr	r3, [pc, #64]	; (8002ffc <InitHardUart+0x1bc>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	68da      	ldr	r2, [r3, #12]
 8002fbe:	4b0f      	ldr	r3, [pc, #60]	; (8002ffc <InitHardUart+0x1bc>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f042 0220 	orr.w	r2, r2, #32
 8002fc6:	60da      	str	r2, [r3, #12]
	__HAL_UART_ENABLE(&USART_InitStructure2);
 8002fc8:	4b0c      	ldr	r3, [pc, #48]	; (8002ffc <InitHardUart+0x1bc>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	68da      	ldr	r2, [r3, #12]
 8002fce:	4b0b      	ldr	r3, [pc, #44]	; (8002ffc <InitHardUart+0x1bc>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002fd6:	60da      	str	r2, [r3, #12]
	__HAL_UART_CLEAR_FLAG(&USART_InitStructure2, UART_FLAG_TC);
 8002fd8:	4b08      	ldr	r3, [pc, #32]	; (8002ffc <InitHardUart+0x1bc>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002fe0:	601a      	str	r2, [r3, #0]
	__HAL_UART_ENABLE_IT(&USART_InitStructure6,UART_IT_RXNE);
	__HAL_UART_ENABLE(&USART_InitStructure6);
	__HAL_UART_CLEAR_FLAG(&USART_InitStructure6, UART_FLAG_TC);
#endif
#endif
}
 8002fe2:	bf00      	nop
 8002fe4:	3728      	adds	r7, #40	; 0x28
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	40023800 	.word	0x40023800
 8002ff0:	40020000 	.word	0x40020000
 8002ff4:	20002208 	.word	0x20002208
 8002ff8:	40011000 	.word	0x40011000
 8002ffc:	2000224c 	.word	0x2000224c
 8003000:	40004400 	.word	0x40004400

08003004 <ConfigUartNVIC>:

static void ConfigUartNVIC(void)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	af00      	add	r7, sp, #0
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003008:	2007      	movs	r0, #7
 800300a:	f000 f9cf 	bl	80033ac <HAL_NVIC_SetPriorityGrouping>

#if UART1_FIFO_EN == 1
	  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800300e:	2200      	movs	r2, #0
 8003010:	2100      	movs	r1, #0
 8003012:	2025      	movs	r0, #37	; 0x25
 8003014:	f000 f9d5 	bl	80033c2 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003018:	2025      	movs	r0, #37	; 0x25
 800301a:	f000 f9ee 	bl	80033fa <HAL_NVIC_EnableIRQ>
#endif

#if UART2_FIFO_EN == 1
	  HAL_NVIC_SetPriority(USART2_IRQn, 0, 1);
 800301e:	2201      	movs	r2, #1
 8003020:	2100      	movs	r1, #0
 8003022:	2026      	movs	r0, #38	; 0x26
 8003024:	f000 f9cd 	bl	80033c2 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003028:	2026      	movs	r0, #38	; 0x26
 800302a:	f000 f9e6 	bl	80033fa <HAL_NVIC_EnableIRQ>
#endif

#if UART3_FIFO_EN == 1
	  HAL_NVIC_SetPriority(USART3_IRQn, 0, 2);
 800302e:	2202      	movs	r2, #2
 8003030:	2100      	movs	r1, #0
 8003032:	2027      	movs	r0, #39	; 0x27
 8003034:	f000 f9c5 	bl	80033c2 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003038:	2027      	movs	r0, #39	; 0x27
 800303a:	f000 f9de 	bl	80033fa <HAL_NVIC_EnableIRQ>
	  HAL_NVIC_SetPriority(UART5_IRQn, 0, 4);
	  HAL_NVIC_EnableIRQ(UART5_IRQn);
#endif

#if UART6_FIFO_EN == 1
	  HAL_NVIC_SetPriority(USART6_IRQn, 0, 5);
 800303e:	2205      	movs	r2, #5
 8003040:	2100      	movs	r1, #0
 8003042:	2047      	movs	r0, #71	; 0x47
 8003044:	f000 f9bd 	bl	80033c2 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003048:	2047      	movs	r0, #71	; 0x47
 800304a:	f000 f9d6 	bl	80033fa <HAL_NVIC_EnableIRQ>
#endif
}
 800304e:	bf00      	nop
 8003050:	bd80      	pop	{r7, pc}
	...

08003054 <UART1_Transmit>:
  * @param  data: 송신할 데이터 버퍼의 포인터
  * @param  size: 송신할 데이터 크기
  * @retval HAL 상태 (HAL_OK, HAL_ERROR, HAL_BUSY, HAL_TIMEOUT)
 */
HAL_StatusTypeDef UART1_Transmit(uint8_t *data, uint16_t size)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b084      	sub	sp, #16
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	460b      	mov	r3, r1
 800305e:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status;

  // 폴링 방식으로 데이터 송신
  status = HAL_UART_Transmit(&USART_InitStructure1, data, size, 1000); // 타임아웃 1000ms
 8003060:	887a      	ldrh	r2, [r7, #2]
 8003062:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003066:	6879      	ldr	r1, [r7, #4]
 8003068:	4807      	ldr	r0, [pc, #28]	; (8003088 <UART1_Transmit+0x34>)
 800306a:	f7fd fd4c 	bl	8000b06 <HAL_UART_Transmit>
 800306e:	4603      	mov	r3, r0
 8003070:	73fb      	strb	r3, [r7, #15]

  // 송신 완료 플래그 클리어
  __HAL_UART_CLEAR_FLAG(&USART_InitStructure1, UART_FLAG_TC);
 8003072:	4b05      	ldr	r3, [pc, #20]	; (8003088 <UART1_Transmit+0x34>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800307a:	601a      	str	r2, [r3, #0]

  return status;
 800307c:	7bfb      	ldrb	r3, [r7, #15]
}
 800307e:	4618      	mov	r0, r3
 8003080:	3710      	adds	r7, #16
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	20002208 	.word	0x20002208

0800308c <UART1_Transmit_String>:
  * @brief  UART1을 통해 문자열을 송신하는 함수
  * @param  str: 송신할 문자열
  * @retval HAL 상태 (HAL_OK, HAL_ERROR, HAL_BUSY, HAL_TIMEOUT)
  */
HAL_StatusTypeDef UART1_Transmit_String(char *str)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b082      	sub	sp, #8
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  return UART1_Transmit((uint8_t*)str, strlen(str));
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f7fd f897 	bl	80001c8 <strlen>
 800309a:	4603      	mov	r3, r0
 800309c:	b29b      	uxth	r3, r3
 800309e:	4619      	mov	r1, r3
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f7ff ffd7 	bl	8003054 <UART1_Transmit>
 80030a6:	4603      	mov	r3, r0
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	3708      	adds	r7, #8
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}

080030b0 <bsp_Init>:
 *      Author: compro
 */
#include "bsp.h"

void bsp_Init(void)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	af00      	add	r7, sp, #0
	bsp_InitUart();
 80030b4:	f7ff fdc8 	bl	8002c48 <bsp_InitUart>

	bsp_InitLed();
 80030b8:	f7ff f96a 	bl	8002390 <bsp_InitLed>

	bsp_InitKey();
 80030bc:	f7fe fffe 	bl	80020bc <bsp_InitKey>

	bsp_InitI2C();
 80030c0:	f7fe ff22 	bl	8001f08 <bsp_InitI2C>

	bsp_InitTimer();
 80030c4:	f7ff fd7a 	bl	8002bbc <bsp_InitTimer>

	//bsp_DelayMS(20);
	HAL_Delay(20);
 80030c8:	2014      	movs	r0, #20
 80030ca:	f000 f87b 	bl	80031c4 <HAL_Delay>
}
 80030ce:	bf00      	nop
 80030d0:	bd80      	pop	{r7, pc}

080030d2 <bsp_Idle>:

extern void SaveScreenToBmp(uint16_t _index);
void bsp_Idle(void)
{
 80030d2:	b580      	push	{r7, lr}
 80030d4:	af00      	add	r7, sp, #0
	if (bsp_GetKey2() == SYS_DOWN_K1K2)
 80030d6:	f7ff f933 	bl	8002340 <bsp_GetKey2>
	{
		static uint16_t s_file_no = 0;

		
	}
}
 80030da:	bf00      	nop
 80030dc:	bd80      	pop	{r7, pc}
	...

080030e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80030e4:	4b0e      	ldr	r3, [pc, #56]	; (8003120 <HAL_Init+0x40>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a0d      	ldr	r2, [pc, #52]	; (8003120 <HAL_Init+0x40>)
 80030ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80030f0:	4b0b      	ldr	r3, [pc, #44]	; (8003120 <HAL_Init+0x40>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a0a      	ldr	r2, [pc, #40]	; (8003120 <HAL_Init+0x40>)
 80030f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80030fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80030fc:	4b08      	ldr	r3, [pc, #32]	; (8003120 <HAL_Init+0x40>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a07      	ldr	r2, [pc, #28]	; (8003120 <HAL_Init+0x40>)
 8003102:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003106:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003108:	2003      	movs	r0, #3
 800310a:	f000 f94f 	bl	80033ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800310e:	200f      	movs	r0, #15
 8003110:	f000 f808 	bl	8003124 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003114:	f7fd fc26 	bl	8000964 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003118:	2300      	movs	r3, #0
}
 800311a:	4618      	mov	r0, r3
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	40023c00 	.word	0x40023c00

08003124 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b082      	sub	sp, #8
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800312c:	4b12      	ldr	r3, [pc, #72]	; (8003178 <HAL_InitTick+0x54>)
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	4b12      	ldr	r3, [pc, #72]	; (800317c <HAL_InitTick+0x58>)
 8003132:	781b      	ldrb	r3, [r3, #0]
 8003134:	4619      	mov	r1, r3
 8003136:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800313a:	fbb3 f3f1 	udiv	r3, r3, r1
 800313e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003142:	4618      	mov	r0, r3
 8003144:	f000 f967 	bl	8003416 <HAL_SYSTICK_Config>
 8003148:	4603      	mov	r3, r0
 800314a:	2b00      	cmp	r3, #0
 800314c:	d001      	beq.n	8003152 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e00e      	b.n	8003170 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2b0f      	cmp	r3, #15
 8003156:	d80a      	bhi.n	800316e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003158:	2200      	movs	r2, #0
 800315a:	6879      	ldr	r1, [r7, #4]
 800315c:	f04f 30ff 	mov.w	r0, #4294967295
 8003160:	f000 f92f 	bl	80033c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003164:	4a06      	ldr	r2, [pc, #24]	; (8003180 <HAL_InitTick+0x5c>)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800316a:	2300      	movs	r3, #0
 800316c:	e000      	b.n	8003170 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
}
 8003170:	4618      	mov	r0, r3
 8003172:	3708      	adds	r7, #8
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}
 8003178:	20000000 	.word	0x20000000
 800317c:	20000014 	.word	0x20000014
 8003180:	20000010 	.word	0x20000010

08003184 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003184:	b480      	push	{r7}
 8003186:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003188:	4b06      	ldr	r3, [pc, #24]	; (80031a4 <HAL_IncTick+0x20>)
 800318a:	781b      	ldrb	r3, [r3, #0]
 800318c:	461a      	mov	r2, r3
 800318e:	4b06      	ldr	r3, [pc, #24]	; (80031a8 <HAL_IncTick+0x24>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4413      	add	r3, r2
 8003194:	4a04      	ldr	r2, [pc, #16]	; (80031a8 <HAL_IncTick+0x24>)
 8003196:	6013      	str	r3, [r2, #0]
}
 8003198:	bf00      	nop
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr
 80031a2:	bf00      	nop
 80031a4:	20000014 	.word	0x20000014
 80031a8:	20002290 	.word	0x20002290

080031ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80031ac:	b480      	push	{r7}
 80031ae:	af00      	add	r7, sp, #0
  return uwTick;
 80031b0:	4b03      	ldr	r3, [pc, #12]	; (80031c0 <HAL_GetTick+0x14>)
 80031b2:	681b      	ldr	r3, [r3, #0]
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr
 80031be:	bf00      	nop
 80031c0:	20002290 	.word	0x20002290

080031c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b084      	sub	sp, #16
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80031cc:	f7ff ffee 	bl	80031ac <HAL_GetTick>
 80031d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031dc:	d005      	beq.n	80031ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80031de:	4b0a      	ldr	r3, [pc, #40]	; (8003208 <HAL_Delay+0x44>)
 80031e0:	781b      	ldrb	r3, [r3, #0]
 80031e2:	461a      	mov	r2, r3
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	4413      	add	r3, r2
 80031e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80031ea:	bf00      	nop
 80031ec:	f7ff ffde 	bl	80031ac <HAL_GetTick>
 80031f0:	4602      	mov	r2, r0
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	68fa      	ldr	r2, [r7, #12]
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d8f7      	bhi.n	80031ec <HAL_Delay+0x28>
  {
  }
}
 80031fc:	bf00      	nop
 80031fe:	bf00      	nop
 8003200:	3710      	adds	r7, #16
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	20000014 	.word	0x20000014

0800320c <__NVIC_SetPriorityGrouping>:
{
 800320c:	b480      	push	{r7}
 800320e:	b085      	sub	sp, #20
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	f003 0307 	and.w	r3, r3, #7
 800321a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800321c:	4b0c      	ldr	r3, [pc, #48]	; (8003250 <__NVIC_SetPriorityGrouping+0x44>)
 800321e:	68db      	ldr	r3, [r3, #12]
 8003220:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003222:	68ba      	ldr	r2, [r7, #8]
 8003224:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003228:	4013      	ands	r3, r2
 800322a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003234:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003238:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800323c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800323e:	4a04      	ldr	r2, [pc, #16]	; (8003250 <__NVIC_SetPriorityGrouping+0x44>)
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	60d3      	str	r3, [r2, #12]
}
 8003244:	bf00      	nop
 8003246:	3714      	adds	r7, #20
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr
 8003250:	e000ed00 	.word	0xe000ed00

08003254 <__NVIC_GetPriorityGrouping>:
{
 8003254:	b480      	push	{r7}
 8003256:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003258:	4b04      	ldr	r3, [pc, #16]	; (800326c <__NVIC_GetPriorityGrouping+0x18>)
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	0a1b      	lsrs	r3, r3, #8
 800325e:	f003 0307 	and.w	r3, r3, #7
}
 8003262:	4618      	mov	r0, r3
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr
 800326c:	e000ed00 	.word	0xe000ed00

08003270 <__NVIC_EnableIRQ>:
{
 8003270:	b480      	push	{r7}
 8003272:	b083      	sub	sp, #12
 8003274:	af00      	add	r7, sp, #0
 8003276:	4603      	mov	r3, r0
 8003278:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800327a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800327e:	2b00      	cmp	r3, #0
 8003280:	db0b      	blt.n	800329a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003282:	79fb      	ldrb	r3, [r7, #7]
 8003284:	f003 021f 	and.w	r2, r3, #31
 8003288:	4907      	ldr	r1, [pc, #28]	; (80032a8 <__NVIC_EnableIRQ+0x38>)
 800328a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800328e:	095b      	lsrs	r3, r3, #5
 8003290:	2001      	movs	r0, #1
 8003292:	fa00 f202 	lsl.w	r2, r0, r2
 8003296:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800329a:	bf00      	nop
 800329c:	370c      	adds	r7, #12
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr
 80032a6:	bf00      	nop
 80032a8:	e000e100 	.word	0xe000e100

080032ac <__NVIC_SetPriority>:
{
 80032ac:	b480      	push	{r7}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	4603      	mov	r3, r0
 80032b4:	6039      	str	r1, [r7, #0]
 80032b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	db0a      	blt.n	80032d6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	b2da      	uxtb	r2, r3
 80032c4:	490c      	ldr	r1, [pc, #48]	; (80032f8 <__NVIC_SetPriority+0x4c>)
 80032c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ca:	0112      	lsls	r2, r2, #4
 80032cc:	b2d2      	uxtb	r2, r2
 80032ce:	440b      	add	r3, r1
 80032d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80032d4:	e00a      	b.n	80032ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	b2da      	uxtb	r2, r3
 80032da:	4908      	ldr	r1, [pc, #32]	; (80032fc <__NVIC_SetPriority+0x50>)
 80032dc:	79fb      	ldrb	r3, [r7, #7]
 80032de:	f003 030f 	and.w	r3, r3, #15
 80032e2:	3b04      	subs	r3, #4
 80032e4:	0112      	lsls	r2, r2, #4
 80032e6:	b2d2      	uxtb	r2, r2
 80032e8:	440b      	add	r3, r1
 80032ea:	761a      	strb	r2, [r3, #24]
}
 80032ec:	bf00      	nop
 80032ee:	370c      	adds	r7, #12
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr
 80032f8:	e000e100 	.word	0xe000e100
 80032fc:	e000ed00 	.word	0xe000ed00

08003300 <NVIC_EncodePriority>:
{
 8003300:	b480      	push	{r7}
 8003302:	b089      	sub	sp, #36	; 0x24
 8003304:	af00      	add	r7, sp, #0
 8003306:	60f8      	str	r0, [r7, #12]
 8003308:	60b9      	str	r1, [r7, #8]
 800330a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	f003 0307 	and.w	r3, r3, #7
 8003312:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	f1c3 0307 	rsb	r3, r3, #7
 800331a:	2b04      	cmp	r3, #4
 800331c:	bf28      	it	cs
 800331e:	2304      	movcs	r3, #4
 8003320:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	3304      	adds	r3, #4
 8003326:	2b06      	cmp	r3, #6
 8003328:	d902      	bls.n	8003330 <NVIC_EncodePriority+0x30>
 800332a:	69fb      	ldr	r3, [r7, #28]
 800332c:	3b03      	subs	r3, #3
 800332e:	e000      	b.n	8003332 <NVIC_EncodePriority+0x32>
 8003330:	2300      	movs	r3, #0
 8003332:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003334:	f04f 32ff 	mov.w	r2, #4294967295
 8003338:	69bb      	ldr	r3, [r7, #24]
 800333a:	fa02 f303 	lsl.w	r3, r2, r3
 800333e:	43da      	mvns	r2, r3
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	401a      	ands	r2, r3
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003348:	f04f 31ff 	mov.w	r1, #4294967295
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	fa01 f303 	lsl.w	r3, r1, r3
 8003352:	43d9      	mvns	r1, r3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003358:	4313      	orrs	r3, r2
}
 800335a:	4618      	mov	r0, r3
 800335c:	3724      	adds	r7, #36	; 0x24
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr
	...

08003368 <SysTick_Config>:
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b082      	sub	sp, #8
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	3b01      	subs	r3, #1
 8003374:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003378:	d301      	bcc.n	800337e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800337a:	2301      	movs	r3, #1
 800337c:	e00f      	b.n	800339e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800337e:	4a0a      	ldr	r2, [pc, #40]	; (80033a8 <SysTick_Config+0x40>)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	3b01      	subs	r3, #1
 8003384:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003386:	210f      	movs	r1, #15
 8003388:	f04f 30ff 	mov.w	r0, #4294967295
 800338c:	f7ff ff8e 	bl	80032ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003390:	4b05      	ldr	r3, [pc, #20]	; (80033a8 <SysTick_Config+0x40>)
 8003392:	2200      	movs	r2, #0
 8003394:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003396:	4b04      	ldr	r3, [pc, #16]	; (80033a8 <SysTick_Config+0x40>)
 8003398:	2207      	movs	r2, #7
 800339a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800339c:	2300      	movs	r3, #0
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3708      	adds	r7, #8
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}
 80033a6:	bf00      	nop
 80033a8:	e000e010 	.word	0xe000e010

080033ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b082      	sub	sp, #8
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	f7ff ff29 	bl	800320c <__NVIC_SetPriorityGrouping>
}
 80033ba:	bf00      	nop
 80033bc:	3708      	adds	r7, #8
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}

080033c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80033c2:	b580      	push	{r7, lr}
 80033c4:	b086      	sub	sp, #24
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	4603      	mov	r3, r0
 80033ca:	60b9      	str	r1, [r7, #8]
 80033cc:	607a      	str	r2, [r7, #4]
 80033ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80033d0:	2300      	movs	r3, #0
 80033d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80033d4:	f7ff ff3e 	bl	8003254 <__NVIC_GetPriorityGrouping>
 80033d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	68b9      	ldr	r1, [r7, #8]
 80033de:	6978      	ldr	r0, [r7, #20]
 80033e0:	f7ff ff8e 	bl	8003300 <NVIC_EncodePriority>
 80033e4:	4602      	mov	r2, r0
 80033e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033ea:	4611      	mov	r1, r2
 80033ec:	4618      	mov	r0, r3
 80033ee:	f7ff ff5d 	bl	80032ac <__NVIC_SetPriority>
}
 80033f2:	bf00      	nop
 80033f4:	3718      	adds	r7, #24
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}

080033fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033fa:	b580      	push	{r7, lr}
 80033fc:	b082      	sub	sp, #8
 80033fe:	af00      	add	r7, sp, #0
 8003400:	4603      	mov	r3, r0
 8003402:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003404:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003408:	4618      	mov	r0, r3
 800340a:	f7ff ff31 	bl	8003270 <__NVIC_EnableIRQ>
}
 800340e:	bf00      	nop
 8003410:	3708      	adds	r7, #8
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}

08003416 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003416:	b580      	push	{r7, lr}
 8003418:	b082      	sub	sp, #8
 800341a:	af00      	add	r7, sp, #0
 800341c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f7ff ffa2 	bl	8003368 <SysTick_Config>
 8003424:	4603      	mov	r3, r0
}
 8003426:	4618      	mov	r0, r3
 8003428:	3708      	adds	r7, #8
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}
	...

08003430 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003430:	b480      	push	{r7}
 8003432:	b089      	sub	sp, #36	; 0x24
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
 8003438:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800343a:	2300      	movs	r3, #0
 800343c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800343e:	2300      	movs	r3, #0
 8003440:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003442:	2300      	movs	r3, #0
 8003444:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003446:	2300      	movs	r3, #0
 8003448:	61fb      	str	r3, [r7, #28]
 800344a:	e16b      	b.n	8003724 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800344c:	2201      	movs	r2, #1
 800344e:	69fb      	ldr	r3, [r7, #28]
 8003450:	fa02 f303 	lsl.w	r3, r2, r3
 8003454:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	697a      	ldr	r2, [r7, #20]
 800345c:	4013      	ands	r3, r2
 800345e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003460:	693a      	ldr	r2, [r7, #16]
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	429a      	cmp	r2, r3
 8003466:	f040 815a 	bne.w	800371e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	f003 0303 	and.w	r3, r3, #3
 8003472:	2b01      	cmp	r3, #1
 8003474:	d005      	beq.n	8003482 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800347e:	2b02      	cmp	r3, #2
 8003480:	d130      	bne.n	80034e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003488:	69fb      	ldr	r3, [r7, #28]
 800348a:	005b      	lsls	r3, r3, #1
 800348c:	2203      	movs	r2, #3
 800348e:	fa02 f303 	lsl.w	r3, r2, r3
 8003492:	43db      	mvns	r3, r3
 8003494:	69ba      	ldr	r2, [r7, #24]
 8003496:	4013      	ands	r3, r2
 8003498:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	68da      	ldr	r2, [r3, #12]
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	005b      	lsls	r3, r3, #1
 80034a2:	fa02 f303 	lsl.w	r3, r2, r3
 80034a6:	69ba      	ldr	r2, [r7, #24]
 80034a8:	4313      	orrs	r3, r2
 80034aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	69ba      	ldr	r2, [r7, #24]
 80034b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80034b8:	2201      	movs	r2, #1
 80034ba:	69fb      	ldr	r3, [r7, #28]
 80034bc:	fa02 f303 	lsl.w	r3, r2, r3
 80034c0:	43db      	mvns	r3, r3
 80034c2:	69ba      	ldr	r2, [r7, #24]
 80034c4:	4013      	ands	r3, r2
 80034c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	091b      	lsrs	r3, r3, #4
 80034ce:	f003 0201 	and.w	r2, r3, #1
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	fa02 f303 	lsl.w	r3, r2, r3
 80034d8:	69ba      	ldr	r2, [r7, #24]
 80034da:	4313      	orrs	r3, r2
 80034dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	69ba      	ldr	r2, [r7, #24]
 80034e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	f003 0303 	and.w	r3, r3, #3
 80034ec:	2b03      	cmp	r3, #3
 80034ee:	d017      	beq.n	8003520 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80034f6:	69fb      	ldr	r3, [r7, #28]
 80034f8:	005b      	lsls	r3, r3, #1
 80034fa:	2203      	movs	r2, #3
 80034fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003500:	43db      	mvns	r3, r3
 8003502:	69ba      	ldr	r2, [r7, #24]
 8003504:	4013      	ands	r3, r2
 8003506:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	689a      	ldr	r2, [r3, #8]
 800350c:	69fb      	ldr	r3, [r7, #28]
 800350e:	005b      	lsls	r3, r3, #1
 8003510:	fa02 f303 	lsl.w	r3, r2, r3
 8003514:	69ba      	ldr	r2, [r7, #24]
 8003516:	4313      	orrs	r3, r2
 8003518:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	69ba      	ldr	r2, [r7, #24]
 800351e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	f003 0303 	and.w	r3, r3, #3
 8003528:	2b02      	cmp	r3, #2
 800352a:	d123      	bne.n	8003574 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800352c:	69fb      	ldr	r3, [r7, #28]
 800352e:	08da      	lsrs	r2, r3, #3
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	3208      	adds	r2, #8
 8003534:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003538:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	f003 0307 	and.w	r3, r3, #7
 8003540:	009b      	lsls	r3, r3, #2
 8003542:	220f      	movs	r2, #15
 8003544:	fa02 f303 	lsl.w	r3, r2, r3
 8003548:	43db      	mvns	r3, r3
 800354a:	69ba      	ldr	r2, [r7, #24]
 800354c:	4013      	ands	r3, r2
 800354e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	691a      	ldr	r2, [r3, #16]
 8003554:	69fb      	ldr	r3, [r7, #28]
 8003556:	f003 0307 	and.w	r3, r3, #7
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	fa02 f303 	lsl.w	r3, r2, r3
 8003560:	69ba      	ldr	r2, [r7, #24]
 8003562:	4313      	orrs	r3, r2
 8003564:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	08da      	lsrs	r2, r3, #3
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	3208      	adds	r2, #8
 800356e:	69b9      	ldr	r1, [r7, #24]
 8003570:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800357a:	69fb      	ldr	r3, [r7, #28]
 800357c:	005b      	lsls	r3, r3, #1
 800357e:	2203      	movs	r2, #3
 8003580:	fa02 f303 	lsl.w	r3, r2, r3
 8003584:	43db      	mvns	r3, r3
 8003586:	69ba      	ldr	r2, [r7, #24]
 8003588:	4013      	ands	r3, r2
 800358a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	f003 0203 	and.w	r2, r3, #3
 8003594:	69fb      	ldr	r3, [r7, #28]
 8003596:	005b      	lsls	r3, r3, #1
 8003598:	fa02 f303 	lsl.w	r3, r2, r3
 800359c:	69ba      	ldr	r2, [r7, #24]
 800359e:	4313      	orrs	r3, r2
 80035a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	69ba      	ldr	r2, [r7, #24]
 80035a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	f000 80b4 	beq.w	800371e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035b6:	2300      	movs	r3, #0
 80035b8:	60fb      	str	r3, [r7, #12]
 80035ba:	4b60      	ldr	r3, [pc, #384]	; (800373c <HAL_GPIO_Init+0x30c>)
 80035bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035be:	4a5f      	ldr	r2, [pc, #380]	; (800373c <HAL_GPIO_Init+0x30c>)
 80035c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035c4:	6453      	str	r3, [r2, #68]	; 0x44
 80035c6:	4b5d      	ldr	r3, [pc, #372]	; (800373c <HAL_GPIO_Init+0x30c>)
 80035c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035ce:	60fb      	str	r3, [r7, #12]
 80035d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80035d2:	4a5b      	ldr	r2, [pc, #364]	; (8003740 <HAL_GPIO_Init+0x310>)
 80035d4:	69fb      	ldr	r3, [r7, #28]
 80035d6:	089b      	lsrs	r3, r3, #2
 80035d8:	3302      	adds	r3, #2
 80035da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80035e0:	69fb      	ldr	r3, [r7, #28]
 80035e2:	f003 0303 	and.w	r3, r3, #3
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	220f      	movs	r2, #15
 80035ea:	fa02 f303 	lsl.w	r3, r2, r3
 80035ee:	43db      	mvns	r3, r3
 80035f0:	69ba      	ldr	r2, [r7, #24]
 80035f2:	4013      	ands	r3, r2
 80035f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4a52      	ldr	r2, [pc, #328]	; (8003744 <HAL_GPIO_Init+0x314>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d02b      	beq.n	8003656 <HAL_GPIO_Init+0x226>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	4a51      	ldr	r2, [pc, #324]	; (8003748 <HAL_GPIO_Init+0x318>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d025      	beq.n	8003652 <HAL_GPIO_Init+0x222>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	4a50      	ldr	r2, [pc, #320]	; (800374c <HAL_GPIO_Init+0x31c>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d01f      	beq.n	800364e <HAL_GPIO_Init+0x21e>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4a4f      	ldr	r2, [pc, #316]	; (8003750 <HAL_GPIO_Init+0x320>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d019      	beq.n	800364a <HAL_GPIO_Init+0x21a>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	4a4e      	ldr	r2, [pc, #312]	; (8003754 <HAL_GPIO_Init+0x324>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d013      	beq.n	8003646 <HAL_GPIO_Init+0x216>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	4a4d      	ldr	r2, [pc, #308]	; (8003758 <HAL_GPIO_Init+0x328>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d00d      	beq.n	8003642 <HAL_GPIO_Init+0x212>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4a4c      	ldr	r2, [pc, #304]	; (800375c <HAL_GPIO_Init+0x32c>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d007      	beq.n	800363e <HAL_GPIO_Init+0x20e>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4a4b      	ldr	r2, [pc, #300]	; (8003760 <HAL_GPIO_Init+0x330>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d101      	bne.n	800363a <HAL_GPIO_Init+0x20a>
 8003636:	2307      	movs	r3, #7
 8003638:	e00e      	b.n	8003658 <HAL_GPIO_Init+0x228>
 800363a:	2308      	movs	r3, #8
 800363c:	e00c      	b.n	8003658 <HAL_GPIO_Init+0x228>
 800363e:	2306      	movs	r3, #6
 8003640:	e00a      	b.n	8003658 <HAL_GPIO_Init+0x228>
 8003642:	2305      	movs	r3, #5
 8003644:	e008      	b.n	8003658 <HAL_GPIO_Init+0x228>
 8003646:	2304      	movs	r3, #4
 8003648:	e006      	b.n	8003658 <HAL_GPIO_Init+0x228>
 800364a:	2303      	movs	r3, #3
 800364c:	e004      	b.n	8003658 <HAL_GPIO_Init+0x228>
 800364e:	2302      	movs	r3, #2
 8003650:	e002      	b.n	8003658 <HAL_GPIO_Init+0x228>
 8003652:	2301      	movs	r3, #1
 8003654:	e000      	b.n	8003658 <HAL_GPIO_Init+0x228>
 8003656:	2300      	movs	r3, #0
 8003658:	69fa      	ldr	r2, [r7, #28]
 800365a:	f002 0203 	and.w	r2, r2, #3
 800365e:	0092      	lsls	r2, r2, #2
 8003660:	4093      	lsls	r3, r2
 8003662:	69ba      	ldr	r2, [r7, #24]
 8003664:	4313      	orrs	r3, r2
 8003666:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003668:	4935      	ldr	r1, [pc, #212]	; (8003740 <HAL_GPIO_Init+0x310>)
 800366a:	69fb      	ldr	r3, [r7, #28]
 800366c:	089b      	lsrs	r3, r3, #2
 800366e:	3302      	adds	r3, #2
 8003670:	69ba      	ldr	r2, [r7, #24]
 8003672:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003676:	4b3b      	ldr	r3, [pc, #236]	; (8003764 <HAL_GPIO_Init+0x334>)
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	43db      	mvns	r3, r3
 8003680:	69ba      	ldr	r2, [r7, #24]
 8003682:	4013      	ands	r3, r2
 8003684:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800368e:	2b00      	cmp	r3, #0
 8003690:	d003      	beq.n	800369a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003692:	69ba      	ldr	r2, [r7, #24]
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	4313      	orrs	r3, r2
 8003698:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800369a:	4a32      	ldr	r2, [pc, #200]	; (8003764 <HAL_GPIO_Init+0x334>)
 800369c:	69bb      	ldr	r3, [r7, #24]
 800369e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80036a0:	4b30      	ldr	r3, [pc, #192]	; (8003764 <HAL_GPIO_Init+0x334>)
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	43db      	mvns	r3, r3
 80036aa:	69ba      	ldr	r2, [r7, #24]
 80036ac:	4013      	ands	r3, r2
 80036ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d003      	beq.n	80036c4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80036bc:	69ba      	ldr	r2, [r7, #24]
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80036c4:	4a27      	ldr	r2, [pc, #156]	; (8003764 <HAL_GPIO_Init+0x334>)
 80036c6:	69bb      	ldr	r3, [r7, #24]
 80036c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80036ca:	4b26      	ldr	r3, [pc, #152]	; (8003764 <HAL_GPIO_Init+0x334>)
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	43db      	mvns	r3, r3
 80036d4:	69ba      	ldr	r2, [r7, #24]
 80036d6:	4013      	ands	r3, r2
 80036d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d003      	beq.n	80036ee <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80036e6:	69ba      	ldr	r2, [r7, #24]
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80036ee:	4a1d      	ldr	r2, [pc, #116]	; (8003764 <HAL_GPIO_Init+0x334>)
 80036f0:	69bb      	ldr	r3, [r7, #24]
 80036f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80036f4:	4b1b      	ldr	r3, [pc, #108]	; (8003764 <HAL_GPIO_Init+0x334>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	43db      	mvns	r3, r3
 80036fe:	69ba      	ldr	r2, [r7, #24]
 8003700:	4013      	ands	r3, r2
 8003702:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800370c:	2b00      	cmp	r3, #0
 800370e:	d003      	beq.n	8003718 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003710:	69ba      	ldr	r2, [r7, #24]
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	4313      	orrs	r3, r2
 8003716:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003718:	4a12      	ldr	r2, [pc, #72]	; (8003764 <HAL_GPIO_Init+0x334>)
 800371a:	69bb      	ldr	r3, [r7, #24]
 800371c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800371e:	69fb      	ldr	r3, [r7, #28]
 8003720:	3301      	adds	r3, #1
 8003722:	61fb      	str	r3, [r7, #28]
 8003724:	69fb      	ldr	r3, [r7, #28]
 8003726:	2b0f      	cmp	r3, #15
 8003728:	f67f ae90 	bls.w	800344c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800372c:	bf00      	nop
 800372e:	bf00      	nop
 8003730:	3724      	adds	r7, #36	; 0x24
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr
 800373a:	bf00      	nop
 800373c:	40023800 	.word	0x40023800
 8003740:	40013800 	.word	0x40013800
 8003744:	40020000 	.word	0x40020000
 8003748:	40020400 	.word	0x40020400
 800374c:	40020800 	.word	0x40020800
 8003750:	40020c00 	.word	0x40020c00
 8003754:	40021000 	.word	0x40021000
 8003758:	40021400 	.word	0x40021400
 800375c:	40021800 	.word	0x40021800
 8003760:	40021c00 	.word	0x40021c00
 8003764:	40013c00 	.word	0x40013c00

08003768 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003768:	b480      	push	{r7}
 800376a:	b085      	sub	sp, #20
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	460b      	mov	r3, r1
 8003772:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	691a      	ldr	r2, [r3, #16]
 8003778:	887b      	ldrh	r3, [r7, #2]
 800377a:	4013      	ands	r3, r2
 800377c:	2b00      	cmp	r3, #0
 800377e:	d002      	beq.n	8003786 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003780:	2301      	movs	r3, #1
 8003782:	73fb      	strb	r3, [r7, #15]
 8003784:	e001      	b.n	800378a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003786:	2300      	movs	r3, #0
 8003788:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800378a:	7bfb      	ldrb	r3, [r7, #15]
}
 800378c:	4618      	mov	r0, r3
 800378e:	3714      	adds	r7, #20
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr

08003798 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003798:	b480      	push	{r7}
 800379a:	b083      	sub	sp, #12
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	460b      	mov	r3, r1
 80037a2:	807b      	strh	r3, [r7, #2]
 80037a4:	4613      	mov	r3, r2
 80037a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80037a8:	787b      	ldrb	r3, [r7, #1]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d003      	beq.n	80037b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80037ae:	887a      	ldrh	r2, [r7, #2]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80037b4:	e003      	b.n	80037be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80037b6:	887b      	ldrh	r3, [r7, #2]
 80037b8:	041a      	lsls	r2, r3, #16
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	619a      	str	r2, [r3, #24]
}
 80037be:	bf00      	nop
 80037c0:	370c      	adds	r7, #12
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr
	...

080037cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b086      	sub	sp, #24
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d101      	bne.n	80037de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e267      	b.n	8003cae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 0301 	and.w	r3, r3, #1
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d075      	beq.n	80038d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80037ea:	4b88      	ldr	r3, [pc, #544]	; (8003a0c <HAL_RCC_OscConfig+0x240>)
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	f003 030c 	and.w	r3, r3, #12
 80037f2:	2b04      	cmp	r3, #4
 80037f4:	d00c      	beq.n	8003810 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037f6:	4b85      	ldr	r3, [pc, #532]	; (8003a0c <HAL_RCC_OscConfig+0x240>)
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80037fe:	2b08      	cmp	r3, #8
 8003800:	d112      	bne.n	8003828 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003802:	4b82      	ldr	r3, [pc, #520]	; (8003a0c <HAL_RCC_OscConfig+0x240>)
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800380a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800380e:	d10b      	bne.n	8003828 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003810:	4b7e      	ldr	r3, [pc, #504]	; (8003a0c <HAL_RCC_OscConfig+0x240>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003818:	2b00      	cmp	r3, #0
 800381a:	d05b      	beq.n	80038d4 <HAL_RCC_OscConfig+0x108>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d157      	bne.n	80038d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	e242      	b.n	8003cae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003830:	d106      	bne.n	8003840 <HAL_RCC_OscConfig+0x74>
 8003832:	4b76      	ldr	r3, [pc, #472]	; (8003a0c <HAL_RCC_OscConfig+0x240>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a75      	ldr	r2, [pc, #468]	; (8003a0c <HAL_RCC_OscConfig+0x240>)
 8003838:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800383c:	6013      	str	r3, [r2, #0]
 800383e:	e01d      	b.n	800387c <HAL_RCC_OscConfig+0xb0>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003848:	d10c      	bne.n	8003864 <HAL_RCC_OscConfig+0x98>
 800384a:	4b70      	ldr	r3, [pc, #448]	; (8003a0c <HAL_RCC_OscConfig+0x240>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a6f      	ldr	r2, [pc, #444]	; (8003a0c <HAL_RCC_OscConfig+0x240>)
 8003850:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003854:	6013      	str	r3, [r2, #0]
 8003856:	4b6d      	ldr	r3, [pc, #436]	; (8003a0c <HAL_RCC_OscConfig+0x240>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a6c      	ldr	r2, [pc, #432]	; (8003a0c <HAL_RCC_OscConfig+0x240>)
 800385c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003860:	6013      	str	r3, [r2, #0]
 8003862:	e00b      	b.n	800387c <HAL_RCC_OscConfig+0xb0>
 8003864:	4b69      	ldr	r3, [pc, #420]	; (8003a0c <HAL_RCC_OscConfig+0x240>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a68      	ldr	r2, [pc, #416]	; (8003a0c <HAL_RCC_OscConfig+0x240>)
 800386a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800386e:	6013      	str	r3, [r2, #0]
 8003870:	4b66      	ldr	r3, [pc, #408]	; (8003a0c <HAL_RCC_OscConfig+0x240>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a65      	ldr	r2, [pc, #404]	; (8003a0c <HAL_RCC_OscConfig+0x240>)
 8003876:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800387a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d013      	beq.n	80038ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003884:	f7ff fc92 	bl	80031ac <HAL_GetTick>
 8003888:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800388a:	e008      	b.n	800389e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800388c:	f7ff fc8e 	bl	80031ac <HAL_GetTick>
 8003890:	4602      	mov	r2, r0
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	1ad3      	subs	r3, r2, r3
 8003896:	2b64      	cmp	r3, #100	; 0x64
 8003898:	d901      	bls.n	800389e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800389a:	2303      	movs	r3, #3
 800389c:	e207      	b.n	8003cae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800389e:	4b5b      	ldr	r3, [pc, #364]	; (8003a0c <HAL_RCC_OscConfig+0x240>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d0f0      	beq.n	800388c <HAL_RCC_OscConfig+0xc0>
 80038aa:	e014      	b.n	80038d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038ac:	f7ff fc7e 	bl	80031ac <HAL_GetTick>
 80038b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038b2:	e008      	b.n	80038c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038b4:	f7ff fc7a 	bl	80031ac <HAL_GetTick>
 80038b8:	4602      	mov	r2, r0
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	1ad3      	subs	r3, r2, r3
 80038be:	2b64      	cmp	r3, #100	; 0x64
 80038c0:	d901      	bls.n	80038c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80038c2:	2303      	movs	r3, #3
 80038c4:	e1f3      	b.n	8003cae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038c6:	4b51      	ldr	r3, [pc, #324]	; (8003a0c <HAL_RCC_OscConfig+0x240>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d1f0      	bne.n	80038b4 <HAL_RCC_OscConfig+0xe8>
 80038d2:	e000      	b.n	80038d6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 0302 	and.w	r3, r3, #2
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d063      	beq.n	80039aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80038e2:	4b4a      	ldr	r3, [pc, #296]	; (8003a0c <HAL_RCC_OscConfig+0x240>)
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	f003 030c 	and.w	r3, r3, #12
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d00b      	beq.n	8003906 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038ee:	4b47      	ldr	r3, [pc, #284]	; (8003a0c <HAL_RCC_OscConfig+0x240>)
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80038f6:	2b08      	cmp	r3, #8
 80038f8:	d11c      	bne.n	8003934 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038fa:	4b44      	ldr	r3, [pc, #272]	; (8003a0c <HAL_RCC_OscConfig+0x240>)
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003902:	2b00      	cmp	r3, #0
 8003904:	d116      	bne.n	8003934 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003906:	4b41      	ldr	r3, [pc, #260]	; (8003a0c <HAL_RCC_OscConfig+0x240>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 0302 	and.w	r3, r3, #2
 800390e:	2b00      	cmp	r3, #0
 8003910:	d005      	beq.n	800391e <HAL_RCC_OscConfig+0x152>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	2b01      	cmp	r3, #1
 8003918:	d001      	beq.n	800391e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e1c7      	b.n	8003cae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800391e:	4b3b      	ldr	r3, [pc, #236]	; (8003a0c <HAL_RCC_OscConfig+0x240>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	691b      	ldr	r3, [r3, #16]
 800392a:	00db      	lsls	r3, r3, #3
 800392c:	4937      	ldr	r1, [pc, #220]	; (8003a0c <HAL_RCC_OscConfig+0x240>)
 800392e:	4313      	orrs	r3, r2
 8003930:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003932:	e03a      	b.n	80039aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	68db      	ldr	r3, [r3, #12]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d020      	beq.n	800397e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800393c:	4b34      	ldr	r3, [pc, #208]	; (8003a10 <HAL_RCC_OscConfig+0x244>)
 800393e:	2201      	movs	r2, #1
 8003940:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003942:	f7ff fc33 	bl	80031ac <HAL_GetTick>
 8003946:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003948:	e008      	b.n	800395c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800394a:	f7ff fc2f 	bl	80031ac <HAL_GetTick>
 800394e:	4602      	mov	r2, r0
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	1ad3      	subs	r3, r2, r3
 8003954:	2b02      	cmp	r3, #2
 8003956:	d901      	bls.n	800395c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003958:	2303      	movs	r3, #3
 800395a:	e1a8      	b.n	8003cae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800395c:	4b2b      	ldr	r3, [pc, #172]	; (8003a0c <HAL_RCC_OscConfig+0x240>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 0302 	and.w	r3, r3, #2
 8003964:	2b00      	cmp	r3, #0
 8003966:	d0f0      	beq.n	800394a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003968:	4b28      	ldr	r3, [pc, #160]	; (8003a0c <HAL_RCC_OscConfig+0x240>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	691b      	ldr	r3, [r3, #16]
 8003974:	00db      	lsls	r3, r3, #3
 8003976:	4925      	ldr	r1, [pc, #148]	; (8003a0c <HAL_RCC_OscConfig+0x240>)
 8003978:	4313      	orrs	r3, r2
 800397a:	600b      	str	r3, [r1, #0]
 800397c:	e015      	b.n	80039aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800397e:	4b24      	ldr	r3, [pc, #144]	; (8003a10 <HAL_RCC_OscConfig+0x244>)
 8003980:	2200      	movs	r2, #0
 8003982:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003984:	f7ff fc12 	bl	80031ac <HAL_GetTick>
 8003988:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800398a:	e008      	b.n	800399e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800398c:	f7ff fc0e 	bl	80031ac <HAL_GetTick>
 8003990:	4602      	mov	r2, r0
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	2b02      	cmp	r3, #2
 8003998:	d901      	bls.n	800399e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800399a:	2303      	movs	r3, #3
 800399c:	e187      	b.n	8003cae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800399e:	4b1b      	ldr	r3, [pc, #108]	; (8003a0c <HAL_RCC_OscConfig+0x240>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 0302 	and.w	r3, r3, #2
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d1f0      	bne.n	800398c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 0308 	and.w	r3, r3, #8
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d036      	beq.n	8003a24 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	695b      	ldr	r3, [r3, #20]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d016      	beq.n	80039ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039be:	4b15      	ldr	r3, [pc, #84]	; (8003a14 <HAL_RCC_OscConfig+0x248>)
 80039c0:	2201      	movs	r2, #1
 80039c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039c4:	f7ff fbf2 	bl	80031ac <HAL_GetTick>
 80039c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039ca:	e008      	b.n	80039de <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039cc:	f7ff fbee 	bl	80031ac <HAL_GetTick>
 80039d0:	4602      	mov	r2, r0
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	1ad3      	subs	r3, r2, r3
 80039d6:	2b02      	cmp	r3, #2
 80039d8:	d901      	bls.n	80039de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80039da:	2303      	movs	r3, #3
 80039dc:	e167      	b.n	8003cae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039de:	4b0b      	ldr	r3, [pc, #44]	; (8003a0c <HAL_RCC_OscConfig+0x240>)
 80039e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039e2:	f003 0302 	and.w	r3, r3, #2
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d0f0      	beq.n	80039cc <HAL_RCC_OscConfig+0x200>
 80039ea:	e01b      	b.n	8003a24 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039ec:	4b09      	ldr	r3, [pc, #36]	; (8003a14 <HAL_RCC_OscConfig+0x248>)
 80039ee:	2200      	movs	r2, #0
 80039f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039f2:	f7ff fbdb 	bl	80031ac <HAL_GetTick>
 80039f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039f8:	e00e      	b.n	8003a18 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039fa:	f7ff fbd7 	bl	80031ac <HAL_GetTick>
 80039fe:	4602      	mov	r2, r0
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	1ad3      	subs	r3, r2, r3
 8003a04:	2b02      	cmp	r3, #2
 8003a06:	d907      	bls.n	8003a18 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003a08:	2303      	movs	r3, #3
 8003a0a:	e150      	b.n	8003cae <HAL_RCC_OscConfig+0x4e2>
 8003a0c:	40023800 	.word	0x40023800
 8003a10:	42470000 	.word	0x42470000
 8003a14:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a18:	4b88      	ldr	r3, [pc, #544]	; (8003c3c <HAL_RCC_OscConfig+0x470>)
 8003a1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a1c:	f003 0302 	and.w	r3, r3, #2
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d1ea      	bne.n	80039fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 0304 	and.w	r3, r3, #4
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	f000 8097 	beq.w	8003b60 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a32:	2300      	movs	r3, #0
 8003a34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a36:	4b81      	ldr	r3, [pc, #516]	; (8003c3c <HAL_RCC_OscConfig+0x470>)
 8003a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d10f      	bne.n	8003a62 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a42:	2300      	movs	r3, #0
 8003a44:	60bb      	str	r3, [r7, #8]
 8003a46:	4b7d      	ldr	r3, [pc, #500]	; (8003c3c <HAL_RCC_OscConfig+0x470>)
 8003a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a4a:	4a7c      	ldr	r2, [pc, #496]	; (8003c3c <HAL_RCC_OscConfig+0x470>)
 8003a4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a50:	6413      	str	r3, [r2, #64]	; 0x40
 8003a52:	4b7a      	ldr	r3, [pc, #488]	; (8003c3c <HAL_RCC_OscConfig+0x470>)
 8003a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a5a:	60bb      	str	r3, [r7, #8]
 8003a5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a62:	4b77      	ldr	r3, [pc, #476]	; (8003c40 <HAL_RCC_OscConfig+0x474>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d118      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a6e:	4b74      	ldr	r3, [pc, #464]	; (8003c40 <HAL_RCC_OscConfig+0x474>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a73      	ldr	r2, [pc, #460]	; (8003c40 <HAL_RCC_OscConfig+0x474>)
 8003a74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a7a:	f7ff fb97 	bl	80031ac <HAL_GetTick>
 8003a7e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a80:	e008      	b.n	8003a94 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a82:	f7ff fb93 	bl	80031ac <HAL_GetTick>
 8003a86:	4602      	mov	r2, r0
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	1ad3      	subs	r3, r2, r3
 8003a8c:	2b02      	cmp	r3, #2
 8003a8e:	d901      	bls.n	8003a94 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003a90:	2303      	movs	r3, #3
 8003a92:	e10c      	b.n	8003cae <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a94:	4b6a      	ldr	r3, [pc, #424]	; (8003c40 <HAL_RCC_OscConfig+0x474>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d0f0      	beq.n	8003a82 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d106      	bne.n	8003ab6 <HAL_RCC_OscConfig+0x2ea>
 8003aa8:	4b64      	ldr	r3, [pc, #400]	; (8003c3c <HAL_RCC_OscConfig+0x470>)
 8003aaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aac:	4a63      	ldr	r2, [pc, #396]	; (8003c3c <HAL_RCC_OscConfig+0x470>)
 8003aae:	f043 0301 	orr.w	r3, r3, #1
 8003ab2:	6713      	str	r3, [r2, #112]	; 0x70
 8003ab4:	e01c      	b.n	8003af0 <HAL_RCC_OscConfig+0x324>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	2b05      	cmp	r3, #5
 8003abc:	d10c      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x30c>
 8003abe:	4b5f      	ldr	r3, [pc, #380]	; (8003c3c <HAL_RCC_OscConfig+0x470>)
 8003ac0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ac2:	4a5e      	ldr	r2, [pc, #376]	; (8003c3c <HAL_RCC_OscConfig+0x470>)
 8003ac4:	f043 0304 	orr.w	r3, r3, #4
 8003ac8:	6713      	str	r3, [r2, #112]	; 0x70
 8003aca:	4b5c      	ldr	r3, [pc, #368]	; (8003c3c <HAL_RCC_OscConfig+0x470>)
 8003acc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ace:	4a5b      	ldr	r2, [pc, #364]	; (8003c3c <HAL_RCC_OscConfig+0x470>)
 8003ad0:	f043 0301 	orr.w	r3, r3, #1
 8003ad4:	6713      	str	r3, [r2, #112]	; 0x70
 8003ad6:	e00b      	b.n	8003af0 <HAL_RCC_OscConfig+0x324>
 8003ad8:	4b58      	ldr	r3, [pc, #352]	; (8003c3c <HAL_RCC_OscConfig+0x470>)
 8003ada:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003adc:	4a57      	ldr	r2, [pc, #348]	; (8003c3c <HAL_RCC_OscConfig+0x470>)
 8003ade:	f023 0301 	bic.w	r3, r3, #1
 8003ae2:	6713      	str	r3, [r2, #112]	; 0x70
 8003ae4:	4b55      	ldr	r3, [pc, #340]	; (8003c3c <HAL_RCC_OscConfig+0x470>)
 8003ae6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ae8:	4a54      	ldr	r2, [pc, #336]	; (8003c3c <HAL_RCC_OscConfig+0x470>)
 8003aea:	f023 0304 	bic.w	r3, r3, #4
 8003aee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d015      	beq.n	8003b24 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003af8:	f7ff fb58 	bl	80031ac <HAL_GetTick>
 8003afc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003afe:	e00a      	b.n	8003b16 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b00:	f7ff fb54 	bl	80031ac <HAL_GetTick>
 8003b04:	4602      	mov	r2, r0
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	1ad3      	subs	r3, r2, r3
 8003b0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d901      	bls.n	8003b16 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003b12:	2303      	movs	r3, #3
 8003b14:	e0cb      	b.n	8003cae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b16:	4b49      	ldr	r3, [pc, #292]	; (8003c3c <HAL_RCC_OscConfig+0x470>)
 8003b18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b1a:	f003 0302 	and.w	r3, r3, #2
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d0ee      	beq.n	8003b00 <HAL_RCC_OscConfig+0x334>
 8003b22:	e014      	b.n	8003b4e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b24:	f7ff fb42 	bl	80031ac <HAL_GetTick>
 8003b28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b2a:	e00a      	b.n	8003b42 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b2c:	f7ff fb3e 	bl	80031ac <HAL_GetTick>
 8003b30:	4602      	mov	r2, r0
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d901      	bls.n	8003b42 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003b3e:	2303      	movs	r3, #3
 8003b40:	e0b5      	b.n	8003cae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b42:	4b3e      	ldr	r3, [pc, #248]	; (8003c3c <HAL_RCC_OscConfig+0x470>)
 8003b44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b46:	f003 0302 	and.w	r3, r3, #2
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d1ee      	bne.n	8003b2c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b4e:	7dfb      	ldrb	r3, [r7, #23]
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d105      	bne.n	8003b60 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b54:	4b39      	ldr	r3, [pc, #228]	; (8003c3c <HAL_RCC_OscConfig+0x470>)
 8003b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b58:	4a38      	ldr	r2, [pc, #224]	; (8003c3c <HAL_RCC_OscConfig+0x470>)
 8003b5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b5e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	699b      	ldr	r3, [r3, #24]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	f000 80a1 	beq.w	8003cac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b6a:	4b34      	ldr	r3, [pc, #208]	; (8003c3c <HAL_RCC_OscConfig+0x470>)
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	f003 030c 	and.w	r3, r3, #12
 8003b72:	2b08      	cmp	r3, #8
 8003b74:	d05c      	beq.n	8003c30 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	699b      	ldr	r3, [r3, #24]
 8003b7a:	2b02      	cmp	r3, #2
 8003b7c:	d141      	bne.n	8003c02 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b7e:	4b31      	ldr	r3, [pc, #196]	; (8003c44 <HAL_RCC_OscConfig+0x478>)
 8003b80:	2200      	movs	r2, #0
 8003b82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b84:	f7ff fb12 	bl	80031ac <HAL_GetTick>
 8003b88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b8a:	e008      	b.n	8003b9e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b8c:	f7ff fb0e 	bl	80031ac <HAL_GetTick>
 8003b90:	4602      	mov	r2, r0
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	1ad3      	subs	r3, r2, r3
 8003b96:	2b02      	cmp	r3, #2
 8003b98:	d901      	bls.n	8003b9e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	e087      	b.n	8003cae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b9e:	4b27      	ldr	r3, [pc, #156]	; (8003c3c <HAL_RCC_OscConfig+0x470>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d1f0      	bne.n	8003b8c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	69da      	ldr	r2, [r3, #28]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6a1b      	ldr	r3, [r3, #32]
 8003bb2:	431a      	orrs	r2, r3
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb8:	019b      	lsls	r3, r3, #6
 8003bba:	431a      	orrs	r2, r3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bc0:	085b      	lsrs	r3, r3, #1
 8003bc2:	3b01      	subs	r3, #1
 8003bc4:	041b      	lsls	r3, r3, #16
 8003bc6:	431a      	orrs	r2, r3
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bcc:	061b      	lsls	r3, r3, #24
 8003bce:	491b      	ldr	r1, [pc, #108]	; (8003c3c <HAL_RCC_OscConfig+0x470>)
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003bd4:	4b1b      	ldr	r3, [pc, #108]	; (8003c44 <HAL_RCC_OscConfig+0x478>)
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bda:	f7ff fae7 	bl	80031ac <HAL_GetTick>
 8003bde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003be0:	e008      	b.n	8003bf4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003be2:	f7ff fae3 	bl	80031ac <HAL_GetTick>
 8003be6:	4602      	mov	r2, r0
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	1ad3      	subs	r3, r2, r3
 8003bec:	2b02      	cmp	r3, #2
 8003bee:	d901      	bls.n	8003bf4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003bf0:	2303      	movs	r3, #3
 8003bf2:	e05c      	b.n	8003cae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bf4:	4b11      	ldr	r3, [pc, #68]	; (8003c3c <HAL_RCC_OscConfig+0x470>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d0f0      	beq.n	8003be2 <HAL_RCC_OscConfig+0x416>
 8003c00:	e054      	b.n	8003cac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c02:	4b10      	ldr	r3, [pc, #64]	; (8003c44 <HAL_RCC_OscConfig+0x478>)
 8003c04:	2200      	movs	r2, #0
 8003c06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c08:	f7ff fad0 	bl	80031ac <HAL_GetTick>
 8003c0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c0e:	e008      	b.n	8003c22 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c10:	f7ff facc 	bl	80031ac <HAL_GetTick>
 8003c14:	4602      	mov	r2, r0
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	1ad3      	subs	r3, r2, r3
 8003c1a:	2b02      	cmp	r3, #2
 8003c1c:	d901      	bls.n	8003c22 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003c1e:	2303      	movs	r3, #3
 8003c20:	e045      	b.n	8003cae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c22:	4b06      	ldr	r3, [pc, #24]	; (8003c3c <HAL_RCC_OscConfig+0x470>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d1f0      	bne.n	8003c10 <HAL_RCC_OscConfig+0x444>
 8003c2e:	e03d      	b.n	8003cac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	699b      	ldr	r3, [r3, #24]
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d107      	bne.n	8003c48 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	e038      	b.n	8003cae <HAL_RCC_OscConfig+0x4e2>
 8003c3c:	40023800 	.word	0x40023800
 8003c40:	40007000 	.word	0x40007000
 8003c44:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003c48:	4b1b      	ldr	r3, [pc, #108]	; (8003cb8 <HAL_RCC_OscConfig+0x4ec>)
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	699b      	ldr	r3, [r3, #24]
 8003c52:	2b01      	cmp	r3, #1
 8003c54:	d028      	beq.n	8003ca8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d121      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d11a      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c72:	68fa      	ldr	r2, [r7, #12]
 8003c74:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003c78:	4013      	ands	r3, r2
 8003c7a:	687a      	ldr	r2, [r7, #4]
 8003c7c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c7e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d111      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c8e:	085b      	lsrs	r3, r3, #1
 8003c90:	3b01      	subs	r3, #1
 8003c92:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d107      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d001      	beq.n	8003cac <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e000      	b.n	8003cae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003cac:	2300      	movs	r3, #0
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3718      	adds	r7, #24
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}
 8003cb6:	bf00      	nop
 8003cb8:	40023800 	.word	0x40023800

08003cbc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b084      	sub	sp, #16
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
 8003cc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d101      	bne.n	8003cd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	e0cc      	b.n	8003e6a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003cd0:	4b68      	ldr	r3, [pc, #416]	; (8003e74 <HAL_RCC_ClockConfig+0x1b8>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 0307 	and.w	r3, r3, #7
 8003cd8:	683a      	ldr	r2, [r7, #0]
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d90c      	bls.n	8003cf8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cde:	4b65      	ldr	r3, [pc, #404]	; (8003e74 <HAL_RCC_ClockConfig+0x1b8>)
 8003ce0:	683a      	ldr	r2, [r7, #0]
 8003ce2:	b2d2      	uxtb	r2, r2
 8003ce4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ce6:	4b63      	ldr	r3, [pc, #396]	; (8003e74 <HAL_RCC_ClockConfig+0x1b8>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 0307 	and.w	r3, r3, #7
 8003cee:	683a      	ldr	r2, [r7, #0]
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d001      	beq.n	8003cf8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	e0b8      	b.n	8003e6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 0302 	and.w	r3, r3, #2
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d020      	beq.n	8003d46 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f003 0304 	and.w	r3, r3, #4
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d005      	beq.n	8003d1c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d10:	4b59      	ldr	r3, [pc, #356]	; (8003e78 <HAL_RCC_ClockConfig+0x1bc>)
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	4a58      	ldr	r2, [pc, #352]	; (8003e78 <HAL_RCC_ClockConfig+0x1bc>)
 8003d16:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003d1a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 0308 	and.w	r3, r3, #8
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d005      	beq.n	8003d34 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d28:	4b53      	ldr	r3, [pc, #332]	; (8003e78 <HAL_RCC_ClockConfig+0x1bc>)
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	4a52      	ldr	r2, [pc, #328]	; (8003e78 <HAL_RCC_ClockConfig+0x1bc>)
 8003d2e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003d32:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d34:	4b50      	ldr	r3, [pc, #320]	; (8003e78 <HAL_RCC_ClockConfig+0x1bc>)
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	494d      	ldr	r1, [pc, #308]	; (8003e78 <HAL_RCC_ClockConfig+0x1bc>)
 8003d42:	4313      	orrs	r3, r2
 8003d44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 0301 	and.w	r3, r3, #1
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d044      	beq.n	8003ddc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	2b01      	cmp	r3, #1
 8003d58:	d107      	bne.n	8003d6a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d5a:	4b47      	ldr	r3, [pc, #284]	; (8003e78 <HAL_RCC_ClockConfig+0x1bc>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d119      	bne.n	8003d9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e07f      	b.n	8003e6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	2b02      	cmp	r3, #2
 8003d70:	d003      	beq.n	8003d7a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d76:	2b03      	cmp	r3, #3
 8003d78:	d107      	bne.n	8003d8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d7a:	4b3f      	ldr	r3, [pc, #252]	; (8003e78 <HAL_RCC_ClockConfig+0x1bc>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d109      	bne.n	8003d9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e06f      	b.n	8003e6a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d8a:	4b3b      	ldr	r3, [pc, #236]	; (8003e78 <HAL_RCC_ClockConfig+0x1bc>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 0302 	and.w	r3, r3, #2
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d101      	bne.n	8003d9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	e067      	b.n	8003e6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d9a:	4b37      	ldr	r3, [pc, #220]	; (8003e78 <HAL_RCC_ClockConfig+0x1bc>)
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	f023 0203 	bic.w	r2, r3, #3
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	4934      	ldr	r1, [pc, #208]	; (8003e78 <HAL_RCC_ClockConfig+0x1bc>)
 8003da8:	4313      	orrs	r3, r2
 8003daa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003dac:	f7ff f9fe 	bl	80031ac <HAL_GetTick>
 8003db0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003db2:	e00a      	b.n	8003dca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003db4:	f7ff f9fa 	bl	80031ac <HAL_GetTick>
 8003db8:	4602      	mov	r2, r0
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	1ad3      	subs	r3, r2, r3
 8003dbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d901      	bls.n	8003dca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003dc6:	2303      	movs	r3, #3
 8003dc8:	e04f      	b.n	8003e6a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dca:	4b2b      	ldr	r3, [pc, #172]	; (8003e78 <HAL_RCC_ClockConfig+0x1bc>)
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	f003 020c 	and.w	r2, r3, #12
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	009b      	lsls	r3, r3, #2
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d1eb      	bne.n	8003db4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ddc:	4b25      	ldr	r3, [pc, #148]	; (8003e74 <HAL_RCC_ClockConfig+0x1b8>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f003 0307 	and.w	r3, r3, #7
 8003de4:	683a      	ldr	r2, [r7, #0]
 8003de6:	429a      	cmp	r2, r3
 8003de8:	d20c      	bcs.n	8003e04 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dea:	4b22      	ldr	r3, [pc, #136]	; (8003e74 <HAL_RCC_ClockConfig+0x1b8>)
 8003dec:	683a      	ldr	r2, [r7, #0]
 8003dee:	b2d2      	uxtb	r2, r2
 8003df0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003df2:	4b20      	ldr	r3, [pc, #128]	; (8003e74 <HAL_RCC_ClockConfig+0x1b8>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 0307 	and.w	r3, r3, #7
 8003dfa:	683a      	ldr	r2, [r7, #0]
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d001      	beq.n	8003e04 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	e032      	b.n	8003e6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 0304 	and.w	r3, r3, #4
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d008      	beq.n	8003e22 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e10:	4b19      	ldr	r3, [pc, #100]	; (8003e78 <HAL_RCC_ClockConfig+0x1bc>)
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	68db      	ldr	r3, [r3, #12]
 8003e1c:	4916      	ldr	r1, [pc, #88]	; (8003e78 <HAL_RCC_ClockConfig+0x1bc>)
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 0308 	and.w	r3, r3, #8
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d009      	beq.n	8003e42 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e2e:	4b12      	ldr	r3, [pc, #72]	; (8003e78 <HAL_RCC_ClockConfig+0x1bc>)
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	691b      	ldr	r3, [r3, #16]
 8003e3a:	00db      	lsls	r3, r3, #3
 8003e3c:	490e      	ldr	r1, [pc, #56]	; (8003e78 <HAL_RCC_ClockConfig+0x1bc>)
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003e42:	f000 f821 	bl	8003e88 <HAL_RCC_GetSysClockFreq>
 8003e46:	4602      	mov	r2, r0
 8003e48:	4b0b      	ldr	r3, [pc, #44]	; (8003e78 <HAL_RCC_ClockConfig+0x1bc>)
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	091b      	lsrs	r3, r3, #4
 8003e4e:	f003 030f 	and.w	r3, r3, #15
 8003e52:	490a      	ldr	r1, [pc, #40]	; (8003e7c <HAL_RCC_ClockConfig+0x1c0>)
 8003e54:	5ccb      	ldrb	r3, [r1, r3]
 8003e56:	fa22 f303 	lsr.w	r3, r2, r3
 8003e5a:	4a09      	ldr	r2, [pc, #36]	; (8003e80 <HAL_RCC_ClockConfig+0x1c4>)
 8003e5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003e5e:	4b09      	ldr	r3, [pc, #36]	; (8003e84 <HAL_RCC_ClockConfig+0x1c8>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4618      	mov	r0, r3
 8003e64:	f7ff f95e 	bl	8003124 <HAL_InitTick>

  return HAL_OK;
 8003e68:	2300      	movs	r3, #0
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3710      	adds	r7, #16
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}
 8003e72:	bf00      	nop
 8003e74:	40023c00 	.word	0x40023c00
 8003e78:	40023800 	.word	0x40023800
 8003e7c:	080057e0 	.word	0x080057e0
 8003e80:	20000000 	.word	0x20000000
 8003e84:	20000010 	.word	0x20000010

08003e88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e8c:	b090      	sub	sp, #64	; 0x40
 8003e8e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003e90:	2300      	movs	r3, #0
 8003e92:	637b      	str	r3, [r7, #52]	; 0x34
 8003e94:	2300      	movs	r3, #0
 8003e96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e98:	2300      	movs	r3, #0
 8003e9a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ea0:	4b59      	ldr	r3, [pc, #356]	; (8004008 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	f003 030c 	and.w	r3, r3, #12
 8003ea8:	2b08      	cmp	r3, #8
 8003eaa:	d00d      	beq.n	8003ec8 <HAL_RCC_GetSysClockFreq+0x40>
 8003eac:	2b08      	cmp	r3, #8
 8003eae:	f200 80a1 	bhi.w	8003ff4 <HAL_RCC_GetSysClockFreq+0x16c>
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d002      	beq.n	8003ebc <HAL_RCC_GetSysClockFreq+0x34>
 8003eb6:	2b04      	cmp	r3, #4
 8003eb8:	d003      	beq.n	8003ec2 <HAL_RCC_GetSysClockFreq+0x3a>
 8003eba:	e09b      	b.n	8003ff4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ebc:	4b53      	ldr	r3, [pc, #332]	; (800400c <HAL_RCC_GetSysClockFreq+0x184>)
 8003ebe:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003ec0:	e09b      	b.n	8003ffa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ec2:	4b53      	ldr	r3, [pc, #332]	; (8004010 <HAL_RCC_GetSysClockFreq+0x188>)
 8003ec4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003ec6:	e098      	b.n	8003ffa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ec8:	4b4f      	ldr	r3, [pc, #316]	; (8004008 <HAL_RCC_GetSysClockFreq+0x180>)
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ed0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ed2:	4b4d      	ldr	r3, [pc, #308]	; (8004008 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d028      	beq.n	8003f30 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ede:	4b4a      	ldr	r3, [pc, #296]	; (8004008 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	099b      	lsrs	r3, r3, #6
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	623b      	str	r3, [r7, #32]
 8003ee8:	627a      	str	r2, [r7, #36]	; 0x24
 8003eea:	6a3b      	ldr	r3, [r7, #32]
 8003eec:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003ef0:	2100      	movs	r1, #0
 8003ef2:	4b47      	ldr	r3, [pc, #284]	; (8004010 <HAL_RCC_GetSysClockFreq+0x188>)
 8003ef4:	fb03 f201 	mul.w	r2, r3, r1
 8003ef8:	2300      	movs	r3, #0
 8003efa:	fb00 f303 	mul.w	r3, r0, r3
 8003efe:	4413      	add	r3, r2
 8003f00:	4a43      	ldr	r2, [pc, #268]	; (8004010 <HAL_RCC_GetSysClockFreq+0x188>)
 8003f02:	fba0 1202 	umull	r1, r2, r0, r2
 8003f06:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f08:	460a      	mov	r2, r1
 8003f0a:	62ba      	str	r2, [r7, #40]	; 0x28
 8003f0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f0e:	4413      	add	r3, r2
 8003f10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f14:	2200      	movs	r2, #0
 8003f16:	61bb      	str	r3, [r7, #24]
 8003f18:	61fa      	str	r2, [r7, #28]
 8003f1a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f1e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003f22:	f7fc f959 	bl	80001d8 <__aeabi_uldivmod>
 8003f26:	4602      	mov	r2, r0
 8003f28:	460b      	mov	r3, r1
 8003f2a:	4613      	mov	r3, r2
 8003f2c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f2e:	e053      	b.n	8003fd8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f30:	4b35      	ldr	r3, [pc, #212]	; (8004008 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	099b      	lsrs	r3, r3, #6
 8003f36:	2200      	movs	r2, #0
 8003f38:	613b      	str	r3, [r7, #16]
 8003f3a:	617a      	str	r2, [r7, #20]
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003f42:	f04f 0b00 	mov.w	fp, #0
 8003f46:	4652      	mov	r2, sl
 8003f48:	465b      	mov	r3, fp
 8003f4a:	f04f 0000 	mov.w	r0, #0
 8003f4e:	f04f 0100 	mov.w	r1, #0
 8003f52:	0159      	lsls	r1, r3, #5
 8003f54:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f58:	0150      	lsls	r0, r2, #5
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	460b      	mov	r3, r1
 8003f5e:	ebb2 080a 	subs.w	r8, r2, sl
 8003f62:	eb63 090b 	sbc.w	r9, r3, fp
 8003f66:	f04f 0200 	mov.w	r2, #0
 8003f6a:	f04f 0300 	mov.w	r3, #0
 8003f6e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003f72:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003f76:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003f7a:	ebb2 0408 	subs.w	r4, r2, r8
 8003f7e:	eb63 0509 	sbc.w	r5, r3, r9
 8003f82:	f04f 0200 	mov.w	r2, #0
 8003f86:	f04f 0300 	mov.w	r3, #0
 8003f8a:	00eb      	lsls	r3, r5, #3
 8003f8c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f90:	00e2      	lsls	r2, r4, #3
 8003f92:	4614      	mov	r4, r2
 8003f94:	461d      	mov	r5, r3
 8003f96:	eb14 030a 	adds.w	r3, r4, sl
 8003f9a:	603b      	str	r3, [r7, #0]
 8003f9c:	eb45 030b 	adc.w	r3, r5, fp
 8003fa0:	607b      	str	r3, [r7, #4]
 8003fa2:	f04f 0200 	mov.w	r2, #0
 8003fa6:	f04f 0300 	mov.w	r3, #0
 8003faa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003fae:	4629      	mov	r1, r5
 8003fb0:	028b      	lsls	r3, r1, #10
 8003fb2:	4621      	mov	r1, r4
 8003fb4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003fb8:	4621      	mov	r1, r4
 8003fba:	028a      	lsls	r2, r1, #10
 8003fbc:	4610      	mov	r0, r2
 8003fbe:	4619      	mov	r1, r3
 8003fc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	60bb      	str	r3, [r7, #8]
 8003fc6:	60fa      	str	r2, [r7, #12]
 8003fc8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003fcc:	f7fc f904 	bl	80001d8 <__aeabi_uldivmod>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	460b      	mov	r3, r1
 8003fd4:	4613      	mov	r3, r2
 8003fd6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003fd8:	4b0b      	ldr	r3, [pc, #44]	; (8004008 <HAL_RCC_GetSysClockFreq+0x180>)
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	0c1b      	lsrs	r3, r3, #16
 8003fde:	f003 0303 	and.w	r3, r3, #3
 8003fe2:	3301      	adds	r3, #1
 8003fe4:	005b      	lsls	r3, r3, #1
 8003fe6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003fe8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fec:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ff0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003ff2:	e002      	b.n	8003ffa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ff4:	4b05      	ldr	r3, [pc, #20]	; (800400c <HAL_RCC_GetSysClockFreq+0x184>)
 8003ff6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003ff8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3740      	adds	r7, #64	; 0x40
 8004000:	46bd      	mov	sp, r7
 8004002:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004006:	bf00      	nop
 8004008:	40023800 	.word	0x40023800
 800400c:	00f42400 	.word	0x00f42400
 8004010:	017d7840 	.word	0x017d7840

08004014 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004014:	b480      	push	{r7}
 8004016:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004018:	4b03      	ldr	r3, [pc, #12]	; (8004028 <HAL_RCC_GetHCLKFreq+0x14>)
 800401a:	681b      	ldr	r3, [r3, #0]
}
 800401c:	4618      	mov	r0, r3
 800401e:	46bd      	mov	sp, r7
 8004020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004024:	4770      	bx	lr
 8004026:	bf00      	nop
 8004028:	20000000 	.word	0x20000000

0800402c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004030:	f7ff fff0 	bl	8004014 <HAL_RCC_GetHCLKFreq>
 8004034:	4602      	mov	r2, r0
 8004036:	4b05      	ldr	r3, [pc, #20]	; (800404c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	0a9b      	lsrs	r3, r3, #10
 800403c:	f003 0307 	and.w	r3, r3, #7
 8004040:	4903      	ldr	r1, [pc, #12]	; (8004050 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004042:	5ccb      	ldrb	r3, [r1, r3]
 8004044:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004048:	4618      	mov	r0, r3
 800404a:	bd80      	pop	{r7, pc}
 800404c:	40023800 	.word	0x40023800
 8004050:	080057f0 	.word	0x080057f0

08004054 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004058:	f7ff ffdc 	bl	8004014 <HAL_RCC_GetHCLKFreq>
 800405c:	4602      	mov	r2, r0
 800405e:	4b05      	ldr	r3, [pc, #20]	; (8004074 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	0b5b      	lsrs	r3, r3, #13
 8004064:	f003 0307 	and.w	r3, r3, #7
 8004068:	4903      	ldr	r1, [pc, #12]	; (8004078 <HAL_RCC_GetPCLK2Freq+0x24>)
 800406a:	5ccb      	ldrb	r3, [r1, r3]
 800406c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004070:	4618      	mov	r0, r3
 8004072:	bd80      	pop	{r7, pc}
 8004074:	40023800 	.word	0x40023800
 8004078:	080057f0 	.word	0x080057f0

0800407c <memset>:
 800407c:	4402      	add	r2, r0
 800407e:	4603      	mov	r3, r0
 8004080:	4293      	cmp	r3, r2
 8004082:	d100      	bne.n	8004086 <memset+0xa>
 8004084:	4770      	bx	lr
 8004086:	f803 1b01 	strb.w	r1, [r3], #1
 800408a:	e7f9      	b.n	8004080 <memset+0x4>

0800408c <__libc_init_array>:
 800408c:	b570      	push	{r4, r5, r6, lr}
 800408e:	4d0d      	ldr	r5, [pc, #52]	; (80040c4 <__libc_init_array+0x38>)
 8004090:	4c0d      	ldr	r4, [pc, #52]	; (80040c8 <__libc_init_array+0x3c>)
 8004092:	1b64      	subs	r4, r4, r5
 8004094:	10a4      	asrs	r4, r4, #2
 8004096:	2600      	movs	r6, #0
 8004098:	42a6      	cmp	r6, r4
 800409a:	d109      	bne.n	80040b0 <__libc_init_array+0x24>
 800409c:	4d0b      	ldr	r5, [pc, #44]	; (80040cc <__libc_init_array+0x40>)
 800409e:	4c0c      	ldr	r4, [pc, #48]	; (80040d0 <__libc_init_array+0x44>)
 80040a0:	f000 f826 	bl	80040f0 <_init>
 80040a4:	1b64      	subs	r4, r4, r5
 80040a6:	10a4      	asrs	r4, r4, #2
 80040a8:	2600      	movs	r6, #0
 80040aa:	42a6      	cmp	r6, r4
 80040ac:	d105      	bne.n	80040ba <__libc_init_array+0x2e>
 80040ae:	bd70      	pop	{r4, r5, r6, pc}
 80040b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80040b4:	4798      	blx	r3
 80040b6:	3601      	adds	r6, #1
 80040b8:	e7ee      	b.n	8004098 <__libc_init_array+0xc>
 80040ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80040be:	4798      	blx	r3
 80040c0:	3601      	adds	r6, #1
 80040c2:	e7f2      	b.n	80040aa <__libc_init_array+0x1e>
 80040c4:	08005800 	.word	0x08005800
 80040c8:	08005800 	.word	0x08005800
 80040cc:	08005800 	.word	0x08005800
 80040d0:	08005804 	.word	0x08005804

080040d4 <memcpy>:
 80040d4:	440a      	add	r2, r1
 80040d6:	4291      	cmp	r1, r2
 80040d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80040dc:	d100      	bne.n	80040e0 <memcpy+0xc>
 80040de:	4770      	bx	lr
 80040e0:	b510      	push	{r4, lr}
 80040e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80040e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80040ea:	4291      	cmp	r1, r2
 80040ec:	d1f9      	bne.n	80040e2 <memcpy+0xe>
 80040ee:	bd10      	pop	{r4, pc}

080040f0 <_init>:
 80040f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040f2:	bf00      	nop
 80040f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040f6:	bc08      	pop	{r3}
 80040f8:	469e      	mov	lr, r3
 80040fa:	4770      	bx	lr

080040fc <_fini>:
 80040fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040fe:	bf00      	nop
 8004100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004102:	bc08      	pop	{r3}
 8004104:	469e      	mov	lr, r3
 8004106:	4770      	bx	lr
