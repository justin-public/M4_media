
M4_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b44  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00021488  08004ccc  08004ccc  00014ccc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08026154  08026154  00040018  2**0
                  CONTENTS
  4 .ARM          00000008  08026154  08026154  00036154  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802615c  0802615c  00040018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802615c  0802615c  0003615c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08026160  08026160  00036160  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08026164  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00040018  2**0
                  CONTENTS
 10 .bss          000022f4  20000018  20000018  00040018  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000230c  2000230c  00040018  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00040018  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00040048  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000f06b  00000000  00000000  0004008b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000035c3  00000000  00000000  0004f0f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000d88  00000000  00000000  000526c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00005925  00000000  00000000  00053448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015d64  00000000  00000000  00058d6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cbb6d  00000000  00000000  0006ead1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_rnglists 000008e0  00000000  00000000  0013a63e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002c00  00000000  00000000  0013af20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000044  00000000  00000000  0013db20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000018 	.word	0x20000018
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004cb4 	.word	0x08004cb4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000001c 	.word	0x2000001c
 80001c4:	08004cb4 	.word	0x08004cb4

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b970 	b.w	80004d0 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	460f      	mov	r7, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4694      	mov	ip, r2
 800021c:	d965      	bls.n	80002ea <__udivmoddi4+0xe2>
 800021e:	fab2 f382 	clz	r3, r2
 8000222:	b143      	cbz	r3, 8000236 <__udivmoddi4+0x2e>
 8000224:	fa02 fc03 	lsl.w	ip, r2, r3
 8000228:	f1c3 0220 	rsb	r2, r3, #32
 800022c:	409f      	lsls	r7, r3
 800022e:	fa20 f202 	lsr.w	r2, r0, r2
 8000232:	4317      	orrs	r7, r2
 8000234:	409c      	lsls	r4, r3
 8000236:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023a:	fa1f f58c 	uxth.w	r5, ip
 800023e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000242:	0c22      	lsrs	r2, r4, #16
 8000244:	fb0e 7711 	mls	r7, lr, r1, r7
 8000248:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800024c:	fb01 f005 	mul.w	r0, r1, r5
 8000250:	4290      	cmp	r0, r2
 8000252:	d90a      	bls.n	800026a <__udivmoddi4+0x62>
 8000254:	eb1c 0202 	adds.w	r2, ip, r2
 8000258:	f101 37ff 	add.w	r7, r1, #4294967295
 800025c:	f080 811c 	bcs.w	8000498 <__udivmoddi4+0x290>
 8000260:	4290      	cmp	r0, r2
 8000262:	f240 8119 	bls.w	8000498 <__udivmoddi4+0x290>
 8000266:	3902      	subs	r1, #2
 8000268:	4462      	add	r2, ip
 800026a:	1a12      	subs	r2, r2, r0
 800026c:	b2a4      	uxth	r4, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027a:	fb00 f505 	mul.w	r5, r0, r5
 800027e:	42a5      	cmp	r5, r4
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x90>
 8000282:	eb1c 0404 	adds.w	r4, ip, r4
 8000286:	f100 32ff 	add.w	r2, r0, #4294967295
 800028a:	f080 8107 	bcs.w	800049c <__udivmoddi4+0x294>
 800028e:	42a5      	cmp	r5, r4
 8000290:	f240 8104 	bls.w	800049c <__udivmoddi4+0x294>
 8000294:	4464      	add	r4, ip
 8000296:	3802      	subs	r0, #2
 8000298:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029c:	1b64      	subs	r4, r4, r5
 800029e:	2100      	movs	r1, #0
 80002a0:	b11e      	cbz	r6, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40dc      	lsrs	r4, r3
 80002a4:	2300      	movs	r3, #0
 80002a6:	e9c6 4300 	strd	r4, r3, [r6]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d908      	bls.n	80002c4 <__udivmoddi4+0xbc>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80ed 	beq.w	8000492 <__udivmoddi4+0x28a>
 80002b8:	2100      	movs	r1, #0
 80002ba:	e9c6 0500 	strd	r0, r5, [r6]
 80002be:	4608      	mov	r0, r1
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	fab3 f183 	clz	r1, r3
 80002c8:	2900      	cmp	r1, #0
 80002ca:	d149      	bne.n	8000360 <__udivmoddi4+0x158>
 80002cc:	42ab      	cmp	r3, r5
 80002ce:	d302      	bcc.n	80002d6 <__udivmoddi4+0xce>
 80002d0:	4282      	cmp	r2, r0
 80002d2:	f200 80f8 	bhi.w	80004c6 <__udivmoddi4+0x2be>
 80002d6:	1a84      	subs	r4, r0, r2
 80002d8:	eb65 0203 	sbc.w	r2, r5, r3
 80002dc:	2001      	movs	r0, #1
 80002de:	4617      	mov	r7, r2
 80002e0:	2e00      	cmp	r6, #0
 80002e2:	d0e2      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	e9c6 4700 	strd	r4, r7, [r6]
 80002e8:	e7df      	b.n	80002aa <__udivmoddi4+0xa2>
 80002ea:	b902      	cbnz	r2, 80002ee <__udivmoddi4+0xe6>
 80002ec:	deff      	udf	#255	; 0xff
 80002ee:	fab2 f382 	clz	r3, r2
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	f040 8090 	bne.w	8000418 <__udivmoddi4+0x210>
 80002f8:	1a8a      	subs	r2, r1, r2
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2101      	movs	r1, #1
 8000304:	fbb2 f5f7 	udiv	r5, r2, r7
 8000308:	fb07 2015 	mls	r0, r7, r5, r2
 800030c:	0c22      	lsrs	r2, r4, #16
 800030e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000312:	fb0e f005 	mul.w	r0, lr, r5
 8000316:	4290      	cmp	r0, r2
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x124>
 800031a:	eb1c 0202 	adds.w	r2, ip, r2
 800031e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4290      	cmp	r0, r2
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2b8>
 800032a:	4645      	mov	r5, r8
 800032c:	1a12      	subs	r2, r2, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb2 f0f7 	udiv	r0, r2, r7
 8000334:	fb07 2210 	mls	r2, r7, r0, r2
 8000338:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x14e>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 32ff 	add.w	r2, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x14c>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2c2>
 8000354:	4610      	mov	r0, r2
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035e:	e79f      	b.n	80002a0 <__udivmoddi4+0x98>
 8000360:	f1c1 0720 	rsb	r7, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa05 f401 	lsl.w	r4, r5, r1
 8000372:	fa20 f307 	lsr.w	r3, r0, r7
 8000376:	40fd      	lsrs	r5, r7
 8000378:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037c:	4323      	orrs	r3, r4
 800037e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000382:	fa1f fe8c 	uxth.w	lr, ip
 8000386:	fb09 5518 	mls	r5, r9, r8, r5
 800038a:	0c1c      	lsrs	r4, r3, #16
 800038c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000390:	fb08 f50e 	mul.w	r5, r8, lr
 8000394:	42a5      	cmp	r5, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	fa00 f001 	lsl.w	r0, r0, r1
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2b4>
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2b4>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4464      	add	r4, ip
 80003b8:	1b64      	subs	r4, r4, r5
 80003ba:	b29d      	uxth	r5, r3
 80003bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c0:	fb09 4413 	mls	r4, r9, r3, r4
 80003c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2ac>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2ac>
 80003de:	3b02      	subs	r3, #2
 80003e0:	4464      	add	r4, ip
 80003e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e6:	fba3 9502 	umull	r9, r5, r3, r2
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	42ac      	cmp	r4, r5
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46ae      	mov	lr, r5
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x29c>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x298>
 80003f8:	b156      	cbz	r6, 8000410 <__udivmoddi4+0x208>
 80003fa:	ebb0 0208 	subs.w	r2, r0, r8
 80003fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000402:	fa04 f707 	lsl.w	r7, r4, r7
 8000406:	40ca      	lsrs	r2, r1
 8000408:	40cc      	lsrs	r4, r1
 800040a:	4317      	orrs	r7, r2
 800040c:	e9c6 7400 	strd	r7, r4, [r6]
 8000410:	4618      	mov	r0, r3
 8000412:	2100      	movs	r1, #0
 8000414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000418:	f1c3 0120 	rsb	r1, r3, #32
 800041c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000420:	fa20 f201 	lsr.w	r2, r0, r1
 8000424:	fa25 f101 	lsr.w	r1, r5, r1
 8000428:	409d      	lsls	r5, r3
 800042a:	432a      	orrs	r2, r5
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb1 f0f7 	udiv	r0, r1, r7
 8000438:	fb07 1510 	mls	r5, r7, r0, r1
 800043c:	0c11      	lsrs	r1, r2, #16
 800043e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000442:	fb00 f50e 	mul.w	r5, r0, lr
 8000446:	428d      	cmp	r5, r1
 8000448:	fa04 f403 	lsl.w	r4, r4, r3
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x258>
 800044e:	eb1c 0101 	adds.w	r1, ip, r1
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 8000458:	428d      	cmp	r5, r1
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800045c:	3802      	subs	r0, #2
 800045e:	4461      	add	r1, ip
 8000460:	1b49      	subs	r1, r1, r5
 8000462:	b292      	uxth	r2, r2
 8000464:	fbb1 f5f7 	udiv	r5, r1, r7
 8000468:	fb07 1115 	mls	r1, r7, r5, r1
 800046c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000470:	fb05 f10e 	mul.w	r1, r5, lr
 8000474:	4291      	cmp	r1, r2
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x282>
 8000478:	eb1c 0202 	adds.w	r2, ip, r2
 800047c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 8000482:	4291      	cmp	r1, r2
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000486:	3d02      	subs	r5, #2
 8000488:	4462      	add	r2, ip
 800048a:	1a52      	subs	r2, r2, r1
 800048c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0xfc>
 8000492:	4631      	mov	r1, r6
 8000494:	4630      	mov	r0, r6
 8000496:	e708      	b.n	80002aa <__udivmoddi4+0xa2>
 8000498:	4639      	mov	r1, r7
 800049a:	e6e6      	b.n	800026a <__udivmoddi4+0x62>
 800049c:	4610      	mov	r0, r2
 800049e:	e6fb      	b.n	8000298 <__udivmoddi4+0x90>
 80004a0:	4548      	cmp	r0, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ac:	3b01      	subs	r3, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004b0:	4645      	mov	r5, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x282>
 80004b4:	462b      	mov	r3, r5
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x258>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004c0:	3d02      	subs	r5, #2
 80004c2:	4462      	add	r2, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x124>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e70a      	b.n	80002e0 <__udivmoddi4+0xd8>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x14e>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <MakeBmpHeader>:
*********************************************************************************************************
*	Func name: MakeBmpHeader
*********************************************************************************************************
*/
static void MakeBmpHeader(__packed BMP_T *_pBmp, uint16_t _Width, uint16_t _Height)
{
 80004d4:	b480      	push	{r7}
 80004d6:	b083      	sub	sp, #12
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
 80004dc:	460b      	mov	r3, r1
 80004de:	807b      	strh	r3, [r7, #2]
 80004e0:	4613      	mov	r3, r2
 80004e2:	803b      	strh	r3, [r7, #0]
	/* 14×Ö½Ú Î»Í¼ÎÄ¼þÍ· */
	_pBmp->bfType = 0x4D42;	/* 2×Ö½Ú Î»Í¼Àà±ð£¬ ÔÚWindowsÖÐ£¬´Ë×Ö¶ÎµÄÖµ×ÜÎª'BM'*/
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	f644 5242 	movw	r2, #19778	; 0x4d42
 80004ea:	801a      	strh	r2, [r3, #0]
	_pBmp->bfSize = (_Height * _Width * 3) + 54;	/* bmpÎÄ¼þ´óÐ¡ 4×Ö½Ú */
 80004ec:	883b      	ldrh	r3, [r7, #0]
 80004ee:	887a      	ldrh	r2, [r7, #2]
 80004f0:	fb03 f202 	mul.w	r2, r3, r2
 80004f4:	4613      	mov	r3, r2
 80004f6:	005b      	lsls	r3, r3, #1
 80004f8:	4413      	add	r3, r2
 80004fa:	3336      	adds	r3, #54	; 0x36
 80004fc:	461a      	mov	r2, r3
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	605a      	str	r2, [r3, #4]
	_pBmp->bfReserved1 = 0;	/* ±£Áô£¬Ã¿×Ö½ÚÒÔ"00"ÌîÐ´ 2×Ö½Ú */
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	2200      	movs	r2, #0
 8000506:	811a      	strh	r2, [r3, #8]
	_pBmp->bfReserved2 = 0; /* Í¬ÉÏ 2×Ö½Ú */
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	2200      	movs	r2, #0
 800050c:	815a      	strh	r2, [r3, #10]
	_pBmp->bfOffBits = 54;	/* ¼ÇÂ¼Í¼ÏñÊý¾ÝÇøµÄÆðÊ¼Î»ÖÃ(Í¼ÏóÊý¾ÝÏà¶ÔÓÚÎÄ¼þÍ·×Ö½ÚµÄÆ«ÒÆÁ¿)¡£ 4×Ö½Ú */
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	2236      	movs	r2, #54	; 0x36
 8000512:	60da      	str	r2, [r3, #12]

	/* 40×Ö½Ú Î»Í¼ÐÅÏ¢Í· */
	_pBmp->biSize = 40;		/* 4×Ö½Ú ±¾½á¹¹µÄ´óÐ¡£¬ÔÚWindowsÖÐ£¬×ÜÎª28h£¬40×Ö½Ú */
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	2228      	movs	r2, #40	; 0x28
 8000518:	611a      	str	r2, [r3, #16]
	_pBmp->biWidth = _Width;/* 4×Ö½Ú BMPÍ¼ÏñµÄ¿í¶È£¬µ¥Î»ÏñËØ */
 800051a:	887a      	ldrh	r2, [r7, #2]
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	615a      	str	r2, [r3, #20]
	_pBmp->biHeight = _Height;		/* 4×Ö½Ú BMPÍ¼ÏñµÄ¸ß¶È£¬µ¥Î»ÏñËØ */
 8000520:	883a      	ldrh	r2, [r7, #0]
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	619a      	str	r2, [r3, #24]
	_pBmp->biPlanes = 1;			/* 2×Ö½Ú Ä¿±êÉè±¸µÄ¼¶±ð(É«²ÊÆ½ÃæÊý)£¬¹Ì¶¨Îª1 */
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	2201      	movs	r2, #1
 800052a:	839a      	strh	r2, [r3, #28]
	_pBmp->biBitCount = 24;			/* 2×Ö½Ú BMPÍ¼ÏñµÄÉ«Éî£¬¼´Ò»¸öÏñËØÓÃ¶àÉÙÎ»±íÊ¾¡£³£¼ûµÄÓÐ 1 4 8 16 24 32 */
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	2218      	movs	r2, #24
 8000530:	83da      	strh	r2, [r3, #30]
	_pBmp->biCompression = 0;		/* 4×Ö½Ú Ñ¹ËõÀàÐÍ£¬0(²»Ñ¹Ëõ), 1(BI_RLE8), 2(BI_RLE4) */
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	2200      	movs	r2, #0
 8000536:	621a      	str	r2, [r3, #32]
	_pBmp->biSizeImage = (_Height * _Width * 3);	/* 4×Ö½Ú ±íÊ¾Î»Í¼Êý¾ÝÇøÓòµÄ´óÐ¡ÒÔ×Ö½ÚÎªµ¥Î» */
 8000538:	883b      	ldrh	r3, [r7, #0]
 800053a:	887a      	ldrh	r2, [r7, #2]
 800053c:	fb03 f202 	mul.w	r2, r3, r2
 8000540:	4613      	mov	r3, r2
 8000542:	005b      	lsls	r3, r3, #1
 8000544:	4413      	add	r3, r2
 8000546:	461a      	mov	r2, r3
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	625a      	str	r2, [r3, #36]	; 0x24
	_pBmp->biXPelsPerMeter = 0;	/* 4×Ö½Ú ÓÃÏóËØ/Ã×±íÊ¾µÄË®Æ½·Ö±æÂÊ */
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	2200      	movs	r2, #0
 8000550:	629a      	str	r2, [r3, #40]	; 0x28
	_pBmp->biYPelsPerMeter = 0;	/* 4×Ö½Ú ÓÃÏóËØ/Ã×±íÊ¾µÄ´¹Ö±·Ö±æÂÊ */
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	2200      	movs	r2, #0
 8000556:	62da      	str	r2, [r3, #44]	; 0x2c
	_pBmp->biClrUsed = 0;		/* 4×Ö½Ú Êµ¼ÊÊ¹ÓÃÉ«²ÊÊýÄ¿£¬0ÔòÓÉÎ»Êý¶¨ */
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	2200      	movs	r2, #0
 800055c:	631a      	str	r2, [r3, #48]	; 0x30
	_pBmp->biClrImportant = 0;	/* 4×Ö½Ú Í¼ÏñÖÐÖØÒªµÄÉ«²ÊÊýÄ¿¡£0±íÊ¾µ÷É«°åÄÚËùÓÐµÄÑÕÉ«¶¼ÊÇÖØÒªµÄ  */
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	2200      	movs	r2, #0
 8000562:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000564:	bf00      	nop
 8000566:	370c      	adds	r7, #12
 8000568:	46bd      	mov	sp, r7
 800056a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056e:	4770      	bx	lr

08000570 <SaveScreenToBmp>:
*********************************************************************************************************
*	Funa name: SaveScreenToBmp
*********************************************************************************************************
*/
void SaveScreenToBmp(uint16_t _index)
{
 8000570:	b590      	push	{r4, r7, lr}
 8000572:	f6ad 6d24 	subw	sp, sp, #3620	; 0xe24
 8000576:	af00      	add	r7, sp, #0
 8000578:	4602      	mov	r2, r0
 800057a:	f507 6362 	add.w	r3, r7, #3616	; 0xe20
 800057e:	f6a3 631a 	subw	r3, r3, #3610	; 0xe1a
 8000582:	801a      	strh	r2, [r3, #0]
	FRESULT result;
	FATFS fs;
	FIL file;
	uint32_t bw;
	char path[32];
	uint8_t ucVolume = FS_SD;
 8000584:	2300      	movs	r3, #0
 8000586:	f887 3e1f 	strb.w	r3, [r7, #3615]	; 0xe1f

	bsp_LedOn(1);
 800058a:	2001      	movs	r0, #1
 800058c:	f002 fa9c 	bl	8002ac8 <bsp_LedOn>

	MakeBmpHeader(&tBmpHead, LCD_GetWidth(), LCD_GetHeight());	/* ¹¹½¨BMPÎÄ¼þÍ· */
 8000590:	f002 ffc8 	bl	8003524 <LCD_GetWidth>
 8000594:	4603      	mov	r3, r0
 8000596:	461c      	mov	r4, r3
 8000598:	f002 ffb8 	bl	800350c <LCD_GetHeight>
 800059c:	4603      	mov	r3, r0
 800059e:	461a      	mov	r2, r3
 80005a0:	f607 53e4 	addw	r3, r7, #3556	; 0xde4
 80005a4:	4621      	mov	r1, r4
 80005a6:	4618      	mov	r0, r3
 80005a8:	f7ff ff94 	bl	80004d4 <MakeBmpHeader>
}
 80005ac:	bf00      	nop
 80005ae:	f607 6724 	addw	r7, r7, #3620	; 0xe24
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd90      	pop	{r4, r7, pc}
	...

080005b8 <HardInfo>:
*********************************************************************************************************
*	Func name: HardInfo
*********************************************************************************************************
*/
void HardInfo(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b0ac      	sub	sp, #176	; 0xb0
 80005bc:	af00      	add	r7, sp, #0
	uint8_t ucTouch;		/* ´¥ÃþÊÂ¼þ */
	uint8_t fRefresh;		/* Ë¢ÆÁÇëÇó±êÖ¾,1±íÊ¾ÐèÒªË¢ÐÂ */
	FONT_T tFont, tFontBtn;	/* ¶¨ÒåÒ»¸ö×ÖÌå½á¹¹Ìå±äÁ¿£¬ÓÃÓÚÉèÖÃ×ÖÌå²ÎÊý */
	char buf[128];
	uint16_t x, y;
	uint16_t usLineCap = 18;
 80005be:	2312      	movs	r3, #18
 80005c0:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae

	int16_t tpX, tpY;
	BUTTON_T tBtn;

	LCD_ClrScr(CL_BLUE);  	/* ÇåÆÁ£¬±³¾°À¶É« */
 80005c4:	201f      	movs	r0, #31
 80005c6:	f002 fc61 	bl	8002e8c <LCD_ClrScr>

	{
		tFont.FontCode = FC_ST_16;	/* ×ÖÌå´úÂë 16µãÕó */
 80005ca:	2300      	movs	r3, #0
 80005cc:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
		tFont.FrontColor = CL_WHITE;	/* ×ÖÌåÑÕÉ« */
 80005d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005d4:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
		tFont.BackColor = CL_BLUE;	/* ÎÄ×Ö±³¾°ÑÕÉ« */
 80005d8:	231f      	movs	r3, #31
 80005da:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
		tFont.Space = 0;				/* ÎÄ×Ö¼ä¾à£¬µ¥Î» = ÏñËØ */
 80005de:	2300      	movs	r3, #0
 80005e0:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6

		/* °´Å¥×ÖÌå */
		tFontBtn.FontCode = FC_ST_16;
 80005e4:	2300      	movs	r3, #0
 80005e6:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
		tFontBtn.BackColor = CL_MASK;	/* Í¸Ã÷É« */
 80005ea:	f649 1399 	movw	r3, #39321	; 0x9999
 80005ee:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
		tFontBtn.FrontColor = CL_BLACK;
 80005f2:	2300      	movs	r3, #0
 80005f4:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
		tFontBtn.Space = 0;
 80005f8:	2300      	movs	r3, #0
 80005fa:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
	}
	x = 5;
 80005fe:	2305      	movs	r3, #5
 8000600:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
	y = 3;
 8000604:	2303      	movs	r3, #3
 8000606:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
	LCD_DispStr(x, y, "°²¸»À³STM32-V5¿ª·¢°åÓ²¼þÐÅÏ¢", &tFont);			/* ÔÚ(8,3)×ø±ê´¦ÏÔÊ¾Ò»´®ºº×Ö */
 800060a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800060e:	f8b7 10aa 	ldrh.w	r1, [r7, #170]	; 0xaa
 8000612:	f8b7 00ac 	ldrh.w	r0, [r7, #172]	; 0xac
 8000616:	4a07      	ldr	r2, [pc, #28]	; (8000634 <HardInfo+0x7c>)
 8000618:	f002 fc8c 	bl	8002f34 <LCD_DispStr>
	y += usLineCap;
 800061c:	f8b7 20aa 	ldrh.w	r2, [r7, #170]	; 0xaa
 8000620:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8000624:	4413      	add	r3, r2
 8000626:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
}
 800062a:	bf00      	nop
 800062c:	37b0      	adds	r7, #176	; 0xb0
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	08004ccc 	.word	0x08004ccc

08000638 <main>:

IWDG_HandleTypeDef hiwdg;
HAL_StatusTypeDef status;

int main(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
	uint16_t ucStatus;

	HAL_Init();
 800063e:	f003 fb31 	bl	8003ca4 <HAL_Init>
	SystemInit_clk();
 8000642:	f000 f827 	bl	8000694 <SystemInit_clk>
	//IWDG_Init();

	bsp_Init();
 8000646:	f003 fb05 	bl	8003c54 <bsp_Init>

	LoadParam();
 800064a:	f000 fa93 	bl	8000b74 <LoadParam>

	LCD_InitHard();
 800064e:	f002 fb15 	bl	8002c7c <LCD_InitHard>

	TOUCH_InitHard();
 8000652:	f003 f805 	bl	8003660 <TOUCH_InitHard>

	LCD_ClrScr(CL_YELLOW);
 8000656:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 800065a:	f002 fc17 	bl	8002e8c <LCD_ClrScr>
	LCD_SetBackLight(g_tParam.ucBackLight);
 800065e:	4b0c      	ldr	r3, [pc, #48]	; (8000690 <main+0x58>)
 8000660:	791b      	ldrb	r3, [r3, #4]
 8000662:	4618      	mov	r0, r3
 8000664:	f002 fc2c 	bl	8002ec0 <LCD_SetBackLight>
	// 변수 선언
#if 0
	char msg[] = "Hello, UART1!\r\n";
	HAL_StatusTypeDef status;
#endif
	ucStatus = MS_MAIN_MENU;
 8000668:	2300      	movs	r3, #0
 800066a:	80fb      	strh	r3, [r7, #6]
	while (1)
	{
#if 1
		switch (ucStatus)
 800066c:	88fb      	ldrh	r3, [r7, #6]
 800066e:	2b00      	cmp	r3, #0
 8000670:	d002      	beq.n	8000678 <main+0x40>
 8000672:	2b01      	cmp	r3, #1
 8000674:	d005      	beq.n	8000682 <main+0x4a>
			case MS_HARDWARE_INFO:
				HardInfo();
				ucStatus = MS_MAIN_MENU;
			break;
			default:
			break;
 8000676:	e009      	b.n	800068c <main+0x54>
				ucStatus = MainMenu();
 8000678:	f000 f896 	bl	80007a8 <MainMenu>
 800067c:	4603      	mov	r3, r0
 800067e:	80fb      	strh	r3, [r7, #6]
			break;
 8000680:	e004      	b.n	800068c <main+0x54>
				HardInfo();
 8000682:	f7ff ff99 	bl	80005b8 <HardInfo>
				ucStatus = MS_MAIN_MENU;
 8000686:	2300      	movs	r3, #0
 8000688:	80fb      	strh	r3, [r7, #6]
			break;
 800068a:	bf00      	nop
		switch (ucStatus)
 800068c:	e7ee      	b.n	800066c <main+0x34>
 800068e:	bf00      	nop
 8000690:	20000038 	.word	0x20000038

08000694 <SystemInit_clk>:
}



void SystemInit_clk(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
	SystemClock_Config();
 8000698:	f000 f816 	bl	80006c8 <SystemClock_Config>

	FLASH->ACR |= FLASH_ACR_LATENCY_5WS;
 800069c:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <SystemInit_clk+0x30>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a08      	ldr	r2, [pc, #32]	; (80006c4 <SystemInit_clk+0x30>)
 80006a2:	f043 0305 	orr.w	r3, r3, #5
 80006a6:	6013      	str	r3, [r2, #0]

	FLASH->ACR |= FLASH_ACR_ICEN | FLASH_ACR_DCEN;
 80006a8:	4b06      	ldr	r3, [pc, #24]	; (80006c4 <SystemInit_clk+0x30>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a05      	ldr	r2, [pc, #20]	; (80006c4 <SystemInit_clk+0x30>)
 80006ae:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80006b2:	6013      	str	r3, [r2, #0]

	/* Set the VDD voltage to 3.3V (Main regulator output voltage scale 1) */
	// STM32F4의 경우 디폴트 설정이 scale1 모드임.

	/* Enable the Prefetch buffer (already disabled in the original config) */
	FLASH->ACR |= FLASH_ACR_PRFTEN;
 80006b4:	4b03      	ldr	r3, [pc, #12]	; (80006c4 <SystemInit_clk+0x30>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4a02      	ldr	r2, [pc, #8]	; (80006c4 <SystemInit_clk+0x30>)
 80006ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006be:	6013      	str	r3, [r2, #0]
}
 80006c0:	bf00      	nop
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	40023c00 	.word	0x40023c00

080006c8 <SystemClock_Config>:
	hiwdg.Init.Reload = 4095;  // 최대값 (약 26초 타임아웃)
	HAL_IWDG_Init(&hiwdg);
}

void SystemClock_Config(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b094      	sub	sp, #80	; 0x50
 80006cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ce:	f107 0320 	add.w	r3, r7, #32
 80006d2:	2230      	movs	r2, #48	; 0x30
 80006d4:	2100      	movs	r1, #0
 80006d6:	4618      	mov	r0, r3
 80006d8:	f004 fab2 	bl	8004c40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006dc:	f107 030c 	add.w	r3, r7, #12
 80006e0:	2200      	movs	r2, #0
 80006e2:	601a      	str	r2, [r3, #0]
 80006e4:	605a      	str	r2, [r3, #4]
 80006e6:	609a      	str	r2, [r3, #8]
 80006e8:	60da      	str	r2, [r3, #12]
 80006ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ec:	2300      	movs	r3, #0
 80006ee:	60bb      	str	r3, [r7, #8]
 80006f0:	4b28      	ldr	r3, [pc, #160]	; (8000794 <SystemClock_Config+0xcc>)
 80006f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f4:	4a27      	ldr	r2, [pc, #156]	; (8000794 <SystemClock_Config+0xcc>)
 80006f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006fa:	6413      	str	r3, [r2, #64]	; 0x40
 80006fc:	4b25      	ldr	r3, [pc, #148]	; (8000794 <SystemClock_Config+0xcc>)
 80006fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000700:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000704:	60bb      	str	r3, [r7, #8]
 8000706:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000708:	2300      	movs	r3, #0
 800070a:	607b      	str	r3, [r7, #4]
 800070c:	4b22      	ldr	r3, [pc, #136]	; (8000798 <SystemClock_Config+0xd0>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a21      	ldr	r2, [pc, #132]	; (8000798 <SystemClock_Config+0xd0>)
 8000712:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000716:	6013      	str	r3, [r2, #0]
 8000718:	4b1f      	ldr	r3, [pc, #124]	; (8000798 <SystemClock_Config+0xd0>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000720:	607b      	str	r3, [r7, #4]
 8000722:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000724:	2301      	movs	r3, #1
 8000726:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000728:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800072c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800072e:	2302      	movs	r3, #2
 8000730:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000732:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000736:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000738:	2319      	movs	r3, #25
 800073a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800073c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000740:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000742:	2302      	movs	r3, #2
 8000744:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;                                  // 4
 8000746:	2307      	movs	r3, #7
 8000748:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800074a:	f107 0320 	add.w	r3, r7, #32
 800074e:	4618      	mov	r0, r3
 8000750:	f003 fe1e 	bl	8004390 <HAL_RCC_OscConfig>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800075a:	f000 f81f 	bl	800079c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800075e:	230f      	movs	r3, #15
 8000760:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000762:	2302      	movs	r3, #2
 8000764:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000766:	2300      	movs	r3, #0
 8000768:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800076a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800076e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000770:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000774:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000776:	f107 030c 	add.w	r3, r7, #12
 800077a:	2105      	movs	r1, #5
 800077c:	4618      	mov	r0, r3
 800077e:	f004 f87f 	bl	8004880 <HAL_RCC_ClockConfig>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000788:	f000 f808 	bl	800079c <Error_Handler>
  }
}
 800078c:	bf00      	nop
 800078e:	3750      	adds	r7, #80	; 0x50
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	40023800 	.word	0x40023800
 8000798:	40007000 	.word	0x40007000

0800079c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007a0:	b672      	cpsid	i
}
 80007a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007a4:	e7fe      	b.n	80007a4 <Error_Handler+0x8>
	...

080007a8 <MainMenu>:
*********************************************************************************************************
*	Func name: MainMenu
*********************************************************************************************************
*/
uint8_t MainMenu(void)
{
 80007a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007aa:	b08b      	sub	sp, #44	; 0x2c
 80007ac:	af02      	add	r7, sp, #8
	FONT_T tIconFont;		

	int16_t tpX, tpY;
	uint16_t i;

	DispBackground();
 80007ae:	f000 f987 	bl	8000ac0 <DispBackground>

	{
		tFont.FontCode = FC_ST_16;	/* ×ÖÌå´úÂë 16µãÕó */
 80007b2:	2300      	movs	r3, #0
 80007b4:	823b      	strh	r3, [r7, #16]
		tFont.FrontColor = MAIN_TEXT_COLOR;	/* ×ÖÌåÑÕÉ« */
 80007b6:	4ba1      	ldr	r3, [pc, #644]	; (8000a3c <MainMenu+0x294>)
 80007b8:	881b      	ldrh	r3, [r3, #0]
 80007ba:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 80007be:	d106      	bne.n	80007ce <MainMenu+0x26>
 80007c0:	4b9f      	ldr	r3, [pc, #636]	; (8000a40 <MainMenu+0x298>)
 80007c2:	881b      	ldrh	r3, [r3, #0]
 80007c4:	4a9f      	ldr	r2, [pc, #636]	; (8000a44 <MainMenu+0x29c>)
 80007c6:	00db      	lsls	r3, r3, #3
 80007c8:	4413      	add	r3, r2
 80007ca:	88db      	ldrh	r3, [r3, #6]
 80007cc:	e005      	b.n	80007da <MainMenu+0x32>
 80007ce:	4b9c      	ldr	r3, [pc, #624]	; (8000a40 <MainMenu+0x298>)
 80007d0:	881b      	ldrh	r3, [r3, #0]
 80007d2:	4a9d      	ldr	r2, [pc, #628]	; (8000a48 <MainMenu+0x2a0>)
 80007d4:	00db      	lsls	r3, r3, #3
 80007d6:	4413      	add	r3, r2
 80007d8:	88db      	ldrh	r3, [r3, #6]
 80007da:	827b      	strh	r3, [r7, #18]
		tFont.BackColor = CL_MASK;	/* ÎÄ×Ö±³¾°ÑÕÉ« */
 80007dc:	f649 1399 	movw	r3, #39321	; 0x9999
 80007e0:	82bb      	strh	r3, [r7, #20]
		tFont.Space = 0;				/* ÎÄ×Ö¼ä¾à£¬µ¥Î» = ÏñËØ */
 80007e2:	2300      	movs	r3, #0
 80007e4:	82fb      	strh	r3, [r7, #22]

		tIconFont.FontCode = FC_ST_12;		/* ×ÖÌå´úÂë 16µãÕó */
 80007e6:	2301      	movs	r3, #1
 80007e8:	813b      	strh	r3, [r7, #8]
		tIconFont.FrontColor = MAIN_TEXT_COLOR;	/* ×ÖÌåÑÕÉ« */
 80007ea:	4b94      	ldr	r3, [pc, #592]	; (8000a3c <MainMenu+0x294>)
 80007ec:	881b      	ldrh	r3, [r3, #0]
 80007ee:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 80007f2:	d106      	bne.n	8000802 <MainMenu+0x5a>
 80007f4:	4b92      	ldr	r3, [pc, #584]	; (8000a40 <MainMenu+0x298>)
 80007f6:	881b      	ldrh	r3, [r3, #0]
 80007f8:	4a92      	ldr	r2, [pc, #584]	; (8000a44 <MainMenu+0x29c>)
 80007fa:	00db      	lsls	r3, r3, #3
 80007fc:	4413      	add	r3, r2
 80007fe:	88db      	ldrh	r3, [r3, #6]
 8000800:	e005      	b.n	800080e <MainMenu+0x66>
 8000802:	4b8f      	ldr	r3, [pc, #572]	; (8000a40 <MainMenu+0x298>)
 8000804:	881b      	ldrh	r3, [r3, #0]
 8000806:	4a90      	ldr	r2, [pc, #576]	; (8000a48 <MainMenu+0x2a0>)
 8000808:	00db      	lsls	r3, r3, #3
 800080a:	4413      	add	r3, r2
 800080c:	88db      	ldrh	r3, [r3, #6]
 800080e:	817b      	strh	r3, [r7, #10]
		tIconFont.BackColor = CL_MASK;		/* ÎÄ×Ö±³¾°ÑÕÉ« */
 8000810:	f649 1399 	movw	r3, #39321	; 0x9999
 8000814:	81bb      	strh	r3, [r7, #12]
		tIconFont.Space = 1;				/* ÎÄ×Ö¼ä¾à£¬µ¥Î» = ÏñËØ */
 8000816:	2301      	movs	r3, #1
 8000818:	81fb      	strh	r3, [r7, #14]
	}
	LCD_DispStr(5, 3, VER_INFO, &tFont);			/* ÔÚ(8,3)×ø±ê´¦ÏÔÊ¾Ò»´®ºº×Ö */
 800081a:	f107 0310 	add.w	r3, r7, #16
 800081e:	4a8b      	ldr	r2, [pc, #556]	; (8000a4c <MainMenu+0x2a4>)
 8000820:	2103      	movs	r1, #3
 8000822:	2005      	movs	r0, #5
 8000824:	f002 fb86 	bl	8002f34 <LCD_DispStr>
	LCD_DispStr(5, g_LcdHeight - 13, KEY_INFO, &tIconFont);			/* ÔÚ(8,3)×ø±ê´¦ÏÔÊ¾Ò»´®ºº×Ö */
 8000828:	4b89      	ldr	r3, [pc, #548]	; (8000a50 <MainMenu+0x2a8>)
 800082a:	881b      	ldrh	r3, [r3, #0]
 800082c:	3b0d      	subs	r3, #13
 800082e:	b299      	uxth	r1, r3
 8000830:	f107 0308 	add.w	r3, r7, #8
 8000834:	4a87      	ldr	r2, [pc, #540]	; (8000a54 <MainMenu+0x2ac>)
 8000836:	2005      	movs	r0, #5
 8000838:	f002 fb7c 	bl	8002f34 <LCD_DispStr>

	fRefresh = 1;
 800083c:	2301      	movs	r3, #1
 800083e:	77fb      	strb	r3, [r7, #31]

	while(1)
	{
		bsp_Idle();
 8000840:	f003 fa1c 	bl	8003c7c <bsp_Idle>
		if (fRefresh)
 8000844:	7ffb      	ldrb	r3, [r7, #31]
 8000846:	2b00      	cmp	r3, #0
 8000848:	d014      	beq.n	8000874 <MainMenu+0xcc>
		{
			fRefresh = 0;
 800084a:	2300      	movs	r3, #0
 800084c:	77fb      	strb	r3, [r7, #31]
			{
				for (i = 0; i < ICONS_COUNT; i++)
 800084e:	2300      	movs	r3, #0
 8000850:	83bb      	strh	r3, [r7, #28]
 8000852:	e00c      	b.n	800086e <MainMenu+0xc6>
				{
					LCD_DrawIcon32(&s_tMainIcons[i], &tIconFont, 0);
 8000854:	8bbb      	ldrh	r3, [r7, #28]
 8000856:	015b      	lsls	r3, r3, #5
 8000858:	4a7f      	ldr	r2, [pc, #508]	; (8000a58 <MainMenu+0x2b0>)
 800085a:	4413      	add	r3, r2
 800085c:	f107 0108 	add.w	r1, r7, #8
 8000860:	2200      	movs	r2, #0
 8000862:	4618      	mov	r0, r3
 8000864:	f002 fca4 	bl	80031b0 <LCD_DrawIcon32>
				for (i = 0; i < ICONS_COUNT; i++)
 8000868:	8bbb      	ldrh	r3, [r7, #28]
 800086a:	3301      	adds	r3, #1
 800086c:	83bb      	strh	r3, [r7, #28]
 800086e:	8bbb      	ldrh	r3, [r7, #28]
 8000870:	2b11      	cmp	r3, #17
 8000872:	d9ef      	bls.n	8000854 <MainMenu+0xac>
				}
			}
		}
		ucTouch = TOUCH_GetKey(&tpX, &tpY);
 8000874:	1d3a      	adds	r2, r7, #4
 8000876:	1dbb      	adds	r3, r7, #6
 8000878:	4611      	mov	r1, r2
 800087a:	4618      	mov	r0, r3
 800087c:	f002 ff42 	bl	8003704 <TOUCH_GetKey>
 8000880:	4603      	mov	r3, r0
 8000882:	76fb      	strb	r3, [r7, #27]
		if(ucTouch != TOUCH_NONE)
 8000884:	7efb      	ldrb	r3, [r7, #27]
 8000886:	2b00      	cmp	r3, #0
 8000888:	f000 8092 	beq.w	80009b0 <MainMenu+0x208>
		{
			switch (ucTouch)
 800088c:	7efb      	ldrb	r3, [r7, #27]
 800088e:	2b03      	cmp	r3, #3
 8000890:	d043      	beq.n	800091a <MainMenu+0x172>
 8000892:	2b03      	cmp	r3, #3
 8000894:	f300 8089 	bgt.w	80009aa <MainMenu+0x202>
 8000898:	2b01      	cmp	r3, #1
 800089a:	d003      	beq.n	80008a4 <MainMenu+0xfc>
 800089c:	2b02      	cmp	r3, #2
 800089e:	f000 8086 	beq.w	80009ae <MainMenu+0x206>
							LCD_DrawIcon32(&s_tMainIcons[i], &tIconFont, 0);
						}
					}
					break;
				default:
					break;
 80008a2:	e082      	b.n	80009aa <MainMenu+0x202>
					for (i = 0; i < ICONS_COUNT; i++)
 80008a4:	2300      	movs	r3, #0
 80008a6:	83bb      	strh	r3, [r7, #28]
 80008a8:	e033      	b.n	8000912 <MainMenu+0x16a>
						if (TOUCH_InRect(tpX, tpY, s_tMainIcons[i].Left, s_tMainIcons[i].Top,
 80008aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80008ae:	b298      	uxth	r0, r3
 80008b0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80008b4:	b299      	uxth	r1, r3
 80008b6:	8bbb      	ldrh	r3, [r7, #28]
 80008b8:	4a67      	ldr	r2, [pc, #412]	; (8000a58 <MainMenu+0x2b0>)
 80008ba:	015b      	lsls	r3, r3, #5
 80008bc:	4413      	add	r3, r2
 80008be:	3302      	adds	r3, #2
 80008c0:	881c      	ldrh	r4, [r3, #0]
 80008c2:	8bbb      	ldrh	r3, [r7, #28]
 80008c4:	4a64      	ldr	r2, [pc, #400]	; (8000a58 <MainMenu+0x2b0>)
 80008c6:	015b      	lsls	r3, r3, #5
 80008c8:	4413      	add	r3, r2
 80008ca:	3304      	adds	r3, #4
 80008cc:	881d      	ldrh	r5, [r3, #0]
 80008ce:	8bbb      	ldrh	r3, [r7, #28]
							s_tMainIcons[i].Height, s_tMainIcons[i].Width))
 80008d0:	4a61      	ldr	r2, [pc, #388]	; (8000a58 <MainMenu+0x2b0>)
 80008d2:	015b      	lsls	r3, r3, #5
 80008d4:	4413      	add	r3, r2
 80008d6:	3306      	adds	r3, #6
 80008d8:	881b      	ldrh	r3, [r3, #0]
						if (TOUCH_InRect(tpX, tpY, s_tMainIcons[i].Left, s_tMainIcons[i].Top,
 80008da:	8bba      	ldrh	r2, [r7, #28]
							s_tMainIcons[i].Height, s_tMainIcons[i].Width))
 80008dc:	4e5e      	ldr	r6, [pc, #376]	; (8000a58 <MainMenu+0x2b0>)
 80008de:	0152      	lsls	r2, r2, #5
 80008e0:	4432      	add	r2, r6
 80008e2:	3208      	adds	r2, #8
 80008e4:	8812      	ldrh	r2, [r2, #0]
						if (TOUCH_InRect(tpX, tpY, s_tMainIcons[i].Left, s_tMainIcons[i].Top,
 80008e6:	9201      	str	r2, [sp, #4]
 80008e8:	9300      	str	r3, [sp, #0]
 80008ea:	462b      	mov	r3, r5
 80008ec:	4622      	mov	r2, r4
 80008ee:	f002 ff51 	bl	8003794 <TOUCH_InRect>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d009      	beq.n	800090c <MainMenu+0x164>
							LCD_DrawIcon32(&s_tMainIcons[i], &tIconFont, 1);
 80008f8:	8bbb      	ldrh	r3, [r7, #28]
 80008fa:	015b      	lsls	r3, r3, #5
 80008fc:	4a56      	ldr	r2, [pc, #344]	; (8000a58 <MainMenu+0x2b0>)
 80008fe:	4413      	add	r3, r2
 8000900:	f107 0108 	add.w	r1, r7, #8
 8000904:	2201      	movs	r2, #1
 8000906:	4618      	mov	r0, r3
 8000908:	f002 fc52 	bl	80031b0 <LCD_DrawIcon32>
					for (i = 0; i < ICONS_COUNT; i++)
 800090c:	8bbb      	ldrh	r3, [r7, #28]
 800090e:	3301      	adds	r3, #1
 8000910:	83bb      	strh	r3, [r7, #28]
 8000912:	8bbb      	ldrh	r3, [r7, #28]
 8000914:	2b11      	cmp	r3, #17
 8000916:	d9c8      	bls.n	80008aa <MainMenu+0x102>
				break;
 8000918:	e04a      	b.n	80009b0 <MainMenu+0x208>
					for (i = 0; i < ICONS_COUNT; i++)
 800091a:	2300      	movs	r3, #0
 800091c:	83bb      	strh	r3, [r7, #28]
 800091e:	e02d      	b.n	800097c <MainMenu+0x1d4>
						if (TOUCH_InRect(tpX, tpY, s_tMainIcons[i].Left, s_tMainIcons[i].Top,
 8000920:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000924:	b298      	uxth	r0, r3
 8000926:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800092a:	b299      	uxth	r1, r3
 800092c:	8bbb      	ldrh	r3, [r7, #28]
 800092e:	4a4a      	ldr	r2, [pc, #296]	; (8000a58 <MainMenu+0x2b0>)
 8000930:	015b      	lsls	r3, r3, #5
 8000932:	4413      	add	r3, r2
 8000934:	3302      	adds	r3, #2
 8000936:	881c      	ldrh	r4, [r3, #0]
 8000938:	8bbb      	ldrh	r3, [r7, #28]
 800093a:	4a47      	ldr	r2, [pc, #284]	; (8000a58 <MainMenu+0x2b0>)
 800093c:	015b      	lsls	r3, r3, #5
 800093e:	4413      	add	r3, r2
 8000940:	3304      	adds	r3, #4
 8000942:	881d      	ldrh	r5, [r3, #0]
 8000944:	8bbb      	ldrh	r3, [r7, #28]
							s_tMainIcons[i].Height, s_tMainIcons[i].Width))
 8000946:	4a44      	ldr	r2, [pc, #272]	; (8000a58 <MainMenu+0x2b0>)
 8000948:	015b      	lsls	r3, r3, #5
 800094a:	4413      	add	r3, r2
 800094c:	3306      	adds	r3, #6
 800094e:	881b      	ldrh	r3, [r3, #0]
						if (TOUCH_InRect(tpX, tpY, s_tMainIcons[i].Left, s_tMainIcons[i].Top,
 8000950:	8bba      	ldrh	r2, [r7, #28]
							s_tMainIcons[i].Height, s_tMainIcons[i].Width))
 8000952:	4e41      	ldr	r6, [pc, #260]	; (8000a58 <MainMenu+0x2b0>)
 8000954:	0152      	lsls	r2, r2, #5
 8000956:	4432      	add	r2, r6
 8000958:	3208      	adds	r2, #8
 800095a:	8812      	ldrh	r2, [r2, #0]
						if (TOUCH_InRect(tpX, tpY, s_tMainIcons[i].Left, s_tMainIcons[i].Top,
 800095c:	9201      	str	r2, [sp, #4]
 800095e:	9300      	str	r3, [sp, #0]
 8000960:	462b      	mov	r3, r5
 8000962:	4622      	mov	r2, r4
 8000964:	f002 ff16 	bl	8003794 <TOUCH_InRect>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d003      	beq.n	8000976 <MainMenu+0x1ce>
							return s_RetStatus[i];
 800096e:	8bbb      	ldrh	r3, [r7, #28]
 8000970:	4a3a      	ldr	r2, [pc, #232]	; (8000a5c <MainMenu+0x2b4>)
 8000972:	5cd3      	ldrb	r3, [r2, r3]
 8000974:	e096      	b.n	8000aa4 <MainMenu+0x2fc>
					for (i = 0; i < ICONS_COUNT; i++)
 8000976:	8bbb      	ldrh	r3, [r7, #28]
 8000978:	3301      	adds	r3, #1
 800097a:	83bb      	strh	r3, [r7, #28]
 800097c:	8bbb      	ldrh	r3, [r7, #28]
 800097e:	2b11      	cmp	r3, #17
 8000980:	d9ce      	bls.n	8000920 <MainMenu+0x178>
						for (i = 0; i < ICONS_COUNT; i++)
 8000982:	2300      	movs	r3, #0
 8000984:	83bb      	strh	r3, [r7, #28]
 8000986:	e00c      	b.n	80009a2 <MainMenu+0x1fa>
							LCD_DrawIcon32(&s_tMainIcons[i], &tIconFont, 0);
 8000988:	8bbb      	ldrh	r3, [r7, #28]
 800098a:	015b      	lsls	r3, r3, #5
 800098c:	4a32      	ldr	r2, [pc, #200]	; (8000a58 <MainMenu+0x2b0>)
 800098e:	4413      	add	r3, r2
 8000990:	f107 0108 	add.w	r1, r7, #8
 8000994:	2200      	movs	r2, #0
 8000996:	4618      	mov	r0, r3
 8000998:	f002 fc0a 	bl	80031b0 <LCD_DrawIcon32>
						for (i = 0; i < ICONS_COUNT; i++)
 800099c:	8bbb      	ldrh	r3, [r7, #28]
 800099e:	3301      	adds	r3, #1
 80009a0:	83bb      	strh	r3, [r7, #28]
 80009a2:	8bbb      	ldrh	r3, [r7, #28]
 80009a4:	2b11      	cmp	r3, #17
 80009a6:	d9ef      	bls.n	8000988 <MainMenu+0x1e0>
					break;
 80009a8:	e002      	b.n	80009b0 <MainMenu+0x208>
					break;
 80009aa:	bf00      	nop
 80009ac:	e000      	b.n	80009b0 <MainMenu+0x208>
					break;
 80009ae:	bf00      	nop
			}
		}
		ucKeyCode = bsp_GetKey();	/* ¶ÁÈ¡¼üÖµ, ÎÞ¼ü°´ÏÂÊ±·µ»Ø KEY_NONE = 0 */
 80009b0:	f001 ffd4 	bl	800295c <bsp_GetKey>
 80009b4:	4603      	mov	r3, r0
 80009b6:	76bb      	strb	r3, [r7, #26]
		if (ucKeyCode != KEY_NONE)
 80009b8:	7ebb      	ldrb	r3, [r7, #26]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	f43f af40 	beq.w	8000840 <MainMenu+0x98>
		{
			switch (ucKeyCode)
 80009c0:	7ebb      	ldrb	r3, [r7, #26]
 80009c2:	2b01      	cmp	r3, #1
 80009c4:	d003      	beq.n	80009ce <MainMenu+0x226>
 80009c6:	2b07      	cmp	r3, #7
 80009c8:	d16a      	bne.n	8000aa0 <MainMenu+0x2f8>
			{
				case  KEY_DOWN_K3:	/* K3¼ü */
					return MS_CALIBRATION;	/* ½øÈë´¥Ãþ½çÃæ */
 80009ca:	2313      	movs	r3, #19
 80009cc:	e06a      	b.n	8000aa4 <MainMenu+0x2fc>
					//break;
				case  KEY_DOWN_K1:	/* K1¼ü */
					if (++s_ColorIndex >= STYLE_COUNT)
 80009ce:	4b1c      	ldr	r3, [pc, #112]	; (8000a40 <MainMenu+0x298>)
 80009d0:	881b      	ldrh	r3, [r3, #0]
 80009d2:	3301      	adds	r3, #1
 80009d4:	b29a      	uxth	r2, r3
 80009d6:	4b1a      	ldr	r3, [pc, #104]	; (8000a40 <MainMenu+0x298>)
 80009d8:	801a      	strh	r2, [r3, #0]
 80009da:	4b19      	ldr	r3, [pc, #100]	; (8000a40 <MainMenu+0x298>)
 80009dc:	881b      	ldrh	r3, [r3, #0]
 80009de:	2b06      	cmp	r3, #6
 80009e0:	d902      	bls.n	80009e8 <MainMenu+0x240>
					{
						s_ColorIndex = 0;
 80009e2:	4b17      	ldr	r3, [pc, #92]	; (8000a40 <MainMenu+0x298>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	801a      	strh	r2, [r3, #0]
					}
					{
						DispBackground();
 80009e8:	f000 f86a 	bl	8000ac0 <DispBackground>
						{
							tFont.FontCode = FC_ST_16;	/* ×ÖÌå´úÂë 16µãÕó */
 80009ec:	2300      	movs	r3, #0
 80009ee:	823b      	strh	r3, [r7, #16]
							tFont.FrontColor = MAIN_TEXT_COLOR;	/* ×ÖÌåÑÕÉ« */
 80009f0:	4b12      	ldr	r3, [pc, #72]	; (8000a3c <MainMenu+0x294>)
 80009f2:	881b      	ldrh	r3, [r3, #0]
 80009f4:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 80009f8:	d106      	bne.n	8000a08 <MainMenu+0x260>
 80009fa:	4b11      	ldr	r3, [pc, #68]	; (8000a40 <MainMenu+0x298>)
 80009fc:	881b      	ldrh	r3, [r3, #0]
 80009fe:	4a11      	ldr	r2, [pc, #68]	; (8000a44 <MainMenu+0x29c>)
 8000a00:	00db      	lsls	r3, r3, #3
 8000a02:	4413      	add	r3, r2
 8000a04:	88db      	ldrh	r3, [r3, #6]
 8000a06:	e005      	b.n	8000a14 <MainMenu+0x26c>
 8000a08:	4b0d      	ldr	r3, [pc, #52]	; (8000a40 <MainMenu+0x298>)
 8000a0a:	881b      	ldrh	r3, [r3, #0]
 8000a0c:	4a0e      	ldr	r2, [pc, #56]	; (8000a48 <MainMenu+0x2a0>)
 8000a0e:	00db      	lsls	r3, r3, #3
 8000a10:	4413      	add	r3, r2
 8000a12:	88db      	ldrh	r3, [r3, #6]
 8000a14:	827b      	strh	r3, [r7, #18]
							tFont.BackColor = CL_MASK;	/* ÎÄ×Ö±³¾°ÑÕÉ« */
 8000a16:	f649 1399 	movw	r3, #39321	; 0x9999
 8000a1a:	82bb      	strh	r3, [r7, #20]
							tFont.Space = 0;				/* ÎÄ×Ö¼ä¾à£¬µ¥Î» = ÏñËØ */
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	82fb      	strh	r3, [r7, #22]

							tIconFont.FontCode = FC_ST_12;		/* ×ÖÌå´úÂë 16µãÕó */
 8000a20:	2301      	movs	r3, #1
 8000a22:	813b      	strh	r3, [r7, #8]
							tIconFont.FrontColor = MAIN_TEXT_COLOR;	/* ×ÖÌåÑÕÉ« */
 8000a24:	4b05      	ldr	r3, [pc, #20]	; (8000a3c <MainMenu+0x294>)
 8000a26:	881b      	ldrh	r3, [r3, #0]
 8000a28:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8000a2c:	d118      	bne.n	8000a60 <MainMenu+0x2b8>
 8000a2e:	4b04      	ldr	r3, [pc, #16]	; (8000a40 <MainMenu+0x298>)
 8000a30:	881b      	ldrh	r3, [r3, #0]
 8000a32:	4a04      	ldr	r2, [pc, #16]	; (8000a44 <MainMenu+0x29c>)
 8000a34:	00db      	lsls	r3, r3, #3
 8000a36:	4413      	add	r3, r2
 8000a38:	88db      	ldrh	r3, [r3, #6]
 8000a3a:	e017      	b.n	8000a6c <MainMenu+0x2c4>
 8000a3c:	2000000c 	.word	0x2000000c
 8000a40:	20000034 	.word	0x20000034
 8000a44:	080260cc 	.word	0x080260cc
 8000a48:	08026104 	.word	0x08026104
 8000a4c:	08004d00 	.word	0x08004d00
 8000a50:	2000000a 	.word	0x2000000a
 8000a54:	08004d10 	.word	0x08004d10
 8000a58:	08025e78 	.word	0x08025e78
 8000a5c:	080260b8 	.word	0x080260b8
 8000a60:	4b12      	ldr	r3, [pc, #72]	; (8000aac <MainMenu+0x304>)
 8000a62:	881b      	ldrh	r3, [r3, #0]
 8000a64:	4a12      	ldr	r2, [pc, #72]	; (8000ab0 <MainMenu+0x308>)
 8000a66:	00db      	lsls	r3, r3, #3
 8000a68:	4413      	add	r3, r2
 8000a6a:	88db      	ldrh	r3, [r3, #6]
 8000a6c:	817b      	strh	r3, [r7, #10]
							tIconFont.BackColor = CL_MASK;		/* ÎÄ×Ö±³¾°ÑÕÉ« */
 8000a6e:	f649 1399 	movw	r3, #39321	; 0x9999
 8000a72:	81bb      	strh	r3, [r7, #12]
							tIconFont.Space = 1;				/* ÎÄ×Ö¼ä¾à£¬µ¥Î» = ÏñËØ */
 8000a74:	2301      	movs	r3, #1
 8000a76:	81fb      	strh	r3, [r7, #14]
						}
						LCD_DispStr(5, 3, VER_INFO, &tFont);			/* ÔÚ(8,3)×ø±ê´¦ÏÔÊ¾Ò»´®ºº×Ö */
 8000a78:	f107 0310 	add.w	r3, r7, #16
 8000a7c:	4a0d      	ldr	r2, [pc, #52]	; (8000ab4 <MainMenu+0x30c>)
 8000a7e:	2103      	movs	r1, #3
 8000a80:	2005      	movs	r0, #5
 8000a82:	f002 fa57 	bl	8002f34 <LCD_DispStr>
						LCD_DispStr(5, g_LcdHeight - 13, KEY_INFO, &tIconFont);			/* ÔÚ(8,3)×ø±ê´¦ÏÔÊ¾Ò»´®ºº×Ö */
 8000a86:	4b0c      	ldr	r3, [pc, #48]	; (8000ab8 <MainMenu+0x310>)
 8000a88:	881b      	ldrh	r3, [r3, #0]
 8000a8a:	3b0d      	subs	r3, #13
 8000a8c:	b299      	uxth	r1, r3
 8000a8e:	f107 0308 	add.w	r3, r7, #8
 8000a92:	4a0a      	ldr	r2, [pc, #40]	; (8000abc <MainMenu+0x314>)
 8000a94:	2005      	movs	r0, #5
 8000a96:	f002 fa4d 	bl	8002f34 <LCD_DispStr>
					}
					fRefresh = 1;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	77fb      	strb	r3, [r7, #31]
					break;
 8000a9e:	e000      	b.n	8000aa2 <MainMenu+0x2fa>
				default:
					break;
 8000aa0:	bf00      	nop
		bsp_Idle();
 8000aa2:	e6cd      	b.n	8000840 <MainMenu+0x98>
			}
		}
	}
}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	3724      	adds	r7, #36	; 0x24
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000aac:	20000034 	.word	0x20000034
 8000ab0:	08026104 	.word	0x08026104
 8000ab4:	08004d00 	.word	0x08004d00
 8000ab8:	2000000a 	.word	0x2000000a
 8000abc:	08004d10 	.word	0x08004d10

08000ac0 <DispBackground>:
*********************************************************************************************************
*	Func name: DispBackground
*********************************************************************************************************
*/
static void DispBackground(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af02      	add	r7, sp, #8
	if (g_LcdWidth == 480)	/* 480 x 272 */
 8000ac6:	4b26      	ldr	r3, [pc, #152]	; (8000b60 <DispBackground+0xa0>)
 8000ac8:	881b      	ldrh	r3, [r3, #0]
 8000aca:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8000ace:	d122      	bne.n	8000b16 <DispBackground+0x56>
	{
		if (s_UI480[s_ColorIndex].pBmp == 0)
 8000ad0:	4b24      	ldr	r3, [pc, #144]	; (8000b64 <DispBackground+0xa4>)
 8000ad2:	881b      	ldrh	r3, [r3, #0]
 8000ad4:	461a      	mov	r2, r3
 8000ad6:	4b24      	ldr	r3, [pc, #144]	; (8000b68 <DispBackground+0xa8>)
 8000ad8:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d109      	bne.n	8000af4 <DispBackground+0x34>
		{
			LCD_ClrScr(s_UI480[s_ColorIndex].BackColor);  	/* ÇåÆÁ, Ìî³äµ¥É« */
 8000ae0:	4b20      	ldr	r3, [pc, #128]	; (8000b64 <DispBackground+0xa4>)
 8000ae2:	881b      	ldrh	r3, [r3, #0]
 8000ae4:	4a20      	ldr	r2, [pc, #128]	; (8000b68 <DispBackground+0xa8>)
 8000ae6:	00db      	lsls	r3, r3, #3
 8000ae8:	4413      	add	r3, r2
 8000aea:	889b      	ldrh	r3, [r3, #4]
 8000aec:	4618      	mov	r0, r3
 8000aee:	f002 f9cd 	bl	8002e8c <LCD_ClrScr>
		else
		{
			LCD_DrawBMP(0, 0, g_LcdHeight, g_LcdWidth, s_UI800[s_ColorIndex].pBmp);
		}
	}	
}
 8000af2:	e032      	b.n	8000b5a <DispBackground+0x9a>
			LCD_DrawBMP(0, 0, g_LcdHeight, g_LcdWidth, s_UI480[s_ColorIndex].pBmp);
 8000af4:	4b1d      	ldr	r3, [pc, #116]	; (8000b6c <DispBackground+0xac>)
 8000af6:	881a      	ldrh	r2, [r3, #0]
 8000af8:	4b19      	ldr	r3, [pc, #100]	; (8000b60 <DispBackground+0xa0>)
 8000afa:	8819      	ldrh	r1, [r3, #0]
 8000afc:	4b19      	ldr	r3, [pc, #100]	; (8000b64 <DispBackground+0xa4>)
 8000afe:	881b      	ldrh	r3, [r3, #0]
 8000b00:	4618      	mov	r0, r3
 8000b02:	4b19      	ldr	r3, [pc, #100]	; (8000b68 <DispBackground+0xa8>)
 8000b04:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
 8000b08:	9300      	str	r3, [sp, #0]
 8000b0a:	460b      	mov	r3, r1
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	2000      	movs	r0, #0
 8000b10:	f002 f9ee 	bl	8002ef0 <LCD_DrawBMP>
}
 8000b14:	e021      	b.n	8000b5a <DispBackground+0x9a>
		if (s_UI800[s_ColorIndex].pBmp == 0)
 8000b16:	4b13      	ldr	r3, [pc, #76]	; (8000b64 <DispBackground+0xa4>)
 8000b18:	881b      	ldrh	r3, [r3, #0]
 8000b1a:	461a      	mov	r2, r3
 8000b1c:	4b14      	ldr	r3, [pc, #80]	; (8000b70 <DispBackground+0xb0>)
 8000b1e:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d109      	bne.n	8000b3a <DispBackground+0x7a>
			LCD_ClrScr(s_UI800[s_ColorIndex].BackColor);  	/* ÇåÆÁ, Ìî³äµ¥É« */
 8000b26:	4b0f      	ldr	r3, [pc, #60]	; (8000b64 <DispBackground+0xa4>)
 8000b28:	881b      	ldrh	r3, [r3, #0]
 8000b2a:	4a11      	ldr	r2, [pc, #68]	; (8000b70 <DispBackground+0xb0>)
 8000b2c:	00db      	lsls	r3, r3, #3
 8000b2e:	4413      	add	r3, r2
 8000b30:	889b      	ldrh	r3, [r3, #4]
 8000b32:	4618      	mov	r0, r3
 8000b34:	f002 f9aa 	bl	8002e8c <LCD_ClrScr>
}
 8000b38:	e00f      	b.n	8000b5a <DispBackground+0x9a>
			LCD_DrawBMP(0, 0, g_LcdHeight, g_LcdWidth, s_UI800[s_ColorIndex].pBmp);
 8000b3a:	4b0c      	ldr	r3, [pc, #48]	; (8000b6c <DispBackground+0xac>)
 8000b3c:	881a      	ldrh	r2, [r3, #0]
 8000b3e:	4b08      	ldr	r3, [pc, #32]	; (8000b60 <DispBackground+0xa0>)
 8000b40:	8819      	ldrh	r1, [r3, #0]
 8000b42:	4b08      	ldr	r3, [pc, #32]	; (8000b64 <DispBackground+0xa4>)
 8000b44:	881b      	ldrh	r3, [r3, #0]
 8000b46:	4618      	mov	r0, r3
 8000b48:	4b09      	ldr	r3, [pc, #36]	; (8000b70 <DispBackground+0xb0>)
 8000b4a:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
 8000b4e:	9300      	str	r3, [sp, #0]
 8000b50:	460b      	mov	r3, r1
 8000b52:	2100      	movs	r1, #0
 8000b54:	2000      	movs	r0, #0
 8000b56:	f002 f9cb 	bl	8002ef0 <LCD_DrawBMP>
}
 8000b5a:	bf00      	nop
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	2000000c 	.word	0x2000000c
 8000b64:	20000034 	.word	0x20000034
 8000b68:	080260cc 	.word	0x080260cc
 8000b6c:	2000000a 	.word	0x2000000a
 8000b70:	08026104 	.word	0x08026104

08000b74 <LoadParam>:
#include "param.h"

PARAM_T g_tParam;

void LoadParam(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
	bsp_ReadCpuFlash(PARAM_ADDR, (uint8_t *)&g_tParam, sizeof(PARAM_T));
#endif

#ifdef PARAM_SAVE_TO_EEPROM
	/* ¶ÁÈ¡EEPROMÖÐµÄ²ÎÊý */
	ee_ReadBytes((uint8_t *)&g_tParam, PARAM_ADDR, sizeof(PARAM_T));
 8000b78:	2238      	movs	r2, #56	; 0x38
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	4841      	ldr	r0, [pc, #260]	; (8000c84 <LoadParam+0x110>)
 8000b7e:	f001 f9e3 	bl	8001f48 <ee_ReadBytes>
#endif

	/* Ìî³äÈ±Ê¡²ÎÊý */
	if (g_tParam.ParamVer != PARAM_VER)
 8000b82:	4b40      	ldr	r3, [pc, #256]	; (8000c84 <LoadParam+0x110>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 8000b8a:	d078      	beq.n	8000c7e <LoadParam+0x10a>
	{
		g_tParam.ParamVer = PARAM_VER;
 8000b8c:	4b3d      	ldr	r3, [pc, #244]	; (8000c84 <LoadParam+0x110>)
 8000b8e:	f44f 7281 	mov.w	r2, #258	; 0x102
 8000b92:	601a      	str	r2, [r3, #0]

		g_tParam.ucBackLight = 200;
 8000b94:	4b3b      	ldr	r3, [pc, #236]	; (8000c84 <LoadParam+0x110>)
 8000b96:	22c8      	movs	r2, #200	; 0xc8
 8000b98:	711a      	strb	r2, [r3, #4]

		/* uip  ±¾»úIPµØÖ· */
		g_tParam.uip_ip[0] = 192;
 8000b9a:	4b3a      	ldr	r3, [pc, #232]	; (8000c84 <LoadParam+0x110>)
 8000b9c:	22c0      	movs	r2, #192	; 0xc0
 8000b9e:	761a      	strb	r2, [r3, #24]
		g_tParam.uip_ip[1] = 168;
 8000ba0:	4b38      	ldr	r3, [pc, #224]	; (8000c84 <LoadParam+0x110>)
 8000ba2:	22a8      	movs	r2, #168	; 0xa8
 8000ba4:	765a      	strb	r2, [r3, #25]
		g_tParam.uip_ip[2] = 1;
 8000ba6:	4b37      	ldr	r3, [pc, #220]	; (8000c84 <LoadParam+0x110>)
 8000ba8:	2201      	movs	r2, #1
 8000baa:	769a      	strb	r2, [r3, #26]
		g_tParam.uip_ip[3] = 11;
 8000bac:	4b35      	ldr	r3, [pc, #212]	; (8000c84 <LoadParam+0x110>)
 8000bae:	220b      	movs	r2, #11
 8000bb0:	76da      	strb	r2, [r3, #27]

		/* uip  ×ÓÍøÑÚÂë */
		g_tParam.uip_net_mask[0] = 255;
 8000bb2:	4b34      	ldr	r3, [pc, #208]	; (8000c84 <LoadParam+0x110>)
 8000bb4:	22ff      	movs	r2, #255	; 0xff
 8000bb6:	771a      	strb	r2, [r3, #28]
		g_tParam.uip_net_mask[1] = 255;
 8000bb8:	4b32      	ldr	r3, [pc, #200]	; (8000c84 <LoadParam+0x110>)
 8000bba:	22ff      	movs	r2, #255	; 0xff
 8000bbc:	775a      	strb	r2, [r3, #29]
		g_tParam.uip_net_mask[2] = 255;
 8000bbe:	4b31      	ldr	r3, [pc, #196]	; (8000c84 <LoadParam+0x110>)
 8000bc0:	22ff      	movs	r2, #255	; 0xff
 8000bc2:	779a      	strb	r2, [r3, #30]
		g_tParam.uip_net_mask[3] = 0;
 8000bc4:	4b2f      	ldr	r3, [pc, #188]	; (8000c84 <LoadParam+0x110>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	77da      	strb	r2, [r3, #31]

		/* uip  Ä¬ÈÏÍø¹Ø */
		g_tParam.uip_net_gate[0] = 192;
 8000bca:	4b2e      	ldr	r3, [pc, #184]	; (8000c84 <LoadParam+0x110>)
 8000bcc:	22c0      	movs	r2, #192	; 0xc0
 8000bce:	f883 2020 	strb.w	r2, [r3, #32]
		g_tParam.uip_net_gate[1] = 168;
 8000bd2:	4b2c      	ldr	r3, [pc, #176]	; (8000c84 <LoadParam+0x110>)
 8000bd4:	22a8      	movs	r2, #168	; 0xa8
 8000bd6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		g_tParam.uip_net_gate[2] = 1;
 8000bda:	4b2a      	ldr	r3, [pc, #168]	; (8000c84 <LoadParam+0x110>)
 8000bdc:	2201      	movs	r2, #1
 8000bde:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		g_tParam.uip_net_gate[3] = 1;
 8000be2:	4b28      	ldr	r3, [pc, #160]	; (8000c84 <LoadParam+0x110>)
 8000be4:	2201      	movs	r2, #1
 8000be6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

		/* lwip  ±¾»úIPµØÖ· */
		g_tParam.lwip_ip[0] = 192;
 8000bea:	4b26      	ldr	r3, [pc, #152]	; (8000c84 <LoadParam+0x110>)
 8000bec:	22c0      	movs	r2, #192	; 0xc0
 8000bee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		g_tParam.lwip_ip[1] = 168;
 8000bf2:	4b24      	ldr	r3, [pc, #144]	; (8000c84 <LoadParam+0x110>)
 8000bf4:	22a8      	movs	r2, #168	; 0xa8
 8000bf6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		g_tParam.lwip_ip[2] = 1;
 8000bfa:	4b22      	ldr	r3, [pc, #136]	; (8000c84 <LoadParam+0x110>)
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		g_tParam.lwip_ip[3] = 12;
 8000c02:	4b20      	ldr	r3, [pc, #128]	; (8000c84 <LoadParam+0x110>)
 8000c04:	220c      	movs	r2, #12
 8000c06:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

		/* lwip  ×ÓÍøÑÚÂë */
		g_tParam.lwip_net_mask[0] = 255;
 8000c0a:	4b1e      	ldr	r3, [pc, #120]	; (8000c84 <LoadParam+0x110>)
 8000c0c:	22ff      	movs	r2, #255	; 0xff
 8000c0e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		g_tParam.lwip_net_mask[1] = 255;
 8000c12:	4b1c      	ldr	r3, [pc, #112]	; (8000c84 <LoadParam+0x110>)
 8000c14:	22ff      	movs	r2, #255	; 0xff
 8000c16:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		g_tParam.lwip_net_mask[2] = 255;
 8000c1a:	4b1a      	ldr	r3, [pc, #104]	; (8000c84 <LoadParam+0x110>)
 8000c1c:	22ff      	movs	r2, #255	; 0xff
 8000c1e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		g_tParam.lwip_net_mask[3] = 0;
 8000c22:	4b18      	ldr	r3, [pc, #96]	; (8000c84 <LoadParam+0x110>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

		/* lwip  Ä¬ÈÏÍø¹Ø */
		g_tParam.lwip_net_gate[0] = 192;
 8000c2a:	4b16      	ldr	r3, [pc, #88]	; (8000c84 <LoadParam+0x110>)
 8000c2c:	22c0      	movs	r2, #192	; 0xc0
 8000c2e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		g_tParam.lwip_net_gate[1] = 168;
 8000c32:	4b14      	ldr	r3, [pc, #80]	; (8000c84 <LoadParam+0x110>)
 8000c34:	22a8      	movs	r2, #168	; 0xa8
 8000c36:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		g_tParam.lwip_net_gate[2] = 1;
 8000c3a:	4b12      	ldr	r3, [pc, #72]	; (8000c84 <LoadParam+0x110>)
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
		g_tParam.lwip_net_gate[3] = 1;
 8000c42:	4b10      	ldr	r3, [pc, #64]	; (8000c84 <LoadParam+0x110>)
 8000c44:	2201      	movs	r2, #1
 8000c46:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

		g_tParam.ucRadioMode     = 0;				/* 1 = AM »ò 0 = FM */
 8000c4a:	4b0e      	ldr	r3, [pc, #56]	; (8000c84 <LoadParam+0x110>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		g_tParam.ucRadioListType = 0;				/* µçÌ¨ÁÐ±íÀàÐÍ¡£0ÎäººµØÇø»ò1È«¹ú */
 8000c52:	4b0c      	ldr	r3, [pc, #48]	; (8000c84 <LoadParam+0x110>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
		g_tParam.ucIndexFM       = 0;				/* µ±Ç°FMµçÌ¨Ë÷Òý */
 8000c5a:	4b0a      	ldr	r3, [pc, #40]	; (8000c84 <LoadParam+0x110>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
		g_tParam.ucIndexAM       = 0;				/* µ±Ç°µçÌ¨Ë÷Òý */
 8000c62:	4b08      	ldr	r3, [pc, #32]	; (8000c84 <LoadParam+0x110>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
		g_tParam.ucRadioVolume   = 36;				/* ÒôÁ¿ */
 8000c6a:	4b06      	ldr	r3, [pc, #24]	; (8000c84 <LoadParam+0x110>)
 8000c6c:	2224      	movs	r2, #36	; 0x24
 8000c6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		g_tParam.ucSpkOutEn      = 1;				/* ÑïÉùÆ÷Êä³öÊ¹ÄÜ */
 8000c72:	4b04      	ldr	r3, [pc, #16]	; (8000c84 <LoadParam+0x110>)
 8000c74:	2201      	movs	r2, #1
 8000c76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

		SaveParam();							/* ½«ÐÂ²ÎÊýÐ´ÈëFlash */
 8000c7a:	f000 f805 	bl	8000c88 <SaveParam>
	}
}
 8000c7e:	bf00      	nop
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	20000038 	.word	0x20000038

08000c88 <SaveParam>:

void SaveParam(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
#ifdef PARAM_SAVE_TO_FLASH
	bsp_WriteCpuFlash(PARAM_ADDR, (unsigned char *)&g_tParam, sizeof(PARAM_T));
#endif

#ifdef PARAM_SAVE_TO_EEPROM
	ee_WriteBytes((uint8_t *)&g_tParam, PARAM_ADDR, sizeof(PARAM_T));
 8000c8c:	2238      	movs	r2, #56	; 0x38
 8000c8e:	2100      	movs	r1, #0
 8000c90:	4802      	ldr	r0, [pc, #8]	; (8000c9c <SaveParam+0x14>)
 8000c92:	f001 f9b8 	bl	8002006 <ee_WriteBytes>
#endif
}
 8000c96:	bf00      	nop
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	20000038 	.word	0x20000038

08000ca0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b083      	sub	sp, #12
 8000ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	607b      	str	r3, [r7, #4]
 8000caa:	4b10      	ldr	r3, [pc, #64]	; (8000cec <HAL_MspInit+0x4c>)
 8000cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cae:	4a0f      	ldr	r2, [pc, #60]	; (8000cec <HAL_MspInit+0x4c>)
 8000cb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cb4:	6453      	str	r3, [r2, #68]	; 0x44
 8000cb6:	4b0d      	ldr	r3, [pc, #52]	; (8000cec <HAL_MspInit+0x4c>)
 8000cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cbe:	607b      	str	r3, [r7, #4]
 8000cc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	603b      	str	r3, [r7, #0]
 8000cc6:	4b09      	ldr	r3, [pc, #36]	; (8000cec <HAL_MspInit+0x4c>)
 8000cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cca:	4a08      	ldr	r2, [pc, #32]	; (8000cec <HAL_MspInit+0x4c>)
 8000ccc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cd0:	6413      	str	r3, [r2, #64]	; 0x40
 8000cd2:	4b06      	ldr	r3, [pc, #24]	; (8000cec <HAL_MspInit+0x4c>)
 8000cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cda:	603b      	str	r3, [r7, #0]
 8000cdc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cde:	bf00      	nop
 8000ce0:	370c      	adds	r7, #12
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	40023800 	.word	0x40023800

08000cf0 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b084      	sub	sp, #16
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	60f8      	str	r0, [r7, #12]
 8000cf8:	60b9      	str	r1, [r7, #8]
 8000cfa:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d101      	bne.n	8000d06 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8000d02:	2301      	movs	r3, #1
 8000d04:	e038      	b.n	8000d78 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8000d0c:	b2db      	uxtb	r3, r3
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d106      	bne.n	8000d20 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	2200      	movs	r2, #0
 8000d16:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8000d1a:	68f8      	ldr	r0, [r7, #12]
 8000d1c:	f000 f830 	bl	8000d80 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	681a      	ldr	r2, [r3, #0]
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	3308      	adds	r3, #8
 8000d28:	4619      	mov	r1, r3
 8000d2a:	4610      	mov	r0, r2
 8000d2c:	f000 fc28 	bl	8001580 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	6818      	ldr	r0, [r3, #0]
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	689b      	ldr	r3, [r3, #8]
 8000d38:	461a      	mov	r2, r3
 8000d3a:	68b9      	ldr	r1, [r7, #8]
 8000d3c:	f000 fc8a 	bl	8001654 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	6858      	ldr	r0, [r3, #4]
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	689a      	ldr	r2, [r3, #8]
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4c:	6879      	ldr	r1, [r7, #4]
 8000d4e:	f000 fcb7 	bl	80016c0 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	68fa      	ldr	r2, [r7, #12]
 8000d58:	6892      	ldr	r2, [r2, #8]
 8000d5a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	68fa      	ldr	r2, [r7, #12]
 8000d64:	6892      	ldr	r2, [r2, #8]
 8000d66:	f041 0101 	orr.w	r1, r1, #1
 8000d6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	2201      	movs	r2, #1
 8000d72:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 8000d76:	2300      	movs	r3, #0
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	3710      	adds	r7, #16
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}

08000d80 <HAL_SRAM_MspInit>:
  * @param  hsram pointer to a SRAM_HandleTypeDef structure that contains
  *                the configuration information for SRAM module.
  * @retval None
  */
__weak void HAL_SRAM_MspInit(SRAM_HandleTypeDef *hsram)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  UNUSED(hsram);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SRAM_MspInit could be implemented in the user file
   */
}
 8000d88:	bf00      	nop
 8000d8a:	370c      	adds	r7, #12
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr

08000d94 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d101      	bne.n	8000da6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8000da2:	2301      	movs	r3, #1
 8000da4:	e03f      	b.n	8000e26 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000dac:	b2db      	uxtb	r3, r3
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d106      	bne.n	8000dc0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	2200      	movs	r2, #0
 8000db6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8000dba:	6878      	ldr	r0, [r7, #4]
 8000dbc:	f000 f837 	bl	8000e2e <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	2224      	movs	r2, #36	; 0x24
 8000dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	68da      	ldr	r2, [r3, #12]
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000dd6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8000dd8:	6878      	ldr	r0, [r7, #4]
 8000dda:	f000 f933 	bl	8001044 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	691a      	ldr	r2, [r3, #16]
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8000dec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	695a      	ldr	r2, [r3, #20]
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8000dfc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	68da      	ldr	r2, [r3, #12]
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000e0c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	2200      	movs	r2, #0
 8000e12:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2220      	movs	r2, #32
 8000e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	2220      	movs	r2, #32
 8000e20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8000e24:	2300      	movs	r3, #0
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3708      	adds	r7, #8
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}

08000e2e <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8000e2e:	b480      	push	{r7}
 8000e30:	b083      	sub	sp, #12
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 8000e36:	bf00      	nop
 8000e38:	370c      	adds	r7, #12
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr

08000e42 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000e42:	b580      	push	{r7, lr}
 8000e44:	b08a      	sub	sp, #40	; 0x28
 8000e46:	af02      	add	r7, sp, #8
 8000e48:	60f8      	str	r0, [r7, #12]
 8000e4a:	60b9      	str	r1, [r7, #8]
 8000e4c:	603b      	str	r3, [r7, #0]
 8000e4e:	4613      	mov	r3, r2
 8000e50:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8000e52:	2300      	movs	r3, #0
 8000e54:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	2b20      	cmp	r3, #32
 8000e60:	d17c      	bne.n	8000f5c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8000e62:	68bb      	ldr	r3, [r7, #8]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d002      	beq.n	8000e6e <HAL_UART_Transmit+0x2c>
 8000e68:	88fb      	ldrh	r3, [r7, #6]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d101      	bne.n	8000e72 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	e075      	b.n	8000f5e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000e78:	2b01      	cmp	r3, #1
 8000e7a:	d101      	bne.n	8000e80 <HAL_UART_Transmit+0x3e>
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	e06e      	b.n	8000f5e <HAL_UART_Transmit+0x11c>
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	2201      	movs	r2, #1
 8000e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	2221      	movs	r2, #33	; 0x21
 8000e92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8000e96:	f002 ff6b 	bl	8003d70 <HAL_GetTick>
 8000e9a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	88fa      	ldrh	r2, [r7, #6]
 8000ea0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	88fa      	ldrh	r2, [r7, #6]
 8000ea6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	689b      	ldr	r3, [r3, #8]
 8000eac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000eb0:	d108      	bne.n	8000ec4 <HAL_UART_Transmit+0x82>
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	691b      	ldr	r3, [r3, #16]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d104      	bne.n	8000ec4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8000ebe:	68bb      	ldr	r3, [r7, #8]
 8000ec0:	61bb      	str	r3, [r7, #24]
 8000ec2:	e003      	b.n	8000ecc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	2200      	movs	r2, #0
 8000ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8000ed4:	e02a      	b.n	8000f2c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	9300      	str	r3, [sp, #0]
 8000eda:	697b      	ldr	r3, [r7, #20]
 8000edc:	2200      	movs	r2, #0
 8000ede:	2180      	movs	r1, #128	; 0x80
 8000ee0:	68f8      	ldr	r0, [r7, #12]
 8000ee2:	f000 f840 	bl	8000f66 <UART_WaitOnFlagUntilTimeout>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8000eec:	2303      	movs	r3, #3
 8000eee:	e036      	b.n	8000f5e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8000ef0:	69fb      	ldr	r3, [r7, #28]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d10b      	bne.n	8000f0e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8000ef6:	69bb      	ldr	r3, [r7, #24]
 8000ef8:	881b      	ldrh	r3, [r3, #0]
 8000efa:	461a      	mov	r2, r3
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000f04:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8000f06:	69bb      	ldr	r3, [r7, #24]
 8000f08:	3302      	adds	r3, #2
 8000f0a:	61bb      	str	r3, [r7, #24]
 8000f0c:	e007      	b.n	8000f1e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	781a      	ldrb	r2, [r3, #0]
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8000f18:	69fb      	ldr	r3, [r7, #28]
 8000f1a:	3301      	adds	r3, #1
 8000f1c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8000f22:	b29b      	uxth	r3, r3
 8000f24:	3b01      	subs	r3, #1
 8000f26:	b29a      	uxth	r2, r3
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8000f30:	b29b      	uxth	r3, r3
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d1cf      	bne.n	8000ed6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	9300      	str	r3, [sp, #0]
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	2140      	movs	r1, #64	; 0x40
 8000f40:	68f8      	ldr	r0, [r7, #12]
 8000f42:	f000 f810 	bl	8000f66 <UART_WaitOnFlagUntilTimeout>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8000f4c:	2303      	movs	r3, #3
 8000f4e:	e006      	b.n	8000f5e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	2220      	movs	r2, #32
 8000f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	e000      	b.n	8000f5e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8000f5c:	2302      	movs	r3, #2
  }
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3720      	adds	r7, #32
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}

08000f66 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8000f66:	b580      	push	{r7, lr}
 8000f68:	b090      	sub	sp, #64	; 0x40
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	60f8      	str	r0, [r7, #12]
 8000f6e:	60b9      	str	r1, [r7, #8]
 8000f70:	603b      	str	r3, [r7, #0]
 8000f72:	4613      	mov	r3, r2
 8000f74:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8000f76:	e050      	b.n	800101a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8000f78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000f7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f7e:	d04c      	beq.n	800101a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000f80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d007      	beq.n	8000f96 <UART_WaitOnFlagUntilTimeout+0x30>
 8000f86:	f002 fef3 	bl	8003d70 <HAL_GetTick>
 8000f8a:	4602      	mov	r2, r0
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	1ad3      	subs	r3, r2, r3
 8000f90:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000f92:	429a      	cmp	r2, r3
 8000f94:	d241      	bcs.n	800101a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	330c      	adds	r3, #12
 8000f9c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fa0:	e853 3f00 	ldrex	r3, [r3]
 8000fa4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8000fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8000fac:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	330c      	adds	r3, #12
 8000fb4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000fb6:	637a      	str	r2, [r7, #52]	; 0x34
 8000fb8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000fba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000fbc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000fbe:	e841 2300 	strex	r3, r2, [r1]
 8000fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8000fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d1e5      	bne.n	8000f96 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	3314      	adds	r3, #20
 8000fd0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	e853 3f00 	ldrex	r3, [r3]
 8000fd8:	613b      	str	r3, [r7, #16]
   return(result);
 8000fda:	693b      	ldr	r3, [r7, #16]
 8000fdc:	f023 0301 	bic.w	r3, r3, #1
 8000fe0:	63bb      	str	r3, [r7, #56]	; 0x38
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	3314      	adds	r3, #20
 8000fe8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000fea:	623a      	str	r2, [r7, #32]
 8000fec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000fee:	69f9      	ldr	r1, [r7, #28]
 8000ff0:	6a3a      	ldr	r2, [r7, #32]
 8000ff2:	e841 2300 	strex	r3, r2, [r1]
 8000ff6:	61bb      	str	r3, [r7, #24]
   return(result);
 8000ff8:	69bb      	ldr	r3, [r7, #24]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d1e5      	bne.n	8000fca <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	2220      	movs	r2, #32
 8001002:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	2220      	movs	r2, #32
 800100a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	2200      	movs	r2, #0
 8001012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001016:	2303      	movs	r3, #3
 8001018:	e00f      	b.n	800103a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	4013      	ands	r3, r2
 8001024:	68ba      	ldr	r2, [r7, #8]
 8001026:	429a      	cmp	r2, r3
 8001028:	bf0c      	ite	eq
 800102a:	2301      	moveq	r3, #1
 800102c:	2300      	movne	r3, #0
 800102e:	b2db      	uxtb	r3, r3
 8001030:	461a      	mov	r2, r3
 8001032:	79fb      	ldrb	r3, [r7, #7]
 8001034:	429a      	cmp	r2, r3
 8001036:	d09f      	beq.n	8000f78 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001038:	2300      	movs	r3, #0
}
 800103a:	4618      	mov	r0, r3
 800103c:	3740      	adds	r7, #64	; 0x40
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
	...

08001044 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001044:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001048:	b0c0      	sub	sp, #256	; 0x100
 800104a:	af00      	add	r7, sp, #0
 800104c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	691b      	ldr	r3, [r3, #16]
 8001058:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800105c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001060:	68d9      	ldr	r1, [r3, #12]
 8001062:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	ea40 0301 	orr.w	r3, r0, r1
 800106c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800106e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001072:	689a      	ldr	r2, [r3, #8]
 8001074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001078:	691b      	ldr	r3, [r3, #16]
 800107a:	431a      	orrs	r2, r3
 800107c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001080:	695b      	ldr	r3, [r3, #20]
 8001082:	431a      	orrs	r2, r3
 8001084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001088:	69db      	ldr	r3, [r3, #28]
 800108a:	4313      	orrs	r3, r2
 800108c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800109c:	f021 010c 	bic.w	r1, r1, #12
 80010a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80010aa:	430b      	orrs	r3, r1
 80010ac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80010ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	695b      	ldr	r3, [r3, #20]
 80010b6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80010ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80010be:	6999      	ldr	r1, [r3, #24]
 80010c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	ea40 0301 	orr.w	r3, r0, r1
 80010ca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80010cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	4b8f      	ldr	r3, [pc, #572]	; (8001310 <UART_SetConfig+0x2cc>)
 80010d4:	429a      	cmp	r2, r3
 80010d6:	d005      	beq.n	80010e4 <UART_SetConfig+0xa0>
 80010d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	4b8d      	ldr	r3, [pc, #564]	; (8001314 <UART_SetConfig+0x2d0>)
 80010e0:	429a      	cmp	r2, r3
 80010e2:	d104      	bne.n	80010ee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80010e4:	f003 fd98 	bl	8004c18 <HAL_RCC_GetPCLK2Freq>
 80010e8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80010ec:	e003      	b.n	80010f6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80010ee:	f003 fd7f 	bl	8004bf0 <HAL_RCC_GetPCLK1Freq>
 80010f2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80010f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80010fa:	69db      	ldr	r3, [r3, #28]
 80010fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001100:	f040 810c 	bne.w	800131c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001104:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001108:	2200      	movs	r2, #0
 800110a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800110e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001112:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001116:	4622      	mov	r2, r4
 8001118:	462b      	mov	r3, r5
 800111a:	1891      	adds	r1, r2, r2
 800111c:	65b9      	str	r1, [r7, #88]	; 0x58
 800111e:	415b      	adcs	r3, r3
 8001120:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001122:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001126:	4621      	mov	r1, r4
 8001128:	eb12 0801 	adds.w	r8, r2, r1
 800112c:	4629      	mov	r1, r5
 800112e:	eb43 0901 	adc.w	r9, r3, r1
 8001132:	f04f 0200 	mov.w	r2, #0
 8001136:	f04f 0300 	mov.w	r3, #0
 800113a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800113e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001142:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001146:	4690      	mov	r8, r2
 8001148:	4699      	mov	r9, r3
 800114a:	4623      	mov	r3, r4
 800114c:	eb18 0303 	adds.w	r3, r8, r3
 8001150:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001154:	462b      	mov	r3, r5
 8001156:	eb49 0303 	adc.w	r3, r9, r3
 800115a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800115e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	2200      	movs	r2, #0
 8001166:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800116a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800116e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8001172:	460b      	mov	r3, r1
 8001174:	18db      	adds	r3, r3, r3
 8001176:	653b      	str	r3, [r7, #80]	; 0x50
 8001178:	4613      	mov	r3, r2
 800117a:	eb42 0303 	adc.w	r3, r2, r3
 800117e:	657b      	str	r3, [r7, #84]	; 0x54
 8001180:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001184:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8001188:	f7ff f826 	bl	80001d8 <__aeabi_uldivmod>
 800118c:	4602      	mov	r2, r0
 800118e:	460b      	mov	r3, r1
 8001190:	4b61      	ldr	r3, [pc, #388]	; (8001318 <UART_SetConfig+0x2d4>)
 8001192:	fba3 2302 	umull	r2, r3, r3, r2
 8001196:	095b      	lsrs	r3, r3, #5
 8001198:	011c      	lsls	r4, r3, #4
 800119a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800119e:	2200      	movs	r2, #0
 80011a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80011a4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80011a8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80011ac:	4642      	mov	r2, r8
 80011ae:	464b      	mov	r3, r9
 80011b0:	1891      	adds	r1, r2, r2
 80011b2:	64b9      	str	r1, [r7, #72]	; 0x48
 80011b4:	415b      	adcs	r3, r3
 80011b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80011b8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80011bc:	4641      	mov	r1, r8
 80011be:	eb12 0a01 	adds.w	sl, r2, r1
 80011c2:	4649      	mov	r1, r9
 80011c4:	eb43 0b01 	adc.w	fp, r3, r1
 80011c8:	f04f 0200 	mov.w	r2, #0
 80011cc:	f04f 0300 	mov.w	r3, #0
 80011d0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80011d4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80011d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80011dc:	4692      	mov	sl, r2
 80011de:	469b      	mov	fp, r3
 80011e0:	4643      	mov	r3, r8
 80011e2:	eb1a 0303 	adds.w	r3, sl, r3
 80011e6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80011ea:	464b      	mov	r3, r9
 80011ec:	eb4b 0303 	adc.w	r3, fp, r3
 80011f0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80011f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	2200      	movs	r2, #0
 80011fc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001200:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001204:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8001208:	460b      	mov	r3, r1
 800120a:	18db      	adds	r3, r3, r3
 800120c:	643b      	str	r3, [r7, #64]	; 0x40
 800120e:	4613      	mov	r3, r2
 8001210:	eb42 0303 	adc.w	r3, r2, r3
 8001214:	647b      	str	r3, [r7, #68]	; 0x44
 8001216:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800121a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800121e:	f7fe ffdb 	bl	80001d8 <__aeabi_uldivmod>
 8001222:	4602      	mov	r2, r0
 8001224:	460b      	mov	r3, r1
 8001226:	4611      	mov	r1, r2
 8001228:	4b3b      	ldr	r3, [pc, #236]	; (8001318 <UART_SetConfig+0x2d4>)
 800122a:	fba3 2301 	umull	r2, r3, r3, r1
 800122e:	095b      	lsrs	r3, r3, #5
 8001230:	2264      	movs	r2, #100	; 0x64
 8001232:	fb02 f303 	mul.w	r3, r2, r3
 8001236:	1acb      	subs	r3, r1, r3
 8001238:	00db      	lsls	r3, r3, #3
 800123a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800123e:	4b36      	ldr	r3, [pc, #216]	; (8001318 <UART_SetConfig+0x2d4>)
 8001240:	fba3 2302 	umull	r2, r3, r3, r2
 8001244:	095b      	lsrs	r3, r3, #5
 8001246:	005b      	lsls	r3, r3, #1
 8001248:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800124c:	441c      	add	r4, r3
 800124e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001252:	2200      	movs	r2, #0
 8001254:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001258:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800125c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8001260:	4642      	mov	r2, r8
 8001262:	464b      	mov	r3, r9
 8001264:	1891      	adds	r1, r2, r2
 8001266:	63b9      	str	r1, [r7, #56]	; 0x38
 8001268:	415b      	adcs	r3, r3
 800126a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800126c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001270:	4641      	mov	r1, r8
 8001272:	1851      	adds	r1, r2, r1
 8001274:	6339      	str	r1, [r7, #48]	; 0x30
 8001276:	4649      	mov	r1, r9
 8001278:	414b      	adcs	r3, r1
 800127a:	637b      	str	r3, [r7, #52]	; 0x34
 800127c:	f04f 0200 	mov.w	r2, #0
 8001280:	f04f 0300 	mov.w	r3, #0
 8001284:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8001288:	4659      	mov	r1, fp
 800128a:	00cb      	lsls	r3, r1, #3
 800128c:	4651      	mov	r1, sl
 800128e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001292:	4651      	mov	r1, sl
 8001294:	00ca      	lsls	r2, r1, #3
 8001296:	4610      	mov	r0, r2
 8001298:	4619      	mov	r1, r3
 800129a:	4603      	mov	r3, r0
 800129c:	4642      	mov	r2, r8
 800129e:	189b      	adds	r3, r3, r2
 80012a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80012a4:	464b      	mov	r3, r9
 80012a6:	460a      	mov	r2, r1
 80012a8:	eb42 0303 	adc.w	r3, r2, r3
 80012ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80012b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	2200      	movs	r2, #0
 80012b8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80012bc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80012c0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80012c4:	460b      	mov	r3, r1
 80012c6:	18db      	adds	r3, r3, r3
 80012c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80012ca:	4613      	mov	r3, r2
 80012cc:	eb42 0303 	adc.w	r3, r2, r3
 80012d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012d2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80012d6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80012da:	f7fe ff7d 	bl	80001d8 <__aeabi_uldivmod>
 80012de:	4602      	mov	r2, r0
 80012e0:	460b      	mov	r3, r1
 80012e2:	4b0d      	ldr	r3, [pc, #52]	; (8001318 <UART_SetConfig+0x2d4>)
 80012e4:	fba3 1302 	umull	r1, r3, r3, r2
 80012e8:	095b      	lsrs	r3, r3, #5
 80012ea:	2164      	movs	r1, #100	; 0x64
 80012ec:	fb01 f303 	mul.w	r3, r1, r3
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	00db      	lsls	r3, r3, #3
 80012f4:	3332      	adds	r3, #50	; 0x32
 80012f6:	4a08      	ldr	r2, [pc, #32]	; (8001318 <UART_SetConfig+0x2d4>)
 80012f8:	fba2 2303 	umull	r2, r3, r2, r3
 80012fc:	095b      	lsrs	r3, r3, #5
 80012fe:	f003 0207 	and.w	r2, r3, #7
 8001302:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4422      	add	r2, r4
 800130a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800130c:	e106      	b.n	800151c <UART_SetConfig+0x4d8>
 800130e:	bf00      	nop
 8001310:	40011000 	.word	0x40011000
 8001314:	40011400 	.word	0x40011400
 8001318:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800131c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001320:	2200      	movs	r2, #0
 8001322:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001326:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800132a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800132e:	4642      	mov	r2, r8
 8001330:	464b      	mov	r3, r9
 8001332:	1891      	adds	r1, r2, r2
 8001334:	6239      	str	r1, [r7, #32]
 8001336:	415b      	adcs	r3, r3
 8001338:	627b      	str	r3, [r7, #36]	; 0x24
 800133a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800133e:	4641      	mov	r1, r8
 8001340:	1854      	adds	r4, r2, r1
 8001342:	4649      	mov	r1, r9
 8001344:	eb43 0501 	adc.w	r5, r3, r1
 8001348:	f04f 0200 	mov.w	r2, #0
 800134c:	f04f 0300 	mov.w	r3, #0
 8001350:	00eb      	lsls	r3, r5, #3
 8001352:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001356:	00e2      	lsls	r2, r4, #3
 8001358:	4614      	mov	r4, r2
 800135a:	461d      	mov	r5, r3
 800135c:	4643      	mov	r3, r8
 800135e:	18e3      	adds	r3, r4, r3
 8001360:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001364:	464b      	mov	r3, r9
 8001366:	eb45 0303 	adc.w	r3, r5, r3
 800136a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800136e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	2200      	movs	r2, #0
 8001376:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800137a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800137e:	f04f 0200 	mov.w	r2, #0
 8001382:	f04f 0300 	mov.w	r3, #0
 8001386:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800138a:	4629      	mov	r1, r5
 800138c:	008b      	lsls	r3, r1, #2
 800138e:	4621      	mov	r1, r4
 8001390:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001394:	4621      	mov	r1, r4
 8001396:	008a      	lsls	r2, r1, #2
 8001398:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800139c:	f7fe ff1c 	bl	80001d8 <__aeabi_uldivmod>
 80013a0:	4602      	mov	r2, r0
 80013a2:	460b      	mov	r3, r1
 80013a4:	4b60      	ldr	r3, [pc, #384]	; (8001528 <UART_SetConfig+0x4e4>)
 80013a6:	fba3 2302 	umull	r2, r3, r3, r2
 80013aa:	095b      	lsrs	r3, r3, #5
 80013ac:	011c      	lsls	r4, r3, #4
 80013ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80013b2:	2200      	movs	r2, #0
 80013b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80013b8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80013bc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80013c0:	4642      	mov	r2, r8
 80013c2:	464b      	mov	r3, r9
 80013c4:	1891      	adds	r1, r2, r2
 80013c6:	61b9      	str	r1, [r7, #24]
 80013c8:	415b      	adcs	r3, r3
 80013ca:	61fb      	str	r3, [r7, #28]
 80013cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80013d0:	4641      	mov	r1, r8
 80013d2:	1851      	adds	r1, r2, r1
 80013d4:	6139      	str	r1, [r7, #16]
 80013d6:	4649      	mov	r1, r9
 80013d8:	414b      	adcs	r3, r1
 80013da:	617b      	str	r3, [r7, #20]
 80013dc:	f04f 0200 	mov.w	r2, #0
 80013e0:	f04f 0300 	mov.w	r3, #0
 80013e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80013e8:	4659      	mov	r1, fp
 80013ea:	00cb      	lsls	r3, r1, #3
 80013ec:	4651      	mov	r1, sl
 80013ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80013f2:	4651      	mov	r1, sl
 80013f4:	00ca      	lsls	r2, r1, #3
 80013f6:	4610      	mov	r0, r2
 80013f8:	4619      	mov	r1, r3
 80013fa:	4603      	mov	r3, r0
 80013fc:	4642      	mov	r2, r8
 80013fe:	189b      	adds	r3, r3, r2
 8001400:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001404:	464b      	mov	r3, r9
 8001406:	460a      	mov	r2, r1
 8001408:	eb42 0303 	adc.w	r3, r2, r3
 800140c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001410:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	2200      	movs	r2, #0
 8001418:	67bb      	str	r3, [r7, #120]	; 0x78
 800141a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800141c:	f04f 0200 	mov.w	r2, #0
 8001420:	f04f 0300 	mov.w	r3, #0
 8001424:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8001428:	4649      	mov	r1, r9
 800142a:	008b      	lsls	r3, r1, #2
 800142c:	4641      	mov	r1, r8
 800142e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001432:	4641      	mov	r1, r8
 8001434:	008a      	lsls	r2, r1, #2
 8001436:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800143a:	f7fe fecd 	bl	80001d8 <__aeabi_uldivmod>
 800143e:	4602      	mov	r2, r0
 8001440:	460b      	mov	r3, r1
 8001442:	4611      	mov	r1, r2
 8001444:	4b38      	ldr	r3, [pc, #224]	; (8001528 <UART_SetConfig+0x4e4>)
 8001446:	fba3 2301 	umull	r2, r3, r3, r1
 800144a:	095b      	lsrs	r3, r3, #5
 800144c:	2264      	movs	r2, #100	; 0x64
 800144e:	fb02 f303 	mul.w	r3, r2, r3
 8001452:	1acb      	subs	r3, r1, r3
 8001454:	011b      	lsls	r3, r3, #4
 8001456:	3332      	adds	r3, #50	; 0x32
 8001458:	4a33      	ldr	r2, [pc, #204]	; (8001528 <UART_SetConfig+0x4e4>)
 800145a:	fba2 2303 	umull	r2, r3, r2, r3
 800145e:	095b      	lsrs	r3, r3, #5
 8001460:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001464:	441c      	add	r4, r3
 8001466:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800146a:	2200      	movs	r2, #0
 800146c:	673b      	str	r3, [r7, #112]	; 0x70
 800146e:	677a      	str	r2, [r7, #116]	; 0x74
 8001470:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8001474:	4642      	mov	r2, r8
 8001476:	464b      	mov	r3, r9
 8001478:	1891      	adds	r1, r2, r2
 800147a:	60b9      	str	r1, [r7, #8]
 800147c:	415b      	adcs	r3, r3
 800147e:	60fb      	str	r3, [r7, #12]
 8001480:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001484:	4641      	mov	r1, r8
 8001486:	1851      	adds	r1, r2, r1
 8001488:	6039      	str	r1, [r7, #0]
 800148a:	4649      	mov	r1, r9
 800148c:	414b      	adcs	r3, r1
 800148e:	607b      	str	r3, [r7, #4]
 8001490:	f04f 0200 	mov.w	r2, #0
 8001494:	f04f 0300 	mov.w	r3, #0
 8001498:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800149c:	4659      	mov	r1, fp
 800149e:	00cb      	lsls	r3, r1, #3
 80014a0:	4651      	mov	r1, sl
 80014a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80014a6:	4651      	mov	r1, sl
 80014a8:	00ca      	lsls	r2, r1, #3
 80014aa:	4610      	mov	r0, r2
 80014ac:	4619      	mov	r1, r3
 80014ae:	4603      	mov	r3, r0
 80014b0:	4642      	mov	r2, r8
 80014b2:	189b      	adds	r3, r3, r2
 80014b4:	66bb      	str	r3, [r7, #104]	; 0x68
 80014b6:	464b      	mov	r3, r9
 80014b8:	460a      	mov	r2, r1
 80014ba:	eb42 0303 	adc.w	r3, r2, r3
 80014be:	66fb      	str	r3, [r7, #108]	; 0x6c
 80014c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	2200      	movs	r2, #0
 80014c8:	663b      	str	r3, [r7, #96]	; 0x60
 80014ca:	667a      	str	r2, [r7, #100]	; 0x64
 80014cc:	f04f 0200 	mov.w	r2, #0
 80014d0:	f04f 0300 	mov.w	r3, #0
 80014d4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80014d8:	4649      	mov	r1, r9
 80014da:	008b      	lsls	r3, r1, #2
 80014dc:	4641      	mov	r1, r8
 80014de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80014e2:	4641      	mov	r1, r8
 80014e4:	008a      	lsls	r2, r1, #2
 80014e6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80014ea:	f7fe fe75 	bl	80001d8 <__aeabi_uldivmod>
 80014ee:	4602      	mov	r2, r0
 80014f0:	460b      	mov	r3, r1
 80014f2:	4b0d      	ldr	r3, [pc, #52]	; (8001528 <UART_SetConfig+0x4e4>)
 80014f4:	fba3 1302 	umull	r1, r3, r3, r2
 80014f8:	095b      	lsrs	r3, r3, #5
 80014fa:	2164      	movs	r1, #100	; 0x64
 80014fc:	fb01 f303 	mul.w	r3, r1, r3
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	011b      	lsls	r3, r3, #4
 8001504:	3332      	adds	r3, #50	; 0x32
 8001506:	4a08      	ldr	r2, [pc, #32]	; (8001528 <UART_SetConfig+0x4e4>)
 8001508:	fba2 2303 	umull	r2, r3, r2, r3
 800150c:	095b      	lsrs	r3, r3, #5
 800150e:	f003 020f 	and.w	r2, r3, #15
 8001512:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4422      	add	r2, r4
 800151a:	609a      	str	r2, [r3, #8]
}
 800151c:	bf00      	nop
 800151e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8001522:	46bd      	mov	sp, r7
 8001524:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001528:	51eb851f 	.word	0x51eb851f

0800152c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001530:	e7fe      	b.n	8001530 <NMI_Handler+0x4>

08001532 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001532:	b480      	push	{r7}
 8001534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001536:	e7fe      	b.n	8001536 <HardFault_Handler+0x4>

08001538 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800153c:	e7fe      	b.n	800153c <MemManage_Handler+0x4>

0800153e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800153e:	b480      	push	{r7}
 8001540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001542:	e7fe      	b.n	8001542 <BusFault_Handler+0x4>

08001544 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001548:	e7fe      	b.n	8001548 <UsageFault_Handler+0x4>

0800154a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800154a:	b480      	push	{r7}
 800154c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800154e:	bf00      	nop
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr

08001558 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800155c:	bf00      	nop
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr

08001566 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001566:	b480      	push	{r7}
 8001568:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800156a:	bf00      	nop
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr

08001574 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001578:	f002 fbe6 	bl	8003d48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800157c:	bf00      	nop
 800157e:	bd80      	pop	{r7, pc}

08001580 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8001580:	b480      	push	{r7}
 8001582:	b087      	sub	sp, #28
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001594:	683a      	ldr	r2, [r7, #0]
 8001596:	6812      	ldr	r2, [r2, #0]
 8001598:	f023 0101 	bic.w	r1, r3, #1
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	689b      	ldr	r3, [r3, #8]
 80015a6:	2b08      	cmp	r3, #8
 80015a8:	d102      	bne.n	80015b0 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80015aa:	2340      	movs	r3, #64	; 0x40
 80015ac:	617b      	str	r3, [r7, #20]
 80015ae:	e001      	b.n	80015b4 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 80015b0:	2300      	movs	r3, #0
 80015b2:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 80015c0:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 80015c6:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 80015cc:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 80015d2:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 80015d8:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 80015de:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 80015e4:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 80015ea:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 80015f0:	431a      	orrs	r2, r3
              Init->WriteBurst);
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 80015f6:	4313      	orrs	r3, r2
 80015f8:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	699b      	ldr	r3, [r3, #24]
 80015fe:	693a      	ldr	r2, [r7, #16]
 8001600:	4313      	orrs	r3, r2
 8001602:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001608:	693a      	ldr	r2, [r7, #16]
 800160a:	4313      	orrs	r3, r2
 800160c:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 800160e:	4b10      	ldr	r3, [pc, #64]	; (8001650 <FSMC_NORSRAM_Init+0xd0>)
 8001610:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001618:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8001620:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	43db      	mvns	r3, r3
 8001630:	ea02 0103 	and.w	r1, r2, r3
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	4319      	orrs	r1, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 8001642:	2300      	movs	r3, #0
}
 8001644:	4618      	mov	r0, r3
 8001646:	371c      	adds	r7, #28
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr
 8001650:	0008fb7f 	.word	0x0008fb7f

08001654 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8001654:	b480      	push	{r7}
 8001656:	b085      	sub	sp, #20
 8001658:	af00      	add	r7, sp, #0
 800165a:	60f8      	str	r0, [r7, #12]
 800165c:	60b9      	str	r1, [r7, #8]
 800165e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	1c5a      	adds	r2, r3, #1
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800166a:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800166e:	68bb      	ldr	r3, [r7, #8]
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	011b      	lsls	r3, r3, #4
 8001678:	431a      	orrs	r2, r3
 800167a:	68bb      	ldr	r3, [r7, #8]
 800167c:	689b      	ldr	r3, [r3, #8]
 800167e:	021b      	lsls	r3, r3, #8
 8001680:	431a      	orrs	r2, r3
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	68db      	ldr	r3, [r3, #12]
 8001686:	041b      	lsls	r3, r3, #16
 8001688:	431a      	orrs	r2, r3
 800168a:	68bb      	ldr	r3, [r7, #8]
 800168c:	691b      	ldr	r3, [r3, #16]
 800168e:	3b01      	subs	r3, #1
 8001690:	051b      	lsls	r3, r3, #20
 8001692:	431a      	orrs	r2, r3
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	695b      	ldr	r3, [r3, #20]
 8001698:	3b02      	subs	r3, #2
 800169a:	061b      	lsls	r3, r3, #24
 800169c:	431a      	orrs	r2, r3
 800169e:	68bb      	ldr	r3, [r7, #8]
 80016a0:	699b      	ldr	r3, [r3, #24]
 80016a2:	4313      	orrs	r3, r2
 80016a4:	687a      	ldr	r2, [r7, #4]
 80016a6:	3201      	adds	r2, #1
 80016a8:	4319      	orrs	r1, r3
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif
  return HAL_OK;
 80016b0:	2300      	movs	r3, #0
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3714      	adds	r7, #20
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
	...

080016c0 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b085      	sub	sp, #20
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	60f8      	str	r0, [r7, #12]
 80016c8:	60b9      	str	r1, [r7, #8]
 80016ca:	607a      	str	r2, [r7, #4]
 80016cc:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80016d4:	d11d      	bne.n	8001712 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	687a      	ldr	r2, [r7, #4]
 80016da:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80016de:	4b13      	ldr	r3, [pc, #76]	; (800172c <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 80016e0:	4013      	ands	r3, r2
 80016e2:	68ba      	ldr	r2, [r7, #8]
 80016e4:	6811      	ldr	r1, [r2, #0]
 80016e6:	68ba      	ldr	r2, [r7, #8]
 80016e8:	6852      	ldr	r2, [r2, #4]
 80016ea:	0112      	lsls	r2, r2, #4
 80016ec:	4311      	orrs	r1, r2
 80016ee:	68ba      	ldr	r2, [r7, #8]
 80016f0:	6892      	ldr	r2, [r2, #8]
 80016f2:	0212      	lsls	r2, r2, #8
 80016f4:	4311      	orrs	r1, r2
 80016f6:	68ba      	ldr	r2, [r7, #8]
 80016f8:	6992      	ldr	r2, [r2, #24]
 80016fa:	4311      	orrs	r1, r2
 80016fc:	68ba      	ldr	r2, [r7, #8]
 80016fe:	68d2      	ldr	r2, [r2, #12]
 8001700:	0412      	lsls	r2, r2, #16
 8001702:	430a      	orrs	r2, r1
 8001704:	ea43 0102 	orr.w	r1, r3, r2
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	687a      	ldr	r2, [r7, #4]
 800170c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8001710:	e005      	b.n	800171e <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	687a      	ldr	r2, [r7, #4]
 8001716:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800171a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800171e:	2300      	movs	r3, #0
}
 8001720:	4618      	mov	r0, r3
 8001722:	3714      	adds	r7, #20
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr
 800172c:	cff00000 	.word	0xcff00000

08001730 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001734:	4b06      	ldr	r3, [pc, #24]	; (8001750 <SystemInit+0x20>)
 8001736:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800173a:	4a05      	ldr	r2, [pc, #20]	; (8001750 <SystemInit+0x20>)
 800173c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001740:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001744:	bf00      	nop
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	e000ed00 	.word	0xe000ed00

08001754 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001754:	f8df d034 	ldr.w	sp, [pc, #52]	; 800178c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001758:	480d      	ldr	r0, [pc, #52]	; (8001790 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800175a:	490e      	ldr	r1, [pc, #56]	; (8001794 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800175c:	4a0e      	ldr	r2, [pc, #56]	; (8001798 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800175e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001760:	e002      	b.n	8001768 <LoopCopyDataInit>

08001762 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001762:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001764:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001766:	3304      	adds	r3, #4

08001768 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001768:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800176a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800176c:	d3f9      	bcc.n	8001762 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800176e:	4a0b      	ldr	r2, [pc, #44]	; (800179c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001770:	4c0b      	ldr	r4, [pc, #44]	; (80017a0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001772:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001774:	e001      	b.n	800177a <LoopFillZerobss>

08001776 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001776:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001778:	3204      	adds	r2, #4

0800177a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800177a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800177c:	d3fb      	bcc.n	8001776 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800177e:	f7ff ffd7 	bl	8001730 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001782:	f003 fa65 	bl	8004c50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001786:	f7fe ff57 	bl	8000638 <main>
  bx  lr    
 800178a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800178c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001790:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001794:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8001798:	08026164 	.word	0x08026164
  ldr r2, =_sbss
 800179c:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 80017a0:	2000230c 	.word	0x2000230c

080017a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017a4:	e7fe      	b.n	80017a4 <ADC_IRQHandler>

080017a6 <RA8875_ReadID>:
*********************************************************************************************************
*	Func name: RA8875_ReadID
*********************************************************************************************************
*/
uint16_t RA8875_ReadID(void)
{
 80017a6:	b580      	push	{r7, lr}
 80017a8:	af00      	add	r7, sp, #0
	return RA8875_ReadReg(0x00);
 80017aa:	2000      	movs	r0, #0
 80017ac:	f000 f804 	bl	80017b8 <RA8875_ReadReg>
 80017b0:	4603      	mov	r3, r0
 80017b2:	b29b      	uxth	r3, r3
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	bd80      	pop	{r7, pc}

080017b8 <RA8875_ReadReg>:
*********************************************************************************************************
*	Func name: RA8875_WriteReg
*********************************************************************************************************
*/
static uint8_t RA8875_ReadReg(uint8_t _ucRegAddr)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	4603      	mov	r3, r0
 80017c0:	71fb      	strb	r3, [r7, #7]
	RA8875_WriteCmd(_ucRegAddr);
 80017c2:	79fb      	ldrb	r3, [r7, #7]
 80017c4:	4618      	mov	r0, r3
 80017c6:	f001 f9ef 	bl	8002ba8 <RA8875_WriteCmd>
	return RA8875_ReadData();
 80017ca:	f001 f9ff 	bl	8002bcc <RA8875_ReadData>
 80017ce:	4603      	mov	r3, r0
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3708      	adds	r7, #8
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}

080017d8 <RA8875_WriteReg>:
*********************************************************************************************************
*	Func name: RA8875_WriteReg
*********************************************************************************************************
*/
static void RA8875_WriteReg(uint8_t _ucRegAddr, uint8_t _ucRegValue)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	4603      	mov	r3, r0
 80017e0:	460a      	mov	r2, r1
 80017e2:	71fb      	strb	r3, [r7, #7]
 80017e4:	4613      	mov	r3, r2
 80017e6:	71bb      	strb	r3, [r7, #6]
	s_ucRA8875Busy = 1;
 80017e8:	4b08      	ldr	r3, [pc, #32]	; (800180c <RA8875_WriteReg+0x34>)
 80017ea:	2201      	movs	r2, #1
 80017ec:	701a      	strb	r2, [r3, #0]

	RA8875_WriteCmd(_ucRegAddr);
 80017ee:	79fb      	ldrb	r3, [r7, #7]
 80017f0:	4618      	mov	r0, r3
 80017f2:	f001 f9d9 	bl	8002ba8 <RA8875_WriteCmd>
	RA8875_WriteData(_ucRegValue);
 80017f6:	79bb      	ldrb	r3, [r7, #6]
 80017f8:	4618      	mov	r0, r3
 80017fa:	f001 f9f6 	bl	8002bea <RA8875_WriteData>

	s_ucRA8875Busy = 0;
 80017fe:	4b03      	ldr	r3, [pc, #12]	; (800180c <RA8875_WriteReg+0x34>)
 8001800:	2200      	movs	r2, #0
 8001802:	701a      	strb	r2, [r3, #0]
}
 8001804:	bf00      	nop
 8001806:	3708      	adds	r7, #8
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	20000070 	.word	0x20000070

08001810 <RA8875_InitHard>:
*********************************************************************************************************
*	Func name: RA8875_InitHard
*********************************************************************************************************
*/
void RA8875_InitHard(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
#endif

	/* ¶ÁÈ¡ RA8875 Ð¾Æ¬¶îGPIXÒý½ÅµÄµçÆ½×´Ì¬£»1±íÊ¾4.3´çÆÁ£»0±íÊ¾7´çÆÁ
	¡¾±¸×¢¡¿ÕâÊÇ°²¸»À³µç×ÓÎªÁË±ãÓÚÍ³Ò»²âÊÔÀý³Ì£¬ÔÚLCDÄ£¿éÉÏ×öµÄÓ²¼þ±êÊ¶¡£ÔÚ×ö²úÆ·Ê±£¬²»±Ø×Ô¶¯Ê¶±ð¡£
	*/
	ucGPIX = RA8875_ReadReg(0xC7);
 8001816:	20c7      	movs	r0, #199	; 0xc7
 8001818:	f7ff ffce 	bl	80017b8 <RA8875_ReadReg>
 800181c:	4603      	mov	r3, r0
 800181e:	71fb      	strb	r3, [r7, #7]

	if (ucGPIX == 1)	/* 	GPIX = 1 ±íÊ¾ 4.3 ´çÆÁ 480x272 */
 8001820:	79fb      	ldrb	r3, [r7, #7]
 8001822:	2b01      	cmp	r3, #1
 8001824:	d156      	bne.n	80018d4 <RA8875_InitHard+0xc4>
	{
		/* ³õÊ¼»¯PLL.  ¾§ÕñÆµÂÊÎª25M */
		RA8875_WriteCmd(0x88);
 8001826:	2088      	movs	r0, #136	; 0x88
 8001828:	f001 f9be 	bl	8002ba8 <RA8875_WriteCmd>
		RA8875_Delaly1us();		/* ÑÓ³Ù1us */
 800182c:	f001 f9fe 	bl	8002c2c <RA8875_Delaly1us>
		RA8875_WriteData(10);	/* PLLDIVM [7] = 0 ;  PLLDIVN [4:0] = 10 */
 8001830:	200a      	movs	r0, #10
 8001832:	f001 f9da 	bl	8002bea <RA8875_WriteData>

	    RA8875_Delaly1ms();
 8001836:	f001 fa0c 	bl	8002c52 <RA8875_Delaly1ms>

		RA8875_WriteCmd(0x89);
 800183a:	2089      	movs	r0, #137	; 0x89
 800183c:	f001 f9b4 	bl	8002ba8 <RA8875_WriteCmd>
		RA8875_Delaly1us();		/* ÑÓ³Ù1us */
 8001840:	f001 f9f4 	bl	8002c2c <RA8875_Delaly1us>
		RA8875_WriteData(2);		/* PLLDIVK[2:0] = 2, ³ýÒÔ4 */
 8001844:	2002      	movs	r0, #2
 8001846:	f001 f9d0 	bl	8002bea <RA8875_WriteData>
		          = 25M * (10 + 1) / ((0 + 1) * (2 ^ 2))
				  = 68.75MHz
		*/

		/* REG[88h]»òREG[89h]±»Éè¶¨ºó£¬Îª±£Ö¤PLL Êä³öÎÈ¶¨£¬ÐëµÈ´ýÒ»¶Î¡¸ËøÆµÊ±¼ä¡¹(< 100us)¡£*/
	    RA8875_Delaly1ms();
 800184a:	f001 fa02 	bl	8002c52 <RA8875_Delaly1ms>
				1xb : 16-Î»MCU ½Ó¿Ú¡£ ¡¾Ñ¡Õâ¸ö¡¿
		*/
		#ifdef IF_SPI_EN
			RA8875_WriteReg(0x10, (1 <<3 ) | (0 << 1));	/* SPI½Ó¿ÚÊ±£¬ÅäÖÃ8Î»£¬65KÉ« */
		#else
			RA8875_WriteReg(0x10, (1 <<3 ) | (1 << 1));	/* ÅäÖÃ16Î»MCU²¢¿Ú£¬65KÉ« */
 800184e:	210a      	movs	r1, #10
 8001850:	2010      	movs	r0, #16
 8001852:	f7ff ffc1 	bl	80017d8 <RA8875_WriteReg>
				00b: PCLK ÆµÂÊÖÜÆÚ= ÏµÍ³ÆµÂÊÖÜÆÚ¡£
				01b: PCLK ÆµÂÊÖÜÆÚ= 2 ±¶µÄÏµÍ³ÆµÂÊÖÜÆÚ¡£
				10b: PCLK ÆµÂÊÖÜÆÚ= 4 ±¶µÄÏµÍ³ÆµÂÊÖÜÆÚ¡£
				11b: PCLK ÆµÂÊÖÜÆÚ= 8 ±¶µÄÏµÍ³ÆµÂÊÖÜÆÚ¡£
		*/
	    RA8875_WriteReg(0x04, 0x82);    /* ÉèÖÃPCLK·´Ïà */
 8001856:	2182      	movs	r1, #130	; 0x82
 8001858:	2004      	movs	r0, #4
 800185a:	f7ff ffbd 	bl	80017d8 <RA8875_WriteReg>
	    RA8875_Delaly1ms();
 800185e:	f001 f9f8 	bl	8002c52 <RA8875_Delaly1ms>

	    //Horizontal set
	    //HDWR//Horizontal Display Width Setting Bit[6:0]
	 	//Horizontal display width(pixels) = (HDWR + 1)*8
	    RA8875_WriteReg(0x14, 0x3B);
 8001862:	213b      	movs	r1, #59	; 0x3b
 8001864:	2014      	movs	r0, #20
 8001866:	f7ff ffb7 	bl	80017d8 <RA8875_WriteReg>
	    RA8875_WriteReg(0x15, 0x00);
 800186a:	2100      	movs	r1, #0
 800186c:	2015      	movs	r0, #21
 800186e:	f7ff ffb3 	bl	80017d8 <RA8875_WriteReg>

	    //HNDR//Horizontal Non-Display Period Bit[4:0]
	    //Horizontal Non-Display Period (pixels) = (HNDR + 1)*8
		RA8875_WriteReg(0x16, 0x01);
 8001872:	2101      	movs	r1, #1
 8001874:	2016      	movs	r0, #22
 8001876:	f7ff ffaf 	bl	80017d8 <RA8875_WriteReg>

	    //HSTR//HSYNC Start Position[4:0]
	    //HSYNC Start Position(PCLK) = (HSTR + 1)*8
		RA8875_WriteReg(0x17, 0x00);
 800187a:	2100      	movs	r1, #0
 800187c:	2017      	movs	r0, #23
 800187e:	f7ff ffab 	bl	80017d8 <RA8875_WriteReg>

	    //HPWR//HSYNC Polarity ,The period width of HSYNC.
	    //HSYNC Width [4:0]   HSYNC Pulse width(PCLK) = (HPWR + 1)*8
		RA8875_WriteReg(0x18, 0x05);
 8001882:	2105      	movs	r1, #5
 8001884:	2018      	movs	r0, #24
 8001886:	f7ff ffa7 	bl	80017d8 <RA8875_WriteReg>

	    //Vertical set
	    //VDHR0 //Vertical Display Height Bit [7:0]
	    //Vertical pixels = VDHR + 1
		RA8875_WriteReg(0x19, 0x0F);
 800188a:	210f      	movs	r1, #15
 800188c:	2019      	movs	r0, #25
 800188e:	f7ff ffa3 	bl	80017d8 <RA8875_WriteReg>

	    //VDHR1 //Vertical Display Height Bit [8]
	    //Vertical pixels = VDHR + 1
		RA8875_WriteReg(0x1A, 0x01);
 8001892:	2101      	movs	r1, #1
 8001894:	201a      	movs	r0, #26
 8001896:	f7ff ff9f 	bl	80017d8 <RA8875_WriteReg>

	    //VNDR0 //Vertical Non-Display Period Bit [7:0]
	    //Vertical Non-Display area = (VNDR + 1)
		RA8875_WriteReg(0x1B, 0x02);
 800189a:	2102      	movs	r1, #2
 800189c:	201b      	movs	r0, #27
 800189e:	f7ff ff9b 	bl	80017d8 <RA8875_WriteReg>

	    //VNDR1 //Vertical Non-Display Period Bit [8]
	    //Vertical Non-Display area = (VNDR + 1)
		RA8875_WriteReg(0x1C, 0x00);
 80018a2:	2100      	movs	r1, #0
 80018a4:	201c      	movs	r0, #28
 80018a6:	f7ff ff97 	bl	80017d8 <RA8875_WriteReg>

	    //VSTR0 //VSYNC Start Position[7:0]
	    //VSYNC Start Position(PCLK) = (VSTR + 1)
		RA8875_WriteReg(0x1D, 0x07);
 80018aa:	2107      	movs	r1, #7
 80018ac:	201d      	movs	r0, #29
 80018ae:	f7ff ff93 	bl	80017d8 <RA8875_WriteReg>

	    //VSTR1 //VSYNC Start Position[8]
	    //VSYNC Start Position(PCLK) = (VSTR + 1)
		RA8875_WriteReg(0x1E, 0x00);
 80018b2:	2100      	movs	r1, #0
 80018b4:	201e      	movs	r0, #30
 80018b6:	f7ff ff8f 	bl	80017d8 <RA8875_WriteReg>

	    //VPWR //VSYNC Polarity ,VSYNC Pulse Width[6:0]
	    //VSYNC Pulse Width(PCLK) = (VPWR + 1)
	    RA8875_WriteReg(0x1F, 0x09);
 80018ba:	2109      	movs	r1, #9
 80018bc:	201f      	movs	r0, #31
 80018be:	f7ff ff8b 	bl	80017d8 <RA8875_WriteReg>


	    g_LcdHeight = LCD_43_HEIGHT;
 80018c2:	4b3d      	ldr	r3, [pc, #244]	; (80019b8 <RA8875_InitHard+0x1a8>)
 80018c4:	f44f 7288 	mov.w	r2, #272	; 0x110
 80018c8:	801a      	strh	r2, [r3, #0]
		g_LcdWidth = LCD_43_WIDTH;
 80018ca:	4b3c      	ldr	r3, [pc, #240]	; (80019bc <RA8875_InitHard+0x1ac>)
 80018cc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80018d0:	801a      	strh	r2, [r3, #0]
 80018d2:	e055      	b.n	8001980 <RA8875_InitHard+0x170>
	}
	else	/* GPIX = 0 ±íÊ¾7´çÆÁ(800x480) */
	{
	    g_LcdHeight = LCD_70_HEIGHT;
 80018d4:	4b38      	ldr	r3, [pc, #224]	; (80019b8 <RA8875_InitHard+0x1a8>)
 80018d6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80018da:	801a      	strh	r2, [r3, #0]
		g_LcdWidth = LCD_70_WIDTH;
 80018dc:	4b37      	ldr	r3, [pc, #220]	; (80019bc <RA8875_InitHard+0x1ac>)
 80018de:	f44f 7248 	mov.w	r2, #800	; 0x320
 80018e2:	801a      	strh	r2, [r3, #0]

		/* ³õÊ¼»¯PLL.  ¾§ÕñÆµÂÊÎª25M */
		RA8875_WriteCmd(0x88);
 80018e4:	2088      	movs	r0, #136	; 0x88
 80018e6:	f001 f95f 	bl	8002ba8 <RA8875_WriteCmd>
		RA8875_Delaly1us();		/* ÑÓ³Ù1us */
 80018ea:	f001 f99f 	bl	8002c2c <RA8875_Delaly1us>
		RA8875_WriteData(12);	/* PLLDIVM [7] = 0 ;  PLLDIVN [4:0] = 10 */
 80018ee:	200c      	movs	r0, #12
 80018f0:	f001 f97b 	bl	8002bea <RA8875_WriteData>

	    RA8875_Delaly1ms();
 80018f4:	f001 f9ad 	bl	8002c52 <RA8875_Delaly1ms>

		RA8875_WriteCmd(0x89);
 80018f8:	2089      	movs	r0, #137	; 0x89
 80018fa:	f001 f955 	bl	8002ba8 <RA8875_WriteCmd>
		RA8875_Delaly1us();		/* ÑÓ³Ù1us */
 80018fe:	f001 f995 	bl	8002c2c <RA8875_Delaly1us>
		RA8875_WriteData(2);	/* PLLDIVK[2:0] = 2, ³ýÒÔ4 */
 8001902:	2002      	movs	r0, #2
 8001904:	f001 f971 	bl	8002bea <RA8875_WriteData>
		          = 25M * (12 + 1) / ((0 + 1) * (2 ^ 2))
				  = 81.25MHz
		*/

		/* REG[88h]»òREG[89h]±»Éè¶¨ºó£¬Îª±£Ö¤PLL Êä³öÎÈ¶¨£¬ÐëµÈ´ýÒ»¶Î¡¸ËøÆµÊ±¼ä¡¹(< 100us)¡£*/
	    RA8875_Delaly1ms();
 8001908:	f001 f9a3 	bl	8002c52 <RA8875_Delaly1ms>
				1xb : 16-Î»MCU ½Ó¿Ú¡£ ¡¾Ñ¡Õâ¸ö¡¿
		*/
		#ifdef IF_SPI_EN
			RA8875_WriteReg(0x10, (1 <<3 ) | (0 << 1));	/* SPI½Ó¿ÚÊ±£¬ÅäÖÃ8Î»£¬65KÉ« */
		#else
			RA8875_WriteReg(0x10, (1 <<3 ) | (1 << 1));	/* ÅäÖÃ16Î»MCU²¢¿Ú£¬65KÉ« */
 800190c:	210a      	movs	r1, #10
 800190e:	2010      	movs	r0, #16
 8001910:	f7ff ff62 	bl	80017d8 <RA8875_WriteReg>
				00b: PCLK ÆµÂÊÖÜÆÚ= ÏµÍ³ÆµÂÊÖÜÆÚ¡£
				01b: PCLK ÆµÂÊÖÜÆÚ= 2 ±¶µÄÏµÍ³ÆµÂÊÖÜÆÚ¡£
				10b: PCLK ÆµÂÊÖÜÆÚ= 4 ±¶µÄÏµÍ³ÆµÂÊÖÜÆÚ¡£
				11b: PCLK ÆµÂÊÖÜÆÚ= 8 ±¶µÄÏµÍ³ÆµÂÊÖÜÆÚ¡£
		*/
	    RA8875_WriteReg(0x04, 0x81);
 8001914:	2181      	movs	r1, #129	; 0x81
 8001916:	2004      	movs	r0, #4
 8001918:	f7ff ff5e 	bl	80017d8 <RA8875_WriteReg>
	    RA8875_Delaly1ms();
 800191c:	f001 f999 	bl	8002c52 <RA8875_Delaly1ms>

	#if 1
		/* OTD9960 & OTA7001 ÉèÖÃ */
		RA8875_WriteReg(0x14, 0x63);
 8001920:	2163      	movs	r1, #99	; 0x63
 8001922:	2014      	movs	r0, #20
 8001924:	f7ff ff58 	bl	80017d8 <RA8875_WriteReg>
		RA8875_WriteReg(0x15, 0x00);
 8001928:	2100      	movs	r1, #0
 800192a:	2015      	movs	r0, #21
 800192c:	f7ff ff54 	bl	80017d8 <RA8875_WriteReg>
		RA8875_WriteReg(0x16, 0x03);
 8001930:	2103      	movs	r1, #3
 8001932:	2016      	movs	r0, #22
 8001934:	f7ff ff50 	bl	80017d8 <RA8875_WriteReg>
		RA8875_WriteReg(0x17, 0x03);
 8001938:	2103      	movs	r1, #3
 800193a:	2017      	movs	r0, #23
 800193c:	f7ff ff4c 	bl	80017d8 <RA8875_WriteReg>
		RA8875_WriteReg(0x18, 0x0B);
 8001940:	210b      	movs	r1, #11
 8001942:	2018      	movs	r0, #24
 8001944:	f7ff ff48 	bl	80017d8 <RA8875_WriteReg>
		RA8875_WriteReg(0x19, 0xDF);
 8001948:	21df      	movs	r1, #223	; 0xdf
 800194a:	2019      	movs	r0, #25
 800194c:	f7ff ff44 	bl	80017d8 <RA8875_WriteReg>
		RA8875_WriteReg(0x1A, 0x01);
 8001950:	2101      	movs	r1, #1
 8001952:	201a      	movs	r0, #26
 8001954:	f7ff ff40 	bl	80017d8 <RA8875_WriteReg>
		RA8875_WriteReg(0x1B, 0x1F);
 8001958:	211f      	movs	r1, #31
 800195a:	201b      	movs	r0, #27
 800195c:	f7ff ff3c 	bl	80017d8 <RA8875_WriteReg>
		RA8875_WriteReg(0x1C, 0x00);
 8001960:	2100      	movs	r1, #0
 8001962:	201c      	movs	r0, #28
 8001964:	f7ff ff38 	bl	80017d8 <RA8875_WriteReg>
		RA8875_WriteReg(0x1D, 0x16);
 8001968:	2116      	movs	r1, #22
 800196a:	201d      	movs	r0, #29
 800196c:	f7ff ff34 	bl	80017d8 <RA8875_WriteReg>
		RA8875_WriteReg(0x1E, 0x00);
 8001970:	2100      	movs	r1, #0
 8001972:	201e      	movs	r0, #30
 8001974:	f7ff ff30 	bl	80017d8 <RA8875_WriteReg>
		RA8875_WriteReg(0x1F, 0x01);
 8001978:	2101      	movs	r1, #1
 800197a:	201f      	movs	r0, #31
 800197c:	f7ff ff2c 	bl	80017d8 <RA8875_WriteReg>
	    RA8875_WriteReg(0x1F, 0x01);
	#endif
	}

	/* ÉèÖÃTFTÃæ°åµÄ DISP  Òý½ÅÎª¸ß£¬Ê¹ÄÜÃæ°å. °²¸»À³TFTÄ£¿éµÄDISPÒý½ÅÁ¬½Óµ½RA8875Ð¾Æ¬µÄGP0X½Å */
	RA8875_WriteReg(0xC7, 0x01);	/* DISP = 1 */
 8001980:	2101      	movs	r1, #1
 8001982:	20c7      	movs	r0, #199	; 0xc7
 8001984:	f7ff ff28 	bl	80017d8 <RA8875_WriteReg>

	/* LCD ÏÔÊ¾/¹Ø±ÕÑ¶ºÅ (LCD Display on) */
	RA8875_WriteReg(0x01, 0x80);
 8001988:	2180      	movs	r1, #128	; 0x80
 800198a:	2001      	movs	r0, #1
 800198c:	f7ff ff24 	bl	80017d8 <RA8875_WriteReg>

		Bit 0 ÄÚ´æ¶ÁÈ¡¹â±ê×Ô¶¯Ôö¼Ó¹¦ÄÜÉè¶¨
			0 : µ±ÄÚ´æ¶ÁÈ¡Ê±¹â±êÎ»ÖÃ×Ô¶¯¼ÓÒ»¡£
			1 : µ±ÄÚ´æ¶ÁÈ¡Ê±¹â±êÎ»ÖÃ²»»á×Ô¶¯¼ÓÒ»¡£
	*/
	RA8875_WriteReg(0x40, 0x00);	/* Ñ¡Ôñ»æÍ¼Ä£Ê½ */
 8001990:	2100      	movs	r1, #0
 8001992:	2040      	movs	r0, #64	; 0x40
 8001994:	f7ff ff20 	bl	80017d8 <RA8875_WriteReg>


	/* 	REG[41h] Memory Write Control Register1 (MWCR1)
		Ð´ÈëÄ¿µÄÎ»ÖÃ£¬Ñ¡ÔñÍ¼²ã1
	*/
	RA8875_WriteReg(0x41, 0x00);	/* Ñ¡Ôñ»æÍ¼Ä£Ê½, Ä¿µÄÎªCGRAM */
 8001998:	2100      	movs	r1, #0
 800199a:	2041      	movs	r0, #65	; 0x41
 800199c:	f7ff ff1c 	bl	80017d8 <RA8875_WriteReg>

	RA8875_SetDispWin(0, 0, g_LcdHeight, g_LcdWidth);
 80019a0:	4b05      	ldr	r3, [pc, #20]	; (80019b8 <RA8875_InitHard+0x1a8>)
 80019a2:	881a      	ldrh	r2, [r3, #0]
 80019a4:	4b05      	ldr	r3, [pc, #20]	; (80019bc <RA8875_InitHard+0x1ac>)
 80019a6:	881b      	ldrh	r3, [r3, #0]
 80019a8:	2100      	movs	r1, #0
 80019aa:	2000      	movs	r0, #0
 80019ac:	f000 f808 	bl	80019c0 <RA8875_SetDispWin>

#ifdef IF_SPI_EN
	RA8875_HighSpeedSPI();		/* ÅäÖÃÍê±Ïºó£¬ÇÐ»»SPIµ½¸ßËÙÄ£Ê½ */
#endif
}
 80019b0:	bf00      	nop
 80019b2:	3708      	adds	r7, #8
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	2000000a 	.word	0x2000000a
 80019bc:	2000000c 	.word	0x2000000c

080019c0 <RA8875_SetDispWin>:
*********************************************************************************************************
*	Func name: RA8875_SetDispWin
*********************************************************************************************************
*/
void RA8875_SetDispWin(uint16_t _usX, uint16_t _usY, uint16_t _usHeight, uint16_t _usWidth)
{
 80019c0:	b590      	push	{r4, r7, lr}
 80019c2:	b085      	sub	sp, #20
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	4604      	mov	r4, r0
 80019c8:	4608      	mov	r0, r1
 80019ca:	4611      	mov	r1, r2
 80019cc:	461a      	mov	r2, r3
 80019ce:	4623      	mov	r3, r4
 80019d0:	80fb      	strh	r3, [r7, #6]
 80019d2:	4603      	mov	r3, r0
 80019d4:	80bb      	strh	r3, [r7, #4]
 80019d6:	460b      	mov	r3, r1
 80019d8:	807b      	strh	r3, [r7, #2]
 80019da:	4613      	mov	r3, r2
 80019dc:	803b      	strh	r3, [r7, #0]
		×óÉÏ½ÇÊÇ×ø±êÁãµã, É¨Ãè·½Ïò£¬ÏÈ´Ó×óµ½ÓÒ£¬ÔÙ´ÓÉÏµ½ÏÂ¡£

		Èç¹ûÐèÒª×öÊúÆÁ·½Ê½£¬ÄãÐèÒª½øÐÐÎïÀí×ø±êºÍÂß¼­×ø±êµÄ×ª»»
	*/

	RA8875_WriteReg(0x30, _usX);
 80019de:	88fb      	ldrh	r3, [r7, #6]
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	4619      	mov	r1, r3
 80019e4:	2030      	movs	r0, #48	; 0x30
 80019e6:	f7ff fef7 	bl	80017d8 <RA8875_WriteReg>
    RA8875_WriteReg(0x31, _usX >> 8);
 80019ea:	88fb      	ldrh	r3, [r7, #6]
 80019ec:	0a1b      	lsrs	r3, r3, #8
 80019ee:	b29b      	uxth	r3, r3
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	4619      	mov	r1, r3
 80019f4:	2031      	movs	r0, #49	; 0x31
 80019f6:	f7ff feef 	bl	80017d8 <RA8875_WriteReg>

	RA8875_WriteReg(0x32, _usY);
 80019fa:	88bb      	ldrh	r3, [r7, #4]
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	4619      	mov	r1, r3
 8001a00:	2032      	movs	r0, #50	; 0x32
 8001a02:	f7ff fee9 	bl	80017d8 <RA8875_WriteReg>
    RA8875_WriteReg(0x33, _usY >> 8);
 8001a06:	88bb      	ldrh	r3, [r7, #4]
 8001a08:	0a1b      	lsrs	r3, r3, #8
 8001a0a:	b29b      	uxth	r3, r3
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	4619      	mov	r1, r3
 8001a10:	2033      	movs	r0, #51	; 0x33
 8001a12:	f7ff fee1 	bl	80017d8 <RA8875_WriteReg>

	usTemp = _usWidth + _usX - 1;
 8001a16:	883a      	ldrh	r2, [r7, #0]
 8001a18:	88fb      	ldrh	r3, [r7, #6]
 8001a1a:	4413      	add	r3, r2
 8001a1c:	b29b      	uxth	r3, r3
 8001a1e:	3b01      	subs	r3, #1
 8001a20:	81fb      	strh	r3, [r7, #14]
	RA8875_WriteReg(0x34, usTemp);
 8001a22:	89fb      	ldrh	r3, [r7, #14]
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	4619      	mov	r1, r3
 8001a28:	2034      	movs	r0, #52	; 0x34
 8001a2a:	f7ff fed5 	bl	80017d8 <RA8875_WriteReg>
    RA8875_WriteReg(0x35, usTemp >> 8);
 8001a2e:	89fb      	ldrh	r3, [r7, #14]
 8001a30:	0a1b      	lsrs	r3, r3, #8
 8001a32:	b29b      	uxth	r3, r3
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	4619      	mov	r1, r3
 8001a38:	2035      	movs	r0, #53	; 0x35
 8001a3a:	f7ff fecd 	bl	80017d8 <RA8875_WriteReg>

	usTemp = _usHeight + _usY - 1;
 8001a3e:	887a      	ldrh	r2, [r7, #2]
 8001a40:	88bb      	ldrh	r3, [r7, #4]
 8001a42:	4413      	add	r3, r2
 8001a44:	b29b      	uxth	r3, r3
 8001a46:	3b01      	subs	r3, #1
 8001a48:	81fb      	strh	r3, [r7, #14]
	RA8875_WriteReg(0x36, usTemp);
 8001a4a:	89fb      	ldrh	r3, [r7, #14]
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	4619      	mov	r1, r3
 8001a50:	2036      	movs	r0, #54	; 0x36
 8001a52:	f7ff fec1 	bl	80017d8 <RA8875_WriteReg>
    RA8875_WriteReg(0x37, usTemp >> 8);
 8001a56:	89fb      	ldrh	r3, [r7, #14]
 8001a58:	0a1b      	lsrs	r3, r3, #8
 8001a5a:	b29b      	uxth	r3, r3
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	4619      	mov	r1, r3
 8001a60:	2037      	movs	r0, #55	; 0x37
 8001a62:	f7ff feb9 	bl	80017d8 <RA8875_WriteReg>

	RA8875_SetCursor(_usX, _usY);
 8001a66:	88ba      	ldrh	r2, [r7, #4]
 8001a68:	88fb      	ldrh	r3, [r7, #6]
 8001a6a:	4611      	mov	r1, r2
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f000 f819 	bl	8001aa4 <RA8875_SetCursor>

	/* ±£´æµ±Ç°´°¿ÚÐÅÏ¢£¬Ìá¸ßÒÔºóµ¥É«Ìî³ä²Ù×÷µÄÐ§ÂÊ.
	ÁíÍâÒ»ÖÖ×ö·¨ÊÇÍ¨¹ý¶ÁÈ¡0x30-0x37¼Ä´æÆ÷»ñµÃµ±Ç°´°¿Ú£¬²»¹ýÐ§ÂÊ½ÏµÍ */
	s_WinX = _usX;
 8001a72:	4a08      	ldr	r2, [pc, #32]	; (8001a94 <RA8875_SetDispWin+0xd4>)
 8001a74:	88fb      	ldrh	r3, [r7, #6]
 8001a76:	8013      	strh	r3, [r2, #0]
	s_WinY = _usY;
 8001a78:	4a07      	ldr	r2, [pc, #28]	; (8001a98 <RA8875_SetDispWin+0xd8>)
 8001a7a:	88bb      	ldrh	r3, [r7, #4]
 8001a7c:	8013      	strh	r3, [r2, #0]
	s_WinHeight = _usHeight;
 8001a7e:	4a07      	ldr	r2, [pc, #28]	; (8001a9c <RA8875_SetDispWin+0xdc>)
 8001a80:	887b      	ldrh	r3, [r7, #2]
 8001a82:	8013      	strh	r3, [r2, #0]
	s_WinWidth = _usWidth;
 8001a84:	4a06      	ldr	r2, [pc, #24]	; (8001aa0 <RA8875_SetDispWin+0xe0>)
 8001a86:	883b      	ldrh	r3, [r7, #0]
 8001a88:	8013      	strh	r3, [r2, #0]
}
 8001a8a:	bf00      	nop
 8001a8c:	3714      	adds	r7, #20
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd90      	pop	{r4, r7, pc}
 8001a92:	bf00      	nop
 8001a94:	20000072 	.word	0x20000072
 8001a98:	20000074 	.word	0x20000074
 8001a9c:	20000004 	.word	0x20000004
 8001aa0:	20000006 	.word	0x20000006

08001aa4 <RA8875_SetCursor>:
*********************************************************************************************************
*	Funa name: RA8875_SetCursor
*********************************************************************************************************
*/
static void RA8875_SetCursor(uint16_t _usX, uint16_t _usY)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	4603      	mov	r3, r0
 8001aac:	460a      	mov	r2, r1
 8001aae:	80fb      	strh	r3, [r7, #6]
 8001ab0:	4613      	mov	r3, r2
 8001ab2:	80bb      	strh	r3, [r7, #4]
	/* ÉèÖÃÄÚ´æÐ´¹â±êµÄ×ø±ê ¡¾×¢Òâ0x80-83 ÊÇ¹â±êÍ¼ÐÎµÄ×ø±ê¡¿ */
	RA8875_WriteReg(0x46, _usX);
 8001ab4:	88fb      	ldrh	r3, [r7, #6]
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	4619      	mov	r1, r3
 8001aba:	2046      	movs	r0, #70	; 0x46
 8001abc:	f7ff fe8c 	bl	80017d8 <RA8875_WriteReg>
	RA8875_WriteReg(0x47, _usX >> 8);
 8001ac0:	88fb      	ldrh	r3, [r7, #6]
 8001ac2:	0a1b      	lsrs	r3, r3, #8
 8001ac4:	b29b      	uxth	r3, r3
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	4619      	mov	r1, r3
 8001aca:	2047      	movs	r0, #71	; 0x47
 8001acc:	f7ff fe84 	bl	80017d8 <RA8875_WriteReg>
	RA8875_WriteReg(0x48, _usY);
 8001ad0:	88bb      	ldrh	r3, [r7, #4]
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	2048      	movs	r0, #72	; 0x48
 8001ad8:	f7ff fe7e 	bl	80017d8 <RA8875_WriteReg>
	RA8875_WriteReg(0x49, _usY >> 8);
 8001adc:	88bb      	ldrh	r3, [r7, #4]
 8001ade:	0a1b      	lsrs	r3, r3, #8
 8001ae0:	b29b      	uxth	r3, r3
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	2049      	movs	r0, #73	; 0x49
 8001ae8:	f7ff fe76 	bl	80017d8 <RA8875_WriteReg>
}
 8001aec:	bf00      	nop
 8001aee:	3708      	adds	r7, #8
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}

08001af4 <RA8875_ClrScr>:
*********************************************************************************************************
*	Func name: RA8875_ClrScr
*********************************************************************************************************
*/
void RA8875_ClrScr(uint16_t _usColor)
{
 8001af4:	b590      	push	{r4, r7, lr}
 8001af6:	b085      	sub	sp, #20
 8001af8:	af02      	add	r7, sp, #8
 8001afa:	4603      	mov	r3, r0
 8001afc:	80fb      	strh	r3, [r7, #6]
	BTE_SetTarBlock(s_WinX, s_WinY, s_WinHeight, s_WinWidth, 0);	/* ÉèÖÃBTEÎ»ÖÃºÍ¿í¶È¸ß¶ÈÒÔ¼°Ä¿±êÍ¼²ã£¨0»ò1£© */
 8001afe:	4b0d      	ldr	r3, [pc, #52]	; (8001b34 <RA8875_ClrScr+0x40>)
 8001b00:	8818      	ldrh	r0, [r3, #0]
 8001b02:	4b0d      	ldr	r3, [pc, #52]	; (8001b38 <RA8875_ClrScr+0x44>)
 8001b04:	8819      	ldrh	r1, [r3, #0]
 8001b06:	4b0d      	ldr	r3, [pc, #52]	; (8001b3c <RA8875_ClrScr+0x48>)
 8001b08:	881a      	ldrh	r2, [r3, #0]
 8001b0a:	4b0d      	ldr	r3, [pc, #52]	; (8001b40 <RA8875_ClrScr+0x4c>)
 8001b0c:	881b      	ldrh	r3, [r3, #0]
 8001b0e:	2400      	movs	r4, #0
 8001b10:	9400      	str	r4, [sp, #0]
 8001b12:	f000 f857 	bl	8001bc4 <BTE_SetTarBlock>
	BTE_SetOperateCode(0x0C);		/* Éè¶¨BTE ²Ù×÷ÂëºÍ¹âÕ¤ÔËËãÂë  REG[51h] Bit[3:0] = 0Ch */
 8001b16:	200c      	movs	r0, #12
 8001b18:	f000 f8ae 	bl	8001c78 <BTE_SetOperateCode>
	RA8875_SetFrontColor(_usColor);	/* ÉèÖÃBTEÇ°¾°É« */
 8001b1c:	88fb      	ldrh	r3, [r7, #6]
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f000 f8b8 	bl	8001c94 <RA8875_SetFrontColor>
	BTE_Start();					/* ¿ªÆôBTE ¹¦ÄÜ */
 8001b24:	f000 f93a 	bl	8001d9c <BTE_Start>
	BTE_Wait();
 8001b28:	f000 f948 	bl	8001dbc <BTE_Wait>
}
 8001b2c:	bf00      	nop
 8001b2e:	370c      	adds	r7, #12
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd90      	pop	{r4, r7, pc}
 8001b34:	20000072 	.word	0x20000072
 8001b38:	20000074 	.word	0x20000074
 8001b3c:	20000004 	.word	0x20000004
 8001b40:	20000006 	.word	0x20000006

08001b44 <RA8875_PutPixel>:
*********************************************************************************************************
*	Func name: RA8875_PutPixel
*********************************************************************************************************
*/
void RA8875_PutPixel(uint16_t _usX, uint16_t _usY, uint16_t _usColor)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	80fb      	strh	r3, [r7, #6]
 8001b4e:	460b      	mov	r3, r1
 8001b50:	80bb      	strh	r3, [r7, #4]
 8001b52:	4613      	mov	r3, r2
 8001b54:	807b      	strh	r3, [r7, #2]
	s_ucRA8875Busy = 1;
 8001b56:	4b1a      	ldr	r3, [pc, #104]	; (8001bc0 <RA8875_PutPixel+0x7c>)
 8001b58:	2201      	movs	r2, #1
 8001b5a:	701a      	strb	r2, [r3, #0]

	RA8875_WriteCmd(0x46); RA8875_WriteData(_usX);
 8001b5c:	2046      	movs	r0, #70	; 0x46
 8001b5e:	f001 f823 	bl	8002ba8 <RA8875_WriteCmd>
 8001b62:	88fb      	ldrh	r3, [r7, #6]
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	4618      	mov	r0, r3
 8001b68:	f001 f83f 	bl	8002bea <RA8875_WriteData>
	RA8875_WriteCmd(0x47); RA8875_WriteData(_usX >> 8);
 8001b6c:	2047      	movs	r0, #71	; 0x47
 8001b6e:	f001 f81b 	bl	8002ba8 <RA8875_WriteCmd>
 8001b72:	88fb      	ldrh	r3, [r7, #6]
 8001b74:	0a1b      	lsrs	r3, r3, #8
 8001b76:	b29b      	uxth	r3, r3
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f001 f835 	bl	8002bea <RA8875_WriteData>
	RA8875_WriteCmd(0x48); RA8875_WriteData(_usY);
 8001b80:	2048      	movs	r0, #72	; 0x48
 8001b82:	f001 f811 	bl	8002ba8 <RA8875_WriteCmd>
 8001b86:	88bb      	ldrh	r3, [r7, #4]
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f001 f82d 	bl	8002bea <RA8875_WriteData>
	RA8875_WriteCmd(0x49); RA8875_WriteData(_usY >> 8);
 8001b90:	2049      	movs	r0, #73	; 0x49
 8001b92:	f001 f809 	bl	8002ba8 <RA8875_WriteCmd>
 8001b96:	88bb      	ldrh	r3, [r7, #4]
 8001b98:	0a1b      	lsrs	r3, r3, #8
 8001b9a:	b29b      	uxth	r3, r3
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f001 f823 	bl	8002bea <RA8875_WriteData>

	RA8875_WriteCmd(0x02); 		/* ÓÃÓÚÉè¶¨RA8875 ½øÈëÄÚ´æ(DDRAM»òCGRAM)¶ÁÈ¡/Ð´ÈëÄ£Ê½ */
 8001ba4:	2002      	movs	r0, #2
 8001ba6:	f000 ffff 	bl	8002ba8 <RA8875_WriteCmd>
	RA8875_WriteData16(_usColor);
 8001baa:	887b      	ldrh	r3, [r7, #2]
 8001bac:	4618      	mov	r0, r3
 8001bae:	f000 f8e5 	bl	8001d7c <RA8875_WriteData16>

	s_ucRA8875Busy = 0;
 8001bb2:	4b03      	ldr	r3, [pc, #12]	; (8001bc0 <RA8875_PutPixel+0x7c>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	701a      	strb	r2, [r3, #0]
}
 8001bb8:	bf00      	nop
 8001bba:	3708      	adds	r7, #8
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	20000070 	.word	0x20000070

08001bc4 <BTE_SetTarBlock>:
*********************************************************************************************************
*	Func name: BTE_SetTarBlock
*********************************************************************************************************
*/
static void BTE_SetTarBlock(uint16_t _usX, uint16_t _usY, uint16_t _usHeight, uint16_t _usWidth, uint8_t _ucLayer)
{
 8001bc4:	b590      	push	{r4, r7, lr}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	4604      	mov	r4, r0
 8001bcc:	4608      	mov	r0, r1
 8001bce:	4611      	mov	r1, r2
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	4623      	mov	r3, r4
 8001bd4:	80fb      	strh	r3, [r7, #6]
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	80bb      	strh	r3, [r7, #4]
 8001bda:	460b      	mov	r3, r1
 8001bdc:	807b      	strh	r3, [r7, #2]
 8001bde:	4613      	mov	r3, r2
 8001be0:	803b      	strh	r3, [r7, #0]
	/* ÉèÖÃÆðµã×ø±ê */
	RA8875_WriteReg(0x58, _usX);
 8001be2:	88fb      	ldrh	r3, [r7, #6]
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	4619      	mov	r1, r3
 8001be8:	2058      	movs	r0, #88	; 0x58
 8001bea:	f7ff fdf5 	bl	80017d8 <RA8875_WriteReg>
	RA8875_WriteReg(0x59, _usX >> 8);
 8001bee:	88fb      	ldrh	r3, [r7, #6]
 8001bf0:	0a1b      	lsrs	r3, r3, #8
 8001bf2:	b29b      	uxth	r3, r3
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	2059      	movs	r0, #89	; 0x59
 8001bfa:	f7ff fded 	bl	80017d8 <RA8875_WriteReg>

	RA8875_WriteReg(0x5A, _usY);
 8001bfe:	88bb      	ldrh	r3, [r7, #4]
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	4619      	mov	r1, r3
 8001c04:	205a      	movs	r0, #90	; 0x5a
 8001c06:	f7ff fde7 	bl	80017d8 <RA8875_WriteReg>
	if (_ucLayer == 0)	/* Í¼²ã2 */
 8001c0a:	7e3b      	ldrb	r3, [r7, #24]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d108      	bne.n	8001c22 <BTE_SetTarBlock+0x5e>
	{
		RA8875_WriteReg(0x5B, _usY >> 8);
 8001c10:	88bb      	ldrh	r3, [r7, #4]
 8001c12:	0a1b      	lsrs	r3, r3, #8
 8001c14:	b29b      	uxth	r3, r3
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	4619      	mov	r1, r3
 8001c1a:	205b      	movs	r0, #91	; 0x5b
 8001c1c:	f7ff fddc 	bl	80017d8 <RA8875_WriteReg>
 8001c20:	e00a      	b.n	8001c38 <BTE_SetTarBlock+0x74>
	}
	else
	{
		RA8875_WriteReg(0x5B, (1 << 7) | (_usY >> 8));	/* Bit7 ±íÊ¾Í¼²ã£¬ 0 Í¼²ã1£» 1 Í¼²ã2*/
 8001c22:	88bb      	ldrh	r3, [r7, #4]
 8001c24:	0a1b      	lsrs	r3, r3, #8
 8001c26:	b29b      	uxth	r3, r3
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	4619      	mov	r1, r3
 8001c32:	205b      	movs	r0, #91	; 0x5b
 8001c34:	f7ff fdd0 	bl	80017d8 <RA8875_WriteReg>
	}

	/* ÉèÖÃÇø¿é¿í¶È */
	RA8875_WriteReg(0x5C, _usWidth);
 8001c38:	883b      	ldrh	r3, [r7, #0]
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	205c      	movs	r0, #92	; 0x5c
 8001c40:	f7ff fdca 	bl	80017d8 <RA8875_WriteReg>
	RA8875_WriteReg(0x5D, _usWidth >> 8);
 8001c44:	883b      	ldrh	r3, [r7, #0]
 8001c46:	0a1b      	lsrs	r3, r3, #8
 8001c48:	b29b      	uxth	r3, r3
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	205d      	movs	r0, #93	; 0x5d
 8001c50:	f7ff fdc2 	bl	80017d8 <RA8875_WriteReg>

	/* ÉèÖÃÇø¿é¸ß¶È */
	RA8875_WriteReg(0x5E, _usHeight);
 8001c54:	887b      	ldrh	r3, [r7, #2]
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	4619      	mov	r1, r3
 8001c5a:	205e      	movs	r0, #94	; 0x5e
 8001c5c:	f7ff fdbc 	bl	80017d8 <RA8875_WriteReg>
	RA8875_WriteReg(0x5F, _usHeight >> 8);
 8001c60:	887b      	ldrh	r3, [r7, #2]
 8001c62:	0a1b      	lsrs	r3, r3, #8
 8001c64:	b29b      	uxth	r3, r3
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	4619      	mov	r1, r3
 8001c6a:	205f      	movs	r0, #95	; 0x5f
 8001c6c:	f7ff fdb4 	bl	80017d8 <RA8875_WriteReg>
}
 8001c70:	bf00      	nop
 8001c72:	370c      	adds	r7, #12
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd90      	pop	{r4, r7, pc}

08001c78 <BTE_SetOperateCode>:
*********************************************************************************************************
*	Func name: BTE_SetOperateCode
*********************************************************************************************************
*/
static void BTE_SetOperateCode(uint8_t _ucOperate)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	4603      	mov	r3, r0
 8001c80:	71fb      	strb	r3, [r7, #7]
	RA8875_WriteReg(0x51, _ucOperate);
 8001c82:	79fb      	ldrb	r3, [r7, #7]
 8001c84:	4619      	mov	r1, r3
 8001c86:	2051      	movs	r0, #81	; 0x51
 8001c88:	f7ff fda6 	bl	80017d8 <RA8875_WriteReg>
}
 8001c8c:	bf00      	nop
 8001c8e:	3708      	adds	r7, #8
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}

08001c94 <RA8875_SetFrontColor>:
*********************************************************************************************************
* Func name: RA8875_SetFrontColor
*********************************************************************************************************
*/
void RA8875_SetFrontColor(uint16_t _usColor)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	80fb      	strh	r3, [r7, #6]
	RA8875_WriteReg(0x63, (_usColor & 0xF800) >> 11);	/* R5  */
 8001c9e:	88fb      	ldrh	r3, [r7, #6]
 8001ca0:	0adb      	lsrs	r3, r3, #11
 8001ca2:	b29b      	uxth	r3, r3
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	2063      	movs	r0, #99	; 0x63
 8001caa:	f7ff fd95 	bl	80017d8 <RA8875_WriteReg>
	RA8875_WriteReg(0x64, (_usColor & 0x07E0) >> 5);	/* G6 */
 8001cae:	88fb      	ldrh	r3, [r7, #6]
 8001cb0:	115b      	asrs	r3, r3, #5
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	4619      	mov	r1, r3
 8001cbc:	2064      	movs	r0, #100	; 0x64
 8001cbe:	f7ff fd8b 	bl	80017d8 <RA8875_WriteReg>
	RA8875_WriteReg(0x65, (_usColor & 0x001F));			/* B5 */
 8001cc2:	88fb      	ldrh	r3, [r7, #6]
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	f003 031f 	and.w	r3, r3, #31
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	4619      	mov	r1, r3
 8001cce:	2065      	movs	r0, #101	; 0x65
 8001cd0:	f7ff fd82 	bl	80017d8 <RA8875_WriteReg>
}
 8001cd4:	bf00      	nop
 8001cd6:	3708      	adds	r7, #8
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}

08001cdc <RA8875_DrawBMP>:
*********************************************************************************************************
*	Func name: RA8875_DrawBMP
*********************************************************************************************************
*/
void RA8875_DrawBMP(uint16_t _usX, uint16_t _usY, uint16_t _usHeight, uint16_t _usWidth, uint16_t *_ptr)
{
 8001cdc:	b590      	push	{r4, r7, lr}
 8001cde:	b085      	sub	sp, #20
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	4604      	mov	r4, r0
 8001ce4:	4608      	mov	r0, r1
 8001ce6:	4611      	mov	r1, r2
 8001ce8:	461a      	mov	r2, r3
 8001cea:	4623      	mov	r3, r4
 8001cec:	80fb      	strh	r3, [r7, #6]
 8001cee:	4603      	mov	r3, r0
 8001cf0:	80bb      	strh	r3, [r7, #4]
 8001cf2:	460b      	mov	r3, r1
 8001cf4:	807b      	strh	r3, [r7, #2]
 8001cf6:	4613      	mov	r3, r2
 8001cf8:	803b      	strh	r3, [r7, #0]
	uint32_t index = 0;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	60fb      	str	r3, [r7, #12]
	const uint16_t *p;

	RA8875_SetDispWin(_usX, _usY, _usHeight, _usWidth);
 8001cfe:	883b      	ldrh	r3, [r7, #0]
 8001d00:	887a      	ldrh	r2, [r7, #2]
 8001d02:	88b9      	ldrh	r1, [r7, #4]
 8001d04:	88f8      	ldrh	r0, [r7, #6]
 8001d06:	f7ff fe5b 	bl	80019c0 <RA8875_SetDispWin>

	s_ucRA8875Busy = 1;
 8001d0a:	4b13      	ldr	r3, [pc, #76]	; (8001d58 <RA8875_DrawBMP+0x7c>)
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	701a      	strb	r2, [r3, #0]

	RA8875_WriteCmd(0x02); 		
 8001d10:	2002      	movs	r0, #2
 8001d12:	f000 ff49 	bl	8002ba8 <RA8875_WriteCmd>

	p = _ptr;
 8001d16:	6a3b      	ldr	r3, [r7, #32]
 8001d18:	60bb      	str	r3, [r7, #8]
	for (index = 0; index < _usHeight * _usWidth; index++)
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	60fb      	str	r3, [r7, #12]
 8001d1e:	e009      	b.n	8001d34 <RA8875_DrawBMP+0x58>
	{
		RA8875_WriteData16(*p++);
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	1c9a      	adds	r2, r3, #2
 8001d24:	60ba      	str	r2, [r7, #8]
 8001d26:	881b      	ldrh	r3, [r3, #0]
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f000 f827 	bl	8001d7c <RA8875_WriteData16>
	for (index = 0; index < _usHeight * _usWidth; index++)
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	3301      	adds	r3, #1
 8001d32:	60fb      	str	r3, [r7, #12]
 8001d34:	887b      	ldrh	r3, [r7, #2]
 8001d36:	883a      	ldrh	r2, [r7, #0]
 8001d38:	fb02 f303 	mul.w	r3, r2, r3
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d3ed      	bcc.n	8001d20 <RA8875_DrawBMP+0x44>
	}
	s_ucRA8875Busy = 0;
 8001d44:	4b04      	ldr	r3, [pc, #16]	; (8001d58 <RA8875_DrawBMP+0x7c>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	701a      	strb	r2, [r3, #0]

	RA8875_QuitWinMode();
 8001d4a:	f000 f807 	bl	8001d5c <RA8875_QuitWinMode>
}
 8001d4e:	bf00      	nop
 8001d50:	3714      	adds	r7, #20
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd90      	pop	{r4, r7, pc}
 8001d56:	bf00      	nop
 8001d58:	20000070 	.word	0x20000070

08001d5c <RA8875_QuitWinMode>:
*********************************************************************************************************
*	Funa name: RA8875_QuitWinMode
*********************************************************************************************************
*/
void RA8875_QuitWinMode(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
	RA8875_SetDispWin(0, 0, g_LcdHeight, g_LcdWidth);
 8001d60:	4b04      	ldr	r3, [pc, #16]	; (8001d74 <RA8875_QuitWinMode+0x18>)
 8001d62:	881a      	ldrh	r2, [r3, #0]
 8001d64:	4b04      	ldr	r3, [pc, #16]	; (8001d78 <RA8875_QuitWinMode+0x1c>)
 8001d66:	881b      	ldrh	r3, [r3, #0]
 8001d68:	2100      	movs	r1, #0
 8001d6a:	2000      	movs	r0, #0
 8001d6c:	f7ff fe28 	bl	80019c0 <RA8875_SetDispWin>
}
 8001d70:	bf00      	nop
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	2000000a 	.word	0x2000000a
 8001d78:	2000000c 	.word	0x2000000c

08001d7c <RA8875_WriteData16>:
*********************************************************************************************************
*	Func name: RA8875_WriteData16
*********************************************************************************************************
*/
void RA8875_WriteData16(uint16_t _usRGB)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	4603      	mov	r3, r0
 8001d84:	80fb      	strh	r3, [r7, #6]
	SPI_ShiftByte(_usRGB);
	RA8875_CS_1();
#endif

#ifdef RA_HARD_8080_16
	RA8875_RAM = _usRGB;
 8001d86:	f04f 42d8 	mov.w	r2, #1811939328	; 0x6c000000
 8001d8a:	88fb      	ldrh	r3, [r7, #6]
 8001d8c:	8013      	strh	r3, [r2, #0]
#endif	
}
 8001d8e:	bf00      	nop
 8001d90:	370c      	adds	r7, #12
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
	...

08001d9c <BTE_Start>:
*********************************************************************************************************
*	Func name: BTE_Start
*********************************************************************************************************
*/
static void BTE_Start(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
	s_ucRA8875Busy = 1;
 8001da0:	4b05      	ldr	r3, [pc, #20]	; (8001db8 <BTE_Start+0x1c>)
 8001da2:	2201      	movs	r2, #1
 8001da4:	701a      	strb	r2, [r3, #0]
	/* RA8875_WriteReg(0x50, 0x80);  ²»ÄÜÊ¹ÓÃÕâ¸öº¯Êý£¬ÒòÎªÄÚ²¿ÒÑ¾­²Ù×÷ÁË s_ucRA8875Busy ±êÖ¾ */
	RA8875_WriteCmd(0x50);	/* ÉèÖÃ¼Ä´æÆ÷µØÖ· */
 8001da6:	2050      	movs	r0, #80	; 0x50
 8001da8:	f000 fefe 	bl	8002ba8 <RA8875_WriteCmd>
	RA8875_WriteData(0x80);	/* Ð´Èë¼Ä´æÆ÷Öµ */
 8001dac:	2080      	movs	r0, #128	; 0x80
 8001dae:	f000 ff1c 	bl	8002bea <RA8875_WriteData>
}
 8001db2:	bf00      	nop
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	20000070 	.word	0x20000070

08001dbc <BTE_Wait>:
*********************************************************************************************************
*	Func name: BTE_Wait
*********************************************************************************************************
*/
static void BTE_Wait(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
	while ((RA8875_ReadStatus() & 0x40) == 0x40);
 8001dc0:	bf00      	nop
 8001dc2:	f000 ff23 	bl	8002c0c <RA8875_ReadStatus>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dcc:	2b40      	cmp	r3, #64	; 0x40
 8001dce:	d0f8      	beq.n	8001dc2 <BTE_Wait+0x6>
	s_ucRA8875Busy = 0;
 8001dd0:	4b02      	ldr	r3, [pc, #8]	; (8001ddc <BTE_Wait+0x20>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	701a      	strb	r2, [r3, #0]
}
 8001dd6:	bf00      	nop
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	20000070 	.word	0x20000070

08001de0 <RA8875_SetBackLight>:
*	ÐÎ    ²Î:  _bright ÁÁ¶È£¬0ÊÇÃð£¬255ÊÇ×îÁÁ
*	·µ »Ø Öµ: ÎÞ
*********************************************************************************************************
*/
void RA8875_SetBackLight(uint8_t _bright)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	4603      	mov	r3, r0
 8001de8:	71fb      	strb	r3, [r7, #7]
	if (_bright == 0)
 8001dea:	79fb      	ldrb	r3, [r7, #7]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d104      	bne.n	8001dfa <RA8875_SetBackLight+0x1a>
	{
		/* ¹Ø±ÕPWM, PWM1Òý½ÅÈ±Ê¡Êä³öLOW  */
		RA8875_WriteReg(0x8A, 0 << 6);
 8001df0:	2100      	movs	r1, #0
 8001df2:	208a      	movs	r0, #138	; 0x8a
 8001df4:	f7ff fcf0 	bl	80017d8 <RA8875_WriteReg>
		RA8875_WriteReg(0x8A, (1 << 7) | 12);

		/* REG[8Bh] PWM1 Duty Cycle Register (P1DCR) */
		RA8875_WriteReg(0x8B, _bright);
	}
}
 8001df8:	e010      	b.n	8001e1c <RA8875_SetBackLight+0x3c>
	else if (_bright == BRIGHT_MAX)	/* ×î´óÁÁ¶È */
 8001dfa:	79fb      	ldrb	r3, [r7, #7]
 8001dfc:	2bff      	cmp	r3, #255	; 0xff
 8001dfe:	d104      	bne.n	8001e0a <RA8875_SetBackLight+0x2a>
		RA8875_WriteReg(0x8A, 1 << 6);
 8001e00:	2140      	movs	r1, #64	; 0x40
 8001e02:	208a      	movs	r0, #138	; 0x8a
 8001e04:	f7ff fce8 	bl	80017d8 <RA8875_WriteReg>
}
 8001e08:	e008      	b.n	8001e1c <RA8875_SetBackLight+0x3c>
		RA8875_WriteReg(0x8A, (1 << 7) | 12);
 8001e0a:	218c      	movs	r1, #140	; 0x8c
 8001e0c:	208a      	movs	r0, #138	; 0x8a
 8001e0e:	f7ff fce3 	bl	80017d8 <RA8875_WriteReg>
		RA8875_WriteReg(0x8B, _bright);
 8001e12:	79fb      	ldrb	r3, [r7, #7]
 8001e14:	4619      	mov	r1, r3
 8001e16:	208b      	movs	r0, #139	; 0x8b
 8001e18:	f7ff fcde 	bl	80017d8 <RA8875_WriteReg>
}
 8001e1c:	bf00      	nop
 8001e1e:	3708      	adds	r7, #8
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}

08001e24 <RA8875_GetPixel>:
*********************************************************************************************************
*	Func name: RA8875_GetPixel
*********************************************************************************************************
*/
uint16_t RA8875_GetPixel(uint16_t _usX, uint16_t _usY)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b084      	sub	sp, #16
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	460a      	mov	r2, r1
 8001e2e:	80fb      	strh	r3, [r7, #6]
 8001e30:	4613      	mov	r3, r2
 8001e32:	80bb      	strh	r3, [r7, #4]
	uint16_t usRGB;

	RA8875_WriteReg(0x40, (1 << 0));
 8001e34:	2101      	movs	r1, #1
 8001e36:	2040      	movs	r0, #64	; 0x40
 8001e38:	f7ff fcce 	bl	80017d8 <RA8875_WriteReg>

	RA8875_SetReadCursor(_usX, _usY);	/* ÉèÖÃ¶ÁÈ¡¹â±êÎ»ÖÃ */
 8001e3c:	88ba      	ldrh	r2, [r7, #4]
 8001e3e:	88fb      	ldrh	r3, [r7, #6]
 8001e40:	4611      	mov	r1, r2
 8001e42:	4618      	mov	r0, r3
 8001e44:	f000 f81c 	bl	8001e80 <RA8875_SetReadCursor>

	s_ucRA8875Busy = 1;
 8001e48:	4b0c      	ldr	r3, [pc, #48]	; (8001e7c <RA8875_GetPixel+0x58>)
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	701a      	strb	r2, [r3, #0]

	RA8875_WriteCmd(0x02);
 8001e4e:	2002      	movs	r0, #2
 8001e50:	f000 feaa 	bl	8002ba8 <RA8875_WriteCmd>
	usRGB = RA8875_ReadData16();	/* µÚ1´Î¶ÁÈ¡Êý¾Ý¶ªÆú */
 8001e54:	f000 f83c 	bl	8001ed0 <RA8875_ReadData16>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	81fb      	strh	r3, [r7, #14]
	usRGB = RA8875_ReadData16();
 8001e5c:	f000 f838 	bl	8001ed0 <RA8875_ReadData16>
 8001e60:	4603      	mov	r3, r0
 8001e62:	81fb      	strh	r3, [r7, #14]
	usRGB = RA8875_ReadData16();
 8001e64:	f000 f834 	bl	8001ed0 <RA8875_ReadData16>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	81fb      	strh	r3, [r7, #14]

	s_ucRA8875Busy = 0;
 8001e6c:	4b03      	ldr	r3, [pc, #12]	; (8001e7c <RA8875_GetPixel+0x58>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	701a      	strb	r2, [r3, #0]

	return usRGB;
 8001e72:	89fb      	ldrh	r3, [r7, #14]
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3710      	adds	r7, #16
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	20000070 	.word	0x20000070

08001e80 <RA8875_SetReadCursor>:
*********************************************************************************************************
*	Func name: RA8875_SetCursor
*********************************************************************************************************
*/
static void RA8875_SetReadCursor(uint16_t _usX, uint16_t _usY)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	4603      	mov	r3, r0
 8001e88:	460a      	mov	r2, r1
 8001e8a:	80fb      	strh	r3, [r7, #6]
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	80bb      	strh	r3, [r7, #4]
	RA8875_WriteReg(0x4A, _usX);
 8001e90:	88fb      	ldrh	r3, [r7, #6]
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	4619      	mov	r1, r3
 8001e96:	204a      	movs	r0, #74	; 0x4a
 8001e98:	f7ff fc9e 	bl	80017d8 <RA8875_WriteReg>
	RA8875_WriteReg(0x4B, _usX >> 8);
 8001e9c:	88fb      	ldrh	r3, [r7, #6]
 8001e9e:	0a1b      	lsrs	r3, r3, #8
 8001ea0:	b29b      	uxth	r3, r3
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	204b      	movs	r0, #75	; 0x4b
 8001ea8:	f7ff fc96 	bl	80017d8 <RA8875_WriteReg>
	RA8875_WriteReg(0x4C, _usY);
 8001eac:	88bb      	ldrh	r3, [r7, #4]
 8001eae:	b2db      	uxtb	r3, r3
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	204c      	movs	r0, #76	; 0x4c
 8001eb4:	f7ff fc90 	bl	80017d8 <RA8875_WriteReg>
	RA8875_WriteReg(0x4D, _usY >> 8);
 8001eb8:	88bb      	ldrh	r3, [r7, #4]
 8001eba:	0a1b      	lsrs	r3, r3, #8
 8001ebc:	b29b      	uxth	r3, r3
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	204d      	movs	r0, #77	; 0x4d
 8001ec4:	f7ff fc88 	bl	80017d8 <RA8875_WriteReg>
}
 8001ec8:	bf00      	nop
 8001eca:	3708      	adds	r7, #8
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}

08001ed0 <RA8875_ReadData16>:
*********************************************************************************************************
*	Func name: RA8875_ReadData16
*********************************************************************************************************
*/
uint16_t RA8875_ReadData16(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
#endif

#ifdef RA_HARD_8080_16			/* 8080Ó²¼þ×ÜÏß */
	uint16_t value;

	value = RA8875_RAM;		/* ¶ÁÈ¡¼Ä´æÆ÷Öµ */
 8001ed6:	f04f 43d8 	mov.w	r3, #1811939328	; 0x6c000000
 8001eda:	881b      	ldrh	r3, [r3, #0]
 8001edc:	80fb      	strh	r3, [r7, #6]

	return value;
 8001ede:	88fb      	ldrh	r3, [r7, #6]
#endif
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	370c      	adds	r7, #12
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr

08001eec <RA8875_TouchInit>:
*********************************************************************************************************
*	Func name: RA8875_TouchInit
*********************************************************************************************************
*/
void RA8875_TouchInit(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
	RA8875_WriteReg(0xF0, (1 << 2));
 8001ef0:	2104      	movs	r1, #4
 8001ef2:	20f0      	movs	r0, #240	; 0xf0
 8001ef4:	f7ff fc70 	bl	80017d8 <RA8875_WriteReg>

	RA8875_WriteReg(0x71, (0 << 6) | (0 << 5) | (1 << 2));
 8001ef8:	2104      	movs	r1, #4
 8001efa:	2071      	movs	r0, #113	; 0x71
 8001efc:	f7ff fc6c 	bl	80017d8 <RA8875_WriteReg>

	RA8875_WriteReg(0x70, (1 << 7) | (3 << 4) | (0 << 3) | (2 << 0));
 8001f00:	21b2      	movs	r1, #178	; 0xb2
 8001f02:	2070      	movs	r0, #112	; 0x70
 8001f04:	f7ff fc68 	bl	80017d8 <RA8875_WriteReg>
}
 8001f08:	bf00      	nop
 8001f0a:	bd80      	pop	{r7, pc}

08001f0c <SPFD5420_ReadID>:
*********************************************************************************************************
*	Func name: SPFD5420_ReadID
*********************************************************************************************************
*/
uint16_t SPFD5420_ReadID(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	af00      	add	r7, sp, #0
	return SPFD5420_ReadReg(0x0000);
 8001f10:	2000      	movs	r0, #0
 8001f12:	f000 f803 	bl	8001f1c <SPFD5420_ReadReg>
 8001f16:	4603      	mov	r3, r0
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	bd80      	pop	{r7, pc}

08001f1c <SPFD5420_ReadReg>:
*			SPFD5420_RegValue : ¼Ä´æÆ÷Öµ
*	·µ »Ø Öµ: ÎÞ
*********************************************************************************************************
*/
static uint16_t SPFD5420_ReadReg(__IO uint16_t _usAddr)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	4603      	mov	r3, r0
 8001f24:	80fb      	strh	r3, [r7, #6]
	/* Write 16-bit Index (then Read Reg) */
	SPFD5420_REG = _usAddr;
 8001f26:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8001f2a:	88fa      	ldrh	r2, [r7, #6]
 8001f2c:	b292      	uxth	r2, r2
 8001f2e:	801a      	strh	r2, [r3, #0]
	/* Read 16-bit Reg */
	return (SPFD5420_RAM);
 8001f30:	4b04      	ldr	r3, [pc, #16]	; (8001f44 <SPFD5420_ReadReg+0x28>)
 8001f32:	881b      	ldrh	r3, [r3, #0]
 8001f34:	b29b      	uxth	r3, r3
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	370c      	adds	r7, #12
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop
 8001f44:	60080000 	.word	0x60080000

08001f48 <ee_ReadBytes>:
*********************************************************************************************************
*	Func name: ee_ReadBytes
*********************************************************************************************************
*/
uint8_t ee_ReadBytes(uint8_t *_pReadBuf, uint16_t _usAddress, uint16_t _usSize)
{
 8001f48:	b590      	push	{r4, r7, lr}
 8001f4a:	b085      	sub	sp, #20
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	460b      	mov	r3, r1
 8001f52:	807b      	strh	r3, [r7, #2]
 8001f54:	4613      	mov	r3, r2
 8001f56:	803b      	strh	r3, [r7, #0]
	uint16_t i;

	i2c_Start();
 8001f58:	f000 f9ac 	bl	80022b4 <i2c_Start>

	i2c_SendByte(EE_DEV_ADDR | I2C_WR);	/* ´Ë´¦ÊÇÐ´Ö¸Áî */
 8001f5c:	20a0      	movs	r0, #160	; 0xa0
 8001f5e:	f000 f9c9 	bl	80022f4 <i2c_SendByte>

	if (i2c_WaitAck() != 0)
 8001f62:	f000 fa37 	bl	80023d4 <i2c_WaitAck>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d13e      	bne.n	8001fea <ee_ReadBytes+0xa2>
			goto cmd_fail;	/* EEPROMÆ÷¼þÎÞÓ¦´ð */
		}
	}
	else
	{
		i2c_SendByte(_usAddress >> 8);
 8001f6c:	887b      	ldrh	r3, [r7, #2]
 8001f6e:	0a1b      	lsrs	r3, r3, #8
 8001f70:	b29b      	uxth	r3, r3
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	4618      	mov	r0, r3
 8001f76:	f000 f9bd 	bl	80022f4 <i2c_SendByte>
		if (i2c_WaitAck() != 0)
 8001f7a:	f000 fa2b 	bl	80023d4 <i2c_WaitAck>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d134      	bne.n	8001fee <ee_ReadBytes+0xa6>
		{
			goto cmd_fail;	/* EEPROMÆ÷¼þÎÞÓ¦´ð */
		}
		i2c_SendByte(_usAddress);
 8001f84:	887b      	ldrh	r3, [r7, #2]
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f000 f9b3 	bl	80022f4 <i2c_SendByte>
		if (i2c_WaitAck() != 0)
 8001f8e:	f000 fa21 	bl	80023d4 <i2c_WaitAck>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d12c      	bne.n	8001ff2 <ee_ReadBytes+0xaa>
		{
			goto cmd_fail;	/* EEPROMÆ÷¼þÎÞÓ¦´ð */
		}
	}
	i2c_Start();
 8001f98:	f000 f98c 	bl	80022b4 <i2c_Start>
	i2c_SendByte(EE_DEV_ADDR | I2C_RD);
 8001f9c:	20a1      	movs	r0, #161	; 0xa1
 8001f9e:	f000 f9a9 	bl	80022f4 <i2c_SendByte>

	if (i2c_WaitAck() != 0)
 8001fa2:	f000 fa17 	bl	80023d4 <i2c_WaitAck>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d124      	bne.n	8001ff6 <ee_ReadBytes+0xae>
	{
		goto cmd_fail;	/* EEPROMÆ÷¼þÎÞÓ¦´ð */
	}
	for (i = 0; i < _usSize; i++)
 8001fac:	2300      	movs	r3, #0
 8001fae:	81fb      	strh	r3, [r7, #14]
 8001fb0:	e013      	b.n	8001fda <ee_ReadBytes+0x92>
	{
		_pReadBuf[i] = i2c_ReadByte();	/* ¶Á1¸ö×Ö½Ú */
 8001fb2:	89fb      	ldrh	r3, [r7, #14]
 8001fb4:	687a      	ldr	r2, [r7, #4]
 8001fb6:	18d4      	adds	r4, r2, r3
 8001fb8:	f000 f9dc 	bl	8002374 <i2c_ReadByte>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	7023      	strb	r3, [r4, #0]

		if (i != _usSize - 1)
 8001fc0:	89fa      	ldrh	r2, [r7, #14]
 8001fc2:	883b      	ldrh	r3, [r7, #0]
 8001fc4:	3b01      	subs	r3, #1
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d002      	beq.n	8001fd0 <ee_ReadBytes+0x88>
		{
			i2c_Ack();
 8001fca:	f000 fa2f 	bl	800242c <i2c_Ack>
 8001fce:	e001      	b.n	8001fd4 <ee_ReadBytes+0x8c>
		}
		else
		{
			i2c_NAck();	/* ×îºó1¸ö×Ö½Ú¶ÁÍêºó£¬CPU²úÉúNACKÐÅºÅ(Çý¶¯SDA = 1) */
 8001fd0:	f000 fa4c 	bl	800246c <i2c_NAck>
	for (i = 0; i < _usSize; i++)
 8001fd4:	89fb      	ldrh	r3, [r7, #14]
 8001fd6:	3301      	adds	r3, #1
 8001fd8:	81fb      	strh	r3, [r7, #14]
 8001fda:	89fa      	ldrh	r2, [r7, #14]
 8001fdc:	883b      	ldrh	r3, [r7, #0]
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	d3e7      	bcc.n	8001fb2 <ee_ReadBytes+0x6a>
		}
	}
	i2c_Stop();
 8001fe2:	f000 fa5f 	bl	80024a4 <i2c_Stop>
	return 1;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e009      	b.n	8001ffe <ee_ReadBytes+0xb6>
		goto cmd_fail;
 8001fea:	bf00      	nop
 8001fec:	e004      	b.n	8001ff8 <ee_ReadBytes+0xb0>
			goto cmd_fail;	/* EEPROMÆ÷¼þÎÞÓ¦´ð */
 8001fee:	bf00      	nop
 8001ff0:	e002      	b.n	8001ff8 <ee_ReadBytes+0xb0>
			goto cmd_fail;	/* EEPROMÆ÷¼þÎÞÓ¦´ð */
 8001ff2:	bf00      	nop
 8001ff4:	e000      	b.n	8001ff8 <ee_ReadBytes+0xb0>
		goto cmd_fail;	/* EEPROMÆ÷¼þÎÞÓ¦´ð */
 8001ff6:	bf00      	nop
cmd_fail:
	i2c_Stop();
 8001ff8:	f000 fa54 	bl	80024a4 <i2c_Stop>
	return 0;
 8001ffc:	2300      	movs	r3, #0
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3714      	adds	r7, #20
 8002002:	46bd      	mov	sp, r7
 8002004:	bd90      	pop	{r4, r7, pc}

08002006 <ee_WriteBytes>:
*********************************************************************************************************
*	Func name: ee_WriteBytes
*********************************************************************************************************
*/
uint8_t ee_WriteBytes(uint8_t *_pWriteBuf, uint16_t _usAddress, uint16_t _usSize)
{
 8002006:	b580      	push	{r7, lr}
 8002008:	b084      	sub	sp, #16
 800200a:	af00      	add	r7, sp, #0
 800200c:	6078      	str	r0, [r7, #4]
 800200e:	460b      	mov	r3, r1
 8002010:	807b      	strh	r3, [r7, #2]
 8002012:	4613      	mov	r3, r2
 8002014:	803b      	strh	r3, [r7, #0]
	uint16_t i,m;
	uint16_t usAddr;

	usAddr = _usAddress;
 8002016:	887b      	ldrh	r3, [r7, #2]
 8002018:	817b      	strh	r3, [r7, #10]
	for (i = 0; i < _usSize; i++)
 800201a:	2300      	movs	r3, #0
 800201c:	81fb      	strh	r3, [r7, #14]
 800201e:	e04b      	b.n	80020b8 <ee_WriteBytes+0xb2>
	{

		if ((i == 0) || (usAddr & (EE_PAGE_SIZE - 1)) == 0)
 8002020:	89fb      	ldrh	r3, [r7, #14]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d004      	beq.n	8002030 <ee_WriteBytes+0x2a>
 8002026:	897b      	ldrh	r3, [r7, #10]
 8002028:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800202c:	2b00      	cmp	r3, #0
 800202e:	d131      	bne.n	8002094 <ee_WriteBytes+0x8e>
		{
			i2c_Stop();
 8002030:	f000 fa38 	bl	80024a4 <i2c_Stop>

			for (m = 0; m < 1000; m++)
 8002034:	2300      	movs	r3, #0
 8002036:	81bb      	strh	r3, [r7, #12]
 8002038:	e00c      	b.n	8002054 <ee_WriteBytes+0x4e>
			{
				i2c_Start();
 800203a:	f000 f93b 	bl	80022b4 <i2c_Start>

				i2c_SendByte(EE_DEV_ADDR | I2C_WR);	/* ´Ë´¦ÊÇÐ´Ö¸Áî */
 800203e:	20a0      	movs	r0, #160	; 0xa0
 8002040:	f000 f958 	bl	80022f4 <i2c_SendByte>

				if (i2c_WaitAck() == 0)
 8002044:	f000 f9c6 	bl	80023d4 <i2c_WaitAck>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d007      	beq.n	800205e <ee_WriteBytes+0x58>
			for (m = 0; m < 1000; m++)
 800204e:	89bb      	ldrh	r3, [r7, #12]
 8002050:	3301      	adds	r3, #1
 8002052:	81bb      	strh	r3, [r7, #12]
 8002054:	89bb      	ldrh	r3, [r7, #12]
 8002056:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800205a:	d3ee      	bcc.n	800203a <ee_WriteBytes+0x34>
 800205c:	e000      	b.n	8002060 <ee_WriteBytes+0x5a>
				{
					break;
 800205e:	bf00      	nop
				}
			}
			if (m  == 1000)
 8002060:	89bb      	ldrh	r3, [r7, #12]
 8002062:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002066:	d02f      	beq.n	80020c8 <ee_WriteBytes+0xc2>
					goto cmd_fail;
				}
			}
			else
			{
				i2c_SendByte(usAddr >> 8);
 8002068:	897b      	ldrh	r3, [r7, #10]
 800206a:	0a1b      	lsrs	r3, r3, #8
 800206c:	b29b      	uxth	r3, r3
 800206e:	b2db      	uxtb	r3, r3
 8002070:	4618      	mov	r0, r3
 8002072:	f000 f93f 	bl	80022f4 <i2c_SendByte>
				if (i2c_WaitAck() != 0)
 8002076:	f000 f9ad 	bl	80023d4 <i2c_WaitAck>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d125      	bne.n	80020cc <ee_WriteBytes+0xc6>
				{
					goto cmd_fail;	/* EEPROMÆ÷¼þÎÞÓ¦´ð */
				}
				i2c_SendByte(usAddr);
 8002080:	897b      	ldrh	r3, [r7, #10]
 8002082:	b2db      	uxtb	r3, r3
 8002084:	4618      	mov	r0, r3
 8002086:	f000 f935 	bl	80022f4 <i2c_SendByte>
				if (i2c_WaitAck() != 0)
 800208a:	f000 f9a3 	bl	80023d4 <i2c_WaitAck>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d11d      	bne.n	80020d0 <ee_WriteBytes+0xca>
					goto cmd_fail;	/* EEPROMÆ÷¼þÎÞÓ¦´ð */
				}
			}
		}
		/* µÚ6²½£º¿ªÊ¼Ð´ÈëÊý¾Ý */
		i2c_SendByte(_pWriteBuf[i]);
 8002094:	89fb      	ldrh	r3, [r7, #14]
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	4413      	add	r3, r2
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	4618      	mov	r0, r3
 800209e:	f000 f929 	bl	80022f4 <i2c_SendByte>
		/* µÚ7²½£º·¢ËÍACK */
		if (i2c_WaitAck() != 0)
 80020a2:	f000 f997 	bl	80023d4 <i2c_WaitAck>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d113      	bne.n	80020d4 <ee_WriteBytes+0xce>
		{
			goto cmd_fail;	/* EEPROMÆ÷¼þÎÞÓ¦´ð */
		}
		usAddr++;	/* µØÖ·Ôö1 */
 80020ac:	897b      	ldrh	r3, [r7, #10]
 80020ae:	3301      	adds	r3, #1
 80020b0:	817b      	strh	r3, [r7, #10]
	for (i = 0; i < _usSize; i++)
 80020b2:	89fb      	ldrh	r3, [r7, #14]
 80020b4:	3301      	adds	r3, #1
 80020b6:	81fb      	strh	r3, [r7, #14]
 80020b8:	89fa      	ldrh	r2, [r7, #14]
 80020ba:	883b      	ldrh	r3, [r7, #0]
 80020bc:	429a      	cmp	r2, r3
 80020be:	d3af      	bcc.n	8002020 <ee_WriteBytes+0x1a>
	}
	/* ÃüÁîÖ´ÐÐ³É¹¦£¬·¢ËÍI2C×ÜÏßÍ£Ö¹ÐÅºÅ */
	i2c_Stop();
 80020c0:	f000 f9f0 	bl	80024a4 <i2c_Stop>
	return 1;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e009      	b.n	80020dc <ee_WriteBytes+0xd6>
				goto cmd_fail;	/* EEPROMÆ÷¼þÐ´³¬Ê± */
 80020c8:	bf00      	nop
 80020ca:	e004      	b.n	80020d6 <ee_WriteBytes+0xd0>
					goto cmd_fail;	/* EEPROMÆ÷¼þÎÞÓ¦´ð */
 80020cc:	bf00      	nop
 80020ce:	e002      	b.n	80020d6 <ee_WriteBytes+0xd0>
					goto cmd_fail;	/* EEPROMÆ÷¼þÎÞÓ¦´ð */
 80020d0:	bf00      	nop
 80020d2:	e000      	b.n	80020d6 <ee_WriteBytes+0xd0>
			goto cmd_fail;	/* EEPROMÆ÷¼þÎÞÓ¦´ð */
 80020d4:	bf00      	nop
cmd_fail: /* ÃüÁîÖ´ÐÐÊ§°Üºó£¬ÇÐ¼Ç·¢ËÍÍ£Ö¹ÐÅºÅ£¬±ÜÃâÓ°ÏìI2C×ÜÏßÉÏÆäËûÉè±¸ */
	/* ·¢ËÍI2C×ÜÏßÍ£Ö¹ÐÅºÅ */
	i2c_Stop();
 80020d6:	f000 f9e5 	bl	80024a4 <i2c_Stop>
	return 0;
 80020da:	2300      	movs	r3, #0
}
 80020dc:	4618      	mov	r0, r3
 80020de:	3710      	adds	r7, #16
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}

080020e4 <bsp_InitExtSRAM>:
*	func name: bsp_InitExtSRAM
*	SRAM_HandleTypeDef , FSMC_NORSRAM_TimingTypeDef
*********************************************************************************************************
*/
void bsp_InitExtSRAM(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b0ac      	sub	sp, #176	; 0xb0
 80020e8:	af00      	add	r7, sp, #0
	SRAM_HandleTypeDef hnorsram;
	FSMC_NORSRAM_TimingTypeDef  timingWrite;
	FSMC_NORSRAM_TimingTypeDef  timingRead;
	GPIO_InitTypeDef GPIO_InitStructure;

	__HAL_RCC_GPIOD_CLK_ENABLE();
 80020ea:	2300      	movs	r3, #0
 80020ec:	613b      	str	r3, [r7, #16]
 80020ee:	4b62      	ldr	r3, [pc, #392]	; (8002278 <bsp_InitExtSRAM+0x194>)
 80020f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f2:	4a61      	ldr	r2, [pc, #388]	; (8002278 <bsp_InitExtSRAM+0x194>)
 80020f4:	f043 0308 	orr.w	r3, r3, #8
 80020f8:	6313      	str	r3, [r2, #48]	; 0x30
 80020fa:	4b5f      	ldr	r3, [pc, #380]	; (8002278 <bsp_InitExtSRAM+0x194>)
 80020fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fe:	f003 0308 	and.w	r3, r3, #8
 8002102:	613b      	str	r3, [r7, #16]
 8002104:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8002106:	2300      	movs	r3, #0
 8002108:	60fb      	str	r3, [r7, #12]
 800210a:	4b5b      	ldr	r3, [pc, #364]	; (8002278 <bsp_InitExtSRAM+0x194>)
 800210c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210e:	4a5a      	ldr	r2, [pc, #360]	; (8002278 <bsp_InitExtSRAM+0x194>)
 8002110:	f043 0310 	orr.w	r3, r3, #16
 8002114:	6313      	str	r3, [r2, #48]	; 0x30
 8002116:	4b58      	ldr	r3, [pc, #352]	; (8002278 <bsp_InitExtSRAM+0x194>)
 8002118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211a:	f003 0310 	and.w	r3, r3, #16
 800211e:	60fb      	str	r3, [r7, #12]
 8002120:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8002122:	2300      	movs	r3, #0
 8002124:	60bb      	str	r3, [r7, #8]
 8002126:	4b54      	ldr	r3, [pc, #336]	; (8002278 <bsp_InitExtSRAM+0x194>)
 8002128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212a:	4a53      	ldr	r2, [pc, #332]	; (8002278 <bsp_InitExtSRAM+0x194>)
 800212c:	f043 0320 	orr.w	r3, r3, #32
 8002130:	6313      	str	r3, [r2, #48]	; 0x30
 8002132:	4b51      	ldr	r3, [pc, #324]	; (8002278 <bsp_InitExtSRAM+0x194>)
 8002134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002136:	f003 0320 	and.w	r3, r3, #32
 800213a:	60bb      	str	r3, [r7, #8]
 800213c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 800213e:	2300      	movs	r3, #0
 8002140:	607b      	str	r3, [r7, #4]
 8002142:	4b4d      	ldr	r3, [pc, #308]	; (8002278 <bsp_InitExtSRAM+0x194>)
 8002144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002146:	4a4c      	ldr	r2, [pc, #304]	; (8002278 <bsp_InitExtSRAM+0x194>)
 8002148:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800214c:	6313      	str	r3, [r2, #48]	; 0x30
 800214e:	4b4a      	ldr	r3, [pc, #296]	; (8002278 <bsp_InitExtSRAM+0x194>)
 8002150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002152:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002156:	607b      	str	r3, [r7, #4]
 8002158:	687b      	ldr	r3, [r7, #4]

	__HAL_RCC_FSMC_CLK_ENABLE();
 800215a:	2300      	movs	r3, #0
 800215c:	603b      	str	r3, [r7, #0]
 800215e:	4b46      	ldr	r3, [pc, #280]	; (8002278 <bsp_InitExtSRAM+0x194>)
 8002160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002162:	4a45      	ldr	r2, [pc, #276]	; (8002278 <bsp_InitExtSRAM+0x194>)
 8002164:	f043 0301 	orr.w	r3, r3, #1
 8002168:	6393      	str	r3, [r2, #56]	; 0x38
 800216a:	4b43      	ldr	r3, [pc, #268]	; (8002278 <bsp_InitExtSRAM+0x194>)
 800216c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800216e:	f003 0301 	and.w	r3, r3, #1
 8002172:	603b      	str	r3, [r7, #0]
 8002174:	683b      	ldr	r3, [r7, #0]
		PG5/FSMC_A15
		PG10/FSMC_NE3	--- Æ¬Ñ¡Ö÷ÐÅºÅ
	*/

	/* GPIOD configuration */
	GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_4  | GPIO_PIN_5  |
 8002176:	f64f 7333 	movw	r3, #65331	; 0xff33
 800217a:	617b      	str	r3, [r7, #20]
		                    GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 | GPIO_PIN_11 |
		                    GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
	GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 800217c:	2302      	movs	r3, #2
 800217e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002180:	2303      	movs	r3, #3
 8002182:	623b      	str	r3, [r7, #32]
	GPIO_InitStructure.Pull = GPIO_NOPULL;
 8002184:	2300      	movs	r3, #0
 8002186:	61fb      	str	r3, [r7, #28]
	GPIO_InitStructure.Alternate = GPIO_AF12_FSMC;
 8002188:	230c      	movs	r3, #12
 800218a:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 800218c:	f107 0314 	add.w	r3, r7, #20
 8002190:	4619      	mov	r1, r3
 8002192:	483a      	ldr	r0, [pc, #232]	; (800227c <bsp_InitExtSRAM+0x198>)
 8002194:	f001 ff2e 	bl	8003ff4 <HAL_GPIO_Init>

	/* GPIOE configuration */
	GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_3 |
 8002198:	f64f 73bb 	movw	r3, #65467	; 0xffbb
 800219c:	617b      	str	r3, [r7, #20]
		                    GPIO_PIN_4  | GPIO_PIN_5  | GPIO_PIN_7 |
		                    GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 | GPIO_PIN_11|
		                    GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
	GPIO_InitStructure.Alternate = GPIO_AF12_FSMC;
 800219e:	230c      	movs	r3, #12
 80021a0:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 80021a2:	f107 0314 	add.w	r3, r7, #20
 80021a6:	4619      	mov	r1, r3
 80021a8:	4835      	ldr	r0, [pc, #212]	; (8002280 <bsp_InitExtSRAM+0x19c>)
 80021aa:	f001 ff23 	bl	8003ff4 <HAL_GPIO_Init>

	/* GPIOF configuration */
	GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_2  | GPIO_PIN_3  |
 80021ae:	f24f 033f 	movw	r3, #61503	; 0xf03f
 80021b2:	617b      	str	r3, [r7, #20]
		                    GPIO_PIN_4  | GPIO_PIN_5  | GPIO_PIN_12 | GPIO_PIN_13 |
		                    GPIO_PIN_14 | GPIO_PIN_15;
	GPIO_InitStructure.Alternate = GPIO_AF12_FSMC;
 80021b4:	230c      	movs	r3, #12
 80021b6:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 80021b8:	f107 0314 	add.w	r3, r7, #20
 80021bc:	4619      	mov	r1, r3
 80021be:	4831      	ldr	r0, [pc, #196]	; (8002284 <bsp_InitExtSRAM+0x1a0>)
 80021c0:	f001 ff18 	bl	8003ff4 <HAL_GPIO_Init>

	/* GPIOG configuration */
	GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_2  | GPIO_PIN_3 |
 80021c4:	f240 433f 	movw	r3, #1087	; 0x43f
 80021c8:	617b      	str	r3, [r7, #20]
		                    GPIO_PIN_4  | GPIO_PIN_5  |GPIO_PIN_10;
	GPIO_InitStructure.Alternate = GPIO_AF12_FSMC;
 80021ca:	230c      	movs	r3, #12
 80021cc:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80021ce:	f107 0314 	add.w	r3, r7, #20
 80021d2:	4619      	mov	r1, r3
 80021d4:	482c      	ldr	r0, [pc, #176]	; (8002288 <bsp_InitExtSRAM+0x1a4>)
 80021d6:	f001 ff0d 	bl	8003ff4 <HAL_GPIO_Init>

	/*-- FSMC Configuration ------------------------------------------------------*/
	timingWrite.AddressSetupTime = 3;
 80021da:	2303      	movs	r3, #3
 80021dc:	647b      	str	r3, [r7, #68]	; 0x44
	timingWrite.AddressHoldTime = 0;
 80021de:	2300      	movs	r3, #0
 80021e0:	64bb      	str	r3, [r7, #72]	; 0x48
	timingWrite.DataSetupTime = 2;
 80021e2:	2302      	movs	r3, #2
 80021e4:	64fb      	str	r3, [r7, #76]	; 0x4c
	timingWrite.BusTurnAroundDuration = 1;
 80021e6:	2301      	movs	r3, #1
 80021e8:	653b      	str	r3, [r7, #80]	; 0x50
	timingWrite.CLKDivision = 0;
 80021ea:	2300      	movs	r3, #0
 80021ec:	657b      	str	r3, [r7, #84]	; 0x54
	timingWrite.DataLatency = 0;
 80021ee:	2300      	movs	r3, #0
 80021f0:	65bb      	str	r3, [r7, #88]	; 0x58
	timingWrite.AccessMode = FSMC_ACCESS_MODE_A;
 80021f2:	2300      	movs	r3, #0
 80021f4:	65fb      	str	r3, [r7, #92]	; 0x5c

	timingRead.AddressSetupTime = 3;
 80021f6:	2303      	movs	r3, #3
 80021f8:	62bb      	str	r3, [r7, #40]	; 0x28
	timingRead.AddressHoldTime = 0;
 80021fa:	2300      	movs	r3, #0
 80021fc:	62fb      	str	r3, [r7, #44]	; 0x2c
	timingRead.DataSetupTime = 2;
 80021fe:	2302      	movs	r3, #2
 8002200:	633b      	str	r3, [r7, #48]	; 0x30
	timingRead.BusTurnAroundDuration = 1;
 8002202:	2301      	movs	r3, #1
 8002204:	637b      	str	r3, [r7, #52]	; 0x34
	timingRead.CLKDivision = 0;
 8002206:	2300      	movs	r3, #0
 8002208:	63bb      	str	r3, [r7, #56]	; 0x38
	timingRead.DataLatency = 0;
 800220a:	2300      	movs	r3, #0
 800220c:	63fb      	str	r3, [r7, #60]	; 0x3c
	timingRead.AccessMode = FSMC_ACCESS_MODE_A;
 800220e:	2300      	movs	r3, #0
 8002210:	643b      	str	r3, [r7, #64]	; 0x40

	hnorsram.Instance = FSMC_NORSRAM_DEVICE;
 8002212:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8002216:	663b      	str	r3, [r7, #96]	; 0x60
	hnorsram.Init.NSBank = FSMC_NORSRAM_BANK3;
 8002218:	2304      	movs	r3, #4
 800221a:	66bb      	str	r3, [r7, #104]	; 0x68
	hnorsram.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 800221c:	2300      	movs	r3, #0
 800221e:	66fb      	str	r3, [r7, #108]	; 0x6c
	hnorsram.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8002220:	2300      	movs	r3, #0
 8002222:	673b      	str	r3, [r7, #112]	; 0x70
	hnorsram.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8002224:	2310      	movs	r3, #16
 8002226:	677b      	str	r3, [r7, #116]	; 0x74
	hnorsram.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8002228:	2300      	movs	r3, #0
 800222a:	67bb      	str	r3, [r7, #120]	; 0x78
	hnorsram.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 800222c:	2300      	movs	r3, #0
 800222e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	hnorsram.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8002232:	2300      	movs	r3, #0
 8002234:	67fb      	str	r3, [r7, #124]	; 0x7c
	hnorsram.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8002236:	2300      	movs	r3, #0
 8002238:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	hnorsram.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 800223c:	2300      	movs	r3, #0
 800223e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	hnorsram.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8002242:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002246:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	hnorsram.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 800224a:	2300      	movs	r3, #0
 800224c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	hnorsram.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8002250:	2300      	movs	r3, #0
 8002252:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	hnorsram.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8002256:	2300      	movs	r3, #0
 8002258:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

	HAL_SRAM_Init(&hnorsram, &timingRead, &timingWrite);
 800225c:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8002260:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002264:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002268:	4618      	mov	r0, r3
 800226a:	f7fe fd41 	bl	8000cf0 <HAL_SRAM_Init>
}
 800226e:	bf00      	nop
 8002270:	37b0      	adds	r7, #176	; 0xb0
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	40023800 	.word	0x40023800
 800227c:	40020c00 	.word	0x40020c00
 8002280:	40021000 	.word	0x40021000
 8002284:	40021400 	.word	0x40021400
 8002288:	40021800 	.word	0x40021800

0800228c <i2c_Delay>:
*********************************************************************************************************
*	Func name: i2c_Delay
*********************************************************************************************************
*/
void i2c_Delay(void)
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < 30; i++);
 8002292:	2300      	movs	r3, #0
 8002294:	71fb      	strb	r3, [r7, #7]
 8002296:	e002      	b.n	800229e <i2c_Delay+0x12>
 8002298:	79fb      	ldrb	r3, [r7, #7]
 800229a:	3301      	adds	r3, #1
 800229c:	71fb      	strb	r3, [r7, #7]
 800229e:	79fb      	ldrb	r3, [r7, #7]
 80022a0:	2b1d      	cmp	r3, #29
 80022a2:	d9f9      	bls.n	8002298 <i2c_Delay+0xc>
}
 80022a4:	bf00      	nop
 80022a6:	bf00      	nop
 80022a8:	370c      	adds	r7, #12
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr
	...

080022b4 <i2c_Start>:
*********************************************************************************************************
*	Func name: i2c_Start
*********************************************************************************************************
*/
void i2c_Start(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	af00      	add	r7, sp, #0
	I2C_SDA_1();
 80022b8:	2201      	movs	r2, #1
 80022ba:	2120      	movs	r1, #32
 80022bc:	480c      	ldr	r0, [pc, #48]	; (80022f0 <i2c_Start+0x3c>)
 80022be:	f002 f84d 	bl	800435c <HAL_GPIO_WritePin>
	I2C_SCL_1();
 80022c2:	2201      	movs	r2, #1
 80022c4:	2110      	movs	r1, #16
 80022c6:	480a      	ldr	r0, [pc, #40]	; (80022f0 <i2c_Start+0x3c>)
 80022c8:	f002 f848 	bl	800435c <HAL_GPIO_WritePin>
	i2c_Delay();
 80022cc:	f7ff ffde 	bl	800228c <i2c_Delay>
	I2C_SDA_0();
 80022d0:	2200      	movs	r2, #0
 80022d2:	2120      	movs	r1, #32
 80022d4:	4806      	ldr	r0, [pc, #24]	; (80022f0 <i2c_Start+0x3c>)
 80022d6:	f002 f841 	bl	800435c <HAL_GPIO_WritePin>
	i2c_Delay();
 80022da:	f7ff ffd7 	bl	800228c <i2c_Delay>
	I2C_SCL_0();
 80022de:	2200      	movs	r2, #0
 80022e0:	2110      	movs	r1, #16
 80022e2:	4803      	ldr	r0, [pc, #12]	; (80022f0 <i2c_Start+0x3c>)
 80022e4:	f002 f83a 	bl	800435c <HAL_GPIO_WritePin>
	i2c_Delay();
 80022e8:	f7ff ffd0 	bl	800228c <i2c_Delay>
}
 80022ec:	bf00      	nop
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	40021c00 	.word	0x40021c00

080022f4 <i2c_SendByte>:
*********************************************************************************************************
*	Func name: i2c_SendByte
*********************************************************************************************************
*/
void i2c_SendByte(uint8_t _ucByte)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b084      	sub	sp, #16
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	4603      	mov	r3, r0
 80022fc:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	for (i = 0; i < 8; i++)
 80022fe:	2300      	movs	r3, #0
 8002300:	73fb      	strb	r3, [r7, #15]
 8002302:	e02c      	b.n	800235e <i2c_SendByte+0x6a>
	{
		if (_ucByte & 0x80)
 8002304:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002308:	2b00      	cmp	r3, #0
 800230a:	da05      	bge.n	8002318 <i2c_SendByte+0x24>
		{
			I2C_SDA_1();
 800230c:	2201      	movs	r2, #1
 800230e:	2120      	movs	r1, #32
 8002310:	4817      	ldr	r0, [pc, #92]	; (8002370 <i2c_SendByte+0x7c>)
 8002312:	f002 f823 	bl	800435c <HAL_GPIO_WritePin>
 8002316:	e004      	b.n	8002322 <i2c_SendByte+0x2e>
		}
		else
		{
			I2C_SDA_0();
 8002318:	2200      	movs	r2, #0
 800231a:	2120      	movs	r1, #32
 800231c:	4814      	ldr	r0, [pc, #80]	; (8002370 <i2c_SendByte+0x7c>)
 800231e:	f002 f81d 	bl	800435c <HAL_GPIO_WritePin>
		}
		i2c_Delay();
 8002322:	f7ff ffb3 	bl	800228c <i2c_Delay>
		I2C_SCL_1();
 8002326:	2201      	movs	r2, #1
 8002328:	2110      	movs	r1, #16
 800232a:	4811      	ldr	r0, [pc, #68]	; (8002370 <i2c_SendByte+0x7c>)
 800232c:	f002 f816 	bl	800435c <HAL_GPIO_WritePin>
		i2c_Delay();
 8002330:	f7ff ffac 	bl	800228c <i2c_Delay>
		I2C_SCL_0();
 8002334:	2200      	movs	r2, #0
 8002336:	2110      	movs	r1, #16
 8002338:	480d      	ldr	r0, [pc, #52]	; (8002370 <i2c_SendByte+0x7c>)
 800233a:	f002 f80f 	bl	800435c <HAL_GPIO_WritePin>
		if (i == 7)
 800233e:	7bfb      	ldrb	r3, [r7, #15]
 8002340:	2b07      	cmp	r3, #7
 8002342:	d104      	bne.n	800234e <i2c_SendByte+0x5a>
		{
			 I2C_SDA_1(); // ÊÍ·Å×ÜÏß
 8002344:	2201      	movs	r2, #1
 8002346:	2120      	movs	r1, #32
 8002348:	4809      	ldr	r0, [pc, #36]	; (8002370 <i2c_SendByte+0x7c>)
 800234a:	f002 f807 	bl	800435c <HAL_GPIO_WritePin>
		}
		_ucByte <<= 1;	/* ×óÒÆÒ»¸öbit */
 800234e:	79fb      	ldrb	r3, [r7, #7]
 8002350:	005b      	lsls	r3, r3, #1
 8002352:	71fb      	strb	r3, [r7, #7]
		i2c_Delay();
 8002354:	f7ff ff9a 	bl	800228c <i2c_Delay>
	for (i = 0; i < 8; i++)
 8002358:	7bfb      	ldrb	r3, [r7, #15]
 800235a:	3301      	adds	r3, #1
 800235c:	73fb      	strb	r3, [r7, #15]
 800235e:	7bfb      	ldrb	r3, [r7, #15]
 8002360:	2b07      	cmp	r3, #7
 8002362:	d9cf      	bls.n	8002304 <i2c_SendByte+0x10>
	}
}
 8002364:	bf00      	nop
 8002366:	bf00      	nop
 8002368:	3710      	adds	r7, #16
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	40021c00 	.word	0x40021c00

08002374 <i2c_ReadByte>:
*********************************************************************************************************
*	Func name: i2c_ReadByte
*********************************************************************************************************
*/
uint8_t i2c_ReadByte(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b082      	sub	sp, #8
 8002378:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t value;

	value = 0;
 800237a:	2300      	movs	r3, #0
 800237c:	71bb      	strb	r3, [r7, #6]

	for (i = 0; i < 8; i++)
 800237e:	2300      	movs	r3, #0
 8002380:	71fb      	strb	r3, [r7, #7]
 8002382:	e01d      	b.n	80023c0 <i2c_ReadByte+0x4c>
	{
		value <<= 1;
 8002384:	79bb      	ldrb	r3, [r7, #6]
 8002386:	005b      	lsls	r3, r3, #1
 8002388:	71bb      	strb	r3, [r7, #6]
		I2C_SCL_1();
 800238a:	2201      	movs	r2, #1
 800238c:	2110      	movs	r1, #16
 800238e:	4810      	ldr	r0, [pc, #64]	; (80023d0 <i2c_ReadByte+0x5c>)
 8002390:	f001 ffe4 	bl	800435c <HAL_GPIO_WritePin>
		i2c_Delay();
 8002394:	f7ff ff7a 	bl	800228c <i2c_Delay>
		if (I2C_SDA_READ())
 8002398:	2120      	movs	r1, #32
 800239a:	480d      	ldr	r0, [pc, #52]	; (80023d0 <i2c_ReadByte+0x5c>)
 800239c:	f001 ffc6 	bl	800432c <HAL_GPIO_ReadPin>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d102      	bne.n	80023ac <i2c_ReadByte+0x38>
		{
			value++;
 80023a6:	79bb      	ldrb	r3, [r7, #6]
 80023a8:	3301      	adds	r3, #1
 80023aa:	71bb      	strb	r3, [r7, #6]
		}
		I2C_SCL_0();
 80023ac:	2200      	movs	r2, #0
 80023ae:	2110      	movs	r1, #16
 80023b0:	4807      	ldr	r0, [pc, #28]	; (80023d0 <i2c_ReadByte+0x5c>)
 80023b2:	f001 ffd3 	bl	800435c <HAL_GPIO_WritePin>
		i2c_Delay();
 80023b6:	f7ff ff69 	bl	800228c <i2c_Delay>
	for (i = 0; i < 8; i++)
 80023ba:	79fb      	ldrb	r3, [r7, #7]
 80023bc:	3301      	adds	r3, #1
 80023be:	71fb      	strb	r3, [r7, #7]
 80023c0:	79fb      	ldrb	r3, [r7, #7]
 80023c2:	2b07      	cmp	r3, #7
 80023c4:	d9de      	bls.n	8002384 <i2c_ReadByte+0x10>
	}
	return value;
 80023c6:	79bb      	ldrb	r3, [r7, #6]
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3708      	adds	r7, #8
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	40021c00 	.word	0x40021c00

080023d4 <i2c_WaitAck>:
*********************************************************************************************************
*	Func name: i2c_WaitAck
*********************************************************************************************************
*/
uint8_t i2c_WaitAck(void)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b082      	sub	sp, #8
 80023d8:	af00      	add	r7, sp, #0
	uint8_t re;

	I2C_SDA_1();	/* CPUÊÍ·ÅSDA×ÜÏß */
 80023da:	2201      	movs	r2, #1
 80023dc:	2120      	movs	r1, #32
 80023de:	4812      	ldr	r0, [pc, #72]	; (8002428 <i2c_WaitAck+0x54>)
 80023e0:	f001 ffbc 	bl	800435c <HAL_GPIO_WritePin>
	i2c_Delay();
 80023e4:	f7ff ff52 	bl	800228c <i2c_Delay>
	I2C_SCL_1();	/* CPUÇý¶¯SCL = 1, ´ËÊ±Æ÷¼þ»á·µ»ØACKÓ¦´ð */
 80023e8:	2201      	movs	r2, #1
 80023ea:	2110      	movs	r1, #16
 80023ec:	480e      	ldr	r0, [pc, #56]	; (8002428 <i2c_WaitAck+0x54>)
 80023ee:	f001 ffb5 	bl	800435c <HAL_GPIO_WritePin>
	i2c_Delay();
 80023f2:	f7ff ff4b 	bl	800228c <i2c_Delay>
	if (I2C_SDA_READ())	/* CPU¶ÁÈ¡SDA¿ÚÏß×´Ì¬ */
 80023f6:	2120      	movs	r1, #32
 80023f8:	480b      	ldr	r0, [pc, #44]	; (8002428 <i2c_WaitAck+0x54>)
 80023fa:	f001 ff97 	bl	800432c <HAL_GPIO_ReadPin>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b01      	cmp	r3, #1
 8002402:	d102      	bne.n	800240a <i2c_WaitAck+0x36>
	{
		re = 1;
 8002404:	2301      	movs	r3, #1
 8002406:	71fb      	strb	r3, [r7, #7]
 8002408:	e001      	b.n	800240e <i2c_WaitAck+0x3a>
	}
	else
	{
		re = 0;
 800240a:	2300      	movs	r3, #0
 800240c:	71fb      	strb	r3, [r7, #7]
	}
	I2C_SCL_0();
 800240e:	2200      	movs	r2, #0
 8002410:	2110      	movs	r1, #16
 8002412:	4805      	ldr	r0, [pc, #20]	; (8002428 <i2c_WaitAck+0x54>)
 8002414:	f001 ffa2 	bl	800435c <HAL_GPIO_WritePin>
	i2c_Delay();
 8002418:	f7ff ff38 	bl	800228c <i2c_Delay>
	return re;
 800241c:	79fb      	ldrb	r3, [r7, #7]
}
 800241e:	4618      	mov	r0, r3
 8002420:	3708      	adds	r7, #8
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	40021c00 	.word	0x40021c00

0800242c <i2c_Ack>:
*********************************************************************************************************
*	Func name: i2c_Ack
*********************************************************************************************************
*/
void i2c_Ack(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	af00      	add	r7, sp, #0
	I2C_SDA_0();	/* CPUÇý¶¯SDA = 0 */
 8002430:	2200      	movs	r2, #0
 8002432:	2120      	movs	r1, #32
 8002434:	480c      	ldr	r0, [pc, #48]	; (8002468 <i2c_Ack+0x3c>)
 8002436:	f001 ff91 	bl	800435c <HAL_GPIO_WritePin>
	i2c_Delay();
 800243a:	f7ff ff27 	bl	800228c <i2c_Delay>
	I2C_SCL_1();	/* CPU²úÉú1¸öÊ±ÖÓ */
 800243e:	2201      	movs	r2, #1
 8002440:	2110      	movs	r1, #16
 8002442:	4809      	ldr	r0, [pc, #36]	; (8002468 <i2c_Ack+0x3c>)
 8002444:	f001 ff8a 	bl	800435c <HAL_GPIO_WritePin>
	i2c_Delay();
 8002448:	f7ff ff20 	bl	800228c <i2c_Delay>
	I2C_SCL_0();
 800244c:	2200      	movs	r2, #0
 800244e:	2110      	movs	r1, #16
 8002450:	4805      	ldr	r0, [pc, #20]	; (8002468 <i2c_Ack+0x3c>)
 8002452:	f001 ff83 	bl	800435c <HAL_GPIO_WritePin>
	i2c_Delay();
 8002456:	f7ff ff19 	bl	800228c <i2c_Delay>
	I2C_SDA_1();	/* CPUÊÍ·ÅSDA×ÜÏß */
 800245a:	2201      	movs	r2, #1
 800245c:	2120      	movs	r1, #32
 800245e:	4802      	ldr	r0, [pc, #8]	; (8002468 <i2c_Ack+0x3c>)
 8002460:	f001 ff7c 	bl	800435c <HAL_GPIO_WritePin>
}
 8002464:	bf00      	nop
 8002466:	bd80      	pop	{r7, pc}
 8002468:	40021c00 	.word	0x40021c00

0800246c <i2c_NAck>:
*********************************************************************************************************
*	Func name: i2c_NAck
*********************************************************************************************************
*/
void i2c_NAck(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	af00      	add	r7, sp, #0
	I2C_SDA_1();	/* CPUÇý¶¯SDA = 1 */
 8002470:	2201      	movs	r2, #1
 8002472:	2120      	movs	r1, #32
 8002474:	480a      	ldr	r0, [pc, #40]	; (80024a0 <i2c_NAck+0x34>)
 8002476:	f001 ff71 	bl	800435c <HAL_GPIO_WritePin>
	i2c_Delay();
 800247a:	f7ff ff07 	bl	800228c <i2c_Delay>
	I2C_SCL_1();	/* CPU²úÉú1¸öÊ±ÖÓ */
 800247e:	2201      	movs	r2, #1
 8002480:	2110      	movs	r1, #16
 8002482:	4807      	ldr	r0, [pc, #28]	; (80024a0 <i2c_NAck+0x34>)
 8002484:	f001 ff6a 	bl	800435c <HAL_GPIO_WritePin>
	i2c_Delay();
 8002488:	f7ff ff00 	bl	800228c <i2c_Delay>
	I2C_SCL_0();
 800248c:	2200      	movs	r2, #0
 800248e:	2110      	movs	r1, #16
 8002490:	4803      	ldr	r0, [pc, #12]	; (80024a0 <i2c_NAck+0x34>)
 8002492:	f001 ff63 	bl	800435c <HAL_GPIO_WritePin>
	i2c_Delay();
 8002496:	f7ff fef9 	bl	800228c <i2c_Delay>
}
 800249a:	bf00      	nop
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	40021c00 	.word	0x40021c00

080024a4 <i2c_Stop>:
*********************************************************************************************************
*	Func name: i2c_Start
*********************************************************************************************************
*/
void i2c_Stop(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	af00      	add	r7, sp, #0
	I2C_SDA_0();
 80024a8:	2200      	movs	r2, #0
 80024aa:	2120      	movs	r1, #32
 80024ac:	4808      	ldr	r0, [pc, #32]	; (80024d0 <i2c_Stop+0x2c>)
 80024ae:	f001 ff55 	bl	800435c <HAL_GPIO_WritePin>
	I2C_SCL_1();
 80024b2:	2201      	movs	r2, #1
 80024b4:	2110      	movs	r1, #16
 80024b6:	4806      	ldr	r0, [pc, #24]	; (80024d0 <i2c_Stop+0x2c>)
 80024b8:	f001 ff50 	bl	800435c <HAL_GPIO_WritePin>
	i2c_Delay();
 80024bc:	f7ff fee6 	bl	800228c <i2c_Delay>
	I2C_SDA_1();
 80024c0:	2201      	movs	r2, #1
 80024c2:	2120      	movs	r1, #32
 80024c4:	4802      	ldr	r0, [pc, #8]	; (80024d0 <i2c_Stop+0x2c>)
 80024c6:	f001 ff49 	bl	800435c <HAL_GPIO_WritePin>
}
 80024ca:	bf00      	nop
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	40021c00 	.word	0x40021c00

080024d4 <bsp_InitI2C>:
*********************************************************************************************************
*	Func name: bsp_InitI2C
*********************************************************************************************************
*/
void bsp_InitI2C(void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b086      	sub	sp, #24
 80024d8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	__HAL_RCC_GPIOH_CLK_ENABLE();
 80024da:	2300      	movs	r3, #0
 80024dc:	603b      	str	r3, [r7, #0]
 80024de:	4b0f      	ldr	r3, [pc, #60]	; (800251c <bsp_InitI2C+0x48>)
 80024e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e2:	4a0e      	ldr	r2, [pc, #56]	; (800251c <bsp_InitI2C+0x48>)
 80024e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024e8:	6313      	str	r3, [r2, #48]	; 0x30
 80024ea:	4b0c      	ldr	r3, [pc, #48]	; (800251c <bsp_InitI2C+0x48>)
 80024ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024f2:	603b      	str	r3, [r7, #0]
 80024f4:	683b      	ldr	r3, [r7, #0]

	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_OD;
 80024f6:	2311      	movs	r3, #17
 80024f8:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructure.Pull = GPIO_NOPULL;
 80024fa:	2300      	movs	r3, #0
 80024fc:	60fb      	str	r3, [r7, #12]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024fe:	2303      	movs	r3, #3
 8002500:	613b      	str	r3, [r7, #16]

	GPIO_InitStructure.Pin = I2C_SCL_PIN | I2C_SDA_PIN;
 8002502:	2330      	movs	r3, #48	; 0x30
 8002504:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIO_PORT_I2C, &GPIO_InitStructure);
 8002506:	1d3b      	adds	r3, r7, #4
 8002508:	4619      	mov	r1, r3
 800250a:	4805      	ldr	r0, [pc, #20]	; (8002520 <bsp_InitI2C+0x4c>)
 800250c:	f001 fd72 	bl	8003ff4 <HAL_GPIO_Init>

	i2c_Stop();
 8002510:	f7ff ffc8 	bl	80024a4 <i2c_Stop>
}
 8002514:	bf00      	nop
 8002516:	3718      	adds	r7, #24
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}
 800251c:	40023800 	.word	0x40023800
 8002520:	40021c00 	.word	0x40021c00

08002524 <IsKeyDown1>:
	static uint8_t IsKeyDown5(void) {if ((GPIO_PORT_K5->IDR & GPIO_PIN_K5) == 0) return 1;else return 0;}
	static uint8_t IsKeyDown6(void) {if ((GPIO_PORT_K6->IDR & GPIO_PIN_K6) == 0) return 1;else return 0;}
	static uint8_t IsKeyDown7(void) {if ((GPIO_PORT_K7->IDR & GPIO_PIN_K7) == 0) return 1;else return 0;}
	static uint8_t IsKeyDown8(void) {if ((GPIO_PORT_K8->IDR & GPIO_PIN_K8) == 0) return 1;else return 0;}
#else				/* °²¸»À³ STM32-V5 ¿ª·¢°å */
	static uint8_t IsKeyDown1(void) {if ((GPIO_PORT_K1->IDR & GPIO_PIN_K1) == 0) return 1;else return 0;}
 8002524:	b480      	push	{r7}
 8002526:	af00      	add	r7, sp, #0
 8002528:	4b06      	ldr	r3, [pc, #24]	; (8002544 <IsKeyDown1+0x20>)
 800252a:	691b      	ldr	r3, [r3, #16]
 800252c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002530:	2b00      	cmp	r3, #0
 8002532:	d101      	bne.n	8002538 <IsKeyDown1+0x14>
 8002534:	2301      	movs	r3, #1
 8002536:	e000      	b.n	800253a <IsKeyDown1+0x16>
 8002538:	2300      	movs	r3, #0
 800253a:	4618      	mov	r0, r3
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr
 8002544:	40022000 	.word	0x40022000

08002548 <IsKeyDown2>:
	static uint8_t IsKeyDown2(void) {if ((GPIO_PORT_K2->IDR & GPIO_PIN_K2) == 0) return 1;else return 0;}
 8002548:	b480      	push	{r7}
 800254a:	af00      	add	r7, sp, #0
 800254c:	4b06      	ldr	r3, [pc, #24]	; (8002568 <IsKeyDown2+0x20>)
 800254e:	691b      	ldr	r3, [r3, #16]
 8002550:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002554:	2b00      	cmp	r3, #0
 8002556:	d101      	bne.n	800255c <IsKeyDown2+0x14>
 8002558:	2301      	movs	r3, #1
 800255a:	e000      	b.n	800255e <IsKeyDown2+0x16>
 800255c:	2300      	movs	r3, #0
 800255e:	4618      	mov	r0, r3
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr
 8002568:	40020800 	.word	0x40020800

0800256c <IsKeyDown3>:
	static uint8_t IsKeyDown3(void) {if ((GPIO_PORT_K3->IDR & GPIO_PIN_K3) == 0) return 1;else return 0;}
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0
 8002570:	4b06      	ldr	r3, [pc, #24]	; (800258c <IsKeyDown3+0x20>)
 8002572:	691b      	ldr	r3, [r3, #16]
 8002574:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002578:	2b00      	cmp	r3, #0
 800257a:	d101      	bne.n	8002580 <IsKeyDown3+0x14>
 800257c:	2301      	movs	r3, #1
 800257e:	e000      	b.n	8002582 <IsKeyDown3+0x16>
 8002580:	2300      	movs	r3, #0
 8002582:	4618      	mov	r0, r3
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr
 800258c:	40022000 	.word	0x40022000

08002590 <IsKeyDown4>:
	static uint8_t IsKeyDown4(void) {if ((GPIO_PORT_K4->IDR & GPIO_PIN_K4) == 0) return 1;else return 0;}
 8002590:	b480      	push	{r7}
 8002592:	af00      	add	r7, sp, #0
 8002594:	4b06      	ldr	r3, [pc, #24]	; (80025b0 <IsKeyDown4+0x20>)
 8002596:	691b      	ldr	r3, [r3, #16]
 8002598:	f003 0304 	and.w	r3, r3, #4
 800259c:	2b00      	cmp	r3, #0
 800259e:	d101      	bne.n	80025a4 <IsKeyDown4+0x14>
 80025a0:	2301      	movs	r3, #1
 80025a2:	e000      	b.n	80025a6 <IsKeyDown4+0x16>
 80025a4:	2300      	movs	r3, #0
 80025a6:	4618      	mov	r0, r3
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr
 80025b0:	40021c00 	.word	0x40021c00

080025b4 <IsKeyDown5>:
	static uint8_t IsKeyDown5(void) {if ((GPIO_PORT_K5->IDR & GPIO_PIN_K5) == 0) return 1;else return 0;}
 80025b4:	b480      	push	{r7}
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	4b06      	ldr	r3, [pc, #24]	; (80025d4 <IsKeyDown5+0x20>)
 80025ba:	691b      	ldr	r3, [r3, #16]
 80025bc:	f003 0308 	and.w	r3, r3, #8
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d101      	bne.n	80025c8 <IsKeyDown5+0x14>
 80025c4:	2301      	movs	r3, #1
 80025c6:	e000      	b.n	80025ca <IsKeyDown5+0x16>
 80025c8:	2300      	movs	r3, #0
 80025ca:	4618      	mov	r0, r3
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr
 80025d4:	40021c00 	.word	0x40021c00

080025d8 <IsKeyDown6>:
	static uint8_t IsKeyDown6(void) {if ((GPIO_PORT_K6->IDR & GPIO_PIN_K6) == 0) return 1;else return 0;}
 80025d8:	b480      	push	{r7}
 80025da:	af00      	add	r7, sp, #0
 80025dc:	4b06      	ldr	r3, [pc, #24]	; (80025f8 <IsKeyDown6+0x20>)
 80025de:	691b      	ldr	r3, [r3, #16]
 80025e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d101      	bne.n	80025ec <IsKeyDown6+0x14>
 80025e8:	2301      	movs	r3, #1
 80025ea:	e000      	b.n	80025ee <IsKeyDown6+0x16>
 80025ec:	2300      	movs	r3, #0
 80025ee:	4618      	mov	r0, r3
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr
 80025f8:	40021400 	.word	0x40021400

080025fc <IsKeyDown7>:
	static uint8_t IsKeyDown7(void) {if ((GPIO_PORT_K7->IDR & GPIO_PIN_K7) == 0) return 1;else return 0;}
 80025fc:	b480      	push	{r7}
 80025fe:	af00      	add	r7, sp, #0
 8002600:	4b06      	ldr	r3, [pc, #24]	; (800261c <IsKeyDown7+0x20>)
 8002602:	691b      	ldr	r3, [r3, #16]
 8002604:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002608:	2b00      	cmp	r3, #0
 800260a:	d101      	bne.n	8002610 <IsKeyDown7+0x14>
 800260c:	2301      	movs	r3, #1
 800260e:	e000      	b.n	8002612 <IsKeyDown7+0x16>
 8002610:	2300      	movs	r3, #0
 8002612:	4618      	mov	r0, r3
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr
 800261c:	40021800 	.word	0x40021800

08002620 <IsKeyDown8>:
	static uint8_t IsKeyDown8(void) {if ((GPIO_PORT_K8->IDR & GPIO_PIN_K8) == 0) return 1;else return 0;}
 8002620:	b480      	push	{r7}
 8002622:	af00      	add	r7, sp, #0
 8002624:	4b06      	ldr	r3, [pc, #24]	; (8002640 <IsKeyDown8+0x20>)
 8002626:	691b      	ldr	r3, [r3, #16]
 8002628:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800262c:	2b00      	cmp	r3, #0
 800262e:	d101      	bne.n	8002634 <IsKeyDown8+0x14>
 8002630:	2301      	movs	r3, #1
 8002632:	e000      	b.n	8002636 <IsKeyDown8+0x16>
 8002634:	2300      	movs	r3, #0
 8002636:	4618      	mov	r0, r3
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr
 8002640:	40021c00 	.word	0x40021c00

08002644 <IsKeyDown9>:
#endif
	static uint8_t IsKeyDown9(void) {if (IsKeyDown1() && IsKeyDown2()) return 1;else return 0;}
 8002644:	b580      	push	{r7, lr}
 8002646:	af00      	add	r7, sp, #0
 8002648:	f7ff ff6c 	bl	8002524 <IsKeyDown1>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d006      	beq.n	8002660 <IsKeyDown9+0x1c>
 8002652:	f7ff ff79 	bl	8002548 <IsKeyDown2>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d001      	beq.n	8002660 <IsKeyDown9+0x1c>
 800265c:	2301      	movs	r3, #1
 800265e:	e000      	b.n	8002662 <IsKeyDown9+0x1e>
 8002660:	2300      	movs	r3, #0
 8002662:	4618      	mov	r0, r3
 8002664:	bd80      	pop	{r7, pc}

08002666 <IsKeyDown10>:
	static uint8_t IsKeyDown10(void) {if (IsKeyDown1() && IsKeyDown2()) return 1;else return 0;}
 8002666:	b580      	push	{r7, lr}
 8002668:	af00      	add	r7, sp, #0
 800266a:	f7ff ff5b 	bl	8002524 <IsKeyDown1>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d006      	beq.n	8002682 <IsKeyDown10+0x1c>
 8002674:	f7ff ff68 	bl	8002548 <IsKeyDown2>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d001      	beq.n	8002682 <IsKeyDown10+0x1c>
 800267e:	2301      	movs	r3, #1
 8002680:	e000      	b.n	8002684 <IsKeyDown10+0x1e>
 8002682:	2300      	movs	r3, #0
 8002684:	4618      	mov	r0, r3
 8002686:	bd80      	pop	{r7, pc}

08002688 <bsp_InitKey>:
*********************************************************************************************************
* Func name: bsp_InitKey
*********************************************************************************************************
*/
void bsp_InitKey(void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	af00      	add	r7, sp, #0
	bsp_InitKeyVar();
 800268c:	f000 f804 	bl	8002698 <bsp_InitKeyVar>
	bsp_InitKeyHard();
 8002690:	f000 f898 	bl	80027c4 <bsp_InitKeyHard>
}
 8002694:	bf00      	nop
 8002696:	bd80      	pop	{r7, pc}

08002698 <bsp_InitKeyVar>:
*********************************************************************************************************
*	Func name: bsp_InitKeyVar
*********************************************************************************************************
*/
static void bsp_InitKeyVar(void)
{
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
	uint8_t i;

	/* ¶Ô°´¼üFIFO¶ÁÐ´Ö¸ÕëÇåÁã */
	s_tKey.Read = 0;
 800269e:	4b3d      	ldr	r3, [pc, #244]	; (8002794 <bsp_InitKeyVar+0xfc>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	729a      	strb	r2, [r3, #10]
	s_tKey.Write = 0;
 80026a4:	4b3b      	ldr	r3, [pc, #236]	; (8002794 <bsp_InitKeyVar+0xfc>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	72da      	strb	r2, [r3, #11]
	s_tKey.Read2 = 0;
 80026aa:	4b3a      	ldr	r3, [pc, #232]	; (8002794 <bsp_InitKeyVar+0xfc>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	731a      	strb	r2, [r3, #12]

	/* ¸øÃ¿¸ö°´¼ü½á¹¹Ìå³ÉÔ±±äÁ¿¸³Ò»×éÈ±Ê¡Öµ */
	for (i = 0; i < KEY_COUNT; i++)
 80026b0:	2300      	movs	r3, #0
 80026b2:	71fb      	strb	r3, [r7, #7]
 80026b4:	e025      	b.n	8002702 <bsp_InitKeyVar+0x6a>
	{
		s_tBtn[i].LongTime = KEY_LONG_TIME;			/* ³¤°´Ê±¼ä 0 ±íÊ¾²»¼ì²â³¤°´¼üÊÂ¼þ */
 80026b6:	79fb      	ldrb	r3, [r7, #7]
 80026b8:	4a37      	ldr	r2, [pc, #220]	; (8002798 <bsp_InitKeyVar+0x100>)
 80026ba:	011b      	lsls	r3, r3, #4
 80026bc:	4413      	add	r3, r2
 80026be:	3308      	adds	r3, #8
 80026c0:	2264      	movs	r2, #100	; 0x64
 80026c2:	801a      	strh	r2, [r3, #0]
		s_tBtn[i].Count = KEY_FILTER_TIME / 2;		/* ¼ÆÊýÆ÷ÉèÖÃÎªÂË²¨Ê±¼äµÄÒ»°ë */
 80026c4:	79fb      	ldrb	r3, [r7, #7]
 80026c6:	4a34      	ldr	r2, [pc, #208]	; (8002798 <bsp_InitKeyVar+0x100>)
 80026c8:	011b      	lsls	r3, r3, #4
 80026ca:	4413      	add	r3, r2
 80026cc:	3304      	adds	r3, #4
 80026ce:	2202      	movs	r2, #2
 80026d0:	701a      	strb	r2, [r3, #0]
		s_tBtn[i].State = 0;							/* °´¼üÈ±Ê¡×´Ì¬£¬0ÎªÎ´°´ÏÂ */
 80026d2:	79fb      	ldrb	r3, [r7, #7]
 80026d4:	4a30      	ldr	r2, [pc, #192]	; (8002798 <bsp_InitKeyVar+0x100>)
 80026d6:	011b      	lsls	r3, r3, #4
 80026d8:	4413      	add	r3, r2
 80026da:	330a      	adds	r3, #10
 80026dc:	2200      	movs	r2, #0
 80026de:	701a      	strb	r2, [r3, #0]
		//s_tBtn[i].KeyCodeDown = 3 * i + 1;				/* °´¼ü°´ÏÂµÄ¼üÖµ´úÂë */
		//s_tBtn[i].KeyCodeUp   = 3 * i + 2;				/* °´¼üµ¯ÆðµÄ¼üÖµ´úÂë */
		//s_tBtn[i].KeyCodeLong = 3 * i + 3;				/* °´¼ü±»³ÖÐø°´ÏÂµÄ¼üÖµ´úÂë */
		s_tBtn[i].RepeatSpeed = 0;						/* °´¼üÁ¬·¢µÄËÙ¶È£¬0±íÊ¾²»Ö§³ÖÁ¬·¢ */
 80026e0:	79fb      	ldrb	r3, [r7, #7]
 80026e2:	4a2d      	ldr	r2, [pc, #180]	; (8002798 <bsp_InitKeyVar+0x100>)
 80026e4:	011b      	lsls	r3, r3, #4
 80026e6:	4413      	add	r3, r2
 80026e8:	330b      	adds	r3, #11
 80026ea:	2200      	movs	r2, #0
 80026ec:	701a      	strb	r2, [r3, #0]
		s_tBtn[i].RepeatCount = 0;						/* Á¬·¢¼ÆÊýÆ÷ */
 80026ee:	79fb      	ldrb	r3, [r7, #7]
 80026f0:	4a29      	ldr	r2, [pc, #164]	; (8002798 <bsp_InitKeyVar+0x100>)
 80026f2:	011b      	lsls	r3, r3, #4
 80026f4:	4413      	add	r3, r2
 80026f6:	330c      	adds	r3, #12
 80026f8:	2200      	movs	r2, #0
 80026fa:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < KEY_COUNT; i++)
 80026fc:	79fb      	ldrb	r3, [r7, #7]
 80026fe:	3301      	adds	r3, #1
 8002700:	71fb      	strb	r3, [r7, #7]
 8002702:	79fb      	ldrb	r3, [r7, #7]
 8002704:	2b09      	cmp	r3, #9
 8002706:	d9d6      	bls.n	80026b6 <bsp_InitKeyVar+0x1e>
	}
	/* Èç¹ûÐèÒªµ¥¶À¸ü¸ÄÄ³¸ö°´¼üµÄ²ÎÊý£¬¿ÉÒÔÔÚ´Ëµ¥¶ÀÖØÐÂ¸³Öµ */
	/* ±ÈÈç£¬ÎÒÃÇÏ£Íû°´¼ü1°´ÏÂ³¬¹ý1Ãëºó£¬×Ô¶¯ÖØ·¢ÏàÍ¬¼üÖµ */
	s_tBtn[KID_JOY_U].LongTime = 100;
 8002708:	4b23      	ldr	r3, [pc, #140]	; (8002798 <bsp_InitKeyVar+0x100>)
 800270a:	2264      	movs	r2, #100	; 0x64
 800270c:	871a      	strh	r2, [r3, #56]	; 0x38
	s_tBtn[KID_JOY_U].RepeatSpeed = 5;	/* Ã¿¸ô50ms×Ô¶¯·¢ËÍ¼üÖµ */
 800270e:	4b22      	ldr	r3, [pc, #136]	; (8002798 <bsp_InitKeyVar+0x100>)
 8002710:	2205      	movs	r2, #5
 8002712:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b

	s_tBtn[KID_JOY_D].LongTime = 100;
 8002716:	4b20      	ldr	r3, [pc, #128]	; (8002798 <bsp_InitKeyVar+0x100>)
 8002718:	2264      	movs	r2, #100	; 0x64
 800271a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
	s_tBtn[KID_JOY_D].RepeatSpeed = 5;	/* Ã¿¸ô50ms×Ô¶¯·¢ËÍ¼üÖµ */
 800271e:	4b1e      	ldr	r3, [pc, #120]	; (8002798 <bsp_InitKeyVar+0x100>)
 8002720:	2205      	movs	r2, #5
 8002722:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b

	s_tBtn[KID_JOY_L].LongTime = 100;
 8002726:	4b1c      	ldr	r3, [pc, #112]	; (8002798 <bsp_InitKeyVar+0x100>)
 8002728:	2264      	movs	r2, #100	; 0x64
 800272a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
	s_tBtn[KID_JOY_L].RepeatSpeed = 5;	/* Ã¿¸ô50ms×Ô¶¯·¢ËÍ¼üÖµ */
 800272e:	4b1a      	ldr	r3, [pc, #104]	; (8002798 <bsp_InitKeyVar+0x100>)
 8002730:	2205      	movs	r2, #5
 8002732:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b

	s_tBtn[KID_JOY_R].LongTime = 100;
 8002736:	4b18      	ldr	r3, [pc, #96]	; (8002798 <bsp_InitKeyVar+0x100>)
 8002738:	2264      	movs	r2, #100	; 0x64
 800273a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
	s_tBtn[KID_JOY_R].RepeatSpeed = 5;	/* Ã¿¸ô50ms×Ô¶¯·¢ËÍ¼üÖµ */
 800273e:	4b16      	ldr	r3, [pc, #88]	; (8002798 <bsp_InitKeyVar+0x100>)
 8002740:	2205      	movs	r2, #5
 8002742:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b

	/* ÅÐ¶Ï°´¼ü°´ÏÂµÄº¯Êý */
	s_tBtn[0].IsKeyDownFunc = IsKeyDown1;
 8002746:	4b14      	ldr	r3, [pc, #80]	; (8002798 <bsp_InitKeyVar+0x100>)
 8002748:	4a14      	ldr	r2, [pc, #80]	; (800279c <bsp_InitKeyVar+0x104>)
 800274a:	601a      	str	r2, [r3, #0]
	s_tBtn[1].IsKeyDownFunc = IsKeyDown2;
 800274c:	4b12      	ldr	r3, [pc, #72]	; (8002798 <bsp_InitKeyVar+0x100>)
 800274e:	4a14      	ldr	r2, [pc, #80]	; (80027a0 <bsp_InitKeyVar+0x108>)
 8002750:	611a      	str	r2, [r3, #16]
	s_tBtn[2].IsKeyDownFunc = IsKeyDown3;
 8002752:	4b11      	ldr	r3, [pc, #68]	; (8002798 <bsp_InitKeyVar+0x100>)
 8002754:	4a13      	ldr	r2, [pc, #76]	; (80027a4 <bsp_InitKeyVar+0x10c>)
 8002756:	621a      	str	r2, [r3, #32]
	s_tBtn[3].IsKeyDownFunc = IsKeyDown4;
 8002758:	4b0f      	ldr	r3, [pc, #60]	; (8002798 <bsp_InitKeyVar+0x100>)
 800275a:	4a13      	ldr	r2, [pc, #76]	; (80027a8 <bsp_InitKeyVar+0x110>)
 800275c:	631a      	str	r2, [r3, #48]	; 0x30
	s_tBtn[4].IsKeyDownFunc = IsKeyDown5;
 800275e:	4b0e      	ldr	r3, [pc, #56]	; (8002798 <bsp_InitKeyVar+0x100>)
 8002760:	4a12      	ldr	r2, [pc, #72]	; (80027ac <bsp_InitKeyVar+0x114>)
 8002762:	641a      	str	r2, [r3, #64]	; 0x40
	s_tBtn[5].IsKeyDownFunc = IsKeyDown6;
 8002764:	4b0c      	ldr	r3, [pc, #48]	; (8002798 <bsp_InitKeyVar+0x100>)
 8002766:	4a12      	ldr	r2, [pc, #72]	; (80027b0 <bsp_InitKeyVar+0x118>)
 8002768:	651a      	str	r2, [r3, #80]	; 0x50
	s_tBtn[6].IsKeyDownFunc = IsKeyDown7;
 800276a:	4b0b      	ldr	r3, [pc, #44]	; (8002798 <bsp_InitKeyVar+0x100>)
 800276c:	4a11      	ldr	r2, [pc, #68]	; (80027b4 <bsp_InitKeyVar+0x11c>)
 800276e:	661a      	str	r2, [r3, #96]	; 0x60
	s_tBtn[7].IsKeyDownFunc = IsKeyDown8;
 8002770:	4b09      	ldr	r3, [pc, #36]	; (8002798 <bsp_InitKeyVar+0x100>)
 8002772:	4a11      	ldr	r2, [pc, #68]	; (80027b8 <bsp_InitKeyVar+0x120>)
 8002774:	671a      	str	r2, [r3, #112]	; 0x70

	/* ×éºÏ¼ü */
	s_tBtn[8].IsKeyDownFunc = IsKeyDown9;
 8002776:	4b08      	ldr	r3, [pc, #32]	; (8002798 <bsp_InitKeyVar+0x100>)
 8002778:	4a10      	ldr	r2, [pc, #64]	; (80027bc <bsp_InitKeyVar+0x124>)
 800277a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	s_tBtn[9].IsKeyDownFunc = IsKeyDown10;
 800277e:	4b06      	ldr	r3, [pc, #24]	; (8002798 <bsp_InitKeyVar+0x100>)
 8002780:	4a0f      	ldr	r2, [pc, #60]	; (80027c0 <bsp_InitKeyVar+0x128>)
 8002782:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
}
 8002786:	bf00      	nop
 8002788:	370c      	adds	r7, #12
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr
 8002792:	bf00      	nop
 8002794:	20000118 	.word	0x20000118
 8002798:	20000078 	.word	0x20000078
 800279c:	08002525 	.word	0x08002525
 80027a0:	08002549 	.word	0x08002549
 80027a4:	0800256d 	.word	0x0800256d
 80027a8:	08002591 	.word	0x08002591
 80027ac:	080025b5 	.word	0x080025b5
 80027b0:	080025d9 	.word	0x080025d9
 80027b4:	080025fd 	.word	0x080025fd
 80027b8:	08002621 	.word	0x08002621
 80027bc:	08002645 	.word	0x08002645
 80027c0:	08002667 	.word	0x08002667

080027c4 <bsp_InitKeyHard>:
*********************************************************************************************************
* Func name: bsp_InitKeyHard
*********************************************************************************************************
*/
static void bsp_InitKeyHard(void)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b08a      	sub	sp, #40	; 0x28
 80027c8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	// #define RCC_ALL_KEY 	(RCC_AHB1Periph_GPIOC | RCC_AHB1Periph_GPIOF | RCC_AHB1Periph_GPIOH | RCC_AHB1Periph_GPIOI | RCC_AHB1Periph_GPIOG)
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80027ca:	2300      	movs	r3, #0
 80027cc:	613b      	str	r3, [r7, #16]
 80027ce:	4b49      	ldr	r3, [pc, #292]	; (80028f4 <bsp_InitKeyHard+0x130>)
 80027d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d2:	4a48      	ldr	r2, [pc, #288]	; (80028f4 <bsp_InitKeyHard+0x130>)
 80027d4:	f043 0304 	orr.w	r3, r3, #4
 80027d8:	6313      	str	r3, [r2, #48]	; 0x30
 80027da:	4b46      	ldr	r3, [pc, #280]	; (80028f4 <bsp_InitKeyHard+0x130>)
 80027dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027de:	f003 0304 	and.w	r3, r3, #4
 80027e2:	613b      	str	r3, [r7, #16]
 80027e4:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 80027e6:	2300      	movs	r3, #0
 80027e8:	60fb      	str	r3, [r7, #12]
 80027ea:	4b42      	ldr	r3, [pc, #264]	; (80028f4 <bsp_InitKeyHard+0x130>)
 80027ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ee:	4a41      	ldr	r2, [pc, #260]	; (80028f4 <bsp_InitKeyHard+0x130>)
 80027f0:	f043 0320 	orr.w	r3, r3, #32
 80027f4:	6313      	str	r3, [r2, #48]	; 0x30
 80027f6:	4b3f      	ldr	r3, [pc, #252]	; (80028f4 <bsp_InitKeyHard+0x130>)
 80027f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fa:	f003 0320 	and.w	r3, r3, #32
 80027fe:	60fb      	str	r3, [r7, #12]
 8002800:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8002802:	2300      	movs	r3, #0
 8002804:	60bb      	str	r3, [r7, #8]
 8002806:	4b3b      	ldr	r3, [pc, #236]	; (80028f4 <bsp_InitKeyHard+0x130>)
 8002808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280a:	4a3a      	ldr	r2, [pc, #232]	; (80028f4 <bsp_InitKeyHard+0x130>)
 800280c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002810:	6313      	str	r3, [r2, #48]	; 0x30
 8002812:	4b38      	ldr	r3, [pc, #224]	; (80028f4 <bsp_InitKeyHard+0x130>)
 8002814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002816:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800281a:	60bb      	str	r3, [r7, #8]
 800281c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOI_CLK_ENABLE();
 800281e:	2300      	movs	r3, #0
 8002820:	607b      	str	r3, [r7, #4]
 8002822:	4b34      	ldr	r3, [pc, #208]	; (80028f4 <bsp_InitKeyHard+0x130>)
 8002824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002826:	4a33      	ldr	r2, [pc, #204]	; (80028f4 <bsp_InitKeyHard+0x130>)
 8002828:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800282c:	6313      	str	r3, [r2, #48]	; 0x30
 800282e:	4b31      	ldr	r3, [pc, #196]	; (80028f4 <bsp_InitKeyHard+0x130>)
 8002830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002832:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002836:	607b      	str	r3, [r7, #4]
 8002838:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 800283a:	2300      	movs	r3, #0
 800283c:	603b      	str	r3, [r7, #0]
 800283e:	4b2d      	ldr	r3, [pc, #180]	; (80028f4 <bsp_InitKeyHard+0x130>)
 8002840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002842:	4a2c      	ldr	r2, [pc, #176]	; (80028f4 <bsp_InitKeyHard+0x130>)
 8002844:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002848:	6313      	str	r3, [r2, #48]	; 0x30
 800284a:	4b2a      	ldr	r3, [pc, #168]	; (80028f4 <bsp_InitKeyHard+0x130>)
 800284c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002852:	603b      	str	r3, [r7, #0]
 8002854:	683b      	ldr	r3, [r7, #0]


	GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8002856:	2300      	movs	r3, #0
 8002858:	61bb      	str	r3, [r7, #24]
	GPIO_InitStructure.Pull = GPIO_NOPULL;
 800285a:	2300      	movs	r3, #0
 800285c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 800285e:	2302      	movs	r3, #2
 8002860:	623b      	str	r3, [r7, #32]
	GPIO_InitStructure.Pin = GPIO_PIN_K1;
 8002862:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002866:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_PORT_K1, &GPIO_InitStructure);
 8002868:	f107 0314 	add.w	r3, r7, #20
 800286c:	4619      	mov	r1, r3
 800286e:	4822      	ldr	r0, [pc, #136]	; (80028f8 <bsp_InitKeyHard+0x134>)
 8002870:	f001 fbc0 	bl	8003ff4 <HAL_GPIO_Init>

	GPIO_InitStructure.Pin = GPIO_PIN_K2;
 8002874:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002878:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_PORT_K2, &GPIO_InitStructure);
 800287a:	f107 0314 	add.w	r3, r7, #20
 800287e:	4619      	mov	r1, r3
 8002880:	481e      	ldr	r0, [pc, #120]	; (80028fc <bsp_InitKeyHard+0x138>)
 8002882:	f001 fbb7 	bl	8003ff4 <HAL_GPIO_Init>

	GPIO_InitStructure.Pin = GPIO_PIN_K3;
 8002886:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800288a:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_PORT_K3, &GPIO_InitStructure);
 800288c:	f107 0314 	add.w	r3, r7, #20
 8002890:	4619      	mov	r1, r3
 8002892:	4819      	ldr	r0, [pc, #100]	; (80028f8 <bsp_InitKeyHard+0x134>)
 8002894:	f001 fbae 	bl	8003ff4 <HAL_GPIO_Init>

	GPIO_InitStructure.Pin = GPIO_PIN_K4;
 8002898:	2304      	movs	r3, #4
 800289a:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_PORT_K4, &GPIO_InitStructure);
 800289c:	f107 0314 	add.w	r3, r7, #20
 80028a0:	4619      	mov	r1, r3
 80028a2:	4817      	ldr	r0, [pc, #92]	; (8002900 <bsp_InitKeyHard+0x13c>)
 80028a4:	f001 fba6 	bl	8003ff4 <HAL_GPIO_Init>

	GPIO_InitStructure.Pin = GPIO_PIN_K5;
 80028a8:	2308      	movs	r3, #8
 80028aa:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_PORT_K5, &GPIO_InitStructure);
 80028ac:	f107 0314 	add.w	r3, r7, #20
 80028b0:	4619      	mov	r1, r3
 80028b2:	4813      	ldr	r0, [pc, #76]	; (8002900 <bsp_InitKeyHard+0x13c>)
 80028b4:	f001 fb9e 	bl	8003ff4 <HAL_GPIO_Init>

	GPIO_InitStructure.Pin = GPIO_PIN_K6;
 80028b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80028bc:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_PORT_K6, &GPIO_InitStructure);
 80028be:	f107 0314 	add.w	r3, r7, #20
 80028c2:	4619      	mov	r1, r3
 80028c4:	480f      	ldr	r0, [pc, #60]	; (8002904 <bsp_InitKeyHard+0x140>)
 80028c6:	f001 fb95 	bl	8003ff4 <HAL_GPIO_Init>

	GPIO_InitStructure.Pin = GPIO_PIN_K7;
 80028ca:	2380      	movs	r3, #128	; 0x80
 80028cc:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_PORT_K7, &GPIO_InitStructure);
 80028ce:	f107 0314 	add.w	r3, r7, #20
 80028d2:	4619      	mov	r1, r3
 80028d4:	480c      	ldr	r0, [pc, #48]	; (8002908 <bsp_InitKeyHard+0x144>)
 80028d6:	f001 fb8d 	bl	8003ff4 <HAL_GPIO_Init>

	GPIO_InitStructure.Pin = GPIO_PIN_K8;
 80028da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80028de:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_PORT_K8, &GPIO_InitStructure);
 80028e0:	f107 0314 	add.w	r3, r7, #20
 80028e4:	4619      	mov	r1, r3
 80028e6:	4806      	ldr	r0, [pc, #24]	; (8002900 <bsp_InitKeyHard+0x13c>)
 80028e8:	f001 fb84 	bl	8003ff4 <HAL_GPIO_Init>
}
 80028ec:	bf00      	nop
 80028ee:	3728      	adds	r7, #40	; 0x28
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	40023800 	.word	0x40023800
 80028f8:	40022000 	.word	0x40022000
 80028fc:	40020800 	.word	0x40020800
 8002900:	40021c00 	.word	0x40021c00
 8002904:	40021400 	.word	0x40021400
 8002908:	40021800 	.word	0x40021800

0800290c <bsp_GetKey2>:
*********************************************************************************************************
*	Func name: bsp_GetKey2
*********************************************************************************************************
*/
uint8_t bsp_GetKey2(void)
{
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
	uint8_t ret;

	if (s_tKey.Read2 == s_tKey.Write)
 8002912:	4b11      	ldr	r3, [pc, #68]	; (8002958 <bsp_GetKey2+0x4c>)
 8002914:	7b1a      	ldrb	r2, [r3, #12]
 8002916:	4b10      	ldr	r3, [pc, #64]	; (8002958 <bsp_GetKey2+0x4c>)
 8002918:	7adb      	ldrb	r3, [r3, #11]
 800291a:	429a      	cmp	r2, r3
 800291c:	d101      	bne.n	8002922 <bsp_GetKey2+0x16>
	{
		return KEY_NONE;
 800291e:	2300      	movs	r3, #0
 8002920:	e013      	b.n	800294a <bsp_GetKey2+0x3e>
	}
	else
	{
		ret = s_tKey.Buf[s_tKey.Read2];
 8002922:	4b0d      	ldr	r3, [pc, #52]	; (8002958 <bsp_GetKey2+0x4c>)
 8002924:	7b1b      	ldrb	r3, [r3, #12]
 8002926:	461a      	mov	r2, r3
 8002928:	4b0b      	ldr	r3, [pc, #44]	; (8002958 <bsp_GetKey2+0x4c>)
 800292a:	5c9b      	ldrb	r3, [r3, r2]
 800292c:	71fb      	strb	r3, [r7, #7]

		if (++s_tKey.Read2 >= KEY_FIFO_SIZE)
 800292e:	4b0a      	ldr	r3, [pc, #40]	; (8002958 <bsp_GetKey2+0x4c>)
 8002930:	7b1b      	ldrb	r3, [r3, #12]
 8002932:	3301      	adds	r3, #1
 8002934:	b2da      	uxtb	r2, r3
 8002936:	4b08      	ldr	r3, [pc, #32]	; (8002958 <bsp_GetKey2+0x4c>)
 8002938:	731a      	strb	r2, [r3, #12]
 800293a:	4b07      	ldr	r3, [pc, #28]	; (8002958 <bsp_GetKey2+0x4c>)
 800293c:	7b1b      	ldrb	r3, [r3, #12]
 800293e:	2b09      	cmp	r3, #9
 8002940:	d902      	bls.n	8002948 <bsp_GetKey2+0x3c>
		{
			s_tKey.Read2 = 0;
 8002942:	4b05      	ldr	r3, [pc, #20]	; (8002958 <bsp_GetKey2+0x4c>)
 8002944:	2200      	movs	r2, #0
 8002946:	731a      	strb	r2, [r3, #12]
		}
		return ret;
 8002948:	79fb      	ldrb	r3, [r7, #7]
	}
}
 800294a:	4618      	mov	r0, r3
 800294c:	370c      	adds	r7, #12
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr
 8002956:	bf00      	nop
 8002958:	20000118 	.word	0x20000118

0800295c <bsp_GetKey>:
*********************************************************************************************************
*	Func name: bsp_GetKey
*********************************************************************************************************
*/
uint8_t bsp_GetKey(void)
{
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
	uint8_t ret;

	if (s_tKey.Read == s_tKey.Write)
 8002962:	4b11      	ldr	r3, [pc, #68]	; (80029a8 <bsp_GetKey+0x4c>)
 8002964:	7a9a      	ldrb	r2, [r3, #10]
 8002966:	4b10      	ldr	r3, [pc, #64]	; (80029a8 <bsp_GetKey+0x4c>)
 8002968:	7adb      	ldrb	r3, [r3, #11]
 800296a:	429a      	cmp	r2, r3
 800296c:	d101      	bne.n	8002972 <bsp_GetKey+0x16>
	{
		return KEY_NONE;
 800296e:	2300      	movs	r3, #0
 8002970:	e013      	b.n	800299a <bsp_GetKey+0x3e>
	}
	else
	{
		ret = s_tKey.Buf[s_tKey.Read];
 8002972:	4b0d      	ldr	r3, [pc, #52]	; (80029a8 <bsp_GetKey+0x4c>)
 8002974:	7a9b      	ldrb	r3, [r3, #10]
 8002976:	461a      	mov	r2, r3
 8002978:	4b0b      	ldr	r3, [pc, #44]	; (80029a8 <bsp_GetKey+0x4c>)
 800297a:	5c9b      	ldrb	r3, [r3, r2]
 800297c:	71fb      	strb	r3, [r7, #7]

		if (++s_tKey.Read >= KEY_FIFO_SIZE)
 800297e:	4b0a      	ldr	r3, [pc, #40]	; (80029a8 <bsp_GetKey+0x4c>)
 8002980:	7a9b      	ldrb	r3, [r3, #10]
 8002982:	3301      	adds	r3, #1
 8002984:	b2da      	uxtb	r2, r3
 8002986:	4b08      	ldr	r3, [pc, #32]	; (80029a8 <bsp_GetKey+0x4c>)
 8002988:	729a      	strb	r2, [r3, #10]
 800298a:	4b07      	ldr	r3, [pc, #28]	; (80029a8 <bsp_GetKey+0x4c>)
 800298c:	7a9b      	ldrb	r3, [r3, #10]
 800298e:	2b09      	cmp	r3, #9
 8002990:	d902      	bls.n	8002998 <bsp_GetKey+0x3c>
		{
			s_tKey.Read = 0;
 8002992:	4b05      	ldr	r3, [pc, #20]	; (80029a8 <bsp_GetKey+0x4c>)
 8002994:	2200      	movs	r2, #0
 8002996:	729a      	strb	r2, [r3, #10]
		}
		return ret;
 8002998:	79fb      	ldrb	r3, [r7, #7]
	}
}
 800299a:	4618      	mov	r0, r3
 800299c:	370c      	adds	r7, #12
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr
 80029a6:	bf00      	nop
 80029a8:	20000118 	.word	0x20000118

080029ac <bsp_InitLed>:
*********************************************************************************************************
*	Func name: bsp_InitLed
*********************************************************************************************************
*/
void bsp_InitLed(void)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b08a      	sub	sp, #40	; 0x28
 80029b0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;
	// #define RCC_ALL_LED 	(RCC_AHB1Periph_GPIOC | RCC_AHB1Periph_GPIOF | RCC_AHB1Periph_GPIOI)
	__HAL_RCC_GPIOI_CLK_ENABLE();
 80029b2:	2300      	movs	r3, #0
 80029b4:	613b      	str	r3, [r7, #16]
 80029b6:	4b40      	ldr	r3, [pc, #256]	; (8002ab8 <bsp_InitLed+0x10c>)
 80029b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ba:	4a3f      	ldr	r2, [pc, #252]	; (8002ab8 <bsp_InitLed+0x10c>)
 80029bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029c0:	6313      	str	r3, [r2, #48]	; 0x30
 80029c2:	4b3d      	ldr	r3, [pc, #244]	; (8002ab8 <bsp_InitLed+0x10c>)
 80029c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ca:	613b      	str	r3, [r7, #16]
 80029cc:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80029ce:	2300      	movs	r3, #0
 80029d0:	60fb      	str	r3, [r7, #12]
 80029d2:	4b39      	ldr	r3, [pc, #228]	; (8002ab8 <bsp_InitLed+0x10c>)
 80029d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d6:	4a38      	ldr	r2, [pc, #224]	; (8002ab8 <bsp_InitLed+0x10c>)
 80029d8:	f043 0304 	orr.w	r3, r3, #4
 80029dc:	6313      	str	r3, [r2, #48]	; 0x30
 80029de:	4b36      	ldr	r3, [pc, #216]	; (8002ab8 <bsp_InitLed+0x10c>)
 80029e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e2:	f003 0304 	and.w	r3, r3, #4
 80029e6:	60fb      	str	r3, [r7, #12]
 80029e8:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 80029ea:	2300      	movs	r3, #0
 80029ec:	60bb      	str	r3, [r7, #8]
 80029ee:	4b32      	ldr	r3, [pc, #200]	; (8002ab8 <bsp_InitLed+0x10c>)
 80029f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f2:	4a31      	ldr	r2, [pc, #196]	; (8002ab8 <bsp_InitLed+0x10c>)
 80029f4:	f043 0320 	orr.w	r3, r3, #32
 80029f8:	6313      	str	r3, [r2, #48]	; 0x30
 80029fa:	4b2f      	ldr	r3, [pc, #188]	; (8002ab8 <bsp_InitLed+0x10c>)
 80029fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fe:	f003 0320 	and.w	r3, r3, #32
 8002a02:	60bb      	str	r3, [r7, #8]
 8002a04:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8002a06:	2300      	movs	r3, #0
 8002a08:	607b      	str	r3, [r7, #4]
 8002a0a:	4b2b      	ldr	r3, [pc, #172]	; (8002ab8 <bsp_InitLed+0x10c>)
 8002a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0e:	4a2a      	ldr	r2, [pc, #168]	; (8002ab8 <bsp_InitLed+0x10c>)
 8002a10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a14:	6313      	str	r3, [r2, #48]	; 0x30
 8002a16:	4b28      	ldr	r3, [pc, #160]	; (8002ab8 <bsp_InitLed+0x10c>)
 8002a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a1e:	607b      	str	r3, [r7, #4]
 8002a20:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002a22:	2300      	movs	r3, #0
 8002a24:	603b      	str	r3, [r7, #0]
 8002a26:	4b24      	ldr	r3, [pc, #144]	; (8002ab8 <bsp_InitLed+0x10c>)
 8002a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a2a:	4a23      	ldr	r2, [pc, #140]	; (8002ab8 <bsp_InitLed+0x10c>)
 8002a2c:	f043 0301 	orr.w	r3, r3, #1
 8002a30:	6313      	str	r3, [r2, #48]	; 0x30
 8002a32:	4b21      	ldr	r3, [pc, #132]	; (8002ab8 <bsp_InitLed+0x10c>)
 8002a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a36:	f003 0301 	and.w	r3, r3, #1
 8002a3a:	603b      	str	r3, [r7, #0]
 8002a3c:	683b      	ldr	r3, [r7, #0]

	bsp_LedOff(1);
 8002a3e:	2001      	movs	r0, #1
 8002a40:	f000 f87a 	bl	8002b38 <bsp_LedOff>
	bsp_LedOff(2);
 8002a44:	2002      	movs	r0, #2
 8002a46:	f000 f877 	bl	8002b38 <bsp_LedOff>
	bsp_LedOff(3);
 8002a4a:	2003      	movs	r0, #3
 8002a4c:	f000 f874 	bl	8002b38 <bsp_LedOff>
	bsp_LedOff(4);
 8002a50:	2004      	movs	r0, #4
 8002a52:	f000 f871 	bl	8002b38 <bsp_LedOff>

	GPIO_InitStructure.Pin = GPIO_PIN_LED1;
 8002a56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a5a:	617b      	str	r3, [r7, #20]
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStructure.Pull = GPIO_NOPULL;
 8002a60:	2300      	movs	r3, #0
 8002a62:	61fb      	str	r3, [r7, #28]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a64:	2302      	movs	r3, #2
 8002a66:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOI, &GPIO_InitStructure);
 8002a68:	f107 0314 	add.w	r3, r7, #20
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	4813      	ldr	r0, [pc, #76]	; (8002abc <bsp_InitLed+0x110>)
 8002a70:	f001 fac0 	bl	8003ff4 <HAL_GPIO_Init>

	GPIO_InitStructure.Pin = GPIO_PIN_LED2|GPIO_PIN_LED3;
 8002a74:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002a78:	617b      	str	r3, [r7, #20]
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStructure.Pull = GPIO_NOPULL;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	61fb      	str	r3, [r7, #28]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a82:	2302      	movs	r3, #2
 8002a84:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8002a86:	f107 0314 	add.w	r3, r7, #20
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	480c      	ldr	r0, [pc, #48]	; (8002ac0 <bsp_InitLed+0x114>)
 8002a8e:	f001 fab1 	bl	8003ff4 <HAL_GPIO_Init>

	GPIO_InitStructure.Pin = GPIO_PIN_LED4;
 8002a92:	2304      	movs	r3, #4
 8002a94:	617b      	str	r3, [r7, #20]
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8002a96:	2301      	movs	r3, #1
 8002a98:	61bb      	str	r3, [r7, #24]
	GPIO_InitStructure.Pull = GPIO_NOPULL;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a9e:	2302      	movs	r3, #2
 8002aa0:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8002aa2:	f107 0314 	add.w	r3, r7, #20
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	4806      	ldr	r0, [pc, #24]	; (8002ac4 <bsp_InitLed+0x118>)
 8002aaa:	f001 faa3 	bl	8003ff4 <HAL_GPIO_Init>
}
 8002aae:	bf00      	nop
 8002ab0:	3728      	adds	r7, #40	; 0x28
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	40023800 	.word	0x40023800
 8002abc:	40022000 	.word	0x40022000
 8002ac0:	40021400 	.word	0x40021400
 8002ac4:	40020800 	.word	0x40020800

08002ac8 <bsp_LedOn>:
*********************************************************************************************************
*	Func name: bsp_LedOn
*********************************************************************************************************
*/
void bsp_LedOn(uint8_t _no)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b082      	sub	sp, #8
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	4603      	mov	r3, r0
 8002ad0:	71fb      	strb	r3, [r7, #7]
	_no--;
 8002ad2:	79fb      	ldrb	r3, [r7, #7]
 8002ad4:	3b01      	subs	r3, #1
 8002ad6:	71fb      	strb	r3, [r7, #7]

	if (_no == 0)
 8002ad8:	79fb      	ldrb	r3, [r7, #7]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d106      	bne.n	8002aec <bsp_LedOn+0x24>
	{
		HAL_GPIO_WritePin(GPIOI, GPIO_PIN_LED1, GPIO_PIN_RESET);
 8002ade:	2200      	movs	r2, #0
 8002ae0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002ae4:	4811      	ldr	r0, [pc, #68]	; (8002b2c <bsp_LedOn+0x64>)
 8002ae6:	f001 fc39 	bl	800435c <HAL_GPIO_WritePin>
	}
	else if (_no == 3)
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_LED4, GPIO_PIN_RESET);
	}
}
 8002aea:	e01a      	b.n	8002b22 <bsp_LedOn+0x5a>
	else if (_no == 1)
 8002aec:	79fb      	ldrb	r3, [r7, #7]
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d105      	bne.n	8002afe <bsp_LedOn+0x36>
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_LED2, GPIO_PIN_RESET);
 8002af2:	2200      	movs	r2, #0
 8002af4:	2180      	movs	r1, #128	; 0x80
 8002af6:	480e      	ldr	r0, [pc, #56]	; (8002b30 <bsp_LedOn+0x68>)
 8002af8:	f001 fc30 	bl	800435c <HAL_GPIO_WritePin>
}
 8002afc:	e011      	b.n	8002b22 <bsp_LedOn+0x5a>
	else if (_no == 2)
 8002afe:	79fb      	ldrb	r3, [r7, #7]
 8002b00:	2b02      	cmp	r3, #2
 8002b02:	d106      	bne.n	8002b12 <bsp_LedOn+0x4a>
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_LED3, GPIO_PIN_RESET);
 8002b04:	2200      	movs	r2, #0
 8002b06:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002b0a:	4809      	ldr	r0, [pc, #36]	; (8002b30 <bsp_LedOn+0x68>)
 8002b0c:	f001 fc26 	bl	800435c <HAL_GPIO_WritePin>
}
 8002b10:	e007      	b.n	8002b22 <bsp_LedOn+0x5a>
	else if (_no == 3)
 8002b12:	79fb      	ldrb	r3, [r7, #7]
 8002b14:	2b03      	cmp	r3, #3
 8002b16:	d104      	bne.n	8002b22 <bsp_LedOn+0x5a>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_LED4, GPIO_PIN_RESET);
 8002b18:	2200      	movs	r2, #0
 8002b1a:	2104      	movs	r1, #4
 8002b1c:	4805      	ldr	r0, [pc, #20]	; (8002b34 <bsp_LedOn+0x6c>)
 8002b1e:	f001 fc1d 	bl	800435c <HAL_GPIO_WritePin>
}
 8002b22:	bf00      	nop
 8002b24:	3708      	adds	r7, #8
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	40022000 	.word	0x40022000
 8002b30:	40021400 	.word	0x40021400
 8002b34:	40020800 	.word	0x40020800

08002b38 <bsp_LedOff>:
*********************************************************************************************************
*	Func name: bsp_LedOff
*********************************************************************************************************
*/
void bsp_LedOff(uint8_t _no)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b082      	sub	sp, #8
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	4603      	mov	r3, r0
 8002b40:	71fb      	strb	r3, [r7, #7]
	_no--;
 8002b42:	79fb      	ldrb	r3, [r7, #7]
 8002b44:	3b01      	subs	r3, #1
 8002b46:	71fb      	strb	r3, [r7, #7]

	if (_no == 0)
 8002b48:	79fb      	ldrb	r3, [r7, #7]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d106      	bne.n	8002b5c <bsp_LedOff+0x24>
	{
		HAL_GPIO_WritePin(GPIOI, GPIO_PIN_LED1, GPIO_PIN_SET);
 8002b4e:	2201      	movs	r2, #1
 8002b50:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002b54:	4811      	ldr	r0, [pc, #68]	; (8002b9c <bsp_LedOff+0x64>)
 8002b56:	f001 fc01 	bl	800435c <HAL_GPIO_WritePin>
	}
	else if (_no == 3)
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_LED4, GPIO_PIN_SET);
	}
}
 8002b5a:	e01a      	b.n	8002b92 <bsp_LedOff+0x5a>
	else if (_no == 1)
 8002b5c:	79fb      	ldrb	r3, [r7, #7]
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d105      	bne.n	8002b6e <bsp_LedOff+0x36>
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_LED2, GPIO_PIN_SET);
 8002b62:	2201      	movs	r2, #1
 8002b64:	2180      	movs	r1, #128	; 0x80
 8002b66:	480e      	ldr	r0, [pc, #56]	; (8002ba0 <bsp_LedOff+0x68>)
 8002b68:	f001 fbf8 	bl	800435c <HAL_GPIO_WritePin>
}
 8002b6c:	e011      	b.n	8002b92 <bsp_LedOff+0x5a>
	else if (_no == 2)
 8002b6e:	79fb      	ldrb	r3, [r7, #7]
 8002b70:	2b02      	cmp	r3, #2
 8002b72:	d106      	bne.n	8002b82 <bsp_LedOff+0x4a>
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_LED3, GPIO_PIN_SET);
 8002b74:	2201      	movs	r2, #1
 8002b76:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002b7a:	4809      	ldr	r0, [pc, #36]	; (8002ba0 <bsp_LedOff+0x68>)
 8002b7c:	f001 fbee 	bl	800435c <HAL_GPIO_WritePin>
}
 8002b80:	e007      	b.n	8002b92 <bsp_LedOff+0x5a>
	else if (_no == 3)
 8002b82:	79fb      	ldrb	r3, [r7, #7]
 8002b84:	2b03      	cmp	r3, #3
 8002b86:	d104      	bne.n	8002b92 <bsp_LedOff+0x5a>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_LED4, GPIO_PIN_SET);
 8002b88:	2201      	movs	r2, #1
 8002b8a:	2104      	movs	r1, #4
 8002b8c:	4805      	ldr	r0, [pc, #20]	; (8002ba4 <bsp_LedOff+0x6c>)
 8002b8e:	f001 fbe5 	bl	800435c <HAL_GPIO_WritePin>
}
 8002b92:	bf00      	nop
 8002b94:	3708      	adds	r7, #8
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	40022000 	.word	0x40022000
 8002ba0:	40021400 	.word	0x40021400
 8002ba4:	40020800 	.word	0x40020800

08002ba8 <RA8875_WriteCmd>:
*********************************************************************************************************
*	Func name: RA8875_WriteCmd
*********************************************************************************************************
*/
void RA8875_WriteCmd(uint8_t _ucRegAddr)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b083      	sub	sp, #12
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	4603      	mov	r3, r0
 8002bb0:	71fb      	strb	r3, [r7, #7]
	SPI_ShiftByte(_ucRegAddr);
	RA8875_CS_1();
#endif

#ifdef RA_HARD_8080_16			/* 8080Ó²¼þ×ÜÏß */
	RA8875_REG = _ucRegAddr;	/* ÉèÖÃ¼Ä´æÆ÷µØÖ· */
 8002bb2:	4b05      	ldr	r3, [pc, #20]	; (8002bc8 <RA8875_WriteCmd+0x20>)
 8002bb4:	79fa      	ldrb	r2, [r7, #7]
 8002bb6:	b292      	uxth	r2, r2
 8002bb8:	801a      	strh	r2, [r3, #0]
#endif
}
 8002bba:	bf00      	nop
 8002bbc:	370c      	adds	r7, #12
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr
 8002bc6:	bf00      	nop
 8002bc8:	6c080000 	.word	0x6c080000

08002bcc <RA8875_ReadData>:
*********************************************************************************************************
*	Func name: RA8875_ReadData
*********************************************************************************************************
*/
uint8_t RA8875_ReadData(void)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b083      	sub	sp, #12
 8002bd0:	af00      	add	r7, sp, #0
#endif

#ifdef RA_HARD_8080_16			/* 8080Ó²¼þ×ÜÏß */
	uint8_t value;

	value = RA8875_RAM;		/* ¶ÁÈ¡¼Ä´æÆ÷Öµ */
 8002bd2:	f04f 43d8 	mov.w	r3, #1811939328	; 0x6c000000
 8002bd6:	881b      	ldrh	r3, [r3, #0]
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	71fb      	strb	r3, [r7, #7]

	return value;
 8002bdc:	79fb      	ldrb	r3, [r7, #7]
#endif
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	370c      	adds	r7, #12
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr

08002bea <RA8875_WriteData>:
*********************************************************************************************************
*	Func name: RA8875_WriteData
*********************************************************************************************************
*/
void RA8875_WriteData(uint8_t _ucRegValue)
{
 8002bea:	b480      	push	{r7}
 8002bec:	b083      	sub	sp, #12
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	71fb      	strb	r3, [r7, #7]
	SPI_ShiftByte(_ucRegValue);
	RA8875_CS_1();
#endif

#ifdef RA_HARD_8080_16			/* 8080Ó²¼þ×ÜÏß */
	RA8875_RAM = _ucRegValue;	/* ÉèÖÃ¼Ä´æÆ÷µØÖ· */
 8002bf4:	f04f 43d8 	mov.w	r3, #1811939328	; 0x6c000000
 8002bf8:	79fa      	ldrb	r2, [r7, #7]
 8002bfa:	b292      	uxth	r2, r2
 8002bfc:	801a      	strh	r2, [r3, #0]
#endif
}
 8002bfe:	bf00      	nop
 8002c00:	370c      	adds	r7, #12
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr
	...

08002c0c <RA8875_ReadStatus>:
*********************************************************************************************************
*	Func name: RA8875_ReadStatus
*********************************************************************************************************
*/
uint8_t RA8875_ReadStatus(void)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
#endif

#ifdef RA_HARD_8080_16			/* 8080Ó²¼þ×ÜÏß */
	uint8_t value;

	value = RA8875_REG;
 8002c12:	4b05      	ldr	r3, [pc, #20]	; (8002c28 <RA8875_ReadStatus+0x1c>)
 8002c14:	881b      	ldrh	r3, [r3, #0]
 8002c16:	b29b      	uxth	r3, r3
 8002c18:	71fb      	strb	r3, [r7, #7]

	return value;
 8002c1a:	79fb      	ldrb	r3, [r7, #7]
#endif
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	370c      	adds	r7, #12
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr
 8002c28:	6c080000 	.word	0x6c080000

08002c2c <RA8875_Delaly1us>:
*********************************************************************************************************
*	Func name: RA8875_Delaly1us
*********************************************************************************************************
*/
void RA8875_Delaly1us(void)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b083      	sub	sp, #12
 8002c30:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < 10; i++);
 8002c32:	2300      	movs	r3, #0
 8002c34:	71fb      	strb	r3, [r7, #7]
 8002c36:	e002      	b.n	8002c3e <RA8875_Delaly1us+0x12>
 8002c38:	79fb      	ldrb	r3, [r7, #7]
 8002c3a:	3301      	adds	r3, #1
 8002c3c:	71fb      	strb	r3, [r7, #7]
 8002c3e:	79fb      	ldrb	r3, [r7, #7]
 8002c40:	2b09      	cmp	r3, #9
 8002c42:	d9f9      	bls.n	8002c38 <RA8875_Delaly1us+0xc>
}
 8002c44:	bf00      	nop
 8002c46:	bf00      	nop
 8002c48:	370c      	adds	r7, #12
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr

08002c52 <RA8875_Delaly1ms>:
*********************************************************************************************************
*	Func name: RA8875_Delaly1ms
*********************************************************************************************************
*/
void RA8875_Delaly1ms(void)
{
 8002c52:	b480      	push	{r7}
 8002c54:	b083      	sub	sp, #12
 8002c56:	af00      	add	r7, sp, #0
	uint16_t i;
	for (i = 0; i < 5000; i++);
 8002c58:	2300      	movs	r3, #0
 8002c5a:	80fb      	strh	r3, [r7, #6]
 8002c5c:	e002      	b.n	8002c64 <RA8875_Delaly1ms+0x12>
 8002c5e:	88fb      	ldrh	r3, [r7, #6]
 8002c60:	3301      	adds	r3, #1
 8002c62:	80fb      	strh	r3, [r7, #6]
 8002c64:	88fb      	ldrh	r3, [r7, #6]
 8002c66:	f241 3287 	movw	r2, #4999	; 0x1387
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d9f7      	bls.n	8002c5e <RA8875_Delaly1ms+0xc>
}
 8002c6e:	bf00      	nop
 8002c70:	bf00      	nop
 8002c72:	370c      	adds	r7, #12
 8002c74:	46bd      	mov	sp, r7
 8002c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7a:	4770      	bx	lr

08002c7c <LCD_InitHard>:
*********************************************************************************************************
*	Func name: LCD_InitHard
*********************************************************************************************************
*/
void LCD_InitHard(void)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0
	uint16_t id;

	LCD_CtrlLinesConfig();
 8002c82:	f000 f83f 	bl	8002d04 <LCD_CtrlLinesConfig>

	LCD_FSMCConfig();
 8002c86:	f000 f8b5 	bl	8002df4 <LCD_FSMCConfig>

	HAL_Delay(20);
 8002c8a:	2014      	movs	r0, #20
 8002c8c:	f001 f87c 	bl	8003d88 <HAL_Delay>

	id = SPFD5420_ReadID();
 8002c90:	f7ff f93c 	bl	8001f0c <SPFD5420_ReadID>
 8002c94:	4603      	mov	r3, r0
 8002c96:	80fb      	strh	r3, [r7, #6]
	if ((id == 0x5420) || (id ==  0xB509) || (id == 0x5520))
 8002c98:	88fb      	ldrh	r3, [r7, #6]
 8002c9a:	f245 4220 	movw	r2, #21536	; 0x5420
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d01f      	beq.n	8002ce2 <LCD_InitHard+0x66>
 8002ca2:	88fb      	ldrh	r3, [r7, #6]
 8002ca4:	f24b 5209 	movw	r2, #46345	; 0xb509
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d01a      	beq.n	8002ce2 <LCD_InitHard+0x66>
 8002cac:	88fb      	ldrh	r3, [r7, #6]
 8002cae:	f245 5220 	movw	r2, #21792	; 0x5520
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d015      	beq.n	8002ce2 <LCD_InitHard+0x66>
	{
		//SPFD5420_InitHard();
	}
	else
	{
		if (RA8875_ReadID() == 0x75)
 8002cb6:	f7fe fd76 	bl	80017a6 <RA8875_ReadID>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b75      	cmp	r3, #117	; 0x75
 8002cbe:	d105      	bne.n	8002ccc <LCD_InitHard+0x50>
		{
			//UART1_Transmit_String("LCD Controller is RA8875 or compatible\r\n");
			g_ChipID = IC_8875;
 8002cc0:	4b0d      	ldr	r3, [pc, #52]	; (8002cf8 <LCD_InitHard+0x7c>)
 8002cc2:	2275      	movs	r2, #117	; 0x75
 8002cc4:	801a      	strh	r2, [r3, #0]
			RA8875_InitHard();
 8002cc6:	f7fe fda3 	bl	8001810 <RA8875_InitHard>
 8002cca:	e00a      	b.n	8002ce2 <LCD_InitHard+0x66>
		}
		else
		{
			g_ChipID = IC_4001;
 8002ccc:	4b0a      	ldr	r3, [pc, #40]	; (8002cf8 <LCD_InitHard+0x7c>)
 8002cce:	f244 0201 	movw	r2, #16385	; 0x4001
 8002cd2:	801a      	strh	r2, [r3, #0]
			g_LcdHeight = LCD_30_HEIGHT;
 8002cd4:	4b09      	ldr	r3, [pc, #36]	; (8002cfc <LCD_InitHard+0x80>)
 8002cd6:	22f0      	movs	r2, #240	; 0xf0
 8002cd8:	801a      	strh	r2, [r3, #0]
			g_LcdWidth = LCD_30_WIDTH;
 8002cda:	4b09      	ldr	r3, [pc, #36]	; (8002d00 <LCD_InitHard+0x84>)
 8002cdc:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002ce0:	801a      	strh	r2, [r3, #0]
		}
	}
	LCD_ClrScr(CL_BLUE);
 8002ce2:	201f      	movs	r0, #31
 8002ce4:	f000 f8d2 	bl	8002e8c <LCD_ClrScr>
	LCD_SetBackLight(BRIGHT_DEFAULT);
 8002ce8:	20c8      	movs	r0, #200	; 0xc8
 8002cea:	f000 f8e9 	bl	8002ec0 <LCD_SetBackLight>
}
 8002cee:	bf00      	nop
 8002cf0:	3708      	adds	r7, #8
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	20000008 	.word	0x20000008
 8002cfc:	2000000a 	.word	0x2000000a
 8002d00:	2000000c 	.word	0x2000000c

08002d04 <LCD_CtrlLinesConfig>:


static void LCD_CtrlLinesConfig(void)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b08a      	sub	sp, #40	; 0x28
 8002d08:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	__HAL_RCC_FSMC_CLK_ENABLE();
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	613b      	str	r3, [r7, #16]
 8002d0e:	4b35      	ldr	r3, [pc, #212]	; (8002de4 <LCD_CtrlLinesConfig+0xe0>)
 8002d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d12:	4a34      	ldr	r2, [pc, #208]	; (8002de4 <LCD_CtrlLinesConfig+0xe0>)
 8002d14:	f043 0301 	orr.w	r3, r3, #1
 8002d18:	6393      	str	r3, [r2, #56]	; 0x38
 8002d1a:	4b32      	ldr	r3, [pc, #200]	; (8002de4 <LCD_CtrlLinesConfig+0xe0>)
 8002d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d1e:	f003 0301 	and.w	r3, r3, #1
 8002d22:	613b      	str	r3, [r7, #16]
 8002d24:	693b      	ldr	r3, [r7, #16]

	__HAL_RCC_GPIOD_CLK_ENABLE();
 8002d26:	2300      	movs	r3, #0
 8002d28:	60fb      	str	r3, [r7, #12]
 8002d2a:	4b2e      	ldr	r3, [pc, #184]	; (8002de4 <LCD_CtrlLinesConfig+0xe0>)
 8002d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2e:	4a2d      	ldr	r2, [pc, #180]	; (8002de4 <LCD_CtrlLinesConfig+0xe0>)
 8002d30:	f043 0308 	orr.w	r3, r3, #8
 8002d34:	6313      	str	r3, [r2, #48]	; 0x30
 8002d36:	4b2b      	ldr	r3, [pc, #172]	; (8002de4 <LCD_CtrlLinesConfig+0xe0>)
 8002d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3a:	f003 0308 	and.w	r3, r3, #8
 8002d3e:	60fb      	str	r3, [r7, #12]
 8002d40:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8002d42:	2300      	movs	r3, #0
 8002d44:	60bb      	str	r3, [r7, #8]
 8002d46:	4b27      	ldr	r3, [pc, #156]	; (8002de4 <LCD_CtrlLinesConfig+0xe0>)
 8002d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4a:	4a26      	ldr	r2, [pc, #152]	; (8002de4 <LCD_CtrlLinesConfig+0xe0>)
 8002d4c:	f043 0310 	orr.w	r3, r3, #16
 8002d50:	6313      	str	r3, [r2, #48]	; 0x30
 8002d52:	4b24      	ldr	r3, [pc, #144]	; (8002de4 <LCD_CtrlLinesConfig+0xe0>)
 8002d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d56:	f003 0310 	and.w	r3, r3, #16
 8002d5a:	60bb      	str	r3, [r7, #8]
 8002d5c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8002d5e:	2300      	movs	r3, #0
 8002d60:	607b      	str	r3, [r7, #4]
 8002d62:	4b20      	ldr	r3, [pc, #128]	; (8002de4 <LCD_CtrlLinesConfig+0xe0>)
 8002d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d66:	4a1f      	ldr	r2, [pc, #124]	; (8002de4 <LCD_CtrlLinesConfig+0xe0>)
 8002d68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d6e:	4b1d      	ldr	r3, [pc, #116]	; (8002de4 <LCD_CtrlLinesConfig+0xe0>)
 8002d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d76:	607b      	str	r3, [r7, #4]
 8002d78:	687b      	ldr	r3, [r7, #4]

	GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 |
 8002d7a:	f24c 7333 	movw	r3, #50995	; 0xc733
 8002d7e:	617b      	str	r3, [r7, #20]
		                     GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
		                     GPIO_PIN_15;
	GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8002d80:	2302      	movs	r3, #2
 8002d82:	61bb      	str	r3, [r7, #24]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d84:	2303      	movs	r3, #3
 8002d86:	623b      	str	r3, [r7, #32]
	GPIO_InitStructure.Pull = GPIO_NOPULL;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStructure.Alternate = GPIO_AF12_FSMC;
 8002d8c:	230c      	movs	r3, #12
 8002d8e:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOD,&GPIO_InitStructure);
 8002d90:	f107 0314 	add.w	r3, r7, #20
 8002d94:	4619      	mov	r1, r3
 8002d96:	4814      	ldr	r0, [pc, #80]	; (8002de8 <LCD_CtrlLinesConfig+0xe4>)
 8002d98:	f001 f92c 	bl	8003ff4 <HAL_GPIO_Init>

	GPIO_InitStructure.Pin = GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 |
 8002d9c:	f64f 73b0 	movw	r3, #65456	; 0xffb0
 8002da0:	617b      	str	r3, [r7, #20]
		                     GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |
							 GPIO_PIN_15;
	HAL_GPIO_Init(GPIOE,&GPIO_InitStructure);
 8002da2:	f107 0314 	add.w	r3, r7, #20
 8002da6:	4619      	mov	r1, r3
 8002da8:	4810      	ldr	r0, [pc, #64]	; (8002dec <LCD_CtrlLinesConfig+0xe8>)
 8002daa:	f001 f923 	bl	8003ff4 <HAL_GPIO_Init>

	GPIO_InitStructure.Pin = GPIO_PIN_13;
 8002dae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002db2:	617b      	str	r3, [r7, #20]
	GPIO_InitStructure.Alternate = GPIO_AF12_FSMC;
 8002db4:	230c      	movs	r3, #12
 8002db6:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOD,&GPIO_InitStructure);
 8002db8:	f107 0314 	add.w	r3, r7, #20
 8002dbc:	4619      	mov	r1, r3
 8002dbe:	480a      	ldr	r0, [pc, #40]	; (8002de8 <LCD_CtrlLinesConfig+0xe4>)
 8002dc0:	f001 f918 	bl	8003ff4 <HAL_GPIO_Init>

	GPIO_InitStructure.Pin = GPIO_PIN_12;
 8002dc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002dc8:	617b      	str	r3, [r7, #20]
	GPIO_InitStructure.Alternate = GPIO_AF12_FSMC;
 8002dca:	230c      	movs	r3, #12
 8002dcc:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOG,&GPIO_InitStructure);
 8002dce:	f107 0314 	add.w	r3, r7, #20
 8002dd2:	4619      	mov	r1, r3
 8002dd4:	4806      	ldr	r0, [pc, #24]	; (8002df0 <LCD_CtrlLinesConfig+0xec>)
 8002dd6:	f001 f90d 	bl	8003ff4 <HAL_GPIO_Init>
}
 8002dda:	bf00      	nop
 8002ddc:	3728      	adds	r7, #40	; 0x28
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	40023800 	.word	0x40023800
 8002de8:	40020c00 	.word	0x40020c00
 8002dec:	40021000 	.word	0x40021000
 8002df0:	40021800 	.word	0x40021800

08002df4 <LCD_FSMCConfig>:

static void LCD_FSMCConfig(void)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b0a2      	sub	sp, #136	; 0x88
 8002df8:	af00      	add	r7, sp, #0
	//FSMC_NORSRAM_InitTypeDef  init;
	SRAM_HandleTypeDef hsram;
	FSMC_NORSRAM_TimingTypeDef  timingWrite;
	FSMC_NORSRAM_TimingTypeDef  timingRead;

	timingWrite.AddressSetupTime = 4;
 8002dfa:	2304      	movs	r3, #4
 8002dfc:	61fb      	str	r3, [r7, #28]
	timingWrite.AddressHoldTime = 0;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	623b      	str	r3, [r7, #32]
	timingWrite.DataSetupTime = 6;
 8002e02:	2306      	movs	r3, #6
 8002e04:	627b      	str	r3, [r7, #36]	; 0x24
	timingWrite.BusTurnAroundDuration = 1;
 8002e06:	2301      	movs	r3, #1
 8002e08:	62bb      	str	r3, [r7, #40]	; 0x28
	timingWrite.CLKDivision = 0;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
	timingWrite.DataLatency = 0;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	633b      	str	r3, [r7, #48]	; 0x30
	timingWrite.AccessMode = FSMC_ACCESS_MODE_A;
 8002e12:	2300      	movs	r3, #0
 8002e14:	637b      	str	r3, [r7, #52]	; 0x34

	timingRead.AddressSetupTime = 4;
 8002e16:	2304      	movs	r3, #4
 8002e18:	603b      	str	r3, [r7, #0]
	timingRead.AddressHoldTime = 0;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	607b      	str	r3, [r7, #4]
	timingRead.DataSetupTime = 8;
 8002e1e:	2308      	movs	r3, #8
 8002e20:	60bb      	str	r3, [r7, #8]
	timingRead.BusTurnAroundDuration = 0;
 8002e22:	2300      	movs	r3, #0
 8002e24:	60fb      	str	r3, [r7, #12]
	timingRead.CLKDivision = 0;
 8002e26:	2300      	movs	r3, #0
 8002e28:	613b      	str	r3, [r7, #16]
	timingRead.DataLatency = 0;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	617b      	str	r3, [r7, #20]
	timingRead.AccessMode = FSMC_ACCESS_MODE_A;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	61bb      	str	r3, [r7, #24]

	hsram.Instance = FSMC_NORSRAM_DEVICE;
 8002e32:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8002e36:	63bb      	str	r3, [r7, #56]	; 0x38
	hsram.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8002e38:	4b13      	ldr	r3, [pc, #76]	; (8002e88 <LCD_FSMCConfig+0x94>)
 8002e3a:	63fb      	str	r3, [r7, #60]	; 0x3c
	hsram.Init.NSBank = FSMC_NORSRAM_BANK4;
 8002e3c:	2306      	movs	r3, #6
 8002e3e:	643b      	str	r3, [r7, #64]	; 0x40
	hsram.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8002e40:	2300      	movs	r3, #0
 8002e42:	647b      	str	r3, [r7, #68]	; 0x44
	hsram.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8002e44:	2310      	movs	r3, #16
 8002e46:	64fb      	str	r3, [r7, #76]	; 0x4c
	hsram.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	653b      	str	r3, [r7, #80]	; 0x50
	hsram.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	66fb      	str	r3, [r7, #108]	; 0x6c
	hsram.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8002e50:	2300      	movs	r3, #0
 8002e52:	657b      	str	r3, [r7, #84]	; 0x54
	hsram.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8002e54:	2300      	movs	r3, #0
 8002e56:	65bb      	str	r3, [r7, #88]	; 0x58
	hsram.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	65fb      	str	r3, [r7, #92]	; 0x5c
	hsram.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8002e5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e60:	663b      	str	r3, [r7, #96]	; 0x60
	hsram.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8002e62:	2300      	movs	r3, #0
 8002e64:	667b      	str	r3, [r7, #100]	; 0x64
	hsram.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8002e66:	2300      	movs	r3, #0
 8002e68:	66bb      	str	r3, [r7, #104]	; 0x68
	hsram.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	673b      	str	r3, [r7, #112]	; 0x70
	//hsram.Init.ContinuousClock = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY; /* 새로운 파라미터 */

	HAL_SRAM_Init(&hsram, &timingRead, &timingWrite);
 8002e6e:	f107 021c 	add.w	r2, r7, #28
 8002e72:	4639      	mov	r1, r7
 8002e74:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f7fd ff39 	bl	8000cf0 <HAL_SRAM_Init>
}
 8002e7e:	bf00      	nop
 8002e80:	3788      	adds	r7, #136	; 0x88
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	bf00      	nop
 8002e88:	a0000104 	.word	0xa0000104

08002e8c <LCD_ClrScr>:
*********************************************************************************************************
*	Func name: LCD_ClrScr
*********************************************************************************************************
*/
void LCD_ClrScr(uint16_t _usColor)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b082      	sub	sp, #8
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	4603      	mov	r3, r0
 8002e94:	80fb      	strh	r3, [r7, #6]
	if (g_ChipID == IC_8875)	/* RA8875 ·ÖÖ§ */
 8002e96:	4b08      	ldr	r3, [pc, #32]	; (8002eb8 <LCD_ClrScr+0x2c>)
 8002e98:	881b      	ldrh	r3, [r3, #0]
 8002e9a:	2b75      	cmp	r3, #117	; 0x75
 8002e9c:	d104      	bne.n	8002ea8 <LCD_ClrScr+0x1c>
	{
		//UART1_Transmit_String("LCD Controller is RA8875 color\r\n");
		RA8875_ClrScr(_usColor);
 8002e9e:	88fb      	ldrh	r3, [r7, #6]
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f7fe fe27 	bl	8001af4 <RA8875_ClrScr>
	else	/* 5420£¬4001£¬61509 ·ÖÖ§ */
	{
		UART1_Transmit_String("LCD Controller is SFD5420 color\r\n");
		//SPFD5420_ClrScr(_usColor);
	}
}
 8002ea6:	e002      	b.n	8002eae <LCD_ClrScr+0x22>
		UART1_Transmit_String("LCD Controller is SFD5420 color\r\n");
 8002ea8:	4804      	ldr	r0, [pc, #16]	; (8002ebc <LCD_ClrScr+0x30>)
 8002eaa:	f000 fec1 	bl	8003c30 <UART1_Transmit_String>
}
 8002eae:	bf00      	nop
 8002eb0:	3708      	adds	r7, #8
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	20000008 	.word	0x20000008
 8002ebc:	08004d50 	.word	0x08004d50

08002ec0 <LCD_SetBackLight>:
*********************************************************************************************************
* 	Func name: LCD_SetBackLight
*********************************************************************************************************
*/
void LCD_SetBackLight(uint8_t _bright)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b082      	sub	sp, #8
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	71fb      	strb	r3, [r7, #7]
	s_ucBright =  _bright;	/* ±£´æ±³¹âÖµ */
 8002eca:	4a07      	ldr	r2, [pc, #28]	; (8002ee8 <LCD_SetBackLight+0x28>)
 8002ecc:	79fb      	ldrb	r3, [r7, #7]
 8002ece:	7013      	strb	r3, [r2, #0]

	if (g_ChipID == IC_8875)
 8002ed0:	4b06      	ldr	r3, [pc, #24]	; (8002eec <LCD_SetBackLight+0x2c>)
 8002ed2:	881b      	ldrh	r3, [r3, #0]
 8002ed4:	2b75      	cmp	r3, #117	; 0x75
 8002ed6:	d103      	bne.n	8002ee0 <LCD_SetBackLight+0x20>
	{
		RA8875_SetBackLight(_bright);
 8002ed8:	79fb      	ldrb	r3, [r7, #7]
 8002eda:	4618      	mov	r0, r3
 8002edc:	f7fe ff80 	bl	8001de0 <RA8875_SetBackLight>
	}
	else
	{
		//SPFD5420_SetBackLight(_bright);
	}
}
 8002ee0:	bf00      	nop
 8002ee2:	3708      	adds	r7, #8
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	20000125 	.word	0x20000125
 8002eec:	20000008 	.word	0x20000008

08002ef0 <LCD_DrawBMP>:
*********************************************************************************************************
*	Func name: LCD_DrawBMP
*********************************************************************************************************
*/
void LCD_DrawBMP(uint16_t _usX, uint16_t _usY, uint16_t _usHeight, uint16_t _usWidth, uint16_t *_ptr)
{
 8002ef0:	b590      	push	{r4, r7, lr}
 8002ef2:	b085      	sub	sp, #20
 8002ef4:	af02      	add	r7, sp, #8
 8002ef6:	4604      	mov	r4, r0
 8002ef8:	4608      	mov	r0, r1
 8002efa:	4611      	mov	r1, r2
 8002efc:	461a      	mov	r2, r3
 8002efe:	4623      	mov	r3, r4
 8002f00:	80fb      	strh	r3, [r7, #6]
 8002f02:	4603      	mov	r3, r0
 8002f04:	80bb      	strh	r3, [r7, #4]
 8002f06:	460b      	mov	r3, r1
 8002f08:	807b      	strh	r3, [r7, #2]
 8002f0a:	4613      	mov	r3, r2
 8002f0c:	803b      	strh	r3, [r7, #0]
	if (g_ChipID == IC_8875)
 8002f0e:	4b08      	ldr	r3, [pc, #32]	; (8002f30 <LCD_DrawBMP+0x40>)
 8002f10:	881b      	ldrh	r3, [r3, #0]
 8002f12:	2b75      	cmp	r3, #117	; 0x75
 8002f14:	d108      	bne.n	8002f28 <LCD_DrawBMP+0x38>
	{
		RA8875_DrawBMP(_usX, _usY, _usHeight, _usWidth, _ptr);
 8002f16:	883c      	ldrh	r4, [r7, #0]
 8002f18:	887a      	ldrh	r2, [r7, #2]
 8002f1a:	88b9      	ldrh	r1, [r7, #4]
 8002f1c:	88f8      	ldrh	r0, [r7, #6]
 8002f1e:	69bb      	ldr	r3, [r7, #24]
 8002f20:	9300      	str	r3, [sp, #0]
 8002f22:	4623      	mov	r3, r4
 8002f24:	f7fe feda 	bl	8001cdc <RA8875_DrawBMP>
	}
	else
	{
		//SPFD5420_DrawBMP(_usX, _usY, _usHeight, _usWidth, _ptr);
	}
}
 8002f28:	bf00      	nop
 8002f2a:	370c      	adds	r7, #12
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd90      	pop	{r4, r7, pc}
 8002f30:	20000008 	.word	0x20000008

08002f34 <LCD_DispStr>:
*********************************************************************************************************
*	Func name: LCD_DispStr
*********************************************************************************************************
*/
void LCD_DispStr(uint16_t _usX, uint16_t _usY, char *_ptr, FONT_T *_tFont)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b09e      	sub	sp, #120	; 0x78
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	60ba      	str	r2, [r7, #8]
 8002f3c:	607b      	str	r3, [r7, #4]
 8002f3e:	4603      	mov	r3, r0
 8002f40:	81fb      	strh	r3, [r7, #14]
 8002f42:	460b      	mov	r3, r1
 8002f44:	81bb      	strh	r3, [r7, #12]
#ifdef USE_SMALL_FONT
	const uint8_t *pHzDot;
#else
	uint32_t AddrHZK;
#endif
	if (_tFont->FontCode == FC_ST_12)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	881b      	ldrh	r3, [r3, #0]
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d10e      	bne.n	8002f6c <LCD_DispStr+0x38>
	{
		font_height = 12;
 8002f4e:	230c      	movs	r3, #12
 8002f50:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
		font_width = 12;
 8002f54:	230c      	movs	r3, #12
 8002f56:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
		font_bytes = 24;
 8002f5a:	2318      	movs	r3, #24
 8002f5c:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
		pAscDot = g_Ascii12;
 8002f60:	4b83      	ldr	r3, [pc, #524]	; (8003170 <LCD_DispStr+0x23c>)
 8002f62:	663b      	str	r3, [r7, #96]	; 0x60

		#ifdef USE_SMALL_FONT
			pHzDot = g_Hz12;
		#else
			AddrHZK = HZK12_ADDR;
 8002f64:	f04f 43c8 	mov.w	r3, #1677721600	; 0x64000000
 8002f68:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f6a:	e0f5      	b.n	8003158 <LCD_DispStr+0x224>
		#endif
		}
		else
		{
			font_height = 16;
 8002f6c:	2310      	movs	r3, #16
 8002f6e:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
			font_width = 16;
 8002f72:	2310      	movs	r3, #16
 8002f74:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
			font_bytes = 32;
 8002f78:	2320      	movs	r3, #32
 8002f7a:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
			pAscDot = g_Ascii16;
 8002f7e:	4b7d      	ldr	r3, [pc, #500]	; (8003174 <LCD_DispStr+0x240>)
 8002f80:	663b      	str	r3, [r7, #96]	; 0x60

		#ifdef USE_SMALL_FONT
			pHzDot = g_Hz16;
		#else
			AddrHZK = HZK16_ADDR;
 8002f82:	4b7d      	ldr	r3, [pc, #500]	; (8003178 <LCD_DispStr+0x244>)
 8002f84:	65fb      	str	r3, [r7, #92]	; 0x5c
		#endif
		}

		while (*_ptr != 0)
 8002f86:	e0e7      	b.n	8003158 <LCD_DispStr+0x224>
		{
			code1 = *_ptr;
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	781b      	ldrb	r3, [r3, #0]
 8002f8c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			if (code1 < 0x80)
 8002f90:	f997 305b 	ldrsb.w	r3, [r7, #91]	; 0x5b
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	db1a      	blt.n	8002fce <LCD_DispStr+0x9a>
			{
				memcpy(buf, &pAscDot[code1 * (font_bytes / 2)], (font_bytes / 2));
 8002f98:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8002f9c:	f897 2069 	ldrb.w	r2, [r7, #105]	; 0x69
 8002fa0:	0852      	lsrs	r2, r2, #1
 8002fa2:	b2d2      	uxtb	r2, r2
 8002fa4:	fb02 f303 	mul.w	r3, r2, r3
 8002fa8:	461a      	mov	r2, r3
 8002faa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002fac:	1899      	adds	r1, r3, r2
 8002fae:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 8002fb2:	085b      	lsrs	r3, r3, #1
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	f107 0310 	add.w	r3, r7, #16
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f001 fe6b 	bl	8004c98 <memcpy>
				width = font_width / 2;
 8002fc2:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8002fc6:	085b      	lsrs	r3, r3, #1
 8002fc8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8002fcc:	e056      	b.n	800307c <LCD_DispStr+0x148>
			}
			else
			{
				code2 = *++_ptr;
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	3301      	adds	r3, #1
 8002fd2:	60bb      	str	r3, [r7, #8]
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	781b      	ldrb	r3, [r3, #0]
 8002fd8:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
				if (code2 == 0)
 8002fdc:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	f000 80bf 	beq.w	8003164 <LCD_DispStr+0x230>
							break;
						}
					}
				#else	/* ÓÃÈ«×Ö¿â */
					/* ´Ë´¦ÐèÒª¸ù¾Ý×Ö¿âÎÄ¼þ´æ·ÅÎ»ÖÃ½øÐÐÐÞ¸Ä */
					if (code1 >=0xA1 && code1 <= 0xA9 && code2 >=0xA1)
 8002fe6:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8002fea:	2ba0      	cmp	r3, #160	; 0xa0
 8002fec:	d91a      	bls.n	8003024 <LCD_DispStr+0xf0>
 8002fee:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8002ff2:	2ba9      	cmp	r3, #169	; 0xa9
 8002ff4:	d816      	bhi.n	8003024 <LCD_DispStr+0xf0>
 8002ff6:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8002ffa:	2ba0      	cmp	r3, #160	; 0xa0
 8002ffc:	d912      	bls.n	8003024 <LCD_DispStr+0xf0>
					{
						address = ((code1 - 0xA1) * 94 + (code2 - 0xA1)) * font_bytes + AddrHZK;
 8002ffe:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8003002:	3ba1      	subs	r3, #161	; 0xa1
 8003004:	225e      	movs	r2, #94	; 0x5e
 8003006:	fb03 f202 	mul.w	r2, r3, r2
 800300a:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800300e:	3ba1      	subs	r3, #161	; 0xa1
 8003010:	4413      	add	r3, r2
 8003012:	f897 2069 	ldrb.w	r2, [r7, #105]	; 0x69
 8003016:	fb02 f303 	mul.w	r3, r2, r3
 800301a:	461a      	mov	r2, r3
 800301c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800301e:	4413      	add	r3, r2
 8003020:	673b      	str	r3, [r7, #112]	; 0x70
 8003022:	e01f      	b.n	8003064 <LCD_DispStr+0x130>
					}
					else if (code1 >=0xB0 && code1 <= 0xF7 && code2 >=0xA1)
 8003024:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8003028:	2baf      	cmp	r3, #175	; 0xaf
 800302a:	d91b      	bls.n	8003064 <LCD_DispStr+0x130>
 800302c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8003030:	2bf7      	cmp	r3, #247	; 0xf7
 8003032:	d817      	bhi.n	8003064 <LCD_DispStr+0x130>
 8003034:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8003038:	2ba0      	cmp	r3, #160	; 0xa0
 800303a:	d913      	bls.n	8003064 <LCD_DispStr+0x130>
					{
						address = ((code1 - 0xB0) * 94 + (code2 - 0xA1) + 846) * font_bytes + AddrHZK;
 800303c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8003040:	3bb0      	subs	r3, #176	; 0xb0
 8003042:	225e      	movs	r2, #94	; 0x5e
 8003044:	fb03 f202 	mul.w	r2, r3, r2
 8003048:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800304c:	3ba1      	subs	r3, #161	; 0xa1
 800304e:	4413      	add	r3, r2
 8003050:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8003054:	f897 2069 	ldrb.w	r2, [r7, #105]	; 0x69
 8003058:	fb02 f303 	mul.w	r3, r2, r3
 800305c:	461a      	mov	r2, r3
 800305e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003060:	4413      	add	r3, r2
 8003062:	673b      	str	r3, [r7, #112]	; 0x70
					}
					memcpy(buf, (const uint8_t *)address, font_bytes);
 8003064:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8003066:	f897 2069 	ldrb.w	r2, [r7, #105]	; 0x69
 800306a:	f107 0310 	add.w	r3, r7, #16
 800306e:	4618      	mov	r0, r3
 8003070:	f001 fe12 	bl	8004c98 <memcpy>
				#endif
					width = font_width;
 8003074:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8003078:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			}
			y = _usY;
 800307c:	89bb      	ldrh	r3, [r7, #12]
 800307e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
			/* ¿ªÊ¼Ë¢LCD */
			for (m = 0; m < font_height; m++)	/* ×Ö·û¸ß¶È */
 8003082:	2300      	movs	r3, #0
 8003084:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 8003088:	e052      	b.n	8003130 <LCD_DispStr+0x1fc>
			{
				x = _usX;
 800308a:	89fb      	ldrh	r3, [r7, #14]
 800308c:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
				for (i = 0; i < width; i++)	/* ×Ö·û¿í¶È */
 8003090:	2300      	movs	r3, #0
 8003092:	677b      	str	r3, [r7, #116]	; 0x74
 8003094:	e03d      	b.n	8003112 <LCD_DispStr+0x1de>
				{
					if ((buf[m * ((2 * width) / font_width) + i / 8] & (0x80 >> (i % 8 ))) != 0x00)
 8003096:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800309a:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 800309e:	0051      	lsls	r1, r2, #1
 80030a0:	f897 206b 	ldrb.w	r2, [r7, #107]	; 0x6b
 80030a4:	fb91 f2f2 	sdiv	r2, r1, r2
 80030a8:	fb02 f303 	mul.w	r3, r2, r3
 80030ac:	461a      	mov	r2, r3
 80030ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030b0:	08db      	lsrs	r3, r3, #3
 80030b2:	4413      	add	r3, r2
 80030b4:	3378      	adds	r3, #120	; 0x78
 80030b6:	443b      	add	r3, r7
 80030b8:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 80030bc:	4619      	mov	r1, r3
 80030be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030c0:	f003 0307 	and.w	r3, r3, #7
 80030c4:	2280      	movs	r2, #128	; 0x80
 80030c6:	fa42 f303 	asr.w	r3, r2, r3
 80030ca:	400b      	ands	r3, r1
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d009      	beq.n	80030e4 <LCD_DispStr+0x1b0>
					{
						LCD_PutPixel(x, y, _tFont->FrontColor);	/* ÉèÖÃÏñËØÑÕÉ«ÎªÎÄ×ÖÉ« */
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	885a      	ldrh	r2, [r3, #2]
 80030d4:	f8b7 1064 	ldrh.w	r1, [r7, #100]	; 0x64
 80030d8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80030dc:	4618      	mov	r0, r3
 80030de:	f000 f84d 	bl	800317c <LCD_PutPixel>
 80030e2:	e00e      	b.n	8003102 <LCD_DispStr+0x1ce>
					}
					else
					{
						if (_tFont->BackColor != CL_MASK)	/* Í¸Ã÷É« */
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	889b      	ldrh	r3, [r3, #4]
 80030e8:	f649 1299 	movw	r2, #39321	; 0x9999
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d008      	beq.n	8003102 <LCD_DispStr+0x1ce>
						{
							LCD_PutPixel(x, y, _tFont->BackColor);	/* ÉèÖÃÏñËØÑÕÉ«ÎªÎÄ×Ö±³¾°É« */
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	889a      	ldrh	r2, [r3, #4]
 80030f4:	f8b7 1064 	ldrh.w	r1, [r7, #100]	; 0x64
 80030f8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80030fc:	4618      	mov	r0, r3
 80030fe:	f000 f83d 	bl	800317c <LCD_PutPixel>
						}
					}
					x++;
 8003102:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8003106:	3301      	adds	r3, #1
 8003108:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
				for (i = 0; i < width; i++)	/* ×Ö·û¿í¶È */
 800310c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800310e:	3301      	adds	r3, #1
 8003110:	677b      	str	r3, [r7, #116]	; 0x74
 8003112:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003116:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003118:	429a      	cmp	r2, r3
 800311a:	d3bc      	bcc.n	8003096 <LCD_DispStr+0x162>
				}
				y++;
 800311c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003120:	3301      	adds	r3, #1
 8003122:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
			for (m = 0; m < font_height; m++)	/* ×Ö·û¸ß¶È */
 8003126:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800312a:	3301      	adds	r3, #1
 800312c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 8003130:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 8003134:	b29b      	uxth	r3, r3
 8003136:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800313a:	429a      	cmp	r2, r3
 800313c:	d3a5      	bcc.n	800308a <LCD_DispStr+0x156>

			if (_tFont->Space > 0)
			{
				/* Èç¹ûÎÄ×Öµ×É«°´_tFont->usBackColor£¬²¢ÇÒ×Ö¼ä¾à´óÓÚµãÕóµÄ¿í¶È£¬ÄÇÃ´ÐèÒªÔÚÎÄ×ÖÖ®¼äÌî³ä(ÔÝÊ±Î´ÊµÏÖ) */
			}
			_usX += width + _tFont->Space;	/* ÁÐµØÖ·µÝÔö */
 800313e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003142:	b29a      	uxth	r2, r3
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	88db      	ldrh	r3, [r3, #6]
 8003148:	4413      	add	r3, r2
 800314a:	b29a      	uxth	r2, r3
 800314c:	89fb      	ldrh	r3, [r7, #14]
 800314e:	4413      	add	r3, r2
 8003150:	81fb      	strh	r3, [r7, #14]
			_ptr++;			/* Ö¸ÏòÏÂÒ»¸ö×Ö·û */
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	3301      	adds	r3, #1
 8003156:	60bb      	str	r3, [r7, #8]
		while (*_ptr != 0)
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	781b      	ldrb	r3, [r3, #0]
 800315c:	2b00      	cmp	r3, #0
 800315e:	f47f af13 	bne.w	8002f88 <LCD_DispStr+0x54>
		}
}
 8003162:	e000      	b.n	8003166 <LCD_DispStr+0x232>
					break;
 8003164:	bf00      	nop
}
 8003166:	bf00      	nop
 8003168:	3778      	adds	r7, #120	; 0x78
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	08004d74 	.word	0x08004d74
 8003174:	08005368 	.word	0x08005368
 8003178:	6402c9d0 	.word	0x6402c9d0

0800317c <LCD_PutPixel>:
*********************************************************************************************************
*	Func name: LCD_PutPixel
*********************************************************************************************************
*/
void LCD_PutPixel(uint16_t _usX, uint16_t _usY, uint16_t _usColor)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b082      	sub	sp, #8
 8003180:	af00      	add	r7, sp, #0
 8003182:	4603      	mov	r3, r0
 8003184:	80fb      	strh	r3, [r7, #6]
 8003186:	460b      	mov	r3, r1
 8003188:	80bb      	strh	r3, [r7, #4]
 800318a:	4613      	mov	r3, r2
 800318c:	807b      	strh	r3, [r7, #2]
	if (g_ChipID == IC_8875)
 800318e:	4b07      	ldr	r3, [pc, #28]	; (80031ac <LCD_PutPixel+0x30>)
 8003190:	881b      	ldrh	r3, [r3, #0]
 8003192:	2b75      	cmp	r3, #117	; 0x75
 8003194:	d105      	bne.n	80031a2 <LCD_PutPixel+0x26>
	{
		RA8875_PutPixel(_usX, _usY, _usColor);
 8003196:	887a      	ldrh	r2, [r7, #2]
 8003198:	88b9      	ldrh	r1, [r7, #4]
 800319a:	88fb      	ldrh	r3, [r7, #6]
 800319c:	4618      	mov	r0, r3
 800319e:	f7fe fcd1 	bl	8001b44 <RA8875_PutPixel>
	}
	else
	{
		//SPFD5420_PutPixel(_usX, _usY, _usColor);
	}
}
 80031a2:	bf00      	nop
 80031a4:	3708      	adds	r7, #8
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	20000008 	.word	0x20000008

080031b0 <LCD_DrawIcon32>:
*********************************************************************************************************
*	Func name: LCD_DrawIcon32
*********************************************************************************************************
*/
void LCD_DrawIcon32(const ICON_T *_tIcon, FONT_T *_tFont, uint8_t _ucFocusMode)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b08a      	sub	sp, #40	; 0x28
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	60f8      	str	r0, [r7, #12]
 80031b8:	60b9      	str	r1, [r7, #8]
 80031ba:	4613      	mov	r3, r2
 80031bc:	71fb      	strb	r3, [r7, #7]
	uint16_t usOldRGB, usNewRGB;
	int16_t x, y;		/* ÓÃÓÚ¼ÇÂ¼´°¿ÚÄÚµÄÏà¶Ô×ø±ê */
	uint8_t R1,G1,B1,A;	/* ÐÂÏñËØÉ«²Ê·ÖÁ¿ */
	uint8_t R0,G0,B0;	/* ¾ÉÏñËØÉ«²Ê·ÖÁ¿ */

	p = (const uint8_t *)_tIcon->pBmp;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	68db      	ldr	r3, [r3, #12]
 80031c2:	627b      	str	r3, [r7, #36]	; 0x24
	p += 54;		/* Ö±½ÓÖ¸ÏòÍ¼ÏñÊý¾ÝÇø */
 80031c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c6:	3336      	adds	r3, #54	; 0x36
 80031c8:	627b      	str	r3, [r7, #36]	; 0x24

	/* °´ÕÕBMPÎ»Í¼´ÎÐò£¬´Ó×óÖÁÓÒ£¬´ÓÉÏÖÁÏÂÉ¨Ãè */
	for (y = _tIcon->Height - 1; y >= 0; y--)
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	88db      	ldrh	r3, [r3, #6]
 80031ce:	3b01      	subs	r3, #1
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	83fb      	strh	r3, [r7, #30]
 80031d4:	e0ff      	b.n	80033d6 <LCD_DrawIcon32+0x226>
	{
		for (x = 0; x < _tIcon->Width; x++)
 80031d6:	2300      	movs	r3, #0
 80031d8:	843b      	strh	r3, [r7, #32]
 80031da:	e0ef      	b.n	80033bc <LCD_DrawIcon32+0x20c>
		{
			B1 = *p++;
 80031dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031de:	1c5a      	adds	r2, r3, #1
 80031e0:	627a      	str	r2, [r7, #36]	; 0x24
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	767b      	strb	r3, [r7, #25]
			G1 = *p++;
 80031e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e8:	1c5a      	adds	r2, r3, #1
 80031ea:	627a      	str	r2, [r7, #36]	; 0x24
 80031ec:	781b      	ldrb	r3, [r3, #0]
 80031ee:	763b      	strb	r3, [r7, #24]
			R1 = *p++;
 80031f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f2:	1c5a      	adds	r2, r3, #1
 80031f4:	627a      	str	r2, [r7, #36]	; 0x24
 80031f6:	781b      	ldrb	r3, [r3, #0]
 80031f8:	75fb      	strb	r3, [r7, #23]
			A = *p++;	/* Alpha Öµ(Í¸Ã÷¶È)£¬0-255, 0±íÊ¾Í¸Ã÷£¬1±íÊ¾²»Í¸Ã÷, ÖÐ¼äÖµ±íÊ¾Í¸Ã÷¶È */
 80031fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031fc:	1c5a      	adds	r2, r3, #1
 80031fe:	627a      	str	r2, [r7, #36]	; 0x24
 8003200:	781b      	ldrb	r3, [r3, #0]
 8003202:	75bb      	strb	r3, [r7, #22]

			if (A == 0x00)	/* ÐèÒªÍ¸Ã÷,ÏÔÊ¾±³¾° */
 8003204:	7dbb      	ldrb	r3, [r7, #22]
 8003206:	2b00      	cmp	r3, #0
 8003208:	f000 80d2 	beq.w	80033b0 <LCD_DrawIcon32+0x200>
			{
				;	/* ²»ÓÃË¢ÐÂ±³¾° */
			}
			else if (A == 0xFF)	/* ÍêÈ«²»Í¸Ã÷£¬ ÏÔÊ¾ÐÂÏñËØ */
 800320c:	7dbb      	ldrb	r3, [r7, #22]
 800320e:	2bff      	cmp	r3, #255	; 0xff
 8003210:	d12d      	bne.n	800326e <LCD_DrawIcon32+0xbe>
			{
				usNewRGB = RGB(R1, G1, B1);
 8003212:	7dfb      	ldrb	r3, [r7, #23]
 8003214:	08db      	lsrs	r3, r3, #3
 8003216:	b2db      	uxtb	r3, r3
 8003218:	02db      	lsls	r3, r3, #11
 800321a:	b21a      	sxth	r2, r3
 800321c:	7e3b      	ldrb	r3, [r7, #24]
 800321e:	089b      	lsrs	r3, r3, #2
 8003220:	b2db      	uxtb	r3, r3
 8003222:	015b      	lsls	r3, r3, #5
 8003224:	b21b      	sxth	r3, r3
 8003226:	4313      	orrs	r3, r2
 8003228:	b21a      	sxth	r2, r3
 800322a:	7e7b      	ldrb	r3, [r7, #25]
 800322c:	08db      	lsrs	r3, r3, #3
 800322e:	b2db      	uxtb	r3, r3
 8003230:	b21b      	sxth	r3, r3
 8003232:	4313      	orrs	r3, r2
 8003234:	b21b      	sxth	r3, r3
 8003236:	847b      	strh	r3, [r7, #34]	; 0x22
				if (_ucFocusMode == 1)
 8003238:	79fb      	ldrb	r3, [r7, #7]
 800323a:	2b01      	cmp	r3, #1
 800323c:	d108      	bne.n	8003250 <LCD_DrawIcon32+0xa0>
				{
					usNewRGB = Blend565(usNewRGB, CL_YELLOW, 10);
 800323e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003240:	220a      	movs	r2, #10
 8003242:	f64f 71e0 	movw	r1, #65504	; 0xffe0
 8003246:	4618      	mov	r0, r3
 8003248:	f000 f910 	bl	800346c <Blend565>
 800324c:	4603      	mov	r3, r0
 800324e:	847b      	strh	r3, [r7, #34]	; 0x22
				}
				LCD_PutPixel(x + _tIcon->Left, y + _tIcon->Top, usNewRGB);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	885a      	ldrh	r2, [r3, #2]
 8003254:	8c3b      	ldrh	r3, [r7, #32]
 8003256:	4413      	add	r3, r2
 8003258:	b298      	uxth	r0, r3
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	889a      	ldrh	r2, [r3, #4]
 800325e:	8bfb      	ldrh	r3, [r7, #30]
 8003260:	4413      	add	r3, r2
 8003262:	b29b      	uxth	r3, r3
 8003264:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8003266:	4619      	mov	r1, r3
 8003268:	f7ff ff88 	bl	800317c <LCD_PutPixel>
 800326c:	e0a0      	b.n	80033b0 <LCD_DrawIcon32+0x200>
			}
			else 	/* °ëÍ¸Ã÷ */
			{
				/* ¼ÆËã¹«Ê½£º Êµ¼ÊÏÔÊ¾ÑÕÉ« = Ç°¾°ÑÕÉ« * Alpha / 255 + ±³¾°ÑÕÉ« * (255-Alpha) / 255 */
				usOldRGB = LCD_GetPixel(x + _tIcon->Left, y + _tIcon->Top);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	885a      	ldrh	r2, [r3, #2]
 8003272:	8c3b      	ldrh	r3, [r7, #32]
 8003274:	4413      	add	r3, r2
 8003276:	b298      	uxth	r0, r3
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	889a      	ldrh	r2, [r3, #4]
 800327c:	8bfb      	ldrh	r3, [r7, #30]
 800327e:	4413      	add	r3, r2
 8003280:	b29b      	uxth	r3, r3
 8003282:	4619      	mov	r1, r3
 8003284:	f000 f926 	bl	80034d4 <LCD_GetPixel>
 8003288:	4603      	mov	r3, r0
 800328a:	82bb      	strh	r3, [r7, #20]
				R0 = RGB565_R(usOldRGB);
 800328c:	8abb      	ldrh	r3, [r7, #20]
 800328e:	0a1b      	lsrs	r3, r3, #8
 8003290:	b29b      	uxth	r3, r3
 8003292:	b2db      	uxtb	r3, r3
 8003294:	f023 0307 	bic.w	r3, r3, #7
 8003298:	74fb      	strb	r3, [r7, #19]
				G0 = RGB565_G(usOldRGB);
 800329a:	8abb      	ldrh	r3, [r7, #20]
 800329c:	08db      	lsrs	r3, r3, #3
 800329e:	b29b      	uxth	r3, r3
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	f023 0303 	bic.w	r3, r3, #3
 80032a6:	74bb      	strb	r3, [r7, #18]
				B0 = RGB565_B(usOldRGB);
 80032a8:	8abb      	ldrh	r3, [r7, #20]
 80032aa:	00db      	lsls	r3, r3, #3
 80032ac:	747b      	strb	r3, [r7, #17]

				R1 = (R1 * A) / 255 + R0 * (255 - A) / 255;
 80032ae:	7dfb      	ldrb	r3, [r7, #23]
 80032b0:	7dba      	ldrb	r2, [r7, #22]
 80032b2:	fb02 f303 	mul.w	r3, r2, r3
 80032b6:	4a6c      	ldr	r2, [pc, #432]	; (8003468 <LCD_DrawIcon32+0x2b8>)
 80032b8:	fb82 1203 	smull	r1, r2, r2, r3
 80032bc:	441a      	add	r2, r3
 80032be:	11d2      	asrs	r2, r2, #7
 80032c0:	17db      	asrs	r3, r3, #31
 80032c2:	1ad3      	subs	r3, r2, r3
 80032c4:	b2da      	uxtb	r2, r3
 80032c6:	7cfb      	ldrb	r3, [r7, #19]
 80032c8:	7db9      	ldrb	r1, [r7, #22]
 80032ca:	f1c1 01ff 	rsb	r1, r1, #255	; 0xff
 80032ce:	fb01 f303 	mul.w	r3, r1, r3
 80032d2:	4965      	ldr	r1, [pc, #404]	; (8003468 <LCD_DrawIcon32+0x2b8>)
 80032d4:	fb81 0103 	smull	r0, r1, r1, r3
 80032d8:	4419      	add	r1, r3
 80032da:	11c9      	asrs	r1, r1, #7
 80032dc:	17db      	asrs	r3, r3, #31
 80032de:	1acb      	subs	r3, r1, r3
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	4413      	add	r3, r2
 80032e4:	75fb      	strb	r3, [r7, #23]
				G1 = (G1 * A) / 255 + G0 * (255 - A) / 255;
 80032e6:	7e3b      	ldrb	r3, [r7, #24]
 80032e8:	7dba      	ldrb	r2, [r7, #22]
 80032ea:	fb02 f303 	mul.w	r3, r2, r3
 80032ee:	4a5e      	ldr	r2, [pc, #376]	; (8003468 <LCD_DrawIcon32+0x2b8>)
 80032f0:	fb82 1203 	smull	r1, r2, r2, r3
 80032f4:	441a      	add	r2, r3
 80032f6:	11d2      	asrs	r2, r2, #7
 80032f8:	17db      	asrs	r3, r3, #31
 80032fa:	1ad3      	subs	r3, r2, r3
 80032fc:	b2da      	uxtb	r2, r3
 80032fe:	7cbb      	ldrb	r3, [r7, #18]
 8003300:	7db9      	ldrb	r1, [r7, #22]
 8003302:	f1c1 01ff 	rsb	r1, r1, #255	; 0xff
 8003306:	fb01 f303 	mul.w	r3, r1, r3
 800330a:	4957      	ldr	r1, [pc, #348]	; (8003468 <LCD_DrawIcon32+0x2b8>)
 800330c:	fb81 0103 	smull	r0, r1, r1, r3
 8003310:	4419      	add	r1, r3
 8003312:	11c9      	asrs	r1, r1, #7
 8003314:	17db      	asrs	r3, r3, #31
 8003316:	1acb      	subs	r3, r1, r3
 8003318:	b2db      	uxtb	r3, r3
 800331a:	4413      	add	r3, r2
 800331c:	763b      	strb	r3, [r7, #24]
				B1 = (B1 * A) / 255 + B0 * (255 - A) / 255;
 800331e:	7e7b      	ldrb	r3, [r7, #25]
 8003320:	7dba      	ldrb	r2, [r7, #22]
 8003322:	fb02 f303 	mul.w	r3, r2, r3
 8003326:	4a50      	ldr	r2, [pc, #320]	; (8003468 <LCD_DrawIcon32+0x2b8>)
 8003328:	fb82 1203 	smull	r1, r2, r2, r3
 800332c:	441a      	add	r2, r3
 800332e:	11d2      	asrs	r2, r2, #7
 8003330:	17db      	asrs	r3, r3, #31
 8003332:	1ad3      	subs	r3, r2, r3
 8003334:	b2da      	uxtb	r2, r3
 8003336:	7c7b      	ldrb	r3, [r7, #17]
 8003338:	7db9      	ldrb	r1, [r7, #22]
 800333a:	f1c1 01ff 	rsb	r1, r1, #255	; 0xff
 800333e:	fb01 f303 	mul.w	r3, r1, r3
 8003342:	4949      	ldr	r1, [pc, #292]	; (8003468 <LCD_DrawIcon32+0x2b8>)
 8003344:	fb81 0103 	smull	r0, r1, r1, r3
 8003348:	4419      	add	r1, r3
 800334a:	11c9      	asrs	r1, r1, #7
 800334c:	17db      	asrs	r3, r3, #31
 800334e:	1acb      	subs	r3, r1, r3
 8003350:	b2db      	uxtb	r3, r3
 8003352:	4413      	add	r3, r2
 8003354:	767b      	strb	r3, [r7, #25]
				usNewRGB = RGB(R1, G1, B1);
 8003356:	7dfb      	ldrb	r3, [r7, #23]
 8003358:	08db      	lsrs	r3, r3, #3
 800335a:	b2db      	uxtb	r3, r3
 800335c:	02db      	lsls	r3, r3, #11
 800335e:	b21a      	sxth	r2, r3
 8003360:	7e3b      	ldrb	r3, [r7, #24]
 8003362:	089b      	lsrs	r3, r3, #2
 8003364:	b2db      	uxtb	r3, r3
 8003366:	015b      	lsls	r3, r3, #5
 8003368:	b21b      	sxth	r3, r3
 800336a:	4313      	orrs	r3, r2
 800336c:	b21a      	sxth	r2, r3
 800336e:	7e7b      	ldrb	r3, [r7, #25]
 8003370:	08db      	lsrs	r3, r3, #3
 8003372:	b2db      	uxtb	r3, r3
 8003374:	b21b      	sxth	r3, r3
 8003376:	4313      	orrs	r3, r2
 8003378:	b21b      	sxth	r3, r3
 800337a:	847b      	strh	r3, [r7, #34]	; 0x22
				if (_ucFocusMode == 1)
 800337c:	79fb      	ldrb	r3, [r7, #7]
 800337e:	2b01      	cmp	r3, #1
 8003380:	d108      	bne.n	8003394 <LCD_DrawIcon32+0x1e4>
				{
					usNewRGB = Blend565(usNewRGB, CL_YELLOW, 10);
 8003382:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003384:	220a      	movs	r2, #10
 8003386:	f64f 71e0 	movw	r1, #65504	; 0xffe0
 800338a:	4618      	mov	r0, r3
 800338c:	f000 f86e 	bl	800346c <Blend565>
 8003390:	4603      	mov	r3, r0
 8003392:	847b      	strh	r3, [r7, #34]	; 0x22
				}
				LCD_PutPixel(x + _tIcon->Left, y + _tIcon->Top, usNewRGB);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	885a      	ldrh	r2, [r3, #2]
 8003398:	8c3b      	ldrh	r3, [r7, #32]
 800339a:	4413      	add	r3, r2
 800339c:	b298      	uxth	r0, r3
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	889a      	ldrh	r2, [r3, #4]
 80033a2:	8bfb      	ldrh	r3, [r7, #30]
 80033a4:	4413      	add	r3, r2
 80033a6:	b29b      	uxth	r3, r3
 80033a8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80033aa:	4619      	mov	r1, r3
 80033ac:	f7ff fee6 	bl	800317c <LCD_PutPixel>
		for (x = 0; x < _tIcon->Width; x++)
 80033b0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80033b4:	b29b      	uxth	r3, r3
 80033b6:	3301      	adds	r3, #1
 80033b8:	b29b      	uxth	r3, r3
 80033ba:	843b      	strh	r3, [r7, #32]
 80033bc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80033c0:	68fa      	ldr	r2, [r7, #12]
 80033c2:	8912      	ldrh	r2, [r2, #8]
 80033c4:	4293      	cmp	r3, r2
 80033c6:	f6ff af09 	blt.w	80031dc <LCD_DrawIcon32+0x2c>
	for (y = _tIcon->Height - 1; y >= 0; y--)
 80033ca:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80033ce:	b29b      	uxth	r3, r3
 80033d0:	3b01      	subs	r3, #1
 80033d2:	b29b      	uxth	r3, r3
 80033d4:	83fb      	strh	r3, [r7, #30]
 80033d6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	f6bf aefb 	bge.w	80031d6 <LCD_DrawIcon32+0x26>
	/* »æÖÆÍ¼±êÏÂµÄÎÄ×Ö */
	{
		uint16_t len;
		uint16_t width;

		len = strlen(_tIcon->Text);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	3310      	adds	r3, #16
 80033e4:	4618      	mov	r0, r3
 80033e6:	f7fc feef 	bl	80001c8 <strlen>
 80033ea:	4603      	mov	r3, r0
 80033ec:	837b      	strh	r3, [r7, #26]

		if  (len == 0)
 80033ee:	8b7b      	ldrh	r3, [r7, #26]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d035      	beq.n	8003460 <LCD_DrawIcon32+0x2b0>
		{
			return;	/* Èç¹ûÍ¼±êÎÄ±¾³¤¶ÈÎª0£¬Ôò²»ÏÔÊ¾ */
		}

		/* ¼ÆËãÎÄ±¾µÄ×Ü¿í¶È */
		if (_tFont->FontCode == FC_ST_12)		/* 12µãÕó */
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	881b      	ldrh	r3, [r3, #0]
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d10a      	bne.n	8003412 <LCD_DrawIcon32+0x262>
		{
			width = 6 * (len + _tFont->Space);
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	88da      	ldrh	r2, [r3, #6]
 8003400:	8b7b      	ldrh	r3, [r7, #26]
 8003402:	4413      	add	r3, r2
 8003404:	b29b      	uxth	r3, r3
 8003406:	461a      	mov	r2, r3
 8003408:	0052      	lsls	r2, r2, #1
 800340a:	4413      	add	r3, r2
 800340c:	005b      	lsls	r3, r3, #1
 800340e:	83bb      	strh	r3, [r7, #28]
 8003410:	e006      	b.n	8003420 <LCD_DrawIcon32+0x270>
		}
		else	/* FC_ST_16 */
		{
			width = 8 * (len + _tFont->Space);
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	88da      	ldrh	r2, [r3, #6]
 8003416:	8b7b      	ldrh	r3, [r7, #26]
 8003418:	4413      	add	r3, r2
 800341a:	b29b      	uxth	r3, r3
 800341c:	00db      	lsls	r3, r3, #3
 800341e:	83bb      	strh	r3, [r7, #28]
		}


		/* Ë®Æ½¾ÓÖÐ */
		x = (_tIcon->Left + _tIcon->Width / 2) - width / 2;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	885a      	ldrh	r2, [r3, #2]
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	891b      	ldrh	r3, [r3, #8]
 8003428:	085b      	lsrs	r3, r3, #1
 800342a:	b29b      	uxth	r3, r3
 800342c:	4413      	add	r3, r2
 800342e:	b29a      	uxth	r2, r3
 8003430:	8bbb      	ldrh	r3, [r7, #28]
 8003432:	085b      	lsrs	r3, r3, #1
 8003434:	b29b      	uxth	r3, r3
 8003436:	1ad3      	subs	r3, r2, r3
 8003438:	b29b      	uxth	r3, r3
 800343a:	843b      	strh	r3, [r7, #32]
		y = _tIcon->Top + _tIcon->Height + 2;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	889a      	ldrh	r2, [r3, #4]
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	88db      	ldrh	r3, [r3, #6]
 8003444:	4413      	add	r3, r2
 8003446:	b29b      	uxth	r3, r3
 8003448:	3302      	adds	r3, #2
 800344a:	b29b      	uxth	r3, r3
 800344c:	83fb      	strh	r3, [r7, #30]
		LCD_DispStr(x, y, (char *)_tIcon->Text, _tFont);
 800344e:	8c38      	ldrh	r0, [r7, #32]
 8003450:	8bf9      	ldrh	r1, [r7, #30]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	f103 0210 	add.w	r2, r3, #16
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	f7ff fd6b 	bl	8002f34 <LCD_DispStr>
 800345e:	e000      	b.n	8003462 <LCD_DrawIcon32+0x2b2>
			return;	/* Èç¹ûÍ¼±êÎÄ±¾³¤¶ÈÎª0£¬Ôò²»ÏÔÊ¾ */
 8003460:	bf00      	nop
	}
}
 8003462:	3728      	adds	r7, #40	; 0x28
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}
 8003468:	80808081 	.word	0x80808081

0800346c <Blend565>:


uint16_t Blend565(uint16_t src, uint16_t dst, uint8_t alpha)
{
 800346c:	b480      	push	{r7}
 800346e:	b085      	sub	sp, #20
 8003470:	af00      	add	r7, sp, #0
 8003472:	4603      	mov	r3, r0
 8003474:	80fb      	strh	r3, [r7, #6]
 8003476:	460b      	mov	r3, r1
 8003478:	80bb      	strh	r3, [r7, #4]
 800347a:	4613      	mov	r3, r2
 800347c:	70fb      	strb	r3, [r7, #3]
	uint32_t src2;
	uint32_t dst2;

	src2 = ((src << 16) |src) & 0x07E0F81F;
 800347e:	88fb      	ldrh	r3, [r7, #6]
 8003480:	041a      	lsls	r2, r3, #16
 8003482:	88fb      	ldrh	r3, [r7, #6]
 8003484:	4313      	orrs	r3, r2
 8003486:	461a      	mov	r2, r3
 8003488:	4b11      	ldr	r3, [pc, #68]	; (80034d0 <Blend565+0x64>)
 800348a:	4013      	ands	r3, r2
 800348c:	60fb      	str	r3, [r7, #12]
	dst2 = ((dst << 16) | dst) & 0x07E0F81F;
 800348e:	88bb      	ldrh	r3, [r7, #4]
 8003490:	041a      	lsls	r2, r3, #16
 8003492:	88bb      	ldrh	r3, [r7, #4]
 8003494:	4313      	orrs	r3, r2
 8003496:	461a      	mov	r2, r3
 8003498:	4b0d      	ldr	r3, [pc, #52]	; (80034d0 <Blend565+0x64>)
 800349a:	4013      	ands	r3, r2
 800349c:	60bb      	str	r3, [r7, #8]
	dst2 = ((((dst2 - src2) * alpha) >> 5) + src2) & 0x07E0F81F;
 800349e:	68ba      	ldr	r2, [r7, #8]
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	1ad3      	subs	r3, r2, r3
 80034a4:	78fa      	ldrb	r2, [r7, #3]
 80034a6:	fb02 f303 	mul.w	r3, r2, r3
 80034aa:	095a      	lsrs	r2, r3, #5
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	441a      	add	r2, r3
 80034b0:	4b07      	ldr	r3, [pc, #28]	; (80034d0 <Blend565+0x64>)
 80034b2:	4013      	ands	r3, r2
 80034b4:	60bb      	str	r3, [r7, #8]
	return (dst2 >> 16) | dst2;
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	0c1b      	lsrs	r3, r3, #16
 80034ba:	b29a      	uxth	r2, r3
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	b29b      	uxth	r3, r3
 80034c0:	4313      	orrs	r3, r2
 80034c2:	b29b      	uxth	r3, r3
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3714      	adds	r7, #20
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr
 80034d0:	07e0f81f 	.word	0x07e0f81f

080034d4 <LCD_GetPixel>:
*********************************************************************************************************
*	Func name: LCD_GetPixel
*********************************************************************************************************
*/
uint16_t LCD_GetPixel(uint16_t _usX, uint16_t _usY)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b084      	sub	sp, #16
 80034d8:	af00      	add	r7, sp, #0
 80034da:	4603      	mov	r3, r0
 80034dc:	460a      	mov	r2, r1
 80034de:	80fb      	strh	r3, [r7, #6]
 80034e0:	4613      	mov	r3, r2
 80034e2:	80bb      	strh	r3, [r7, #4]
	uint16_t usRGB;
	if (g_ChipID == IC_8875)
 80034e4:	4b08      	ldr	r3, [pc, #32]	; (8003508 <LCD_GetPixel+0x34>)
 80034e6:	881b      	ldrh	r3, [r3, #0]
 80034e8:	2b75      	cmp	r3, #117	; 0x75
 80034ea:	d107      	bne.n	80034fc <LCD_GetPixel+0x28>
	{
		usRGB = RA8875_GetPixel(_usX, _usY);
 80034ec:	88ba      	ldrh	r2, [r7, #4]
 80034ee:	88fb      	ldrh	r3, [r7, #6]
 80034f0:	4611      	mov	r1, r2
 80034f2:	4618      	mov	r0, r3
 80034f4:	f7fe fc96 	bl	8001e24 <RA8875_GetPixel>
 80034f8:	4603      	mov	r3, r0
 80034fa:	81fb      	strh	r3, [r7, #14]
	}
	else
	{
		//usRGB = SPFD5420_GetPixel(_usX, _usY);
	}
	return usRGB;
 80034fc:	89fb      	ldrh	r3, [r7, #14]
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3710      	adds	r7, #16
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	20000008 	.word	0x20000008

0800350c <LCD_GetHeight>:
*********************************************************************************************************
*	Func name: LCD_GetHeight
*********************************************************************************************************
*/
uint16_t LCD_GetHeight(void)
{
 800350c:	b480      	push	{r7}
 800350e:	af00      	add	r7, sp, #0
	return g_LcdHeight;
 8003510:	4b03      	ldr	r3, [pc, #12]	; (8003520 <LCD_GetHeight+0x14>)
 8003512:	881b      	ldrh	r3, [r3, #0]
}
 8003514:	4618      	mov	r0, r3
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr
 800351e:	bf00      	nop
 8003520:	2000000a 	.word	0x2000000a

08003524 <LCD_GetWidth>:
*********************************************************************************************************
*	Func name: LCD_GetWidth
*********************************************************************************************************
*/
uint16_t LCD_GetWidth(void)
{
 8003524:	b480      	push	{r7}
 8003526:	af00      	add	r7, sp, #0
	return g_LcdWidth;
 8003528:	4b03      	ldr	r3, [pc, #12]	; (8003538 <LCD_GetWidth+0x14>)
 800352a:	881b      	ldrh	r3, [r3, #0]
}
 800352c:	4618      	mov	r0, r3
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr
 8003536:	bf00      	nop
 8003538:	2000000c 	.word	0x2000000c

0800353c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800353c:	b480      	push	{r7}
 800353e:	b083      	sub	sp, #12
 8003540:	af00      	add	r7, sp, #0
 8003542:	4603      	mov	r3, r0
 8003544:	6039      	str	r1, [r7, #0]
 8003546:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003548:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800354c:	2b00      	cmp	r3, #0
 800354e:	db0a      	blt.n	8003566 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	b2da      	uxtb	r2, r3
 8003554:	490c      	ldr	r1, [pc, #48]	; (8003588 <__NVIC_SetPriority+0x4c>)
 8003556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800355a:	0112      	lsls	r2, r2, #4
 800355c:	b2d2      	uxtb	r2, r2
 800355e:	440b      	add	r3, r1
 8003560:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003564:	e00a      	b.n	800357c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	b2da      	uxtb	r2, r3
 800356a:	4908      	ldr	r1, [pc, #32]	; (800358c <__NVIC_SetPriority+0x50>)
 800356c:	79fb      	ldrb	r3, [r7, #7]
 800356e:	f003 030f 	and.w	r3, r3, #15
 8003572:	3b04      	subs	r3, #4
 8003574:	0112      	lsls	r2, r2, #4
 8003576:	b2d2      	uxtb	r2, r2
 8003578:	440b      	add	r3, r1
 800357a:	761a      	strb	r2, [r3, #24]
}
 800357c:	bf00      	nop
 800357e:	370c      	adds	r7, #12
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr
 8003588:	e000e100 	.word	0xe000e100
 800358c:	e000ed00 	.word	0xe000ed00

08003590 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b082      	sub	sp, #8
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	3b01      	subs	r3, #1
 800359c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80035a0:	d301      	bcc.n	80035a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80035a2:	2301      	movs	r3, #1
 80035a4:	e00f      	b.n	80035c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80035a6:	4a0a      	ldr	r2, [pc, #40]	; (80035d0 <SysTick_Config+0x40>)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	3b01      	subs	r3, #1
 80035ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80035ae:	210f      	movs	r1, #15
 80035b0:	f04f 30ff 	mov.w	r0, #4294967295
 80035b4:	f7ff ffc2 	bl	800353c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80035b8:	4b05      	ldr	r3, [pc, #20]	; (80035d0 <SysTick_Config+0x40>)
 80035ba:	2200      	movs	r2, #0
 80035bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035be:	4b04      	ldr	r3, [pc, #16]	; (80035d0 <SysTick_Config+0x40>)
 80035c0:	2207      	movs	r2, #7
 80035c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80035c4:	2300      	movs	r3, #0
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3708      	adds	r7, #8
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop
 80035d0:	e000e010 	.word	0xe000e010

080035d4 <bsp_InitTimer>:
*********************************************************************************************************
*	Func name: bsp_InitTimer
*********************************************************************************************************
*/
void bsp_InitTimer(void)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b082      	sub	sp, #8
 80035d8:	af00      	add	r7, sp, #0
	uint8_t i;

	for (i = 0; i < TMR_COUNT; i++)
 80035da:	2300      	movs	r3, #0
 80035dc:	71fb      	strb	r3, [r7, #7]
 80035de:	e029      	b.n	8003634 <bsp_InitTimer+0x60>
	{
		s_tTmr[i].Count = 0;
 80035e0:	79fa      	ldrb	r2, [r7, #7]
 80035e2:	491c      	ldr	r1, [pc, #112]	; (8003654 <bsp_InitTimer+0x80>)
 80035e4:	4613      	mov	r3, r2
 80035e6:	005b      	lsls	r3, r3, #1
 80035e8:	4413      	add	r3, r2
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	440b      	add	r3, r1
 80035ee:	3304      	adds	r3, #4
 80035f0:	2200      	movs	r2, #0
 80035f2:	601a      	str	r2, [r3, #0]
		s_tTmr[i].PreLoad = 0;
 80035f4:	79fa      	ldrb	r2, [r7, #7]
 80035f6:	4917      	ldr	r1, [pc, #92]	; (8003654 <bsp_InitTimer+0x80>)
 80035f8:	4613      	mov	r3, r2
 80035fa:	005b      	lsls	r3, r3, #1
 80035fc:	4413      	add	r3, r2
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	440b      	add	r3, r1
 8003602:	3308      	adds	r3, #8
 8003604:	2200      	movs	r2, #0
 8003606:	601a      	str	r2, [r3, #0]
		s_tTmr[i].Flag = 0;
 8003608:	79fa      	ldrb	r2, [r7, #7]
 800360a:	4912      	ldr	r1, [pc, #72]	; (8003654 <bsp_InitTimer+0x80>)
 800360c:	4613      	mov	r3, r2
 800360e:	005b      	lsls	r3, r3, #1
 8003610:	4413      	add	r3, r2
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	440b      	add	r3, r1
 8003616:	3301      	adds	r3, #1
 8003618:	2200      	movs	r2, #0
 800361a:	701a      	strb	r2, [r3, #0]
		s_tTmr[i].Mode = TMR_ONCE_MODE;
 800361c:	79fa      	ldrb	r2, [r7, #7]
 800361e:	490d      	ldr	r1, [pc, #52]	; (8003654 <bsp_InitTimer+0x80>)
 8003620:	4613      	mov	r3, r2
 8003622:	005b      	lsls	r3, r3, #1
 8003624:	4413      	add	r3, r2
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	440b      	add	r3, r1
 800362a:	2200      	movs	r2, #0
 800362c:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TMR_COUNT; i++)
 800362e:	79fb      	ldrb	r3, [r7, #7]
 8003630:	3301      	adds	r3, #1
 8003632:	71fb      	strb	r3, [r7, #7]
 8003634:	79fb      	ldrb	r3, [r7, #7]
 8003636:	2b03      	cmp	r3, #3
 8003638:	d9d2      	bls.n	80035e0 <bsp_InitTimer+0xc>
	}
	SysTick_Config(SystemCoreClock / 1000);
 800363a:	4b07      	ldr	r3, [pc, #28]	; (8003658 <bsp_InitTimer+0x84>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a07      	ldr	r2, [pc, #28]	; (800365c <bsp_InitTimer+0x88>)
 8003640:	fba2 2303 	umull	r2, r3, r2, r3
 8003644:	099b      	lsrs	r3, r3, #6
 8003646:	4618      	mov	r0, r3
 8003648:	f7ff ffa2 	bl	8003590 <SysTick_Config>
}
 800364c:	bf00      	nop
 800364e:	3708      	adds	r7, #8
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}
 8003654:	20000128 	.word	0x20000128
 8003658:	20000000 	.word	0x20000000
 800365c:	10624dd3 	.word	0x10624dd3

08003660 <TOUCH_InitHard>:
*	ÐÎ    ²Î:  ÎÞ
*	·µ »Ø Öµ: ÎÞ
*********************************************************************************************************
*/
void TOUCH_InitHard(void)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	af00      	add	r7, sp, #0
	g_tTP.Enable = 0;
 8003664:	4b0e      	ldr	r3, [pc, #56]	; (80036a0 <TOUCH_InitHard+0x40>)
 8003666:	2200      	movs	r2, #0
 8003668:	761a      	strb	r2, [r3, #24]
	if (g_ChipID == IC_8875)
 800366a:	4b0e      	ldr	r3, [pc, #56]	; (80036a4 <TOUCH_InitHard+0x44>)
 800366c:	881b      	ldrh	r3, [r3, #0]
 800366e:	2b75      	cmp	r3, #117	; 0x75
 8003670:	d105      	bne.n	800367e <TOUCH_InitHard+0x1e>
	{
		RA8875_TouchInit();
 8003672:	f7fe fc3b 	bl	8001eec <RA8875_TouchInit>
		g_tTP.usMaxAdc = 1023;	/* 10Î»ADC */
 8003676:	4b0a      	ldr	r3, [pc, #40]	; (80036a0 <TOUCH_InitHard+0x40>)
 8003678:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800367c:	825a      	strh	r2, [r3, #18]
	else
	{
		//TSC2046_InitHard();
		//g_tTP.usMaxAdc = 4095;	/* 12Î»ADC */
	}
	TOUCH_LoadParam();	/* ¶ÁÈ¡Ð£×¼²ÎÊý */
 800367e:	f000 f813 	bl	80036a8 <TOUCH_LoadParam>
	g_tTP.Write = g_tTP.Read = 0;
 8003682:	4b07      	ldr	r3, [pc, #28]	; (80036a0 <TOUCH_InitHard+0x40>)
 8003684:	2200      	movs	r2, #0
 8003686:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 800368a:	4b05      	ldr	r3, [pc, #20]	; (80036a0 <TOUCH_InitHard+0x40>)
 800368c:	f893 207e 	ldrb.w	r2, [r3, #126]	; 0x7e
 8003690:	4b03      	ldr	r3, [pc, #12]	; (80036a0 <TOUCH_InitHard+0x40>)
 8003692:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
	g_tTP.Enable = 1;
 8003696:	4b02      	ldr	r3, [pc, #8]	; (80036a0 <TOUCH_InitHard+0x40>)
 8003698:	2201      	movs	r2, #1
 800369a:	761a      	strb	r2, [r3, #24]
}
 800369c:	bf00      	nop
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	20000158 	.word	0x20000158
 80036a4:	20000008 	.word	0x20000008

080036a8 <TOUCH_LoadParam>:
*	Func name: TOUCH_LoadParam
*********************************************************************************************************
*/
extern void LoadParam(void);
static void TOUCH_LoadParam(void)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	af00      	add	r7, sp, #0
#if 1
	LoadParam();	/* ´ÓFlashÖÐ¶ÁÈ¡²ÎÊý */
 80036ac:	f7fd fa62 	bl	8000b74 <LoadParam>

	g_tTP.usAdcX1 = g_tParam.usAdcX1;
 80036b0:	4b12      	ldr	r3, [pc, #72]	; (80036fc <TOUCH_LoadParam+0x54>)
 80036b2:	88da      	ldrh	r2, [r3, #6]
 80036b4:	4b12      	ldr	r3, [pc, #72]	; (8003700 <TOUCH_LoadParam+0x58>)
 80036b6:	801a      	strh	r2, [r3, #0]
	g_tTP.usAdcY1 = g_tParam.usAdcY1;
 80036b8:	4b10      	ldr	r3, [pc, #64]	; (80036fc <TOUCH_LoadParam+0x54>)
 80036ba:	891a      	ldrh	r2, [r3, #8]
 80036bc:	4b10      	ldr	r3, [pc, #64]	; (8003700 <TOUCH_LoadParam+0x58>)
 80036be:	805a      	strh	r2, [r3, #2]
	g_tTP.usAdcX2 = g_tParam.usAdcX2;
 80036c0:	4b0e      	ldr	r3, [pc, #56]	; (80036fc <TOUCH_LoadParam+0x54>)
 80036c2:	895a      	ldrh	r2, [r3, #10]
 80036c4:	4b0e      	ldr	r3, [pc, #56]	; (8003700 <TOUCH_LoadParam+0x58>)
 80036c6:	809a      	strh	r2, [r3, #4]
	g_tTP.usAdcY2 = g_tParam.usAdcY2;
 80036c8:	4b0c      	ldr	r3, [pc, #48]	; (80036fc <TOUCH_LoadParam+0x54>)
 80036ca:	899a      	ldrh	r2, [r3, #12]
 80036cc:	4b0c      	ldr	r3, [pc, #48]	; (8003700 <TOUCH_LoadParam+0x58>)
 80036ce:	80da      	strh	r2, [r3, #6]
	g_tTP.usAdcX3 = g_tParam.usAdcX3;
 80036d0:	4b0a      	ldr	r3, [pc, #40]	; (80036fc <TOUCH_LoadParam+0x54>)
 80036d2:	89da      	ldrh	r2, [r3, #14]
 80036d4:	4b0a      	ldr	r3, [pc, #40]	; (8003700 <TOUCH_LoadParam+0x58>)
 80036d6:	811a      	strh	r2, [r3, #8]
	g_tTP.usAdcY3 = g_tParam.usAdcY3;
 80036d8:	4b08      	ldr	r3, [pc, #32]	; (80036fc <TOUCH_LoadParam+0x54>)
 80036da:	8a1a      	ldrh	r2, [r3, #16]
 80036dc:	4b08      	ldr	r3, [pc, #32]	; (8003700 <TOUCH_LoadParam+0x58>)
 80036de:	815a      	strh	r2, [r3, #10]
	g_tTP.usAdcX4 = g_tParam.usAdcX4;
 80036e0:	4b06      	ldr	r3, [pc, #24]	; (80036fc <TOUCH_LoadParam+0x54>)
 80036e2:	8a5a      	ldrh	r2, [r3, #18]
 80036e4:	4b06      	ldr	r3, [pc, #24]	; (8003700 <TOUCH_LoadParam+0x58>)
 80036e6:	819a      	strh	r2, [r3, #12]
	g_tTP.usAdcY4 = g_tParam.usAdcY4;
 80036e8:	4b04      	ldr	r3, [pc, #16]	; (80036fc <TOUCH_LoadParam+0x54>)
 80036ea:	8a9a      	ldrh	r2, [r3, #20]
 80036ec:	4b04      	ldr	r3, [pc, #16]	; (8003700 <TOUCH_LoadParam+0x58>)
 80036ee:	81da      	strh	r2, [r3, #14]
	g_tTP.XYChange = g_tParam.XYChange;
 80036f0:	4b02      	ldr	r3, [pc, #8]	; (80036fc <TOUCH_LoadParam+0x54>)
 80036f2:	8ada      	ldrh	r2, [r3, #22]
 80036f4:	4b02      	ldr	r3, [pc, #8]	; (8003700 <TOUCH_LoadParam+0x58>)
 80036f6:	821a      	strh	r2, [r3, #16]

#endif
}
 80036f8:	bf00      	nop
 80036fa:	bd80      	pop	{r7, pc}
 80036fc:	20000038 	.word	0x20000038
 8003700:	20000158 	.word	0x20000158

08003704 <TOUCH_GetKey>:
*********************************************************************************************************
*	Func name: TOUCH_GetKey
*********************************************************************************************************
*/
uint8_t TOUCH_GetKey(int16_t *_pX, int16_t *_pY)
{
 8003704:	b480      	push	{r7}
 8003706:	b085      	sub	sp, #20
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	6039      	str	r1, [r7, #0]
	uint8_t ret;

	if (g_tTP.Read == g_tTP.Write)
 800370e:	4b20      	ldr	r3, [pc, #128]	; (8003790 <TOUCH_GetKey+0x8c>)
 8003710:	f893 207e 	ldrb.w	r2, [r3, #126]	; 0x7e
 8003714:	4b1e      	ldr	r3, [pc, #120]	; (8003790 <TOUCH_GetKey+0x8c>)
 8003716:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800371a:	429a      	cmp	r2, r3
 800371c:	d101      	bne.n	8003722 <TOUCH_GetKey+0x1e>
	{
		return TOUCH_NONE;
 800371e:	2300      	movs	r3, #0
 8003720:	e02f      	b.n	8003782 <TOUCH_GetKey+0x7e>
	}
	else
	{
		ret = g_tTP.Event[g_tTP.Read];
 8003722:	4b1b      	ldr	r3, [pc, #108]	; (8003790 <TOUCH_GetKey+0x8c>)
 8003724:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8003728:	461a      	mov	r2, r3
 800372a:	4b19      	ldr	r3, [pc, #100]	; (8003790 <TOUCH_GetKey+0x8c>)
 800372c:	4413      	add	r3, r2
 800372e:	7e5b      	ldrb	r3, [r3, #25]
 8003730:	73fb      	strb	r3, [r7, #15]
		*_pX = g_tTP.XBuf[g_tTP.Read];
 8003732:	4b17      	ldr	r3, [pc, #92]	; (8003790 <TOUCH_GetKey+0x8c>)
 8003734:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8003738:	4a15      	ldr	r2, [pc, #84]	; (8003790 <TOUCH_GetKey+0x8c>)
 800373a:	3314      	adds	r3, #20
 800373c:	005b      	lsls	r3, r3, #1
 800373e:	4413      	add	r3, r2
 8003740:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	801a      	strh	r2, [r3, #0]
		*_pY = g_tTP.YBuf[g_tTP.Read];
 8003748:	4b11      	ldr	r3, [pc, #68]	; (8003790 <TOUCH_GetKey+0x8c>)
 800374a:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800374e:	4a10      	ldr	r2, [pc, #64]	; (8003790 <TOUCH_GetKey+0x8c>)
 8003750:	3328      	adds	r3, #40	; 0x28
 8003752:	005b      	lsls	r3, r3, #1
 8003754:	4413      	add	r3, r2
 8003756:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	801a      	strh	r2, [r3, #0]

		if (++g_tTP.Read >= TOUCH_FIFO_SIZE)
 800375e:	4b0c      	ldr	r3, [pc, #48]	; (8003790 <TOUCH_GetKey+0x8c>)
 8003760:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8003764:	3301      	adds	r3, #1
 8003766:	b2da      	uxtb	r2, r3
 8003768:	4b09      	ldr	r3, [pc, #36]	; (8003790 <TOUCH_GetKey+0x8c>)
 800376a:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 800376e:	4b08      	ldr	r3, [pc, #32]	; (8003790 <TOUCH_GetKey+0x8c>)
 8003770:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8003774:	2b13      	cmp	r3, #19
 8003776:	d903      	bls.n	8003780 <TOUCH_GetKey+0x7c>
		{
			g_tTP.Read = 0;
 8003778:	4b05      	ldr	r3, [pc, #20]	; (8003790 <TOUCH_GetKey+0x8c>)
 800377a:	2200      	movs	r2, #0
 800377c:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
		}
		return ret;
 8003780:	7bfb      	ldrb	r3, [r7, #15]
	}
}
 8003782:	4618      	mov	r0, r3
 8003784:	3714      	adds	r7, #20
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr
 800378e:	bf00      	nop
 8003790:	20000158 	.word	0x20000158

08003794 <TOUCH_InRect>:
*	Func name: TOUCH_InRect
*********************************************************************************************************
*/
uint8_t TOUCH_InRect(uint16_t _usX, uint16_t _usY,
	uint16_t _usRectX, uint16_t _usRectY, uint16_t _usRectH, uint16_t _usRectW)
{
 8003794:	b490      	push	{r4, r7}
 8003796:	b082      	sub	sp, #8
 8003798:	af00      	add	r7, sp, #0
 800379a:	4604      	mov	r4, r0
 800379c:	4608      	mov	r0, r1
 800379e:	4611      	mov	r1, r2
 80037a0:	461a      	mov	r2, r3
 80037a2:	4623      	mov	r3, r4
 80037a4:	80fb      	strh	r3, [r7, #6]
 80037a6:	4603      	mov	r3, r0
 80037a8:	80bb      	strh	r3, [r7, #4]
 80037aa:	460b      	mov	r3, r1
 80037ac:	807b      	strh	r3, [r7, #2]
 80037ae:	4613      	mov	r3, r2
 80037b0:	803b      	strh	r3, [r7, #0]
	if ((_usX > _usRectX) && (_usX < _usRectX + _usRectW)
 80037b2:	88fa      	ldrh	r2, [r7, #6]
 80037b4:	887b      	ldrh	r3, [r7, #2]
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d911      	bls.n	80037de <TOUCH_InRect+0x4a>
 80037ba:	88fa      	ldrh	r2, [r7, #6]
 80037bc:	8879      	ldrh	r1, [r7, #2]
 80037be:	8abb      	ldrh	r3, [r7, #20]
 80037c0:	440b      	add	r3, r1
 80037c2:	429a      	cmp	r2, r3
 80037c4:	da0b      	bge.n	80037de <TOUCH_InRect+0x4a>
		&& (_usY > _usRectY) && (_usY < _usRectY + _usRectH))
 80037c6:	88ba      	ldrh	r2, [r7, #4]
 80037c8:	883b      	ldrh	r3, [r7, #0]
 80037ca:	429a      	cmp	r2, r3
 80037cc:	d907      	bls.n	80037de <TOUCH_InRect+0x4a>
 80037ce:	88ba      	ldrh	r2, [r7, #4]
 80037d0:	8839      	ldrh	r1, [r7, #0]
 80037d2:	8a3b      	ldrh	r3, [r7, #16]
 80037d4:	440b      	add	r3, r1
 80037d6:	429a      	cmp	r2, r3
 80037d8:	da01      	bge.n	80037de <TOUCH_InRect+0x4a>
	{
		return 1;
 80037da:	2301      	movs	r3, #1
 80037dc:	e000      	b.n	80037e0 <TOUCH_InRect+0x4c>
	}
	else
	{
		return 0;
 80037de:	2300      	movs	r3, #0
	}
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3708      	adds	r7, #8
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bc90      	pop	{r4, r7}
 80037e8:	4770      	bx	lr

080037ea <bsp_InitUart>:
*********************************************************************************************************
*	Func name: bsp_InitUart
*********************************************************************************************************
*/
void bsp_InitUart(void)
{
 80037ea:	b580      	push	{r7, lr}
 80037ec:	af00      	add	r7, sp, #0
	UartVarInit();		/* ±ØÐëÏÈ³õÊ¼»¯È«¾Ö±äÁ¿,ÔÙÅäÖÃÓ²¼þ */
 80037ee:	f000 f81f 	bl	8003830 <UartVarInit>

	InitHardUart();		/* ÅäÖÃ´®¿ÚµÄÓ²¼þ²ÎÊý(²¨ÌØÂÊµÈ) */
 80037f2:	f000 f8f7 	bl	80039e4 <InitHardUart>

	ConfigUartNVIC();	/* ÅäÖÃ´®¿ÚÖÐ¶Ï */
 80037f6:	f000 f9d7 	bl	8003ba8 <ConfigUartNVIC>
}
 80037fa:	bf00      	nop
 80037fc:	bd80      	pop	{r7, pc}
	...

08003800 <USART3_SendBefor>:
*********************************************************************************************************
*	Func name: USART3_SendBefor
*********************************************************************************************************
*/
void USART3_SendBefor(void)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	af00      	add	r7, sp, #0
	RS485_TX_EN();	/* ÇÐ»»RS485ÊÕ·¢Ð¾Æ¬Îª·¢ËÍÄ£Ê½ */
 8003804:	2201      	movs	r2, #1
 8003806:	2104      	movs	r1, #4
 8003808:	4802      	ldr	r0, [pc, #8]	; (8003814 <USART3_SendBefor+0x14>)
 800380a:	f000 fda7 	bl	800435c <HAL_GPIO_WritePin>
}
 800380e:	bf00      	nop
 8003810:	bd80      	pop	{r7, pc}
 8003812:	bf00      	nop
 8003814:	40020400 	.word	0x40020400

08003818 <USART3_SendOver>:
*********************************************************************************************************
*	Func name: USART3_SendOver
*********************************************************************************************************
*/
void USART3_SendOver(void)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	af00      	add	r7, sp, #0
	RS485_RX_EN();	/* ÇÐ»»RS485ÊÕ·¢Ð¾Æ¬Îª½ÓÊÕÄ£Ê½ */
 800381c:	2200      	movs	r2, #0
 800381e:	2104      	movs	r1, #4
 8003820:	4802      	ldr	r0, [pc, #8]	; (800382c <USART3_SendOver+0x14>)
 8003822:	f000 fd9b 	bl	800435c <HAL_GPIO_WritePin>
}
 8003826:	bf00      	nop
 8003828:	bd80      	pop	{r7, pc}
 800382a:	bf00      	nop
 800382c:	40020400 	.word	0x40020400

08003830 <UartVarInit>:
*********************************************************************************************************
*	Func name: UartVarInit
*********************************************************************************************************
*/
static void UartVarInit(void)
{
 8003830:	b480      	push	{r7}
 8003832:	af00      	add	r7, sp, #0
#if UART1_FIFO_EN == 1
	g_tUart1.uart = USART1;						/* STM32 ´®¿ÚÉè±¸ */
 8003834:	4b59      	ldr	r3, [pc, #356]	; (800399c <UartVarInit+0x16c>)
 8003836:	4a5a      	ldr	r2, [pc, #360]	; (80039a0 <UartVarInit+0x170>)
 8003838:	601a      	str	r2, [r3, #0]
	g_tUart1.pTxBuf = g_TxBuf1;					/* ·¢ËÍ»º³åÇøÖ¸Õë */
 800383a:	4b58      	ldr	r3, [pc, #352]	; (800399c <UartVarInit+0x16c>)
 800383c:	4a59      	ldr	r2, [pc, #356]	; (80039a4 <UartVarInit+0x174>)
 800383e:	605a      	str	r2, [r3, #4]
	g_tUart1.pRxBuf = g_RxBuf1;					/* ½ÓÊÕ»º³åÇøÖ¸Õë */
 8003840:	4b56      	ldr	r3, [pc, #344]	; (800399c <UartVarInit+0x16c>)
 8003842:	4a59      	ldr	r2, [pc, #356]	; (80039a8 <UartVarInit+0x178>)
 8003844:	609a      	str	r2, [r3, #8]
	g_tUart1.usTxBufSize = UART1_TX_BUF_SIZE;	/* ·¢ËÍ»º³åÇø´óÐ¡ */
 8003846:	4b55      	ldr	r3, [pc, #340]	; (800399c <UartVarInit+0x16c>)
 8003848:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800384c:	819a      	strh	r2, [r3, #12]
	g_tUart1.usRxBufSize = UART1_RX_BUF_SIZE;	/* ½ÓÊÕ»º³åÇø´óÐ¡ */
 800384e:	4b53      	ldr	r3, [pc, #332]	; (800399c <UartVarInit+0x16c>)
 8003850:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003854:	81da      	strh	r2, [r3, #14]
	g_tUart1.usTxWrite = 0;						/* ·¢ËÍFIFOÐ´Ë÷Òý */
 8003856:	4b51      	ldr	r3, [pc, #324]	; (800399c <UartVarInit+0x16c>)
 8003858:	2200      	movs	r2, #0
 800385a:	821a      	strh	r2, [r3, #16]
	g_tUart1.usTxRead = 0;						/* ·¢ËÍFIFO¶ÁË÷Òý */
 800385c:	4b4f      	ldr	r3, [pc, #316]	; (800399c <UartVarInit+0x16c>)
 800385e:	2200      	movs	r2, #0
 8003860:	825a      	strh	r2, [r3, #18]
	g_tUart1.usRxWrite = 0;						/* ½ÓÊÕFIFOÐ´Ë÷Òý */
 8003862:	4b4e      	ldr	r3, [pc, #312]	; (800399c <UartVarInit+0x16c>)
 8003864:	2200      	movs	r2, #0
 8003866:	82da      	strh	r2, [r3, #22]
	g_tUart1.usRxRead = 0;						/* ½ÓÊÕFIFO¶ÁË÷Òý */
 8003868:	4b4c      	ldr	r3, [pc, #304]	; (800399c <UartVarInit+0x16c>)
 800386a:	2200      	movs	r2, #0
 800386c:	831a      	strh	r2, [r3, #24]
	g_tUart1.usRxCount = 0;						/* ½ÓÊÕµ½µÄÐÂÊý¾Ý¸öÊý */
 800386e:	4b4b      	ldr	r3, [pc, #300]	; (800399c <UartVarInit+0x16c>)
 8003870:	2200      	movs	r2, #0
 8003872:	835a      	strh	r2, [r3, #26]
	g_tUart1.usTxCount = 0;						/* ´ý·¢ËÍµÄÊý¾Ý¸öÊý */
 8003874:	4b49      	ldr	r3, [pc, #292]	; (800399c <UartVarInit+0x16c>)
 8003876:	2200      	movs	r2, #0
 8003878:	829a      	strh	r2, [r3, #20]
	g_tUart1.SendBefor = 0;						/* ·¢ËÍÊý¾ÝÇ°µÄ»Øµ÷º¯Êý */
 800387a:	4b48      	ldr	r3, [pc, #288]	; (800399c <UartVarInit+0x16c>)
 800387c:	2200      	movs	r2, #0
 800387e:	61da      	str	r2, [r3, #28]
	g_tUart1.SendOver = 0;						/* ·¢ËÍÍê±ÏºóµÄ»Øµ÷º¯Êý */
 8003880:	4b46      	ldr	r3, [pc, #280]	; (800399c <UartVarInit+0x16c>)
 8003882:	2200      	movs	r2, #0
 8003884:	621a      	str	r2, [r3, #32]
	g_tUart1.ReciveNew = 0;						/* ½ÓÊÕµ½ÐÂÊý¾ÝºóµÄ»Øµ÷º¯Êý */
 8003886:	4b45      	ldr	r3, [pc, #276]	; (800399c <UartVarInit+0x16c>)
 8003888:	2200      	movs	r2, #0
 800388a:	625a      	str	r2, [r3, #36]	; 0x24
#endif

#if UART2_FIFO_EN == 1
	g_tUart2.uart = USART2;						/* STM32 ´®¿ÚÉè±¸ */
 800388c:	4b47      	ldr	r3, [pc, #284]	; (80039ac <UartVarInit+0x17c>)
 800388e:	4a48      	ldr	r2, [pc, #288]	; (80039b0 <UartVarInit+0x180>)
 8003890:	601a      	str	r2, [r3, #0]
	g_tUart2.pTxBuf = g_TxBuf2;					/* ·¢ËÍ»º³åÇøÖ¸Õë */
 8003892:	4b46      	ldr	r3, [pc, #280]	; (80039ac <UartVarInit+0x17c>)
 8003894:	4a47      	ldr	r2, [pc, #284]	; (80039b4 <UartVarInit+0x184>)
 8003896:	605a      	str	r2, [r3, #4]
	g_tUart2.pRxBuf = g_RxBuf2;					/* ½ÓÊÕ»º³åÇøÖ¸Õë */
 8003898:	4b44      	ldr	r3, [pc, #272]	; (80039ac <UartVarInit+0x17c>)
 800389a:	4a47      	ldr	r2, [pc, #284]	; (80039b8 <UartVarInit+0x188>)
 800389c:	609a      	str	r2, [r3, #8]
	g_tUart2.usTxBufSize = UART2_TX_BUF_SIZE;	/* ·¢ËÍ»º³åÇø´óÐ¡ */
 800389e:	4b43      	ldr	r3, [pc, #268]	; (80039ac <UartVarInit+0x17c>)
 80038a0:	2201      	movs	r2, #1
 80038a2:	819a      	strh	r2, [r3, #12]
	g_tUart2.usRxBufSize = UART2_RX_BUF_SIZE;	/* ½ÓÊÕ»º³åÇø´óÐ¡ */
 80038a4:	4b41      	ldr	r3, [pc, #260]	; (80039ac <UartVarInit+0x17c>)
 80038a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80038aa:	81da      	strh	r2, [r3, #14]
	g_tUart2.usTxWrite = 0;						/* ·¢ËÍFIFOÐ´Ë÷Òý */
 80038ac:	4b3f      	ldr	r3, [pc, #252]	; (80039ac <UartVarInit+0x17c>)
 80038ae:	2200      	movs	r2, #0
 80038b0:	821a      	strh	r2, [r3, #16]
	g_tUart2.usTxRead = 0;						/* ·¢ËÍFIFO¶ÁË÷Òý */
 80038b2:	4b3e      	ldr	r3, [pc, #248]	; (80039ac <UartVarInit+0x17c>)
 80038b4:	2200      	movs	r2, #0
 80038b6:	825a      	strh	r2, [r3, #18]
	g_tUart2.usRxWrite = 0;						/* ½ÓÊÕFIFOÐ´Ë÷Òý */
 80038b8:	4b3c      	ldr	r3, [pc, #240]	; (80039ac <UartVarInit+0x17c>)
 80038ba:	2200      	movs	r2, #0
 80038bc:	82da      	strh	r2, [r3, #22]
	g_tUart2.usRxRead = 0;						/* ½ÓÊÕFIFO¶ÁË÷Òý */
 80038be:	4b3b      	ldr	r3, [pc, #236]	; (80039ac <UartVarInit+0x17c>)
 80038c0:	2200      	movs	r2, #0
 80038c2:	831a      	strh	r2, [r3, #24]
	g_tUart2.usRxCount = 0;						/* ½ÓÊÕµ½µÄÐÂÊý¾Ý¸öÊý */
 80038c4:	4b39      	ldr	r3, [pc, #228]	; (80039ac <UartVarInit+0x17c>)
 80038c6:	2200      	movs	r2, #0
 80038c8:	835a      	strh	r2, [r3, #26]
	g_tUart2.usTxCount = 0;						/* ´ý·¢ËÍµÄÊý¾Ý¸öÊý */
 80038ca:	4b38      	ldr	r3, [pc, #224]	; (80039ac <UartVarInit+0x17c>)
 80038cc:	2200      	movs	r2, #0
 80038ce:	829a      	strh	r2, [r3, #20]
	g_tUart2.SendBefor = 0;						/* ·¢ËÍÊý¾ÝÇ°µÄ»Øµ÷º¯Êý */
 80038d0:	4b36      	ldr	r3, [pc, #216]	; (80039ac <UartVarInit+0x17c>)
 80038d2:	2200      	movs	r2, #0
 80038d4:	61da      	str	r2, [r3, #28]
	g_tUart2.SendOver = 0;						/* ·¢ËÍÍê±ÏºóµÄ»Øµ÷º¯Êý */
 80038d6:	4b35      	ldr	r3, [pc, #212]	; (80039ac <UartVarInit+0x17c>)
 80038d8:	2200      	movs	r2, #0
 80038da:	621a      	str	r2, [r3, #32]
	g_tUart2.ReciveNew = 0;						/* ½ÓÊÕµ½ÐÂÊý¾ÝºóµÄ»Øµ÷º¯Êý */
 80038dc:	4b33      	ldr	r3, [pc, #204]	; (80039ac <UartVarInit+0x17c>)
 80038de:	2200      	movs	r2, #0
 80038e0:	625a      	str	r2, [r3, #36]	; 0x24
#endif

#if UART3_FIFO_EN == 1
	g_tUart3.uart = USART3;						/* STM32 ´®¿ÚÉè±¸ */
 80038e2:	4b36      	ldr	r3, [pc, #216]	; (80039bc <UartVarInit+0x18c>)
 80038e4:	4a36      	ldr	r2, [pc, #216]	; (80039c0 <UartVarInit+0x190>)
 80038e6:	601a      	str	r2, [r3, #0]
	g_tUart3.pTxBuf = g_TxBuf3;					/* ·¢ËÍ»º³åÇøÖ¸Õë */
 80038e8:	4b34      	ldr	r3, [pc, #208]	; (80039bc <UartVarInit+0x18c>)
 80038ea:	4a36      	ldr	r2, [pc, #216]	; (80039c4 <UartVarInit+0x194>)
 80038ec:	605a      	str	r2, [r3, #4]
	g_tUart3.pRxBuf = g_RxBuf3;					/* ½ÓÊÕ»º³åÇøÖ¸Õë */
 80038ee:	4b33      	ldr	r3, [pc, #204]	; (80039bc <UartVarInit+0x18c>)
 80038f0:	4a35      	ldr	r2, [pc, #212]	; (80039c8 <UartVarInit+0x198>)
 80038f2:	609a      	str	r2, [r3, #8]
	g_tUart3.usTxBufSize = UART3_TX_BUF_SIZE;	/* ·¢ËÍ»º³åÇø´óÐ¡ */
 80038f4:	4b31      	ldr	r3, [pc, #196]	; (80039bc <UartVarInit+0x18c>)
 80038f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80038fa:	819a      	strh	r2, [r3, #12]
	g_tUart3.usRxBufSize = UART3_RX_BUF_SIZE;	/* ½ÓÊÕ»º³åÇø´óÐ¡ */
 80038fc:	4b2f      	ldr	r3, [pc, #188]	; (80039bc <UartVarInit+0x18c>)
 80038fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003902:	81da      	strh	r2, [r3, #14]
	g_tUart3.usTxWrite = 0;						/* ·¢ËÍFIFOÐ´Ë÷Òý */
 8003904:	4b2d      	ldr	r3, [pc, #180]	; (80039bc <UartVarInit+0x18c>)
 8003906:	2200      	movs	r2, #0
 8003908:	821a      	strh	r2, [r3, #16]
	g_tUart3.usTxRead = 0;						/* ·¢ËÍFIFO¶ÁË÷Òý */
 800390a:	4b2c      	ldr	r3, [pc, #176]	; (80039bc <UartVarInit+0x18c>)
 800390c:	2200      	movs	r2, #0
 800390e:	825a      	strh	r2, [r3, #18]
	g_tUart3.usRxWrite = 0;						/* ½ÓÊÕFIFOÐ´Ë÷Òý */
 8003910:	4b2a      	ldr	r3, [pc, #168]	; (80039bc <UartVarInit+0x18c>)
 8003912:	2200      	movs	r2, #0
 8003914:	82da      	strh	r2, [r3, #22]
	g_tUart3.usRxRead = 0;						/* ½ÓÊÕFIFO¶ÁË÷Òý */
 8003916:	4b29      	ldr	r3, [pc, #164]	; (80039bc <UartVarInit+0x18c>)
 8003918:	2200      	movs	r2, #0
 800391a:	831a      	strh	r2, [r3, #24]
	g_tUart3.usRxCount = 0;						/* ½ÓÊÕµ½µÄÐÂÊý¾Ý¸öÊý */
 800391c:	4b27      	ldr	r3, [pc, #156]	; (80039bc <UartVarInit+0x18c>)
 800391e:	2200      	movs	r2, #0
 8003920:	835a      	strh	r2, [r3, #26]
	g_tUart3.usTxCount = 0;						/* ´ý·¢ËÍµÄÊý¾Ý¸öÊý */
 8003922:	4b26      	ldr	r3, [pc, #152]	; (80039bc <UartVarInit+0x18c>)
 8003924:	2200      	movs	r2, #0
 8003926:	829a      	strh	r2, [r3, #20]
	g_tUart3.SendBefor = USART3_SendBefor;		/* ·¢ËÍÊý¾ÝÇ°µÄ»Øµ÷º¯Êý */
 8003928:	4b24      	ldr	r3, [pc, #144]	; (80039bc <UartVarInit+0x18c>)
 800392a:	4a28      	ldr	r2, [pc, #160]	; (80039cc <UartVarInit+0x19c>)
 800392c:	61da      	str	r2, [r3, #28]
	g_tUart3.SendOver = USART3_SendOver;		/* ·¢ËÍÍê±ÏºóµÄ»Øµ÷º¯Êý */
 800392e:	4b23      	ldr	r3, [pc, #140]	; (80039bc <UartVarInit+0x18c>)
 8003930:	4a27      	ldr	r2, [pc, #156]	; (80039d0 <UartVarInit+0x1a0>)
 8003932:	621a      	str	r2, [r3, #32]
	g_tUart3.ReciveNew = 0;						/* ½ÓÊÕµ½ÐÂÊý¾ÝºóµÄ»Øµ÷º¯Êý */
 8003934:	4b21      	ldr	r3, [pc, #132]	; (80039bc <UartVarInit+0x18c>)
 8003936:	2200      	movs	r2, #0
 8003938:	625a      	str	r2, [r3, #36]	; 0x24
	g_tUart5.ReciveNew = 0;						/* ½ÓÊÕµ½ÐÂÊý¾ÝºóµÄ»Øµ÷º¯Êý */
#endif


#if UART6_FIFO_EN == 1
	g_tUart6.uart = USART6;						/* STM32 ´®¿ÚÉè±¸ */
 800393a:	4b26      	ldr	r3, [pc, #152]	; (80039d4 <UartVarInit+0x1a4>)
 800393c:	4a26      	ldr	r2, [pc, #152]	; (80039d8 <UartVarInit+0x1a8>)
 800393e:	601a      	str	r2, [r3, #0]
	g_tUart6.pTxBuf = g_TxBuf6;					/* ·¢ËÍ»º³åÇøÖ¸Õë */
 8003940:	4b24      	ldr	r3, [pc, #144]	; (80039d4 <UartVarInit+0x1a4>)
 8003942:	4a26      	ldr	r2, [pc, #152]	; (80039dc <UartVarInit+0x1ac>)
 8003944:	605a      	str	r2, [r3, #4]
	g_tUart6.pRxBuf = g_RxBuf6;					/* ½ÓÊÕ»º³åÇøÖ¸Õë */
 8003946:	4b23      	ldr	r3, [pc, #140]	; (80039d4 <UartVarInit+0x1a4>)
 8003948:	4a25      	ldr	r2, [pc, #148]	; (80039e0 <UartVarInit+0x1b0>)
 800394a:	609a      	str	r2, [r3, #8]
	g_tUart6.usTxBufSize = UART6_TX_BUF_SIZE;	/* ·¢ËÍ»º³åÇø´óÐ¡ */
 800394c:	4b21      	ldr	r3, [pc, #132]	; (80039d4 <UartVarInit+0x1a4>)
 800394e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003952:	819a      	strh	r2, [r3, #12]
	g_tUart6.usRxBufSize = UART6_RX_BUF_SIZE;	/* ½ÓÊÕ»º³åÇø´óÐ¡ */
 8003954:	4b1f      	ldr	r3, [pc, #124]	; (80039d4 <UartVarInit+0x1a4>)
 8003956:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800395a:	81da      	strh	r2, [r3, #14]
	g_tUart6.usTxWrite = 0;						/* ·¢ËÍFIFOÐ´Ë÷Òý */
 800395c:	4b1d      	ldr	r3, [pc, #116]	; (80039d4 <UartVarInit+0x1a4>)
 800395e:	2200      	movs	r2, #0
 8003960:	821a      	strh	r2, [r3, #16]
	g_tUart6.usTxRead = 0;						/* ·¢ËÍFIFO¶ÁË÷Òý */
 8003962:	4b1c      	ldr	r3, [pc, #112]	; (80039d4 <UartVarInit+0x1a4>)
 8003964:	2200      	movs	r2, #0
 8003966:	825a      	strh	r2, [r3, #18]
	g_tUart6.usRxWrite = 0;						/* ½ÓÊÕFIFOÐ´Ë÷Òý */
 8003968:	4b1a      	ldr	r3, [pc, #104]	; (80039d4 <UartVarInit+0x1a4>)
 800396a:	2200      	movs	r2, #0
 800396c:	82da      	strh	r2, [r3, #22]
	g_tUart6.usRxRead = 0;						/* ½ÓÊÕFIFO¶ÁË÷Òý */
 800396e:	4b19      	ldr	r3, [pc, #100]	; (80039d4 <UartVarInit+0x1a4>)
 8003970:	2200      	movs	r2, #0
 8003972:	831a      	strh	r2, [r3, #24]
	g_tUart6.usRxCount = 0;						/* ½ÓÊÕµ½µÄÐÂÊý¾Ý¸öÊý */
 8003974:	4b17      	ldr	r3, [pc, #92]	; (80039d4 <UartVarInit+0x1a4>)
 8003976:	2200      	movs	r2, #0
 8003978:	835a      	strh	r2, [r3, #26]
	g_tUart6.usTxCount = 0;						/* ´ý·¢ËÍµÄÊý¾Ý¸öÊý */
 800397a:	4b16      	ldr	r3, [pc, #88]	; (80039d4 <UartVarInit+0x1a4>)
 800397c:	2200      	movs	r2, #0
 800397e:	829a      	strh	r2, [r3, #20]
	g_tUart6.SendBefor = 0;						/* ·¢ËÍÊý¾ÝÇ°µÄ»Øµ÷º¯Êý */
 8003980:	4b14      	ldr	r3, [pc, #80]	; (80039d4 <UartVarInit+0x1a4>)
 8003982:	2200      	movs	r2, #0
 8003984:	61da      	str	r2, [r3, #28]
	g_tUart6.SendOver = 0;						/* ·¢ËÍÍê±ÏºóµÄ»Øµ÷º¯Êý */
 8003986:	4b13      	ldr	r3, [pc, #76]	; (80039d4 <UartVarInit+0x1a4>)
 8003988:	2200      	movs	r2, #0
 800398a:	621a      	str	r2, [r3, #32]
	g_tUart6.ReciveNew = 0;						/* ½ÓÊÕµ½ÐÂÊý¾ÝºóµÄ»Øµ÷º¯Êý */
 800398c:	4b11      	ldr	r3, [pc, #68]	; (80039d4 <UartVarInit+0x1a4>)
 800398e:	2200      	movs	r2, #0
 8003990:	625a      	str	r2, [r3, #36]	; 0x24
#endif
}
 8003992:	bf00      	nop
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr
 800399c:	200001d8 	.word	0x200001d8
 80039a0:	40011000 	.word	0x40011000
 80039a4:	20000200 	.word	0x20000200
 80039a8:	20000600 	.word	0x20000600
 80039ac:	20000a00 	.word	0x20000a00
 80039b0:	40004400 	.word	0x40004400
 80039b4:	20000a28 	.word	0x20000a28
 80039b8:	20000a2c 	.word	0x20000a2c
 80039bc:	2000122c 	.word	0x2000122c
 80039c0:	40004800 	.word	0x40004800
 80039c4:	20001254 	.word	0x20001254
 80039c8:	20001654 	.word	0x20001654
 80039cc:	08003801 	.word	0x08003801
 80039d0:	08003819 	.word	0x08003819
 80039d4:	20001a54 	.word	0x20001a54
 80039d8:	40011400 	.word	0x40011400
 80039dc:	20001a7c 	.word	0x20001a7c
 80039e0:	20001e7c 	.word	0x20001e7c

080039e4 <InitHardUart>:
*********************************************************************************************************
*	Func name: InitHardUart
*********************************************************************************************************
*/
static void InitHardUart(void)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b08a      	sub	sp, #40	; 0x28
 80039e8:	af00      	add	r7, sp, #0
	//UART_HandleTypeDef USART_InitStructure2;
	//UART_HandleTypeDef USART_InitStructure3;
	//UART_HandleTypeDef USART_InitStructure6;

#if UART1_FIFO_EN == 1		/* TX = PA9   RX = PA10  TX = PB6   RX = PB7*/
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80039ea:	2300      	movs	r3, #0
 80039ec:	613b      	str	r3, [r7, #16]
 80039ee:	4b68      	ldr	r3, [pc, #416]	; (8003b90 <InitHardUart+0x1ac>)
 80039f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f2:	4a67      	ldr	r2, [pc, #412]	; (8003b90 <InitHardUart+0x1ac>)
 80039f4:	f043 0301 	orr.w	r3, r3, #1
 80039f8:	6313      	str	r3, [r2, #48]	; 0x30
 80039fa:	4b65      	ldr	r3, [pc, #404]	; (8003b90 <InitHardUart+0x1ac>)
 80039fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039fe:	f003 0301 	and.w	r3, r3, #1
 8003a02:	613b      	str	r3, [r7, #16]
 8003a04:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_USART1_CLK_ENABLE();
 8003a06:	2300      	movs	r3, #0
 8003a08:	60fb      	str	r3, [r7, #12]
 8003a0a:	4b61      	ldr	r3, [pc, #388]	; (8003b90 <InitHardUart+0x1ac>)
 8003a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a0e:	4a60      	ldr	r2, [pc, #384]	; (8003b90 <InitHardUart+0x1ac>)
 8003a10:	f043 0310 	orr.w	r3, r3, #16
 8003a14:	6453      	str	r3, [r2, #68]	; 0x44
 8003a16:	4b5e      	ldr	r3, [pc, #376]	; (8003b90 <InitHardUart+0x1ac>)
 8003a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a1a:	f003 0310 	and.w	r3, r3, #16
 8003a1e:	60fb      	str	r3, [r7, #12]
 8003a20:	68fb      	ldr	r3, [r7, #12]
#if	1
	// TX
	GPIO_InitStructure.Pin = GPIO_PIN_9;
 8003a22:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a26:	617b      	str	r3, [r7, #20]
	GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8003a28:	2302      	movs	r3, #2
 8003a2a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8003a2c:	2302      	movs	r3, #2
 8003a2e:	623b      	str	r3, [r7, #32]
	GPIO_InitStructure.Pull = GPIO_NOPULL;
 8003a30:	2300      	movs	r3, #0
 8003a32:	61fb      	str	r3, [r7, #28]
	GPIO_InitStructure.Alternate = GPIO_AF7_USART1;
 8003a34:	2307      	movs	r3, #7
 8003a36:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8003a38:	f107 0314 	add.w	r3, r7, #20
 8003a3c:	4619      	mov	r1, r3
 8003a3e:	4855      	ldr	r0, [pc, #340]	; (8003b94 <InitHardUart+0x1b0>)
 8003a40:	f000 fad8 	bl	8003ff4 <HAL_GPIO_Init>
	// RX
	GPIO_InitStructure.Pin = GPIO_PIN_10;
 8003a44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a48:	617b      	str	r3, [r7, #20]
	GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8003a4a:	2302      	movs	r3, #2
 8003a4c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8003a4e:	2302      	movs	r3, #2
 8003a50:	623b      	str	r3, [r7, #32]
	GPIO_InitStructure.Pull = GPIO_NOPULL;
 8003a52:	2300      	movs	r3, #0
 8003a54:	61fb      	str	r3, [r7, #28]
	GPIO_InitStructure.Alternate = GPIO_AF7_USART1;
 8003a56:	2307      	movs	r3, #7
 8003a58:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8003a5a:	f107 0314 	add.w	r3, r7, #20
 8003a5e:	4619      	mov	r1, r3
 8003a60:	484c      	ldr	r0, [pc, #304]	; (8003b94 <InitHardUart+0x1b0>)
 8003a62:	f000 fac7 	bl	8003ff4 <HAL_GPIO_Init>
#endif
	USART_InitStructure1.Instance = USART1;
 8003a66:	4b4c      	ldr	r3, [pc, #304]	; (8003b98 <InitHardUart+0x1b4>)
 8003a68:	4a4c      	ldr	r2, [pc, #304]	; (8003b9c <InitHardUart+0x1b8>)
 8003a6a:	601a      	str	r2, [r3, #0]
	USART_InitStructure1.Init.BaudRate = UART1_BAUD;
 8003a6c:	4b4a      	ldr	r3, [pc, #296]	; (8003b98 <InitHardUart+0x1b4>)
 8003a6e:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003a72:	605a      	str	r2, [r3, #4]
	USART_InitStructure1.Init.WordLength = UART_WORDLENGTH_8B;
 8003a74:	4b48      	ldr	r3, [pc, #288]	; (8003b98 <InitHardUart+0x1b4>)
 8003a76:	2200      	movs	r2, #0
 8003a78:	609a      	str	r2, [r3, #8]
	USART_InitStructure1.Init.StopBits = UART_STOPBITS_1;
 8003a7a:	4b47      	ldr	r3, [pc, #284]	; (8003b98 <InitHardUart+0x1b4>)
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	60da      	str	r2, [r3, #12]
	USART_InitStructure1.Init.Parity = UART_PARITY_NONE;
 8003a80:	4b45      	ldr	r3, [pc, #276]	; (8003b98 <InitHardUart+0x1b4>)
 8003a82:	2200      	movs	r2, #0
 8003a84:	611a      	str	r2, [r3, #16]
	USART_InitStructure1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003a86:	4b44      	ldr	r3, [pc, #272]	; (8003b98 <InitHardUart+0x1b4>)
 8003a88:	2200      	movs	r2, #0
 8003a8a:	619a      	str	r2, [r3, #24]
	USART_InitStructure1.Init.Mode = UART_MODE_TX_RX;
 8003a8c:	4b42      	ldr	r3, [pc, #264]	; (8003b98 <InitHardUart+0x1b4>)
 8003a8e:	220c      	movs	r2, #12
 8003a90:	615a      	str	r2, [r3, #20]
	HAL_UART_Init(&USART_InitStructure1);
 8003a92:	4841      	ldr	r0, [pc, #260]	; (8003b98 <InitHardUart+0x1b4>)
 8003a94:	f7fd f97e 	bl	8000d94 <HAL_UART_Init>

	__HAL_UART_ENABLE_IT(&USART_InitStructure1,UART_IT_RXNE);
 8003a98:	4b3f      	ldr	r3, [pc, #252]	; (8003b98 <InitHardUart+0x1b4>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	68da      	ldr	r2, [r3, #12]
 8003a9e:	4b3e      	ldr	r3, [pc, #248]	; (8003b98 <InitHardUart+0x1b4>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f042 0220 	orr.w	r2, r2, #32
 8003aa6:	60da      	str	r2, [r3, #12]
	__HAL_UART_ENABLE(&USART_InitStructure1);
 8003aa8:	4b3b      	ldr	r3, [pc, #236]	; (8003b98 <InitHardUart+0x1b4>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	68da      	ldr	r2, [r3, #12]
 8003aae:	4b3a      	ldr	r3, [pc, #232]	; (8003b98 <InitHardUart+0x1b4>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ab6:	60da      	str	r2, [r3, #12]
	__HAL_UART_CLEAR_FLAG(&USART_InitStructure1, UART_FLAG_TC);
 8003ab8:	4b37      	ldr	r3, [pc, #220]	; (8003b98 <InitHardUart+0x1b4>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003ac0:	601a      	str	r2, [r3, #0]
#endif

#if UART2_FIFO_EN == 1		/* TX = PD5   RX = PD6 TX = PA2 RX = PA3  */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	60bb      	str	r3, [r7, #8]
 8003ac6:	4b32      	ldr	r3, [pc, #200]	; (8003b90 <InitHardUart+0x1ac>)
 8003ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aca:	4a31      	ldr	r2, [pc, #196]	; (8003b90 <InitHardUart+0x1ac>)
 8003acc:	f043 0301 	orr.w	r3, r3, #1
 8003ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8003ad2:	4b2f      	ldr	r3, [pc, #188]	; (8003b90 <InitHardUart+0x1ac>)
 8003ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad6:	f003 0301 	and.w	r3, r3, #1
 8003ada:	60bb      	str	r3, [r7, #8]
 8003adc:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_USART2_CLK_ENABLE();
 8003ade:	2300      	movs	r3, #0
 8003ae0:	607b      	str	r3, [r7, #4]
 8003ae2:	4b2b      	ldr	r3, [pc, #172]	; (8003b90 <InitHardUart+0x1ac>)
 8003ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae6:	4a2a      	ldr	r2, [pc, #168]	; (8003b90 <InitHardUart+0x1ac>)
 8003ae8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003aec:	6413      	str	r3, [r2, #64]	; 0x40
 8003aee:	4b28      	ldr	r3, [pc, #160]	; (8003b90 <InitHardUart+0x1ac>)
 8003af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003af6:	607b      	str	r3, [r7, #4]
 8003af8:	687b      	ldr	r3, [r7, #4]

	// TX
	GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8003afa:	2302      	movs	r3, #2
 8003afc:	61bb      	str	r3, [r7, #24]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8003afe:	2302      	movs	r3, #2
 8003b00:	623b      	str	r3, [r7, #32]
	GPIO_InitStructure.Pull = GPIO_NOPULL;
 8003b02:	2300      	movs	r3, #0
 8003b04:	61fb      	str	r3, [r7, #28]
	GPIO_InitStructure.Alternate = GPIO_AF7_USART2;
 8003b06:	2307      	movs	r3, #7
 8003b08:	627b      	str	r3, [r7, #36]	; 0x24
	// RX
	GPIO_InitStructure.Pin = GPIO_PIN_3;
 8003b0a:	2308      	movs	r3, #8
 8003b0c:	617b      	str	r3, [r7, #20]
	GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8003b0e:	2302      	movs	r3, #2
 8003b10:	61bb      	str	r3, [r7, #24]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8003b12:	2302      	movs	r3, #2
 8003b14:	623b      	str	r3, [r7, #32]
	GPIO_InitStructure.Pull = GPIO_NOPULL;
 8003b16:	2300      	movs	r3, #0
 8003b18:	61fb      	str	r3, [r7, #28]
	GPIO_InitStructure.Alternate = GPIO_AF7_USART2;
 8003b1a:	2307      	movs	r3, #7
 8003b1c:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8003b1e:	f107 0314 	add.w	r3, r7, #20
 8003b22:	4619      	mov	r1, r3
 8003b24:	481b      	ldr	r0, [pc, #108]	; (8003b94 <InitHardUart+0x1b0>)
 8003b26:	f000 fa65 	bl	8003ff4 <HAL_GPIO_Init>

	USART_InitStructure2.Instance = USART2;
 8003b2a:	4b1d      	ldr	r3, [pc, #116]	; (8003ba0 <InitHardUart+0x1bc>)
 8003b2c:	4a1d      	ldr	r2, [pc, #116]	; (8003ba4 <InitHardUart+0x1c0>)
 8003b2e:	601a      	str	r2, [r3, #0]
	USART_InitStructure2.Init.BaudRate = UART2_BAUD;
 8003b30:	4b1b      	ldr	r3, [pc, #108]	; (8003ba0 <InitHardUart+0x1bc>)
 8003b32:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003b36:	605a      	str	r2, [r3, #4]
	USART_InitStructure2.Init.WordLength = UART_WORDLENGTH_8B;
 8003b38:	4b19      	ldr	r3, [pc, #100]	; (8003ba0 <InitHardUart+0x1bc>)
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	609a      	str	r2, [r3, #8]
	USART_InitStructure2.Init.StopBits = UART_STOPBITS_1;
 8003b3e:	4b18      	ldr	r3, [pc, #96]	; (8003ba0 <InitHardUart+0x1bc>)
 8003b40:	2200      	movs	r2, #0
 8003b42:	60da      	str	r2, [r3, #12]
	USART_InitStructure2.Init.Parity = UART_PARITY_NONE;
 8003b44:	4b16      	ldr	r3, [pc, #88]	; (8003ba0 <InitHardUart+0x1bc>)
 8003b46:	2200      	movs	r2, #0
 8003b48:	611a      	str	r2, [r3, #16]
	USART_InitStructure2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003b4a:	4b15      	ldr	r3, [pc, #84]	; (8003ba0 <InitHardUart+0x1bc>)
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	619a      	str	r2, [r3, #24]
	USART_InitStructure2.Init.Mode = UART_MODE_RX;
 8003b50:	4b13      	ldr	r3, [pc, #76]	; (8003ba0 <InitHardUart+0x1bc>)
 8003b52:	2204      	movs	r2, #4
 8003b54:	615a      	str	r2, [r3, #20]
	HAL_UART_Init(&USART_InitStructure2);
 8003b56:	4812      	ldr	r0, [pc, #72]	; (8003ba0 <InitHardUart+0x1bc>)
 8003b58:	f7fd f91c 	bl	8000d94 <HAL_UART_Init>

	__HAL_UART_ENABLE_IT(&USART_InitStructure2,UART_IT_RXNE);
 8003b5c:	4b10      	ldr	r3, [pc, #64]	; (8003ba0 <InitHardUart+0x1bc>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	68da      	ldr	r2, [r3, #12]
 8003b62:	4b0f      	ldr	r3, [pc, #60]	; (8003ba0 <InitHardUart+0x1bc>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f042 0220 	orr.w	r2, r2, #32
 8003b6a:	60da      	str	r2, [r3, #12]
	__HAL_UART_ENABLE(&USART_InitStructure2);
 8003b6c:	4b0c      	ldr	r3, [pc, #48]	; (8003ba0 <InitHardUart+0x1bc>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	68da      	ldr	r2, [r3, #12]
 8003b72:	4b0b      	ldr	r3, [pc, #44]	; (8003ba0 <InitHardUart+0x1bc>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b7a:	60da      	str	r2, [r3, #12]
	__HAL_UART_CLEAR_FLAG(&USART_InitStructure2, UART_FLAG_TC);
 8003b7c:	4b08      	ldr	r3, [pc, #32]	; (8003ba0 <InitHardUart+0x1bc>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003b84:	601a      	str	r2, [r3, #0]
	__HAL_UART_ENABLE_IT(&USART_InitStructure6,UART_IT_RXNE);
	__HAL_UART_ENABLE(&USART_InitStructure6);
	__HAL_UART_CLEAR_FLAG(&USART_InitStructure6, UART_FLAG_TC);
#endif
#endif
}
 8003b86:	bf00      	nop
 8003b88:	3728      	adds	r7, #40	; 0x28
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	40023800 	.word	0x40023800
 8003b94:	40020000 	.word	0x40020000
 8003b98:	2000227c 	.word	0x2000227c
 8003b9c:	40011000 	.word	0x40011000
 8003ba0:	200022c0 	.word	0x200022c0
 8003ba4:	40004400 	.word	0x40004400

08003ba8 <ConfigUartNVIC>:

static void ConfigUartNVIC(void)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	af00      	add	r7, sp, #0
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003bac:	2007      	movs	r0, #7
 8003bae:	f000 f9df 	bl	8003f70 <HAL_NVIC_SetPriorityGrouping>

#if UART1_FIFO_EN == 1
	  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	2100      	movs	r1, #0
 8003bb6:	2025      	movs	r0, #37	; 0x25
 8003bb8:	f000 f9e5 	bl	8003f86 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003bbc:	2025      	movs	r0, #37	; 0x25
 8003bbe:	f000 f9fe 	bl	8003fbe <HAL_NVIC_EnableIRQ>
#endif

#if UART2_FIFO_EN == 1
	  HAL_NVIC_SetPriority(USART2_IRQn, 0, 1);
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	2100      	movs	r1, #0
 8003bc6:	2026      	movs	r0, #38	; 0x26
 8003bc8:	f000 f9dd 	bl	8003f86 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003bcc:	2026      	movs	r0, #38	; 0x26
 8003bce:	f000 f9f6 	bl	8003fbe <HAL_NVIC_EnableIRQ>
#endif

#if UART3_FIFO_EN == 1
	  HAL_NVIC_SetPriority(USART3_IRQn, 0, 2);
 8003bd2:	2202      	movs	r2, #2
 8003bd4:	2100      	movs	r1, #0
 8003bd6:	2027      	movs	r0, #39	; 0x27
 8003bd8:	f000 f9d5 	bl	8003f86 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003bdc:	2027      	movs	r0, #39	; 0x27
 8003bde:	f000 f9ee 	bl	8003fbe <HAL_NVIC_EnableIRQ>
	  HAL_NVIC_SetPriority(UART5_IRQn, 0, 4);
	  HAL_NVIC_EnableIRQ(UART5_IRQn);
#endif

#if UART6_FIFO_EN == 1
	  HAL_NVIC_SetPriority(USART6_IRQn, 0, 5);
 8003be2:	2205      	movs	r2, #5
 8003be4:	2100      	movs	r1, #0
 8003be6:	2047      	movs	r0, #71	; 0x47
 8003be8:	f000 f9cd 	bl	8003f86 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003bec:	2047      	movs	r0, #71	; 0x47
 8003bee:	f000 f9e6 	bl	8003fbe <HAL_NVIC_EnableIRQ>
#endif
}
 8003bf2:	bf00      	nop
 8003bf4:	bd80      	pop	{r7, pc}
	...

08003bf8 <UART1_Transmit>:
  * @param  data: 송신할 데이터 버퍼의 포인터
  * @param  size: 송신할 데이터 크기
  * @retval HAL 상태 (HAL_OK, HAL_ERROR, HAL_BUSY, HAL_TIMEOUT)
 */
HAL_StatusTypeDef UART1_Transmit(uint8_t *data, uint16_t size)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b084      	sub	sp, #16
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
 8003c00:	460b      	mov	r3, r1
 8003c02:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status;

  // 폴링 방식으로 데이터 송신
  status = HAL_UART_Transmit(&USART_InitStructure1, data, size, 1000); // 타임아웃 1000ms
 8003c04:	887a      	ldrh	r2, [r7, #2]
 8003c06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c0a:	6879      	ldr	r1, [r7, #4]
 8003c0c:	4807      	ldr	r0, [pc, #28]	; (8003c2c <UART1_Transmit+0x34>)
 8003c0e:	f7fd f918 	bl	8000e42 <HAL_UART_Transmit>
 8003c12:	4603      	mov	r3, r0
 8003c14:	73fb      	strb	r3, [r7, #15]

  // 송신 완료 플래그 클리어
  __HAL_UART_CLEAR_FLAG(&USART_InitStructure1, UART_FLAG_TC);
 8003c16:	4b05      	ldr	r3, [pc, #20]	; (8003c2c <UART1_Transmit+0x34>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c1e:	601a      	str	r2, [r3, #0]

  return status;
 8003c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3710      	adds	r7, #16
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}
 8003c2a:	bf00      	nop
 8003c2c:	2000227c 	.word	0x2000227c

08003c30 <UART1_Transmit_String>:
  * @brief  UART1을 통해 문자열을 송신하는 함수
  * @param  str: 송신할 문자열
  * @retval HAL 상태 (HAL_OK, HAL_ERROR, HAL_BUSY, HAL_TIMEOUT)
  */
HAL_StatusTypeDef UART1_Transmit_String(char *str)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b082      	sub	sp, #8
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  return UART1_Transmit((uint8_t*)str, strlen(str));
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	f7fc fac5 	bl	80001c8 <strlen>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	4619      	mov	r1, r3
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	f7ff ffd7 	bl	8003bf8 <UART1_Transmit>
 8003c4a:	4603      	mov	r3, r0
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	3708      	adds	r7, #8
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}

08003c54 <bsp_Init>:
 *      Author: compro
 */
#include "bsp.h"

void bsp_Init(void)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	af00      	add	r7, sp, #0
	bsp_InitUart();
 8003c58:	f7ff fdc7 	bl	80037ea <bsp_InitUart>
	bsp_InitLed();
 8003c5c:	f7fe fea6 	bl	80029ac <bsp_InitLed>
	bsp_InitKey();
 8003c60:	f7fe fd12 	bl	8002688 <bsp_InitKey>

	bsp_InitExtSRAM();
 8003c64:	f7fe fa3e 	bl	80020e4 <bsp_InitExtSRAM>

	bsp_InitI2C();
 8003c68:	f7fe fc34 	bl	80024d4 <bsp_InitI2C>
	bsp_InitTimer();
 8003c6c:	f7ff fcb2 	bl	80035d4 <bsp_InitTimer>

	//bsp_DelayMS(20);
	HAL_Delay(20);
 8003c70:	2014      	movs	r0, #20
 8003c72:	f000 f889 	bl	8003d88 <HAL_Delay>
}
 8003c76:	bf00      	nop
 8003c78:	bd80      	pop	{r7, pc}
	...

08003c7c <bsp_Idle>:

extern void SaveScreenToBmp(uint16_t _index);
void bsp_Idle(void)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	af00      	add	r7, sp, #0
	if (bsp_GetKey2() == SYS_DOWN_K1K2)
 8003c80:	f7fe fe44 	bl	800290c <bsp_GetKey2>
 8003c84:	4603      	mov	r3, r0
 8003c86:	2b19      	cmp	r3, #25
 8003c88:	d108      	bne.n	8003c9c <bsp_Idle+0x20>
	{
		static uint16_t s_file_no = 0;
		SaveScreenToBmp(s_file_no++);
 8003c8a:	4b05      	ldr	r3, [pc, #20]	; (8003ca0 <bsp_Idle+0x24>)
 8003c8c:	881b      	ldrh	r3, [r3, #0]
 8003c8e:	1c5a      	adds	r2, r3, #1
 8003c90:	b291      	uxth	r1, r2
 8003c92:	4a03      	ldr	r2, [pc, #12]	; (8003ca0 <bsp_Idle+0x24>)
 8003c94:	8011      	strh	r1, [r2, #0]
 8003c96:	4618      	mov	r0, r3
 8003c98:	f7fc fc6a 	bl	8000570 <SaveScreenToBmp>
	}
}
 8003c9c:	bf00      	nop
 8003c9e:	bd80      	pop	{r7, pc}
 8003ca0:	20002304 	.word	0x20002304

08003ca4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003ca8:	4b0e      	ldr	r3, [pc, #56]	; (8003ce4 <HAL_Init+0x40>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a0d      	ldr	r2, [pc, #52]	; (8003ce4 <HAL_Init+0x40>)
 8003cae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003cb2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003cb4:	4b0b      	ldr	r3, [pc, #44]	; (8003ce4 <HAL_Init+0x40>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a0a      	ldr	r2, [pc, #40]	; (8003ce4 <HAL_Init+0x40>)
 8003cba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003cbe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003cc0:	4b08      	ldr	r3, [pc, #32]	; (8003ce4 <HAL_Init+0x40>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a07      	ldr	r2, [pc, #28]	; (8003ce4 <HAL_Init+0x40>)
 8003cc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ccc:	2003      	movs	r0, #3
 8003cce:	f000 f94f 	bl	8003f70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003cd2:	200f      	movs	r0, #15
 8003cd4:	f000 f808 	bl	8003ce8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003cd8:	f7fc ffe2 	bl	8000ca0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003cdc:	2300      	movs	r3, #0
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	40023c00 	.word	0x40023c00

08003ce8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b082      	sub	sp, #8
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003cf0:	4b12      	ldr	r3, [pc, #72]	; (8003d3c <HAL_InitTick+0x54>)
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	4b12      	ldr	r3, [pc, #72]	; (8003d40 <HAL_InitTick+0x58>)
 8003cf6:	781b      	ldrb	r3, [r3, #0]
 8003cf8:	4619      	mov	r1, r3
 8003cfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003cfe:	fbb3 f3f1 	udiv	r3, r3, r1
 8003d02:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d06:	4618      	mov	r0, r3
 8003d08:	f000 f967 	bl	8003fda <HAL_SYSTICK_Config>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d001      	beq.n	8003d16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e00e      	b.n	8003d34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2b0f      	cmp	r3, #15
 8003d1a:	d80a      	bhi.n	8003d32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	6879      	ldr	r1, [r7, #4]
 8003d20:	f04f 30ff 	mov.w	r0, #4294967295
 8003d24:	f000 f92f 	bl	8003f86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003d28:	4a06      	ldr	r2, [pc, #24]	; (8003d44 <HAL_InitTick+0x5c>)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	e000      	b.n	8003d34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3708      	adds	r7, #8
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	20000000 	.word	0x20000000
 8003d40:	20000014 	.word	0x20000014
 8003d44:	20000010 	.word	0x20000010

08003d48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003d4c:	4b06      	ldr	r3, [pc, #24]	; (8003d68 <HAL_IncTick+0x20>)
 8003d4e:	781b      	ldrb	r3, [r3, #0]
 8003d50:	461a      	mov	r2, r3
 8003d52:	4b06      	ldr	r3, [pc, #24]	; (8003d6c <HAL_IncTick+0x24>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4413      	add	r3, r2
 8003d58:	4a04      	ldr	r2, [pc, #16]	; (8003d6c <HAL_IncTick+0x24>)
 8003d5a:	6013      	str	r3, [r2, #0]
}
 8003d5c:	bf00      	nop
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d64:	4770      	bx	lr
 8003d66:	bf00      	nop
 8003d68:	20000014 	.word	0x20000014
 8003d6c:	20002308 	.word	0x20002308

08003d70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d70:	b480      	push	{r7}
 8003d72:	af00      	add	r7, sp, #0
  return uwTick;
 8003d74:	4b03      	ldr	r3, [pc, #12]	; (8003d84 <HAL_GetTick+0x14>)
 8003d76:	681b      	ldr	r3, [r3, #0]
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d80:	4770      	bx	lr
 8003d82:	bf00      	nop
 8003d84:	20002308 	.word	0x20002308

08003d88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b084      	sub	sp, #16
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003d90:	f7ff ffee 	bl	8003d70 <HAL_GetTick>
 8003d94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003da0:	d005      	beq.n	8003dae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003da2:	4b0a      	ldr	r3, [pc, #40]	; (8003dcc <HAL_Delay+0x44>)
 8003da4:	781b      	ldrb	r3, [r3, #0]
 8003da6:	461a      	mov	r2, r3
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	4413      	add	r3, r2
 8003dac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003dae:	bf00      	nop
 8003db0:	f7ff ffde 	bl	8003d70 <HAL_GetTick>
 8003db4:	4602      	mov	r2, r0
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	1ad3      	subs	r3, r2, r3
 8003dba:	68fa      	ldr	r2, [r7, #12]
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d8f7      	bhi.n	8003db0 <HAL_Delay+0x28>
  {
  }
}
 8003dc0:	bf00      	nop
 8003dc2:	bf00      	nop
 8003dc4:	3710      	adds	r7, #16
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
 8003dca:	bf00      	nop
 8003dcc:	20000014 	.word	0x20000014

08003dd0 <__NVIC_SetPriorityGrouping>:
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b085      	sub	sp, #20
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	f003 0307 	and.w	r3, r3, #7
 8003dde:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003de0:	4b0c      	ldr	r3, [pc, #48]	; (8003e14 <__NVIC_SetPriorityGrouping+0x44>)
 8003de2:	68db      	ldr	r3, [r3, #12]
 8003de4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003de6:	68ba      	ldr	r2, [r7, #8]
 8003de8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003dec:	4013      	ands	r3, r2
 8003dee:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003df8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003dfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003e02:	4a04      	ldr	r2, [pc, #16]	; (8003e14 <__NVIC_SetPriorityGrouping+0x44>)
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	60d3      	str	r3, [r2, #12]
}
 8003e08:	bf00      	nop
 8003e0a:	3714      	adds	r7, #20
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr
 8003e14:	e000ed00 	.word	0xe000ed00

08003e18 <__NVIC_GetPriorityGrouping>:
{
 8003e18:	b480      	push	{r7}
 8003e1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e1c:	4b04      	ldr	r3, [pc, #16]	; (8003e30 <__NVIC_GetPriorityGrouping+0x18>)
 8003e1e:	68db      	ldr	r3, [r3, #12]
 8003e20:	0a1b      	lsrs	r3, r3, #8
 8003e22:	f003 0307 	and.w	r3, r3, #7
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr
 8003e30:	e000ed00 	.word	0xe000ed00

08003e34 <__NVIC_EnableIRQ>:
{
 8003e34:	b480      	push	{r7}
 8003e36:	b083      	sub	sp, #12
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	db0b      	blt.n	8003e5e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e46:	79fb      	ldrb	r3, [r7, #7]
 8003e48:	f003 021f 	and.w	r2, r3, #31
 8003e4c:	4907      	ldr	r1, [pc, #28]	; (8003e6c <__NVIC_EnableIRQ+0x38>)
 8003e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e52:	095b      	lsrs	r3, r3, #5
 8003e54:	2001      	movs	r0, #1
 8003e56:	fa00 f202 	lsl.w	r2, r0, r2
 8003e5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003e5e:	bf00      	nop
 8003e60:	370c      	adds	r7, #12
 8003e62:	46bd      	mov	sp, r7
 8003e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e68:	4770      	bx	lr
 8003e6a:	bf00      	nop
 8003e6c:	e000e100 	.word	0xe000e100

08003e70 <__NVIC_SetPriority>:
{
 8003e70:	b480      	push	{r7}
 8003e72:	b083      	sub	sp, #12
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	4603      	mov	r3, r0
 8003e78:	6039      	str	r1, [r7, #0]
 8003e7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	db0a      	blt.n	8003e9a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	b2da      	uxtb	r2, r3
 8003e88:	490c      	ldr	r1, [pc, #48]	; (8003ebc <__NVIC_SetPriority+0x4c>)
 8003e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e8e:	0112      	lsls	r2, r2, #4
 8003e90:	b2d2      	uxtb	r2, r2
 8003e92:	440b      	add	r3, r1
 8003e94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003e98:	e00a      	b.n	8003eb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	b2da      	uxtb	r2, r3
 8003e9e:	4908      	ldr	r1, [pc, #32]	; (8003ec0 <__NVIC_SetPriority+0x50>)
 8003ea0:	79fb      	ldrb	r3, [r7, #7]
 8003ea2:	f003 030f 	and.w	r3, r3, #15
 8003ea6:	3b04      	subs	r3, #4
 8003ea8:	0112      	lsls	r2, r2, #4
 8003eaa:	b2d2      	uxtb	r2, r2
 8003eac:	440b      	add	r3, r1
 8003eae:	761a      	strb	r2, [r3, #24]
}
 8003eb0:	bf00      	nop
 8003eb2:	370c      	adds	r7, #12
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr
 8003ebc:	e000e100 	.word	0xe000e100
 8003ec0:	e000ed00 	.word	0xe000ed00

08003ec4 <NVIC_EncodePriority>:
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b089      	sub	sp, #36	; 0x24
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	60f8      	str	r0, [r7, #12]
 8003ecc:	60b9      	str	r1, [r7, #8]
 8003ece:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	f003 0307 	and.w	r3, r3, #7
 8003ed6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ed8:	69fb      	ldr	r3, [r7, #28]
 8003eda:	f1c3 0307 	rsb	r3, r3, #7
 8003ede:	2b04      	cmp	r3, #4
 8003ee0:	bf28      	it	cs
 8003ee2:	2304      	movcs	r3, #4
 8003ee4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ee6:	69fb      	ldr	r3, [r7, #28]
 8003ee8:	3304      	adds	r3, #4
 8003eea:	2b06      	cmp	r3, #6
 8003eec:	d902      	bls.n	8003ef4 <NVIC_EncodePriority+0x30>
 8003eee:	69fb      	ldr	r3, [r7, #28]
 8003ef0:	3b03      	subs	r3, #3
 8003ef2:	e000      	b.n	8003ef6 <NVIC_EncodePriority+0x32>
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ef8:	f04f 32ff 	mov.w	r2, #4294967295
 8003efc:	69bb      	ldr	r3, [r7, #24]
 8003efe:	fa02 f303 	lsl.w	r3, r2, r3
 8003f02:	43da      	mvns	r2, r3
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	401a      	ands	r2, r3
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f0c:	f04f 31ff 	mov.w	r1, #4294967295
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	fa01 f303 	lsl.w	r3, r1, r3
 8003f16:	43d9      	mvns	r1, r3
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f1c:	4313      	orrs	r3, r2
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3724      	adds	r7, #36	; 0x24
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr
	...

08003f2c <SysTick_Config>:
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b082      	sub	sp, #8
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	3b01      	subs	r3, #1
 8003f38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f3c:	d301      	bcc.n	8003f42 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e00f      	b.n	8003f62 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f42:	4a0a      	ldr	r2, [pc, #40]	; (8003f6c <SysTick_Config+0x40>)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	3b01      	subs	r3, #1
 8003f48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003f4a:	210f      	movs	r1, #15
 8003f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8003f50:	f7ff ff8e 	bl	8003e70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f54:	4b05      	ldr	r3, [pc, #20]	; (8003f6c <SysTick_Config+0x40>)
 8003f56:	2200      	movs	r2, #0
 8003f58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f5a:	4b04      	ldr	r3, [pc, #16]	; (8003f6c <SysTick_Config+0x40>)
 8003f5c:	2207      	movs	r2, #7
 8003f5e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8003f60:	2300      	movs	r3, #0
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3708      	adds	r7, #8
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}
 8003f6a:	bf00      	nop
 8003f6c:	e000e010 	.word	0xe000e010

08003f70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b082      	sub	sp, #8
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	f7ff ff29 	bl	8003dd0 <__NVIC_SetPriorityGrouping>
}
 8003f7e:	bf00      	nop
 8003f80:	3708      	adds	r7, #8
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}

08003f86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003f86:	b580      	push	{r7, lr}
 8003f88:	b086      	sub	sp, #24
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	60b9      	str	r1, [r7, #8]
 8003f90:	607a      	str	r2, [r7, #4]
 8003f92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003f94:	2300      	movs	r3, #0
 8003f96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003f98:	f7ff ff3e 	bl	8003e18 <__NVIC_GetPriorityGrouping>
 8003f9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f9e:	687a      	ldr	r2, [r7, #4]
 8003fa0:	68b9      	ldr	r1, [r7, #8]
 8003fa2:	6978      	ldr	r0, [r7, #20]
 8003fa4:	f7ff ff8e 	bl	8003ec4 <NVIC_EncodePriority>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003fae:	4611      	mov	r1, r2
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f7ff ff5d 	bl	8003e70 <__NVIC_SetPriority>
}
 8003fb6:	bf00      	nop
 8003fb8:	3718      	adds	r7, #24
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}

08003fbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003fbe:	b580      	push	{r7, lr}
 8003fc0:	b082      	sub	sp, #8
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003fc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f7ff ff31 	bl	8003e34 <__NVIC_EnableIRQ>
}
 8003fd2:	bf00      	nop
 8003fd4:	3708      	adds	r7, #8
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}

08003fda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003fda:	b580      	push	{r7, lr}
 8003fdc:	b082      	sub	sp, #8
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f7ff ffa2 	bl	8003f2c <SysTick_Config>
 8003fe8:	4603      	mov	r3, r0
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	3708      	adds	r7, #8
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}
	...

08003ff4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b089      	sub	sp, #36	; 0x24
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003ffe:	2300      	movs	r3, #0
 8004000:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004002:	2300      	movs	r3, #0
 8004004:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004006:	2300      	movs	r3, #0
 8004008:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800400a:	2300      	movs	r3, #0
 800400c:	61fb      	str	r3, [r7, #28]
 800400e:	e16b      	b.n	80042e8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004010:	2201      	movs	r2, #1
 8004012:	69fb      	ldr	r3, [r7, #28]
 8004014:	fa02 f303 	lsl.w	r3, r2, r3
 8004018:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	697a      	ldr	r2, [r7, #20]
 8004020:	4013      	ands	r3, r2
 8004022:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004024:	693a      	ldr	r2, [r7, #16]
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	429a      	cmp	r2, r3
 800402a:	f040 815a 	bne.w	80042e2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	f003 0303 	and.w	r3, r3, #3
 8004036:	2b01      	cmp	r3, #1
 8004038:	d005      	beq.n	8004046 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004042:	2b02      	cmp	r3, #2
 8004044:	d130      	bne.n	80040a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800404c:	69fb      	ldr	r3, [r7, #28]
 800404e:	005b      	lsls	r3, r3, #1
 8004050:	2203      	movs	r2, #3
 8004052:	fa02 f303 	lsl.w	r3, r2, r3
 8004056:	43db      	mvns	r3, r3
 8004058:	69ba      	ldr	r2, [r7, #24]
 800405a:	4013      	ands	r3, r2
 800405c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	68da      	ldr	r2, [r3, #12]
 8004062:	69fb      	ldr	r3, [r7, #28]
 8004064:	005b      	lsls	r3, r3, #1
 8004066:	fa02 f303 	lsl.w	r3, r2, r3
 800406a:	69ba      	ldr	r2, [r7, #24]
 800406c:	4313      	orrs	r3, r2
 800406e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	69ba      	ldr	r2, [r7, #24]
 8004074:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800407c:	2201      	movs	r2, #1
 800407e:	69fb      	ldr	r3, [r7, #28]
 8004080:	fa02 f303 	lsl.w	r3, r2, r3
 8004084:	43db      	mvns	r3, r3
 8004086:	69ba      	ldr	r2, [r7, #24]
 8004088:	4013      	ands	r3, r2
 800408a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	091b      	lsrs	r3, r3, #4
 8004092:	f003 0201 	and.w	r2, r3, #1
 8004096:	69fb      	ldr	r3, [r7, #28]
 8004098:	fa02 f303 	lsl.w	r3, r2, r3
 800409c:	69ba      	ldr	r2, [r7, #24]
 800409e:	4313      	orrs	r3, r2
 80040a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	69ba      	ldr	r2, [r7, #24]
 80040a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	f003 0303 	and.w	r3, r3, #3
 80040b0:	2b03      	cmp	r3, #3
 80040b2:	d017      	beq.n	80040e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	68db      	ldr	r3, [r3, #12]
 80040b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80040ba:	69fb      	ldr	r3, [r7, #28]
 80040bc:	005b      	lsls	r3, r3, #1
 80040be:	2203      	movs	r2, #3
 80040c0:	fa02 f303 	lsl.w	r3, r2, r3
 80040c4:	43db      	mvns	r3, r3
 80040c6:	69ba      	ldr	r2, [r7, #24]
 80040c8:	4013      	ands	r3, r2
 80040ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	689a      	ldr	r2, [r3, #8]
 80040d0:	69fb      	ldr	r3, [r7, #28]
 80040d2:	005b      	lsls	r3, r3, #1
 80040d4:	fa02 f303 	lsl.w	r3, r2, r3
 80040d8:	69ba      	ldr	r2, [r7, #24]
 80040da:	4313      	orrs	r3, r2
 80040dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	69ba      	ldr	r2, [r7, #24]
 80040e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	f003 0303 	and.w	r3, r3, #3
 80040ec:	2b02      	cmp	r3, #2
 80040ee:	d123      	bne.n	8004138 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80040f0:	69fb      	ldr	r3, [r7, #28]
 80040f2:	08da      	lsrs	r2, r3, #3
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	3208      	adds	r2, #8
 80040f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80040fe:	69fb      	ldr	r3, [r7, #28]
 8004100:	f003 0307 	and.w	r3, r3, #7
 8004104:	009b      	lsls	r3, r3, #2
 8004106:	220f      	movs	r2, #15
 8004108:	fa02 f303 	lsl.w	r3, r2, r3
 800410c:	43db      	mvns	r3, r3
 800410e:	69ba      	ldr	r2, [r7, #24]
 8004110:	4013      	ands	r3, r2
 8004112:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	691a      	ldr	r2, [r3, #16]
 8004118:	69fb      	ldr	r3, [r7, #28]
 800411a:	f003 0307 	and.w	r3, r3, #7
 800411e:	009b      	lsls	r3, r3, #2
 8004120:	fa02 f303 	lsl.w	r3, r2, r3
 8004124:	69ba      	ldr	r2, [r7, #24]
 8004126:	4313      	orrs	r3, r2
 8004128:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800412a:	69fb      	ldr	r3, [r7, #28]
 800412c:	08da      	lsrs	r2, r3, #3
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	3208      	adds	r2, #8
 8004132:	69b9      	ldr	r1, [r7, #24]
 8004134:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800413e:	69fb      	ldr	r3, [r7, #28]
 8004140:	005b      	lsls	r3, r3, #1
 8004142:	2203      	movs	r2, #3
 8004144:	fa02 f303 	lsl.w	r3, r2, r3
 8004148:	43db      	mvns	r3, r3
 800414a:	69ba      	ldr	r2, [r7, #24]
 800414c:	4013      	ands	r3, r2
 800414e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	f003 0203 	and.w	r2, r3, #3
 8004158:	69fb      	ldr	r3, [r7, #28]
 800415a:	005b      	lsls	r3, r3, #1
 800415c:	fa02 f303 	lsl.w	r3, r2, r3
 8004160:	69ba      	ldr	r2, [r7, #24]
 8004162:	4313      	orrs	r3, r2
 8004164:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	69ba      	ldr	r2, [r7, #24]
 800416a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004174:	2b00      	cmp	r3, #0
 8004176:	f000 80b4 	beq.w	80042e2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800417a:	2300      	movs	r3, #0
 800417c:	60fb      	str	r3, [r7, #12]
 800417e:	4b60      	ldr	r3, [pc, #384]	; (8004300 <HAL_GPIO_Init+0x30c>)
 8004180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004182:	4a5f      	ldr	r2, [pc, #380]	; (8004300 <HAL_GPIO_Init+0x30c>)
 8004184:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004188:	6453      	str	r3, [r2, #68]	; 0x44
 800418a:	4b5d      	ldr	r3, [pc, #372]	; (8004300 <HAL_GPIO_Init+0x30c>)
 800418c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800418e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004192:	60fb      	str	r3, [r7, #12]
 8004194:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004196:	4a5b      	ldr	r2, [pc, #364]	; (8004304 <HAL_GPIO_Init+0x310>)
 8004198:	69fb      	ldr	r3, [r7, #28]
 800419a:	089b      	lsrs	r3, r3, #2
 800419c:	3302      	adds	r3, #2
 800419e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80041a4:	69fb      	ldr	r3, [r7, #28]
 80041a6:	f003 0303 	and.w	r3, r3, #3
 80041aa:	009b      	lsls	r3, r3, #2
 80041ac:	220f      	movs	r2, #15
 80041ae:	fa02 f303 	lsl.w	r3, r2, r3
 80041b2:	43db      	mvns	r3, r3
 80041b4:	69ba      	ldr	r2, [r7, #24]
 80041b6:	4013      	ands	r3, r2
 80041b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	4a52      	ldr	r2, [pc, #328]	; (8004308 <HAL_GPIO_Init+0x314>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d02b      	beq.n	800421a <HAL_GPIO_Init+0x226>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	4a51      	ldr	r2, [pc, #324]	; (800430c <HAL_GPIO_Init+0x318>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d025      	beq.n	8004216 <HAL_GPIO_Init+0x222>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4a50      	ldr	r2, [pc, #320]	; (8004310 <HAL_GPIO_Init+0x31c>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d01f      	beq.n	8004212 <HAL_GPIO_Init+0x21e>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4a4f      	ldr	r2, [pc, #316]	; (8004314 <HAL_GPIO_Init+0x320>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d019      	beq.n	800420e <HAL_GPIO_Init+0x21a>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	4a4e      	ldr	r2, [pc, #312]	; (8004318 <HAL_GPIO_Init+0x324>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d013      	beq.n	800420a <HAL_GPIO_Init+0x216>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	4a4d      	ldr	r2, [pc, #308]	; (800431c <HAL_GPIO_Init+0x328>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d00d      	beq.n	8004206 <HAL_GPIO_Init+0x212>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	4a4c      	ldr	r2, [pc, #304]	; (8004320 <HAL_GPIO_Init+0x32c>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d007      	beq.n	8004202 <HAL_GPIO_Init+0x20e>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	4a4b      	ldr	r2, [pc, #300]	; (8004324 <HAL_GPIO_Init+0x330>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d101      	bne.n	80041fe <HAL_GPIO_Init+0x20a>
 80041fa:	2307      	movs	r3, #7
 80041fc:	e00e      	b.n	800421c <HAL_GPIO_Init+0x228>
 80041fe:	2308      	movs	r3, #8
 8004200:	e00c      	b.n	800421c <HAL_GPIO_Init+0x228>
 8004202:	2306      	movs	r3, #6
 8004204:	e00a      	b.n	800421c <HAL_GPIO_Init+0x228>
 8004206:	2305      	movs	r3, #5
 8004208:	e008      	b.n	800421c <HAL_GPIO_Init+0x228>
 800420a:	2304      	movs	r3, #4
 800420c:	e006      	b.n	800421c <HAL_GPIO_Init+0x228>
 800420e:	2303      	movs	r3, #3
 8004210:	e004      	b.n	800421c <HAL_GPIO_Init+0x228>
 8004212:	2302      	movs	r3, #2
 8004214:	e002      	b.n	800421c <HAL_GPIO_Init+0x228>
 8004216:	2301      	movs	r3, #1
 8004218:	e000      	b.n	800421c <HAL_GPIO_Init+0x228>
 800421a:	2300      	movs	r3, #0
 800421c:	69fa      	ldr	r2, [r7, #28]
 800421e:	f002 0203 	and.w	r2, r2, #3
 8004222:	0092      	lsls	r2, r2, #2
 8004224:	4093      	lsls	r3, r2
 8004226:	69ba      	ldr	r2, [r7, #24]
 8004228:	4313      	orrs	r3, r2
 800422a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800422c:	4935      	ldr	r1, [pc, #212]	; (8004304 <HAL_GPIO_Init+0x310>)
 800422e:	69fb      	ldr	r3, [r7, #28]
 8004230:	089b      	lsrs	r3, r3, #2
 8004232:	3302      	adds	r3, #2
 8004234:	69ba      	ldr	r2, [r7, #24]
 8004236:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800423a:	4b3b      	ldr	r3, [pc, #236]	; (8004328 <HAL_GPIO_Init+0x334>)
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	43db      	mvns	r3, r3
 8004244:	69ba      	ldr	r2, [r7, #24]
 8004246:	4013      	ands	r3, r2
 8004248:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004252:	2b00      	cmp	r3, #0
 8004254:	d003      	beq.n	800425e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004256:	69ba      	ldr	r2, [r7, #24]
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	4313      	orrs	r3, r2
 800425c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800425e:	4a32      	ldr	r2, [pc, #200]	; (8004328 <HAL_GPIO_Init+0x334>)
 8004260:	69bb      	ldr	r3, [r7, #24]
 8004262:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004264:	4b30      	ldr	r3, [pc, #192]	; (8004328 <HAL_GPIO_Init+0x334>)
 8004266:	68db      	ldr	r3, [r3, #12]
 8004268:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	43db      	mvns	r3, r3
 800426e:	69ba      	ldr	r2, [r7, #24]
 8004270:	4013      	ands	r3, r2
 8004272:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800427c:	2b00      	cmp	r3, #0
 800427e:	d003      	beq.n	8004288 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004280:	69ba      	ldr	r2, [r7, #24]
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	4313      	orrs	r3, r2
 8004286:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004288:	4a27      	ldr	r2, [pc, #156]	; (8004328 <HAL_GPIO_Init+0x334>)
 800428a:	69bb      	ldr	r3, [r7, #24]
 800428c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800428e:	4b26      	ldr	r3, [pc, #152]	; (8004328 <HAL_GPIO_Init+0x334>)
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	43db      	mvns	r3, r3
 8004298:	69ba      	ldr	r2, [r7, #24]
 800429a:	4013      	ands	r3, r2
 800429c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d003      	beq.n	80042b2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80042aa:	69ba      	ldr	r2, [r7, #24]
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	4313      	orrs	r3, r2
 80042b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80042b2:	4a1d      	ldr	r2, [pc, #116]	; (8004328 <HAL_GPIO_Init+0x334>)
 80042b4:	69bb      	ldr	r3, [r7, #24]
 80042b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80042b8:	4b1b      	ldr	r3, [pc, #108]	; (8004328 <HAL_GPIO_Init+0x334>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	43db      	mvns	r3, r3
 80042c2:	69ba      	ldr	r2, [r7, #24]
 80042c4:	4013      	ands	r3, r2
 80042c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d003      	beq.n	80042dc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80042d4:	69ba      	ldr	r2, [r7, #24]
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	4313      	orrs	r3, r2
 80042da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80042dc:	4a12      	ldr	r2, [pc, #72]	; (8004328 <HAL_GPIO_Init+0x334>)
 80042de:	69bb      	ldr	r3, [r7, #24]
 80042e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80042e2:	69fb      	ldr	r3, [r7, #28]
 80042e4:	3301      	adds	r3, #1
 80042e6:	61fb      	str	r3, [r7, #28]
 80042e8:	69fb      	ldr	r3, [r7, #28]
 80042ea:	2b0f      	cmp	r3, #15
 80042ec:	f67f ae90 	bls.w	8004010 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80042f0:	bf00      	nop
 80042f2:	bf00      	nop
 80042f4:	3724      	adds	r7, #36	; 0x24
 80042f6:	46bd      	mov	sp, r7
 80042f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fc:	4770      	bx	lr
 80042fe:	bf00      	nop
 8004300:	40023800 	.word	0x40023800
 8004304:	40013800 	.word	0x40013800
 8004308:	40020000 	.word	0x40020000
 800430c:	40020400 	.word	0x40020400
 8004310:	40020800 	.word	0x40020800
 8004314:	40020c00 	.word	0x40020c00
 8004318:	40021000 	.word	0x40021000
 800431c:	40021400 	.word	0x40021400
 8004320:	40021800 	.word	0x40021800
 8004324:	40021c00 	.word	0x40021c00
 8004328:	40013c00 	.word	0x40013c00

0800432c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800432c:	b480      	push	{r7}
 800432e:	b085      	sub	sp, #20
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
 8004334:	460b      	mov	r3, r1
 8004336:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	691a      	ldr	r2, [r3, #16]
 800433c:	887b      	ldrh	r3, [r7, #2]
 800433e:	4013      	ands	r3, r2
 8004340:	2b00      	cmp	r3, #0
 8004342:	d002      	beq.n	800434a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004344:	2301      	movs	r3, #1
 8004346:	73fb      	strb	r3, [r7, #15]
 8004348:	e001      	b.n	800434e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800434a:	2300      	movs	r3, #0
 800434c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800434e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004350:	4618      	mov	r0, r3
 8004352:	3714      	adds	r7, #20
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr

0800435c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800435c:	b480      	push	{r7}
 800435e:	b083      	sub	sp, #12
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
 8004364:	460b      	mov	r3, r1
 8004366:	807b      	strh	r3, [r7, #2]
 8004368:	4613      	mov	r3, r2
 800436a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800436c:	787b      	ldrb	r3, [r7, #1]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d003      	beq.n	800437a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004372:	887a      	ldrh	r2, [r7, #2]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004378:	e003      	b.n	8004382 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800437a:	887b      	ldrh	r3, [r7, #2]
 800437c:	041a      	lsls	r2, r3, #16
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	619a      	str	r2, [r3, #24]
}
 8004382:	bf00      	nop
 8004384:	370c      	adds	r7, #12
 8004386:	46bd      	mov	sp, r7
 8004388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438c:	4770      	bx	lr
	...

08004390 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b086      	sub	sp, #24
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d101      	bne.n	80043a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	e267      	b.n	8004872 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 0301 	and.w	r3, r3, #1
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d075      	beq.n	800449a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80043ae:	4b88      	ldr	r3, [pc, #544]	; (80045d0 <HAL_RCC_OscConfig+0x240>)
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	f003 030c 	and.w	r3, r3, #12
 80043b6:	2b04      	cmp	r3, #4
 80043b8:	d00c      	beq.n	80043d4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043ba:	4b85      	ldr	r3, [pc, #532]	; (80045d0 <HAL_RCC_OscConfig+0x240>)
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80043c2:	2b08      	cmp	r3, #8
 80043c4:	d112      	bne.n	80043ec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043c6:	4b82      	ldr	r3, [pc, #520]	; (80045d0 <HAL_RCC_OscConfig+0x240>)
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043d2:	d10b      	bne.n	80043ec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043d4:	4b7e      	ldr	r3, [pc, #504]	; (80045d0 <HAL_RCC_OscConfig+0x240>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d05b      	beq.n	8004498 <HAL_RCC_OscConfig+0x108>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d157      	bne.n	8004498 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	e242      	b.n	8004872 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043f4:	d106      	bne.n	8004404 <HAL_RCC_OscConfig+0x74>
 80043f6:	4b76      	ldr	r3, [pc, #472]	; (80045d0 <HAL_RCC_OscConfig+0x240>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a75      	ldr	r2, [pc, #468]	; (80045d0 <HAL_RCC_OscConfig+0x240>)
 80043fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004400:	6013      	str	r3, [r2, #0]
 8004402:	e01d      	b.n	8004440 <HAL_RCC_OscConfig+0xb0>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800440c:	d10c      	bne.n	8004428 <HAL_RCC_OscConfig+0x98>
 800440e:	4b70      	ldr	r3, [pc, #448]	; (80045d0 <HAL_RCC_OscConfig+0x240>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a6f      	ldr	r2, [pc, #444]	; (80045d0 <HAL_RCC_OscConfig+0x240>)
 8004414:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004418:	6013      	str	r3, [r2, #0]
 800441a:	4b6d      	ldr	r3, [pc, #436]	; (80045d0 <HAL_RCC_OscConfig+0x240>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a6c      	ldr	r2, [pc, #432]	; (80045d0 <HAL_RCC_OscConfig+0x240>)
 8004420:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004424:	6013      	str	r3, [r2, #0]
 8004426:	e00b      	b.n	8004440 <HAL_RCC_OscConfig+0xb0>
 8004428:	4b69      	ldr	r3, [pc, #420]	; (80045d0 <HAL_RCC_OscConfig+0x240>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a68      	ldr	r2, [pc, #416]	; (80045d0 <HAL_RCC_OscConfig+0x240>)
 800442e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004432:	6013      	str	r3, [r2, #0]
 8004434:	4b66      	ldr	r3, [pc, #408]	; (80045d0 <HAL_RCC_OscConfig+0x240>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a65      	ldr	r2, [pc, #404]	; (80045d0 <HAL_RCC_OscConfig+0x240>)
 800443a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800443e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d013      	beq.n	8004470 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004448:	f7ff fc92 	bl	8003d70 <HAL_GetTick>
 800444c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800444e:	e008      	b.n	8004462 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004450:	f7ff fc8e 	bl	8003d70 <HAL_GetTick>
 8004454:	4602      	mov	r2, r0
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	1ad3      	subs	r3, r2, r3
 800445a:	2b64      	cmp	r3, #100	; 0x64
 800445c:	d901      	bls.n	8004462 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800445e:	2303      	movs	r3, #3
 8004460:	e207      	b.n	8004872 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004462:	4b5b      	ldr	r3, [pc, #364]	; (80045d0 <HAL_RCC_OscConfig+0x240>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800446a:	2b00      	cmp	r3, #0
 800446c:	d0f0      	beq.n	8004450 <HAL_RCC_OscConfig+0xc0>
 800446e:	e014      	b.n	800449a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004470:	f7ff fc7e 	bl	8003d70 <HAL_GetTick>
 8004474:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004476:	e008      	b.n	800448a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004478:	f7ff fc7a 	bl	8003d70 <HAL_GetTick>
 800447c:	4602      	mov	r2, r0
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	1ad3      	subs	r3, r2, r3
 8004482:	2b64      	cmp	r3, #100	; 0x64
 8004484:	d901      	bls.n	800448a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004486:	2303      	movs	r3, #3
 8004488:	e1f3      	b.n	8004872 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800448a:	4b51      	ldr	r3, [pc, #324]	; (80045d0 <HAL_RCC_OscConfig+0x240>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004492:	2b00      	cmp	r3, #0
 8004494:	d1f0      	bne.n	8004478 <HAL_RCC_OscConfig+0xe8>
 8004496:	e000      	b.n	800449a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004498:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 0302 	and.w	r3, r3, #2
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d063      	beq.n	800456e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80044a6:	4b4a      	ldr	r3, [pc, #296]	; (80045d0 <HAL_RCC_OscConfig+0x240>)
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	f003 030c 	and.w	r3, r3, #12
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d00b      	beq.n	80044ca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044b2:	4b47      	ldr	r3, [pc, #284]	; (80045d0 <HAL_RCC_OscConfig+0x240>)
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80044ba:	2b08      	cmp	r3, #8
 80044bc:	d11c      	bne.n	80044f8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044be:	4b44      	ldr	r3, [pc, #272]	; (80045d0 <HAL_RCC_OscConfig+0x240>)
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d116      	bne.n	80044f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044ca:	4b41      	ldr	r3, [pc, #260]	; (80045d0 <HAL_RCC_OscConfig+0x240>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f003 0302 	and.w	r3, r3, #2
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d005      	beq.n	80044e2 <HAL_RCC_OscConfig+0x152>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	68db      	ldr	r3, [r3, #12]
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d001      	beq.n	80044e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	e1c7      	b.n	8004872 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044e2:	4b3b      	ldr	r3, [pc, #236]	; (80045d0 <HAL_RCC_OscConfig+0x240>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	691b      	ldr	r3, [r3, #16]
 80044ee:	00db      	lsls	r3, r3, #3
 80044f0:	4937      	ldr	r1, [pc, #220]	; (80045d0 <HAL_RCC_OscConfig+0x240>)
 80044f2:	4313      	orrs	r3, r2
 80044f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044f6:	e03a      	b.n	800456e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	68db      	ldr	r3, [r3, #12]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d020      	beq.n	8004542 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004500:	4b34      	ldr	r3, [pc, #208]	; (80045d4 <HAL_RCC_OscConfig+0x244>)
 8004502:	2201      	movs	r2, #1
 8004504:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004506:	f7ff fc33 	bl	8003d70 <HAL_GetTick>
 800450a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800450c:	e008      	b.n	8004520 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800450e:	f7ff fc2f 	bl	8003d70 <HAL_GetTick>
 8004512:	4602      	mov	r2, r0
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	1ad3      	subs	r3, r2, r3
 8004518:	2b02      	cmp	r3, #2
 800451a:	d901      	bls.n	8004520 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800451c:	2303      	movs	r3, #3
 800451e:	e1a8      	b.n	8004872 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004520:	4b2b      	ldr	r3, [pc, #172]	; (80045d0 <HAL_RCC_OscConfig+0x240>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f003 0302 	and.w	r3, r3, #2
 8004528:	2b00      	cmp	r3, #0
 800452a:	d0f0      	beq.n	800450e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800452c:	4b28      	ldr	r3, [pc, #160]	; (80045d0 <HAL_RCC_OscConfig+0x240>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	691b      	ldr	r3, [r3, #16]
 8004538:	00db      	lsls	r3, r3, #3
 800453a:	4925      	ldr	r1, [pc, #148]	; (80045d0 <HAL_RCC_OscConfig+0x240>)
 800453c:	4313      	orrs	r3, r2
 800453e:	600b      	str	r3, [r1, #0]
 8004540:	e015      	b.n	800456e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004542:	4b24      	ldr	r3, [pc, #144]	; (80045d4 <HAL_RCC_OscConfig+0x244>)
 8004544:	2200      	movs	r2, #0
 8004546:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004548:	f7ff fc12 	bl	8003d70 <HAL_GetTick>
 800454c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800454e:	e008      	b.n	8004562 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004550:	f7ff fc0e 	bl	8003d70 <HAL_GetTick>
 8004554:	4602      	mov	r2, r0
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	1ad3      	subs	r3, r2, r3
 800455a:	2b02      	cmp	r3, #2
 800455c:	d901      	bls.n	8004562 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800455e:	2303      	movs	r3, #3
 8004560:	e187      	b.n	8004872 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004562:	4b1b      	ldr	r3, [pc, #108]	; (80045d0 <HAL_RCC_OscConfig+0x240>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f003 0302 	and.w	r3, r3, #2
 800456a:	2b00      	cmp	r3, #0
 800456c:	d1f0      	bne.n	8004550 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f003 0308 	and.w	r3, r3, #8
 8004576:	2b00      	cmp	r3, #0
 8004578:	d036      	beq.n	80045e8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	695b      	ldr	r3, [r3, #20]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d016      	beq.n	80045b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004582:	4b15      	ldr	r3, [pc, #84]	; (80045d8 <HAL_RCC_OscConfig+0x248>)
 8004584:	2201      	movs	r2, #1
 8004586:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004588:	f7ff fbf2 	bl	8003d70 <HAL_GetTick>
 800458c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800458e:	e008      	b.n	80045a2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004590:	f7ff fbee 	bl	8003d70 <HAL_GetTick>
 8004594:	4602      	mov	r2, r0
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	1ad3      	subs	r3, r2, r3
 800459a:	2b02      	cmp	r3, #2
 800459c:	d901      	bls.n	80045a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800459e:	2303      	movs	r3, #3
 80045a0:	e167      	b.n	8004872 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045a2:	4b0b      	ldr	r3, [pc, #44]	; (80045d0 <HAL_RCC_OscConfig+0x240>)
 80045a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045a6:	f003 0302 	and.w	r3, r3, #2
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d0f0      	beq.n	8004590 <HAL_RCC_OscConfig+0x200>
 80045ae:	e01b      	b.n	80045e8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045b0:	4b09      	ldr	r3, [pc, #36]	; (80045d8 <HAL_RCC_OscConfig+0x248>)
 80045b2:	2200      	movs	r2, #0
 80045b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045b6:	f7ff fbdb 	bl	8003d70 <HAL_GetTick>
 80045ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045bc:	e00e      	b.n	80045dc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045be:	f7ff fbd7 	bl	8003d70 <HAL_GetTick>
 80045c2:	4602      	mov	r2, r0
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	1ad3      	subs	r3, r2, r3
 80045c8:	2b02      	cmp	r3, #2
 80045ca:	d907      	bls.n	80045dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80045cc:	2303      	movs	r3, #3
 80045ce:	e150      	b.n	8004872 <HAL_RCC_OscConfig+0x4e2>
 80045d0:	40023800 	.word	0x40023800
 80045d4:	42470000 	.word	0x42470000
 80045d8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045dc:	4b88      	ldr	r3, [pc, #544]	; (8004800 <HAL_RCC_OscConfig+0x470>)
 80045de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045e0:	f003 0302 	and.w	r3, r3, #2
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d1ea      	bne.n	80045be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f003 0304 	and.w	r3, r3, #4
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	f000 8097 	beq.w	8004724 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045f6:	2300      	movs	r3, #0
 80045f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045fa:	4b81      	ldr	r3, [pc, #516]	; (8004800 <HAL_RCC_OscConfig+0x470>)
 80045fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004602:	2b00      	cmp	r3, #0
 8004604:	d10f      	bne.n	8004626 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004606:	2300      	movs	r3, #0
 8004608:	60bb      	str	r3, [r7, #8]
 800460a:	4b7d      	ldr	r3, [pc, #500]	; (8004800 <HAL_RCC_OscConfig+0x470>)
 800460c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800460e:	4a7c      	ldr	r2, [pc, #496]	; (8004800 <HAL_RCC_OscConfig+0x470>)
 8004610:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004614:	6413      	str	r3, [r2, #64]	; 0x40
 8004616:	4b7a      	ldr	r3, [pc, #488]	; (8004800 <HAL_RCC_OscConfig+0x470>)
 8004618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800461e:	60bb      	str	r3, [r7, #8]
 8004620:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004622:	2301      	movs	r3, #1
 8004624:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004626:	4b77      	ldr	r3, [pc, #476]	; (8004804 <HAL_RCC_OscConfig+0x474>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800462e:	2b00      	cmp	r3, #0
 8004630:	d118      	bne.n	8004664 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004632:	4b74      	ldr	r3, [pc, #464]	; (8004804 <HAL_RCC_OscConfig+0x474>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a73      	ldr	r2, [pc, #460]	; (8004804 <HAL_RCC_OscConfig+0x474>)
 8004638:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800463c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800463e:	f7ff fb97 	bl	8003d70 <HAL_GetTick>
 8004642:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004644:	e008      	b.n	8004658 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004646:	f7ff fb93 	bl	8003d70 <HAL_GetTick>
 800464a:	4602      	mov	r2, r0
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	1ad3      	subs	r3, r2, r3
 8004650:	2b02      	cmp	r3, #2
 8004652:	d901      	bls.n	8004658 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004654:	2303      	movs	r3, #3
 8004656:	e10c      	b.n	8004872 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004658:	4b6a      	ldr	r3, [pc, #424]	; (8004804 <HAL_RCC_OscConfig+0x474>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004660:	2b00      	cmp	r3, #0
 8004662:	d0f0      	beq.n	8004646 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	2b01      	cmp	r3, #1
 800466a:	d106      	bne.n	800467a <HAL_RCC_OscConfig+0x2ea>
 800466c:	4b64      	ldr	r3, [pc, #400]	; (8004800 <HAL_RCC_OscConfig+0x470>)
 800466e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004670:	4a63      	ldr	r2, [pc, #396]	; (8004800 <HAL_RCC_OscConfig+0x470>)
 8004672:	f043 0301 	orr.w	r3, r3, #1
 8004676:	6713      	str	r3, [r2, #112]	; 0x70
 8004678:	e01c      	b.n	80046b4 <HAL_RCC_OscConfig+0x324>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	2b05      	cmp	r3, #5
 8004680:	d10c      	bne.n	800469c <HAL_RCC_OscConfig+0x30c>
 8004682:	4b5f      	ldr	r3, [pc, #380]	; (8004800 <HAL_RCC_OscConfig+0x470>)
 8004684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004686:	4a5e      	ldr	r2, [pc, #376]	; (8004800 <HAL_RCC_OscConfig+0x470>)
 8004688:	f043 0304 	orr.w	r3, r3, #4
 800468c:	6713      	str	r3, [r2, #112]	; 0x70
 800468e:	4b5c      	ldr	r3, [pc, #368]	; (8004800 <HAL_RCC_OscConfig+0x470>)
 8004690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004692:	4a5b      	ldr	r2, [pc, #364]	; (8004800 <HAL_RCC_OscConfig+0x470>)
 8004694:	f043 0301 	orr.w	r3, r3, #1
 8004698:	6713      	str	r3, [r2, #112]	; 0x70
 800469a:	e00b      	b.n	80046b4 <HAL_RCC_OscConfig+0x324>
 800469c:	4b58      	ldr	r3, [pc, #352]	; (8004800 <HAL_RCC_OscConfig+0x470>)
 800469e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046a0:	4a57      	ldr	r2, [pc, #348]	; (8004800 <HAL_RCC_OscConfig+0x470>)
 80046a2:	f023 0301 	bic.w	r3, r3, #1
 80046a6:	6713      	str	r3, [r2, #112]	; 0x70
 80046a8:	4b55      	ldr	r3, [pc, #340]	; (8004800 <HAL_RCC_OscConfig+0x470>)
 80046aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ac:	4a54      	ldr	r2, [pc, #336]	; (8004800 <HAL_RCC_OscConfig+0x470>)
 80046ae:	f023 0304 	bic.w	r3, r3, #4
 80046b2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d015      	beq.n	80046e8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046bc:	f7ff fb58 	bl	8003d70 <HAL_GetTick>
 80046c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046c2:	e00a      	b.n	80046da <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046c4:	f7ff fb54 	bl	8003d70 <HAL_GetTick>
 80046c8:	4602      	mov	r2, r0
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	1ad3      	subs	r3, r2, r3
 80046ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d901      	bls.n	80046da <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80046d6:	2303      	movs	r3, #3
 80046d8:	e0cb      	b.n	8004872 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046da:	4b49      	ldr	r3, [pc, #292]	; (8004800 <HAL_RCC_OscConfig+0x470>)
 80046dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046de:	f003 0302 	and.w	r3, r3, #2
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d0ee      	beq.n	80046c4 <HAL_RCC_OscConfig+0x334>
 80046e6:	e014      	b.n	8004712 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046e8:	f7ff fb42 	bl	8003d70 <HAL_GetTick>
 80046ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046ee:	e00a      	b.n	8004706 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046f0:	f7ff fb3e 	bl	8003d70 <HAL_GetTick>
 80046f4:	4602      	mov	r2, r0
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	1ad3      	subs	r3, r2, r3
 80046fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80046fe:	4293      	cmp	r3, r2
 8004700:	d901      	bls.n	8004706 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004702:	2303      	movs	r3, #3
 8004704:	e0b5      	b.n	8004872 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004706:	4b3e      	ldr	r3, [pc, #248]	; (8004800 <HAL_RCC_OscConfig+0x470>)
 8004708:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800470a:	f003 0302 	and.w	r3, r3, #2
 800470e:	2b00      	cmp	r3, #0
 8004710:	d1ee      	bne.n	80046f0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004712:	7dfb      	ldrb	r3, [r7, #23]
 8004714:	2b01      	cmp	r3, #1
 8004716:	d105      	bne.n	8004724 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004718:	4b39      	ldr	r3, [pc, #228]	; (8004800 <HAL_RCC_OscConfig+0x470>)
 800471a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800471c:	4a38      	ldr	r2, [pc, #224]	; (8004800 <HAL_RCC_OscConfig+0x470>)
 800471e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004722:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	699b      	ldr	r3, [r3, #24]
 8004728:	2b00      	cmp	r3, #0
 800472a:	f000 80a1 	beq.w	8004870 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800472e:	4b34      	ldr	r3, [pc, #208]	; (8004800 <HAL_RCC_OscConfig+0x470>)
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	f003 030c 	and.w	r3, r3, #12
 8004736:	2b08      	cmp	r3, #8
 8004738:	d05c      	beq.n	80047f4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	699b      	ldr	r3, [r3, #24]
 800473e:	2b02      	cmp	r3, #2
 8004740:	d141      	bne.n	80047c6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004742:	4b31      	ldr	r3, [pc, #196]	; (8004808 <HAL_RCC_OscConfig+0x478>)
 8004744:	2200      	movs	r2, #0
 8004746:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004748:	f7ff fb12 	bl	8003d70 <HAL_GetTick>
 800474c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800474e:	e008      	b.n	8004762 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004750:	f7ff fb0e 	bl	8003d70 <HAL_GetTick>
 8004754:	4602      	mov	r2, r0
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	1ad3      	subs	r3, r2, r3
 800475a:	2b02      	cmp	r3, #2
 800475c:	d901      	bls.n	8004762 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800475e:	2303      	movs	r3, #3
 8004760:	e087      	b.n	8004872 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004762:	4b27      	ldr	r3, [pc, #156]	; (8004800 <HAL_RCC_OscConfig+0x470>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800476a:	2b00      	cmp	r3, #0
 800476c:	d1f0      	bne.n	8004750 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	69da      	ldr	r2, [r3, #28]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6a1b      	ldr	r3, [r3, #32]
 8004776:	431a      	orrs	r2, r3
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800477c:	019b      	lsls	r3, r3, #6
 800477e:	431a      	orrs	r2, r3
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004784:	085b      	lsrs	r3, r3, #1
 8004786:	3b01      	subs	r3, #1
 8004788:	041b      	lsls	r3, r3, #16
 800478a:	431a      	orrs	r2, r3
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004790:	061b      	lsls	r3, r3, #24
 8004792:	491b      	ldr	r1, [pc, #108]	; (8004800 <HAL_RCC_OscConfig+0x470>)
 8004794:	4313      	orrs	r3, r2
 8004796:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004798:	4b1b      	ldr	r3, [pc, #108]	; (8004808 <HAL_RCC_OscConfig+0x478>)
 800479a:	2201      	movs	r2, #1
 800479c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800479e:	f7ff fae7 	bl	8003d70 <HAL_GetTick>
 80047a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047a4:	e008      	b.n	80047b8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047a6:	f7ff fae3 	bl	8003d70 <HAL_GetTick>
 80047aa:	4602      	mov	r2, r0
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	1ad3      	subs	r3, r2, r3
 80047b0:	2b02      	cmp	r3, #2
 80047b2:	d901      	bls.n	80047b8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80047b4:	2303      	movs	r3, #3
 80047b6:	e05c      	b.n	8004872 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047b8:	4b11      	ldr	r3, [pc, #68]	; (8004800 <HAL_RCC_OscConfig+0x470>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d0f0      	beq.n	80047a6 <HAL_RCC_OscConfig+0x416>
 80047c4:	e054      	b.n	8004870 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047c6:	4b10      	ldr	r3, [pc, #64]	; (8004808 <HAL_RCC_OscConfig+0x478>)
 80047c8:	2200      	movs	r2, #0
 80047ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047cc:	f7ff fad0 	bl	8003d70 <HAL_GetTick>
 80047d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047d2:	e008      	b.n	80047e6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047d4:	f7ff facc 	bl	8003d70 <HAL_GetTick>
 80047d8:	4602      	mov	r2, r0
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	1ad3      	subs	r3, r2, r3
 80047de:	2b02      	cmp	r3, #2
 80047e0:	d901      	bls.n	80047e6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80047e2:	2303      	movs	r3, #3
 80047e4:	e045      	b.n	8004872 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047e6:	4b06      	ldr	r3, [pc, #24]	; (8004800 <HAL_RCC_OscConfig+0x470>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d1f0      	bne.n	80047d4 <HAL_RCC_OscConfig+0x444>
 80047f2:	e03d      	b.n	8004870 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	699b      	ldr	r3, [r3, #24]
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	d107      	bne.n	800480c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80047fc:	2301      	movs	r3, #1
 80047fe:	e038      	b.n	8004872 <HAL_RCC_OscConfig+0x4e2>
 8004800:	40023800 	.word	0x40023800
 8004804:	40007000 	.word	0x40007000
 8004808:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800480c:	4b1b      	ldr	r3, [pc, #108]	; (800487c <HAL_RCC_OscConfig+0x4ec>)
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	699b      	ldr	r3, [r3, #24]
 8004816:	2b01      	cmp	r3, #1
 8004818:	d028      	beq.n	800486c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004824:	429a      	cmp	r2, r3
 8004826:	d121      	bne.n	800486c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004832:	429a      	cmp	r2, r3
 8004834:	d11a      	bne.n	800486c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004836:	68fa      	ldr	r2, [r7, #12]
 8004838:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800483c:	4013      	ands	r3, r2
 800483e:	687a      	ldr	r2, [r7, #4]
 8004840:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004842:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004844:	4293      	cmp	r3, r2
 8004846:	d111      	bne.n	800486c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004852:	085b      	lsrs	r3, r3, #1
 8004854:	3b01      	subs	r3, #1
 8004856:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004858:	429a      	cmp	r2, r3
 800485a:	d107      	bne.n	800486c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004866:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004868:	429a      	cmp	r2, r3
 800486a:	d001      	beq.n	8004870 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	e000      	b.n	8004872 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004870:	2300      	movs	r3, #0
}
 8004872:	4618      	mov	r0, r3
 8004874:	3718      	adds	r7, #24
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}
 800487a:	bf00      	nop
 800487c:	40023800 	.word	0x40023800

08004880 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b084      	sub	sp, #16
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
 8004888:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d101      	bne.n	8004894 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004890:	2301      	movs	r3, #1
 8004892:	e0cc      	b.n	8004a2e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004894:	4b68      	ldr	r3, [pc, #416]	; (8004a38 <HAL_RCC_ClockConfig+0x1b8>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f003 0307 	and.w	r3, r3, #7
 800489c:	683a      	ldr	r2, [r7, #0]
 800489e:	429a      	cmp	r2, r3
 80048a0:	d90c      	bls.n	80048bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048a2:	4b65      	ldr	r3, [pc, #404]	; (8004a38 <HAL_RCC_ClockConfig+0x1b8>)
 80048a4:	683a      	ldr	r2, [r7, #0]
 80048a6:	b2d2      	uxtb	r2, r2
 80048a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048aa:	4b63      	ldr	r3, [pc, #396]	; (8004a38 <HAL_RCC_ClockConfig+0x1b8>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f003 0307 	and.w	r3, r3, #7
 80048b2:	683a      	ldr	r2, [r7, #0]
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d001      	beq.n	80048bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80048b8:	2301      	movs	r3, #1
 80048ba:	e0b8      	b.n	8004a2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 0302 	and.w	r3, r3, #2
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d020      	beq.n	800490a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f003 0304 	and.w	r3, r3, #4
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d005      	beq.n	80048e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048d4:	4b59      	ldr	r3, [pc, #356]	; (8004a3c <HAL_RCC_ClockConfig+0x1bc>)
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	4a58      	ldr	r2, [pc, #352]	; (8004a3c <HAL_RCC_ClockConfig+0x1bc>)
 80048da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80048de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f003 0308 	and.w	r3, r3, #8
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d005      	beq.n	80048f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80048ec:	4b53      	ldr	r3, [pc, #332]	; (8004a3c <HAL_RCC_ClockConfig+0x1bc>)
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	4a52      	ldr	r2, [pc, #328]	; (8004a3c <HAL_RCC_ClockConfig+0x1bc>)
 80048f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80048f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048f8:	4b50      	ldr	r3, [pc, #320]	; (8004a3c <HAL_RCC_ClockConfig+0x1bc>)
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	494d      	ldr	r1, [pc, #308]	; (8004a3c <HAL_RCC_ClockConfig+0x1bc>)
 8004906:	4313      	orrs	r3, r2
 8004908:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f003 0301 	and.w	r3, r3, #1
 8004912:	2b00      	cmp	r3, #0
 8004914:	d044      	beq.n	80049a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	2b01      	cmp	r3, #1
 800491c:	d107      	bne.n	800492e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800491e:	4b47      	ldr	r3, [pc, #284]	; (8004a3c <HAL_RCC_ClockConfig+0x1bc>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004926:	2b00      	cmp	r3, #0
 8004928:	d119      	bne.n	800495e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	e07f      	b.n	8004a2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	2b02      	cmp	r3, #2
 8004934:	d003      	beq.n	800493e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800493a:	2b03      	cmp	r3, #3
 800493c:	d107      	bne.n	800494e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800493e:	4b3f      	ldr	r3, [pc, #252]	; (8004a3c <HAL_RCC_ClockConfig+0x1bc>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004946:	2b00      	cmp	r3, #0
 8004948:	d109      	bne.n	800495e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	e06f      	b.n	8004a2e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800494e:	4b3b      	ldr	r3, [pc, #236]	; (8004a3c <HAL_RCC_ClockConfig+0x1bc>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f003 0302 	and.w	r3, r3, #2
 8004956:	2b00      	cmp	r3, #0
 8004958:	d101      	bne.n	800495e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	e067      	b.n	8004a2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800495e:	4b37      	ldr	r3, [pc, #220]	; (8004a3c <HAL_RCC_ClockConfig+0x1bc>)
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	f023 0203 	bic.w	r2, r3, #3
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	4934      	ldr	r1, [pc, #208]	; (8004a3c <HAL_RCC_ClockConfig+0x1bc>)
 800496c:	4313      	orrs	r3, r2
 800496e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004970:	f7ff f9fe 	bl	8003d70 <HAL_GetTick>
 8004974:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004976:	e00a      	b.n	800498e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004978:	f7ff f9fa 	bl	8003d70 <HAL_GetTick>
 800497c:	4602      	mov	r2, r0
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	1ad3      	subs	r3, r2, r3
 8004982:	f241 3288 	movw	r2, #5000	; 0x1388
 8004986:	4293      	cmp	r3, r2
 8004988:	d901      	bls.n	800498e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800498a:	2303      	movs	r3, #3
 800498c:	e04f      	b.n	8004a2e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800498e:	4b2b      	ldr	r3, [pc, #172]	; (8004a3c <HAL_RCC_ClockConfig+0x1bc>)
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	f003 020c 	and.w	r2, r3, #12
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	009b      	lsls	r3, r3, #2
 800499c:	429a      	cmp	r2, r3
 800499e:	d1eb      	bne.n	8004978 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80049a0:	4b25      	ldr	r3, [pc, #148]	; (8004a38 <HAL_RCC_ClockConfig+0x1b8>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f003 0307 	and.w	r3, r3, #7
 80049a8:	683a      	ldr	r2, [r7, #0]
 80049aa:	429a      	cmp	r2, r3
 80049ac:	d20c      	bcs.n	80049c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049ae:	4b22      	ldr	r3, [pc, #136]	; (8004a38 <HAL_RCC_ClockConfig+0x1b8>)
 80049b0:	683a      	ldr	r2, [r7, #0]
 80049b2:	b2d2      	uxtb	r2, r2
 80049b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049b6:	4b20      	ldr	r3, [pc, #128]	; (8004a38 <HAL_RCC_ClockConfig+0x1b8>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f003 0307 	and.w	r3, r3, #7
 80049be:	683a      	ldr	r2, [r7, #0]
 80049c0:	429a      	cmp	r2, r3
 80049c2:	d001      	beq.n	80049c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	e032      	b.n	8004a2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f003 0304 	and.w	r3, r3, #4
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d008      	beq.n	80049e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049d4:	4b19      	ldr	r3, [pc, #100]	; (8004a3c <HAL_RCC_ClockConfig+0x1bc>)
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	68db      	ldr	r3, [r3, #12]
 80049e0:	4916      	ldr	r1, [pc, #88]	; (8004a3c <HAL_RCC_ClockConfig+0x1bc>)
 80049e2:	4313      	orrs	r3, r2
 80049e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f003 0308 	and.w	r3, r3, #8
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d009      	beq.n	8004a06 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80049f2:	4b12      	ldr	r3, [pc, #72]	; (8004a3c <HAL_RCC_ClockConfig+0x1bc>)
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	691b      	ldr	r3, [r3, #16]
 80049fe:	00db      	lsls	r3, r3, #3
 8004a00:	490e      	ldr	r1, [pc, #56]	; (8004a3c <HAL_RCC_ClockConfig+0x1bc>)
 8004a02:	4313      	orrs	r3, r2
 8004a04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004a06:	f000 f821 	bl	8004a4c <HAL_RCC_GetSysClockFreq>
 8004a0a:	4602      	mov	r2, r0
 8004a0c:	4b0b      	ldr	r3, [pc, #44]	; (8004a3c <HAL_RCC_ClockConfig+0x1bc>)
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	091b      	lsrs	r3, r3, #4
 8004a12:	f003 030f 	and.w	r3, r3, #15
 8004a16:	490a      	ldr	r1, [pc, #40]	; (8004a40 <HAL_RCC_ClockConfig+0x1c0>)
 8004a18:	5ccb      	ldrb	r3, [r1, r3]
 8004a1a:	fa22 f303 	lsr.w	r3, r2, r3
 8004a1e:	4a09      	ldr	r2, [pc, #36]	; (8004a44 <HAL_RCC_ClockConfig+0x1c4>)
 8004a20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004a22:	4b09      	ldr	r3, [pc, #36]	; (8004a48 <HAL_RCC_ClockConfig+0x1c8>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4618      	mov	r0, r3
 8004a28:	f7ff f95e 	bl	8003ce8 <HAL_InitTick>

  return HAL_OK;
 8004a2c:	2300      	movs	r3, #0
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	3710      	adds	r7, #16
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}
 8004a36:	bf00      	nop
 8004a38:	40023c00 	.word	0x40023c00
 8004a3c:	40023800 	.word	0x40023800
 8004a40:	0802613c 	.word	0x0802613c
 8004a44:	20000000 	.word	0x20000000
 8004a48:	20000010 	.word	0x20000010

08004a4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a50:	b090      	sub	sp, #64	; 0x40
 8004a52:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004a54:	2300      	movs	r3, #0
 8004a56:	637b      	str	r3, [r7, #52]	; 0x34
 8004a58:	2300      	movs	r3, #0
 8004a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004a60:	2300      	movs	r3, #0
 8004a62:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a64:	4b59      	ldr	r3, [pc, #356]	; (8004bcc <HAL_RCC_GetSysClockFreq+0x180>)
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	f003 030c 	and.w	r3, r3, #12
 8004a6c:	2b08      	cmp	r3, #8
 8004a6e:	d00d      	beq.n	8004a8c <HAL_RCC_GetSysClockFreq+0x40>
 8004a70:	2b08      	cmp	r3, #8
 8004a72:	f200 80a1 	bhi.w	8004bb8 <HAL_RCC_GetSysClockFreq+0x16c>
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d002      	beq.n	8004a80 <HAL_RCC_GetSysClockFreq+0x34>
 8004a7a:	2b04      	cmp	r3, #4
 8004a7c:	d003      	beq.n	8004a86 <HAL_RCC_GetSysClockFreq+0x3a>
 8004a7e:	e09b      	b.n	8004bb8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a80:	4b53      	ldr	r3, [pc, #332]	; (8004bd0 <HAL_RCC_GetSysClockFreq+0x184>)
 8004a82:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004a84:	e09b      	b.n	8004bbe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a86:	4b53      	ldr	r3, [pc, #332]	; (8004bd4 <HAL_RCC_GetSysClockFreq+0x188>)
 8004a88:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004a8a:	e098      	b.n	8004bbe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a8c:	4b4f      	ldr	r3, [pc, #316]	; (8004bcc <HAL_RCC_GetSysClockFreq+0x180>)
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a94:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a96:	4b4d      	ldr	r3, [pc, #308]	; (8004bcc <HAL_RCC_GetSysClockFreq+0x180>)
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d028      	beq.n	8004af4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004aa2:	4b4a      	ldr	r3, [pc, #296]	; (8004bcc <HAL_RCC_GetSysClockFreq+0x180>)
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	099b      	lsrs	r3, r3, #6
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	623b      	str	r3, [r7, #32]
 8004aac:	627a      	str	r2, [r7, #36]	; 0x24
 8004aae:	6a3b      	ldr	r3, [r7, #32]
 8004ab0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004ab4:	2100      	movs	r1, #0
 8004ab6:	4b47      	ldr	r3, [pc, #284]	; (8004bd4 <HAL_RCC_GetSysClockFreq+0x188>)
 8004ab8:	fb03 f201 	mul.w	r2, r3, r1
 8004abc:	2300      	movs	r3, #0
 8004abe:	fb00 f303 	mul.w	r3, r0, r3
 8004ac2:	4413      	add	r3, r2
 8004ac4:	4a43      	ldr	r2, [pc, #268]	; (8004bd4 <HAL_RCC_GetSysClockFreq+0x188>)
 8004ac6:	fba0 1202 	umull	r1, r2, r0, r2
 8004aca:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004acc:	460a      	mov	r2, r1
 8004ace:	62ba      	str	r2, [r7, #40]	; 0x28
 8004ad0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ad2:	4413      	add	r3, r2
 8004ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ad6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ad8:	2200      	movs	r2, #0
 8004ada:	61bb      	str	r3, [r7, #24]
 8004adc:	61fa      	str	r2, [r7, #28]
 8004ade:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ae2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004ae6:	f7fb fb77 	bl	80001d8 <__aeabi_uldivmod>
 8004aea:	4602      	mov	r2, r0
 8004aec:	460b      	mov	r3, r1
 8004aee:	4613      	mov	r3, r2
 8004af0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004af2:	e053      	b.n	8004b9c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004af4:	4b35      	ldr	r3, [pc, #212]	; (8004bcc <HAL_RCC_GetSysClockFreq+0x180>)
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	099b      	lsrs	r3, r3, #6
 8004afa:	2200      	movs	r2, #0
 8004afc:	613b      	str	r3, [r7, #16]
 8004afe:	617a      	str	r2, [r7, #20]
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004b06:	f04f 0b00 	mov.w	fp, #0
 8004b0a:	4652      	mov	r2, sl
 8004b0c:	465b      	mov	r3, fp
 8004b0e:	f04f 0000 	mov.w	r0, #0
 8004b12:	f04f 0100 	mov.w	r1, #0
 8004b16:	0159      	lsls	r1, r3, #5
 8004b18:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b1c:	0150      	lsls	r0, r2, #5
 8004b1e:	4602      	mov	r2, r0
 8004b20:	460b      	mov	r3, r1
 8004b22:	ebb2 080a 	subs.w	r8, r2, sl
 8004b26:	eb63 090b 	sbc.w	r9, r3, fp
 8004b2a:	f04f 0200 	mov.w	r2, #0
 8004b2e:	f04f 0300 	mov.w	r3, #0
 8004b32:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004b36:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004b3a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004b3e:	ebb2 0408 	subs.w	r4, r2, r8
 8004b42:	eb63 0509 	sbc.w	r5, r3, r9
 8004b46:	f04f 0200 	mov.w	r2, #0
 8004b4a:	f04f 0300 	mov.w	r3, #0
 8004b4e:	00eb      	lsls	r3, r5, #3
 8004b50:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b54:	00e2      	lsls	r2, r4, #3
 8004b56:	4614      	mov	r4, r2
 8004b58:	461d      	mov	r5, r3
 8004b5a:	eb14 030a 	adds.w	r3, r4, sl
 8004b5e:	603b      	str	r3, [r7, #0]
 8004b60:	eb45 030b 	adc.w	r3, r5, fp
 8004b64:	607b      	str	r3, [r7, #4]
 8004b66:	f04f 0200 	mov.w	r2, #0
 8004b6a:	f04f 0300 	mov.w	r3, #0
 8004b6e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004b72:	4629      	mov	r1, r5
 8004b74:	028b      	lsls	r3, r1, #10
 8004b76:	4621      	mov	r1, r4
 8004b78:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004b7c:	4621      	mov	r1, r4
 8004b7e:	028a      	lsls	r2, r1, #10
 8004b80:	4610      	mov	r0, r2
 8004b82:	4619      	mov	r1, r3
 8004b84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b86:	2200      	movs	r2, #0
 8004b88:	60bb      	str	r3, [r7, #8]
 8004b8a:	60fa      	str	r2, [r7, #12]
 8004b8c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004b90:	f7fb fb22 	bl	80001d8 <__aeabi_uldivmod>
 8004b94:	4602      	mov	r2, r0
 8004b96:	460b      	mov	r3, r1
 8004b98:	4613      	mov	r3, r2
 8004b9a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004b9c:	4b0b      	ldr	r3, [pc, #44]	; (8004bcc <HAL_RCC_GetSysClockFreq+0x180>)
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	0c1b      	lsrs	r3, r3, #16
 8004ba2:	f003 0303 	and.w	r3, r3, #3
 8004ba6:	3301      	adds	r3, #1
 8004ba8:	005b      	lsls	r3, r3, #1
 8004baa:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004bac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bb4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004bb6:	e002      	b.n	8004bbe <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004bb8:	4b05      	ldr	r3, [pc, #20]	; (8004bd0 <HAL_RCC_GetSysClockFreq+0x184>)
 8004bba:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004bbc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	3740      	adds	r7, #64	; 0x40
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004bca:	bf00      	nop
 8004bcc:	40023800 	.word	0x40023800
 8004bd0:	00f42400 	.word	0x00f42400
 8004bd4:	017d7840 	.word	0x017d7840

08004bd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004bdc:	4b03      	ldr	r3, [pc, #12]	; (8004bec <HAL_RCC_GetHCLKFreq+0x14>)
 8004bde:	681b      	ldr	r3, [r3, #0]
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	46bd      	mov	sp, r7
 8004be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be8:	4770      	bx	lr
 8004bea:	bf00      	nop
 8004bec:	20000000 	.word	0x20000000

08004bf0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004bf4:	f7ff fff0 	bl	8004bd8 <HAL_RCC_GetHCLKFreq>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	4b05      	ldr	r3, [pc, #20]	; (8004c10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	0a9b      	lsrs	r3, r3, #10
 8004c00:	f003 0307 	and.w	r3, r3, #7
 8004c04:	4903      	ldr	r1, [pc, #12]	; (8004c14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c06:	5ccb      	ldrb	r3, [r1, r3]
 8004c08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	bd80      	pop	{r7, pc}
 8004c10:	40023800 	.word	0x40023800
 8004c14:	0802614c 	.word	0x0802614c

08004c18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004c1c:	f7ff ffdc 	bl	8004bd8 <HAL_RCC_GetHCLKFreq>
 8004c20:	4602      	mov	r2, r0
 8004c22:	4b05      	ldr	r3, [pc, #20]	; (8004c38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	0b5b      	lsrs	r3, r3, #13
 8004c28:	f003 0307 	and.w	r3, r3, #7
 8004c2c:	4903      	ldr	r1, [pc, #12]	; (8004c3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c2e:	5ccb      	ldrb	r3, [r1, r3]
 8004c30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	bd80      	pop	{r7, pc}
 8004c38:	40023800 	.word	0x40023800
 8004c3c:	0802614c 	.word	0x0802614c

08004c40 <memset>:
 8004c40:	4402      	add	r2, r0
 8004c42:	4603      	mov	r3, r0
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d100      	bne.n	8004c4a <memset+0xa>
 8004c48:	4770      	bx	lr
 8004c4a:	f803 1b01 	strb.w	r1, [r3], #1
 8004c4e:	e7f9      	b.n	8004c44 <memset+0x4>

08004c50 <__libc_init_array>:
 8004c50:	b570      	push	{r4, r5, r6, lr}
 8004c52:	4d0d      	ldr	r5, [pc, #52]	; (8004c88 <__libc_init_array+0x38>)
 8004c54:	4c0d      	ldr	r4, [pc, #52]	; (8004c8c <__libc_init_array+0x3c>)
 8004c56:	1b64      	subs	r4, r4, r5
 8004c58:	10a4      	asrs	r4, r4, #2
 8004c5a:	2600      	movs	r6, #0
 8004c5c:	42a6      	cmp	r6, r4
 8004c5e:	d109      	bne.n	8004c74 <__libc_init_array+0x24>
 8004c60:	4d0b      	ldr	r5, [pc, #44]	; (8004c90 <__libc_init_array+0x40>)
 8004c62:	4c0c      	ldr	r4, [pc, #48]	; (8004c94 <__libc_init_array+0x44>)
 8004c64:	f000 f826 	bl	8004cb4 <_init>
 8004c68:	1b64      	subs	r4, r4, r5
 8004c6a:	10a4      	asrs	r4, r4, #2
 8004c6c:	2600      	movs	r6, #0
 8004c6e:	42a6      	cmp	r6, r4
 8004c70:	d105      	bne.n	8004c7e <__libc_init_array+0x2e>
 8004c72:	bd70      	pop	{r4, r5, r6, pc}
 8004c74:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c78:	4798      	blx	r3
 8004c7a:	3601      	adds	r6, #1
 8004c7c:	e7ee      	b.n	8004c5c <__libc_init_array+0xc>
 8004c7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c82:	4798      	blx	r3
 8004c84:	3601      	adds	r6, #1
 8004c86:	e7f2      	b.n	8004c6e <__libc_init_array+0x1e>
 8004c88:	0802615c 	.word	0x0802615c
 8004c8c:	0802615c 	.word	0x0802615c
 8004c90:	0802615c 	.word	0x0802615c
 8004c94:	08026160 	.word	0x08026160

08004c98 <memcpy>:
 8004c98:	440a      	add	r2, r1
 8004c9a:	4291      	cmp	r1, r2
 8004c9c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004ca0:	d100      	bne.n	8004ca4 <memcpy+0xc>
 8004ca2:	4770      	bx	lr
 8004ca4:	b510      	push	{r4, lr}
 8004ca6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004caa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004cae:	4291      	cmp	r1, r2
 8004cb0:	d1f9      	bne.n	8004ca6 <memcpy+0xe>
 8004cb2:	bd10      	pop	{r4, pc}

08004cb4 <_init>:
 8004cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cb6:	bf00      	nop
 8004cb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cba:	bc08      	pop	{r3}
 8004cbc:	469e      	mov	lr, r3
 8004cbe:	4770      	bx	lr

08004cc0 <_fini>:
 8004cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cc2:	bf00      	nop
 8004cc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cc6:	bc08      	pop	{r3}
 8004cc8:	469e      	mov	lr, r3
 8004cca:	4770      	bx	lr
